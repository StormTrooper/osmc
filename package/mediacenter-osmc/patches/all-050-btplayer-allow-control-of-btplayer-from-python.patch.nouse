From e659f55a21f3ecd688dab5447575b45db9452d1c Mon Sep 17 00:00:00 2001
From: Gerald Barker <gezbgit config --global user.email>
Date: Sat, 13 Feb 2016 17:13:04 +0000
Subject: [PATCH 2/3] [BTPlayer] Allow control of BTPlayer from the Kodi Python
 module

---
 xbmc/interfaces/legacy/ModuleXbmc.cpp | 67 ++++++++++++++++++++++++++++++++++-
 xbmc/interfaces/legacy/ModuleXbmc.h   | 23 +++++++++++-
 2 files changed, 88 insertions(+), 2 deletions(-)

diff --git a/xbmc/interfaces/legacy/ModuleXbmc.cpp b/xbmc/interfaces/legacy/ModuleXbmc.cpp
index 7bf9093..87c1ea8 100644
--- a/xbmc/interfaces/legacy/ModuleXbmc.cpp
+++ b/xbmc/interfaces/legacy/ModuleXbmc.cpp
@@ -56,6 +56,9 @@
 #include "LanguageHook.h"
 
 #include "cores/VideoRenderers/RenderCapture.h"
+#include "FileItem.h"
+#include "cores/playercorefactory/PlayerCoreConfig.h"
+#include "cores/playercorefactory/PlayerCoreFactory.h"
 
 #include "threads/SystemClock.h"
 #include <vector>
@@ -563,5 +566,67 @@ namespace XBMCAddon
     int getENGLISH_NAME() { return CLangCodeExpander::ENGLISH_NAME; }
 
     const int lLOGNOTICE = LOGNOTICE;
+
+          PLAYERCOREID findBTPlayer()
+        {
+            PLAYERCOREID btPlayerId = 0;
+            VECPLAYERCORES players;
+            CPlayerCoreFactory::GetInstance().GetPlayers(players, true, false);
+            for (VECPLAYERCORES::const_iterator itPlayer = players.begin(); itPlayer != players.end(); ++itPlayer)
+            {
+                PLAYERCOREID playerId = *itPlayer;
+                const CPlayerCoreConfig* playerConfig = CPlayerCoreFactory::GetInstance().GetPlayerConfig(playerId);
+                if (playerConfig == NULL)
+                    continue;
+
+                if (playerConfig->GetType() == EPC_BTPLAYER)
+                {
+                    btPlayerId = playerId;
+                }
+            }
+            // check if the there's actually a player with the given player ID
+            if (CPlayerCoreFactory::GetInstance().GetPlayerConfig(btPlayerId) == NULL)
+            {
+                btPlayerId = 0;
+            }
+            return btPlayerId;
+        }
+
+        void startBTPlayer(const char* dbus_path)
+        {
+            XBMC_TRACE
+            CFileItemList list;
+            CFileItemPtr item;
+            item.reset(new CFileItem(dbus_path, false));
+            list.Add(item);
+
+            PLAYERCOREID btPlayerId = findBTPlayer();
+            // set the next player to be used
+            g_application.m_eForcedNextPlayer = btPlayerId;
+            auto fileItemList = new CFileItemList(); //don't delete
+            fileItemList->Copy(list);
+
+            CApplicationMessenger::GetInstance().SendMsg(TMSG_MEDIA_PLAY, -1, -1, static_cast<void*>(fileItemList));
+        }
+
+        void stopBTPlayer()
+        {
+            PLAYERCOREID btPlayerId = findBTPlayer();
+            if (g_application.m_pPlayer->GetCurrentPlayer() == btPlayerId && g_application
+                .m_pPlayer->IsPlayingAudio())
+            {
+                CApplicationMessenger::GetInstance().SendMsg(TMSG_MEDIA_STOP, static_cast<int>(btPlayerId));
+            }
+        }
+
+         bool isBTPlayerActive()
+        {
+            PLAYERCOREID btPlayerId = findBTPlayer();
+            if (g_application.m_pPlayer->GetCurrentPlayer() == btPlayerId)
+            {
+                return true;
+            }
+            return FALSE;
+        }
+    }
   }
-}
diff --git a/xbmc/interfaces/legacy/ModuleXbmc.h b/xbmc/interfaces/legacy/ModuleXbmc.h
index 09169dd..1753a8b 100644
--- a/xbmc/interfaces/legacy/ModuleXbmc.h
+++ b/xbmc/interfaces/legacy/ModuleXbmc.h
@@ -418,7 +418,28 @@ namespace XBMCAddon
     */
     String convertLanguage(const char* language, int format); 
 
-    SWIG_CONSTANT_FROM_GETTER(int,SERVER_WEBSERVER);
+    /**
+     * startBTPlayer()
+     *
+     * dbus_path the DBUS path to the Player object to mintor for A2DP track information
+     *
+     * example:
+     *  - xbmc.startBTPlayer("/org/bluez/hci0/dev_FXX_XX_XX_XX_XX_XX_XX/player0")
+     */
+	 void startBTPlayer(const char* dbus_path);
+
+    /**
+    * stopBTPlayer() -- Stops BTPlayer
+    */
+    void stopBTPlayer();
+
+    /**
+    * isBTPlayerActive() -- returns true if BTPlayer is active
+    */
+    bool isBTPlayerActive();
+
+    SWIG_CONSTANT_FROM_GETTER(int, SERVER_WEBSERVER);
+
     SWIG_CONSTANT_FROM_GETTER(int,SERVER_AIRPLAYSERVER);
     SWIG_CONSTANT_FROM_GETTER(int,SERVER_UPNPSERVER);
     SWIG_CONSTANT_FROM_GETTER(int,SERVER_UPNPRENDERER);
-- 
2.1.4

