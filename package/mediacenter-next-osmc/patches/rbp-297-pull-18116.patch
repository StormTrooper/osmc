From 5c366770cece0a6cef3592d9383bfcb3cdf8bd83 Mon Sep 17 00:00:00 2001
From: phunkyfish <phunkyfish@gmail.com>
Date: Tue, 30 Jun 2020 10:58:15 +0100
Subject: [PATCH] [addons] Show both enabled and disabled incompatbile addons
 when performing a migration

---
 xbmc/Application.cpp         |  4 ++--
 xbmc/addons/AddonManager.cpp | 16 ++++++++++++----
 xbmc/addons/AddonManager.h   | 21 ++++++++++++++++-----
 3 files changed, 30 insertions(+), 11 deletions(-)

diff --git a/xbmc/Application.cpp b/xbmc/Application.cpp
index a31109ca3da2..a82b9a5f2d93 100644
--- a/xbmc/Application.cpp
+++ b/xbmc/Application.cpp
@@ -794,7 +794,7 @@ bool CApplication::Initialize()
 
     // Addon migration
     std::vector<AddonInfoPtr> incompatible;
-    if (CServiceBroker::GetAddonMgr().GetIncompatibleAddons(incompatible))
+    if (CServiceBroker::GetAddonMgr().GetIncompatibleEnabledAddonInfos(incompatible))
     {
       if (CAddonSystemSettings::GetInstance().GetAddonAutoUpdateMode() == AUTO_UPDATES_ON)
       {
@@ -2331,7 +2331,7 @@ void CApplication::OnApplicationMessage(ThreadMessage* pMsg)
     }
   }
   break;
-    
+
   default:
     CLog::Log(LOGERROR, "%s: Unhandled threadmessage sent, %u", __FUNCTION__, msg);
     break;
diff --git a/xbmc/addons/AddonManager.cpp b/xbmc/addons/AddonManager.cpp
index 564f871e5158..b1b62b7cc67b 100644
--- a/xbmc/addons/AddonManager.cpp
+++ b/xbmc/addons/AddonManager.cpp
@@ -364,9 +364,17 @@ bool CAddonMgr::GetAddonsInternal(const TYPE& type,
   return addons.size() > 0;
 }
 
-bool CAddonMgr::GetIncompatibleAddons(std::vector<AddonInfoPtr>& incompatible) const
+bool CAddonMgr::GetIncompatibleEnabledAddonInfos(std::vector<AddonInfoPtr>& incompatible) const
+{
+  return GetIncompatibleAddonInfos(incompatible, false);
+}
+
+bool CAddonMgr::GetIncompatibleAddonInfos(std::vector<AddonInfoPtr>& incompatible,
+                                          bool includeDisabled) const
 {
   GetAddonInfos(incompatible, true, ADDON_UNKNOWN);
+  if (includeDisabled)
+    GetDisabledAddonInfos(incompatible, ADDON_UNKNOWN, AddonDisabledReason::INCOMPATIBLE);
   incompatible.erase(std::remove_if(incompatible.begin(), incompatible.end(),
                                     [this](const AddonInfoPtr& a) { return IsCompatible(a); }),
                      incompatible.end());
@@ -384,7 +392,7 @@ std::vector<std::string> CAddonMgr::MigrateAddons()
 
   // get addons that became incompatible and disable them
   std::vector<AddonInfoPtr> incompatible;
-  GetIncompatibleAddons(incompatible);
+  GetIncompatibleAddonInfos(incompatible, true);
 
   return DisableIncompatibleAddons(incompatible);
 }
@@ -944,14 +952,14 @@ bool CAddonMgr::GetAddonInfos(AddonInfos& addonInfos, bool enabledOnly, TYPE typ
   return !addonInfos.empty();
 }
 
-bool CAddonMgr::GetDisabledAddonInfos(std::vector<AddonInfoPtr>& addonInfos, TYPE type)
+bool CAddonMgr::GetDisabledAddonInfos(std::vector<AddonInfoPtr>& addonInfos, TYPE type) const
 {
   return GetDisabledAddonInfos(addonInfos, type, AddonDisabledReason::NONE);
 }
 
 bool CAddonMgr::GetDisabledAddonInfos(std::vector<AddonInfoPtr>& addonInfos,
                                       TYPE type,
-                                      AddonDisabledReason disabledReason)
+                                      AddonDisabledReason disabledReason) const
 {
   CSingleLock lock(m_critSection);
 
diff --git a/xbmc/addons/AddonManager.h b/xbmc/addons/AddonManager.h
index fdc81aea3fd1..f02bcbaa1145 100644
--- a/xbmc/addons/AddonManager.h
+++ b/xbmc/addons/AddonManager.h
@@ -126,17 +126,17 @@ namespace ADDON
 
     /*!
      * @brief Fills the the provided vector with the list of incompatible
-     * addons and returns if there's any.
+     * enabled addons and returns if there's any.
      *
      * @param[out] incompatible List of incompatible addons
      * @return true if there are incompatible addons
      */
-    bool GetIncompatibleAddons(std::vector<AddonInfoPtr>& incompatible) const;
+    bool GetIncompatibleEnabledAddonInfos(std::vector<AddonInfoPtr>& incompatible) const;
 
     /*!
      * @brief Disable addons in given list.
      *
-     * @param[in] incompatible List of incompatible addons
+     * @param[in] incompatible List of incompatible addon infos
      * @return list of all addon **names** that were disabled
      */
     std::vector<std::string> DisableIncompatibleAddons(
@@ -291,7 +291,7 @@ namespace ADDON
      *                        returned who match them. Default is for all types.
      * @return true if the list contains entries
      */
-    bool GetDisabledAddonInfos(std::vector<AddonInfoPtr>& addonInfos, TYPE type);
+    bool GetDisabledAddonInfos(std::vector<AddonInfoPtr>& addonInfos, TYPE type) const;
 
     /*!
      * @brief Get a list of disabled add-on's with info's for the on system
@@ -311,7 +311,7 @@ namespace ADDON
      */
     bool GetDisabledAddonInfos(std::vector<AddonInfoPtr>& addonInfos,
                                TYPE type,
-                               AddonDisabledReason disabledReason);
+                               AddonDisabledReason disabledReason) const;
 
     const AddonInfoPtr GetAddonInfo(const std::string& id, TYPE type = ADDON_UNKNOWN) const;
 
@@ -337,6 +337,17 @@ namespace ADDON
 
     void FindAddons(ADDON_INFO_LIST& addonmap, const std::string& path);
 
+    /*!
+     * @brief Fills the the provided vector with the list of incompatible
+     * addons and returns if there's any.
+     *
+     * @param[out] incompatible List of incompatible addons
+     * @param[in] whether or not to include incompatible addons that are disabled
+     * @return true if there are incompatible addons
+     */
+    bool GetIncompatibleAddonInfos(std::vector<AddonInfoPtr>& incompatible,
+                                   bool includeDisabled) const;
+
     /*!
      * Get the list of of available updates
      * \param[in,out] updates the vector of addons to be filled with addons that need to be updated (not blacklisted)
