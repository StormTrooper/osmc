From 66ac9d1135ba77b2bfa42c9372887bcad482ac13 Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Tue, 13 Aug 2019 08:14:13 +0200
Subject: [PATCH 1/3] [addons][audidecoder] header guideline changes

---
 .../kodi/addon-instance/AudioDecoder.h        | 374 +++++++++---------
 1 file changed, 190 insertions(+), 184 deletions(-)

diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/AudioDecoder.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/AudioDecoder.h
index 74078309f270..bc789ed3be85 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/AudioDecoder.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/AudioDecoder.h
@@ -16,45 +16,51 @@
 #endif
 #include <stdint.h>
 
-namespace kodi { namespace addon { class CInstanceAudioDecoder; }}
+namespace kodi
+{
+namespace addon
+{
+  class CInstanceAudioDecoder;
+} /* namespace addon */
+} /* namespace kodi */
 
 extern "C"
 {
 
-  typedef struct AddonProps_AudioDecoder
-  {
-    int dummy;
-  } AddonProps_AudioDecoder;
+typedef struct AddonProps_AudioDecoder
+{
+  int dummy;
+} AddonProps_AudioDecoder;
 
-  typedef struct AddonToKodiFuncTable_AudioDecoder
-  {
-    void* kodiInstance;
-  } AddonToKodiFuncTable_AudioDecoder;
+typedef struct AddonToKodiFuncTable_AudioDecoder
+{
+  void* kodiInstance;
+} AddonToKodiFuncTable_AudioDecoder;
 
-  struct AddonInstance_AudioDecoder;
-  typedef struct KodiToAddonFuncTable_AudioDecoder
-  {
-    kodi::addon::CInstanceAudioDecoder* addonInstance;
-    bool (__cdecl* init) (const AddonInstance_AudioDecoder* instance,
-                          const char* file, unsigned int filecache,
-                          int* channels, int* samplerate,
-                          int* bitspersample, int64_t* totaltime,
-                          int* bitrate, AEDataFormat* format,
-                          const AEChannel** info);
-    int  (__cdecl* read_pcm) (const AddonInstance_AudioDecoder* instance, uint8_t* buffer, int size, int* actualsize);
-    int64_t  (__cdecl* seek) (const AddonInstance_AudioDecoder* instance, int64_t time);
-    bool (__cdecl* read_tag) (const AddonInstance_AudioDecoder* instance,
-                              const char* file, char* title,
-                              char* artist, int* length);
-    int  (__cdecl* track_count) (const AddonInstance_AudioDecoder* instance, const char* file);
-  } KodiToAddonFuncTable_AudioDecoder;
-
-  typedef struct AddonInstance_AudioDecoder
-  {
-    AddonProps_AudioDecoder props;
-    AddonToKodiFuncTable_AudioDecoder toKodi;
-    KodiToAddonFuncTable_AudioDecoder toAddon;
-  } AddonInstance_AudioDecoder;
+struct AddonInstance_AudioDecoder;
+typedef struct KodiToAddonFuncTable_AudioDecoder
+{
+  kodi::addon::CInstanceAudioDecoder* addonInstance;
+  bool (__cdecl* init)(const AddonInstance_AudioDecoder* instance,
+                       const char* file, unsigned int filecache,
+                       int* channels, int* samplerate,
+                       int* bitspersample, int64_t* totaltime,
+                       int* bitrate, AEDataFormat* format,
+                       const AEChannel** info);
+  int  (__cdecl* read_pcm)(const AddonInstance_AudioDecoder* instance, uint8_t* buffer, int size, int* actualsize);
+  int64_t  (__cdecl* seek)(const AddonInstance_AudioDecoder* instance, int64_t time);
+  bool (__cdecl* read_tag)(const AddonInstance_AudioDecoder* instance,
+                           const char* file, char* title,
+                           char* artist, int* length);
+  int  (__cdecl* track_count)(const AddonInstance_AudioDecoder* instance, const char* file);
+} KodiToAddonFuncTable_AudioDecoder;
+
+typedef struct AddonInstance_AudioDecoder
+{
+  AddonProps_AudioDecoder props;
+  AddonToKodiFuncTable_AudioDecoder toKodi;
+  KodiToAddonFuncTable_AudioDecoder toAddon;
+} AddonInstance_AudioDecoder;
 
 } /* extern "C" */
 
@@ -63,167 +69,167 @@ namespace kodi
 namespace addon
 {
 
-  class CInstanceAudioDecoder : public IAddonInstance
+class CInstanceAudioDecoder : public IAddonInstance
+{
+public:
+  //==========================================================================
+  /// @brief Class constructor
+  ///
+  /// @param[in] instance             The from Kodi given instance given be
+  ///                                 add-on CreateInstance call with instance
+  ///                                 id ADDON_INSTANCE_AUDIODECODER.
+  explicit CInstanceAudioDecoder(KODI_HANDLE instance)
+    : IAddonInstance(ADDON_INSTANCE_AUDIODECODER)
   {
-  public:
-    //==========================================================================
-    /// @brief Class constructor
-    ///
-    /// @param[in] instance             The from Kodi given instance given be
-    ///                                 add-on CreateInstance call with instance
-    ///                                 id ADDON_INSTANCE_AUDIODECODER.
-    explicit CInstanceAudioDecoder(KODI_HANDLE instance)
-      : IAddonInstance(ADDON_INSTANCE_AUDIODECODER)
-    {
-      if (CAddonBase::m_interface->globalSingleInstance != nullptr)
-        throw std::logic_error("kodi::addon::CInstanceAudioDecoder: Creation of multiple together with single instance way is not allowed!");
-
-      SetAddonStruct(instance);
-    }
-    //--------------------------------------------------------------------------
-
-    //==========================================================================
-    /// @ingroup cpp_kodi_addon_audiodecoder
-    /// @brief Initialize a decoder
-    ///
-    /// @param[in] filename             The file to read
-    /// @param[in] filecache            The file cache size
-    /// @param[out] channels            Number of channels in output stream
-    /// @param[out] samplerate          Samplerate of output stream
-    /// @param[out] bitspersample       Bits per sample in output stream
-    /// @param[out] totaltime           Total time for stream
-    /// @param[out] bitrate             Average bitrate of input stream
-    /// @param[out] format              Data format for output stream
-    /// @param[out] channellist         Channel mapping for output stream
-    /// @return                         true if successfully done, otherwise
-    ///                                 false
-    ///
-    virtual bool Init(const std::string& filename, unsigned int filecache,
-                      int& channels, int& samplerate,
-                      int& bitspersample, int64_t& totaltime,
-                      int& bitrate, AEDataFormat& format,
-                      std::vector<AEChannel>& channellist) = 0;
-    //--------------------------------------------------------------------------
-
-    //==========================================================================
-    /// @ingroup cpp_kodi_addon_audiodecoder
-    /// @brief Produce some noise
-    ///
-    /// @param[in] buffer               Output buffer
-    /// @param[in] size                 Size of output buffer
-    /// @param[out] actualsize          Actual number of bytes written to output buffer
-    /// @return                         Return with following possible values:
-    ///                                 | Value | Description                  |
-    ///                                 |:-----:|:-----------------------------|
-    ///                                 |   0   | on success
-    ///                                 |  -1   | on end of stream
-    ///                                 |   1   | on failure
-    ///
-    virtual int ReadPCM(uint8_t* buffer, int size, int& actualsize) = 0;
-    //--------------------------------------------------------------------------
-
-    //==========================================================================
-    /// @ingroup cpp_kodi_addon_audiodecoder
-    /// @brief Seek in output stream
-    ///
-    /// @param[in] time                 Time position to seek to in milliseconds
-    /// @return                         Time position seek ended up on
-    ///
-    virtual int64_t Seek(int64_t time) { return time; }
-    //--------------------------------------------------------------------------
-
-    //==========================================================================
-    /// @ingroup cpp_kodi_addon_audiodecoder
-    /// @brief Read tag of a file
-    ///
-    /// @param[in] file                 File to read tag for
-    /// @param[out] title               Title of file
-    /// @param[out] artist              Artist of file
-    /// @param[out] length              Length of file
-    /// @return                         True on success, false on failure
-    ///
-    virtual bool ReadTag(const std::string& file, std::string& title, std::string& artist, int& length) { return false; }
-    //--------------------------------------------------------------------------
-
-    //==========================================================================
-    /// @ingroup cpp_kodi_addon_audiodecoder
-    /// @brief Get number of tracks in a file
-    ///
-    /// @param[in] file                 File to read tag for
-    /// @return                         Number of tracks in file
-    ///
-    virtual int TrackCount(const std::string& file) { return 1; }
-    //--------------------------------------------------------------------------
-
-  private:
-    void SetAddonStruct(KODI_HANDLE instance)
-    {
-      if (instance == nullptr)
-        throw std::logic_error("kodi::addon::CInstanceAudioDecoder: Creation with empty addon structure not allowed, table must be given from Kodi!");
-
-      m_instanceData = static_cast<AddonInstance_AudioDecoder*>(instance);
-
-      m_instanceData->toAddon.addonInstance = this;
-      m_instanceData->toAddon.init = ADDON_Init;
-      m_instanceData->toAddon.read_pcm = ADDON_ReadPCM;
-      m_instanceData->toAddon.seek = ADDON_Seek;
-      m_instanceData->toAddon.read_tag = ADDON_ReadTag;
-      m_instanceData->toAddon.track_count = ADDON_TrackCount;
-    }
-
-    inline static bool ADDON_Init(const AddonInstance_AudioDecoder* instance, const char* file, unsigned int filecache,
-                                  int* channels, int* samplerate,
-                                  int* bitspersample, int64_t* totaltime,
-                                  int* bitrate, AEDataFormat* format,
-                                  const AEChannel** info)
+    if (CAddonBase::m_interface->globalSingleInstance != nullptr)
+      throw std::logic_error("kodi::addon::CInstanceAudioDecoder: Creation of multiple together with single instance way is not allowed!");
+
+    SetAddonStruct(instance);
+  }
+  //--------------------------------------------------------------------------
+
+  //==========================================================================
+  /// @ingroup cpp_kodi_addon_audiodecoder
+  /// @brief Initialize a decoder
+  ///
+  /// @param[in] filename             The file to read
+  /// @param[in] filecache            The file cache size
+  /// @param[out] channels            Number of channels in output stream
+  /// @param[out] samplerate          Samplerate of output stream
+  /// @param[out] bitspersample       Bits per sample in output stream
+  /// @param[out] totaltime           Total time for stream
+  /// @param[out] bitrate             Average bitrate of input stream
+  /// @param[out] format              Data format for output stream
+  /// @param[out] channellist         Channel mapping for output stream
+  /// @return                         true if successfully done, otherwise
+  ///                                 false
+  ///
+  virtual bool Init(const std::string& filename, unsigned int filecache,
+                    int& channels, int& samplerate,
+                    int& bitspersample, int64_t& totaltime,
+                    int& bitrate, AEDataFormat& format,
+                    std::vector<AEChannel>& channellist) = 0;
+  //--------------------------------------------------------------------------
+
+  //==========================================================================
+  /// @ingroup cpp_kodi_addon_audiodecoder
+  /// @brief Produce some noise
+  ///
+  /// @param[in] buffer               Output buffer
+  /// @param[in] size                 Size of output buffer
+  /// @param[out] actualsize          Actual number of bytes written to output buffer
+  /// @return                         Return with following possible values:
+  ///                                 | Value | Description                  |
+  ///                                 |:-----:|:-----------------------------|
+  ///                                 |   0   | on success
+  ///                                 |  -1   | on end of stream
+  ///                                 |   1   | on failure
+  ///
+  virtual int ReadPCM(uint8_t* buffer, int size, int& actualsize) = 0;
+  //--------------------------------------------------------------------------
+
+  //==========================================================================
+  /// @ingroup cpp_kodi_addon_audiodecoder
+  /// @brief Seek in output stream
+  ///
+  /// @param[in] time                 Time position to seek to in milliseconds
+  /// @return                         Time position seek ended up on
+  ///
+  virtual int64_t Seek(int64_t time) { return time; }
+  //--------------------------------------------------------------------------
+
+  //==========================================================================
+  /// @ingroup cpp_kodi_addon_audiodecoder
+  /// @brief Read tag of a file
+  ///
+  /// @param[in] file                 File to read tag for
+  /// @param[out] title               Title of file
+  /// @param[out] artist              Artist of file
+  /// @param[out] length              Length of file
+  /// @return                         True on success, false on failure
+  ///
+  virtual bool ReadTag(const std::string& file, std::string& title, std::string& artist, int& length) { return false; }
+  //--------------------------------------------------------------------------
+
+  //==========================================================================
+  /// @ingroup cpp_kodi_addon_audiodecoder
+  /// @brief Get number of tracks in a file
+  ///
+  /// @param[in] file                 File to read tag for
+  /// @return                         Number of tracks in file
+  ///
+  virtual int TrackCount(const std::string& file) { return 1; }
+  //--------------------------------------------------------------------------
+
+private:
+  void SetAddonStruct(KODI_HANDLE instance)
+  {
+    if (instance == nullptr)
+      throw std::logic_error("kodi::addon::CInstanceAudioDecoder: Creation with empty addon structure not allowed, table must be given from Kodi!");
+
+    m_instanceData = static_cast<AddonInstance_AudioDecoder*>(instance);
+
+    m_instanceData->toAddon.addonInstance = this;
+    m_instanceData->toAddon.init = ADDON_Init;
+    m_instanceData->toAddon.read_pcm = ADDON_ReadPCM;
+    m_instanceData->toAddon.seek = ADDON_Seek;
+    m_instanceData->toAddon.read_tag = ADDON_ReadTag;
+    m_instanceData->toAddon.track_count = ADDON_TrackCount;
+  }
+
+  inline static bool ADDON_Init(const AddonInstance_AudioDecoder* instance, const char* file, unsigned int filecache,
+                                int* channels, int* samplerate,
+                                int* bitspersample, int64_t* totaltime,
+                                int* bitrate, AEDataFormat* format,
+                                const AEChannel** info)
+  {
+    instance->toAddon.addonInstance->m_channelList.clear();
+    bool ret = instance->toAddon.addonInstance->Init(file, filecache, *channels,
+                                                          *samplerate, *bitspersample,
+                                                          *totaltime, *bitrate, *format,
+                                                          instance->toAddon.addonInstance->m_channelList);
+    if (!instance->toAddon.addonInstance->m_channelList.empty())
     {
-      instance->toAddon.addonInstance->m_channelList.clear();
-      bool ret = instance->toAddon.addonInstance->Init(file, filecache, *channels,
-                                                           *samplerate, *bitspersample,
-                                                           *totaltime, *bitrate, *format,
-                                                           instance->toAddon.addonInstance->m_channelList);
-      if (!instance->toAddon.addonInstance->m_channelList.empty())
-      {
-        if (instance->toAddon.addonInstance->m_channelList.back() != AE_CH_NULL)
-          instance->toAddon.addonInstance->m_channelList.push_back(AE_CH_NULL);
-        *info = instance->toAddon.addonInstance->m_channelList.data();
-      }
-      else
-        *info = nullptr;
-      return ret;
+      if (instance->toAddon.addonInstance->m_channelList.back() != AE_CH_NULL)
+        instance->toAddon.addonInstance->m_channelList.push_back(AE_CH_NULL);
+      *info = instance->toAddon.addonInstance->m_channelList.data();
     }
+    else
+      *info = nullptr;
+    return ret;
+  }
 
-    inline static int ADDON_ReadPCM(const AddonInstance_AudioDecoder* instance, uint8_t* buffer, int size, int* actualsize)
-    {
-      return instance->toAddon.addonInstance->ReadPCM(buffer, size, *actualsize);
-    }
+  inline static int ADDON_ReadPCM(const AddonInstance_AudioDecoder* instance, uint8_t* buffer, int size, int* actualsize)
+  {
+    return instance->toAddon.addonInstance->ReadPCM(buffer, size, *actualsize);
+  }
 
-    inline static int64_t ADDON_Seek(const AddonInstance_AudioDecoder* instance, int64_t time)
-    {
-      return instance->toAddon.addonInstance->Seek(time);
-    }
+  inline static int64_t ADDON_Seek(const AddonInstance_AudioDecoder* instance, int64_t time)
+  {
+    return instance->toAddon.addonInstance->Seek(time);
+  }
 
-    inline static bool ADDON_ReadTag(const AddonInstance_AudioDecoder* instance, const char* file, char* title, char* artist, int* length)
+  inline static bool ADDON_ReadTag(const AddonInstance_AudioDecoder* instance, const char* file, char* title, char* artist, int* length)
+  {
+    std::string intTitle;
+    std::string intArtist;
+    bool ret = instance->toAddon.addonInstance->ReadTag(file, intTitle, intArtist, *length);
+    if (ret)
     {
-      std::string intTitle;
-      std::string intArtist;
-      bool ret = instance->toAddon.addonInstance->ReadTag(file, intTitle, intArtist, *length);
-      if (ret)
-      {
-        strncpy(title, intTitle.c_str(), ADDON_STANDARD_STRING_LENGTH_SMALL-1);
-        strncpy(artist, intArtist.c_str(), ADDON_STANDARD_STRING_LENGTH_SMALL-1);
-      }
-      return ret;
+      strncpy(title, intTitle.c_str(), ADDON_STANDARD_STRING_LENGTH_SMALL-1);
+      strncpy(artist, intArtist.c_str(), ADDON_STANDARD_STRING_LENGTH_SMALL-1);
     }
+    return ret;
+  }
 
-    inline static int ADDON_TrackCount(const AddonInstance_AudioDecoder* instance, const char* file)
-    {
-      return instance->toAddon.addonInstance->TrackCount(file);
-    }
+  inline static int ADDON_TrackCount(const AddonInstance_AudioDecoder* instance, const char* file)
+  {
+    return instance->toAddon.addonInstance->TrackCount(file);
+  }
 
-    std::vector<AEChannel> m_channelList;
-    AddonInstance_AudioDecoder* m_instanceData;
-  };
+  std::vector<AEChannel> m_channelList;
+  AddonInstance_AudioDecoder* m_instanceData;
+};
 
 } /* namespace addon */
 } /* namespace kodi */

From 34c1753d05c767e8c2a5a253a917a457c49eb0a4 Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Tue, 13 Aug 2019 12:20:31 +0200
Subject: [PATCH 2/3] [addons][audiodecoder] update documentation

---
 .../kodi/addon-instance/AudioDecoder.h        | 129 +++++++++++++++++-
 1 file changed, 126 insertions(+), 3 deletions(-)

diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/AudioDecoder.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/AudioDecoder.h
index bc789ed3be85..51a6e3f36dcf 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/AudioDecoder.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/AudioDecoder.h
@@ -69,15 +69,138 @@ namespace kodi
 namespace addon
 {
 
+//==============================================================================
+///
+/// \addtogroup cpp_kodi_addon_audiodecoder
+/// @brief \cpp_class{ kodi::addon::CInstanceAudioDecoder }
+/// **Audio decoder add-on instance**
+///
+/// For audio decoders as binary add-ons. This class implements a way to handle
+/// special types of audio files.
+///
+/// The add-on handles loading of the source file and outputting the audio stream
+/// for consumption by the player.
+///
+/// The addon.xml defines the capabilities of this add-on.
+///
+/// @note The option to have multiple instances is possible with audio-decoder
+/// add-ons. This is useful, since some playback engines are riddled by global
+/// variables, making decoding of multiple streams using the same instance
+/// impossible.
+///
+///
+/// ----------------------------------------------------------------------------
+///
+/// **Here's an example on addon.xml:**
+/// ~~~~~~~~~~~~~{.xml}
+///   <extension
+///     point="kodi.audiodecoder"
+///     name="2sf"
+///     extension=".2sf|.mini2sf"
+///     tags="true"
+///     library_@PLATFORM@="@LIBRARY_FILENAME@"/>
+/// ~~~~~~~~~~~~~
+///
+/// Description to audio decoder related addon.xml values:
+/// | Name                          | Description
+/// |:------------------------------|----------------------------------------
+/// | <b>`point`</b>                | Addon type specification<br>At all addon types and for this kind always <b>"kodi.audiodecoder"</b>.
+/// | <b>`library_@PLATFORM@`</b>   | Sets the used library name, which is automatically set by cmake at addon build.
+/// | <b>`name`</b>                 | The name of the decoder used in Kodi for display.
+/// | <b>`extension`</b>            | The file extensions / styles supported by this addon.
+/// | <b>`tags`</b>                 | Boolean to point out that addon can bring own information to replayed file, if <b>`false`</b> only the file name is used as info.<br>If <b>`true`</b>, \ref CInstanceAudioDecoder::ReadTag is used and must be implemented.
+///
+/// --------------------------------------------------------------------------
+///
+/// **Here is a code example how this addon is used:**
+///
+/// ~~~~~~~~~~~~~{.cpp}
+/// #include <kodi/addon-instance/AudioDecoder.h>
+///
+/// class CMyAudioDecoder : public ::kodi::addon::CInstanceAudioDecoder
+/// {
+/// public:
+///   CMyAudioDecoder(KODI_HANDLE instance);
+///
+///   bool Init(const std::string& filename, unsigned int filecache,
+///             int& channels, int& samplerate,
+///             int& bitspersample, int64_t& totaltime,
+///             int& bitrate, AEDataFormat& format,
+///             std::vector<AEChannel>& channellist) override;
+///   int ReadPCM(uint8_t* buffer, int size, int& actualsize) override;
+/// };
+///
+/// CMyAudioDecoder::CMyAudioDecoder(KODI_HANDLE instance)
+///   : CInstanceAudioDecoder(instance)
+/// {
+///   ...
+/// }
+///
+/// bool CMyAudioDecoder::Init(const std::string& filename, unsigned int filecache,
+///                            int& channels, int& samplerate,
+///                            int& bitspersample, int64_t& totaltime,
+///                            int& bitrate, AEDataFormat& format,
+///                            std::vector<AEChannel>& channellist)
+/// {
+///   ...
+///   return true;
+/// }
+///
+/// int CMyAudioDecoder::ReadPCM(uint8_t* buffer, int size, int& actualsize)
+/// {
+///   ...
+///   return 0;
+/// }
+///
+///
+/// /*----------------------------------------------------------------------*/
+///
+/// class CMyAddon : public ::kodi::addon::CAddonBase
+/// {
+/// public:
+///   CMyAddon() { }
+///   ADDON_STATUS CreateInstance(int instanceType,
+///                               std::string instanceID,
+///                               KODI_HANDLE instance,
+///                               KODI_HANDLE& addonInstance) override;
+/// };
+///
+/// /* If you use only one instance in your add-on, can be instanceType and
+///  * instanceID ignored */
+/// ADDON_STATUS CMyAddon::CreateInstance(int instanceType,
+///                                       std::string instanceID,
+///                                       KODI_HANDLE instance,
+///                                       KODI_HANDLE& addonInstance)
+/// {
+///   if (instanceType == ADDON_INSTANCE_AUDIODECODER)
+///   {
+///     kodi::Log(ADDON_LOG_NOTICE, "Creating my audio decoder");
+///     addonInstance = new CMyAudioDecoder(instance);
+///     return ADDON_STATUS_OK;
+///   }
+///   else if (...)
+///   {
+///     ...
+///   }
+///   return ADDON_STATUS_UNKNOWN;
+/// }
+///
+/// ADDONCREATOR(CMyAddon)
+/// ~~~~~~~~~~~~~
+///
+/// The destruction of the example class `CMyAudioDecoder` is called from
+/// Kodi's header. Manually deleting the add-on instance is not required.
+///
 class CInstanceAudioDecoder : public IAddonInstance
 {
 public:
   //==========================================================================
+  /// @ingroup cpp_kodi_addon_audiodecoder
   /// @brief Class constructor
   ///
-  /// @param[in] instance             The from Kodi given instance given be
-  ///                                 add-on CreateInstance call with instance
-  ///                                 id ADDON_INSTANCE_AUDIODECODER.
+  /// @param[in] instance The addon instance class handler given by Kodi
+  ///                     at \ref CMyAddon::CreateInstance
+  ///
   explicit CInstanceAudioDecoder(KODI_HANDLE instance)
     : IAddonInstance(ADDON_INSTANCE_AUDIODECODER)
   {

From 27ac862654dbf3b2cfcc6ef8fe9cea1783023be1 Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Tue, 13 Aug 2019 13:40:14 +0200
Subject: [PATCH 3/3] [addons] add doc parts (needed as link on other places)

---
 .../include/kodi/AddonBase.h                  | 71 +++++++++++++++++--
 .../kodi/addon-instance/AudioDecoder.h        |  2 +-
 .../include/kodi/versions.h                   | 25 +++++++
 3 files changed, 91 insertions(+), 7 deletions(-)

diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/AddonBase.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/AddonBase.h
index d7da3ac38851..3355b0c1502c 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/AddonBase.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/AddonBase.h
@@ -73,24 +73,28 @@ typedef void* KODI_HANDLE;
 
 //==============================================================================
 ///
+/// @ingroup cpp_kodi_addon_addonbase
+/// @brief Return value of functions in \ref kodi::addon::CAddonBase and
+/// associated classes
+///
 typedef enum ADDON_STATUS
 {
-  ///
+  /// For everything OK and no error
   ADDON_STATUS_OK,
 
-  ///
+  /// A needed connection was lost
   ADDON_STATUS_LOST_CONNECTION,
 
-  ///
+  /// Addon needs a restart inside Kodi
   ADDON_STATUS_NEED_RESTART,
 
-  ///
+  /// Necessary settings are not yet set
   ADDON_STATUS_NEED_SETTINGS,
 
-  ///
+  /// Unknown and incomprehensible error
   ADDON_STATUS_UNKNOWN,
 
-  /// permanent failure, like failing to resolve methods
+  /// Permanent failure, like failing to resolve methods
   ADDON_STATUS_PERMANENT_FAILURE,
 
   /* internal used return error if function becomes not used from child on
@@ -289,6 +293,7 @@ class CSettingValue
 //==============================================================================
 namespace kodi {
 namespace addon {
+
 /// Add-on main instance class.
 class ATTRIBUTE_HIDDEN CAddonBase
 {
@@ -313,6 +318,59 @@ class ATTRIBUTE_HIDDEN CAddonBase
 
   virtual ADDON_STATUS SetSetting(const std::string& settingName, const CSettingValue& settingValue) { return ADDON_STATUS_UNKNOWN; }
 
+  //==========================================================================
+  /// @ingroup cpp_kodi_addon_addonbase
+  /// @brief Instance created
+  ///
+  /// @param[in] instanceType   The requested type of required instance, see \ref ADDON_TYPE.
+  /// @param[in] instanceID     An individual identification key string given by Kodi.
+  /// @param[in] instance       The instance handler used by Kodi must be passed
+  ///                           to the classes created here. See in the example.
+  /// @param[out] addonInstance The pointer to instance class created in addon.
+  ///                           Needed to be able to identify them on calls.
+  /// @return                   \ref ADDON_STATUS_OK if correct, for possible errors
+  ///                           see \ref ADDON_STATUS
+  ///
+  ///
+  /// --------------------------------------------------------------------------
+  ///
+  /// **Here is a code example how this is used:**
+  ///
+  /// ~~~~~~~~~~~~~{.cpp}
+  /// #include <kodi/AddonBase.h>
+  ///
+  /// ...
+  ///
+  /// /* If you use only one instance in your add-on, can be instanceType and
+  ///  * instanceID ignored */
+  /// ADDON_STATUS CMyAddon::CreateInstance(int instanceType,
+  ///                                       std::string instanceID,
+  ///                                       KODI_HANDLE instance,
+  ///                                       KODI_HANDLE& addonInstance)
+  /// {
+  ///   if (instanceType == ADDON_INSTANCE_SCREENSAVER)
+  ///   {
+  ///     kodi::Log(ADDON_LOG_NOTICE, "Creating my Screensaver");
+  ///     addonInstance = new CMyScreensaver(instance);
+  ///     return ADDON_STATUS_OK;
+  ///   }
+  ///   else if (instanceType == ADDON_INSTANCE_VISUALIZATION)
+  ///   {
+  ///     kodi::Log(ADDON_LOG_NOTICE, "Creating my Visualization");
+  ///     addonInstance = new CMyVisualization(instance);
+  ///     return ADDON_STATUS_OK;
+  ///   }
+  ///   else if (...)
+  ///   {
+  ///     ...
+  ///   }
+  ///   return ADDON_STATUS_UNKNOWN;
+  /// }
+  ///
+  /// ...
+  ///
+  /// ~~~~~~~~~~~~~
+  ///
   virtual ADDON_STATUS CreateInstance(int instanceType, std::string instanceID, KODI_HANDLE instance, KODI_HANDLE& addonInstance)
   {
     /* The handling below is intended for the case of the add-on only one
@@ -330,6 +388,7 @@ class ATTRIBUTE_HIDDEN CAddonBase
 
     return ADDON_STATUS_UNKNOWN;
   }
+  //--------------------------------------------------------------------------
 
   virtual ADDON_STATUS CreateInstanceEx(int instanceType, std::string instanceID, KODI_HANDLE instance, KODI_HANDLE& addonInstance, const std::string &version)
   {
diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/AudioDecoder.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/AudioDecoder.h
index 51a6e3f36dcf..d10799fe6753 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/AudioDecoder.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/AudioDecoder.h
@@ -199,7 +199,7 @@ class CInstanceAudioDecoder : public IAddonInstance
   /// @brief Class constructor
   ///
   /// @param[in] instance The addon instance class handler given by Kodi
-  ///                     at \ref CMyAddon::CreateInstance
+  ///                     at \ref kodi::addon::CAddonBase::CreateInstance(...)
   ///
   explicit CInstanceAudioDecoder(KODI_HANDLE instance)
     : IAddonInstance(ADDON_INSTANCE_AUDIODECODER)
diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h
index 02cc1ca499ef..ba50e8ebf8a0 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h
@@ -128,7 +128,9 @@
                                                       "StreamCodec.h" \
                                                       "StreamCrypto.h"
 
+//==============================================================================
 ///
+/// @ingroup cpp_kodi_addon_addonbase
 /// The currently available instance types for Kodi add-ons
 ///
 /// \internal
@@ -148,18 +150,41 @@ typedef enum ADDON_TYPE
   ADDON_GLOBAL_MAX = 5, // Last used global id, used in loops to check versions. Need to change if new global type becomes added.
 
   /* addon type instances */
+
+  /// Audio decoder instance, see \ref cpp_kodi_addon_audiodecoder "kodi::addon::CInstanceAudioDecoder"
   ADDON_INSTANCE_AUDIODECODER = 102,
+
+  /// Audio encoder instance, see \ref cpp_kodi_addon_audioencoder "kodi::addon::CInstanceAudioEncoder"
   ADDON_INSTANCE_AUDIOENCODER = 103,
+
+  /// Game instance, see \ref cpp_kodi_addon_game "kodi::addon::CInstanceGame"
   ADDON_INSTANCE_GAME = 104,
+
+  /// Input stream instance, see \ref cpp_kodi_addon_inputstream "kodi::addon::CInstanceInputStream"
   ADDON_INSTANCE_INPUTSTREAM = 105,
+
+  /// Peripheral instance, see \ref cpp_kodi_addon_peripheral "kodi::addon::CInstancePeripheral"
   ADDON_INSTANCE_PERIPHERAL = 106,
+
+  /// Game instance, see \ref cpp_kodi_addon_pvr "kodi::addon::CInstancePVRClient"
   ADDON_INSTANCE_PVR = 107,
+
+  /// PVR client instance, see \ref cpp_kodi_addon_screensaver "kodi::addon::CInstanceScreensaver"
   ADDON_INSTANCE_SCREENSAVER = 108,
+
+  /// Music visualization instance, see \ref cpp_kodi_addon_visualization "kodi::addon::CInstanceVisualization"
   ADDON_INSTANCE_VISUALIZATION = 109,
+
+  /// Virtual Filesystem (VFS) instance, see \ref cpp_kodi_addon_vfs "kodi::addon::CInstanceVFS"
   ADDON_INSTANCE_VFS = 110,
+
+  /// Image Decoder instance, see \ref cpp_kodi_addon_imagedecoder "kodi::addon::CInstanceImageDecoder"
   ADDON_INSTANCE_IMAGEDECODER = 111,
+
+  /// Video Decoder instance, see \ref cpp_kodi_addon_videocodec "kodi::addon::CInstanceVideoCodec"
   ADDON_INSTANCE_VIDEOCODEC = 112,
 } ADDON_TYPE;
+//------------------------------------------------------------------------------
 
 #ifdef __cplusplus
 extern "C" {
