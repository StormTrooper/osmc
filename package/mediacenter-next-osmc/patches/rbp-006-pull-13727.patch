From 4eadb792e9fb73c8dfc95b6ff27b02561fc5dd26 Mon Sep 17 00:00:00 2001
From: Garrett Brown <themagnificentmrb@gmail.com>
Date: Sun, 24 Jun 2018 10:00:00 +0200
Subject: [PATCH] RetroPlayer: Remove MMAL renderer on RPi

MMAL (Multi-Media Abstraction Layer) is a framework for video decoding, and
doesn't make sense for us until we get support for game streaming (e.g.
NVidia GameStream).
---
 xbmc/cores/RetroPlayer/process/rbpi/CMakeLists.txt |   7 -
 .../RetroPlayer/process/rbpi/RenderBufferMMAL.cpp  | 121 ------
 .../RetroPlayer/process/rbpi/RenderBufferMMAL.h    |  79 ----
 .../process/rbpi/RenderBufferPoolMMAL.cpp          | 209 -----------
 .../process/rbpi/RenderBufferPoolMMAL.h            |  82 -----
 .../rendering/VideoRenderers/CMakeLists.txt        |   9 -
 .../rendering/VideoRenderers/MMALProcess.cpp       | 109 ------
 .../rendering/VideoRenderers/MMALProcess.h         |  65 ----
 .../rendering/VideoRenderers/MMALRenderer.cpp      | 410 ---------------------
 .../rendering/VideoRenderers/MMALRenderer.h        |  94 -----
 .../rendering/VideoRenderers/RPRendererMMAL.cpp    | 154 --------
 .../rendering/VideoRenderers/RPRendererMMAL.h      |  80 ----
 xbmc/windowing/rpi/WinSystemRpiGLESContext.cpp     |   2 -
 13 files changed, 1421 deletions(-)
 delete mode 100644 xbmc/cores/RetroPlayer/process/rbpi/RenderBufferMMAL.cpp
 delete mode 100644 xbmc/cores/RetroPlayer/process/rbpi/RenderBufferMMAL.h
 delete mode 100644 xbmc/cores/RetroPlayer/process/rbpi/RenderBufferPoolMMAL.cpp
 delete mode 100644 xbmc/cores/RetroPlayer/process/rbpi/RenderBufferPoolMMAL.h
 delete mode 100644 xbmc/cores/RetroPlayer/rendering/VideoRenderers/MMALProcess.cpp
 delete mode 100644 xbmc/cores/RetroPlayer/rendering/VideoRenderers/MMALProcess.h
 delete mode 100644 xbmc/cores/RetroPlayer/rendering/VideoRenderers/MMALRenderer.cpp
 delete mode 100644 xbmc/cores/RetroPlayer/rendering/VideoRenderers/MMALRenderer.h
 delete mode 100644 xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererMMAL.cpp
 delete mode 100644 xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererMMAL.h

diff --git a/xbmc/cores/RetroPlayer/process/rbpi/CMakeLists.txt b/xbmc/cores/RetroPlayer/process/rbpi/CMakeLists.txt
index 896da31fd0dc..97eb97960f35 100644
--- a/xbmc/cores/RetroPlayer/process/rbpi/CMakeLists.txt
+++ b/xbmc/cores/RetroPlayer/process/rbpi/CMakeLists.txt
@@ -3,12 +3,5 @@ if(CORE_PLATFORM_NAME_LC STREQUAL rbpi)
 
   set(HEADERS RPProcessInfoPi.h)
 
-  if(MMAL_FOUND)
-    list(APPEND SOURCES RenderBufferMMAL.cpp
-                        RenderBufferPoolMMAL.cpp)
-    list(APPEND HEADERS RenderBufferMMAL.h
-                        RenderBufferPoolMMAL.h)
-  endif()
-
   core_add_library(rp-process-pi)
 endif()
diff --git a/xbmc/cores/RetroPlayer/process/rbpi/RenderBufferMMAL.cpp b/xbmc/cores/RetroPlayer/process/rbpi/RenderBufferMMAL.cpp
deleted file mode 100644
index e2fae00e74c8..000000000000
--- a/xbmc/cores/RetroPlayer/process/rbpi/RenderBufferMMAL.cpp
+++ /dev/null
@@ -1,121 +0,0 @@
-/*
- *      Copyright (C) 2017 Team Kodi
- *      http://kodi.tv
- *
- *  This Program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2, or (at your option)
- *  any later version.
- *
- *  This Program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- *  GNU General Public License for more details.
- *
- *  You should have received a copy of the GNU General Public License
- *  along with this Program; see the file COPYING.  If not, see
- *  <http://www.gnu.org/licenses/>.
- *
- */
-
-#include "RenderBufferMMAL.h"
-#include "platform/linux/RBP.h"
-
-using namespace KODI;
-using namespace RETRO;
-
-// --- CRenderBufferMMAL -------------------------------------------------------
-
-CRenderBufferMMAL::CRenderBufferMMAL(MMAL_BUFFER_HEADER_T *buffer)
-{
-  SetHeader(buffer);
-}
-
-CRenderBufferMMAL::~CRenderBufferMMAL()
-{
-  ResetHeader();
-}
-
-void CRenderBufferMMAL::Update()
-{
-  if (m_mmal_buffer != nullptr)
-  {
-    CGPUMEM *gmem = GetGPUBuffer();
-    if (gmem != nullptr)
-    {
-      m_mmal_buffer->alloc_size = gmem->m_numbytes;
-      m_mmal_buffer->length = gmem->m_numbytes;
-      m_mmal_buffer->data = reinterpret_cast<uint8_t*>(gmem->m_vc_handle);
-    }
-    else
-    {
-      m_mmal_buffer->alloc_size = 0;
-      m_mmal_buffer->length = 0;
-      m_mmal_buffer->data = nullptr;
-    }
-  }
-}
-
-size_t CRenderBufferMMAL::GetFrameSize() const
-{
-  const CGPUMEM *gmem = GetGPUBuffer();
-  if (gmem != nullptr)
-    return static_cast<size_t>(gmem->m_numbytes);
-
-  return 0; // Unknown
-}
-
-uint8_t *CRenderBufferMMAL::GetMemory()
-{
-  CGPUMEM *gmem = GetGPUBuffer();
-  if (gmem != nullptr)
-    return static_cast<uint8_t*>(gmem->m_arm);
-
-  return nullptr;
-}
-
-void CRenderBufferMMAL::SetHeader(void *header)
-{
-  MMAL_BUFFER_HEADER_T *buffer = static_cast<MMAL_BUFFER_HEADER_T*>(header);
-
-  ResetHeader();
-
-  m_mmal_buffer = buffer;
-
-  mmal_buffer_header_reset(m_mmal_buffer);
-
-  m_mmal_buffer->cmd = 0;
-  m_mmal_buffer->offset = 0;
-  m_mmal_buffer->flags = 0;
-  m_mmal_buffer->user_data = this;
-}
-
-void CRenderBufferMMAL::ResetHeader()
-{
-  if (m_mmal_buffer != nullptr)
-  {
-    mmal_buffer_header_release(m_mmal_buffer);
-    m_mmal_buffer = nullptr;
-  }
-}
-
-// --- CRenderBufferMMALRGB ----------------------------------------------------
-
-CRenderBufferMMALRGB::CRenderBufferMMALRGB(MMAL_BUFFER_HEADER_T *buffer) :
-  CRenderBufferMMAL(buffer)
-{
-}
-
-bool CRenderBufferMMALRGB::Allocate(AVPixelFormat format, unsigned int width, unsigned int height, unsigned int size)
-{
-  // Initialize IRenderBuffer
-  m_format = format;
-  m_width = width;
-  m_height = height;
-
-  // Allocate GPU memory
-  m_gmem.reset(new CGPUMEM(size, true));
-  m_gmem->m_opaque = this;
-
-  return m_gmem->m_arm != nullptr;
-}
diff --git a/xbmc/cores/RetroPlayer/process/rbpi/RenderBufferMMAL.h b/xbmc/cores/RetroPlayer/process/rbpi/RenderBufferMMAL.h
deleted file mode 100644
index fe34ab682f3d..000000000000
--- a/xbmc/cores/RetroPlayer/process/rbpi/RenderBufferMMAL.h
+++ /dev/null
@@ -1,79 +0,0 @@
-/*
- *      Copyright (C) 2017 Team Kodi
- *      http://kodi.tv
- *
- *  This Program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2, or (at your option)
- *  any later version.
- *
- *  This Program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- *  GNU General Public License for more details.
- *
- *  You should have received a copy of the GNU General Public License
- *  along with this Program; see the file COPYING.  If not, see
- *  <http://www.gnu.org/licenses/>.
- *
- */
-
-#pragma once
-
-#include "cores/RetroPlayer/buffers/BaseRenderBuffer.h"
-
-#include <interface/mmal/mmal.h>
-
-#include <memory>
-#include <stdint.h>
-
-class CGPUMEM;
-
-namespace KODI
-{
-namespace RETRO
-{
-  class CRenderBufferMMAL : public CBaseRenderBuffer
-  {
-  public:
-    CRenderBufferMMAL(MMAL_BUFFER_HEADER_T *buffer);
-    ~CRenderBufferMMAL() override;
-
-    // Partial implementation of IRenderBuffer
-    void Update() override;
-    size_t GetFrameSize() const override;
-    uint8_t *GetMemory() override;
-    bool UploadTexture() override { return true; }
-    void SetHeader(void *header) override;
-
-    // MMAL interface
-    MMAL_BUFFER_HEADER_T *GetHeader() { return m_mmal_buffer; }
-    void ResetHeader();
-
-  protected:
-    // GPU interface
-    virtual CGPUMEM *GetGPUBuffer() const = 0;
-
-  private:
-    // Construction parameters
-    MMAL_BUFFER_HEADER_T *m_mmal_buffer = nullptr;
-  };
-
-  class CRenderBufferMMALRGB : public CRenderBufferMMAL
-  {
-  public:
-    CRenderBufferMMALRGB(MMAL_BUFFER_HEADER_T *buffer);
-    ~CRenderBufferMMALRGB() override = default;
-
-    // Partial implementation of IRenderBuffer via CRenderBufferMMAL
-    bool Allocate(AVPixelFormat format, unsigned int width, unsigned int height, unsigned int size) override;
-
-  protected:
-    // implementation of CRenderBufferMMAL
-    CGPUMEM *GetGPUBuffer() const override { return m_gmem.get(); }
-
-  private:
-    std::unique_ptr<CGPUMEM> m_gmem;
-  };
-}
-}
diff --git a/xbmc/cores/RetroPlayer/process/rbpi/RenderBufferPoolMMAL.cpp b/xbmc/cores/RetroPlayer/process/rbpi/RenderBufferPoolMMAL.cpp
deleted file mode 100644
index 068608fc6fe2..000000000000
--- a/xbmc/cores/RetroPlayer/process/rbpi/RenderBufferPoolMMAL.cpp
+++ /dev/null
@@ -1,209 +0,0 @@
-/*
- *      Copyright (C) 2017 Team Kodi
- *      http://kodi.tv
- *
- *  This Program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2, or (at your option)
- *  any later version.
- *
- *  This Program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- *  GNU General Public License for more details.
- *
- *  You should have received a copy of the GNU General Public License
- *  along with this Program; see the file COPYING.  If not, see
- *  <http://www.gnu.org/licenses/>.
- *
- */
-
-#include "RenderBufferPoolMMAL.h"
-#include "RenderBufferMMAL.h"
-#include "cores/RetroPlayer/rendering/VideoRenderers/RPRendererMMAL.h"
-#include "cores/RetroPlayer/rendering/RenderVideoSettings.h"
-#include "cores/VideoPlayer/VideoRenderers/HwDecRender/MMALRenderer.h"
-#include "platform/linux/RBP.h"
-#include "threads/SingleLock.h"
-#include "utils/log.h"
-
-#include <interface/mmal/util/mmal_default_components.h>
-#include <interface/mmal/util/mmal_util.h>
-#include <interface/mmal/util/mmal_util_params.h>
-
-#include <algorithm>
-#include <cmath>
-
-using namespace KODI;
-using namespace RETRO;
-
-#define BUFFER_TIMEOUT_MS  500
-
-bool CRenderBufferPoolMMAL::IsCompatible(const CRenderVideoSettings &renderSettings) const
-{
-  if (!CRPRendererMMAL::SupportsScalingMethod(renderSettings.GetScalingMethod()))
-    return false;
-
-  return true;
-}
-
-IRenderBuffer *CRenderBufferPoolMMAL::CreateRenderBuffer(void *header /* = nullptr */)
-{
-  return new CRenderBufferMMALRGB(static_cast<MMAL_BUFFER_HEADER_T*>(header));
-}
-
-bool CRenderBufferPoolMMAL::ConfigureInternal()
-{
-  CSingleLock lock(m_mutex);
-
-  m_mmal_format = MMAL::CMMALPool::TranslateFormat(m_format);
-
-  if (m_mmal_format == MMAL_ENCODING_UNKNOWN)
-  {
-    CLog::Log(LOGERROR, "MMAL pool: Invalid pixel format (%d)", m_format);
-    return false;
-  }
-
-  m_alignedWidth = m_width;
-  m_alignedHeight = m_height;
-  const unsigned int bpp = g_RBP.GetFrameGeometry(m_mmal_format, m_width, m_height).getBytesPerPixel();
-  m_frameSize = m_width * m_height * bpp;
-
-  if (m_frameSize == 0)
-  {
-    CLog::Log(LOGERROR, "Failed to configure pool of dims %ux%ux%u", m_width, m_height, bpp);
-    return false;
-  }
-
-  if (!InitializeMMAL())
-    return false;
-
-  // Success
-  CLog::Log(LOGDEBUG, "Pool buffer size %u (%ux%ux%u) format: %d", m_frameSize, m_width, m_height, bpp, m_format);
-
-  return true;
-}
-
-bool CRenderBufferPoolMMAL::InitializeMMAL()
-{
-  // Create MMAL pool
-  MMAL_STATUS_T status;
-
-  status = mmal_component_create(MMAL_COMPONENT_DEFAULT_VIDEO_RENDERER, &m_component);
-  if (status != MMAL_SUCCESS)
-  {
-    CLog::Log(LOGERROR, "Failed to create component %s", MMAL_COMPONENT_DEFAULT_VIDEO_RENDERER);
-    return false;
-  }
-
-  MMAL_PORT_T *port = m_input ? m_component->input[0] : m_component->output[0];
-
-  // Set up initial decoded frame format - may change from this
-  port->format->encoding = m_mmal_format;
-
-  status = mmal_port_parameter_set_boolean(port, MMAL_PARAMETER_ZERO_COPY, MMAL_TRUE);
-  if (status != MMAL_SUCCESS)
-  {
-    CLog::Log(LOGERROR, "Failed to enable zero copy mode on %s (status=%x %s)", port->name, status, mmal_status_to_string(status));
-    return false;
-  }
-
-  status = mmal_port_format_commit(port);
-  if (status != MMAL_SUCCESS)
-  {
-    CLog::Log(LOGERROR, "Failed to commit format for %s (status=%x %s)", port->name, status, mmal_status_to_string(status));
-    return false;
-  }
-
-  port->buffer_size = m_frameSize;
-  unsigned int bufferCount = 1; //! @todo
-  port->buffer_num = std::max(bufferCount, port->buffer_num_recommended);
-
-  m_mmal_pool = mmal_port_pool_create(port, port->buffer_num, port->buffer_size);
-  if (m_mmal_pool == nullptr)
-  {
-    CLog::Log(LOGERROR, "Failed to create pool for port %s", port->name);
-    return false;
-  }
-
-  CLog::Log(LOGDEBUG, "Created pool of size %ux%u for port %s", bufferCount, m_frameSize, port->name);
-
-  return true;
-}
-
-void CRenderBufferPoolMMAL::Deinitialize()
-{
-  Flush();
-
-  MMAL_STATUS_T status;
-
-  MMAL_PORT_T *port = m_input ? m_component->input[0] : m_component->output[0];
-
-  CLog::Log(LOGDEBUG, "Destroying pool for port %s", port->name);
-
-  if (port != nullptr && port->is_enabled)
-  {
-    status = mmal_port_disable(port);
-    if (status != MMAL_SUCCESS)
-       CLog::Log(LOGERROR, "Failed to disable port %s (status=%x %s)", port->name, status, mmal_status_to_string(status));
-  }
-
-  if (m_component != nullptr && m_component->is_enabled)
-  {
-    status = mmal_component_disable(m_component);
-    if (status != MMAL_SUCCESS)
-      CLog::Log(LOGERROR, "Failed to disable component %s (status=%x %s)", m_component->name, status, mmal_status_to_string(status));
-  }
-
-  if (m_component != nullptr)
-    mmal_component_destroy(m_component);
-
-  m_component = nullptr;
-
-  if (m_mmal_pool != nullptr)
-    mmal_port_pool_destroy(port, m_mmal_pool);
-
-  m_mmal_pool = nullptr;
-}
-
-void *CRenderBufferPoolMMAL::GetHeader(unsigned int timeoutMs /* = 0 */)
-{
-  MMAL_BUFFER_HEADER_T *buffer = nullptr;
-
-  if (m_mmal_pool != nullptr && m_mmal_pool->queue != nullptr)
-    buffer = mmal_queue_timedwait(m_mmal_pool->queue, timeoutMs);
-
-  if (timeoutMs > 0 && buffer == nullptr)
-    CLog::Log(LOGERROR, "Pool failed with timeout %ums", timeoutMs);
-
-  return buffer;
-}
-
-bool CRenderBufferPoolMMAL::GetHeaderWithTimeout(void *&header)
-{
-  header = GetHeader(BUFFER_TIMEOUT_MS);
-
-  return header != nullptr;
-}
-
-bool CRenderBufferPoolMMAL::SendBuffer(IRenderBuffer *buffer)
-{
-  CSingleLock lock(m_mutex);
-
-  if (m_mmal_pool == nullptr || m_component == nullptr)
-    return false;
-
-  MMAL_PORT_T *port = m_input ? m_component->input[0] : m_component->output[0];
-  if (!port->is_enabled)
-    return false;
-
-  MMAL_STATUS_T status = mmal_port_send_buffer(port, static_cast<CRenderBufferMMAL*>(buffer)->GetHeader());
-
-  if (status != MMAL_SUCCESS)
-  {
-    CLog::Log(LOGERROR, "Failed to send buffer from pool to %s (status=0%x %s)", port->name, status, mmal_status_to_string(status));
-    return false;
-  }
-
-  return true;
-}
diff --git a/xbmc/cores/RetroPlayer/process/rbpi/RenderBufferPoolMMAL.h b/xbmc/cores/RetroPlayer/process/rbpi/RenderBufferPoolMMAL.h
deleted file mode 100644
index 7387f3f9c820..000000000000
--- a/xbmc/cores/RetroPlayer/process/rbpi/RenderBufferPoolMMAL.h
+++ /dev/null
@@ -1,82 +0,0 @@
-/*
- *      Copyright (C) 2017 Team Kodi
- *      http://kodi.tv
- *
- *  This Program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2, or (at your option)
- *  any later version.
- *
- *  This Program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- *  GNU General Public License for more details.
- *
- *  You should have received a copy of the GNU General Public License
- *  along with this Program; see the file COPYING.  If not, see
- *  <http://www.gnu.org/licenses/>.
- *
- */
-
-#pragma once
-
-#include "cores/RetroPlayer/buffers/BaseRenderBufferPool.h"
-#include "threads/CriticalSection.h"
-
-extern "C" {
-#include "libavutil/pixfmt.h"
-}
-
-#include <interface/mmal/mmal.h>
-
-namespace KODI
-{
-namespace RETRO
-{
-  class CRenderBufferMMAL;
-  class IRenderBuffer;
-
-  class CRenderBufferPoolMMAL : public CBaseRenderBufferPool
-  {
-  public:
-    CRenderBufferPoolMMAL() = default;
-    ~CRenderBufferPoolMMAL() override { Deinitialize(); }
-
-    // implementation of IRenderBufferPool via CBaseRenderBufferPool
-    bool IsCompatible(const CRenderVideoSettings &renderSettings) const override;
-
-    // MMAL interface
-    MMAL_FOURCC_T Encoding() const { return m_mmal_format; }
-    unsigned int AlignedWidth() const { return m_alignedWidth; }
-    unsigned int AlignedHeight() const { return m_alignedHeight; }
-
-  protected:
-    // implementation of CBaseRenderBufferPool
-    IRenderBuffer *CreateRenderBuffer(void *header = nullptr) override;
-    bool ConfigureInternal() override;
-    void *GetHeader(unsigned int timeoutMs = 0) override;
-    bool GetHeaderWithTimeout(void *&header) override;
-    bool SendBuffer(IRenderBuffer *buffer) override;
-
-  private:
-    bool InitializeMMAL();
-    void Deinitialize();
-
-    IRenderBuffer *GetBufferWithTimeout(unsigned int timeoutMs);
-
-    // Stream properties
-    MMAL_FOURCC_T m_mmal_format = MMAL_ENCODING_UNKNOWN;
-    unsigned int m_alignedWidth = 0;
-    unsigned int m_alignedHeight = 0;
-
-    // MMAL properties
-    //MMALState m_state;
-    bool m_input = false; //! @todo Needed?
-    MMAL_POOL_T *m_mmal_pool = nullptr;
-    MMAL_COMPONENT_T *m_component = nullptr;
-
-    // Synchronization
-    CCriticalSection m_mutex;
-  };
-}
-}
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/CMakeLists.txt b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/CMakeLists.txt
index fa665fd36e46..6610dfc424f9 100644
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/CMakeLists.txt
+++ b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/CMakeLists.txt
@@ -18,15 +18,6 @@ if(OPENGL_FOUND)
   list(APPEND HEADERS RPRendererOpenGL.h)
 endif()
 
-if(MMAL_FOUND)
-  list(APPEND SOURCES MMALProcess.cpp
-                      MMALRenderer.cpp
-                      RPRendererMMAL.cpp)
-  list(APPEND HEADERS MMALProcess.h
-                      MMALRenderer.h
-                      RPRendererMMAL.h)
-endif()
-
 if(CORE_PLATFORM_NAME_LC STREQUAL gbm)
   list(APPEND SOURCES RPRendererGBM.cpp)
   list(APPEND HEADERS RPRendererGBM.h)
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/MMALProcess.cpp b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/MMALProcess.cpp
deleted file mode 100644
index 20807791e8c0..000000000000
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/MMALProcess.cpp
+++ /dev/null
@@ -1,109 +0,0 @@
-/*
- *      Copyright (C) 2017 Team Kodi
- *      http://kodi.tv
- *
- *  This Program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2, or (at your option)
- *  any later version.
- *
- *  This Program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- *  GNU General Public License for more details.
- *
- *  You should have received a copy of the GNU General Public License
- *  along with this Program; see the file COPYING.  If not, see
- *  <http://www.gnu.org/licenses/>.
- *
- */
-
-#include "MMALProcess.h"
-#include "MMALRenderer.h"
-#include "cores/RetroPlayer/buffers/IRenderBufferPool.h"
-#include "cores/RetroPlayer/process/rbpi/RenderBufferMMAL.h"
-#include "threads/SingleLock.h"
-#include "utils/log.h"
-
-using namespace KODI;
-using namespace RETRO;
-
-CMMALProcess::CMMALProcess(IRenderBufferPool *bufferPool, CMMALRenderer *renderer) :
-  CThread("RPProcessMMAL"),
-  m_bufferPool(bufferPool),
-  m_renderer(renderer)
-{
-}
-
-void CMMALProcess::Deinitialize()
-{
-  CSingleLock lock(m_mutex);
-
-  if (m_queue_process != nullptr)
-  {
-    mmal_queue_put(m_queue_process, &m_quitpacket);
-
-    {
-      CSingleExit unlock(m_mutex);
-      StopThread(true);
-    }
-
-    mmal_queue_destroy(m_queue_process);
-    m_queue_process = nullptr;
-  }
-}
-
-void CMMALProcess::Put(CRenderBufferMMAL *buffer)
-{
-  CSingleLock lock(m_mutex);
-
-  mmal_queue_put(m_queue_process, buffer->GetHeader());
-}
-
-void CMMALProcess::Process()
-{
-  CLog::Log(LOGDEBUG, "MMAL process starting");
-
-  while (true)
-  {
-    MMAL_BUFFER_HEADER_T *buffer = mmal_queue_wait(m_queue_process);
-    if (buffer == nullptr)
-      break;
-
-    if (buffer == &m_quitpacket)
-      break;
-
-    HandleBuffer(buffer);
-  }
-
-  CLog::Log(LOGDEBUG, "MMAL process stopping");
-}
-
-void CMMALProcess::HandleBuffer(MMAL_BUFFER_HEADER_T *buffer)
-{
-  CSingleLock lock(m_mutex);
-
-  CRenderBufferMMALRGB *rgbBuffer = static_cast<CRenderBufferMMALRGB*>(buffer->user_data);
-  if (rgbBuffer == nullptr)
-    return;
-
-  bool bKept = false;
-
-  if (buffer->cmd == 0 &&
-      !(buffer->flags & (MMAL_BUFFER_HEADER_FLAG_EOS | MMAL_BUFFER_HEADER_FLAG_TRANSMISSION_FAILED)) &&
-      buffer->length > 0)
-  {
-    if (m_renderer->PutRenderer(rgbBuffer))
-    {
-      bKept = true;
-    }
-    else
-    {
-      if (m_renderer->SendVout(rgbBuffer))
-        bKept = true;
-    }
-  }
-
-  if (!bKept)
-    rgbBuffer->Release();
-}
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/MMALProcess.h b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/MMALProcess.h
deleted file mode 100644
index 7873f7d4d51d..000000000000
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/MMALProcess.h
+++ /dev/null
@@ -1,65 +0,0 @@
-/*
- *      Copyright (C) 2017 Team Kodi
- *      http://kodi.tv
- *
- *  This Program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2, or (at your option)
- *  any later version.
- *
- *  This Program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- *  GNU General Public License for more details.
- *
- *  You should have received a copy of the GNU General Public License
- *  along with this Program; see the file COPYING.  If not, see
- *  <http://www.gnu.org/licenses/>.
- *
- */
-
-#pragma once
-
-#include "threads/CriticalSection.h"
-#include "threads/Thread.h"
-
-#include <interface/mmal/mmal.h>
-
-namespace KODI
-{
-namespace RETRO
-{
-  class CMMALRenderer;
-  class CRenderBufferMMAL;
-  class IRenderBufferPool;
-
-  class CMMALProcess : public CThread
-  {
-  public:
-    CMMALProcess(IRenderBufferPool *bufferPool, CMMALRenderer *renderer);
-    ~CMMALProcess() override { Deinitialize(); }
-
-    void Deinitialize();
-
-    void Put(CRenderBufferMMAL *buffer);
-
-  protected:
-    // implementation of CThread
-    void Process() override;
-
-  private:
-    void HandleBuffer(MMAL_BUFFER_HEADER_T *buffer);
-
-    // Construction parameters
-    IRenderBufferPool *const m_bufferPool;
-    CMMALRenderer *const m_renderer;
-
-    // MMAL properties
-    MMAL_QUEUE_T *m_queue_process = nullptr;
-    MMAL_BUFFER_HEADER_T m_quitpacket;
-
-    // Synchronization parameters
-    CCriticalSection m_mutex;
-  };
-}
-}
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/MMALRenderer.cpp b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/MMALRenderer.cpp
deleted file mode 100644
index 49a45ad13c17..000000000000
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/MMALRenderer.cpp
+++ /dev/null
@@ -1,410 +0,0 @@
-/*
- *      Copyright (C) 2017 Team Kodi
- *      http://kodi.tv
- *
- *  This Program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2, or (at your option)
- *  any later version.
- *
- *  This Program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- *  GNU General Public License for more details.
- *
- *  You should have received a copy of the GNU General Public License
- *  along with this Program; see the file COPYING.  If not, see
- *  <http://www.gnu.org/licenses/>.
- *
- */
-
-#include "MMALRenderer.h"
-#include "MMALProcess.h"
-#include "cores/RetroPlayer/process/rbpi/RenderBufferMMAL.h"
-#include "cores/RetroPlayer/process/rbpi/RenderBufferPoolMMAL.h"
-#include "cores/RetroPlayer/rendering/RenderContext.h"
-#include "platform/linux/RBP.h"
-#include "threads/SingleLock.h"
-#include "utils/log.h"
-
-#include <interface/mmal/util/mmal_default_components.h>
-#include <interface/mmal/util/mmal_util.h>
-#include <interface/mmal/util/mmal_util_params.h>
-
-#include <assert.h>
-#include <math.h>
-
-using namespace KODI;
-using namespace RETRO;
-
-//! @todo How many buffers?
-#define MMAL_NUM_OUTPUT_BUFFERS  2
-
-namespace
-{
-  static void vout_input_port_cb_static(MMAL_PORT_T *port, MMAL_BUFFER_HEADER_T *buffer)
-  {
-    CMMALRenderer *mmal = reinterpret_cast<CMMALRenderer*>(port->userdata);
-    CRenderBufferMMAL *mmalBuffer = static_cast<CRenderBufferMMAL*>(buffer->user_data);
-
-    mmal->VoutInputPortCallback(port, mmalBuffer);
-  }
-}
-
-CMMALRenderer::CMMALRenderer(CRenderContext &renderContext, IRenderBufferPool *bufferPool) :
-  CThread("RPRendererMMAL"),
-  m_renderContext(renderContext),
-  m_bufferPool(bufferPool)
-{
-  assert(m_bufferPool != nullptr);
-}
-
-bool CMMALRenderer::CheckConfigurationVout(uint32_t width, uint32_t height, uint32_t aligned_width, uint32_t aligned_height, MMAL_FOURCC_T encoding)
-{
-  MMAL_STATUS_T status;
-
-  bool sizeChanged = width != m_vout_width ||
-                     height != m_vout_height ||
-                     aligned_width != m_vout_aligned_width ||
-                     aligned_height != m_vout_aligned_height;
-
-  bool encodingChanged = m_vout_input == nullptr ||
-                         m_vout_input->format == nullptr ||
-                         encoding != m_vout_input->format->encoding;
-
-  if (m_vout == nullptr)
-  {
-    // Create video renderer
-    CLog::Log(LOGDEBUG, "Creating MMAL renderer");
-
-    status = mmal_component_create(MMAL_COMPONENT_DEFAULT_VIDEO_RENDERER, &m_vout);
-    if(status != MMAL_SUCCESS)
-    {
-      CLog::Log(LOGERROR, "Failed to create vout component (status=%x %s)", status, mmal_status_to_string(status));
-      return false;
-    }
-
-    m_vout_input = m_vout->input[0];
-
-    status = mmal_port_parameter_set_boolean(m_vout_input, MMAL_PARAMETER_NO_IMAGE_PADDING, MMAL_TRUE);
-    if (status != MMAL_SUCCESS)
-      CLog::Log(LOGERROR, "Failed to enable no image padding mode on %s (status=%x %s)", m_vout_input->name, status, mmal_status_to_string(status));
-
-    status = mmal_port_parameter_set_boolean(m_vout_input, MMAL_PARAMETER_ZERO_COPY, MMAL_TRUE);
-    if (status != MMAL_SUCCESS)
-       CLog::Log(LOGERROR, "Failed to enable zero copy mode on %s (status=%x %s)", m_vout_input->name, status, mmal_status_to_string(status));
-
-    m_vout_input->format->type = MMAL_ES_TYPE_VIDEO;
-  }
-
-  if (m_vout_input != nullptr &&
-      m_vout_input->format != nullptr &&
-      m_vout_input->format->es != nullptr &&
-      (sizeChanged || encodingChanged))
-  {
-    CLog::Log(LOGDEBUG, "Changing Vout dimensions from %dx%d (%dx%d) to %dx%d (%dx%d) %.4s",
-        m_vout_width, m_vout_height, m_vout_aligned_width, m_vout_aligned_height,
-        width, height, aligned_width, aligned_height,
-        reinterpret_cast<char*>(&encoding));
-
-    // We need to disable port when encoding changes, but not if just resolution changes
-    if (encodingChanged && m_vout_input->is_enabled)
-    {
-      status = mmal_port_disable(m_vout_input);
-      if (status != MMAL_SUCCESS)
-      {
-        CLog::Log(LOGERROR, "Failed to disable vout input port (status=%x %s)", status, mmal_status_to_string(status));
-        return false;
-      }
-    }
-
-    m_vout_width = width;
-    m_vout_height = height;
-    m_vout_aligned_width = aligned_width;
-    m_vout_aligned_height = aligned_height;
-
-    m_vout_input->format->es->video.crop.width = width;
-    m_vout_input->format->es->video.crop.height = height;
-    m_vout_input->format->es->video.width = aligned_width;
-    m_vout_input->format->es->video.height = aligned_height;
-    m_vout_input->format->encoding = encoding;
-
-    status = mmal_port_format_commit(m_vout_input);
-    if (status != MMAL_SUCCESS)
-    {
-      CLog::Log(LOGERROR, "Failed to commit vout input format (status=%x %s)", status, mmal_status_to_string(status));
-      return false;
-    }
-
-    if (!m_vout_input->is_enabled)
-    {
-      m_vout_input->buffer_num = MMAL_NUM_OUTPUT_BUFFERS;
-      m_vout_input->buffer_size = m_vout_input->buffer_size_recommended;
-      m_vout_input->userdata = (struct MMAL_PORT_USERDATA_T *)this;
-
-      status = mmal_port_enable(m_vout_input, vout_input_port_cb_static);
-      if (status != MMAL_SUCCESS)
-      {
-        CLog::Log(LOGERROR, "Failed to enable vout input port (status=%x %s)", status, mmal_status_to_string(status));
-        return false;
-      }
-    }
-  }
-
-  if (m_vout != nullptr && !m_vout->is_enabled)
-  {
-    status = mmal_component_enable(m_vout);
-    if(status != MMAL_SUCCESS)
-    {
-      CLog::Log(LOGERROR, "Failed to enable vout component (status=%x %s)", status, mmal_status_to_string(status));
-      return false;
-    }
-
-    if (m_queue_render == nullptr)
-    {
-      m_queue_render = mmal_queue_create();
-      if (m_queue_render != nullptr)
-        Create();
-    }
-  }
-
-  SetVideoRect();
-
-  return true;
-}
-
-void CMMALRenderer::Deinitialize()
-{
-  CSingleLock lock(m_mutex);
-
-  if (m_queue_render != nullptr)
-  {
-    mmal_queue_put(m_queue_render, &m_quitpacket);
-
-    {
-      // Leave the lock to allow other threads to exit
-      CSingleExit unlock(m_mutex);
-      StopThread(true);
-    }
-
-    mmal_queue_destroy(m_queue_render);
-    m_queue_render = nullptr;
-  }
-
-  if (m_vout != nullptr)
-    mmal_component_disable(m_vout);
-
-  if (m_vout_input != nullptr)
-  {
-    mmal_port_flush(m_vout_input);
-    mmal_port_disable(m_vout_input);
-    m_vout_input = nullptr;
-  }
-
-  m_bufferPool->Flush();
-
-  if (m_vout != nullptr)
-  {
-    mmal_component_release(m_vout);
-    m_vout = nullptr;
-  }
-
-  m_vout_width = 0;
-  m_vout_height = 0;
-  m_vout_aligned_width = 0;
-  m_vout_aligned_height = 0;
-  m_src_rect.SetRect(0, 0, 0, 0);
-  m_dst_rect.SetRect(0, 0, 0, 0);
-}
-
-bool CMMALRenderer::PutRenderer(CRenderBufferMMAL *buffer)
-{
-  if (m_queue_render != nullptr)
-  {
-    mmal_queue_put(m_queue_render, buffer->GetHeader());
-    return true;
-  }
-
-  return false;
-}
-
-bool CMMALRenderer::SendVout(CRenderBufferMMAL *buffer)
-{
-  bool bSuccess = false;
-
-  CRenderBufferPoolMMAL *bufferPool = static_cast<CRenderBufferPoolMMAL*>(m_bufferPool);
-  if (CheckConfigurationVout(bufferPool->Width(),
-                             bufferPool->Height(),
-                             bufferPool->AlignedWidth(),
-                             bufferPool->AlignedHeight(),
-                             bufferPool->Encoding()))
-  {
-    MMAL_STATUS_T status = mmal_port_send_buffer(m_vout_input, buffer->GetHeader());
-    if (status != MMAL_SUCCESS)
-      CLog::Log(LOGERROR, "Failed to send buffer to %s (status=0%x %s)", m_vout_input->name, status, mmal_status_to_string(status));
-    else
-      bSuccess = true;
-  }
-
-  return bSuccess;
-}
-
-void CMMALRenderer::SetDimensions(const CRect &sourceRect, const CRect &destRect)
-{
-  m_cachedSourceRect = sourceRect;
-  m_cachedDestRect = destRect;
-}
-
-void CMMALRenderer::Process()
-{
-  SetPriority(THREAD_PRIORITY_ABOVE_NORMAL);
-
-  while (!m_bStop)
-  {
-    g_RBP.WaitVsync();
-
-    CSingleLock lock(m_mutex);
-
-    // We may need to discard frames if frame rate is above display frame rate
-    while (mmal_queue_length(m_queue_render) > 1)
-    {
-      MMAL_BUFFER_HEADER_T *buffer = mmal_queue_get(m_queue_render);
-      if (buffer == &m_quitpacket)
-      {
-        m_bStop = true;
-        break;
-      }
-      else if (buffer != nullptr)
-      {
-        CRenderBufferMMALRGB *rgbBuffer = static_cast<CRenderBufferMMALRGB*>(buffer->user_data);
-        rgbBuffer->Release();
-      }
-    }
-
-    if (m_bStop)
-      break;
-
-    // Display a new frame
-    MMAL_BUFFER_HEADER_T *buffer = mmal_queue_get(m_queue_render);
-    if (buffer == &m_quitpacket)
-    {
-      m_bStop = true;
-      break;
-    }
-    else if (buffer != nullptr)
-    {
-      CRenderBufferMMALRGB *rgbBuffer = static_cast<CRenderBufferMMALRGB*>(buffer->user_data);
-      SendVout(rgbBuffer);
-    }
-  }
-}
-
-void CMMALRenderer::SetVideoRect()
-{
-  CRect srcRect = m_cachedSourceRect;
-  CRect destRect = m_cachedDestRect;
-
-  const unsigned int orientation = 0; //! @todo Get from base renderer
-
-  if (m_vout_input == nullptr)
-    return;
-
-  // Fix up transposed video
-  if (orientation == 90 || orientation == 270)
-  {
-    float newWidth;
-    float newHeight;
-    float aspectRatio = srcRect.Width() / srcRect.Height();
-
-    // Clamp width if too wide
-    if (destRect.Height() > destRect.Width())
-    {
-      newWidth = destRect.Width(); // Clamp to the width of the old dest rect
-      newHeight = newWidth * aspectRatio;
-    }
-    else // Else clamp to height
-    {
-      newHeight = destRect.Height(); // Clamp to the height of the old dest rect
-      newWidth = newHeight / aspectRatio;
-    }
-
-    // Calculate the center point of the view and offsets
-    float centerX = destRect.x1 + destRect.Width() * 0.5f;
-    float centerY = destRect.y1 + destRect.Height() * 0.5f;
-    float diffX = newWidth * 0.5f;
-    float diffY = newHeight * 0.5f;
-
-    destRect.x1 = centerX - diffX;
-    destRect.x2 = centerX + diffX;
-    destRect.y1 = centerY - diffY;
-    destRect.y2 = centerY + diffY;
-  }
-
-  // Check if destination rect has changed
-  if (m_dst_rect == destRect && m_src_rect == srcRect)
-    return;
-
-  m_src_rect = srcRect;
-  m_dst_rect = destRect;
-
-  // Might need to scale up m_dst_rect to display size as video decodes to
-  // separate video plane that is at display size
-  RESOLUTION res = m_renderContext.GetVideoResolution();
-  CRect gui(0, 0, m_renderContext.GetResolutionInfo(res).iWidth, m_renderContext.GetResolutionInfo(res).iHeight);
-  CRect display(0, 0, m_renderContext.GetResolutionInfo(res).iScreenWidth, m_renderContext.GetResolutionInfo(res).iScreenHeight);
-
-  if (gui != display)
-  {
-    float xscale = display.Width()  / gui.Width();
-    float yscale = display.Height() / gui.Height();
-    destRect.x1 *= xscale;
-    destRect.x2 *= xscale;
-    destRect.y1 *= yscale;
-    destRect.y2 *= yscale;
-  }
-
-  MMAL_DISPLAYREGION_T region = { };
-
-  region.set                 = MMAL_DISPLAY_SET_DEST_RECT|MMAL_DISPLAY_SET_SRC_RECT|MMAL_DISPLAY_SET_FULLSCREEN|MMAL_DISPLAY_SET_NOASPECT|MMAL_DISPLAY_SET_MODE|MMAL_DISPLAY_SET_TRANSFORM;
-  region.dest_rect.x         = lrintf(destRect.x1);
-  region.dest_rect.y         = lrintf(destRect.y1);
-  region.dest_rect.width     = lrintf(destRect.Width());
-  region.dest_rect.height    = lrintf(destRect.Height());
-
-  region.src_rect.x          = lrintf(srcRect.x1);
-  region.src_rect.y          = lrintf(srcRect.y1);
-  region.src_rect.width      = lrintf(srcRect.Width());
-  region.src_rect.height     = lrintf(srcRect.Height());
-
-  region.fullscreen = MMAL_FALSE;
-  region.noaspect = MMAL_TRUE;
-  region.mode = MMAL_DISPLAY_MODE_LETTERBOX;
-
-  if (orientation == 90)
-    region.transform = MMAL_DISPLAY_ROT90;
-  else if (orientation == 180)
-    region.transform = MMAL_DISPLAY_ROT180;
-  else if (orientation == 270)
-    region.transform = MMAL_DISPLAY_ROT270;
-  else
-    region.transform = MMAL_DISPLAY_ROT0;
-
-  MMAL_STATUS_T status = mmal_util_set_display_region(m_vout_input, &region);
-  if (status != MMAL_SUCCESS)
-    CLog::Log(LOGERROR, "Failed to set display region (status=%x %s)", status, mmal_status_to_string(status));
-}
-
-void CMMALRenderer::Flush()
-{
-  if (m_vout_input != nullptr)
-    mmal_port_flush(m_vout_input);
-}
-
-void CMMALRenderer::VoutInputPortCallback(MMAL_PORT_T *port, CRenderBufferMMAL *buffer)
-{
-  if (m_process != nullptr)
-  {
-    buffer->GetHeader()->length = 0;
-    m_process->Put(buffer);
-  }
-}
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/MMALRenderer.h b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/MMALRenderer.h
deleted file mode 100644
index 5a053fdc7d63..000000000000
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/MMALRenderer.h
+++ /dev/null
@@ -1,94 +0,0 @@
-/*
- *      Copyright (C) 2017 Team Kodi
- *      http://kodi.tv
- *
- *  This Program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2, or (at your option)
- *  any later version.
- *
- *  This Program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- *  GNU General Public License for more details.
- *
- *  You should have received a copy of the GNU General Public License
- *  along with this Program; see the file COPYING.  If not, see
- *  <http://www.gnu.org/licenses/>.
- *
- */
-
-#pragma once
-
-#include "threads/CriticalSection.h"
-#include "threads/Thread.h"
-#include "utils/Geometry.h"
-
-#include <interface/mmal/mmal.h>
-
-namespace KODI
-{
-namespace RETRO
-{
-  class CMMALProcess;
-  class CRenderBufferMMAL;
-  class CRenderContext;
-  class IRenderBufferPool;
-
-  class CMMALRenderer : public CThread
-  {
-  public:
-    CMMALRenderer(CRenderContext &renderContext, IRenderBufferPool *bufferPool);
-    ~CMMALRenderer() override { Deinitialize(); }
-
-    void RegisterProcess(CMMALProcess *process) { m_process = process; }
-    void UnregisterProcess() { m_process = nullptr; }
-
-    bool CheckConfigurationVout(uint32_t width, uint32_t height, uint32_t aligned_width, uint32_t aligned_height, MMAL_FOURCC_T encoding);
-
-    void Deinitialize();
-
-    bool PutRenderer(CRenderBufferMMAL *buffer);
-
-    bool SendVout(CRenderBufferMMAL *buffer);
-
-    void SetDimensions(const CRect &sourceRect, const CRect &destRect);
-
-    void SetVideoRect();
-
-    void Flush();
-
-    // MMAL callbacks
-    void VoutInputPortCallback(MMAL_PORT_T *port, CRenderBufferMMAL *buffer);
-
-  protected:
-    // implementation of CThread
-    void Process() override;
-
-  private:
-    // Construction parameters
-    CRenderContext &m_renderContext;
-    IRenderBufferPool *const m_bufferPool;
-
-    // MMAL properties
-    CMMALProcess *m_process = nullptr;
-    MMAL_QUEUE_T *m_queue_render = nullptr;
-    MMAL_COMPONENT_T *m_vout = nullptr;
-    MMAL_PORT_T *m_vout_input = nullptr;
-    uint32_t m_vout_width = 0;
-    uint32_t m_vout_height = 0;
-    uint32_t m_vout_aligned_width = 0;
-    uint32_t m_vout_aligned_height = 0;
-    MMAL_BUFFER_HEADER_T m_quitpacket;
-
-    // Dimensions
-    CRect m_cachedSourceRect;
-    CRect m_cachedDestRect;
-    CRect m_src_rect;
-    CRect m_dst_rect;
-
-    // Synchronization parameters
-    CCriticalSection m_mutex;
-  };
-}
-}
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererMMAL.cpp b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererMMAL.cpp
deleted file mode 100644
index 61bc2a91ffbd..000000000000
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererMMAL.cpp
+++ /dev/null
@@ -1,154 +0,0 @@
-/*
- *      Copyright (C) 2017 Team Kodi
- *      http://kodi.tv
- *
- *  This Program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2, or (at your option)
- *  any later version.
- *
- *  This Program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- *  GNU General Public License for more details.
- *
- *  You should have received a copy of the GNU General Public License
- *  along with this Program; see the file COPYING.  If not, see
- *  <http://www.gnu.org/licenses/>.
- *
- */
-
-#include "RPRendererMMAL.h"
-#include "MMALProcess.h"
-#include "MMALRenderer.h"
-#include "cores/RetroPlayer/process/rbpi/RenderBufferMMAL.h"
-#include "cores/RetroPlayer/process/rbpi/RenderBufferPoolMMAL.h"
-#include "threads/SingleLock.h"
-#include "platform/linux/RBP.h"
-
-using namespace KODI;
-using namespace RETRO;
-
-// --- CRendererFactoryMMAL ----------------------------------------------------
-
-std::string CRendererFactoryMMAL::RenderSystemName() const
-{
-  return "MMAL";
-}
-
-CRPBaseRenderer *CRendererFactoryMMAL::CreateRenderer(const CRenderSettings &settings, CRenderContext &context, std::shared_ptr<IRenderBufferPool> bufferPool)
-{
-  return new CRPRendererMMAL(settings, context, std::move(bufferPool));
-}
-
-RenderBufferPoolVector CRendererFactoryMMAL::CreateBufferPools(CRenderContext &context)
-{
-  return { std::make_shared<CRenderBufferPoolMMAL>() };
-}
-
-// --- CRPRendererMMAL ---------------------------------------------------------
-
-CRPRendererMMAL::CRPRendererMMAL(const CRenderSettings &renderSettings, CRenderContext &context, std::shared_ptr<IRenderBufferPool> bufferPool) :
-  CRPBaseRenderer(renderSettings, context, std::move(bufferPool))
-{
-}
-
-CRPRendererMMAL::~CRPRendererMMAL()
-{
-  Deinitialize();
-}
-
-bool CRPRendererMMAL::Supports(RENDERFEATURE feature) const
-{
-  if (feature == RENDERFEATURE::STRETCH         ||
-      feature == RENDERFEATURE::ZOOM            ||
-      feature == RENDERFEATURE::ROTATION        ||
-      feature == RENDERFEATURE::PIXEL_RATIO)
-    return true;
-
-  return false;
-}
-
-bool CRPRendererMMAL::SupportsScalingMethod(SCALINGMETHOD method)
-{
-  if (method == SCALINGMETHOD::LINEAR)
-    return true;
-
-  return false;
-}
-
-SCALINGMETHOD CRPRendererMMAL::GetDefaultScalingMethod() const
-{
-  return SCALINGMETHOD::LINEAR; //! @todo Add nearest neighbor support
-}
-
-void CRPRendererMMAL::Deinitialize()
-{
-  CSingleLock lock(m_mutex);
-
-  if (m_renderer)
-    m_renderer->UnregisterProcess();
-  m_process.reset();
-  m_renderer.reset();
-}
-
-bool CRPRendererMMAL::ConfigureInternal()
-{
-  CSingleLock lock(m_mutex);
-
-  //! @todo
-  m_bufferPool->Configure(m_format, m_sourceWidth, m_sourceHeight);
-
-  m_renderer.reset(new CMMALRenderer(m_context, m_bufferPool.get()));
-  m_process.reset(new CMMALProcess(m_bufferPool.get(), m_renderer.get()));
-  m_renderer->RegisterProcess(m_process.get());
-  return true;
-}
-
-void CRPRendererMMAL::RenderInternal(bool clear, uint8_t alpha)
-{
-  CSingleLock lock(m_mutex);
-
-  if (!m_bufferPool)
-    return;
-
-  if (m_renderBuffer == nullptr)
-    return;
-
-  // We only want to upload frames once
-  if (m_renderBuffer->IsRendered())
-  {
-    m_renderer->SetVideoRect();
-    return;
-  }
-
-  m_renderBuffer->Acquire();
-  m_process->Put(static_cast<CRenderBufferMMAL*>(m_renderBuffer));
-
-  m_renderBuffer = nullptr;
-}
-
-void CRPRendererMMAL::FlushInternal()
-{
-  CSingleLock lock(m_mutex);
-
-  if (m_renderer)
-    m_renderer->Flush();
-}
-
-void CRPRendererMMAL::ManageRenderArea()
-{
-  CRPBaseRenderer::ManageRenderArea();
-
-  if (m_renderer)
-  {
-    //! @todo
-    /*
-    CRect source;
-    CRect dest;
-    CRect view;
-    GetVideoRect(source, dest, view);
-    m_renderer->SetDimensions(source, dest);
-    */
-  }
-}
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererMMAL.h b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererMMAL.h
deleted file mode 100644
index 4da6c0314b2d..000000000000
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererMMAL.h
+++ /dev/null
@@ -1,80 +0,0 @@
-/*
- *      Copyright (C) 2017 Team Kodi
- *      http://kodi.tv
- *
- *  This Program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2, or (at your option)
- *  any later version.
- *
- *  This Program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- *  GNU General Public License for more details.
- *
- *  You should have received a copy of the GNU General Public License
- *  along with this Program; see the file COPYING.  If not, see
- *  <http://www.gnu.org/licenses/>.
- *
- */
-
-#pragma once
-
-#include "RPBaseRenderer.h"
-#include "cores/RetroPlayer/process/RPProcessInfo.h"
-#include "cores/GameSettings.h"
-#include "threads/CriticalSection.h"
-
-#include <memory>
-
-namespace KODI
-{
-namespace RETRO
-{
-  class CMMALProcess;
-  class CMMALRenderer;
-  class CRenderContext;
-  class CRenderSettings;
-  class IRenderBuffer;
-  class IRenderBufferPool;
-
-  class CRendererFactoryMMAL : public IRendererFactory
-  {
-  public:
-    ~CRendererFactoryMMAL() override = default;
-
-    virtual std::string RenderSystemName() const override;
-    CRPBaseRenderer *CreateRenderer(const CRenderSettings &settings, CRenderContext &context, std::shared_ptr<IRenderBufferPool> bufferPool) override;
-    RenderBufferPoolVector CreateBufferPools(CRenderContext &context) override;
-  };
-
-  class CRPRendererMMAL : public CRPBaseRenderer
-  {
-  public:
-    CRPRendererMMAL(const CRenderSettings &renderSettings, CRenderContext &context, std::shared_ptr<IRenderBufferPool> bufferPool);
-    ~CRPRendererMMAL() override;
-
-    // public implementation of CRPBaseRenderer
-    bool Supports(RENDERFEATURE feature) const override;
-    SCALINGMETHOD GetDefaultScalingMethod() const override;
-    void Deinitialize() override;
-
-    static bool SupportsScalingMethod(SCALINGMETHOD method);
-
-  protected:
-    // protected implementation of CRPBaseRenderer
-    bool ConfigureInternal() override;
-    void RenderInternal(bool clear, uint8_t alpha) override;
-    void FlushInternal() override;
-    void ManageRenderArea() override;
-
-  private:
-    // MMAL properties
-    std::unique_ptr<CMMALProcess> m_process;
-    std::unique_ptr<CMMALRenderer> m_renderer;
-
-    // Synchronization
-    CCriticalSection m_mutex;
-  };
-}
-}
diff --git a/xbmc/windowing/rpi/WinSystemRpiGLESContext.cpp b/xbmc/windowing/rpi/WinSystemRpiGLESContext.cpp
index 490f32f711e4..5962121a6175 100644
--- a/xbmc/windowing/rpi/WinSystemRpiGLESContext.cpp
+++ b/xbmc/windowing/rpi/WinSystemRpiGLESContext.cpp
@@ -26,7 +26,6 @@
 #include "ServiceBroker.h"
 #include "utils/log.h"
 #include "cores/RetroPlayer/process/rbpi/RPProcessInfoPi.h"
-#include "cores/RetroPlayer/rendering/VideoRenderers/RPRendererMMAL.h"
 #include "cores/RetroPlayer/rendering/VideoRenderers/RPRendererOpenGLES.h"
 #include "cores/VideoPlayer/DVDCodecs/DVDFactoryCodec.h"
 #include "cores/VideoPlayer/DVDCodecs/Video/MMALFFmpeg.h"
@@ -58,7 +57,6 @@ bool CWinSystemRpiGLESContext::InitWindowSystem()
   }
   CProcessInfoPi::Register();
   RETRO::CRPProcessInfoPi::Register();
-  //RETRO::CRPProcessInfoPi::RegisterRendererFactory(new RETRO::CRendererFactoryMMAL); //! @todo
   RETRO::CRPProcessInfoPi::RegisterRendererFactory(new RETRO::CRendererFactoryOpenGLES);
   CDVDFactoryCodec::ClearHWAccels();
   MMAL::CDecoder::Register();
