From 53549dc596c7ccdd6f6e6f6a1815b7226e070e17 Mon Sep 17 00:00:00 2001
From: peak3d <pfau@peak3d.de>
Date: Tue, 12 Mar 2019 20:05:49 +0100
Subject: [PATCH] [Android] Yet another refreshrate switch enhancement

---
 xbmc/platform/android/activity/XBMCApp.cpp  | 44 +++++++--------------
 xbmc/windowing/android/WinSystemAndroid.cpp | 32 +++++++++------
 xbmc/windowing/android/WinSystemAndroid.h   |  2 +-
 3 files changed, 36 insertions(+), 42 deletions(-)

diff --git a/xbmc/platform/android/activity/XBMCApp.cpp b/xbmc/platform/android/activity/XBMCApp.cpp
index 3a6e6f65c57d..e9ae1ab0737f 100644
--- a/xbmc/platform/android/activity/XBMCApp.cpp
+++ b/xbmc/platform/android/activity/XBMCApp.cpp
@@ -120,7 +120,6 @@ int CXBMCApp::m_batteryLevel = 0;
 bool CXBMCApp::m_hasFocus = false;
 bool CXBMCApp::m_headsetPlugged = false;
 bool CXBMCApp::m_hdmiPlugged = true;
-bool CXBMCApp::m_hdmiReportedState = true;
 bool CXBMCApp::m_hdmiSource = false;
 IInputDeviceCallbacks* CXBMCApp::m_inputDeviceCallbacks = nullptr;
 IInputDeviceEventHandler* CXBMCApp::m_inputDeviceEventHandler = nullptr;
@@ -524,11 +523,6 @@ void CXBMCApp::SetRefreshRateCallback(CVariant* rateVariant)
     CJNIWindowManagerLayoutParams params = window.getAttributes();
     if (fabs(params.getpreferredRefreshRate() - rate) > 0.001)
     {
-      if (m_hdmiSource && g_application.GetAppPlayer().IsPlaying())
-      {
-        dynamic_cast<CWinSystemAndroid*>(CServiceBroker::GetWinSystem())->SetHDMIState(false, 1000);
-        m_hdmiReportedState = false;
-      }
       params.setpreferredRefreshRate(rate);
       if (params.getpreferredRefreshRate() > 0.0)
       {
@@ -552,11 +546,6 @@ void CXBMCApp::SetDisplayModeCallback(CVariant* variant)
     CJNIWindowManagerLayoutParams params = window.getAttributes();
     if (params.getpreferredDisplayModeId() != mode)
     {
-      if (m_hdmiSource && g_application.GetAppPlayer().IsPlaying())
-      {
-        dynamic_cast<CWinSystemAndroid*>(CServiceBroker::GetWinSystem())->SetHDMIState(false);
-        m_hdmiReportedState = false;
-      }
       params.setpreferredDisplayModeId(mode);
       params.setpreferredRefreshRate(rate);
       window.setAttributes(params);
@@ -585,7 +574,11 @@ void CXBMCApp::SetRefreshRate(float rate)
   CVariant *variant = new CVariant(rate);
   runNativeOnUiThread(SetRefreshRateCallback, variant);
   if (g_application.IsInitialized())
+  {
     m_displayChangeEvent.WaitMSec(5000);
+    if (m_hdmiSource && g_application.GetAppPlayer().IsPlaying())
+      dynamic_cast<CWinSystemAndroid*>(CServiceBroker::GetWinSystem())->SetHDMIState(false);
+  }
 }
 
 void CXBMCApp::SetDisplayMode(int mode, float rate)
@@ -602,7 +595,6 @@ void CXBMCApp::SetDisplayMode(int mode, float rate)
   }
 
   m_displayChangeEvent.Reset();
-
   std::map<std::string, CVariant> vmap;
   vmap["mode"] = mode;
   vmap["rate"] = rate;
@@ -610,7 +602,11 @@ void CXBMCApp::SetDisplayMode(int mode, float rate)
   CVariant *variant = new CVariant(vmap);
   runNativeOnUiThread(SetDisplayModeCallback, variant);
   if (g_application.IsInitialized())
+  {
     m_displayChangeEvent.WaitMSec(5000);
+    if (m_hdmiSource && g_application.GetAppPlayer().IsPlaying())
+      dynamic_cast<CWinSystemAndroid*>(CServiceBroker::GetWinSystem())->SetHDMIState(false);
+  }
 }
 
 int CXBMCApp::android_printf(const char *format, ...)
@@ -1018,24 +1014,13 @@ void CXBMCApp::onReceive(CJNIIntent intent)
   }
   else if (action == "android.media.action.HDMI_AUDIO_PLUG")
   {
-    bool newstate;
-    newstate = (intent.getIntExtra("android.media.extra.AUDIO_PLUG_STATE", 0) != 0);
-
-    if (newstate != m_hdmiPlugged)
+    m_hdmiPlugged = (intent.getIntExtra("android.media.extra.AUDIO_PLUG_STATE", 0) != 0);
+    CLog::Log(LOGDEBUG, "-- HDMI state: %s",  m_hdmiPlugged ? "on" : "off");
+    if (m_hdmiSource && g_application.IsInitialized())
     {
-      CLog::Log(LOGDEBUG, "-- HDMI state: %s",  newstate ? "on" : "off");
-      m_hdmiPlugged = newstate;
-      if (m_hdmiPlugged != m_hdmiReportedState)
-      {
-        if (g_application.IsInitialized())
-        {
-          CWinSystemBase* winSystem = CServiceBroker::GetWinSystem();
-          if (winSystem && dynamic_cast<CWinSystemAndroid*>(winSystem))
-            dynamic_cast<CWinSystemAndroid*>(winSystem)->SetHDMIState(m_hdmiPlugged);
-
-          m_hdmiReportedState = m_hdmiPlugged;
-        }
-      }
+      CWinSystemBase* winSystem = CServiceBroker::GetWinSystem();
+      if (winSystem && dynamic_cast<CWinSystemAndroid*>(winSystem))
+        dynamic_cast<CWinSystemAndroid*>(winSystem)->SetHDMIState(m_hdmiPlugged);
     }
   }
   else if (action == "android.intent.action.SCREEN_OFF")
@@ -1409,6 +1394,7 @@ void CXBMCApp::onDisplayAdded(int displayId)
 
 void CXBMCApp::onDisplayChanged(int displayId)
 {
+  CLog::Log(LOGDEBUG, "CXBMCApp::%s: id: %d", __FUNCTION__, displayId);
   m_displayChangeEvent.Set();
   android_printf("%s: ", __PRETTY_FUNCTION__);
 }
diff --git a/xbmc/windowing/android/WinSystemAndroid.cpp b/xbmc/windowing/android/WinSystemAndroid.cpp
index def4ca4cdd02..9c7807321bbd 100644
--- a/xbmc/windowing/android/WinSystemAndroid.cpp
+++ b/xbmc/windowing/android/WinSystemAndroid.cpp
@@ -201,29 +201,37 @@ void CWinSystemAndroid::OnTimeout()
   SetHDMIState(true);
 }
 
-void CWinSystemAndroid::SetHDMIState(bool connected, uint32_t timeoutMs)
+void CWinSystemAndroid::SetHDMIState(bool connected)
 {
   CSingleLock lock(m_resourceSection);
-  if (connected && m_dispResetState == RESET_WAITEVENT)
+  CLog::Log(LOGDEBUG, "CWinSystemAndroid::SetHDMIState: connected: %d, dispResetState: %d", static_cast<int>(connected), m_dispResetState);
+  if (connected && m_dispResetState != RESET_NOTWAITING)
   {
     for (auto resource : m_resources)
       resource->OnResetDisplay();
+    m_dispResetState = RESET_NOTWAITING;
+    m_dispResetTimer->Stop();
   }
   else if (!connected)
   {
+    if (m_dispResetState == RESET_WAITTIMER)
+    {
+      //HDMI_AUDIOPLUG arrived, use this
+      m_dispResetTimer->Stop();
+      m_dispResetState = RESET_WAITEVENT;
+      return;
+    }
+    else if (m_dispResetState != RESET_NOTWAITING)
+      return;
+
     int delay = CServiceBroker::GetSettingsComponent()->GetSettings()->GetInt("videoscreen.delayrefreshchange") * 100;
 
-    if (timeoutMs > delay)
-      delay = timeoutMs;
+    if (delay < 2000)
+      delay = 2000;
 
-    if (delay > 0)
-    {
-       m_dispResetState = RESET_WAITTIMER;
-       m_dispResetTimer->Stop();
-       m_dispResetTimer->Start(delay);
-    }
-    else
-      m_dispResetState = RESET_WAITEVENT;
+    m_dispResetState = RESET_WAITTIMER;
+    m_dispResetTimer->Stop();
+    m_dispResetTimer->Start(delay);
 
     for (auto resource : m_resources)
       resource->OnLostDisplay();
diff --git a/xbmc/windowing/android/WinSystemAndroid.h b/xbmc/windowing/android/WinSystemAndroid.h
index fec003c926e3..04a8f4a099ad 100644
--- a/xbmc/windowing/android/WinSystemAndroid.h
+++ b/xbmc/windowing/android/WinSystemAndroid.h
@@ -34,7 +34,7 @@ class CWinSystemAndroid : public CWinSystemBase, public ITimerCallback
   bool DestroyWindow() override;
   void UpdateResolutions() override;
 
-  void SetHDMIState(bool connected, uint32_t timeoutMs = 0);
+  void SetHDMIState(bool connected);
 
   bool HasCursor() override { return false; };
 
