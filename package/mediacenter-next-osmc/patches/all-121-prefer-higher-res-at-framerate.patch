From aa40b39e6d82116f144dd01e9a12b118a156b663 Mon Sep 17 00:00:00 2001
From: Graham Horner <graham@hornercs.co.uk>
Date: Sat, 9 Jan 2021 17:10:46 +0000
Subject: [PATCH] Sort whitelist lowres to highres

and match exact framerate at higher resolutions
---
 xbmc/settings/DisplaySettings.cpp |  2 +-
 xbmc/utils/Variant.cpp            | 24 ++++++++++++++++++++++++
 xbmc/utils/Variant.h              |  1 +
 xbmc/windowing/Resolution.cpp     | 30 ++++++++++++++++++++++++++++++
 4 files changed, 56 insertions(+), 1 deletion(-)

diff --git a/xbmc/settings/DisplaySettings.cpp b/xbmc/settings/DisplaySettings.cpp
index 63db011a92..29d270c812 100644
--- a/xbmc/settings/DisplaySettings.cpp
+++ b/xbmc/settings/DisplaySettings.cpp
@@ -704,7 +704,7 @@ RESOLUTION CDisplaySettings::GetResolutionForScreen()
 
 static inline bool ModeSort(const StringSettingOption& i, const StringSettingOption& j)
 {
-  return (i.value > j.value);
+  return (i.value < j.value);
 }
 
 void CDisplaySettings::SettingOptionsModesFiller(const std::shared_ptr<const CSetting>& setting,
diff --git a/xbmc/utils/Variant.cpp b/xbmc/utils/Variant.cpp
index 8ea688ab81..3af7255223 100644
--- a/xbmc/utils/Variant.cpp
+++ b/xbmc/utils/Variant.cpp
@@ -682,6 +682,30 @@ bool CVariant::operator==(const CVariant &rhs) const
   return false;
 }
 
+bool CVariant::operator<(const CVariant &rhs) const
+{
+  if (m_type == rhs.m_type)
+  {
+    switch (m_type)
+    {
+    case VariantTypeInteger:
+      return m_data.integer < rhs.m_data.integer;
+    case VariantTypeUnsignedInteger:
+      return m_data.unsignedinteger < rhs.m_data.unsignedinteger;
+    case VariantTypeDouble:
+      return m_data.dvalue < rhs.m_data.dvalue;
+    case VariantTypeString:
+      return *m_data.string < *rhs.m_data.string;
+    case VariantTypeWideString:
+      return *m_data.wstring < *rhs.m_data.wstring;
+    default:
+      break;
+    }
+  }
+
+  return false;
+}
+
 void CVariant::reserve(size_t length)
 {
   if (m_type == VariantTypeNull)
diff --git a/xbmc/utils/Variant.h b/xbmc/utils/Variant.h
index 9d48a3df23..c069609979 100644
--- a/xbmc/utils/Variant.h
+++ b/xbmc/utils/Variant.h
@@ -101,6 +101,7 @@ public:
   CVariant& operator=(CVariant&& rhs) noexcept;
   bool operator==(const CVariant &rhs) const;
   bool operator!=(const CVariant &rhs) const { return !(*this == rhs); }
+  bool operator<(const CVariant &rhs) const;
 
   void reserve(size_t length);
   void push_back(const CVariant &variant);
diff --git a/xbmc/windowing/Resolution.cpp b/xbmc/windowing/Resolution.cpp
index 21a4fb25c7..ab9d98f210 100644
--- a/xbmc/windowing/Resolution.cpp
+++ b/xbmc/windowing/Resolution.cpp
@@ -87,6 +87,11 @@ RESOLUTION CResolutionUtils::ChooseBestResolution(float fps, int width, int heig
   return res;
 }
 
+static inline bool ModeSort(CVariant i, CVariant j)
+{
+  return (i < j);
+}
+
 void CResolutionUtils::FindResolutionFromWhitelist(float fps, int width, int height, bool is3D, RESOLUTION &resolution)
 {
   RESOLUTION_INFO curr = CServiceBroker::GetWinSystem()->GetGfxContext().GetResInfo(resolution);
@@ -123,6 +128,8 @@ void CResolutionUtils::FindResolutionFromWhitelist(float fps, int width, int hei
     }
   }
 
+  std::sort(indexList.begin(), indexList.end(), ModeSort);
+
   CLog::Log(LOGDEBUG, "[WHITELIST] Searching for an exact resolution with an exact refresh rate");
 
   unsigned int penalty = std::numeric_limits<unsigned int>::max();
@@ -286,6 +293,29 @@ void CResolutionUtils::FindResolutionFromWhitelist(float fps, int width, int hei
               "[WHITELIST] No match for a desktop resolution with double the refresh rate");
   }
 
+  /* Prefer upscaling at the correct framerate if available and specifically whitelisted 
+   * eg for displays with 2160p25/50 but no 1080p25/50
+   */
+  if (HasWhitelist())
+  {
+    CLog::Log(LOGDEBUG, "Current resolution doesn't match, trying higher resolutions");
+    for (const auto& mode : indexList)
+    {
+      auto i = CDisplaySettings::GetInstance().GetResFromString(mode.asString());
+      const RESOLUTION_INFO info = CServiceBroker::GetWinSystem()->GetGfxContext().GetResInfo(i);
+
+      // pick the lowest resolution that has a matching refresh rate
+      if ((info.iScreenHeight >= height || info.iScreenWidth >= width) &&
+          (info.dwFlags & D3DPRESENTFLAG_MODEMASK) == (curr.dwFlags & D3DPRESENTFLAG_MODEMASK) &&
+          MathUtils::FloatEquals(info.fRefreshRate, fps, 0.01f))
+      {
+        resolution = i;
+        CLog::Log(LOGDEBUG, "Matched fuzzy whitelisted Resolution %s (%d)", info.strMode.c_str(), i);
+        return;
+      }
+    }
+  }
+
   if (CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(
           SETTING_VIDEOSCREEN_WHITELIST_PULLDOWN))
   {
-- 
2.25.1

