From b545d75abe87090d5e741ab6fdb4bbdda401edb2 Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Sat, 21 Mar 2020 21:51:07 +0100
Subject: [PATCH 1/3] [addons] change xbmc_addon_types.h include to AddonBase.h
 on AddonStatusHandler.h

The xbmc_addon_types.h is obsolete and only include the AddonBase.h.
There was the last place in Kodi where it was included in his sources.
---
 xbmc/addons/AddonStatusHandler.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/xbmc/addons/AddonStatusHandler.h b/xbmc/addons/AddonStatusHandler.h
index 842aa548724c..0101b407f813 100644
--- a/xbmc/addons/AddonStatusHandler.h
+++ b/xbmc/addons/AddonStatusHandler.h
@@ -9,7 +9,7 @@
 #pragma once
 
 #include "IAddon.h"
-#include "addons/kodi-addon-dev-kit/include/kodi/xbmc_addon_types.h"
+#include "addons/kodi-addon-dev-kit/include/kodi/AddonBase.h"
 #include "threads/CriticalSection.h"
 #include "threads/Thread.h"
 

From e24237cab021c48dd9874da88fded2da5d3691f1 Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Sat, 21 Mar 2020 22:17:07 +0100
Subject: [PATCH 2/3] [addons][pvr] Pass in addon string ID and not its class

This change is an independent part of the rework to switch to the new API.
This removes the use of CAddonDll in some places and gives its string
identification instead.

This is not critical since the called up positions only need this.

The background to this change is that in the multiple instance way the
addon class is no longer usable because it can also affect other instances.

The other reason is to reduce the rework request in size.
---
 xbmc/addons/AddonManager.h         |  2 +-
 xbmc/addons/AddonStatusHandler.cpp |  4 ++--
 xbmc/pvr/addons/PVRClient.cpp      |  2 +-
 xbmc/pvr/addons/PVRClients.cpp     | 26 +++++++++++++-------------
 xbmc/pvr/addons/PVRClients.h       | 16 ++++++++--------
 5 files changed, 25 insertions(+), 25 deletions(-)

diff --git a/xbmc/addons/AddonManager.h b/xbmc/addons/AddonManager.h
index 167b55113d7d..db790e8d973d 100644
--- a/xbmc/addons/AddonManager.h
+++ b/xbmc/addons/AddonManager.h
@@ -42,7 +42,7 @@ namespace ADDON
   {
     public:
       virtual ~IAddonMgrCallback() = default;
-      virtual bool RequestRestart(AddonPtr addon, bool datachanged)=0;
+      virtual bool RequestRestart(const std::string& id, bool datachanged)=0;
   };
 
   /**
diff --git a/xbmc/addons/AddonStatusHandler.cpp b/xbmc/addons/AddonStatusHandler.cpp
index cee4cf591824..da52954fe35a 100644
--- a/xbmc/addons/AddonStatusHandler.cpp
+++ b/xbmc/addons/AddonStatusHandler.cpp
@@ -84,7 +84,7 @@ void CAddonStatusHandler::Process()
   if (m_status == ADDON_STATUS_NEED_RESTART)
   {
     HELPERS::ShowOKDialogLines(CVariant{heading}, CVariant{24074});
-    CServiceBroker::GetAddonMgr().GetCallbackForType(m_addon->Type())->RequestRestart(m_addon, true);
+    CServiceBroker::GetAddonMgr().GetCallbackForType(m_addon->Type())->RequestRestart(m_addon->ID(), true);
   }
   /* Some required settings are missing/invalid */
   else if (m_status == ADDON_STATUS_NEED_SETTINGS)
@@ -107,7 +107,7 @@ void CAddonStatusHandler::Process()
     {
       //! @todo Doesn't dialogaddonsettings save these automatically? It should do this.
       m_addon->SaveSettings();
-      CServiceBroker::GetAddonMgr().GetCallbackForType(m_addon->Type())->RequestRestart(m_addon, true);
+      CServiceBroker::GetAddonMgr().GetCallbackForType(m_addon->Type())->RequestRestart(m_addon->ID(), true);
     }
   }
 }
diff --git a/xbmc/pvr/addons/PVRClient.cpp b/xbmc/pvr/addons/PVRClient.cpp
index 7f280e3ccc1f..ed4e50101973 100644
--- a/xbmc/pvr/addons/PVRClient.cpp
+++ b/xbmc/pvr/addons/PVRClient.cpp
@@ -73,7 +73,7 @@ void CPVRClient::StopRunningInstance()
   {
     // stop the pvr manager and stop and unload the running pvr addon. pvr manager will be restarted on demand.
     CServiceBroker::GetPVRManager().Stop();
-    CServiceBroker::GetPVRManager().Clients()->StopClient(addon, false);
+    CServiceBroker::GetPVRManager().Clients()->StopClient(addon->ID(), false);
   }
 }
 
diff --git a/xbmc/pvr/addons/PVRClients.cpp b/xbmc/pvr/addons/PVRClients.cpp
index 6c1a1d104253..52aff6b9a485 100644
--- a/xbmc/pvr/addons/PVRClients.cpp
+++ b/xbmc/pvr/addons/PVRClients.cpp
@@ -118,12 +118,12 @@ void CPVRClients::UpdateAddons(const std::string& changedAddonId /*= ""*/)
       AddonPtr addon = addonWithStatus.first;
       bool bEnabled = addonWithStatus.second;
 
-      if (bEnabled && (!IsKnownClient(addon) || !IsCreatedClient(addon)))
+      if (bEnabled && (!IsKnownClient(addon->ID()) || !IsCreatedClient(addon->ID())))
       {
         int iClientId = ClientIdFromAddonId(addon->ID());
 
         std::shared_ptr<CPVRClient> client;
-        if (IsKnownClient(addon))
+        if (IsKnownClient(addon->ID()))
         {
           GetClient(iClientId, client);
         }
@@ -138,7 +138,7 @@ void CPVRClients::UpdateAddons(const std::string& changedAddonId /*= ""*/)
         }
         addonsToCreate.emplace_back(std::make_pair(client, iClientId));
       }
-      else if (IsCreatedClient(addon))
+      else if (IsCreatedClient(addon->ID()))
       {
         if (bEnabled)
           addonsToReCreate.emplace_back(addon);
@@ -170,13 +170,13 @@ void CPVRClients::UpdateAddons(const std::string& changedAddonId /*= ""*/)
     for (const auto& addon : addonsToReCreate)
     {
       // recreate client
-      StopClient(addon, true);
+      StopClient(addon->ID(), true);
     }
 
     for (const auto& addon : addonsToDestroy)
     {
       // destroy client
-      StopClient(addon, false);
+      StopClient(addon->ID(), false);
     }
 
     if (!addonsToCreate.empty())
@@ -196,12 +196,12 @@ void CPVRClients::UpdateAddons(const std::string& changedAddonId /*= ""*/)
   }
 }
 
-bool CPVRClients::RequestRestart(AddonPtr addon, bool bDataChanged)
+bool CPVRClients::RequestRestart(const std::string& id, bool bDataChanged)
 {
-  return StopClient(addon, true);
+  return StopClient(id, true);
 }
 
-bool CPVRClients::StopClient(const AddonPtr& addon, bool bRestart)
+bool CPVRClients::StopClient(const std::string& id, bool bRestart)
 {
   // stop playback if needed
   if (CServiceBroker::GetPVRManager().PlaybackState()->IsPlaying())
@@ -209,7 +209,7 @@ bool CPVRClients::StopClient(const AddonPtr& addon, bool bRestart)
 
   CSingleLock lock(m_critSection);
 
-  int iId = GetClientId(addon->ID());
+  int iId = GetClientId(id);
   std::shared_ptr<CPVRClient> mappedClient;
   if (GetClient(iId, mappedClient))
   {
@@ -325,10 +325,10 @@ bool CPVRClients::HasCreatedClients() const
   return false;
 }
 
-bool CPVRClients::IsKnownClient(const AddonPtr& client) const
+bool CPVRClients::IsKnownClient(const std::string& id) const
 {
   // valid client IDs start at 1
-  return GetClientId(client->ID()) > 0;
+  return GetClientId(id) > 0;
 }
 
 bool CPVRClients::IsCreatedClient(int iClientId) const
@@ -337,12 +337,12 @@ bool CPVRClients::IsCreatedClient(int iClientId) const
   return GetCreatedClient(iClientId, client);
 }
 
-bool CPVRClients::IsCreatedClient(const AddonPtr& addon)
+bool CPVRClients::IsCreatedClient(const std::string& id)
 {
   CSingleLock lock(m_critSection);
   for (const auto& client : m_clientMap)
   {
-    if (client.second->ID() == addon->ID())
+    if (client.second->ID() == id)
       return client.second->ReadyToUse();
   }
   return false;
diff --git a/xbmc/pvr/addons/PVRClients.h b/xbmc/pvr/addons/PVRClients.h
index ee6e386f3ea9..6a5f41d38725 100644
--- a/xbmc/pvr/addons/PVRClients.h
+++ b/xbmc/pvr/addons/PVRClients.h
@@ -81,19 +81,19 @@ namespace PVR
 
     /*!
      * @brief Restart a single client add-on.
-     * @param addon The add-on to restart.
+     * @param id The add-on to restart.
      * @param bDataChanged True if the client's data changed, false otherwise (unused).
      * @return True if the client was found and restarted, false otherwise.
      */
-    bool RequestRestart(ADDON::AddonPtr addon, bool bDataChanged) override;
+    bool RequestRestart(const std::string& id, bool bDataChanged) override;
 
     /*!
      * @brief Stop a client.
-     * @param addon The client to stop.
+     * @param id The client to stop.
      * @param bRestart If true, restart the client.
      * @return True if the client was found, false otherwise.
      */
-    bool StopClient(const ADDON::AddonPtr& addon, bool bRestart);
+    bool StopClient(const std::string& id, bool bRestart);
 
     /*!
      * @brief Handle addon events (enable, disable, ...).
@@ -317,17 +317,17 @@ namespace PVR
 
     /*!
      * @brief Check whether a client is known.
-     * @param client The client to check.
+     * @param id The addon id to check.
      * @return True if this client is known, false otherwise.
      */
-    bool IsKnownClient(const ADDON::AddonPtr& client) const;
+    bool IsKnownClient(const std::string& id) const;
 
     /*!
      * @brief Check whether an given addon instance is a created pvr client.
-     * @param addon The addon.
+     * @param id The addon id.
      * @return True if the the addon represents a created client, false otherwise.
      */
-    bool IsCreatedClient(const ADDON::AddonPtr& addon);
+    bool IsCreatedClient(const std::string& id);
 
     /*!
      * @brief Get all created clients and clients not (yet) ready to use.

From 148600f85474a4ef5eeae4467cb4750751442f6f Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Sat, 21 Mar 2020 22:32:28 +0100
Subject: [PATCH 3/3] [addons][pvr] add GetPlayingChannelUniqueID to playback
 state

This add "int CPVRPlaybackState::GetPlayingChannelUniqueID() const" to get
on wanted places the currently running PVR channel unique identifier.

This are also now used by "CPVRGUIInfo::UpdateQualityData()" and
"CPVRGUIInfo::UpdateDescrambleData()" and this !IsPlayingRecording()
becomes replaced with them.

GetPlayingChannelUniqueID() match more the wanted target as to ask
that is not a recording.

Further is this value also needed on reworked PVR system to pass to addon.
But this change here is mostly independent and thats why separated
---
 xbmc/pvr/PVRPlaybackState.cpp          | 5 +++++
 xbmc/pvr/PVRPlaybackState.h            | 6 ++++++
 xbmc/pvr/guilib/guiinfo/PVRGUIInfo.cpp | 8 ++++----
 3 files changed, 15 insertions(+), 4 deletions(-)

diff --git a/xbmc/pvr/PVRPlaybackState.cpp b/xbmc/pvr/PVRPlaybackState.cpp
index 0b9d9d88c6c7..c60bc0e99276 100644
--- a/xbmc/pvr/PVRPlaybackState.cpp
+++ b/xbmc/pvr/PVRPlaybackState.cpp
@@ -258,6 +258,11 @@ std::shared_ptr<CPVREpgInfoTag> CPVRPlaybackState::GetPlayingEpgTag() const
   return m_playingEpgTag;
 }
 
+int CPVRPlaybackState::GetPlayingChannelUniqueID() const
+{
+  return m_playingChannelUniqueId;
+}
+
 std::string CPVRPlaybackState::GetPlayingClientName() const
 {
   return m_strPlayingClientName;
diff --git a/xbmc/pvr/PVRPlaybackState.h b/xbmc/pvr/PVRPlaybackState.h
index 93bc93964e0d..37315f9ab066 100644
--- a/xbmc/pvr/PVRPlaybackState.h
+++ b/xbmc/pvr/PVRPlaybackState.h
@@ -136,6 +136,12 @@ class CPVRPlaybackState
    */
   std::shared_ptr<CPVREpgInfoTag> GetPlayingEpgTag() const;
 
+  /*!
+   * @brief Return playing channel unique identifier
+   * @return The channel id or -1 if not present
+   */
+  int GetPlayingChannelUniqueID() const;
+
   /*!
    * @brief Get the name of the playing client, if there is one.
    * @return The name of the client or an empty string if nothing is playing.
diff --git a/xbmc/pvr/guilib/guiinfo/PVRGUIInfo.cpp b/xbmc/pvr/guilib/guiinfo/PVRGUIInfo.cpp
index a8c4b0641236..c8905f19e5ba 100644
--- a/xbmc/pvr/guilib/guiinfo/PVRGUIInfo.cpp
+++ b/xbmc/pvr/guilib/guiinfo/PVRGUIInfo.cpp
@@ -195,8 +195,8 @@ void CPVRGUIInfo::UpdateQualityData()
 
   if (CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_PVRPLAYBACK_SIGNALQUALITY))
   {
-    bool bIsPlayingRecording = CServiceBroker::GetPVRManager().PlaybackState()->IsPlayingRecording();
-    if (!bIsPlayingRecording)
+    const int channelUid = CServiceBroker::GetPVRManager().PlaybackState()->GetPlayingChannelUniqueID();
+    if (channelUid > 0)
     {
       std::shared_ptr<CPVRClient> client;
       CServiceBroker::GetPVRManager().Clients()->GetCreatedClient(CServiceBroker::GetPVRManager().PlaybackState()->GetPlayingClientID(), client);
@@ -213,8 +213,8 @@ void CPVRGUIInfo::UpdateDescrambleData()
   PVR_DESCRAMBLE_INFO descrambleInfo;
   ClearDescrambleInfo(descrambleInfo);
 
-  bool bIsPlayingRecording = CServiceBroker::GetPVRManager().PlaybackState()->IsPlayingRecording();
-  if (!bIsPlayingRecording)
+  const int channelUid = CServiceBroker::GetPVRManager().PlaybackState()->GetPlayingChannelUniqueID();
+  if (channelUid > 0)
   {
     std::shared_ptr<CPVRClient> client;
     CServiceBroker::GetPVRManager().Clients()->GetCreatedClient(CServiceBroker::GetPVRManager().PlaybackState()->GetPlayingClientID(), client);
