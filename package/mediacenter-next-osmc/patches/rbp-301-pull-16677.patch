From b826b8852e1d3b06d9815da7a462b367d32e16ca Mon Sep 17 00:00:00 2001
From: phunkyfish <phunkyfish@gmail.com>
Date: Wed, 25 Sep 2019 22:36:41 +0100
Subject: [PATCH 1/7] Refactor out CConstPVREpgInfoTagPtr

---
 xbmc/addons/PVRClient.cpp | 8 ++++----
 xbmc/addons/PVRClient.h   | 6 +++---
 2 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/xbmc/addons/PVRClient.cpp b/xbmc/addons/PVRClient.cpp
index b0dfc58e4d94..13de0345b13e 100644
--- a/xbmc/addons/PVRClient.cpp
+++ b/xbmc/addons/PVRClient.cpp
@@ -630,7 +630,7 @@ class CAddonEpgTag : public EPG_TAG
 {
 public:
   CAddonEpgTag() = delete;
-  explicit CAddonEpgTag(const CConstPVREpgInfoTagPtr kodiTag) :
+  explicit CAddonEpgTag(const std::shared_ptr<const CPVREpgInfoTag> kodiTag) :
     m_strTitle(kodiTag->Title()),
     m_strPlotOutline(kodiTag->PlotOutline()),
     m_strPlot(kodiTag->Plot()),
@@ -693,7 +693,7 @@ class CAddonEpgTag : public EPG_TAG
   std::string m_strGenreDescription;
 };
 
-PVR_ERROR CPVRClient::IsRecordable(const CConstPVREpgInfoTagPtr &tag, bool &bIsRecordable) const
+PVR_ERROR CPVRClient::IsRecordable(const std::shared_ptr<const CPVREpgInfoTag> &tag, bool &bIsRecordable) const
 {
   return DoAddonCall(__FUNCTION__, [tag, &bIsRecordable](const AddonInstance* addon) {
     CAddonEpgTag addonTag(tag);
@@ -701,7 +701,7 @@ PVR_ERROR CPVRClient::IsRecordable(const CConstPVREpgInfoTagPtr &tag, bool &bIsR
   }, m_clientCapabilities.SupportsRecordings() && m_clientCapabilities.SupportsEPG());
 }
 
-PVR_ERROR CPVRClient::IsPlayable(const CConstPVREpgInfoTagPtr &tag, bool &bIsPlayable) const
+PVR_ERROR CPVRClient::IsPlayable(const std::shared_ptr<const CPVREpgInfoTag> &tag, bool &bIsPlayable) const
 {
   return DoAddonCall(__FUNCTION__, [tag, &bIsPlayable](const AddonInstance* addon) {
     CAddonEpgTag addonTag(tag);
@@ -734,7 +734,7 @@ PVR_ERROR CPVRClient::GetEpgTagStreamProperties(const std::shared_ptr<CPVREpgInf
   });
 }
 
-PVR_ERROR CPVRClient::GetEpgTagEdl(const CConstPVREpgInfoTagPtr &epgTag, std::vector<PVR_EDL_ENTRY> &edls)
+PVR_ERROR CPVRClient::GetEpgTagEdl(const std::shared_ptr<const CPVREpgInfoTag> &epgTag, std::vector<PVR_EDL_ENTRY> &edls)
 {
   edls.clear();
   return DoAddonCall(__FUNCTION__, [&epgTag, &edls](const AddonInstance* addon) {
diff --git a/xbmc/addons/PVRClient.h b/xbmc/addons/PVRClient.h
index 969073d01a06..c5a0a89c7d0e 100644
--- a/xbmc/addons/PVRClient.h
+++ b/xbmc/addons/PVRClient.h
@@ -378,7 +378,7 @@ namespace PVR
      * @param bIsRecordable Set to true if the tag can be recorded
      * @return PVR_ERROR_NO_ERROR if bIsRecordable has been set successfully.
      */
-    PVR_ERROR IsRecordable(const CConstPVREpgInfoTagPtr &tag, bool &bIsRecordable) const;
+    PVR_ERROR IsRecordable(const std::shared_ptr<const CPVREpgInfoTag> &tag, bool &bIsRecordable) const;
 
     /*
      * @brief Check if an epg tag can be played
@@ -386,7 +386,7 @@ namespace PVR
      * @param bIsPlayable Set to true if the tag can be played
      * @return PVR_ERROR_NO_ERROR if bIsPlayable has been set successfully.
      */
-    PVR_ERROR IsPlayable(const CConstPVREpgInfoTagPtr &tag, bool &bIsPlayable) const;
+    PVR_ERROR IsPlayable(const std::shared_ptr<const CPVREpgInfoTag> &tag, bool &bIsPlayable) const;
 
     /*!
      * @brief Fill the given container with the properties required for playback of the given EPG tag. Values are obtained from the PVR backend.
@@ -555,7 +555,7 @@ namespace PVR
     * @param edls The edit decision list (empty on error).
     * @return PVR_ERROR_NO_ERROR on success, respective error code otherwise.
     */
-    PVR_ERROR GetEpgTagEdl(const CConstPVREpgInfoTagPtr &epgTag, std::vector<PVR_EDL_ENTRY> &edls);
+    PVR_ERROR GetEpgTagEdl(const std::shared_ptr<const CPVREpgInfoTag> &epgTag, std::vector<PVR_EDL_ENTRY> &edls);
 
     //@}
     /** @name PVR timer methods */

From 328f69a7049ceeeb31ef5f3c0efc8c965379ad3f Mon Sep 17 00:00:00 2001
From: phunkyfish <phunkyfish@gmail.com>
Date: Wed, 25 Sep 2019 22:48:03 +0100
Subject: [PATCH 2/7] Refactor out CPVR*Ptr classes in pvr source folder

---
 xbmc/pvr/PVRActionListener.cpp                |   4 +-
 xbmc/pvr/PVRContextMenus.cpp                  |  84 +++++------
 xbmc/pvr/PVRDatabase.cpp                      |   6 +-
 xbmc/pvr/PVRGUIActions.cpp                    | 134 +++++++++---------
 xbmc/pvr/PVRGUIActions.h                      |  18 +--
 xbmc/pvr/PVRGUIChannelNavigator.cpp           |  12 +-
 xbmc/pvr/PVRGUIChannelNavigator.h             |  12 +-
 xbmc/pvr/PVRGUIInfo.cpp                       |  54 +++----
 xbmc/pvr/PVRGUITimesInfo.cpp                  |  22 +--
 xbmc/pvr/PVRGUITimesInfo.h                    |  20 +--
 xbmc/pvr/PVRItem.cpp                          |  22 +--
 xbmc/pvr/PVRItem.h                            |  10 +-
 xbmc/pvr/PVRManager.cpp                       |  60 ++++----
 xbmc/pvr/PVRManager.h                         |  50 +++----
 xbmc/pvr/addons/PVRClients.cpp                |  52 +++----
 xbmc/pvr/addons/PVRClients.h                  |  17 +--
 xbmc/pvr/channels/PVRChannel.cpp              |  56 ++++----
 xbmc/pvr/channels/PVRChannel.h                |  10 +-
 xbmc/pvr/channels/PVRChannelGroup.cpp         |  44 +++---
 xbmc/pvr/channels/PVRChannelGroup.h           |  18 +--
 xbmc/pvr/channels/PVRChannelGroupInternal.cpp |  12 +-
 xbmc/pvr/channels/PVRChannelGroupInternal.h   |   6 +-
 xbmc/pvr/channels/PVRChannelGroups.cpp        |  90 ++++++------
 xbmc/pvr/channels/PVRChannelGroups.h          |  26 ++--
 .../channels/PVRChannelGroupsContainer.cpp    |  32 ++---
 xbmc/pvr/channels/PVRChannelGroupsContainer.h |  26 ++--
 xbmc/pvr/dialogs/GUIDialogPVRChannelGuide.cpp |   2 +-
 xbmc/pvr/dialogs/GUIDialogPVRChannelGuide.h   |   6 +-
 .../dialogs/GUIDialogPVRChannelManager.cpp    |  24 ++--
 xbmc/pvr/dialogs/GUIDialogPVRChannelManager.h |   2 +-
 xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.cpp  |   4 +-
 xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.h    |   3 +-
 xbmc/pvr/dialogs/GUIDialogPVRGroupManager.cpp |   2 +-
 xbmc/pvr/dialogs/GUIDialogPVRGroupManager.h   |   4 +-
 xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.cpp    |   4 +-
 xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.h      |   6 +-
 xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.cpp  |   6 +-
 .../dialogs/GUIDialogPVRRecordingSettings.cpp |   6 +-
 .../dialogs/GUIDialogPVRRecordingSettings.h   |   4 +-
 .../pvr/dialogs/GUIDialogPVRTimerSettings.cpp |  10 +-
 xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.h  |   8 +-
 xbmc/pvr/epg/Epg.cpp                          |  42 +++---
 xbmc/pvr/epg/Epg.h                            |  20 +--
 xbmc/pvr/epg/EpgContainer.cpp                 |  28 ++--
 xbmc/pvr/epg/EpgContainer.h                   |  12 +-
 xbmc/pvr/epg/EpgSearchFilter.cpp              |  26 ++--
 xbmc/pvr/epg/EpgSearchFilter.h                |  24 ++--
 xbmc/pvr/recordings/PVRRecording.cpp          |  28 ++--
 xbmc/pvr/recordings/PVRRecording.h            |   2 +-
 xbmc/pvr/recordings/PVRRecordings.cpp         |  16 +--
 xbmc/pvr/recordings/PVRRecordings.h           |   8 +-
 xbmc/pvr/timers/PVRTimerInfoTag.cpp           |  48 +++----
 xbmc/pvr/timers/PVRTimerInfoTag.h             |  20 +--
 xbmc/pvr/timers/PVRTimerType.cpp              |  12 +-
 xbmc/pvr/timers/PVRTimerType.h                |   8 +-
 xbmc/pvr/timers/PVRTimers.cpp                 |  46 +++---
 xbmc/pvr/timers/PVRTimers.h                   |  18 +--
 xbmc/pvr/windows/GUIEPGGridContainer.cpp      |  10 +-
 xbmc/pvr/windows/GUIEPGGridContainerModel.cpp |   8 +-
 xbmc/pvr/windows/GUIEPGGridContainerModel.h   |   4 +-
 xbmc/pvr/windows/GUIWindowPVRBase.cpp         |  22 +--
 xbmc/pvr/windows/GUIWindowPVRBase.h           |   6 +-
 xbmc/pvr/windows/GUIWindowPVRChannels.cpp     |   6 +-
 xbmc/pvr/windows/GUIWindowPVRGuide.cpp        |   8 +-
 xbmc/pvr/windows/GUIWindowPVRGuide.h          |   2 +-
 xbmc/pvr/windows/GUIWindowPVRRecordings.cpp   |   2 +-
 xbmc/pvr/windows/GUIWindowPVRSearch.cpp       |   2 +-
 xbmc/pvr/windows/GUIWindowPVRTimersBase.cpp   |   2 +-
 68 files changed, 716 insertions(+), 702 deletions(-)

diff --git a/xbmc/pvr/PVRActionListener.cpp b/xbmc/pvr/PVRActionListener.cpp
index 3e3568ddd553..b94f8817cdc9 100644
--- a/xbmc/pvr/PVRActionListener.cpp
+++ b/xbmc/pvr/PVRActionListener.cpp
@@ -244,8 +244,8 @@ bool CPVRActionListener::OnAction(const CAction &action)
       int iChannelNumber = static_cast<int>(action.GetAmount(0));
       int iSubChannelNumber = static_cast<int>(action.GetAmount(1));
 
-      const CPVRChannelPtr currentChannel = CServiceBroker::GetPVRManager().GetPlayingChannel();
-      const CPVRChannelGroupPtr selectedGroup = CServiceBroker::GetPVRManager().ChannelGroups()->Get(currentChannel->IsRadio())->GetSelectedGroup();
+      const std::shared_ptr<CPVRChannel> currentChannel = CServiceBroker::GetPVRManager().GetPlayingChannel();
+      const std::shared_ptr<CPVRChannelGroup> selectedGroup = CServiceBroker::GetPVRManager().ChannelGroups()->Get(currentChannel->IsRadio())->GetSelectedGroup();
       const std::shared_ptr<CPVRChannel> channel = selectedGroup->GetByChannelNumber(CPVRChannelNumber(iChannelNumber, iSubChannelNumber));
 
       if (!channel)
diff --git a/xbmc/pvr/PVRContextMenus.cpp b/xbmc/pvr/PVRContextMenus.cpp
index ee56cdbca492..6e794792f215 100644
--- a/xbmc/pvr/PVRContextMenus.cpp
+++ b/xbmc/pvr/PVRContextMenus.cpp
@@ -85,11 +85,11 @@ namespace PVR
       const CPVRClientMenuHook m_hook;
     };
 
-    CPVRTimerInfoTagPtr GetTimerInfoTagFromItem(const CFileItem &item)
+    std::shared_ptr<CPVRTimerInfoTag> GetTimerInfoTagFromItem(const CFileItem &item)
     {
-      CPVRTimerInfoTagPtr timer;
+      std::shared_ptr<CPVRTimerInfoTag> timer;
 
-      const CPVREpgInfoTagPtr epg(item.GetEPGInfoTag());
+      const std::shared_ptr<CPVREpgInfoTag> epg(item.GetEPGInfoTag());
       if (epg)
         timer = CServiceBroker::GetPVRManager().Timers()->GetTimerForEpgTag(epg);
 
@@ -104,7 +104,7 @@ namespace PVR
 
     bool PlayEpgTag::IsVisible(const CFileItem &item) const
     {
-      const CPVREpgInfoTagPtr epg(item.GetEPGInfoTag());
+      const std::shared_ptr<CPVREpgInfoTag> epg(item.GetEPGInfoTag());
       if (epg)
         return epg->IsPlayable();
 
@@ -146,14 +146,14 @@ namespace PVR
 
     bool ShowInformation::IsVisible(const CFileItem &item) const
     {
-      const CPVRChannelPtr channel(item.GetPVRChannelInfoTag());
+      const std::shared_ptr<CPVRChannel> channel(item.GetPVRChannelInfoTag());
       if (channel)
         return channel->GetEPGNow().get() != nullptr;
 
       if (item.GetEPGInfoTag())
         return true;
 
-      const CPVRTimerInfoTagPtr timer(item.GetPVRTimerInfoTag());
+      const std::shared_ptr<CPVRTimerInfoTag> timer(item.GetPVRTimerInfoTag());
       if (timer && !URIUtils::PathEquals(item.GetPath(), CPVRTimersPath::PATH_ADDTIMER))
         return timer->GetEpgInfoTag().get() != nullptr;
 
@@ -176,7 +176,7 @@ namespace PVR
 
     bool ShowChannelGuide::IsVisible(const CFileItem &item) const
     {
-      const CPVRChannelPtr channel(item.GetPVRChannelInfoTag());
+      const std::shared_ptr<CPVRChannel> channel(item.GetPVRChannelInfoTag());
       if (channel)
         return channel->GetEPGNow().get() != nullptr;
 
@@ -193,18 +193,18 @@ namespace PVR
 
     bool FindSimilar::IsVisible(const CFileItem &item) const
     {
-      const CPVRChannelPtr channel(item.GetPVRChannelInfoTag());
+      const std::shared_ptr<CPVRChannel> channel(item.GetPVRChannelInfoTag());
       if (channel)
         return channel->GetEPGNow().get() != nullptr;
 
       if (item.GetEPGInfoTag())
         return true;
 
-      const CPVRTimerInfoTagPtr timer(item.GetPVRTimerInfoTag());
+      const std::shared_ptr<CPVRTimerInfoTag> timer(item.GetPVRTimerInfoTag());
       if (timer && !URIUtils::PathEquals(item.GetPath(), CPVRTimersPath::PATH_ADDTIMER))
         return timer->GetEpgInfoTag().get() != nullptr;
 
-      const CPVRRecordingPtr recording(item.GetPVRRecordingInfoTag());
+      const std::shared_ptr<CPVRRecording> recording(item.GetPVRRecordingInfoTag());
       if (recording)
         return !recording->IsDeleted();
 
@@ -221,14 +221,14 @@ namespace PVR
 
     bool StartRecording::IsVisible(const CFileItem &item) const
     {
-      const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(item);
+      const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(item);
 
-      const CPVRChannelPtr channel = item.GetPVRChannelInfoTag();
+      const std::shared_ptr<CPVRChannel> channel = item.GetPVRChannelInfoTag();
       if (channel)
         return client && client->GetClientCapabilities().SupportsTimers() &&
                !CServiceBroker::GetPVRManager().Timers()->IsRecordingOnChannel(*channel);
 
-      const CPVREpgInfoTagPtr epg = item.GetEPGInfoTag();
+      const std::shared_ptr<CPVREpgInfoTag> epg = item.GetEPGInfoTag();
       if (epg &&
           !CServiceBroker::GetPVRManager().Timers()->GetTimerForEpgTag(epg) &&
           epg->IsRecordable())
@@ -247,15 +247,15 @@ namespace PVR
 
     bool StopRecording::IsVisible(const CFileItem &item) const
     {
-      const CPVRRecordingPtr recording(item.GetPVRRecordingInfoTag());
+      const std::shared_ptr<CPVRRecording> recording(item.GetPVRRecordingInfoTag());
       if (recording && recording->IsInProgress())
         return true;
 
-      const CPVRChannelPtr channel(item.GetPVRChannelInfoTag());
+      const std::shared_ptr<CPVRChannel> channel(item.GetPVRChannelInfoTag());
       if (channel)
         return CServiceBroker::GetPVRManager().Timers()->IsRecordingOnChannel(*channel);
 
-      const CPVRTimerInfoTagPtr timer(GetTimerInfoTagFromItem(item));
+      const std::shared_ptr<CPVRTimerInfoTag> timer(GetTimerInfoTagFromItem(item));
       if (timer && !URIUtils::PathEquals(item.GetPath(), CPVRTimersPath::PATH_ADDTIMER))
         return timer->IsRecording();
 
@@ -272,7 +272,7 @@ namespace PVR
 
     bool EditRecording::IsVisible(const CFileItem &item) const
     {
-      const CPVRRecordingPtr recording(item.GetPVRRecordingInfoTag());
+      const std::shared_ptr<CPVRRecording> recording(item.GetPVRRecordingInfoTag());
       if (recording && !recording->IsDeleted() && !recording->IsInProgress())
       {
         return CServiceBroker::GetPVRManager().GUIActions()->CanEditRecording(item);
@@ -290,12 +290,12 @@ namespace PVR
 
     bool RenameRecording::IsVisible(const CFileItem &item) const
     {
-      const CPVRRecordingPtr recording = item.GetPVRRecordingInfoTag();
+      const std::shared_ptr<CPVRRecording> recording = item.GetPVRRecordingInfoTag();
       if (recording &&
           !recording->IsDeleted() &&
           !recording->IsInProgress())
       {
-        const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(recording->ClientID());
+        const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(recording->ClientID());
         return client && client->GetClientCapabilities().SupportsRecordingsRename();
       }
       return false;
@@ -311,7 +311,7 @@ namespace PVR
 
     std::string DeleteRecording::GetLabel(const CFileItem &item) const
     {
-      const CPVRRecordingPtr recording(item.GetPVRRecordingInfoTag());
+      const std::shared_ptr<CPVRRecording> recording(item.GetPVRRecordingInfoTag());
       if (recording && recording->IsDeleted())
         return g_localizeStrings.Get(19291); /* Delete permanently */
 
@@ -320,7 +320,7 @@ namespace PVR
 
     bool DeleteRecording::IsVisible(const CFileItem &item) const
     {
-      const CPVRRecordingPtr recording(item.GetPVRRecordingInfoTag());
+      const std::shared_ptr<CPVRRecording> recording(item.GetPVRRecordingInfoTag());
       if (recording && !recording->IsInProgress())
         return true;
 
@@ -344,7 +344,7 @@ namespace PVR
 
     bool UndeleteRecording::IsVisible(const CFileItem &item) const
     {
-      const CPVRRecordingPtr recording(item.GetPVRRecordingInfoTag());
+      const std::shared_ptr<CPVRRecording> recording(item.GetPVRRecordingInfoTag());
       if (recording && recording->IsDeleted())
         return true;
 
@@ -380,7 +380,7 @@ namespace PVR
 
     std::string ToggleTimerState::GetLabel(const CFileItem &item) const
     {
-      const CPVRTimerInfoTagPtr timer(item.GetPVRTimerInfoTag());
+      const std::shared_ptr<CPVRTimerInfoTag> timer(item.GetPVRTimerInfoTag());
       if (timer && timer->m_state != PVR_TIMER_STATE_DISABLED)
         return g_localizeStrings.Get(844); /* Deactivate */
 
@@ -389,11 +389,11 @@ namespace PVR
 
     bool ToggleTimerState::IsVisible(const CFileItem &item) const
     {
-      const CPVRTimerInfoTagPtr timer(item.GetPVRTimerInfoTag());
+      const std::shared_ptr<CPVRTimerInfoTag> timer(item.GetPVRTimerInfoTag());
       if (!timer || URIUtils::PathEquals(item.GetPath(), CPVRTimersPath::PATH_ADDTIMER) || timer->IsBroken())
         return false;
 
-      const CPVRTimerTypePtr timerType(timer->GetTimerType());
+      const std::shared_ptr<CPVRTimerType> timerType(timer->GetTimerType());
       return timerType && timerType->SupportsEnableDisable();
     }
 
@@ -407,10 +407,10 @@ namespace PVR
 
     bool AddTimerRule::IsVisible(const CFileItem &item) const
     {
-      const CPVREpgInfoTagPtr epg = item.GetEPGInfoTag();
+      const std::shared_ptr<CPVREpgInfoTag> epg = item.GetEPGInfoTag();
       if (epg && !CServiceBroker::GetPVRManager().Timers()->GetTimerForEpgTag(epg))
       {
-        const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(item);
+        const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(item);
         return client && client->GetClientCapabilities().SupportsTimers();
       }
       return false;
@@ -426,13 +426,13 @@ namespace PVR
 
     std::string EditTimerRule::GetLabel(const CFileItem &item) const
     {
-      const CPVRTimerInfoTagPtr timer(GetTimerInfoTagFromItem(item));
+      const std::shared_ptr<CPVRTimerInfoTag> timer(GetTimerInfoTagFromItem(item));
       if (timer && !URIUtils::PathEquals(item.GetPath(), CPVRTimersPath::PATH_ADDTIMER))
       {
-        const CPVRTimerInfoTagPtr parentTimer(CServiceBroker::GetPVRManager().Timers()->GetTimerRule(timer));
+        const std::shared_ptr<CPVRTimerInfoTag> parentTimer(CServiceBroker::GetPVRManager().Timers()->GetTimerRule(timer));
         if (parentTimer)
         {
-          const CPVRTimerTypePtr parentTimerType(parentTimer->GetTimerType());
+          const std::shared_ptr<CPVRTimerType> parentTimerType(parentTimer->GetTimerType());
           if (parentTimerType && !parentTimerType->IsReadOnly())
             return g_localizeStrings.Get(19243); /* Edit timer rule */
         }
@@ -443,7 +443,7 @@ namespace PVR
 
     bool EditTimerRule::IsVisible(const CFileItem &item) const
     {
-      const CPVRTimerInfoTagPtr timer(GetTimerInfoTagFromItem(item));
+      const std::shared_ptr<CPVRTimerInfoTag> timer(GetTimerInfoTagFromItem(item));
       if (timer && !URIUtils::PathEquals(item.GetPath(), CPVRTimersPath::PATH_ADDTIMER))
         return timer->GetTimerRuleId() != PVR_TIMER_NO_PARENT;
 
@@ -460,13 +460,13 @@ namespace PVR
 
     bool DeleteTimerRule::IsVisible(const CFileItem &item) const
     {
-      const CPVRTimerInfoTagPtr timer(GetTimerInfoTagFromItem(item));
+      const std::shared_ptr<CPVRTimerInfoTag> timer(GetTimerInfoTagFromItem(item));
       if (timer && !URIUtils::PathEquals(item.GetPath(), CPVRTimersPath::PATH_ADDTIMER))
       {
-        const CPVRTimerInfoTagPtr parentTimer(CServiceBroker::GetPVRManager().Timers()->GetTimerRule(timer));
+        const std::shared_ptr<CPVRTimerInfoTag> parentTimer(CServiceBroker::GetPVRManager().Timers()->GetTimerRule(timer));
         if (parentTimer)
         {
-          const CPVRTimerTypePtr parentTimerType(parentTimer->GetTimerType());
+          const std::shared_ptr<CPVRTimerType> parentTimerType(parentTimer->GetTimerType());
           return parentTimerType && parentTimerType->AllowsDelete();
         }
       }
@@ -488,10 +488,10 @@ namespace PVR
 
     std::string EditTimer::GetLabel(const CFileItem &item) const
     {
-      const CPVRTimerInfoTagPtr timer(GetTimerInfoTagFromItem(item));
+      const std::shared_ptr<CPVRTimerInfoTag> timer(GetTimerInfoTagFromItem(item));
       if (timer)
       {
-        const CPVRTimerTypePtr timerType(timer->GetTimerType());
+        const std::shared_ptr<CPVRTimerType> timerType(timer->GetTimerType());
         if (timerType)
         {
           if (item.GetEPGInfoTag())
@@ -510,7 +510,7 @@ namespace PVR
 
     bool EditTimer::IsVisible(const CFileItem &item) const
     {
-      const CPVRTimerInfoTagPtr timer(GetTimerInfoTagFromItem(item));
+      const std::shared_ptr<CPVRTimerInfoTag> timer(GetTimerInfoTagFromItem(item));
       return timer && (!item.GetEPGInfoTag() || !URIUtils::PathEquals(item.GetPath(), CPVRTimersPath::PATH_ADDTIMER));
     }
 
@@ -524,14 +524,14 @@ namespace PVR
 
     bool RenameTimer::IsVisible(const CFileItem &item) const
     {
-      const CPVRTimerInfoTagPtr timer(item.GetPVRTimerInfoTag());
+      const std::shared_ptr<CPVRTimerInfoTag> timer(item.GetPVRTimerInfoTag());
       if (!timer || URIUtils::PathEquals(item.GetPath(), CPVRTimersPath::PATH_ADDTIMER))
         return false;
 
       // As epg-based timers will get it's title from the epg tag, they should not be renamable.
       if (timer->IsManual())
       {
-        const CPVRTimerTypePtr timerType(timer->GetTimerType());
+        const std::shared_ptr<CPVRTimerType> timerType(timer->GetTimerType());
         if (!timerType->IsReadOnly())
           return true;
       }
@@ -564,10 +564,10 @@ namespace PVR
 
     bool DeleteTimer::IsVisible(const CFileItem &item) const
     {
-      const CPVRTimerInfoTagPtr timer(GetTimerInfoTagFromItem(item));
+      const std::shared_ptr<CPVRTimerInfoTag> timer(GetTimerInfoTagFromItem(item));
       if (timer && (!item.GetEPGInfoTag() || !URIUtils::PathEquals(item.GetPath(), CPVRTimersPath::PATH_ADDTIMER)) && !timer->IsRecording())
       {
-        const CPVRTimerTypePtr timerType(timer->GetTimerType());
+        const std::shared_ptr<CPVRTimerType> timerType(timer->GetTimerType());
         return  timerType && timerType->AllowsDelete();
       }
 
@@ -607,7 +607,7 @@ namespace PVR
 
     bool PVRClientMenuHook::Execute(const CFileItemPtr &item) const
     {
-      const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(*item);
+      const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(*item);
       if (!client)
         return false;
 
diff --git a/xbmc/pvr/PVRDatabase.cpp b/xbmc/pvr/PVRDatabase.cpp
index da1e53aa15cc..791b2b7222a6 100644
--- a/xbmc/pvr/PVRDatabase.cpp
+++ b/xbmc/pvr/PVRDatabase.cpp
@@ -323,7 +323,7 @@ int CPVRDatabase::Get(CPVRChannelGroup &results, bool bCompressDB)
     {
       while (!m_pDS->eof())
       {
-        CPVRChannelPtr channel = CPVRChannelPtr(new CPVRChannel());
+        std::shared_ptr<CPVRChannel> channel = std::shared_ptr<CPVRChannel>(new CPVRChannel());
 
         channel->m_iChannelId              = m_pDS->fv("idChannel").get_asInt();
         channel->m_iUniqueId               = m_pDS->fv("iUniqueId").get_asInt();
@@ -637,7 +637,7 @@ int CPVRDatabase::Get(CPVRChannelGroup &group, const CPVRChannelGroup &allGroup)
     iReturn = 0;
 
     // create a map to speedup data lookup
-    std::map<int, CPVRChannelPtr> allChannels;
+    std::map<int, std::shared_ptr<CPVRChannel>> allChannels;
     for (const auto& groupMember : allGroup.GetMembers())
     {
       allChannels.insert(std::make_pair(groupMember.channel->ChannelID(), groupMember.channel));
@@ -695,7 +695,7 @@ bool CPVRDatabase::PersistChannels(CPVRChannelGroup &group)
 {
   bool bReturn(true);
 
-  CPVRChannelPtr channel;
+  std::shared_ptr<CPVRChannel> channel;
   for (const auto& groupMember : group.m_members)
   {
     channel = groupMember.second.channel;
diff --git a/xbmc/pvr/PVRGUIActions.cpp b/xbmc/pvr/PVRGUIActions.cpp
index 5815d062b8b4..60291b57e450 100644
--- a/xbmc/pvr/PVRGUIActions.cpp
+++ b/xbmc/pvr/PVRGUIActions.cpp
@@ -192,10 +192,10 @@ namespace PVR
   private:
     bool DoRun(const CFileItemPtr &item) override
     {
-      const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(*item);
+      const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(*item);
       if (client)
       {
-        const CPVRRecordingPtr recording = item->GetPVRRecordingInfoTag();
+        const std::shared_ptr<CPVRRecording> recording = item->GetPVRRecordingInfoTag();
         return client->SetRecordingPlayCount(*recording, recording->GetLocalPlayCount()) == PVR_ERROR_NO_ERROR;
       }
       return false;
@@ -207,7 +207,7 @@ namespace PVR
   private:
     bool DoRun(const CFileItemPtr &item) override
     {
-      const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(*item);
+      const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(*item);
       if (client)
         return client->SetRecordingLifetime(*item->GetPVRRecordingInfoTag()) == PVR_ERROR_NO_ERROR;
       return false;
@@ -234,11 +234,11 @@ namespace PVR
 
   bool CPVRGUIActions::ShowEPGInfo(const CFileItemPtr &item) const
   {
-    const CPVRChannelPtr channel(CPVRItem(item).GetChannel());
+    const std::shared_ptr<CPVRChannel> channel(CPVRItem(item).GetChannel());
     if (channel && CheckParentalLock(channel) != ParentalCheckResult::SUCCESS)
       return false;
 
-    const CPVREpgInfoTagPtr epgTag(CPVRItem(item).GetEpgInfoTag());
+    const std::shared_ptr<CPVREpgInfoTag> epgTag(CPVRItem(item).GetEpgInfoTag());
     if (!epgTag)
     {
       CLog::LogF(LOGERROR, "No epg tag!");
@@ -260,7 +260,7 @@ namespace PVR
 
   bool CPVRGUIActions::ShowChannelEPG(const CFileItemPtr &item) const
   {
-    const CPVRChannelPtr channel(CPVRItem(item).GetChannel());
+    const std::shared_ptr<CPVRChannel> channel(CPVRItem(item).GetChannel());
     if (channel && CheckParentalLock(channel) != ParentalCheckResult::SUCCESS)
       return false;
 
@@ -339,7 +339,7 @@ namespace PVR
     return true;
   };
 
-  bool CPVRGUIActions::ShowTimerSettings(const CPVRTimerInfoTagPtr &timer) const
+  bool CPVRGUIActions::ShowTimerSettings(const std::shared_ptr<CPVRTimerInfoTag> &timer) const
   {
     CGUIDialogPVRTimerSettings* pDlgInfo = CServiceBroker::GetGUI()->GetWindowManager().GetWindow<CGUIDialogPVRTimerSettings>(WINDOW_DIALOG_PVR_TIMER_SETTING);
     if (!pDlgInfo)
@@ -383,7 +383,7 @@ namespace PVR
 
   bool CPVRGUIActions::AddTimer(bool bRadio) const
   {
-    const CPVRTimerInfoTagPtr newTimer(new CPVRTimerInfoTag(bRadio));
+    const std::shared_ptr<CPVRTimerInfoTag> newTimer(new CPVRTimerInfoTag(bRadio));
     if (ShowTimerSettings(newTimer))
     {
       return AddTimer(newTimer);
@@ -403,7 +403,7 @@ namespace PVR
 
   bool CPVRGUIActions::AddTimer(const std::shared_ptr<CFileItem>& item, bool bCreateRule, bool bShowTimerSettings, bool bFallbackToOneShotTimer) const
   {
-    const CPVRChannelPtr channel(CPVRItem(item).GetChannel());
+    const std::shared_ptr<CPVRChannel> channel(CPVRItem(item).GetChannel());
     if (!channel)
     {
       CLog::LogF(LOGERROR, "No channel!");
@@ -413,22 +413,22 @@ namespace PVR
     if (CheckParentalLock(channel) != ParentalCheckResult::SUCCESS)
       return false;
 
-    const CPVREpgInfoTagPtr epgTag(CPVRItem(item).GetEpgInfoTag());
+    const std::shared_ptr<CPVREpgInfoTag> epgTag(CPVRItem(item).GetEpgInfoTag());
     if (!epgTag && bCreateRule)
     {
       CLog::LogF(LOGERROR, "No epg tag!");
       return false;
     }
 
-    CPVRTimerInfoTagPtr timer(bCreateRule || !epgTag ? nullptr : CServiceBroker::GetPVRManager().Timers()->GetTimerForEpgTag(epgTag));
-    CPVRTimerInfoTagPtr rule (bCreateRule ? CServiceBroker::GetPVRManager().Timers()->GetTimerRule(timer) : nullptr);
+    std::shared_ptr<CPVRTimerInfoTag> timer(bCreateRule || !epgTag ? nullptr : CServiceBroker::GetPVRManager().Timers()->GetTimerForEpgTag(epgTag));
+    std::shared_ptr<CPVRTimerInfoTag> rule (bCreateRule ? CServiceBroker::GetPVRManager().Timers()->GetTimerRule(timer) : nullptr);
     if (timer || rule)
     {
       HELPERS::ShowOKDialogText(CVariant{19033}, CVariant{19034}); // "Information", "There is already a timer set for this event"
       return false;
     }
 
-    CPVRTimerInfoTagPtr newTimer(epgTag ? CPVRTimerInfoTag::CreateFromEpg(epgTag, bCreateRule) : CPVRTimerInfoTag::CreateInstantTimerTag(channel));
+    std::shared_ptr<CPVRTimerInfoTag> newTimer(epgTag ? CPVRTimerInfoTag::CreateFromEpg(epgTag, bCreateRule) : CPVRTimerInfoTag::CreateInstantTimerTag(channel));
     if (!newTimer)
     {
       if (bCreateRule && bFallbackToOneShotTimer)
@@ -453,7 +453,7 @@ namespace PVR
     return AddTimer(newTimer);
   }
 
-  bool CPVRGUIActions::AddTimer(const CPVRTimerInfoTagPtr &item) const
+  bool CPVRGUIActions::AddTimer(const std::shared_ptr<CPVRTimerInfoTag> &item) const
   {
     if (!item->Channel() && item->GetTimerType() && !item->GetTimerType()->IsEpgBasedTimerRule())
     {
@@ -592,14 +592,14 @@ namespace PVR
 
   bool CPVRGUIActions::ToggleRecordingOnPlayingChannel()
   {
-    const CPVRChannelPtr channel = CServiceBroker::GetPVRManager().GetPlayingChannel();
+    const std::shared_ptr<CPVRChannel> channel = CServiceBroker::GetPVRManager().GetPlayingChannel();
     if (channel && channel->CanRecord())
       return SetRecordingOnChannel(channel, !CServiceBroker::GetPVRManager().Timers()->IsRecordingOnChannel(*channel));
 
     return false;
   }
 
-  bool CPVRGUIActions::SetRecordingOnChannel(const CPVRChannelPtr &channel, bool bOnOff)
+  bool CPVRGUIActions::SetRecordingOnChannel(const std::shared_ptr<CPVRChannel> &channel, bool bOnOff)
   {
     bool bReturn = false;
 
@@ -609,13 +609,13 @@ namespace PVR
     if (CheckParentalLock(channel) != ParentalCheckResult::SUCCESS)
       return bReturn;
 
-    const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(channel->ClientID());
+    const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(channel->ClientID());
     if (client && client->GetClientCapabilities().SupportsTimers())
     {
       /* timers are supported on this channel */
       if (bOnOff && !CServiceBroker::GetPVRManager().Timers()->IsRecordingOnChannel(*channel))
       {
-        CPVREpgInfoTagPtr epgTag;
+        std::shared_ptr<CPVREpgInfoTag> epgTag;
         int iDuration = m_settings.GetIntValue(CSettings::SETTING_PVRRECORD_INSTANTRECORDTIME);
 
         int iAction = m_settings.GetIntValue(CSettings::SETTING_PVRRECORD_INSTANTRECORDACTION);
@@ -634,7 +634,7 @@ namespace PVR
             PVRRECORD_INSTANTRECORDACTION ePreselect = RECORD_INSTANTRECORDTIME;
             const int iDurationDefault = m_settings.GetIntValue(CSettings::SETTING_PVRRECORD_INSTANTRECORDTIME);
             InstantRecordingActionSelector selector(iDurationDefault);
-            CPVREpgInfoTagPtr epgTagNext;
+            std::shared_ptr<CPVREpgInfoTag> epgTagNext;
 
             // fixed length recordings
             selector.AddAction(RECORD_30_MINUTES, "");
@@ -716,7 +716,7 @@ namespace PVR
             break;
         }
 
-        const CPVRTimerInfoTagPtr newTimer(epgTag ? CPVRTimerInfoTag::CreateFromEpg(epgTag, false) : CPVRTimerInfoTag::CreateInstantTimerTag(channel, iDuration));
+        const std::shared_ptr<CPVRTimerInfoTag> newTimer(epgTag ? CPVRTimerInfoTag::CreateFromEpg(epgTag, false) : CPVRTimerInfoTag::CreateInstantTimerTag(channel, iDuration));
 
         if (newTimer)
           bReturn = CServiceBroker::GetPVRManager().Timers()->AddTimer(newTimer);
@@ -742,7 +742,7 @@ namespace PVR
     if (!item->HasEPGInfoTag())
       return false;
 
-    const CPVRTimerInfoTagPtr timer(CPVRItem(item).GetTimerInfoTag());
+    const std::shared_ptr<CPVRTimerInfoTag> timer(CPVRItem(item).GetTimerInfoTag());
     if (timer)
     {
       if (timer->IsRecording())
@@ -759,7 +759,7 @@ namespace PVR
     if (!item->HasPVRTimerInfoTag())
       return false;
 
-    const CPVRTimerInfoTagPtr timer(item->GetPVRTimerInfoTag());
+    const std::shared_ptr<CPVRTimerInfoTag> timer(item->GetPVRTimerInfoTag());
     if (timer->m_state == PVR_TIMER_STATE_DISABLED)
       timer->m_state = PVR_TIMER_STATE_SCHEDULED;
     else
@@ -774,7 +774,7 @@ namespace PVR
 
   bool CPVRGUIActions::EditTimer(const CFileItemPtr &item) const
   {
-    const CPVRTimerInfoTagPtr timer(CPVRItem(item).GetTimerInfoTag());
+    const std::shared_ptr<CPVRTimerInfoTag> timer(CPVRItem(item).GetTimerInfoTag());
     if (!timer)
     {
       CLog::LogF(LOGERROR, "No timer!");
@@ -782,7 +782,7 @@ namespace PVR
     }
 
     // clone the timer.
-    const CPVRTimerInfoTagPtr newTimer(new CPVRTimerInfoTag);
+    const std::shared_ptr<CPVRTimerInfoTag> newTimer(new CPVRTimerInfoTag);
     newTimer->UpdateEntry(timer);
 
     if (ShowTimerSettings(newTimer) && (!timer->GetTimerType()->IsReadOnly() || timer->GetTimerType()->SupportsEnableDisable()))
@@ -845,7 +845,7 @@ namespace PVR
     if (!item->HasPVRTimerInfoTag())
       return false;
 
-    const CPVRTimerInfoTagPtr timer(item->GetPVRTimerInfoTag());
+    const std::shared_ptr<CPVRTimerInfoTag> timer(item->GetPVRTimerInfoTag());
 
     std::string strNewName(timer->m_strTitle);
     if (CGUIKeyboardFactory::ShowAndGetInput(strNewName,
@@ -880,8 +880,8 @@ namespace PVR
 
   bool CPVRGUIActions::DeleteTimer(const CFileItemPtr &item, bool bIsRecording, bool bDeleteRule) const
   {
-    CPVRTimerInfoTagPtr timer;
-    const CPVRRecordingPtr recording(CPVRItem(item).GetRecording());
+    std::shared_ptr<CPVRTimerInfoTag> timer;
+    const std::shared_ptr<CPVRRecording> recording(CPVRItem(item).GetRecording());
     if (recording)
       timer = recording->GetRecordingTimer();
 
@@ -927,7 +927,7 @@ namespace PVR
     return false;
   }
 
-  bool CPVRGUIActions::DeleteTimer(const CPVRTimerInfoTagPtr &timer, bool bIsRecording, bool bDeleteRule) const
+  bool CPVRGUIActions::DeleteTimer(const std::shared_ptr<CPVRTimerInfoTag> &timer, bool bIsRecording, bool bDeleteRule) const
   {
     TimerOperationResult result = CServiceBroker::GetPVRManager().Timers()->DeleteTimer(timer, bIsRecording, bDeleteRule);
     switch (result)
@@ -960,10 +960,10 @@ namespace PVR
     return false;
   }
 
-  bool CPVRGUIActions::ConfirmDeleteTimer(const CPVRTimerInfoTagPtr &timer, bool &bDeleteRule) const
+  bool CPVRGUIActions::ConfirmDeleteTimer(const std::shared_ptr<CPVRTimerInfoTag> &timer, bool &bDeleteRule) const
   {
     bool bConfirmed(false);
-    const CPVRTimerInfoTagPtr parentTimer(CServiceBroker::GetPVRManager().Timers()->GetTimerRule(timer));
+    const std::shared_ptr<CPVRTimerInfoTag> parentTimer(CServiceBroker::GetPVRManager().Timers()->GetTimerRule(timer));
 
     if (parentTimer && parentTimer->HasTimerType() && parentTimer->GetTimerType()->AllowsDelete())
     {
@@ -1004,7 +1004,7 @@ namespace PVR
     return true;
   }
 
-  bool CPVRGUIActions::ConfirmStopRecording(const CPVRTimerInfoTagPtr &timer) const
+  bool CPVRGUIActions::ConfirmStopRecording(const std::shared_ptr<CPVRTimerInfoTag> &timer) const
   {
     return CGUIDialogYesNo::ShowAndGetInput(CVariant{847}, // "Confirm stop recording"
                                             CVariant{848}, // "Are you sure you want to stop this recording?"
@@ -1014,14 +1014,14 @@ namespace PVR
 
   bool CPVRGUIActions::EditRecording(const CFileItemPtr &item) const
   {
-    const CPVRRecordingPtr recording = CPVRItem(item).GetRecording();
+    const std::shared_ptr<CPVRRecording> recording = CPVRItem(item).GetRecording();
     if (!recording)
     {
       CLog::LogF(LOGERROR, "No recording!");
       return false;
     }
 
-    CPVRRecordingPtr origRecording(new CPVRRecording);
+    std::shared_ptr<CPVRRecording> origRecording(new CPVRRecording);
     origRecording->Update(*recording);
 
     if (!ShowRecordingSettings(recording))
@@ -1055,7 +1055,7 @@ namespace PVR
 
   bool CPVRGUIActions::RenameRecording(const CFileItemPtr &item) const
   {
-    const CPVRRecordingPtr recording(item->GetPVRRecordingInfoTag());
+    const std::shared_ptr<CPVRRecording> recording(item->GetPVRRecordingInfoTag());
     if (!recording)
       return false;
 
@@ -1132,7 +1132,7 @@ namespace PVR
     return true;
   }
 
-  bool CPVRGUIActions::ShowRecordingSettings(const CPVRRecordingPtr &recording) const
+  bool CPVRGUIActions::ShowRecordingSettings(const std::shared_ptr<CPVRRecording> &recording) const
   {
     CGUIDialogPVRRecordingSettings* pDlgInfo = CServiceBroker::GetGUI()->GetWindowManager().GetWindow<CGUIDialogPVRRecordingSettings>(WINDOW_DIALOG_PVR_RECORDING_SETTING);
     if (!pDlgInfo)
@@ -1151,7 +1151,7 @@ namespace PVR
   {
     std::string resumeString;
 
-    const CPVRRecordingPtr recording(CPVRItem(CFileItemPtr(new CFileItem(item))).GetRecording());
+    const std::shared_ptr<CPVRRecording> recording(CPVRItem(CFileItemPtr(new CFileItem(item))).GetRecording());
     if (recording && !recording->IsDeleted())
     {
       int positionInSeconds = lrint(recording->GetResumePoint().timeInSeconds);
@@ -1212,7 +1212,7 @@ namespace PVR
   void CPVRGUIActions::StartPlayback(CFileItem *item, bool bFullscreen) const
   {
     // Obtain dynamic playback url and properties from the respective pvr client
-    const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(*item);
+    const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(*item);
     if (client)
     {
       CPVRStreamProperties props;
@@ -1248,7 +1248,7 @@ namespace PVR
 
   bool CPVRGUIActions::PlayRecording(const CFileItemPtr &item, bool bCheckResume) const
   {
-    const CPVRRecordingPtr recording(CPVRItem(item).GetRecording());
+    const std::shared_ptr<CPVRRecording> recording(CPVRItem(item).GetRecording());
     if (!recording)
       return false;
 
@@ -1270,7 +1270,7 @@ namespace PVR
 
   bool CPVRGUIActions::PlayEpgTag(const CFileItemPtr &item) const
   {
-    const CPVREpgInfoTagPtr epgTag(CPVRItem(item).GetEpgInfoTag());
+    const std::shared_ptr<CPVREpgInfoTag> epgTag(CPVRItem(item).GetEpgInfoTag());
     if (!epgTag)
       return false;
 
@@ -1291,7 +1291,7 @@ namespace PVR
       return false;
 
     std::shared_ptr<CPVRRecording> recording;
-    const CPVRChannelPtr channel(CPVRItem(item).GetChannel());
+    const std::shared_ptr<CPVRChannel> channel(CPVRItem(item).GetChannel());
     if (channel)
     {
       bool bSwitchToFullscreen = CServiceBroker::GetPVRManager().IsPlayingChannel(channel);
@@ -1400,7 +1400,7 @@ namespace PVR
     else
     {
       // if we don't, find the active channel group of the demanded type and play it's first channel
-      const CPVRChannelGroupPtr channelGroup(CServiceBroker::GetPVRManager().GetPlayingGroup(bIsRadio));
+      const std::shared_ptr<CPVRChannelGroup> channelGroup(CServiceBroker::GetPVRManager().GetPlayingGroup(bIsRadio));
       if (channelGroup)
       {
         // try to start playback of first channel in this group
@@ -1429,8 +1429,8 @@ namespace PVR
       return false;
 
     bool playTV = iAction == STARTUP_ACTION_PLAY_TV;
-    const CPVRChannelGroupsContainerPtr groups(CServiceBroker::GetPVRManager().ChannelGroups());
-    CPVRChannelGroupPtr group = playTV ? groups->GetGroupAllTV() : groups->GetGroupAllRadio();
+    const std::shared_ptr<CPVRChannelGroupsContainer> groups(CServiceBroker::GetPVRManager().ChannelGroups());
+    std::shared_ptr<CPVRChannelGroup> group = playTV ? groups->GetGroupAllTV() : groups->GetGroupAllRadio();
 
     // get the last played channel or fallback to first channel
     std::shared_ptr<CPVRChannel> channel = group->GetLastPlayedChannel();
@@ -1479,7 +1479,7 @@ namespace PVR
 
   bool CPVRGUIActions::HideChannel(const CFileItemPtr &item) const
   {
-    const CPVRChannelPtr channel(item->GetPVRChannelInfoTag());
+    const std::shared_ptr<CPVRChannel> channel(item->GetPVRChannelInfoTag());
 
     /* check if the channel tag is valid */
     if (!channel || !channel->ChannelNumber().IsValid())
@@ -1508,8 +1508,8 @@ namespace PVR
     if (!CServiceBroker::GetPVRManager().IsStarted() || IsRunningChannelScan())
       return false;
 
-    CPVRClientPtr scanClient;
-    std::vector<CPVRClientPtr> possibleScanClients = CServiceBroker::GetPVRManager().Clients()->GetClientsSupportingChannelScan();
+    std::shared_ptr<CPVRClient> scanClient;
+    std::vector<std::shared_ptr<CPVRClient>> possibleScanClients = CServiceBroker::GetPVRManager().Clients()->GetClientsSupportingChannelScan();
     m_bChannelScanRunning = true;
 
     /* multiple clients found */
@@ -1569,7 +1569,7 @@ namespace PVR
     CPVRClientMap clients;
     CServiceBroker::GetPVRManager().Clients()->GetCreatedClients(clients);
 
-    std::vector<std::pair<CPVRClientPtr, CPVRClientMenuHook>> settingsHooks;
+    std::vector<std::pair<std::shared_ptr<CPVRClient>, CPVRClientMenuHook>> settingsHooks;
     for (const auto& client : clients)
     {
       for (const auto& hook : client.second->GetMenuHooks()->GetSettingsHooks())
@@ -1659,8 +1659,8 @@ namespace PVR
     pDlgProgress->SetPercentage(10);
     pDlgProgress->Progress();
 
-    const CPVRDatabasePtr pvrDatabase(CServiceBroker::GetPVRManager().GetTVDatabase());
-    const CPVREpgDatabasePtr epgDatabase(CServiceBroker::GetPVRManager().EpgContainer().GetEpgDatabase());
+    const std::shared_ptr<CPVRDatabase> pvrDatabase(CServiceBroker::GetPVRManager().GetTVDatabase());
+    const std::shared_ptr<CPVREpgDatabase> epgDatabase(CServiceBroker::GetPVRManager().EpgContainer().GetEpgDatabase());
 
     // increase db open refcounts, so they don't get closed during following pvr manager shutdown
     pvrDatabase->Open();
@@ -1725,7 +1725,7 @@ namespace PVR
     return true;
   }
 
-  ParentalCheckResult CPVRGUIActions::CheckParentalLock(const CPVRChannelPtr &channel) const
+  ParentalCheckResult CPVRGUIActions::CheckParentalLock(const std::shared_ptr<CPVRChannel> &channel) const
   {
     if (!CServiceBroker::GetPVRManager().IsParentalLocked(channel))
       return ParentalCheckResult::SUCCESS;
@@ -1770,7 +1770,7 @@ namespace PVR
     bool bReturn(true);
     if (CServiceBroker::GetPVRManager().IsStarted())
     {
-      CPVRTimerInfoTagPtr cause;
+      std::shared_ptr<CPVRTimerInfoTag> cause;
       if (!AllLocalBackendsIdle(cause))
       {
         if (bAskUser)
@@ -1859,7 +1859,7 @@ namespace PVR
     return bReturn;
   }
 
-  bool CPVRGUIActions::AllLocalBackendsIdle(CPVRTimerInfoTagPtr& causingEvent) const
+  bool CPVRGUIActions::AllLocalBackendsIdle(std::shared_ptr<CPVRTimerInfoTag>& causingEvent) const
   {
     // active recording on local backend?
     const std::vector<std::shared_ptr<CPVRTimerInfoTag>> activeRecordings = CServiceBroker::GetPVRManager().Timers()->GetActiveRecordings();
@@ -1896,7 +1896,7 @@ namespace PVR
   {
     if (item && item->HasPVRTimerInfoTag())
     {
-      const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(*item);
+      const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(*item);
       if (client)
       {
         const std::string hostname = client->GetBackendHostname();
@@ -2000,7 +2000,7 @@ namespace PVR
     std::string text = GetAnnouncerText(timer, 19307, 19308); // Reminder for ...
 
     bool bCanRecord = false;
-    const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(timer->m_iClientId);
+    const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(timer->m_iClientId);
     if (client && client->GetClientCapabilities().SupportsTimers())
     {
       bCanRecord = true;
@@ -2122,7 +2122,7 @@ namespace PVR
     if (m_settings.GetBoolValue(CSettings::SETTING_PVRMANAGER_PRESELECTPLAYINGCHANNEL))
     {
       // if preselect playing channel is activated, return the path of the playing channel, if any.
-      const CPVRChannelPtr playingChannel(CServiceBroker::GetPVRManager().GetPlayingChannel());
+      const std::shared_ptr<CPVRChannel> playingChannel(CServiceBroker::GetPVRManager().GetPlayingChannel());
       if (playingChannel && playingChannel->IsRadio() == bRadio)
         return playingChannel->Path();
     }
@@ -2136,11 +2136,11 @@ namespace PVR
     time_t playbackStartTime = CServiceBroker::GetDataCacheCore().GetStartTime();
     if (playbackStartTime > 0)
     {
-      const CPVRChannelPtr playingChannel = CServiceBroker::GetPVRManager().GetPlayingChannel();
+      const std::shared_ptr<CPVRChannel> playingChannel = CServiceBroker::GetPVRManager().GetPlayingChannel();
       if (playingChannel)
       {
         time_t nextTime = 0;
-        CPVREpgInfoTagPtr next = playingChannel->GetEPGNext();
+        std::shared_ptr<CPVREpgInfoTag> next = playingChannel->GetEPGNext();
         if (next)
         {
           next->StartAsUTC().GetAsTime(nextTime);
@@ -2173,11 +2173,11 @@ namespace PVR
     time_t playbackStartTime = CServiceBroker::GetDataCacheCore().GetStartTime();
     if (playbackStartTime > 0)
     {
-      const CPVRChannelPtr playingChannel = CServiceBroker::GetPVRManager().GetPlayingChannel();
+      const std::shared_ptr<CPVRChannel> playingChannel = CServiceBroker::GetPVRManager().GetPlayingChannel();
       if (playingChannel)
       {
         time_t prevTime = 0;
-        CPVREpgInfoTagPtr prev = playingChannel->GetEPGNow();
+        std::shared_ptr<CPVREpgInfoTag> prev = playingChannel->GetEPGNow();
         if (prev)
         {
           prev->StartAsUTC().GetAsTime(prevTime);
@@ -2229,7 +2229,7 @@ namespace PVR
   {
     if (item->HasPVRChannelInfoTag())
     {
-      const CPVRChannelPtr channel = item->GetPVRChannelInfoTag();
+      const std::shared_ptr<CPVRChannel> channel = item->GetPVRChannelInfoTag();
       m_channelNavigator.SetPlayingChannel(channel);
       SetSelectedItemPath(channel->IsRadio(), channel->Path());
     }
@@ -2258,10 +2258,10 @@ namespace PVR
   void CPVRChannelSwitchingInputHandler::GetChannelNumbers(std::vector<std::string>& channelNumbers)
   {
     CPVRManager& pvrMgr = CServiceBroker::GetPVRManager();
-    const CPVRChannelPtr playingChannel = pvrMgr.GetPlayingChannel();
+    const std::shared_ptr<CPVRChannel> playingChannel = pvrMgr.GetPlayingChannel();
     if (playingChannel)
     {
-      const CPVRChannelGroupPtr group = pvrMgr.ChannelGroups()->GetGroupAll(playingChannel->IsRadio());
+      const std::shared_ptr<CPVRChannelGroup> group = pvrMgr.ChannelGroups()->GetGroupAll(playingChannel->IsRadio());
       if (group)
         group->GetChannelNumbers(channelNumbers);
     }
@@ -2278,21 +2278,21 @@ namespace PVR
   {
     if (channelNumber.IsValid() && CServiceBroker::GetPVRManager().IsPlaying())
     {
-      const CPVRChannelPtr playingChannel(CServiceBroker::GetPVRManager().GetPlayingChannel());
+      const std::shared_ptr<CPVRChannel> playingChannel(CServiceBroker::GetPVRManager().GetPlayingChannel());
       if (playingChannel)
       {
         if (channelNumber != playingChannel->ChannelNumber())
         {
           // channel number present in playing group?
           bool bRadio = playingChannel->IsRadio();
-          const CPVRChannelGroupPtr group = CServiceBroker::GetPVRManager().GetPlayingGroup(bRadio);
+          const std::shared_ptr<CPVRChannelGroup> group = CServiceBroker::GetPVRManager().GetPlayingGroup(bRadio);
           std::shared_ptr<CPVRChannel> channel = group->GetByChannelNumber(channelNumber);
 
           if (!channel)
           {
             // channel number present in any group?
             const CPVRChannelGroups* groupAccess = CServiceBroker::GetPVRManager().ChannelGroups()->Get(bRadio);
-            const std::vector<CPVRChannelGroupPtr> groups = groupAccess->GetMembers(true);
+            const std::vector<std::shared_ptr<CPVRChannelGroup>> groups = groupAccess->GetMembers(true);
             for (const auto &currentGroup : groups)
             {
               channel = currentGroup->GetByChannelNumber(channelNumber);
@@ -2322,10 +2322,10 @@ namespace PVR
   {
     if (CServiceBroker::GetPVRManager().IsPlaying())
     {
-      const CPVRChannelPtr playingChannel(CServiceBroker::GetPVRManager().GetPlayingChannel());
+      const std::shared_ptr<CPVRChannel> playingChannel(CServiceBroker::GetPVRManager().GetPlayingChannel());
       if (playingChannel)
       {
-        const CPVRChannelGroupPtr group(CServiceBroker::GetPVRManager().ChannelGroups()->GetPreviousPlayedGroup());
+        const std::shared_ptr<CPVRChannelGroup> group(CServiceBroker::GetPVRManager().ChannelGroups()->GetPreviousPlayedGroup());
         if (group)
         {
           CServiceBroker::GetPVRManager().SetPlayingGroup(group);
diff --git a/xbmc/pvr/PVRGUIActions.h b/xbmc/pvr/PVRGUIActions.h
index bcce000d3a49..f8de74c6ae1e 100644
--- a/xbmc/pvr/PVRGUIActions.h
+++ b/xbmc/pvr/PVRGUIActions.h
@@ -105,7 +105,7 @@ namespace PVR
      * @brief Add a timer to the client. Doesn't add the timer to the container. The backend will do this.
      * @return True if it was sent correctly, false if not.
      */
-    bool AddTimer(const CPVRTimerInfoTagPtr &item) const;
+    bool AddTimer(const std::shared_ptr<CPVRTimerInfoTag> &item) const;
 
     /*!
      * @brief Create a new timer rule, either interactive or non-interactive.
@@ -191,7 +191,7 @@ namespace PVR
      * @param bOnOff True to start recording, false to stop.
      * @return True if the recording was started or stopped successfully, false otherwise.
      */
-    bool SetRecordingOnChannel(const CPVRChannelPtr &channel, bool bOnOff);
+    bool SetRecordingOnChannel(const std::shared_ptr<CPVRChannel> &channel, bool bOnOff);
 
     /*!
      * @brief Stop a currently active recording, always showing a confirmation dialog.
@@ -335,7 +335,7 @@ namespace PVR
      * @param channel The channel to do the check for.
      * @return the result of the check (success, failed, or canceled by user).
      */
-    ParentalCheckResult CheckParentalLock(const CPVRChannelPtr &channel) const;
+    ParentalCheckResult CheckParentalLock(const std::shared_ptr<CPVRChannel> &channel) const;
 
     /*!
      * @brief Open Numeric dialog to check for parental PIN.
@@ -428,7 +428,7 @@ namespace PVR
      * @param timer containing the timer the settings shall be displayed for.
      * @return true, if the dialog was ended successfully, false otherwise.
      */
-    bool ShowTimerSettings(const CPVRTimerInfoTagPtr &timer) const;
+    bool ShowTimerSettings(const std::shared_ptr<CPVRTimerInfoTag> &timer) const;
 
     /*!
      * @brief Add a timer or timer rule, either interactive or non-interactive.
@@ -456,7 +456,7 @@ namespace PVR
      * @param bDeleteRule denotes to delete a timer rule. For convenience, one can pass a timer created by a rule.
      * @return true, if the timer or timer rule was deleted successfully, false otherwise.
      */
-    bool DeleteTimer(const CPVRTimerInfoTagPtr &timer, bool bIsRecording, bool bDeleteRule) const;
+    bool DeleteTimer(const std::shared_ptr<CPVRTimerInfoTag> &timer, bool bIsRecording, bool bDeleteRule) const;
 
     /*!
      * @brief Open a dialog to confirm timer delete.
@@ -467,14 +467,14 @@ namespace PVR
      *                    out, for one shot timer not scheduled by a timer rule: ignored
      * @return true, to proceed with delete, false otherwise.
      */
-    bool ConfirmDeleteTimer(const CPVRTimerInfoTagPtr &timer, bool &bDeleteRule) const;
+    bool ConfirmDeleteTimer(const std::shared_ptr<CPVRTimerInfoTag> &timer, bool &bDeleteRule) const;
 
     /*!
      * @brief Open a dialog to confirm stop recording.
      * @param timer the recording to stop (actually the timer to delete).
      * @return true, to proceed with delete, false otherwise.
      */
-    bool ConfirmStopRecording(const CPVRTimerInfoTagPtr &timer) const;
+    bool ConfirmStopRecording(const std::shared_ptr<CPVRTimerInfoTag> &timer) const;
 
     /*!
      * @brief Open a dialog to confirm to delete a recording.
@@ -494,7 +494,7 @@ namespace PVR
      * @param recording containing the recording the settings shall be displayed for.
      * @return true, if the dialog was ended successfully, false otherwise.
      */
-    bool ShowRecordingSettings(const CPVRRecordingPtr &recording) const;
+    bool ShowRecordingSettings(const std::shared_ptr<CPVRRecording> &recording) const;
 
     /*!
      * @brief Check whether resume play is possible for a given item, display "resume from ..."/"play from start" context menu in case.
@@ -516,7 +516,7 @@ namespace PVR
      */
     void StartPlayback(CFileItem *item, bool bFullscreen) const;
 
-    bool AllLocalBackendsIdle(CPVRTimerInfoTagPtr& causingEvent) const;
+    bool AllLocalBackendsIdle(std::shared_ptr<CPVRTimerInfoTag>& causingEvent) const;
     bool EventOccursOnLocalBackend(const std::shared_ptr<CFileItem>& item) const;
     bool IsNextEventWithinBackendIdleTime(void) const;
 
diff --git a/xbmc/pvr/PVRGUIChannelNavigator.cpp b/xbmc/pvr/PVRGUIChannelNavigator.cpp
index c58b980a2d5c..fb51cf0f26cd 100644
--- a/xbmc/pvr/PVRGUIChannelNavigator.cpp
+++ b/xbmc/pvr/PVRGUIChannelNavigator.cpp
@@ -32,7 +32,7 @@ namespace PVR
       return;
     }
 
-    const CPVRChannelPtr nextChannel = GetNextOrPrevChannel(true);
+    const std::shared_ptr<CPVRChannel> nextChannel = GetNextOrPrevChannel(true);
     if (nextChannel)
       SelectChannel(nextChannel, eSwitchMode);
   }
@@ -46,19 +46,19 @@ namespace PVR
       return;
     }
 
-    const CPVRChannelPtr prevChannel = GetNextOrPrevChannel(false);
+    const std::shared_ptr<CPVRChannel> prevChannel = GetNextOrPrevChannel(false);
     if (prevChannel)
       SelectChannel(prevChannel, eSwitchMode);
   }
 
-  CPVRChannelPtr CPVRGUIChannelNavigator::GetNextOrPrevChannel(bool bNext)
+  std::shared_ptr<CPVRChannel> CPVRGUIChannelNavigator::GetNextOrPrevChannel(bool bNext)
   {
     const bool bPlayingRadio = CServiceBroker::GetPVRManager().IsPlayingRadio();
     const bool bPlayingTV = CServiceBroker::GetPVRManager().IsPlayingTV();
 
     if (bPlayingTV || bPlayingRadio)
     {
-      const CPVRChannelGroupPtr group = CServiceBroker::GetPVRManager().GetPlayingGroup(bPlayingRadio);
+      const std::shared_ptr<CPVRChannelGroup> group = CServiceBroker::GetPVRManager().GetPlayingGroup(bPlayingRadio);
       if (group)
       {
         CSingleLock lock(m_critSection);
@@ -68,7 +68,7 @@ namespace PVR
     return {};
   }
 
-  void CPVRGUIChannelNavigator::SelectChannel(const CPVRChannelPtr channel, ChannelSwitchMode eSwitchMode)
+  void CPVRGUIChannelNavigator::SelectChannel(const std::shared_ptr<CPVRChannel> channel, ChannelSwitchMode eSwitchMode)
   {
     CServiceBroker::GetGUI()->GetInfoManager().SetCurrentItem(CFileItem(channel));
 
@@ -191,7 +191,7 @@ namespace PVR
       ShowInfo();
   }
 
-  void CPVRGUIChannelNavigator::SetPlayingChannel(const CPVRChannelPtr channel)
+  void CPVRGUIChannelNavigator::SetPlayingChannel(const std::shared_ptr<CPVRChannel> channel)
   {
     CFileItemPtr item;
 
diff --git a/xbmc/pvr/PVRGUIChannelNavigator.h b/xbmc/pvr/PVRGUIChannelNavigator.h
index 6e8ba26bced5..9e76cb7895b1 100644
--- a/xbmc/pvr/PVRGUIChannelNavigator.h
+++ b/xbmc/pvr/PVRGUIChannelNavigator.h
@@ -11,6 +11,8 @@
 #include "pvr/PVRTypes.h"
 #include "threads/CriticalSection.h"
 
+#include <memory>
+
 namespace PVR
 {
   enum class ChannelSwitchMode
@@ -72,7 +74,7 @@ namespace PVR
      * @brief Set a new playing channel and show the channel info OSD for the new channel.
      * @param channel The new playing channel
      */
-    void SetPlayingChannel(const CPVRChannelPtr channel);
+    void SetPlayingChannel(const std::shared_ptr<CPVRChannel> channel);
 
     /*!
      * @brief Clear the currently playing channel and hide the channel info OSD.
@@ -85,14 +87,14 @@ namespace PVR
      * @param bNext True to get the next channel, false to get the previous channel.
      * @param return The channel or nullptr if not found.
      */
-    CPVRChannelPtr GetNextOrPrevChannel(bool bNext);
+    std::shared_ptr<CPVRChannel> GetNextOrPrevChannel(bool bNext);
 
     /*!
      * @brief Select a given channel, display channel info OSD, switch according to given switch mode.
      * @param item The channel to select.
      * @param eSwitchMode The channel switch mode.
      */
-    void SelectChannel(const CPVRChannelPtr channel, ChannelSwitchMode eSwitchMode);
+    void SelectChannel(const std::shared_ptr<CPVRChannel> channel, ChannelSwitchMode eSwitchMode);
 
     /*!
      * @brief Show the channel info OSD.
@@ -101,8 +103,8 @@ namespace PVR
     void ShowInfo(bool bForce);
 
     mutable CCriticalSection m_critSection;
-    CPVRChannelPtr m_playingChannel;
-    CPVRChannelPtr m_currentChannel;
+    std::shared_ptr<CPVRChannel> m_playingChannel;
+    std::shared_ptr<CPVRChannel> m_currentChannel;
     int m_iChannelEntryJobId = -1;
     int m_iChannelInfoJobId = -1;
   };
diff --git a/xbmc/pvr/PVRGUIInfo.cpp b/xbmc/pvr/PVRGUIInfo.cpp
index d294d208533c..a4a168b05a26 100644
--- a/xbmc/pvr/PVRGUIInfo.cpp
+++ b/xbmc/pvr/PVRGUIInfo.cpp
@@ -201,7 +201,7 @@ void CPVRGUIInfo::UpdateQualityData(void)
     bool bIsPlayingRecording = CServiceBroker::GetPVRManager().IsPlayingRecording();
     if (!bIsPlayingRecording)
     {
-      CPVRClientPtr client;
+      std::shared_ptr<CPVRClient> client;
       CServiceBroker::GetPVRManager().Clients()->GetCreatedClient(CServiceBroker::GetPVRManager().GetPlayingClientID(), client);
       if (client && client->SignalQuality(qualityInfo) == PVR_ERROR_NO_ERROR)
       {
@@ -219,7 +219,7 @@ void CPVRGUIInfo::UpdateDescrambleData(void)
   bool bIsPlayingRecording = CServiceBroker::GetPVRManager().IsPlayingRecording();
   if (!bIsPlayingRecording)
   {
-    CPVRClientPtr client;
+    std::shared_ptr<CPVRClient> client;
     CServiceBroker::GetPVRManager().Clients()->GetCreatedClient(CServiceBroker::GetPVRManager().GetPlayingClientID(), client);
     if (client && client->GetDescrambleInfo(descrambleInfo) == PVR_ERROR_NO_ERROR)
     {
@@ -305,7 +305,7 @@ namespace
 
 bool CPVRGUIInfo::GetListItemAndPlayerLabel(const CFileItem *item, const CGUIInfo &info, std::string &strValue) const
 {
-  const CPVRTimerInfoTagPtr timer = item->GetPVRTimerInfoTag();
+  const std::shared_ptr<CPVRTimerInfoTag> timer = item->GetPVRTimerInfoTag();
   if (timer)
   {
     switch (info.m_info)
@@ -363,7 +363,7 @@ bool CPVRGUIInfo::GetListItemAndPlayerLabel(const CFileItem *item, const CGUIInf
     }
   }
 
-  const CPVRRecordingPtr recording(item->GetPVRRecordingInfoTag());
+  const std::shared_ptr<CPVRRecording> recording(item->GetPVRRecordingInfoTag());
   if (recording)
   {
     // Note: CPVRRecoding is derived from CVideoInfoTag. All base class properties will be handled
@@ -412,7 +412,7 @@ bool CPVRGUIInfo::GetListItemAndPlayerLabel(const CFileItem *item, const CGUIInf
       case VIDEOPLAYER_CHANNEL_NUMBER:
       case LISTITEM_CHANNEL_NUMBER:
       {
-        const CPVRChannelPtr channel = recording->Channel();
+        const std::shared_ptr<CPVRChannel> channel = recording->Channel();
         if (channel)
         {
           strValue = channel->ChannelNumber().FormattedChannelNumber();
@@ -430,8 +430,8 @@ bool CPVRGUIInfo::GetListItemAndPlayerLabel(const CFileItem *item, const CGUIInf
     return false;
   }
 
-  CPVREpgInfoTagPtr epgTag;
-  CPVRChannelPtr channel;
+  std::shared_ptr<CPVREpgInfoTag> epgTag;
+  std::shared_ptr<CPVRChannel> channel;
   if (item->IsPVRChannel() || item->IsEPG() || item->IsPVRTimer())
   {
     CPVRItem pvrItem(item);
@@ -674,7 +674,7 @@ bool CPVRGUIInfo::GetPVRLabel(const CFileItem *item, const CGUIInfo &info, std::
   {
     case PVR_EPG_EVENT_ICON:
     {
-      const CPVREpgInfoTagPtr epgTag = (item->IsPVRChannel() || item->IsEPG()) ? CPVRItem(item).GetEpgInfoTag() : nullptr;
+      const std::shared_ptr<CPVREpgInfoTag> epgTag = (item->IsPVRChannel() || item->IsEPG()) ? CPVRItem(item).GetEpgInfoTag() : nullptr;
       if (epgTag)
       {
         strValue = epgTag->Icon();
@@ -683,25 +683,25 @@ bool CPVRGUIInfo::GetPVRLabel(const CFileItem *item, const CGUIInfo &info, std::
     }
     case PVR_EPG_EVENT_DURATION:
     {
-      const CPVREpgInfoTagPtr epgTag = (item->IsPVRChannel() || item->IsEPG()) ? CPVRItem(item).GetEpgInfoTag() : nullptr;
+      const std::shared_ptr<CPVREpgInfoTag> epgTag = (item->IsPVRChannel() || item->IsEPG()) ? CPVRItem(item).GetEpgInfoTag() : nullptr;
       strValue = m_timesInfo.GetEpgEventDuration(epgTag, static_cast<TIME_FORMAT>(info.GetData1()));
       return true;
     }
    case PVR_EPG_EVENT_ELAPSED_TIME:
     {
-      const CPVREpgInfoTagPtr epgTag = (item->IsPVRChannel() || item->IsEPG()) ? CPVRItem(item).GetEpgInfoTag() : nullptr;
+      const std::shared_ptr<CPVREpgInfoTag> epgTag = (item->IsPVRChannel() || item->IsEPG()) ? CPVRItem(item).GetEpgInfoTag() : nullptr;
       strValue = m_timesInfo.GetEpgEventElapsedTime(epgTag, static_cast<TIME_FORMAT>(info.GetData1()));
       return true;
     }
     case PVR_EPG_EVENT_REMAINING_TIME:
     {
-      const CPVREpgInfoTagPtr epgTag = (item->IsPVRChannel() || item->IsEPG()) ? CPVRItem(item).GetEpgInfoTag() : nullptr;
+      const std::shared_ptr<CPVREpgInfoTag> epgTag = (item->IsPVRChannel() || item->IsEPG()) ? CPVRItem(item).GetEpgInfoTag() : nullptr;
       strValue = m_timesInfo.GetEpgEventRemainingTime(epgTag, static_cast<TIME_FORMAT>(info.GetData1()));
       return true;
     }
     case PVR_EPG_EVENT_FINISH_TIME:
     {
-      const CPVREpgInfoTagPtr epgTag = (item->IsPVRChannel() || item->IsEPG()) ? CPVRItem(item).GetEpgInfoTag() : nullptr;
+      const std::shared_ptr<CPVREpgInfoTag> epgTag = (item->IsPVRChannel() || item->IsEPG()) ? CPVRItem(item).GetEpgInfoTag() : nullptr;
       strValue = m_timesInfo.GetEpgEventFinishTime(epgTag, static_cast<TIME_FORMAT>(info.GetData1()));
       return true;
     }
@@ -1036,7 +1036,7 @@ bool CPVRGUIInfo::GetListItemAndPlayerInt(const CFileItem *item, const CGUIInfo
     case LISTITEM_PROGRESS:
       if (item->IsPVRChannel() || item->IsEPG())
       {
-        const CPVREpgInfoTagPtr epgTag = CPVRItem(item).GetEpgInfoTag();
+        const std::shared_ptr<CPVREpgInfoTag> epgTag = CPVRItem(item).GetEpgInfoTag();
         if (epgTag)
           iValue = static_cast<int>(epgTag->ProgressPercentage());
       }
@@ -1053,13 +1053,13 @@ bool CPVRGUIInfo::GetPVRInt(const CFileItem *item, const CGUIInfo &info, int& iV
   {
     case PVR_EPG_EVENT_DURATION:
     {
-      const CPVREpgInfoTagPtr epgTag = (item->IsPVRChannel() || item->IsEPG()) ? CPVRItem(item).GetEpgInfoTag() : nullptr;
+      const std::shared_ptr<CPVREpgInfoTag> epgTag = (item->IsPVRChannel() || item->IsEPG()) ? CPVRItem(item).GetEpgInfoTag() : nullptr;
       iValue = m_timesInfo.GetEpgEventDuration(epgTag);
       return true;
     }
     case PVR_EPG_EVENT_PROGRESS:
     {
-      const CPVREpgInfoTagPtr epgTag = (item->IsPVRChannel() || item->IsEPG()) ? CPVRItem(item).GetEpgInfoTag() : nullptr;
+      const std::shared_ptr<CPVREpgInfoTag> epgTag = (item->IsPVRChannel() || item->IsEPG()) ? CPVRItem(item).GetEpgInfoTag() : nullptr;
       iValue = m_timesInfo.GetEpgEventProgress(epgTag);
       return true;
     }
@@ -1137,7 +1137,7 @@ bool CPVRGUIInfo::GetListItemAndPlayerBool(const CFileItem *item, const CGUIInfo
       }
       else if (item->IsEPG() || item->IsPVRTimer())
       {
-        const CPVRTimerInfoTagPtr timer = CPVRItem(item).GetTimerInfoTag();
+        const std::shared_ptr<CPVRTimerInfoTag> timer = CPVRItem(item).GetTimerInfoTag();
         if (timer)
           bValue = timer->IsRecording();
         return true;
@@ -1151,7 +1151,7 @@ bool CPVRGUIInfo::GetListItemAndPlayerBool(const CFileItem *item, const CGUIInfo
     case LISTITEM_INPROGRESS:
       if (item->IsPVRChannel() || item->IsEPG())
       {
-        const CPVREpgInfoTagPtr epgTag = CPVRItem(item).GetEpgInfoTag();
+        const std::shared_ptr<CPVREpgInfoTag> epgTag = CPVRItem(item).GetEpgInfoTag();
         if (epgTag)
           bValue = epgTag->IsActive();
         return true;
@@ -1160,7 +1160,7 @@ bool CPVRGUIInfo::GetListItemAndPlayerBool(const CFileItem *item, const CGUIInfo
     case LISTITEM_HASTIMER:
       if (item->IsPVRChannel() || item->IsEPG())
       {
-        const CPVREpgInfoTagPtr epgTag = CPVRItem(item).GetEpgInfoTag();
+        const std::shared_ptr<CPVREpgInfoTag> epgTag = CPVRItem(item).GetEpgInfoTag();
         if (epgTag)
           bValue = !!CServiceBroker::GetPVRManager().Timers()->GetTimerForEpgTag(epgTag);
         return true;
@@ -1169,7 +1169,7 @@ bool CPVRGUIInfo::GetListItemAndPlayerBool(const CFileItem *item, const CGUIInfo
     case LISTITEM_HASTIMERSCHEDULE:
       if (item->IsPVRChannel() || item->IsEPG() || item->IsPVRTimer())
       {
-        const CPVRTimerInfoTagPtr timer = CPVRItem(item).GetTimerInfoTag();
+        const std::shared_ptr<CPVRTimerInfoTag> timer = CPVRItem(item).GetTimerInfoTag();
         if (timer)
           bValue = timer->GetTimerRuleId() != PVR_TIMER_NO_PARENT;
         return true;
@@ -1196,7 +1196,7 @@ bool CPVRGUIInfo::GetListItemAndPlayerBool(const CFileItem *item, const CGUIInfo
     case LISTITEM_TIMERISACTIVE:
       if (item->IsPVRChannel() || item->IsEPG())
       {
-        const CPVRTimerInfoTagPtr timer = CPVRItem(item).GetTimerInfoTag();
+        const std::shared_ptr<CPVRTimerInfoTag> timer = CPVRItem(item).GetTimerInfoTag();
         if (timer)
           bValue = timer->IsActive();
         break;
@@ -1205,7 +1205,7 @@ bool CPVRGUIInfo::GetListItemAndPlayerBool(const CFileItem *item, const CGUIInfo
     case LISTITEM_TIMERHASCONFLICT:
       if (item->IsPVRChannel() || item->IsEPG())
       {
-        const CPVRTimerInfoTagPtr timer = CPVRItem(item).GetTimerInfoTag();
+        const std::shared_ptr<CPVRTimerInfoTag> timer = CPVRItem(item).GetTimerInfoTag();
         if (timer)
           bValue = timer->HasConflict();
         return true;
@@ -1214,7 +1214,7 @@ bool CPVRGUIInfo::GetListItemAndPlayerBool(const CFileItem *item, const CGUIInfo
     case LISTITEM_TIMERHASERROR:
       if (item->IsPVRChannel() || item->IsEPG())
       {
-        const CPVRTimerInfoTagPtr timer = CPVRItem(item).GetTimerInfoTag();
+        const std::shared_ptr<CPVRTimerInfoTag> timer = CPVRItem(item).GetTimerInfoTag();
         if (timer)
           bValue = (timer->IsBroken() && !timer->HasConflict());
         return true;
@@ -1223,7 +1223,7 @@ bool CPVRGUIInfo::GetListItemAndPlayerBool(const CFileItem *item, const CGUIInfo
     case LISTITEM_HASRECORDING:
       if (item->IsPVRChannel() || item->IsEPG())
       {
-        const CPVREpgInfoTagPtr epgTag = CPVRItem(item).GetEpgInfoTag();
+        const std::shared_ptr<CPVREpgInfoTag> epgTag = CPVRItem(item).GetEpgInfoTag();
         if (epgTag)
           bValue = !!CServiceBroker::GetPVRManager().Recordings()->GetRecordingForEpgTag(epgTag);
         return true;
@@ -1232,7 +1232,7 @@ bool CPVRGUIInfo::GetListItemAndPlayerBool(const CFileItem *item, const CGUIInfo
     case LISTITEM_HAS_EPG:
       if (item->IsPVRChannel() || item->IsEPG() || item->IsPVRTimer())
       {
-        const CPVREpgInfoTagPtr epgTag = CPVRItem(item).GetEpgInfoTag();
+        const std::shared_ptr<CPVREpgInfoTag> epgTag = CPVRItem(item).GetEpgInfoTag();
         bValue = (epgTag != nullptr);
         return true;
       }
@@ -1240,7 +1240,7 @@ bool CPVRGUIInfo::GetListItemAndPlayerBool(const CFileItem *item, const CGUIInfo
     case LISTITEM_ISENCRYPTED:
       if (item->IsPVRChannel() || item->IsEPG())
       {
-        const CPVRChannelPtr channel = CPVRItem(item).GetChannel();
+        const std::shared_ptr<CPVRChannel> channel = CPVRItem(item).GetChannel();
         if (channel)
           bValue = channel->IsEncrypted();
         return true;
@@ -1286,7 +1286,7 @@ bool CPVRGUIInfo::GetListItemAndPlayerBool(const CFileItem *item, const CGUIInfo
     case VIDEOPLAYER_CAN_RESUME_LIVE_TV:
       if (item->IsPVRRecording())
       {
-        const CPVRRecordingPtr recording = item->GetPVRRecordingInfoTag();
+        const std::shared_ptr<CPVRRecording> recording = item->GetPVRRecordingInfoTag();
         const std::shared_ptr<CPVREpg> epg = recording->Channel() ? recording->Channel()->GetEPG() : nullptr;
         const std::shared_ptr<CPVREpgInfoTag> epgTag = CServiceBroker::GetPVRManager().EpgContainer().GetTagById(epg, recording->BroadcastUid());
         bValue = (epgTag && epgTag->IsActive());
@@ -1546,7 +1546,7 @@ void CPVRGUIInfo::CharInfoEncryption(std::string &strValue) const
   }
   else
   {
-    const CPVRChannelPtr channel(CServiceBroker::GetPVRManager().GetPlayingChannel());
+    const std::shared_ptr<CPVRChannel> channel(CServiceBroker::GetPVRManager().GetPlayingChannel());
     if (channel)
     {
       strValue = channel->EncryptionName();
diff --git a/xbmc/pvr/PVRGUITimesInfo.cpp b/xbmc/pvr/PVRGUITimesInfo.cpp
index 497ef6630e36..2c4a9c435607 100644
--- a/xbmc/pvr/PVRGUITimesInfo.cpp
+++ b/xbmc/pvr/PVRGUITimesInfo.cpp
@@ -52,8 +52,8 @@ void CPVRGUITimesInfo::Reset()
 
 void CPVRGUITimesInfo::UpdatePlayingTag()
 {
-  const CPVRChannelPtr currentChannel = CServiceBroker::GetPVRManager().GetPlayingChannel();
-  CPVREpgInfoTagPtr currentTag = CServiceBroker::GetPVRManager().GetPlayingEpgTag();
+  const std::shared_ptr<CPVRChannel> currentChannel = CServiceBroker::GetPVRManager().GetPlayingChannel();
+  std::shared_ptr<CPVREpgInfoTag> currentTag = CServiceBroker::GetPVRManager().GetPlayingEpgTag();
 
   if (currentChannel || currentTag)
   {
@@ -87,7 +87,7 @@ void CPVRGUITimesInfo::UpdatePlayingTag()
   }
   else
   {
-    const CPVRRecordingPtr recording = CServiceBroker::GetPVRManager().GetPlayingRecording();
+    const std::shared_ptr<CPVRRecording> recording = CServiceBroker::GetPVRManager().GetPlayingRecording();
     if (recording)
     {
       CSingleLock lock(m_critSection);
@@ -111,7 +111,7 @@ void CPVRGUITimesInfo::UpdateTimeshiftData()
   int64_t iPlayTime, iMinTime, iMaxTime;
   CServiceBroker::GetDataCacheCore().GetPlayTimes(iStartTime, iPlayTime, iMinTime, iMaxTime);
   bool bPlaying = CServiceBroker::GetDataCacheCore().GetSpeed() == 1.0;
-  const CPVRChannelPtr playingChannel = CServiceBroker::GetPVRManager().GetPlayingChannel();
+  const std::shared_ptr<CPVRChannel> playingChannel = CServiceBroker::GetPVRManager().GetPlayingChannel();
 
   CSingleLock lock(m_critSection);
 
@@ -280,13 +280,13 @@ std::string CPVRGUITimesInfo::GetTimeshiftProgressEndTime(TIME_FORMAT format) co
   return TimeToTimeString(m_iTimeshiftProgressEndTime, format, false);
 }
 
-std::string CPVRGUITimesInfo::GetEpgEventDuration(const CPVREpgInfoTagPtr& epgTag, TIME_FORMAT format) const
+std::string CPVRGUITimesInfo::GetEpgEventDuration(const std::shared_ptr<CPVREpgInfoTag>& epgTag, TIME_FORMAT format) const
 {
   CSingleLock lock(m_critSection);
   return StringUtils::SecondsToTimeString(GetEpgEventDuration(epgTag), format);
 }
 
-std::string CPVRGUITimesInfo::GetEpgEventElapsedTime(const CPVREpgInfoTagPtr& epgTag, TIME_FORMAT format) const
+std::string CPVRGUITimesInfo::GetEpgEventElapsedTime(const std::shared_ptr<CPVREpgInfoTag>& epgTag, TIME_FORMAT format) const
 {
   int iElapsed = 0;
   CSingleLock lock(m_critSection);
@@ -298,13 +298,13 @@ std::string CPVRGUITimesInfo::GetEpgEventElapsedTime(const CPVREpgInfoTagPtr& ep
   return StringUtils::SecondsToTimeString(iElapsed, format);
 }
 
-std::string CPVRGUITimesInfo::GetEpgEventRemainingTime(const CPVREpgInfoTagPtr& epgTag, TIME_FORMAT format) const
+std::string CPVRGUITimesInfo::GetEpgEventRemainingTime(const std::shared_ptr<CPVREpgInfoTag>& epgTag, TIME_FORMAT format) const
 {
   CSingleLock lock(m_critSection);
   return StringUtils::SecondsToTimeString(GetRemainingTime(epgTag), format);
 }
 
-std::string CPVRGUITimesInfo::GetEpgEventFinishTime(const CPVREpgInfoTagPtr& epgTag, TIME_FORMAT format) const
+std::string CPVRGUITimesInfo::GetEpgEventFinishTime(const std::shared_ptr<CPVREpgInfoTag>& epgTag, TIME_FORMAT format) const
 {
   CDateTime finish = CDateTime::GetCurrentDateTime();
   finish += CDateTimeSpan(0, 0, 0, GetRemainingTime(epgTag));
@@ -332,7 +332,7 @@ int CPVRGUITimesInfo::GetElapsedTime() const
   }
 }
 
-int CPVRGUITimesInfo::GetRemainingTime(const CPVREpgInfoTagPtr& epgTag) const
+int CPVRGUITimesInfo::GetRemainingTime(const std::shared_ptr<CPVREpgInfoTag>& epgTag) const
 {
   CSingleLock lock(m_critSection);
   if (epgTag && epgTag != m_playingEpgTag)
@@ -395,7 +395,7 @@ int CPVRGUITimesInfo::GetTimeshiftProgressBufferEnd() const
   return std::lrintf(static_cast<float>(m_iTimeshiftEndTime - m_iTimeshiftProgressStartTime) / m_iTimeshiftProgressDuration * 100);
 }
 
-int CPVRGUITimesInfo::GetEpgEventDuration(const CPVREpgInfoTagPtr& epgTag) const
+int CPVRGUITimesInfo::GetEpgEventDuration(const std::shared_ptr<CPVREpgInfoTag>& epgTag) const
 {
   CSingleLock lock(m_critSection);
   if (epgTag && epgTag != m_playingEpgTag)
@@ -404,7 +404,7 @@ int CPVRGUITimesInfo::GetEpgEventDuration(const CPVREpgInfoTagPtr& epgTag) const
     return m_iDuration;
 }
 
-int CPVRGUITimesInfo::GetEpgEventProgress(const CPVREpgInfoTagPtr& epgTag) const
+int CPVRGUITimesInfo::GetEpgEventProgress(const std::shared_ptr<CPVREpgInfoTag>& epgTag) const
 {
   CSingleLock lock(m_critSection);
   if (epgTag && epgTag != m_playingEpgTag)
diff --git a/xbmc/pvr/PVRGUITimesInfo.h b/xbmc/pvr/PVRGUITimesInfo.h
index 64a7b91f4bf7..54f69ff1a3c8 100644
--- a/xbmc/pvr/PVRGUITimesInfo.h
+++ b/xbmc/pvr/PVRGUITimesInfo.h
@@ -12,6 +12,8 @@
 #include "pvr/PVRTypes.h"
 #include "threads/CriticalSection.h"
 
+#include <memory>
+
 namespace PVR
 {
   class CPVRGUITimesInfo
@@ -32,10 +34,10 @@ namespace PVR
     std::string GetTimeshiftProgressStartTime(TIME_FORMAT format) const;
     std::string GetTimeshiftProgressEndTime(TIME_FORMAT format) const;
 
-    std::string GetEpgEventDuration(const CPVREpgInfoTagPtr& epgTag, TIME_FORMAT format) const;
-    std::string GetEpgEventElapsedTime(const CPVREpgInfoTagPtr& epgTag, TIME_FORMAT format) const;
-    std::string GetEpgEventRemainingTime(const CPVREpgInfoTagPtr& epgTag, TIME_FORMAT format) const;
-    std::string GetEpgEventFinishTime(const CPVREpgInfoTagPtr& epgTag, TIME_FORMAT format) const;
+    std::string GetEpgEventDuration(const std::shared_ptr<CPVREpgInfoTag>& epgTag, TIME_FORMAT format) const;
+    std::string GetEpgEventElapsedTime(const std::shared_ptr<CPVREpgInfoTag>& epgTag, TIME_FORMAT format) const;
+    std::string GetEpgEventRemainingTime(const std::shared_ptr<CPVREpgInfoTag>& epgTag, TIME_FORMAT format) const;
+    std::string GetEpgEventFinishTime(const std::shared_ptr<CPVREpgInfoTag>& epgTag, TIME_FORMAT format) const;
     std::string GetEpgEventSeekTime(int iSeekSize, TIME_FORMAT format) const;
 
     // GUI info ints
@@ -47,8 +49,8 @@ namespace PVR
     int GetTimeshiftProgressBufferStart() const;
     int GetTimeshiftProgressBufferEnd() const;
 
-    int GetEpgEventDuration(const CPVREpgInfoTagPtr& epgTag) const;
-    int GetEpgEventProgress(const CPVREpgInfoTagPtr& epgTag) const;
+    int GetEpgEventDuration(const std::shared_ptr<CPVREpgInfoTag>& epgTag) const;
+    int GetEpgEventProgress(const std::shared_ptr<CPVREpgInfoTag>& epgTag) const;
 
     // GUI info bools
     bool IsTimeshifting() const;
@@ -61,12 +63,12 @@ namespace PVR
     static std::string TimeToTimeString(time_t datetime, TIME_FORMAT format, bool withSeconds);
 
     int GetElapsedTime() const;
-    int GetRemainingTime(const CPVREpgInfoTagPtr& epgTag) const;
+    int GetRemainingTime(const std::shared_ptr<CPVREpgInfoTag>& epgTag) const;
 
     mutable CCriticalSection m_critSection;
 
-    CPVREpgInfoTagPtr m_playingEpgTag;
-    CPVRChannelPtr m_playingChannel;
+    std::shared_ptr<CPVREpgInfoTag> m_playingEpgTag;
+    std::shared_ptr<CPVRChannel> m_playingChannel;
 
     time_t m_iStartTime;
     unsigned int m_iDuration;
diff --git a/xbmc/pvr/PVRItem.cpp b/xbmc/pvr/PVRItem.cpp
index cf6d9389361c..140eed608d74 100644
--- a/xbmc/pvr/PVRItem.cpp
+++ b/xbmc/pvr/PVRItem.cpp
@@ -24,7 +24,7 @@
 
 namespace PVR
 {
-  CPVREpgInfoTagPtr CPVRItem::GetEpgInfoTag() const
+  std::shared_ptr<CPVREpgInfoTag> CPVRItem::GetEpgInfoTag() const
   {
     if (m_item->IsEPG())
     {
@@ -42,10 +42,10 @@ namespace PVR
     {
       CLog::LogF(LOGERROR, "Unsupported item type!");
     }
-    return CPVREpgInfoTagPtr();
+    return std::shared_ptr<CPVREpgInfoTag>();
   }
 
-  CPVREpgInfoTagPtr CPVRItem::GetNextEpgInfoTag() const
+  std::shared_ptr<CPVREpgInfoTag> CPVRItem::GetNextEpgInfoTag() const
   {
     if (m_item->IsEPG())
     {
@@ -59,7 +59,7 @@ namespace PVR
     }
     else if (m_item->IsPVRTimer())
     {
-      const CPVRChannelPtr channel =m_item->GetPVRTimerInfoTag()->Channel();
+      const std::shared_ptr<CPVRChannel> channel =m_item->GetPVRTimerInfoTag()->Channel();
       if (channel)
         return channel->GetEPGNext();
     }
@@ -67,10 +67,10 @@ namespace PVR
     {
       CLog::LogF(LOGERROR, "Unsupported item type!");
     }
-    return CPVREpgInfoTagPtr();
+    return std::shared_ptr<CPVREpgInfoTag>();
   }
 
-  CPVRChannelPtr CPVRItem::GetChannel() const
+  std::shared_ptr<CPVRChannel> CPVRItem::GetChannel() const
   {
     if (m_item->IsPVRChannel())
     {
@@ -88,10 +88,10 @@ namespace PVR
     {
       CLog::LogF(LOGERROR, "Unsupported item type!");
     }
-    return CPVRChannelPtr();
+    return std::shared_ptr<CPVRChannel>();
   }
 
-  CPVRTimerInfoTagPtr CPVRItem::GetTimerInfoTag() const
+  std::shared_ptr<CPVRTimerInfoTag> CPVRItem::GetTimerInfoTag() const
   {
     if (m_item->IsPVRTimer())
     {
@@ -109,10 +109,10 @@ namespace PVR
     {
       CLog::LogF(LOGERROR, "Unsupported item type!");
     }
-    return CPVRTimerInfoTagPtr();
+    return std::shared_ptr<CPVRTimerInfoTag>();
   }
 
-  CPVRRecordingPtr CPVRItem::GetRecording() const
+  std::shared_ptr<CPVRRecording> CPVRItem::GetRecording() const
   {
     if (m_item->IsPVRRecording())
     {
@@ -126,7 +126,7 @@ namespace PVR
     {
       CLog::LogF(LOGERROR, "Unsupported item type!");
     }
-    return CPVRRecordingPtr();
+    return std::shared_ptr<CPVRRecording>();
   }
 
   bool CPVRItem::IsRadio() const
diff --git a/xbmc/pvr/PVRItem.h b/xbmc/pvr/PVRItem.h
index e24fd36438e7..0895bccf8d82 100644
--- a/xbmc/pvr/PVRItem.h
+++ b/xbmc/pvr/PVRItem.h
@@ -22,11 +22,11 @@ namespace PVR
     explicit CPVRItem(const std::shared_ptr<CFileItem>& item) : m_item(item.get()) {}
     explicit CPVRItem(const CFileItem* item) : m_item(item) {}
 
-    CPVREpgInfoTagPtr GetEpgInfoTag() const;
-    CPVREpgInfoTagPtr GetNextEpgInfoTag() const;
-    CPVRChannelPtr GetChannel() const;
-    CPVRTimerInfoTagPtr GetTimerInfoTag() const;
-    CPVRRecordingPtr GetRecording() const;
+    std::shared_ptr<CPVREpgInfoTag> GetEpgInfoTag() const;
+    std::shared_ptr<CPVREpgInfoTag> GetNextEpgInfoTag() const;
+    std::shared_ptr<CPVRChannel> GetChannel() const;
+    std::shared_ptr<CPVRTimerInfoTag> GetTimerInfoTag() const;
+    std::shared_ptr<CPVRRecording> GetRecording() const;
 
     bool IsRadio() const;
 
diff --git a/xbmc/pvr/PVRManager.cpp b/xbmc/pvr/PVRManager.cpp
index 319a4ab74548..23a581fe9184 100644
--- a/xbmc/pvr/PVRManager.cpp
+++ b/xbmc/pvr/PVRManager.cpp
@@ -167,7 +167,7 @@ void CPVRManager::Announce(ANNOUNCEMENT::AnnouncementFlag flag, const char *send
   }
 }
 
-CPVRDatabasePtr CPVRManager::GetTVDatabase(void) const
+std::shared_ptr<CPVRDatabase> CPVRManager::GetTVDatabase(void) const
 {
   CSingleLock lock(m_critSection);
   if (!m_database || !m_database->IsOpen())
@@ -176,31 +176,31 @@ CPVRDatabasePtr CPVRManager::GetTVDatabase(void) const
   return m_database;
 }
 
-CPVRChannelGroupsContainerPtr CPVRManager::ChannelGroups(void) const
+std::shared_ptr<CPVRChannelGroupsContainer> CPVRManager::ChannelGroups(void) const
 {
   CSingleLock lock(m_critSection);
   return m_channelGroups;
 }
 
-CPVRRecordingsPtr CPVRManager::Recordings(void) const
+std::shared_ptr<CPVRRecordings> CPVRManager::Recordings(void) const
 {
   CSingleLock lock(m_critSection);
   return m_recordings;
 }
 
-CPVRTimersPtr CPVRManager::Timers(void) const
+std::shared_ptr<CPVRTimers> CPVRManager::Timers(void) const
 {
   CSingleLock lock(m_critSection);
   return m_timers;
 }
 
-CPVRClientsPtr CPVRManager::Clients(void) const
+std::shared_ptr<CPVRClients> CPVRManager::Clients(void) const
 {
   // note: m_addons is const (only set/reset in ctor/dtor). no need for a lock here.
   return m_addons;
 }
 
-CPVRClientPtr CPVRManager::GetClient(const CFileItem &item) const
+std::shared_ptr<CPVRClient> CPVRManager::GetClient(const CFileItem &item) const
 {
   int iClientID = PVR_INVALID_CLIENT_ID;
 
@@ -227,16 +227,16 @@ CPVRClientPtr CPVRManager::GetClient(const CFileItem &item) const
   return GetClient(iClientID);
 }
 
-CPVRClientPtr CPVRManager::GetClient(int iClientId) const
+std::shared_ptr<CPVRClient> CPVRManager::GetClient(int iClientId) const
 {
-  CPVRClientPtr client;
+  std::shared_ptr<CPVRClient> client;
   if (iClientId != PVR_INVALID_CLIENT_ID)
     m_addons->GetCreatedClient(iClientId, client);
 
   return client;
 }
 
-CPVRGUIActionsPtr CPVRManager::GUIActions(void) const
+std::shared_ptr<CPVRGUIActions> CPVRManager::GUIActions(void) const
 {
   // note: m_guiActions is const (only set/reset in ctor/dtor). no need for a lock here.
   return m_guiActions;
@@ -598,13 +598,13 @@ bool CPVRManager::IsPlaying(void) const
   return IsStarted() && (m_playingChannel || m_playingRecording || m_playingEpgTag);
 }
 
-bool CPVRManager::IsPlayingChannel(const CPVRChannelPtr &channel) const
+bool CPVRManager::IsPlayingChannel(const std::shared_ptr<CPVRChannel> &channel) const
 {
   bool bReturn(false);
 
   if (channel && IsStarted())
   {
-    CPVRChannelPtr current(GetPlayingChannel());
+    std::shared_ptr<CPVRChannel> current(GetPlayingChannel());
     if (current && *current == *channel)
       bReturn = true;
   }
@@ -617,13 +617,13 @@ bool CPVRManager::IsPlayingEncryptedChannel(void) const
   return IsStarted() && m_playingChannel && m_playingChannel->IsEncrypted();
 }
 
-bool CPVRManager::IsPlayingRecording(const CPVRRecordingPtr &recording) const
+bool CPVRManager::IsPlayingRecording(const std::shared_ptr<CPVRRecording> &recording) const
 {
   bool bReturn(false);
 
   if (recording && IsStarted())
   {
-    CPVRRecordingPtr current(GetPlayingRecording());
+    std::shared_ptr<CPVRRecording> current(GetPlayingRecording());
     if (current && *current == *recording)
       bReturn = true;
   }
@@ -631,13 +631,13 @@ bool CPVRManager::IsPlayingRecording(const CPVRRecordingPtr &recording) const
   return bReturn;
 }
 
-bool CPVRManager::IsPlayingEpgTag(const CPVREpgInfoTagPtr &epgTag) const
+bool CPVRManager::IsPlayingEpgTag(const std::shared_ptr<CPVREpgInfoTag> &epgTag) const
 {
   bool bReturn(false);
 
   if (epgTag && IsStarted())
   {
-    CPVREpgInfoTagPtr current(GetPlayingEpgTag());
+    std::shared_ptr<CPVREpgInfoTag> current(GetPlayingEpgTag());
     if (current && *current == *epgTag)
       bReturn = true;
   }
@@ -653,17 +653,17 @@ bool CPVRManager::IsPlayingChannel(int iClientID, int iUniqueChannelID) const
   return false;
 }
 
-CPVRChannelPtr CPVRManager::GetPlayingChannel(void) const
+std::shared_ptr<CPVRChannel> CPVRManager::GetPlayingChannel(void) const
 {
   return m_playingChannel;
 }
 
-CPVRRecordingPtr CPVRManager::GetPlayingRecording(void) const
+std::shared_ptr<CPVRRecording> CPVRManager::GetPlayingRecording(void) const
 {
   return m_playingRecording;
 }
 
-CPVREpgInfoTagPtr CPVRManager::GetPlayingEpgTag(void) const
+std::shared_ptr<CPVREpgInfoTag> CPVRManager::GetPlayingEpgTag(void) const
 {
   return m_playingEpgTag;
 }
@@ -680,7 +680,7 @@ int CPVRManager::GetPlayingClientID(void) const
 
 bool CPVRManager::IsRecordingOnPlayingChannel(void) const
 {
-  const CPVRChannelPtr currentChannel = GetPlayingChannel();
+  const std::shared_ptr<CPVRChannel> currentChannel = GetPlayingChannel();
   return currentChannel && m_timers && m_timers->IsRecordingOnChannel(*currentChannel);
 }
 
@@ -691,7 +691,7 @@ bool CPVRManager::IsPlayingActiveRecording() const
 
 bool CPVRManager::CanRecordOnPlayingChannel(void) const
 {
-  const CPVRChannelPtr currentChannel = GetPlayingChannel();
+  const std::shared_ptr<CPVRChannel> currentChannel = GetPlayingChannel();
   return currentChannel && currentChannel->CanRecord();
 }
 
@@ -738,32 +738,32 @@ bool CPVRManager::IsCurrentlyParentalLocked(const std::shared_ptr<CPVRChannel>&
   return bReturn;
 }
 
-void CPVRManager::SetPlayingGroup(const CPVRChannelGroupPtr &group)
+void CPVRManager::SetPlayingGroup(const std::shared_ptr<CPVRChannelGroup> &group)
 {
   if (m_channelGroups && group)
     m_channelGroups->Get(group->IsRadio())->SetSelectedGroup(group);
 }
 
-void CPVRManager::SetPlayingGroup(const CPVRChannelPtr &channel)
+void CPVRManager::SetPlayingGroup(const std::shared_ptr<CPVRChannel> &channel)
 {
-  CPVRChannelGroupPtr group = m_channelGroups->GetSelectedGroup(channel->IsRadio());
+  std::shared_ptr<CPVRChannelGroup> group = m_channelGroups->GetSelectedGroup(channel->IsRadio());
   if (!group || !group->IsGroupMember(channel))
   {
     // The channel we'll switch to is not part of the current selected group.
     // Set the first group as the selected group where the channel is a member.
     CPVRChannelGroups *channelGroups = m_channelGroups->Get(channel->IsRadio());
-    std::vector<CPVRChannelGroupPtr> groups = channelGroups->GetGroupsByChannel(channel, true);
+    std::vector<std::shared_ptr<CPVRChannelGroup>> groups = channelGroups->GetGroupsByChannel(channel, true);
     if (!groups.empty())
       channelGroups->SetSelectedGroup(groups.front());
   }
 }
 
-CPVRChannelGroupPtr CPVRManager::GetPlayingGroup(bool bRadio /* = false */) const
+std::shared_ptr<CPVRChannelGroup> CPVRManager::GetPlayingGroup(bool bRadio /* = false */) const
 {
   if (m_channelGroups)
     return m_channelGroups->GetSelectedGroup(bRadio);
 
-  return CPVRChannelGroupPtr();
+  return std::shared_ptr<CPVRChannelGroup>();
 }
 
 class CPVRManager::CLastWatchedUpdateTimer : public CTimer, private ITimerCallback
@@ -804,7 +804,7 @@ void CPVRManager::OnPlaybackStarted(const CFileItemPtr item)
 
   if (item->HasPVRChannelInfoTag())
   {
-    const CPVRChannelPtr channel(item->GetPVRChannelInfoTag());
+    const std::shared_ptr<CPVRChannel> channel(item->GetPVRChannelInfoTag());
 
     m_playingChannel = channel;
     m_playingClientId = m_playingChannel->ClientID();
@@ -841,7 +841,7 @@ void CPVRManager::OnPlaybackStarted(const CFileItemPtr item)
 
   if (m_playingClientId != -1)
   {
-    const CPVRClientPtr client = GetClient(m_playingClientId);
+    const std::shared_ptr<CPVRClient> client = GetClient(m_playingClientId);
     if (client)
       m_strPlayingClientName = client->GetFriendlyName();
   }
@@ -1003,7 +1003,7 @@ bool CPVRManager::CreateChannelEpgs(void)
   return m_bEpgsCreated;
 }
 
-void CPVRManager::UpdateLastWatched(const CPVRChannelPtr &channel, const CDateTime& time)
+void CPVRManager::UpdateLastWatched(const std::shared_ptr<CPVRChannel> &channel, const CDateTime& time)
 {
   time_t iTime;
   time.GetAsTime(iTime);
@@ -1011,7 +1011,7 @@ void CPVRManager::UpdateLastWatched(const CPVRChannelPtr &channel, const CDateTi
   channel->SetLastWatched(iTime);
 
   // update last watched timestamp for group
-  CPVRChannelGroupPtr group(GetPlayingGroup(channel->IsRadio()));
+  std::shared_ptr<CPVRChannelGroup> group(GetPlayingGroup(channel->IsRadio()));
   group->SetLastWatched(iTime);
 
   /* update last played group */
diff --git a/xbmc/pvr/PVRManager.h b/xbmc/pvr/PVRManager.h
index 8918ca7c848b..a04dbdead9cf 100644
--- a/xbmc/pvr/PVRManager.h
+++ b/xbmc/pvr/PVRManager.h
@@ -110,25 +110,25 @@ namespace PVR
      * @brief Get the channel groups container.
      * @return The groups container.
      */
-    CPVRChannelGroupsContainerPtr ChannelGroups(void) const;
+    std::shared_ptr<CPVRChannelGroupsContainer> ChannelGroups(void) const;
 
     /*!
      * @brief Get the recordings container.
      * @return The recordings container.
      */
-    CPVRRecordingsPtr Recordings(void) const;
+    std::shared_ptr<CPVRRecordings> Recordings(void) const;
 
     /*!
      * @brief Get the timers container.
      * @return The timers container.
      */
-    CPVRTimersPtr Timers(void) const;
+    std::shared_ptr<CPVRTimers> Timers(void) const;
 
     /*!
      * @brief Get the timers container.
      * @return The timers container.
      */
-    CPVRClientsPtr Clients(void) const;
+    std::shared_ptr<CPVRClients> Clients(void) const;
 
     /*!
      * @brief Get the instance of a client that matches the given item.
@@ -148,7 +148,7 @@ namespace PVR
      * @brief Get access to the pvr gui actions.
      * @return The gui actions.
      */
-    CPVRGUIActionsPtr GUIActions(void) const;
+    std::shared_ptr<CPVRGUIActions> GUIActions(void) const;
 
     /*!
      * @brief Get access to the epg container.
@@ -195,7 +195,7 @@ namespace PVR
      * @brief Get the TV database.
      * @return The TV database.
      */
-    CPVRDatabasePtr GetTVDatabase(void) const;
+    std::shared_ptr<CPVRDatabase> GetTVDatabase(void) const;
 
     /*!
      * @brief Check if a TV channel, radio channel or recording is playing.
@@ -208,21 +208,21 @@ namespace PVR
      * @param channel The channel to check.
      * @return True if it's playing, false otherwise.
      */
-    bool IsPlayingChannel(const CPVRChannelPtr &channel) const;
+    bool IsPlayingChannel(const std::shared_ptr<CPVRChannel> &channel) const;
 
     /*!
      * @brief Check if the given recording is playing.
      * @param recording The recording to check.
      * @return True if it's playing, false otherwise.
      */
-    bool IsPlayingRecording(const CPVRRecordingPtr &recording) const;
+    bool IsPlayingRecording(const std::shared_ptr<CPVRRecording> &recording) const;
 
     /*!
      * @brief Check if the given epg tag is playing.
      * @param epgTag The tag to check.
      * @return True if it's playing, false otherwise.
      */
-    bool IsPlayingEpgTag(const CPVREpgInfoTagPtr &epgTag) const;
+    bool IsPlayingEpgTag(const std::shared_ptr<CPVREpgInfoTag> &epgTag) const;
 
     /*!
      * @return True while the PVRManager is initialising.
@@ -271,19 +271,19 @@ namespace PVR
      * @brief Return the channel that is currently playing.
      * @return The channel or NULL if none is playing.
      */
-    CPVRChannelPtr GetPlayingChannel(void) const;
+    std::shared_ptr<CPVRChannel> GetPlayingChannel(void) const;
 
     /*!
      * @brief Return the recording that is currently playing.
      * @return The recording or NULL if none is playing.
      */
-    CPVRRecordingPtr GetPlayingRecording(void) const;
+    std::shared_ptr<CPVRRecording> GetPlayingRecording(void) const;
 
     /*!
      * @brief Return the epg tag that is currently playing.
      * @return The tag or NULL if none is playing.
      */
-    CPVREpgInfoTagPtr GetPlayingEpgTag(void) const;
+    std::shared_ptr<CPVREpgInfoTag> GetPlayingEpgTag(void) const;
 
     /*!
      * @brief Get the name of the playing client, if there is one.
@@ -349,14 +349,14 @@ namespace PVR
      * @brief Set the current playing group, used to load the right channel.
      * @param group The new group.
      */
-    void SetPlayingGroup(const CPVRChannelGroupPtr &group);
+    void SetPlayingGroup(const std::shared_ptr<CPVRChannelGroup> &group);
 
     /*!
      * @brief Get the current playing group, used to load the right channel.
      * @param bRadio True to get the current radio group, false to get the current TV group.
      * @return The current group or the group containing all channels if it's not set.
      */
-    CPVRChannelGroupPtr GetPlayingGroup(bool bRadio = false) const;
+    std::shared_ptr<CPVRChannelGroup> GetPlayingGroup(bool bRadio = false) const;
 
     /*!
      * @brief Let the background thread create epg tags for all channels.
@@ -482,13 +482,13 @@ namespace PVR
      * @param channel The channel which is updated
      * @param time The last watched time to set
      */
-    void UpdateLastWatched(const CPVRChannelPtr &channel, const CDateTime& time);
+    void UpdateLastWatched(const std::shared_ptr<CPVRChannel> &channel, const CDateTime& time);
 
     /*!
      * @brief Set the playing group to the first group the channel is in if the given channel is not part of the current playing group
      * @param channel The channel
      */
-    void SetPlayingGroup(const CPVRChannelPtr &channel);
+    void SetPlayingGroup(const std::shared_ptr<CPVRChannel> &channel);
 
     /*!
      * @brief Executes "pvrpowermanagement.setwakeupcmd"
@@ -548,18 +548,18 @@ namespace PVR
 
     /** @name containers */
     //@{
-    CPVRChannelGroupsContainerPtr  m_channelGroups;               /*!< pointer to the channel groups container */
-    CPVRRecordingsPtr              m_recordings;                  /*!< pointer to the recordings container */
-    CPVRTimersPtr                  m_timers;                      /*!< pointer to the timers container */
-    CPVRClientsPtr                 m_addons;                      /*!< pointer to the pvr addon container */
+    std::shared_ptr<CPVRChannelGroupsContainer>  m_channelGroups;               /*!< pointer to the channel groups container */
+    std::shared_ptr<CPVRRecordings>              m_recordings;                  /*!< pointer to the recordings container */
+    std::shared_ptr<CPVRTimers>                  m_timers;                      /*!< pointer to the timers container */
+    std::shared_ptr<CPVRClients>                 m_addons;                      /*!< pointer to the pvr addon container */
     std::unique_ptr<CPVRGUIInfo>   m_guiInfo;                     /*!< pointer to the guiinfo data */
-    CPVRGUIActionsPtr              m_guiActions;                  /*!< pointer to the pvr gui actions */
+    std::shared_ptr<CPVRGUIActions>              m_guiActions;                  /*!< pointer to the pvr gui actions */
     CPVREpgContainer               m_epgContainer;                /*!< the epg container */
     //@}
 
     CPVRManagerJobQueue             m_pendingUpdates;              /*!< vector of pending pvr updates */
 
-    CPVRDatabasePtr                 m_database;                    /*!< the database for all PVR related data */
+    std::shared_ptr<CPVRDatabase>                 m_database;                    /*!< the database for all PVR related data */
     mutable CCriticalSection        m_critSection;                 /*!< critical section for all changes to this class, except for changes to triggers */
     bool                            m_bFirstStart = true;          /*!< true when the PVR manager was started first, false otherwise */
     bool                            m_bEpgsCreated = false;        /*!< true if epg data for channels has been created */
@@ -575,9 +575,9 @@ namespace PVR
     CPVRActionListener m_actionListener;
     CPVRSettings m_settings;
 
-    CPVRChannelPtr m_playingChannel;
-    CPVRRecordingPtr m_playingRecording;
-    CPVREpgInfoTagPtr m_playingEpgTag;
+    std::shared_ptr<CPVRChannel> m_playingChannel;
+    std::shared_ptr<CPVRRecording> m_playingRecording;
+    std::shared_ptr<CPVREpgInfoTag> m_playingEpgTag;
     std::string m_strPlayingClientName;
     int m_playingClientId = -1;
     int m_iplayingChannelUniqueID = -1;
diff --git a/xbmc/pvr/addons/PVRClients.cpp b/xbmc/pvr/addons/PVRClients.cpp
index 6cd4caaf9075..c77b85595678 100644
--- a/xbmc/pvr/addons/PVRClients.cpp
+++ b/xbmc/pvr/addons/PVRClients.cpp
@@ -104,7 +104,7 @@ void CPVRClients::UpdateAddons(const std::string &changedAddonId /*= ""*/)
 
   addons.clear();
 
-  std::vector<std::pair<CPVRClientPtr, int>> addonsToCreate;
+  std::vector<std::pair<std::shared_ptr<CPVRClient>, int>> addonsToCreate;
   std::vector<AddonPtr> addonsToReCreate;
   std::vector<AddonPtr> addonsToDestroy;
 
@@ -119,7 +119,7 @@ void CPVRClients::UpdateAddons(const std::string &changedAddonId /*= ""*/)
       {
         int iClientId = ClientIdFromAddonId(addon->ID());
 
-        CPVRClientPtr client;
+        std::shared_ptr<CPVRClient> client;
         if (IsKnownClient(addon))
         {
           GetClient(iClientId, client);
@@ -207,7 +207,7 @@ bool CPVRClients::StopClient(const AddonPtr &addon, bool bRestart)
   CSingleLock lock(m_critSection);
 
   int iId = GetClientId(addon->ID());
-  CPVRClientPtr mappedClient;
+  std::shared_ptr<CPVRClient> mappedClient;
   if (GetClient(iId, mappedClient))
   {
     if (bRestart)
@@ -259,7 +259,7 @@ bool CPVRClients::GetClient(const std::string &strId, AddonPtr &addon) const
   return false;
 }
 
-bool CPVRClients::GetClient(int iClientId, CPVRClientPtr &addon) const
+bool CPVRClients::GetClient(int iClientId, std::shared_ptr<CPVRClient> &addon) const
 {
   bool bReturn = false;
   if (iClientId <= PVR_INVALID_CLIENT_ID)
@@ -324,7 +324,7 @@ bool CPVRClients::IsKnownClient(const AddonPtr &client) const
 
 bool CPVRClients::IsCreatedClient(int iClientId) const
 {
-  CPVRClientPtr client;
+  std::shared_ptr<CPVRClient> client;
   return GetCreatedClient(iClientId, client);
 }
 
@@ -339,7 +339,7 @@ bool CPVRClients::IsCreatedClient(const AddonPtr &addon)
   return false;
 }
 
-bool CPVRClients::GetCreatedClient(int iClientId, CPVRClientPtr &addon) const
+bool CPVRClients::GetCreatedClient(int iClientId, std::shared_ptr<CPVRClient> &addon) const
 {
   if (GetClient(iClientId, addon))
     return addon->ReadyToUse();
@@ -375,7 +375,7 @@ PVR_ERROR CPVRClients::GetCreatedClients(CPVRClientMap &clientsReady, std::vecto
   for (const auto &addon : addons)
   {
     int iClientId = ClientIdFromAddonId(addon->ID());
-    CPVRClientPtr client;
+    std::shared_ptr<CPVRClient> client;
     GetClient(iClientId, client);
 
     if (client && client->ReadyToUse() && !client->IgnoreClient())
@@ -430,7 +430,7 @@ std::vector<SBackend> CPVRClients::GetBackendProperties() const
 {
   std::vector<SBackend> backendProperties;
 
-  ForCreatedClients(__FUNCTION__, [&backendProperties](const CPVRClientPtr &client) {
+  ForCreatedClients(__FUNCTION__, [&backendProperties](const std::shared_ptr<CPVRClient> &client) {
     SBackend properties;
 
     if (client->GetDriveSpace(properties.diskTotal, properties.diskUsed) == PVR_ERROR_NO_ERROR)
@@ -461,14 +461,14 @@ std::vector<SBackend> CPVRClients::GetBackendProperties() const
 
 bool CPVRClients::GetTimers(CPVRTimersContainer *timers, std::vector<int> &failedClients)
 {
-  return ForCreatedClients(__FUNCTION__, [timers](const CPVRClientPtr &client) {
+  return ForCreatedClients(__FUNCTION__, [timers](const std::shared_ptr<CPVRClient> &client) {
     return client->GetTimers(timers);
   }, failedClients) == PVR_ERROR_NO_ERROR;
 }
 
 PVR_ERROR CPVRClients::GetTimerTypes(CPVRTimerTypes& results) const
 {
-  return ForCreatedClients(__FUNCTION__, [&results](const CPVRClientPtr &client) {
+  return ForCreatedClients(__FUNCTION__, [&results](const std::shared_ptr<CPVRClient> &client) {
     CPVRTimerTypes types;
     PVR_ERROR ret = client->GetTimerTypes(types);
     if (ret == PVR_ERROR_NO_ERROR)
@@ -479,50 +479,50 @@ PVR_ERROR CPVRClients::GetTimerTypes(CPVRTimerTypes& results) const
 
 PVR_ERROR CPVRClients::GetRecordings(CPVRRecordings *recordings, bool deleted)
 {
-  return ForCreatedClients(__FUNCTION__, [recordings, deleted](const CPVRClientPtr &client) {
+  return ForCreatedClients(__FUNCTION__, [recordings, deleted](const std::shared_ptr<CPVRClient> &client) {
     return client->GetRecordings(recordings, deleted);
   });
 }
 
 PVR_ERROR CPVRClients::DeleteAllRecordingsFromTrash()
 {
-  return ForCreatedClients(__FUNCTION__, [](const CPVRClientPtr &client) {
+  return ForCreatedClients(__FUNCTION__, [](const std::shared_ptr<CPVRClient> &client) {
     return client->DeleteAllRecordingsFromTrash();
   });
 }
 
 PVR_ERROR CPVRClients::SetEPGTimeFrame(int iDays)
 {
-  return ForCreatedClients(__FUNCTION__, [iDays](const CPVRClientPtr &client) {
+  return ForCreatedClients(__FUNCTION__, [iDays](const std::shared_ptr<CPVRClient> &client) {
     return client->SetEPGTimeFrame(iDays);
   });
 }
 
 PVR_ERROR CPVRClients::GetChannels(CPVRChannelGroupInternal *group, std::vector<int> &failedClients)
 {
-  return ForCreatedClients(__FUNCTION__, [group](const CPVRClientPtr &client) {
+  return ForCreatedClients(__FUNCTION__, [group](const std::shared_ptr<CPVRClient> &client) {
     return client->GetChannels(*group, group->IsRadio());
   }, failedClients);
 }
 
 PVR_ERROR CPVRClients::GetChannelGroups(CPVRChannelGroups *groups, std::vector<int> &failedClients)
 {
-  return ForCreatedClients(__FUNCTION__, [groups](const CPVRClientPtr &client) {
+  return ForCreatedClients(__FUNCTION__, [groups](const std::shared_ptr<CPVRClient> &client) {
     return client->GetChannelGroups(groups);
   }, failedClients);
 }
 
 PVR_ERROR CPVRClients::GetChannelGroupMembers(CPVRChannelGroup *group, std::vector<int> &failedClients)
 {
-  return ForCreatedClients(__FUNCTION__, [group](const CPVRClientPtr &client) {
+  return ForCreatedClients(__FUNCTION__, [group](const std::shared_ptr<CPVRClient> &client) {
     return client->GetChannelGroupMembers(group);
   }, failedClients);
 }
 
-std::vector<CPVRClientPtr> CPVRClients::GetClientsSupportingChannelScan(void) const
+std::vector<std::shared_ptr<CPVRClient>> CPVRClients::GetClientsSupportingChannelScan(void) const
 {
-  std::vector<CPVRClientPtr> possibleScanClients;
-  ForCreatedClients(__FUNCTION__, [&possibleScanClients](const CPVRClientPtr &client) {
+  std::vector<std::shared_ptr<CPVRClient>> possibleScanClients;
+  ForCreatedClients(__FUNCTION__, [&possibleScanClients](const std::shared_ptr<CPVRClient> &client) {
     if (client->GetClientCapabilities().SupportsChannelScan())
       possibleScanClients.emplace_back(client);
     return PVR_ERROR_NO_ERROR;
@@ -530,10 +530,10 @@ std::vector<CPVRClientPtr> CPVRClients::GetClientsSupportingChannelScan(void) co
   return possibleScanClients;
 }
 
-std::vector<CPVRClientPtr> CPVRClients::GetClientsSupportingChannelSettings(bool bRadio) const
+std::vector<std::shared_ptr<CPVRClient>> CPVRClients::GetClientsSupportingChannelSettings(bool bRadio) const
 {
-  std::vector<CPVRClientPtr> possibleSettingsClients;
-  ForCreatedClients(__FUNCTION__, [bRadio, &possibleSettingsClients](const CPVRClientPtr &client) {
+  std::vector<std::shared_ptr<CPVRClient>> possibleSettingsClients;
+  ForCreatedClients(__FUNCTION__, [bRadio, &possibleSettingsClients](const std::shared_ptr<CPVRClient> &client) {
     const CPVRClientCapabilities& caps = client->GetClientCapabilities();
     if (caps.SupportsChannelSettings() &&
         ((bRadio && caps.SupportsRadio()) || (!bRadio && caps.SupportsTV())))
@@ -545,7 +545,7 @@ std::vector<CPVRClientPtr> CPVRClients::GetClientsSupportingChannelSettings(bool
 
 void CPVRClients::OnSystemSleep()
 {
-  ForCreatedClients(__FUNCTION__, [](const CPVRClientPtr &client) {
+  ForCreatedClients(__FUNCTION__, [](const std::shared_ptr<CPVRClient> &client) {
     client->OnSystemSleep();
     return PVR_ERROR_NO_ERROR;
   });
@@ -553,7 +553,7 @@ void CPVRClients::OnSystemSleep()
 
 void CPVRClients::OnSystemWake()
 {
-  ForCreatedClients(__FUNCTION__, [](const CPVRClientPtr &client) {
+  ForCreatedClients(__FUNCTION__, [](const std::shared_ptr<CPVRClient> &client) {
     client->OnSystemWake();
     return PVR_ERROR_NO_ERROR;
   });
@@ -561,7 +561,7 @@ void CPVRClients::OnSystemWake()
 
 void CPVRClients::OnPowerSavingActivated()
 {
-  ForCreatedClients(__FUNCTION__, [](const CPVRClientPtr &client) {
+  ForCreatedClients(__FUNCTION__, [](const std::shared_ptr<CPVRClient> &client) {
     client->OnPowerSavingActivated();
     return PVR_ERROR_NO_ERROR;
   });
@@ -569,7 +569,7 @@ void CPVRClients::OnPowerSavingActivated()
 
 void CPVRClients::OnPowerSavingDeactivated()
 {
-  ForCreatedClients(__FUNCTION__, [](const CPVRClientPtr &client) {
+  ForCreatedClients(__FUNCTION__, [](const std::shared_ptr<CPVRClient> &client) {
     client->OnPowerSavingDeactivated();
     return PVR_ERROR_NO_ERROR;
   });
diff --git a/xbmc/pvr/addons/PVRClients.h b/xbmc/pvr/addons/PVRClients.h
index dca987e6f998..7b8b39b90496 100644
--- a/xbmc/pvr/addons/PVRClients.h
+++ b/xbmc/pvr/addons/PVRClients.h
@@ -15,6 +15,7 @@
 
 #include <functional>
 #include <map>
+#include <memory>
 #include <string>
 #include <vector>
 
@@ -32,7 +33,7 @@ namespace PVR
   class CPVRRecordings;
   class CPVRTimersContainer;
 
-  typedef std::map<int, CPVRClientPtr> CPVRClientMap;
+  typedef std::map<int, std::shared_ptr<CPVRClient>> CPVRClientMap;
 
   /**
    * Holds generic data about a backend (number of channels etc.)
@@ -139,7 +140,7 @@ namespace PVR
      * @param addon Will be filled with requested client on success, null otherwise.
      * @return True on success, false otherwise.
      */
-    bool GetCreatedClient(int iClientId, CPVRClientPtr &addon) const;
+    bool GetCreatedClient(int iClientId, std::shared_ptr<CPVRClient> &addon) const;
 
     /*!
      * @brief Get all created clients.
@@ -257,13 +258,13 @@ namespace PVR
      * @brief Get a list of clients providing a channel scan dialog.
      * @return All clients supporting channel scan.
      */
-    std::vector<CPVRClientPtr> GetClientsSupportingChannelScan(void) const;
+    std::vector<std::shared_ptr<CPVRClient>> GetClientsSupportingChannelScan(void) const;
 
     /*!
      * @brief Get a list of clients providing a channel settings dialog.
      * @return All clients supporting channel settings.
      */
-    std::vector<CPVRClientPtr> GetClientsSupportingChannelSettings(bool bRadio) const;
+    std::vector<std::shared_ptr<CPVRClient>> GetClientsSupportingChannelSettings(bool bRadio) const;
 
     //@}
 
@@ -308,7 +309,7 @@ namespace PVR
      * @param addon The client.
      * @return True if the client was found, false otherwise.
      */
-    bool GetClient(int iClientId, CPVRClientPtr &addon) const;
+    bool GetClient(int iClientId, std::shared_ptr<CPVRClient> &addon) const;
 
     /*!
      * @brief Check whether a client is known.
@@ -332,12 +333,12 @@ namespace PVR
      */
     PVR_ERROR GetCreatedClients(CPVRClientMap &clientsReady, std::vector<int> &clientsNotReady) const;
 
-    typedef std::function<PVR_ERROR(const CPVRClientPtr&)> PVRClientFunction;
+    typedef std::function<PVR_ERROR(const std::shared_ptr<CPVRClient>&)> PVRClientFunction;
 
     /*!
      * @brief Wraps calls to all created clients in order to do common pre and post function invocation actions.
      * @param strFunctionName The function name, for logging purposes.
-     * @param function The function to wrap. It has to have return type PVR_ERROR and must take a const reference to a CPVRClientPtr as parameter.
+     * @param function The function to wrap. It has to have return type PVR_ERROR and must take a const reference to a std::shared_ptr<CPVRClient> as parameter.
      * @return PVR_ERROR_NO_ERROR on success, any other PVR_ERROR_* value otherwise.
      */
     PVR_ERROR ForCreatedClients(const char* strFunctionName, PVRClientFunction function) const;
@@ -345,7 +346,7 @@ namespace PVR
     /*!
      * @brief Wraps calls to all created clients in order to do common pre and post function invocation actions.
      * @param strFunctionName The function name, for logging purposes.
-     * @param function The function to wrap. It has to have return type PVR_ERROR and must take a const reference to a CPVRClientPtr as parameter.
+     * @param function The function to wrap. It has to have return type PVR_ERROR and must take a const reference to a std::shared_ptr<CPVRClient> as parameter.
      * @param failedClients Contains a list of the ids of clients for that the call failed, if any.
      * @return PVR_ERROR_NO_ERROR on success, any other PVR_ERROR_* value otherwise.
      */
diff --git a/xbmc/pvr/channels/PVRChannel.cpp b/xbmc/pvr/channels/PVRChannel.cpp
index 1bf98a3665c9..c3083cbde528 100644
--- a/xbmc/pvr/channels/PVRChannel.cpp
+++ b/xbmc/pvr/channels/PVRChannel.cpp
@@ -49,16 +49,16 @@ CPVRChannel::CPVRChannel(bool bRadio /* = false */)
 
 CPVRChannel::CPVRChannel(const PVR_CHANNEL &channel, unsigned int iClientId)
 : m_bIsRadio(channel.bIsRadio),
-  m_bIsHidden(channel.bIsHidden), 
-  m_strIconPath(channel.strIconPath), 
-  m_strChannelName(channel.strChannelName), 
+  m_bIsHidden(channel.bIsHidden),
+  m_strIconPath(channel.strIconPath),
+  m_strChannelName(channel.strChannelName),
   m_bHasArchive(channel.bHasArchive),
-  m_bEPGEnabled(!channel.bIsHidden), 
-  m_iUniqueId(channel.iUniqueId), 
-  m_iClientId(iClientId), 
-  m_clientChannelNumber(channel.iChannelNumber, channel.iSubChannelNumber), 
+  m_bEPGEnabled(!channel.bIsHidden),
+  m_iUniqueId(channel.iUniqueId),
+  m_iClientId(iClientId),
+  m_clientChannelNumber(channel.iChannelNumber, channel.iSubChannelNumber),
   m_strClientChannelName(channel.strChannelName),
-  m_strInputFormat(channel.strInputFormat), 
+  m_strInputFormat(channel.strInputFormat),
   m_iClientEncryptionSystem(channel.iEncryptionSystem)
 {
   if (m_strChannelName.empty())
@@ -81,7 +81,7 @@ void CPVRChannel::Serialize(CVariant& value) const
   value["channelnumber"] = m_channelNumber.GetChannelNumber();
   value["subchannelnumber"] = m_channelNumber.GetSubChannelNumber();
 
-  CPVREpgInfoTagPtr epg = GetEPGNow();
+  std::shared_ptr<CPVREpgInfoTag> epg = GetEPGNow();
   if (epg)
   {
     // add the properties of the current EPG item to the main object
@@ -103,11 +103,11 @@ void CPVRChannel::Serialize(CVariant& value) const
 bool CPVRChannel::Delete(void)
 {
   bool bReturn = false;
-  const CPVRDatabasePtr database = CServiceBroker::GetPVRManager().GetTVDatabase();
+  const std::shared_ptr<CPVRDatabase> database = CServiceBroker::GetPVRManager().GetTVDatabase();
   if (!database)
     return bReturn;
 
-  const CPVREpgPtr epg = GetEPG();
+  const std::shared_ptr<CPVREpg> epg = GetEPG();
   if (epg)
   {
     CServiceBroker::GetPVRManager().EpgContainer().DeleteEpg(epg, true);
@@ -120,7 +120,7 @@ bool CPVRChannel::Delete(void)
   return bReturn;
 }
 
-CPVREpgPtr CPVRChannel::GetEPG(void) const
+std::shared_ptr<CPVREpg> CPVRChannel::GetEPG(void) const
 {
   const_cast<CPVRChannel*>(this)->CreateEPG();
 
@@ -152,7 +152,7 @@ bool CPVRChannel::CreateEPG()
   return false;
 }
 
-bool CPVRChannel::UpdateFromClient(const CPVRChannelPtr &channel)
+bool CPVRChannel::UpdateFromClient(const std::shared_ptr<CPVRChannel> &channel)
 {
   SetClientID(channel->ClientID());
 
@@ -191,7 +191,7 @@ bool CPVRChannel::Persist()
       return true;
   }
 
-  const CPVRDatabasePtr database = CServiceBroker::GetPVRManager().GetTVDatabase();
+  const std::shared_ptr<CPVRDatabase> database = CServiceBroker::GetPVRManager().GetTVDatabase();
   if (database)
   {
     bool bReturn = database->Persist(*this, true);
@@ -353,7 +353,7 @@ bool CPVRChannel::SetLastWatched(time_t iLastWatched)
     }
   }
 
-  const CPVRDatabasePtr database = CServiceBroker::GetPVRManager().GetTVDatabase();
+  const std::shared_ptr<CPVRDatabase> database = CServiceBroker::GetPVRManager().GetTVDatabase();
   if (database)
     return database->UpdateLastWatched(*this);
 
@@ -384,7 +384,7 @@ bool CPVRChannel::SetClientID(int iClientId)
 
 void CPVRChannel::UpdatePath(const std::string& channelGroup)
 {
-  const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
+  const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
   if (client)
   {
     CSingleLock lock(m_critSection);
@@ -508,7 +508,7 @@ void CPVRChannel::UpdateEncryptionName(void)
 
 std::vector<std::shared_ptr<CPVREpgInfoTag>> CPVRChannel::GetEpgTags() const
 {
-  const CPVREpgPtr epg = GetEPG();
+  const std::shared_ptr<CPVREpg> epg = GetEPG();
   if (!epg)
   {
     CLog::LogFC(LOGDEBUG, LOGPVR, "Cannot get EPG for channel '%s'", m_strChannelName.c_str());
@@ -520,37 +520,37 @@ std::vector<std::shared_ptr<CPVREpgInfoTag>> CPVRChannel::GetEpgTags() const
 
 bool CPVRChannel::ClearEPG() const
 {
-  const CPVREpgPtr epg = GetEPG();
+  const std::shared_ptr<CPVREpg> epg = GetEPG();
   if (epg)
     epg->Clear();
 
   return true;
 }
 
-CPVREpgInfoTagPtr CPVRChannel::GetEPGNow() const
+std::shared_ptr<CPVREpgInfoTag> CPVRChannel::GetEPGNow() const
 {
-  CPVREpgInfoTagPtr tag;
-  const CPVREpgPtr epg = GetEPG();
+  std::shared_ptr<CPVREpgInfoTag> tag;
+  const std::shared_ptr<CPVREpg> epg = GetEPG();
   if (epg)
     tag = epg->GetTagNow();
 
   return tag;
 }
 
-CPVREpgInfoTagPtr CPVRChannel::GetEPGNext() const
+std::shared_ptr<CPVREpgInfoTag> CPVRChannel::GetEPGNext() const
 {
-  CPVREpgInfoTagPtr tag;
-  const CPVREpgPtr epg = GetEPG();
+  std::shared_ptr<CPVREpgInfoTag> tag;
+  const std::shared_ptr<CPVREpg> epg = GetEPG();
   if (epg)
     tag = epg->GetTagNext();
 
   return tag;
 }
 
-CPVREpgInfoTagPtr CPVRChannel::GetEPGPrevious() const
+std::shared_ptr<CPVREpgInfoTag> CPVRChannel::GetEPGPrevious() const
 {
-  CPVREpgInfoTagPtr tag;
-  const CPVREpgPtr epg = GetEPG();
+  std::shared_ptr<CPVREpgInfoTag> tag;
+  const std::shared_ptr<CPVREpg> epg = GetEPG();
   if (epg)
     tag = epg->GetTagPrevious();
 
@@ -799,7 +799,7 @@ std::string CPVRChannel::EPGScraper(void) const
 
 bool CPVRChannel::CanRecord(void) const
 {
-  const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
+  const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
   return client && client->GetClientCapabilities().SupportsRecordings();
 }
 
diff --git a/xbmc/pvr/channels/PVRChannel.h b/xbmc/pvr/channels/PVRChannel.h
index 911f195302f2..be2c4c7c1114 100644
--- a/xbmc/pvr/channels/PVRChannel.h
+++ b/xbmc/pvr/channels/PVRChannel.h
@@ -56,7 +56,7 @@ namespace PVR
      * @param channel The new channel data.
      * @return True if something changed, false otherwise.
      */
-    bool UpdateFromClient(const CPVRChannelPtr &channel);
+    bool UpdateFromClient(const std::shared_ptr<CPVRChannel> &channel);
 
     /*!
      * @brief Persists the changes in the database.
@@ -333,7 +333,7 @@ namespace PVR
      * @brief Get the EPG table for this channel.
      * @return The EPG for this channel.
      */
-    CPVREpgPtr GetEPG(void) const;
+    std::shared_ptr<CPVREpg> GetEPG(void) const;
 
     /*!
      * @brief Get the EPG tags for this channel.
@@ -355,7 +355,7 @@ namespace PVR
      *
      * @return The EPG tag that is now active.
      */
-    CPVREpgInfoTagPtr GetEPGNow() const;
+    std::shared_ptr<CPVREpgInfoTag> GetEPGNow() const;
 
     /*!
      * @brief Get the EPG tag that was previously active on this channel.
@@ -365,7 +365,7 @@ namespace PVR
      *
      * @return The EPG tag that was previously activ.
      */
-    CPVREpgInfoTagPtr GetEPGPrevious() const;
+    std::shared_ptr<CPVREpgInfoTag> GetEPGPrevious() const;
 
     /*!
      * @brief Get the EPG tag that will be next active on this channel.
@@ -375,7 +375,7 @@ namespace PVR
      *
      * @return The EPG tag that will be next active.
      */
-    CPVREpgInfoTagPtr GetEPGNext() const;
+    std::shared_ptr<CPVREpgInfoTag> GetEPGNext() const;
 
     /*!
      * @return Don't use an EPG for this channel if set to false.
diff --git a/xbmc/pvr/channels/PVRChannelGroup.cpp b/xbmc/pvr/channels/PVRChannelGroup.cpp
index 291b153d5f85..3aba9c739b0e 100644
--- a/xbmc/pvr/channels/PVRChannelGroup.cpp
+++ b/xbmc/pvr/channels/PVRChannelGroup.cpp
@@ -157,7 +157,7 @@ void CPVRChannelGroup::SetPath(const CPVRChannelsPath& path)
   }
 }
 
-bool CPVRChannelGroup::SetChannelNumber(const CPVRChannelPtr &channel, const CPVRChannelNumber &channelNumber)
+bool CPVRChannelGroup::SetChannelNumber(const std::shared_ptr<CPVRChannel> &channel, const CPVRChannelNumber &channelNumber)
 {
   bool bReturn(false);
   CSingleLock lock(m_critSection);
@@ -241,7 +241,7 @@ void CPVRChannelGroup::SortByChannelNumber(void)
 
 bool CPVRChannelGroup::UpdateClientPriorities()
 {
-  const CPVRClientsPtr clients = CServiceBroker::GetPVRManager().Clients();
+  const std::shared_ptr<CPVRClients> clients = CServiceBroker::GetPVRManager().Clients();
   bool bChanged = false;
 
   CSingleLock lock(m_critSection);
@@ -252,7 +252,7 @@ bool CPVRChannelGroup::UpdateClientPriorities()
 
     if (m_bUsingBackendChannelOrder)
     {
-      CPVRClientPtr client;
+      std::shared_ptr<CPVRClient> client;
       if (!clients->GetCreatedClient(member.channel->ClientID(), client))
         continue;
 
@@ -285,14 +285,14 @@ const PVRChannelGroupMember& CPVRChannelGroup::GetByUniqueID(const std::pair<int
   return it != m_members.end() ? it->second : CPVRChannelGroup::EmptyMember;
 }
 
-CPVRChannelPtr CPVRChannelGroup::GetByUniqueID(int iUniqueChannelId, int iClientID) const
+std::shared_ptr<CPVRChannel> CPVRChannelGroup::GetByUniqueID(int iUniqueChannelId, int iClientID) const
 {
   return GetByUniqueID(std::make_pair(iClientID, iUniqueChannelId)).channel;
 }
 
-CPVRChannelPtr CPVRChannelGroup::GetByChannelID(int iChannelID) const
+std::shared_ptr<CPVRChannel> CPVRChannelGroup::GetByChannelID(int iChannelID) const
 {
-  CPVRChannelPtr retval;
+  std::shared_ptr<CPVRChannel> retval;
   CSingleLock lock(m_critSection);
 
   for (PVR_CHANNEL_GROUP_MEMBERS::const_iterator it = m_members.begin(); !retval && it != m_members.end(); ++it)
@@ -304,9 +304,9 @@ CPVRChannelPtr CPVRChannelGroup::GetByChannelID(int iChannelID) const
   return retval;
 }
 
-CPVRChannelPtr CPVRChannelGroup::GetByChannelEpgID(int iEpgID) const
+std::shared_ptr<CPVRChannel> CPVRChannelGroup::GetByChannelEpgID(int iEpgID) const
 {
-  CPVRChannelPtr retval;
+  std::shared_ptr<CPVRChannel> retval;
   CSingleLock lock(m_critSection);
 
   for (PVR_CHANNEL_GROUP_MEMBERS::const_iterator it = m_members.begin(); !retval && it != m_members.end(); ++it)
@@ -322,7 +322,7 @@ std::shared_ptr<CPVRChannel> CPVRChannelGroup::GetLastPlayedChannel(int iCurrent
 {
   CSingleLock lock(m_critSection);
 
-  CPVRChannelPtr returnChannel, channel;
+  std::shared_ptr<CPVRChannel> returnChannel, channel;
   for (PVR_CHANNEL_GROUP_MEMBERS::const_iterator it = m_members.begin(); it != m_members.end(); ++it)
   {
     channel = it->second.channel;
@@ -460,7 +460,7 @@ void CPVRChannelGroup::GetChannelNumbers(std::vector<std::string>& channelNumber
 
 int CPVRChannelGroup::LoadFromDb(bool bCompress /* = false */)
 {
-  const CPVRDatabasePtr database(CServiceBroker::GetPVRManager().GetTVDatabase());
+  const std::shared_ptr<CPVRDatabase> database(CServiceBroker::GetPVRManager().GetTVDatabase());
   if (!database)
     return -1;
 
@@ -542,15 +542,15 @@ void CPVRChannelGroup::UpdateChannelNumbers()
   }
 }
 
-std::vector<CPVRChannelPtr> CPVRChannelGroup::RemoveDeletedChannels(const CPVRChannelGroup &channels)
+std::vector<std::shared_ptr<CPVRChannel>> CPVRChannelGroup::RemoveDeletedChannels(const CPVRChannelGroup &channels)
 {
-  std::vector<CPVRChannelPtr> removedChannels;
+  std::vector<std::shared_ptr<CPVRChannel>> removedChannels;
   CSingleLock lock(m_critSection);
 
   /* check for deleted channels */
   for (PVR_CHANNEL_GROUP_SORTED_MEMBERS::iterator it = m_sortedMembers.begin(); it != m_sortedMembers.end();)
   {
-    const CPVRChannelPtr channel = (*it).channel;
+    const std::shared_ptr<CPVRChannel> channel = (*it).channel;
     if (channels.m_members.find(channel->StorageId()) == channels.m_members.end())
     {
       /* channel was not found */
@@ -608,7 +608,7 @@ bool CPVRChannelGroup::UpdateGroupEntries(const CPVRChannelGroup& channels, std:
   return bReturn;
 }
 
-bool CPVRChannelGroup::RemoveFromGroup(const CPVRChannelPtr &channel)
+bool CPVRChannelGroup::RemoveFromGroup(const std::shared_ptr<CPVRChannel> &channel)
 {
   bool bReturn(false);
   CSingleLock lock(m_critSection);
@@ -672,7 +672,7 @@ bool CPVRChannelGroup::AddToGroup(const std::shared_ptr<CPVRChannel>& channel, c
   return bReturn;
 }
 
-bool CPVRChannelGroup::IsGroupMember(const CPVRChannelPtr &channel) const
+bool CPVRChannelGroup::IsGroupMember(const std::shared_ptr<CPVRChannel> &channel) const
 {
   CSingleLock lock(m_critSection);
   return m_members.find(channel->StorageId()) != m_members.end();
@@ -692,7 +692,7 @@ bool CPVRChannelGroup::IsGroupMember(int iChannelId) const
 bool CPVRChannelGroup::Persist(void)
 {
   bool bReturn(true);
-  const CPVRDatabasePtr database(CServiceBroker::GetPVRManager().GetTVDatabase());
+  const std::shared_ptr<CPVRDatabase> database(CServiceBroker::GetPVRManager().GetTVDatabase());
 
   CSingleLock lock(m_critSection);
 
@@ -871,8 +871,8 @@ std::vector<std::shared_ptr<CPVREpgInfoTag>> CPVRChannelGroup::GetEPGAll(bool bI
 {
   std::vector<std::shared_ptr<CPVREpgInfoTag>> tags;
 
-  CPVREpgInfoTagPtr epgTag;
-  CPVRChannelPtr channel;
+  std::shared_ptr<CPVREpgInfoTag> epgTag;
+  std::shared_ptr<CPVRChannel> channel;
   CSingleLock lock(m_critSection);
 
   for (PVR_CHANNEL_GROUP_SORTED_MEMBERS::const_iterator it = m_sortedMembers.begin(); it != m_sortedMembers.end(); ++it)
@@ -882,7 +882,7 @@ std::vector<std::shared_ptr<CPVREpgInfoTag>> CPVRChannelGroup::GetEPGAll(bool bI
     {
       bool bEmpty = true;
 
-      CPVREpgPtr epg = channel->GetEPG();
+      std::shared_ptr<CPVREpg> epg = channel->GetEPG();
       if (epg)
       {
         const std::vector<std::shared_ptr<CPVREpgInfoTag>> epgTags = epg->GetTags();
@@ -910,8 +910,8 @@ std::vector<std::shared_ptr<CPVREpgInfoTag>> CPVRChannelGroup::GetEPGAll(bool bI
 CDateTime CPVRChannelGroup::GetEPGDate(EpgDateType epgDateType) const
 {
   CDateTime date;
-  CPVREpgPtr epg;
-  CPVRChannelPtr channel;
+  std::shared_ptr<CPVREpg> epg;
+  std::shared_ptr<CPVRChannel> channel;
   CSingleLock lock(m_critSection);
 
   for (PVR_CHANNEL_GROUP_MEMBERS::const_iterator it = m_members.begin(); it != m_members.end(); ++it)
@@ -1002,7 +1002,7 @@ time_t CPVRChannelGroup::LastWatched(void) const
 
 bool CPVRChannelGroup::SetLastWatched(time_t iLastWatched)
 {
-  const CPVRDatabasePtr database(CServiceBroker::GetPVRManager().GetTVDatabase());
+  const std::shared_ptr<CPVRDatabase> database(CServiceBroker::GetPVRManager().GetTVDatabase());
 
   CSingleLock lock(m_critSection);
 
diff --git a/xbmc/pvr/channels/PVRChannelGroup.h b/xbmc/pvr/channels/PVRChannelGroup.h
index 7cdf96d8343c..03a966a4ddfd 100644
--- a/xbmc/pvr/channels/PVRChannelGroup.h
+++ b/xbmc/pvr/channels/PVRChannelGroup.h
@@ -42,7 +42,7 @@ namespace PVR
       , iClientPriority(_iClientPriority)
       , iOrder(_iOrder) {}
 
-    CPVRChannelPtr channel;
+    std::shared_ptr<CPVRChannel> channel;
     CPVRChannelNumber channelNumber; // the channel number this channel has in the group
     CPVRChannelNumber clientChannelNumber; // the client channel number this channel has in the group
     int iClientPriority = 0;
@@ -133,14 +133,14 @@ namespace PVR
      * @param channel The channel to change the channel number for.
      * @param channelNumber The new channel number.
      */
-    bool SetChannelNumber(const CPVRChannelPtr &channel, const CPVRChannelNumber &channelNumber);
+    bool SetChannelNumber(const std::shared_ptr<CPVRChannel> &channel, const CPVRChannelNumber &channelNumber);
 
     /*!
      * @brief Remove a channel from this container.
      * @param channel The channel to remove.
      * @return True if the channel was found and removed, false otherwise.
      */
-    virtual bool RemoveFromGroup(const CPVRChannelPtr &channel);
+    virtual bool RemoveFromGroup(const std::shared_ptr<CPVRChannel> &channel);
 
     /*!
      * @brief Add a channel to this container.
@@ -170,7 +170,7 @@ namespace PVR
      * @param channel The channel to find.
      * @return True if the channel was found, false otherwise.
      */
-    virtual bool IsGroupMember(const CPVRChannelPtr &channel) const;
+    virtual bool IsGroupMember(const std::shared_ptr<CPVRChannel> &channel) const;
 
     /*!
      * @brief Check whether a channel is in this container.
@@ -274,7 +274,7 @@ namespace PVR
      * @param iEpgID The channel EPG ID.
      * @return The channel or NULL if it wasn't found.
      */
-    CPVRChannelPtr GetByChannelEpgID(int iEpgID) const;
+    std::shared_ptr<CPVRChannel> GetByChannelEpgID(int iEpgID) const;
 
     /*!
      * @brief Get the channel that was played last.
@@ -295,7 +295,7 @@ namespace PVR
      * @param channel The channel to get the channel number for.
      * @return The channel number in this group.
      */
-    CPVRChannelNumber GetChannelNumber(const CPVRChannelPtr &channel) const;
+    CPVRChannelNumber GetChannelNumber(const std::shared_ptr<CPVRChannel> &channel) const;
 
     /*!
      * @brief Get the client channel number in this group of the given channel.
@@ -323,7 +323,7 @@ namespace PVR
      * @param iChannelID The channel ID.
      * @return The channel or NULL if it wasn't found.
      */
-    CPVRChannelPtr GetByChannelID(int iChannelID) const;
+    std::shared_ptr<CPVRChannel> GetByChannelID(int iChannelID) const;
 
     enum class Include
     {
@@ -427,7 +427,7 @@ namespace PVR
      * @param iClientID The ID of the client.
      * @return The channel or NULL if it wasn't found.
      */
-    CPVRChannelPtr GetByUniqueID(int iUniqueChannelId, int iClientID) const;
+    std::shared_ptr<CPVRChannel> GetByUniqueID(int iUniqueChannelId, int iClientID) const;
 
     /*!
      * @brief Get a channel group member given its storage id.
@@ -511,7 +511,7 @@ namespace PVR
      * @param channels The new channels to use for this group.
      * @return The removed channels.
      */
-    virtual std::vector<CPVRChannelPtr> RemoveDeletedChannels(const CPVRChannelGroup &channels);
+    virtual std::vector<std::shared_ptr<CPVRChannel>> RemoveDeletedChannels(const CPVRChannelGroup &channels);
 
     /*!
      * @brief Clear this channel list.
diff --git a/xbmc/pvr/channels/PVRChannelGroupInternal.cpp b/xbmc/pvr/channels/PVRChannelGroupInternal.cpp
index d20287354f49..853ec2dd2843 100644
--- a/xbmc/pvr/channels/PVRChannelGroupInternal.cpp
+++ b/xbmc/pvr/channels/PVRChannelGroupInternal.cpp
@@ -156,13 +156,13 @@ bool CPVRChannelGroupInternal::AddToGroup(const std::shared_ptr<CPVRChannel>& ch
   return bReturn;
 }
 
-bool CPVRChannelGroupInternal::RemoveFromGroup(const CPVRChannelPtr &channel)
+bool CPVRChannelGroupInternal::RemoveFromGroup(const std::shared_ptr<CPVRChannel> &channel)
 {
   if (!IsGroupMember(channel))
     return false;
 
   /* check if this channel is currently playing if we are hiding it */
-  CPVRChannelPtr currentChannel(CServiceBroker::GetPVRManager().GetPlayingChannel());
+  std::shared_ptr<CPVRChannel> currentChannel(CServiceBroker::GetPVRManager().GetPlayingChannel());
   if (currentChannel && currentChannel == channel)
   {
     HELPERS::ShowOKDialogText(CVariant{19098}, CVariant{19102});
@@ -194,7 +194,7 @@ bool CPVRChannelGroupInternal::RemoveFromGroup(const CPVRChannelPtr &channel)
 
 int CPVRChannelGroupInternal::LoadFromDb(bool bCompress /* = false */)
 {
-  const CPVRDatabasePtr database(CServiceBroker::GetPVRManager().GetTVDatabase());
+  const std::shared_ptr<CPVRDatabase> database(CServiceBroker::GetPVRManager().GetTVDatabase());
   if (!database)
     return -1;
 
@@ -214,7 +214,7 @@ bool CPVRChannelGroupInternal::LoadFromClients(void)
   return CServiceBroker::GetPVRManager().Clients()->GetChannels(this, m_failedClientsForChannels) == PVR_ERROR_NO_ERROR;
 }
 
-bool CPVRChannelGroupInternal::IsGroupMember(const CPVRChannelPtr &channel) const
+bool CPVRChannelGroupInternal::IsGroupMember(const std::shared_ptr<CPVRChannel> &channel) const
 {
   return !channel->IsHidden();
 }
@@ -257,9 +257,9 @@ bool CPVRChannelGroupInternal::AddAndUpdateChannels(const CPVRChannelGroup &chan
   return bReturn;
 }
 
-std::vector<CPVRChannelPtr> CPVRChannelGroupInternal::RemoveDeletedChannels(const CPVRChannelGroup &channels)
+std::vector<std::shared_ptr<CPVRChannel>> CPVRChannelGroupInternal::RemoveDeletedChannels(const CPVRChannelGroup &channels)
 {
-  std::vector<CPVRChannelPtr> removedChannels = CPVRChannelGroup::RemoveDeletedChannels(channels);
+  std::vector<std::shared_ptr<CPVRChannel>> removedChannels = CPVRChannelGroup::RemoveDeletedChannels(channels);
 
   if (!removedChannels.empty())
   {
diff --git a/xbmc/pvr/channels/PVRChannelGroupInternal.h b/xbmc/pvr/channels/PVRChannelGroupInternal.h
index fce4294d9e0d..48770508c00c 100644
--- a/xbmc/pvr/channels/PVRChannelGroupInternal.h
+++ b/xbmc/pvr/channels/PVRChannelGroupInternal.h
@@ -51,7 +51,7 @@ namespace PVR
     /*!
      * @see CPVRChannelGroup::IsGroupMember
      */
-    bool IsGroupMember(const CPVRChannelPtr &channel) const override;
+    bool IsGroupMember(const std::shared_ptr<CPVRChannel> &channel) const override;
 
     /*!
      * @see CPVRChannelGroup::AddToGroup
@@ -61,7 +61,7 @@ namespace PVR
     /*!
      * @see CPVRChannelGroup::RemoveFromGroup
      */
-    bool RemoveFromGroup(const CPVRChannelPtr &channel) override;
+    bool RemoveFromGroup(const std::shared_ptr<CPVRChannel> &channel) override;
 
     /*!
      * @brief Check whether the group name is still correct after the language setting changed.
@@ -120,7 +120,7 @@ namespace PVR
      * @param channels The new channels to use for this group.
      * @return The removed channels.
      */
-    std::vector<CPVRChannelPtr> RemoveDeletedChannels(const CPVRChannelGroup &channels) override;
+    std::vector<std::shared_ptr<CPVRChannel>> RemoveDeletedChannels(const CPVRChannelGroup &channels) override;
 
     /*!
      * @brief Refresh the channel list from the clients.
diff --git a/xbmc/pvr/channels/PVRChannelGroups.cpp b/xbmc/pvr/channels/PVRChannelGroups.cpp
index b492dfe3a62a..e14e5875afa9 100644
--- a/xbmc/pvr/channels/PVRChannelGroups.cpp
+++ b/xbmc/pvr/channels/PVRChannelGroups.cpp
@@ -58,7 +58,7 @@ bool CPVRChannelGroups::Update(const CPVRChannelGroup &group, bool bUpdateFromCl
   if (group.GroupName().empty() && group.GroupID() <= 0)
     return true;
 
-  CPVRChannelGroupPtr updateGroup;
+  std::shared_ptr<CPVRChannelGroup> updateGroup;
   {
     CSingleLock lock(m_critSection);
 
@@ -110,14 +110,14 @@ void CPVRChannelGroups::SortGroups()
   CSingleLock lock(m_critSection);
 
   // check if one of the group holds a valid sort position
-  std::vector<CPVRChannelGroupPtr>::iterator it = std::find_if(m_groups.begin(), m_groups.end(), [](const CPVRChannelGroupPtr &group) {
+  std::vector<std::shared_ptr<CPVRChannelGroup>>::iterator it = std::find_if(m_groups.begin(), m_groups.end(), [](const std::shared_ptr<CPVRChannelGroup> &group) {
     return (group->GetPosition() > 0);
   });
 
   // sort by position if we found a valid sort position
   if (it != m_groups.end())
   {
-    std::sort(m_groups.begin(), m_groups.end(), [](const CPVRChannelGroupPtr &group1, const CPVRChannelGroupPtr &group2) {
+    std::sort(m_groups.begin(), m_groups.end(), [](const std::shared_ptr<CPVRChannelGroup> &group1, const std::shared_ptr<CPVRChannelGroup> &group2) {
       return group1->GetPosition() < group2->GetPosition();
     });
   }
@@ -136,25 +136,25 @@ std::shared_ptr<CPVRChannel> CPVRChannelGroups::GetByPath(const CPVRChannelsPath
   return {};
 }
 
-CPVRChannelGroupPtr CPVRChannelGroups::GetById(int iGroupId) const
+std::shared_ptr<CPVRChannelGroup> CPVRChannelGroups::GetById(int iGroupId) const
 {
   CSingleLock lock(m_critSection);
-  for (std::vector<CPVRChannelGroupPtr>::const_iterator it = m_groups.begin(); it != m_groups.end(); ++it)
+  for (std::vector<std::shared_ptr<CPVRChannelGroup>>::const_iterator it = m_groups.begin(); it != m_groups.end(); ++it)
   {
     if ((*it)->GroupID() == iGroupId)
       return *it;
   }
 
-  CPVRChannelGroupPtr empty;
+  std::shared_ptr<CPVRChannelGroup> empty;
   return empty;
 }
 
-std::vector<CPVRChannelGroupPtr> CPVRChannelGroups::GetGroupsByChannel(const CPVRChannelPtr &channel, bool bExcludeHidden /* = false */) const
+std::vector<std::shared_ptr<CPVRChannelGroup>> CPVRChannelGroups::GetGroupsByChannel(const std::shared_ptr<CPVRChannel> &channel, bool bExcludeHidden /* = false */) const
 {
-  std::vector<CPVRChannelGroupPtr> groups;
+  std::vector<std::shared_ptr<CPVRChannelGroup>> groups;
 
   CSingleLock lock(m_critSection);
-  for (CPVRChannelGroupPtr group : m_groups)
+  for (std::shared_ptr<CPVRChannelGroup> group : m_groups)
   {
     if ((!bExcludeHidden || !group->IsHidden()) && group->IsGroupMember(channel))
       groups.push_back(group);
@@ -177,16 +177,16 @@ std::shared_ptr<CPVRChannelGroup> CPVRChannelGroups::GetGroupByPath(const std::s
   return {};
 }
 
-CPVRChannelGroupPtr CPVRChannelGroups::GetByName(const std::string &strName) const
+std::shared_ptr<CPVRChannelGroup> CPVRChannelGroups::GetByName(const std::string &strName) const
 {
   CSingleLock lock(m_critSection);
-  for (std::vector<CPVRChannelGroupPtr>::const_iterator it = m_groups.begin(); it != m_groups.end(); ++it)
+  for (std::vector<std::shared_ptr<CPVRChannelGroup>>::const_iterator it = m_groups.begin(); it != m_groups.end(); ++it)
   {
     if ((*it)->GroupName() == strName)
       return *it;
   }
 
-  CPVRChannelGroupPtr empty;
+  std::shared_ptr<CPVRChannelGroup> empty;
   return empty;
 }
 
@@ -199,10 +199,10 @@ void CPVRChannelGroups::RemoveFromAllGroups(const std::vector<std::shared_ptr<CP
   }
 }
 
-void CPVRChannelGroups::RemoveFromAllGroups(const CPVRChannelPtr &channel)
+void CPVRChannelGroups::RemoveFromAllGroups(const std::shared_ptr<CPVRChannel> &channel)
 {
   CSingleLock lock(m_critSection);
-  const CPVRChannelGroupPtr allGroup = GetGroupAll();
+  const std::shared_ptr<CPVRChannelGroup> allGroup = GetGroupAll();
 
   for (const auto& group : m_groups)
   {
@@ -222,7 +222,7 @@ bool CPVRChannelGroups::Update(bool bChannelsOnly /* = false */)
     GetGroupsFromClients();
 
   // sync channels in groups
-  std::vector<CPVRChannelGroupPtr> groups;
+  std::vector<std::shared_ptr<CPVRChannelGroup>> groups;
   {
     CSingleLock lock(m_critSection);
     groups = m_groups;
@@ -265,10 +265,10 @@ bool CPVRChannelGroups::LoadUserDefinedChannelGroups(void)
   else
     CLog::LogFC(LOGDEBUG, LOGPVR, "'sync channelgroups' is disabled; skipping groups from clients");
 
-  std::vector<CPVRChannelGroupPtr> emptyGroups;
+  std::vector<std::shared_ptr<CPVRChannelGroup>> emptyGroups;
 
   // load group members
-  for (std::vector<CPVRChannelGroupPtr>::iterator it = m_groups.begin(); it != m_groups.end(); ++it)
+  for (std::vector<std::shared_ptr<CPVRChannelGroup>>::iterator it = m_groups.begin(); it != m_groups.end(); ++it)
   {
     // load only user defined groups, as internal group is already loaded
     if (!(*it)->IsInternalGroup())
@@ -288,7 +288,7 @@ bool CPVRChannelGroups::LoadUserDefinedChannelGroups(void)
     }
   }
 
-  for (std::vector<CPVRChannelGroupPtr>::iterator it = emptyGroups.begin(); it != emptyGroups.end(); ++it)
+  for (std::vector<std::shared_ptr<CPVRChannelGroup>>::iterator it = emptyGroups.begin(); it != emptyGroups.end(); ++it)
   {
     CLog::LogFC(LOGDEBUG, LOGPVR, "Deleting empty channel group '%s'", (*it)->GroupName().c_str());
     DeleteGroup(*(*it));
@@ -300,7 +300,7 @@ bool CPVRChannelGroups::LoadUserDefinedChannelGroups(void)
 
 bool CPVRChannelGroups::Load(void)
 {
-  const CPVRDatabasePtr database(CServiceBroker::GetPVRManager().GetTVDatabase());
+  const std::shared_ptr<CPVRDatabase> database(CServiceBroker::GetPVRManager().GetTVDatabase());
   if (!database)
     return false;
 
@@ -312,7 +312,7 @@ bool CPVRChannelGroups::Load(void)
   CLog::LogFC(LOGDEBUG, LOGPVR, "Loading all %s channel groups", m_bRadio ? "radio" : "TV");
 
   // create the internal channel group
-  CPVRChannelGroupPtr internalGroup = CPVRChannelGroupPtr(new CPVRChannelGroupInternal(m_bRadio));
+  std::shared_ptr<CPVRChannelGroup> internalGroup = std::shared_ptr<CPVRChannelGroup>(new CPVRChannelGroupInternal(m_bRadio));
   m_groups.push_back(internalGroup);
 
   // load groups from the database
@@ -337,7 +337,7 @@ bool CPVRChannelGroups::Load(void)
   }
 
   // set the last played group as selected group at startup
-  CPVRChannelGroupPtr lastPlayedGroup = GetLastPlayedGroup();
+  std::shared_ptr<CPVRChannelGroup> lastPlayedGroup = GetLastPlayedGroup();
   SetSelectedGroup(lastPlayedGroup ? lastPlayedGroup : internalGroup);
 
   CLog::LogFC(LOGDEBUG, LOGPVR, "%d %s channel groups loaded", m_groups.size(), m_bRadio ? "radio" : "TV");
@@ -352,36 +352,36 @@ bool CPVRChannelGroups::PersistAll(void)
   CLog::LogFC(LOGDEBUG, LOGPVR, "Persisting all channel group changes");
 
   CSingleLock lock(m_critSection);
-  for (std::vector<CPVRChannelGroupPtr>::iterator it = m_groups.begin(); it != m_groups.end(); ++it)
+  for (std::vector<std::shared_ptr<CPVRChannelGroup>>::iterator it = m_groups.begin(); it != m_groups.end(); ++it)
     bReturn &= (*it)->Persist();
 
   return bReturn;
 }
 
-CPVRChannelGroupPtr CPVRChannelGroups::GetGroupAll(void) const
+std::shared_ptr<CPVRChannelGroup> CPVRChannelGroups::GetGroupAll(void) const
 {
   CSingleLock lock(m_critSection);
   if (!m_groups.empty())
     return m_groups.front();
 
-  return CPVRChannelGroupPtr();
+  return std::shared_ptr<CPVRChannelGroup>();
 }
 
-CPVRChannelGroupPtr CPVRChannelGroups::GetLastGroup(void) const
+std::shared_ptr<CPVRChannelGroup> CPVRChannelGroups::GetLastGroup(void) const
 {
   CSingleLock lock(m_critSection);
   if (!m_groups.empty())
     return m_groups.back();
 
-  return CPVRChannelGroupPtr();
+  return std::shared_ptr<CPVRChannelGroup>();
 }
 
-CPVRChannelGroupPtr CPVRChannelGroups::GetLastPlayedGroup(int iChannelID /* = -1 */) const
+std::shared_ptr<CPVRChannelGroup> CPVRChannelGroups::GetLastPlayedGroup(int iChannelID /* = -1 */) const
 {
-  CPVRChannelGroupPtr group;
+  std::shared_ptr<CPVRChannelGroup> group;
 
   CSingleLock lock(m_critSection);
-  for (std::vector<CPVRChannelGroupPtr>::const_iterator it = m_groups.begin(); it != m_groups.end(); ++it)
+  for (std::vector<std::shared_ptr<CPVRChannelGroup>>::const_iterator it = m_groups.begin(); it != m_groups.end(); ++it)
   {
     if ((*it)->LastWatched() > 0 && (!group || (*it)->LastWatched() > group->LastWatched()) &&
         (iChannelID == -1 || (iChannelID >= 0 && (*it)->IsGroupMember(iChannelID))) && !(*it)->IsHidden())
@@ -391,12 +391,12 @@ CPVRChannelGroupPtr CPVRChannelGroups::GetLastPlayedGroup(int iChannelID /* = -1
   return group;
 }
 
-std::vector<CPVRChannelGroupPtr> CPVRChannelGroups::GetMembers(bool bExcludeHidden /* = false */) const
+std::vector<std::shared_ptr<CPVRChannelGroup>> CPVRChannelGroups::GetMembers(bool bExcludeHidden /* = false */) const
 {
-  std::vector<CPVRChannelGroupPtr> groups;
+  std::vector<std::shared_ptr<CPVRChannelGroup>> groups;
 
   CSingleLock lock(m_critSection);
-  for (CPVRChannelGroupPtr group : m_groups)
+  for (std::shared_ptr<CPVRChannelGroup> group : m_groups)
   {
     if (!bExcludeHidden || !group->IsHidden())
       groups.push_back(group);
@@ -404,13 +404,13 @@ std::vector<CPVRChannelGroupPtr> CPVRChannelGroups::GetMembers(bool bExcludeHidd
   return groups;
 }
 
-CPVRChannelGroupPtr CPVRChannelGroups::GetPreviousGroup(const CPVRChannelGroup &group) const
+std::shared_ptr<CPVRChannelGroup> CPVRChannelGroups::GetPreviousGroup(const CPVRChannelGroup &group) const
 {
   bool bReturnNext(false);
 
   {
     CSingleLock lock(m_critSection);
-    for (std::vector<CPVRChannelGroupPtr>::const_reverse_iterator it = m_groups.rbegin(); it != m_groups.rend(); ++it)
+    for (std::vector<std::shared_ptr<CPVRChannelGroup>>::const_reverse_iterator it = m_groups.rbegin(); it != m_groups.rend(); ++it)
     {
       // return this entry
       if (bReturnNext && !(*it)->IsHidden())
@@ -422,7 +422,7 @@ CPVRChannelGroupPtr CPVRChannelGroups::GetPreviousGroup(const CPVRChannelGroup &
     }
 
     // no match return last visible group
-    for (std::vector<CPVRChannelGroupPtr>::const_reverse_iterator it = m_groups.rbegin(); it != m_groups.rend(); ++it)
+    for (std::vector<std::shared_ptr<CPVRChannelGroup>>::const_reverse_iterator it = m_groups.rbegin(); it != m_groups.rend(); ++it)
     {
       if (!(*it)->IsHidden())
         return *it;
@@ -433,13 +433,13 @@ CPVRChannelGroupPtr CPVRChannelGroups::GetPreviousGroup(const CPVRChannelGroup &
   return GetLastGroup();
 }
 
-CPVRChannelGroupPtr CPVRChannelGroups::GetNextGroup(const CPVRChannelGroup &group) const
+std::shared_ptr<CPVRChannelGroup> CPVRChannelGroups::GetNextGroup(const CPVRChannelGroup &group) const
 {
   bool bReturnNext(false);
 
   {
     CSingleLock lock(m_critSection);
-    for (std::vector<CPVRChannelGroupPtr>::const_iterator it = m_groups.begin(); it != m_groups.end(); ++it)
+    for (std::vector<std::shared_ptr<CPVRChannelGroup>>::const_iterator it = m_groups.begin(); it != m_groups.end(); ++it)
     {
       // return this entry
       if (bReturnNext && !(*it)->IsHidden())
@@ -451,7 +451,7 @@ CPVRChannelGroupPtr CPVRChannelGroups::GetNextGroup(const CPVRChannelGroup &grou
     }
 
     // no match return first visible group
-    for (std::vector<CPVRChannelGroupPtr>::const_iterator it = m_groups.begin(); it != m_groups.end(); ++it)
+    for (std::vector<std::shared_ptr<CPVRChannelGroup>>::const_iterator it = m_groups.begin(); it != m_groups.end(); ++it)
     {
       if (!(*it)->IsHidden())
         return *it;
@@ -462,7 +462,7 @@ CPVRChannelGroupPtr CPVRChannelGroups::GetNextGroup(const CPVRChannelGroup &grou
   return GetFirstGroup();
 }
 
-CPVRChannelGroupPtr CPVRChannelGroups::GetSelectedGroup(void) const
+std::shared_ptr<CPVRChannelGroup> CPVRChannelGroups::GetSelectedGroup(void) const
 {
   CSingleLock lock(m_critSection);
   return m_selectedGroup;
@@ -482,7 +482,7 @@ void CPVRChannelGroups::SetSelectedGroup(const std::shared_ptr<CPVRChannelGroup>
 bool CPVRChannelGroups::AddGroup(const std::string &strName)
 {
   bool bPersist(false);
-  CPVRChannelGroupPtr group;
+  std::shared_ptr<CPVRChannelGroup> group;
 
   {
     CSingleLock lock(m_critSection);
@@ -513,17 +513,17 @@ bool CPVRChannelGroups::DeleteGroup(const CPVRChannelGroup &group)
   }
 
   bool bFound(false);
-  CPVRChannelGroupPtr playingGroup;
+  std::shared_ptr<CPVRChannelGroup> playingGroup;
 
   // delete the group in this container
   {
     CSingleLock lock(m_critSection);
-    for (std::vector<CPVRChannelGroupPtr>::iterator it = m_groups.begin(); !bFound && it != m_groups.end();)
+    for (std::vector<std::shared_ptr<CPVRChannelGroup>>::iterator it = m_groups.begin(); !bFound && it != m_groups.end();)
     {
       if (*(*it) == group || (group.GroupID() > 0 && (*it)->GroupID() == group.GroupID()))
       {
         // update the selected group in the gui if it's deleted
-        CPVRChannelGroupPtr selectedGroup = GetSelectedGroup();
+        std::shared_ptr<CPVRChannelGroup> selectedGroup = GetSelectedGroup();
         if (selectedGroup && *selectedGroup == group)
           playingGroup = GetGroupAll();
 
@@ -543,7 +543,7 @@ bool CPVRChannelGroups::DeleteGroup(const CPVRChannelGroup &group)
   if (group.GroupID() > 0)
   {
     // delete the group from the database
-    const CPVRDatabasePtr database(CServiceBroker::GetPVRManager().GetTVDatabase());
+    const std::shared_ptr<CPVRDatabase> database(CServiceBroker::GetPVRManager().GetTVDatabase());
     return database ? database->Delete(group) : false;
   }
   return bFound;
@@ -554,7 +554,7 @@ bool CPVRChannelGroups::CreateChannelEpgs(void)
   bool bReturn(false);
 
   CSingleLock lock(m_critSection);
-  for (std::vector<CPVRChannelGroupPtr>::iterator it = m_groups.begin(); it != m_groups.end(); ++it)
+  for (std::vector<std::shared_ptr<CPVRChannelGroup>>::iterator it = m_groups.begin(); it != m_groups.end(); ++it)
   {
     /* Only create EPGs for the internal groups */
     if ((*it)->IsInternalGroup())
diff --git a/xbmc/pvr/channels/PVRChannelGroups.h b/xbmc/pvr/channels/PVRChannelGroups.h
index 5828f155289e..e82c811ce7f1 100644
--- a/xbmc/pvr/channels/PVRChannelGroups.h
+++ b/xbmc/pvr/channels/PVRChannelGroups.h
@@ -76,7 +76,7 @@ namespace PVR
      * @param iGroupId The ID of the group.
      * @return The group or NULL if it wasn't found.
      */
-    CPVRChannelGroupPtr GetById(int iGroupId) const;
+    std::shared_ptr<CPVRChannelGroup> GetById(int iGroupId) const;
 
     /*!
      * @brief Get all groups the given channel is a member.
@@ -84,7 +84,7 @@ namespace PVR
      * @param bExcludeHidden Whenever to exclude hidden channel groups.
      * @return A list of groups the channel is a member.
      */
-    std::vector<CPVRChannelGroupPtr> GetGroupsByChannel(const CPVRChannelPtr &channel, bool bExcludeHidden = false) const;
+    std::vector<std::shared_ptr<CPVRChannelGroup>> GetGroupsByChannel(const std::shared_ptr<CPVRChannel> &channel, bool bExcludeHidden = false) const;
 
     /*!
      * @brief Get a channel group given its path
@@ -98,30 +98,30 @@ namespace PVR
      * @param strName The name.
      * @return The group or NULL if it wasn't found.
      */
-    CPVRChannelGroupPtr GetByName(const std::string &strName) const;
+    std::shared_ptr<CPVRChannelGroup> GetByName(const std::string &strName) const;
 
     /*!
      * @brief Get the group that contains all channels.
      * @return The group that contains all channels.
      */
-    CPVRChannelGroupPtr GetGroupAll(void) const;
+    std::shared_ptr<CPVRChannelGroup> GetGroupAll(void) const;
 
     /*!
      * @return The first group in this container, which always is the group with all channels.
      */
-    CPVRChannelGroupPtr GetFirstGroup(void) const { return GetGroupAll(); }
+    std::shared_ptr<CPVRChannelGroup> GetFirstGroup(void) const { return GetGroupAll(); }
 
     /*!
      * @return The last group in this container.
      */
-    CPVRChannelGroupPtr GetLastGroup(void) const;
+    std::shared_ptr<CPVRChannelGroup> GetLastGroup(void) const;
 
     /*!
      * @brief The group that was played last and optionally contains the given channel.
      * @param iChannelID The channel ID
      * @return The last watched group.
      */
-    CPVRChannelGroupPtr GetLastPlayedGroup(int iChannelID = -1) const;
+    std::shared_ptr<CPVRChannelGroup> GetLastPlayedGroup(int iChannelID = -1) const;
 
     /*!
      * @brief Get the list of groups.
@@ -129,27 +129,27 @@ namespace PVR
      * @param bExcludeHidden Whenever to exclude hidden channel groups.
      * @return The amount of items that were added.
      */
-    std::vector<CPVRChannelGroupPtr> GetMembers(bool bExcludeHidden = false) const;
+    std::vector<std::shared_ptr<CPVRChannelGroup>> GetMembers(bool bExcludeHidden = false) const;
 
     /*!
      * @brief Get the previous group in this container.
      * @param group The current group.
      * @return The previous group or the group containing all channels if it wasn't found.
      */
-    CPVRChannelGroupPtr GetPreviousGroup(const CPVRChannelGroup &group) const;
+    std::shared_ptr<CPVRChannelGroup> GetPreviousGroup(const CPVRChannelGroup &group) const;
 
     /*!
      * @brief Get the next group in this container.
      * @param group The current group.
      * @return The next group or the group containing all channels if it wasn't found.
      */
-    CPVRChannelGroupPtr GetNextGroup(const CPVRChannelGroup &group) const;
+    std::shared_ptr<CPVRChannelGroup> GetNextGroup(const CPVRChannelGroup &group) const;
 
     /*!
      * @brief Get the group that is currently selected in the UI.
      * @return The selected group.
      */
-    CPVRChannelGroupPtr GetSelectedGroup(void) const;
+    std::shared_ptr<CPVRChannelGroup> GetSelectedGroup(void) const;
 
     /*!
      * @brief Change the selected group.
@@ -213,8 +213,8 @@ namespace PVR
     void RemoveFromAllGroups(const std::shared_ptr<CPVRChannel>& channel);
 
     bool                             m_bRadio;         /*!< true if this is a container for radio channels, false if it is for tv channels */
-    CPVRChannelGroupPtr              m_selectedGroup;  /*!< the group that's currently selected in the UI */
-    std::vector<CPVRChannelGroupPtr> m_groups;         /*!< the groups in this container */
+    std::shared_ptr<CPVRChannelGroup>              m_selectedGroup;  /*!< the group that's currently selected in the UI */
+    std::vector<std::shared_ptr<CPVRChannelGroup>> m_groups;         /*!< the groups in this container */
     mutable CCriticalSection m_critSection;
     std::vector<int> m_failedClientsForChannelGroups;
   };
diff --git a/xbmc/pvr/channels/PVRChannelGroupsContainer.cpp b/xbmc/pvr/channels/PVRChannelGroupsContainer.cpp
index cf1701afa3fe..4ee8082ec421 100644
--- a/xbmc/pvr/channels/PVRChannelGroupsContainer.cpp
+++ b/xbmc/pvr/channels/PVRChannelGroupsContainer.cpp
@@ -73,32 +73,32 @@ CPVRChannelGroups *CPVRChannelGroupsContainer::Get(bool bRadio) const
   return bRadio ? m_groupsRadio : m_groupsTV;
 }
 
-CPVRChannelGroupPtr CPVRChannelGroupsContainer::GetGroupAll(bool bRadio) const
+std::shared_ptr<CPVRChannelGroup> CPVRChannelGroupsContainer::GetGroupAll(bool bRadio) const
 {
   return Get(bRadio)->GetGroupAll();
 }
 
-CPVRChannelGroupPtr CPVRChannelGroupsContainer::GetByIdFromAll(int iGroupId) const
+std::shared_ptr<CPVRChannelGroup> CPVRChannelGroupsContainer::GetByIdFromAll(int iGroupId) const
 {
-  CPVRChannelGroupPtr group = m_groupsTV->GetById(iGroupId);
+  std::shared_ptr<CPVRChannelGroup> group = m_groupsTV->GetById(iGroupId);
   if (!group)
     group = m_groupsRadio->GetById(iGroupId);
 
   return group;
 }
 
-CPVRChannelPtr CPVRChannelGroupsContainer::GetChannelById(int iChannelId) const
+std::shared_ptr<CPVRChannel> CPVRChannelGroupsContainer::GetChannelById(int iChannelId) const
 {
-  CPVRChannelPtr channel = m_groupsTV->GetGroupAll()->GetByChannelID(iChannelId);
+  std::shared_ptr<CPVRChannel> channel = m_groupsTV->GetGroupAll()->GetByChannelID(iChannelId);
   if (!channel)
     channel = m_groupsRadio->GetGroupAll()->GetByChannelID(iChannelId);
 
   return channel;
 }
 
-CPVRChannelPtr CPVRChannelGroupsContainer::GetChannelByEpgId(int iEpgId) const
+std::shared_ptr<CPVRChannel> CPVRChannelGroupsContainer::GetChannelByEpgId(int iEpgId) const
 {
-  CPVRChannelPtr channel = m_groupsTV->GetGroupAll()->GetByChannelEpgID(iEpgId);
+  std::shared_ptr<CPVRChannel> channel = m_groupsTV->GetGroupAll()->GetByChannelEpgID(iEpgId);
   if (!channel)
     channel = m_groupsRadio->GetGroupAll()->GetByChannelEpgID(iEpgId);
 
@@ -122,15 +122,15 @@ std::shared_ptr<CPVRChannel> CPVRChannelGroupsContainer::GetByPath(const std::st
   return {};
 }
 
-CPVRChannelGroupPtr CPVRChannelGroupsContainer::GetSelectedGroup(bool bRadio) const
+std::shared_ptr<CPVRChannelGroup> CPVRChannelGroupsContainer::GetSelectedGroup(bool bRadio) const
 {
   return Get(bRadio)->GetSelectedGroup();
 }
 
-CPVRChannelPtr CPVRChannelGroupsContainer::GetByUniqueID(int iUniqueChannelId, int iClientID) const
+std::shared_ptr<CPVRChannel> CPVRChannelGroupsContainer::GetByUniqueID(int iUniqueChannelId, int iClientID) const
 {
-  CPVRChannelPtr channel;
-  CPVRChannelGroupPtr channelgroup = GetGroupAllTV();
+  std::shared_ptr<CPVRChannel> channel;
+  std::shared_ptr<CPVRChannelGroup> channelgroup = GetGroupAllTV();
   if (channelgroup)
     channel = channelgroup->GetByUniqueID(iUniqueChannelId, iClientID);
 
@@ -154,10 +154,10 @@ std::shared_ptr<CPVRChannel> CPVRChannelGroupsContainer::GetLastPlayedChannel()
   return channelTV;
 }
 
-CPVRChannelGroupPtr CPVRChannelGroupsContainer::GetLastPlayedGroup(int iChannelID /* = -1 */) const
+std::shared_ptr<CPVRChannelGroup> CPVRChannelGroupsContainer::GetLastPlayedGroup(int iChannelID /* = -1 */) const
 {
-  CPVRChannelGroupPtr groupTV = m_groupsTV->GetLastPlayedGroup(iChannelID);
-  CPVRChannelGroupPtr groupRadio = m_groupsRadio->GetLastPlayedGroup(iChannelID);
+  std::shared_ptr<CPVRChannelGroup> groupTV = m_groupsTV->GetLastPlayedGroup(iChannelID);
+  std::shared_ptr<CPVRChannelGroup> groupRadio = m_groupsRadio->GetLastPlayedGroup(iChannelID);
 
   if (!groupTV || (groupRadio && groupTV->LastWatched() < groupRadio->LastWatched()))
     return groupRadio;
@@ -170,13 +170,13 @@ bool CPVRChannelGroupsContainer::CreateChannelEpgs(void)
   return m_groupsTV->CreateChannelEpgs() && m_groupsRadio->CreateChannelEpgs();
 }
 
-CPVRChannelGroupPtr CPVRChannelGroupsContainer::GetPreviousPlayedGroup(void)
+std::shared_ptr<CPVRChannelGroup> CPVRChannelGroupsContainer::GetPreviousPlayedGroup(void)
 {
   CSingleLock lock(m_critSection);
   return m_lastPlayedGroups[0];
 }
 
-void CPVRChannelGroupsContainer::SetLastPlayedGroup(const CPVRChannelGroupPtr &group)
+void CPVRChannelGroupsContainer::SetLastPlayedGroup(const std::shared_ptr<CPVRChannelGroup> &group)
 {
   CSingleLock lock(m_critSection);
   m_lastPlayedGroups[0] = m_lastPlayedGroups[1];
diff --git a/xbmc/pvr/channels/PVRChannelGroupsContainer.h b/xbmc/pvr/channels/PVRChannelGroupsContainer.h
index fc50a2603766..23506423c60e 100644
--- a/xbmc/pvr/channels/PVRChannelGroupsContainer.h
+++ b/xbmc/pvr/channels/PVRChannelGroupsContainer.h
@@ -11,6 +11,8 @@
 #include "pvr/PVRTypes.h"
 #include "threads/CriticalSection.h"
 
+#include <memory>
+
 namespace PVR
 {
   class CPVRChannel;
@@ -77,41 +79,41 @@ namespace PVR
      * @brief Get the group containing all TV channels.
      * @return The group containing all TV channels.
      */
-    CPVRChannelGroupPtr GetGroupAllTV(void)  const{ return GetGroupAll(false); }
+    std::shared_ptr<CPVRChannelGroup> GetGroupAllTV(void)  const{ return GetGroupAll(false); }
 
     /*!
      * @brief Get the group containing all radio channels.
      * @return The group containing all radio channels.
      */
-    CPVRChannelGroupPtr GetGroupAllRadio(void)  const{ return GetGroupAll(true); }
+    std::shared_ptr<CPVRChannelGroup> GetGroupAllRadio(void)  const{ return GetGroupAll(true); }
 
     /*!
      * @brief Get the group containing all TV or radio channels.
      * @param bRadio If true, get the group containing all radio channels. Get the group containing all TV channels otherwise.
      * @return The requested group.
      */
-    CPVRChannelGroupPtr GetGroupAll(bool bRadio) const;
+    std::shared_ptr<CPVRChannelGroup> GetGroupAll(bool bRadio) const;
 
     /*!
      * @brief Get a group given it's ID.
      * @param iGroupId The ID of the group.
      * @return The requested group or NULL if it wasn't found.
      */
-    CPVRChannelGroupPtr GetByIdFromAll(int iGroupId) const;
+    std::shared_ptr<CPVRChannelGroup> GetByIdFromAll(int iGroupId) const;
 
     /*!
      * @brief Get a channel given it's database ID.
      * @param iChannelId The ID of the channel.
      * @return The channel or NULL if it wasn't found.
      */
-    CPVRChannelPtr GetChannelById(int iChannelId) const;
+    std::shared_ptr<CPVRChannel> GetChannelById(int iChannelId) const;
 
     /*!
      * @brief Get a channel given it's EPG ID.
      * @param iEpgId The EPG ID of the channel.
      * @return The channel or NULL if it wasn't found.
      */
-    CPVRChannelPtr GetChannelByEpgId(int iEpgId) const;
+    std::shared_ptr<CPVRChannel> GetChannelByEpgId(int iEpgId) const;
 
     /*!
      * @brief Get the channel for the given epg tag.
@@ -132,7 +134,7 @@ namespace PVR
      * @param bRadio True to get the selected radio group, false to get the selected TV group.
      * @return The selected group.
      */
-    CPVRChannelGroupPtr GetSelectedGroup(bool bRadio) const;
+    std::shared_ptr<CPVRChannelGroup> GetSelectedGroup(bool bRadio) const;
 
     /*!
      * @brief Get a channel given it's channel ID from all containers.
@@ -140,7 +142,7 @@ namespace PVR
      * @param iClientID The ID of the client.
      * @return The channel or NULL if it wasn't found.
      */
-    CPVRChannelPtr GetByUniqueID(int iUniqueChannelId, int iClientID) const;
+    std::shared_ptr<CPVRChannel> GetByUniqueID(int iUniqueChannelId, int iClientID) const;
 
     /*!
      * @brief Get the channel that was played last.
@@ -153,7 +155,7 @@ namespace PVR
      * @param iChannelID The channel ID
      * @return The last watched group.
      */
-    CPVRChannelGroupPtr GetLastPlayedGroup(int iChannelID = -1) const;
+    std::shared_ptr<CPVRChannelGroup> GetLastPlayedGroup(int iChannelID = -1) const;
 
     /*!
      * @brief Create EPG tags for channels in all internal channel groups.
@@ -165,13 +167,13 @@ namespace PVR
      * @brief Return the group which was previous played.
      * @return The group which was previous played.
      */
-    CPVRChannelGroupPtr GetPreviousPlayedGroup(void);
+    std::shared_ptr<CPVRChannelGroup> GetPreviousPlayedGroup(void);
 
     /*!
      * @brief Set the last played group.
      * @param The last played group
      */
-    void SetLastPlayedGroup(const CPVRChannelGroupPtr &group);
+    void SetLastPlayedGroup(const std::shared_ptr<CPVRChannelGroup> &group);
 
   protected:
     CPVRChannelGroups *m_groupsRadio; /*!< all radio channel groups */
@@ -179,7 +181,7 @@ namespace PVR
     CCriticalSection   m_critSection;
     bool               m_bUpdateChannelsOnly = false;
     bool               m_bIsUpdating = false;
-    CPVRChannelGroupPtr m_lastPlayedGroups[2]; /*!< used to store the last played groups */
+    std::shared_ptr<CPVRChannelGroup> m_lastPlayedGroups[2]; /*!< used to store the last played groups */
 
   private :
     CPVRChannelGroupsContainer& operator=(const CPVRChannelGroupsContainer&) = delete;
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRChannelGuide.cpp b/xbmc/pvr/dialogs/GUIDialogPVRChannelGuide.cpp
index 15e00adbdba5..d7106023306b 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRChannelGuide.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRChannelGuide.cpp
@@ -24,7 +24,7 @@ CGUIDialogPVRChannelGuide::CGUIDialogPVRChannelGuide()
 {
 }
 
-void CGUIDialogPVRChannelGuide::Open(const CPVRChannelPtr &channel)
+void CGUIDialogPVRChannelGuide::Open(const std::shared_ptr<CPVRChannel> &channel)
 {
   m_channel = channel;
   CGUIDialogPVRItemsViewBase::Open();
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRChannelGuide.h b/xbmc/pvr/dialogs/GUIDialogPVRChannelGuide.h
index b4ba042e4d9e..2f78bfe64344 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRChannelGuide.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRChannelGuide.h
@@ -11,6 +11,8 @@
 #include "pvr/PVRTypes.h"
 #include "pvr/dialogs/GUIDialogPVRItemsViewBase.h"
 
+#include <memory>
+
 namespace PVR
 {
   class CGUIDialogPVRChannelGuide : public CGUIDialogPVRItemsViewBase
@@ -19,13 +21,13 @@ namespace PVR
     CGUIDialogPVRChannelGuide(void);
     ~CGUIDialogPVRChannelGuide(void) override = default;
 
-    void Open(const CPVRChannelPtr &channel);
+    void Open(const std::shared_ptr<CPVRChannel> &channel);
 
   protected:
     void OnInitWindow() override;
     void OnDeinitWindow(int nextWindowID) override;
 
   private:
-    CPVRChannelPtr m_channel;
+    std::shared_ptr<CPVRChannel> m_channel;
   };
 }
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.cpp b/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.cpp
index 5a93a5514a44..6230422e2dcc 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.cpp
@@ -463,12 +463,12 @@ bool CGUIDialogPVRChannelManager::OnClickButtonNewChannel()
   {
     int iClientID = m_clientsWithSettingsList[iSelection]->GetID();
 
-    CPVRChannelPtr channel(new CPVRChannel(m_bIsRadio));
+    std::shared_ptr<CPVRChannel> channel(new CPVRChannel(m_bIsRadio));
     channel->SetChannelName(g_localizeStrings.Get(19204)); // New channel
     channel->SetClientID(iClientID);
 
     PVR_ERROR ret = PVR_ERROR_UNKNOWN;
-    const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(iClientID);
+    const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(iClientID);
     if (client)
     {
       channel->SetEPGEnabled(client->GetClientCapabilities().SupportsEPG());
@@ -606,7 +606,7 @@ bool CGUIDialogPVRChannelManager::OnContextButton(int itemNumber, CONTEXT_BUTTON
   }
   else if (button == CONTEXT_BUTTON_SETTINGS)
   {
-    const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(*pItem);
+    const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(*pItem);
     PVR_ERROR ret = PVR_ERROR_UNKNOWN;
     if (client)
       ret = client->OpenDialogChannelSettings(pItem->GetPVRChannelInfoTag());
@@ -628,10 +628,10 @@ bool CGUIDialogPVRChannelManager::OnContextButton(int itemNumber, CONTEXT_BUTTON
 
     if (pDialog->IsConfirmed())
     {
-      const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(*pItem);
+      const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(*pItem);
       if (client)
       {
-        const CPVRChannelPtr channel = pItem->GetPVRChannelInfoTag();
+        const std::shared_ptr<CPVRChannel> channel = pItem->GetPVRChannelInfoTag();
         PVR_ERROR ret = client->DeleteChannel(channel);
         if (ret == PVR_ERROR_NO_ERROR)
         {
@@ -675,7 +675,7 @@ void CGUIDialogPVRChannelManager::Update()
   // empty the lists ready for population
   Clear();
 
-  CPVRChannelGroupPtr channels = CServiceBroker::GetPVRManager().ChannelGroups()->GetGroupAll(m_bIsRadio);
+  std::shared_ptr<CPVRChannelGroup> channels = CServiceBroker::GetPVRManager().ChannelGroups()->GetGroupAll(m_bIsRadio);
 
   // No channels available, nothing to do.
   if(!channels)
@@ -688,7 +688,7 @@ void CGUIDialogPVRChannelManager::Update()
     channelFile = CFileItemPtr(new CFileItem(member.channel));
     if (!channelFile || !channelFile->HasPVRChannelInfoTag())
       continue;
-    const CPVRChannelPtr channel(channelFile->GetPVRChannelInfoTag());
+    const std::shared_ptr<CPVRChannel> channel(channelFile->GetPVRChannelInfoTag());
 
     channelFile->SetProperty("ActiveChannel", !channel->IsHidden());
     channelFile->SetProperty("Name", channel->ChannelName());
@@ -698,7 +698,7 @@ void CGUIDialogPVRChannelManager::Update()
     channelFile->SetProperty("ParentalLocked", channel->IsLocked());
     channelFile->SetProperty("Number", StringUtils::Format("%i", channel->ChannelNumber().GetChannelNumber()));
 
-    const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(*channelFile);
+    const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(*channelFile);
     if (client)
     {
       channelFile->SetProperty("ClientName", client->GetFriendlyName());
@@ -740,16 +740,16 @@ void CGUIDialogPVRChannelManager::RenameChannel(const CFileItemPtr &pItem)
   std::string strChannelName = pItem->GetProperty("Name").asString();
   if (strChannelName != pItem->GetPVRChannelInfoTag()->ChannelName())
   {
-    CPVRChannelPtr channel = pItem->GetPVRChannelInfoTag();
+    std::shared_ptr<CPVRChannel> channel = pItem->GetPVRChannelInfoTag();
     channel->SetChannelName(strChannelName);
 
-    const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(*pItem);
+    const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(*pItem);
     if (!client || (client->RenameChannel(channel) != PVR_ERROR_NO_ERROR))
       HELPERS::ShowOKDialogText(CVariant{2103}, CVariant{16029});  // Add-on error;Check the log file for details.
   }
 }
 
-bool CGUIDialogPVRChannelManager::PersistChannel(const CFileItemPtr &pItem, const CPVRChannelGroupPtr &group, unsigned int *iChannelNumber)
+bool CGUIDialogPVRChannelManager::PersistChannel(const CFileItemPtr &pItem, const std::shared_ptr<CPVRChannelGroup> &group, unsigned int *iChannelNumber)
 {
   if (!pItem || !pItem->HasPVRChannelInfoTag() || !group)
     return false;
@@ -782,7 +782,7 @@ void CGUIDialogPVRChannelManager::SaveList(void)
 
   /* persist all channels */
   unsigned int iNextChannelNumber(0);
-  CPVRChannelGroupPtr group = CServiceBroker::GetPVRManager().ChannelGroups()->GetGroupAll(m_bIsRadio);
+  std::shared_ptr<CPVRChannelGroup> group = CServiceBroker::GetPVRManager().ChannelGroups()->GetGroupAll(m_bIsRadio);
   if (!group)
     return;
 
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.h b/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.h
index f1f8b8569782..022d61f97708 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.h
@@ -66,7 +66,7 @@ namespace PVR
     bool OnClickButtonGroupManager(CGUIMessage &message);
     bool OnClickButtonNewChannel();
 
-    bool PersistChannel(const CFileItemPtr &pItem, const CPVRChannelGroupPtr &group, unsigned int *iChannelNumber);
+    bool PersistChannel(const CFileItemPtr &pItem, const std::shared_ptr<CPVRChannelGroup> &group, unsigned int *iChannelNumber);
     void SetItemsUnchanged(void);
 
     bool m_bIsRadio = false;
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.cpp b/xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.cpp
index 1438b20d2218..23e5f567f1a4 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.cpp
@@ -167,10 +167,10 @@ void CGUIDialogPVRChannelsOSD::Update()
   pvrMgr.Events().Subscribe(this, &CGUIDialogPVRChannelsOSD::Notify);
   pvrMgr.EpgContainer().Events().Subscribe(this, &CGUIDialogPVRChannelsOSD::Notify);
 
-  const CPVRChannelPtr channel = pvrMgr.GetPlayingChannel();
+  const std::shared_ptr<CPVRChannel> channel = pvrMgr.GetPlayingChannel();
   if (channel)
   {
-    const CPVRChannelGroupPtr group = pvrMgr.GetPlayingGroup(channel->IsRadio());
+    const std::shared_ptr<CPVRChannelGroup> group = pvrMgr.GetPlayingGroup(channel->IsRadio());
     if (group)
     {
       const std::vector<PVRChannelGroupMember> groupMembers = group->GetMembers(CPVRChannelGroup::Include::ONLY_VISIBLE);
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.h b/xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.h
index 218697d86257..e7e635fe6ef1 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.h
@@ -14,6 +14,7 @@
 #include "threads/SystemClock.h"
 
 #include <map>
+#include <memory>
 #include <string>
 
 namespace PVR
@@ -51,7 +52,7 @@ namespace PVR
     void SaveSelectedItemPath(int iGroupID);
     std::string GetLastSelectedItemPath(int iGroupID) const;
 
-    CPVRChannelGroupPtr m_group;
+    std::shared_ptr<CPVRChannelGroup> m_group;
     std::map<int, std::string> m_groupSelectedItemPaths;
     XbmcThreads::EndTime m_refreshTimeout;
   };
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.cpp b/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.cpp
index a5e7c72b93c5..f4c17f3d5b60 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.cpp
@@ -495,7 +495,7 @@ void CGUIDialogPVRGroupManager::Update()
       }
 
       /* for the center part, get all channels of the "all" channels group that are not in this group */
-      const CPVRChannelGroupPtr allGroup = CServiceBroker::GetPVRManager().ChannelGroups()->GetGroupAll(m_bIsRadio);
+      const std::shared_ptr<CPVRChannelGroup> allGroup = CServiceBroker::GetPVRManager().ChannelGroups()->GetGroupAll(m_bIsRadio);
       const std::vector<PVRChannelGroupMember> allGroupMembers = allGroup->GetMembers(CPVRChannelGroup::Include::ONLY_VISIBLE);
       for (const auto& groupMember : allGroupMembers)
       {
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.h b/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.h
index 2d2e1aca3789..879827caad55 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.h
@@ -13,6 +13,8 @@
 #include "pvr/PVRTypes.h"
 #include "view/GUIViewControl.h"
 
+#include <memory>
+
 class CFileItemList;
 class CGUIMessage;
 
@@ -52,7 +54,7 @@ namespace PVR
     bool OnMessageClick(CGUIMessage &message);
     bool OnActionMove(const CAction& action);
 
-    CPVRChannelGroupPtr m_selectedGroup;
+    std::shared_ptr<CPVRChannelGroup> m_selectedGroup;
     bool              m_bIsRadio;
 
     int m_iSelectedUngroupedChannel = 0;
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.cpp b/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.cpp
index 0487a527ce5d..56793e5d7e68 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.cpp
@@ -179,7 +179,7 @@ bool CGUIDialogPVRGuideInfo::OnInfo(int actionID)
   return true;
 }
 
-void CGUIDialogPVRGuideInfo::SetProgInfo(const CPVREpgInfoTagPtr &tag)
+void CGUIDialogPVRGuideInfo::SetProgInfo(const std::shared_ptr<CPVREpgInfoTag> &tag)
 {
   m_progItem = tag;
 }
@@ -225,7 +225,7 @@ void CGUIDialogPVRGuideInfo::OnInitWindow()
   }
   else if (m_progItem->IsRecordable())
   {
-    const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(m_progItem->ClientID());
+    const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(m_progItem->ClientID());
     if (client && client->GetClientCapabilities().SupportsTimers())
     {
       SET_CONTROL_LABEL(CONTROL_BTN_RECORD, 264); /* Record */
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.h b/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.h
index 50d286581248..4be811779d53 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.h
@@ -11,6 +11,8 @@
 #include "guilib/GUIDialog.h"
 #include "pvr/PVRTypes.h"
 
+#include <memory>
+
 class CGUIMessage;
 
 namespace PVR
@@ -25,7 +27,7 @@ namespace PVR
     bool HasListItems() const override { return true; }
     CFileItemPtr GetCurrentListItem(int offset = 0) override;
 
-    void SetProgInfo(const CPVREpgInfoTagPtr &tag);
+    void SetProgInfo(const std::shared_ptr<CPVREpgInfoTag> &tag);
 
     static void ShowFor(const CFileItemPtr& item);
 
@@ -40,6 +42,6 @@ namespace PVR
     bool OnClickButtonAddTimer(CGUIMessage &message);
     bool OnClickButtonSetReminder(CGUIMessage& message);
 
-    CPVREpgInfoTagPtr m_progItem;
+    std::shared_ptr<CPVREpgInfoTag> m_progItem;
   };
 }
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.cpp b/xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.cpp
index e8156c7b6e43..ff9ff844bd86 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.cpp
@@ -60,7 +60,7 @@ void CGUIDialogPVRGuideSearch::UpdateChannelSpin(void)
   std::vector< std::pair<std::string, int> > labels;
   labels.emplace_back(g_localizeStrings.Get(19217), EPG_SEARCH_UNSET);
 
-  CPVRChannelGroupPtr group;
+  std::shared_ptr<CPVRChannelGroup> group;
   if (iChannelGroup == EPG_SEARCH_UNSET)
     group = CServiceBroker::GetPVRManager().ChannelGroups()->GetGroupAll(m_searchFilter->IsRadio());
   else
@@ -95,8 +95,8 @@ void CGUIDialogPVRGuideSearch::UpdateGroupsSpin(void)
   std::vector< std::pair<std::string, int> > labels;
 
   /* groups */
-  std::vector<CPVRChannelGroupPtr> groups = CServiceBroker::GetPVRManager().ChannelGroups()->Get(m_searchFilter->IsRadio())->GetMembers();
-  for (std::vector<CPVRChannelGroupPtr>::const_iterator it = groups.begin(); it != groups.end(); ++it)
+  std::vector<std::shared_ptr<CPVRChannelGroup>> groups = CServiceBroker::GetPVRManager().ChannelGroups()->Get(m_searchFilter->IsRadio())->GetMembers();
+  for (std::vector<std::shared_ptr<CPVRChannelGroup>>::const_iterator it = groups.begin(); it != groups.end(); ++it)
     labels.emplace_back((*it)->GroupName(), (*it)->GroupID());
 
   SET_CONTROL_LABELS(CONTROL_SPIN_GROUPS, m_searchFilter->GetChannelGroup(), &labels);
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRRecordingSettings.cpp b/xbmc/pvr/dialogs/GUIDialogPVRRecordingSettings.cpp
index 036a1a5b2647..c6c5e787ff21 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRRecordingSettings.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRRecordingSettings.cpp
@@ -39,7 +39,7 @@ CGUIDialogPVRRecordingSettings::CGUIDialogPVRRecordingSettings() :
   m_loadType = LOAD_EVERY_TIME;
 }
 
-void CGUIDialogPVRRecordingSettings::SetRecording(const CPVRRecordingPtr &recording)
+void CGUIDialogPVRRecordingSettings::SetRecording(const std::shared_ptr<CPVRRecording> &recording)
 {
   if (!recording)
   {
@@ -83,7 +83,7 @@ void CGUIDialogPVRRecordingSettings::InitializeSettings()
   }
 
   std::shared_ptr<CSetting> setting = nullptr;
-  const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(m_recording->ClientID());
+  const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(m_recording->ClientID());
 
   // Name
   setting = AddEdit(group, SETTING_RECORDING_NAME, 19075, SettingLevel::Basic, m_strTitle);
@@ -186,7 +186,7 @@ void CGUIDialogPVRRecordingSettings::LifetimesFiller(
   {
     list.clear();
 
-    const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(pThis->m_recording->ClientID());
+    const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(pThis->m_recording->ClientID());
     if (client)
     {
       std::vector<std::pair<std::string,int>> values;
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRRecordingSettings.h b/xbmc/pvr/dialogs/GUIDialogPVRRecordingSettings.h
index 79bef61bf3b4..37a0a3f1e7c3 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRRecordingSettings.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRRecordingSettings.h
@@ -27,7 +27,7 @@ namespace PVR
   public:
     CGUIDialogPVRRecordingSettings();
 
-    void SetRecording(const CPVRRecordingPtr &recording);
+    void SetRecording(const std::shared_ptr<CPVRRecording> &recording);
     static bool CanEditRecording(const CFileItem& item);
 
   protected:
@@ -48,7 +48,7 @@ namespace PVR
                                 std::vector<IntegerSettingOption> &list,
                                 int &current, void *data);
 
-    CPVRRecordingPtr m_recording;
+    std::shared_ptr<CPVRRecording> m_recording;
     std::string m_strTitle;
     int m_iPlayCount = 0;
     int m_iLifetime = 0;
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.cpp b/xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.cpp
index d529c6341242..c2bb2e8b5ea1 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.cpp
@@ -84,7 +84,7 @@ bool CGUIDialogPVRTimerSettings::CanBeActivated() const
   return true;
 }
 
-void CGUIDialogPVRTimerSettings::SetTimer(const CPVRTimerInfoTagPtr &timer)
+void CGUIDialogPVRTimerSettings::SetTimer(const std::shared_ptr<CPVRTimerInfoTag> &timer)
 {
   if (!timer)
   {
@@ -707,7 +707,7 @@ void CGUIDialogPVRTimerSettings::InitializeTypesList()
 
   bool bFoundThisType(false);
   int idx(0);
-  const std::vector<CPVRTimerTypePtr> types(CPVRTimerType::GetAllTypes());
+  const std::vector<std::shared_ptr<CPVRTimerType>> types(CPVRTimerType::GetAllTypes());
   for (const auto &type : types)
   {
     // Type definition prohibits created of new instances.
@@ -727,7 +727,7 @@ void CGUIDialogPVRTimerSettings::InitializeTypesList()
     // Drop TimerTypes without 'Series' EPG attributes if none are set
     if (type->RequiresEpgSeriesOnCreate())
     {
-      const CPVREpgInfoTagPtr epgTag(m_timerInfoTag->GetEpgInfoTag());
+      const std::shared_ptr<CPVREpgInfoTag> epgTag(m_timerInfoTag->GetEpgInfoTag());
       if (epgTag && !epgTag->IsSeries())
         continue;
     }
@@ -735,7 +735,7 @@ void CGUIDialogPVRTimerSettings::InitializeTypesList()
     // Drop TimerTypes which need series link if none is set
     if (type->RequiresEpgSeriesLinkOnCreate())
     {
-      const CPVREpgInfoTagPtr epgTag(m_timerInfoTag->GetEpgInfoTag());
+      const std::shared_ptr<CPVREpgInfoTag> epgTag(m_timerInfoTag->GetEpgInfoTag());
       if (!epgTag || epgTag->SeriesLink().empty())
         continue;
     }
@@ -747,7 +747,7 @@ void CGUIDialogPVRTimerSettings::InitializeTypesList()
     // Drop TimerTypes that aren't rules and cannot be recorded
     if (!type->IsTimerRule())
     {
-      const CPVREpgInfoTagPtr epgTag(m_timerInfoTag->GetEpgInfoTag());
+      const std::shared_ptr<CPVREpgInfoTag> epgTag(m_timerInfoTag->GetEpgInfoTag());
       bool bCanRecord = epgTag ? epgTag->IsRecordable() : m_timerInfoTag->EndAsLocalTime() > CDateTime::GetCurrentDateTime();
       if (!bCanRecord)
         continue;
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.h b/xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.h
index e70bbe12e813..450b2472a300 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.h
@@ -34,7 +34,7 @@ namespace PVR
 
     bool CanBeActivated() const override;
 
-    void SetTimer(const CPVRTimerInfoTagPtr &timer);
+    void SetTimer(const std::shared_ptr<CPVRTimerInfoTag> &timer);
 
   protected:
     // implementation of ISettingCallback
@@ -102,7 +102,7 @@ namespace PVR
     static bool EndAnytimeSetCondition(
       const std::string &condition, const std::string &value, std::shared_ptr<const CSetting> setting, void *data);
 
-    typedef std::map<int, CPVRTimerTypePtr>  TypeEntriesMap;
+    typedef std::map<int, std::shared_ptr<CPVRTimerType>>  TypeEntriesMap;
 
     typedef struct ChannelDescriptor
     {
@@ -129,13 +129,13 @@ namespace PVR
 
     typedef std::map <int, ChannelDescriptor> ChannelEntriesMap;
 
-    CPVRTimerInfoTagPtr m_timerInfoTag;
+    std::shared_ptr<CPVRTimerInfoTag> m_timerInfoTag;
     TypeEntriesMap      m_typeEntries;
     ChannelEntriesMap   m_channelEntries;
     std::string         m_timerStartTimeStr;
     std::string         m_timerEndTimeStr;
 
-    CPVRTimerTypePtr    m_timerType;
+    std::shared_ptr<CPVRTimerType>    m_timerType;
     bool                m_bIsRadio = false;
     bool                m_bIsNewTimer = true;
     bool                m_bTimerActive = false;
diff --git a/xbmc/pvr/epg/Epg.cpp b/xbmc/pvr/epg/Epg.cpp
index ac3256707886..6b3d7ae0bd69 100644
--- a/xbmc/pvr/epg/Epg.cpp
+++ b/xbmc/pvr/epg/Epg.cpp
@@ -99,7 +99,7 @@ void CPVREpg::Cleanup(const CDateTime &time)
   }
 }
 
-CPVREpgInfoTagPtr CPVREpg::GetTagNow(bool bUpdateIfNeeded /* = true */) const
+std::shared_ptr<CPVREpgInfoTag> CPVREpg::GetTagNow(bool bUpdateIfNeeded /* = true */) const
 {
   CSingleLock lock(m_critSection);
   if (m_nowActiveStart.IsValid())
@@ -111,7 +111,7 @@ CPVREpgInfoTagPtr CPVREpg::GetTagNow(bool bUpdateIfNeeded /* = true */) const
 
   if (bUpdateIfNeeded)
   {
-    CPVREpgInfoTagPtr lastActiveTag;
+    std::shared_ptr<CPVREpgInfoTag> lastActiveTag;
 
     /* one of the first items will always match if the list is sorted */
     for (const auto& tag : m_tags)
@@ -131,12 +131,12 @@ CPVREpgInfoTagPtr CPVREpg::GetTagNow(bool bUpdateIfNeeded /* = true */) const
       return lastActiveTag;
   }
 
-  return CPVREpgInfoTagPtr();
+  return std::shared_ptr<CPVREpgInfoTag>();
 }
 
-CPVREpgInfoTagPtr CPVREpg::GetTagNext() const
+std::shared_ptr<CPVREpgInfoTag> CPVREpg::GetTagNext() const
 {
-  const CPVREpgInfoTagPtr nowTag = GetTagNow();
+  const std::shared_ptr<CPVREpgInfoTag> nowTag = GetTagNow();
   if (nowTag)
   {
     CSingleLock lock(m_critSection);
@@ -154,12 +154,12 @@ CPVREpgInfoTagPtr CPVREpg::GetTagNext() const
     }
   }
 
-  return CPVREpgInfoTagPtr();
+  return std::shared_ptr<CPVREpgInfoTag>();
 }
 
-CPVREpgInfoTagPtr CPVREpg::GetTagPrevious() const
+std::shared_ptr<CPVREpgInfoTag> CPVREpg::GetTagPrevious() const
 {
-  const CPVREpgInfoTagPtr nowTag = GetTagNow();
+  const std::shared_ptr<CPVREpgInfoTag> nowTag = GetTagNow();
   if (nowTag)
   {
     CSingleLock lock(m_critSection);
@@ -180,13 +180,13 @@ CPVREpgInfoTagPtr CPVREpg::GetTagPrevious() const
     }
   }
 
-  return CPVREpgInfoTagPtr();
+  return std::shared_ptr<CPVREpgInfoTag>();
 }
 
 bool CPVREpg::CheckPlayingEvent(void)
 {
-  const CPVREpgInfoTagPtr previousTag = GetTagNow(false);
-  const CPVREpgInfoTagPtr newTag = GetTagNow(true);
+  const std::shared_ptr<CPVREpgInfoTag> previousTag = GetTagNow(false);
+  const std::shared_ptr<CPVREpgInfoTag> newTag = GetTagNow(true);
 
   bool bTagChanged = newTag && (!previousTag || *previousTag != *newTag);
   bool bTagRemoved = !newTag && previousTag;
@@ -198,7 +198,7 @@ bool CPVREpg::CheckPlayingEvent(void)
   return false;
 }
 
-CPVREpgInfoTagPtr CPVREpg::GetTagByBroadcastId(unsigned int iUniqueBroadcastId) const
+std::shared_ptr<CPVREpgInfoTag> CPVREpg::GetTagByBroadcastId(unsigned int iUniqueBroadcastId) const
 {
   if (iUniqueBroadcastId != EPG_TAG_INVALID_UID)
   {
@@ -209,12 +209,12 @@ CPVREpgInfoTagPtr CPVREpg::GetTagByBroadcastId(unsigned int iUniqueBroadcastId)
         return infoTag.second;
     }
   }
-  return CPVREpgInfoTagPtr();
+  return std::shared_ptr<CPVREpgInfoTag>();
 }
 
-CPVREpgInfoTagPtr CPVREpg::GetTagBetween(const CDateTime &beginTime, const CDateTime &endTime, bool bUpdateFromClient /* = false */)
+std::shared_ptr<CPVREpgInfoTag> CPVREpg::GetTagBetween(const CDateTime &beginTime, const CDateTime &endTime, bool bUpdateFromClient /* = false */)
 {
-  CPVREpgInfoTagPtr tag;
+  std::shared_ptr<CPVREpgInfoTag> tag;
 
   CSingleLock lock(m_critSection);
   for (const auto& epgTag : m_tags)
@@ -250,7 +250,7 @@ CPVREpgInfoTagPtr CPVREpg::GetTagBetween(const CDateTime &beginTime, const CDate
 
 void CPVREpg::AddEntry(const CPVREpgInfoTag &tag)
 {
-  CPVREpgInfoTagPtr newTag;
+  std::shared_ptr<CPVREpgInfoTag> newTag;
 
   CSingleLock lock(m_critSection);
   const auto it = m_tags.find(tag.StartAsUTC());
@@ -277,7 +277,7 @@ bool CPVREpg::Load(const std::shared_ptr<CPVREpgDatabase>& database)
     return bReturn;
   }
 
-  const std::vector<CPVREpgInfoTagPtr> result = database->Get(*this);
+  const std::vector<std::shared_ptr<CPVREpgInfoTag>> result = database->Get(*this);
 
   CSingleLock lock(m_critSection);
   if (result.empty())
@@ -332,9 +332,9 @@ bool CPVREpg::UpdateEntry(const EPG_TAG *data, int iClientId)
   return UpdateEntry(tag, CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_EPG_STOREEPGINDATABASE));
 }
 
-bool CPVREpg::UpdateEntry(const CPVREpgInfoTagPtr &tag, bool bUpdateDatabase)
+bool CPVREpg::UpdateEntry(const std::shared_ptr<CPVREpgInfoTag> &tag, bool bUpdateDatabase)
 {
-  CPVREpgInfoTagPtr infoTag;
+  std::shared_ptr<CPVREpgInfoTag> infoTag;
 
   CSingleLock lock(m_critSection);
   const auto it = m_tags.find(tag->StartAsUTC());
@@ -361,7 +361,7 @@ bool CPVREpg::UpdateEntry(const CPVREpgInfoTagPtr &tag, bool bUpdateDatabase)
   return true;
 }
 
-bool CPVREpg::UpdateEntry(const CPVREpgInfoTagPtr &tag, EPG_EVENT_STATE newState, bool bUpdateDatabase)
+bool CPVREpg::UpdateEntry(const std::shared_ptr<CPVREpgInfoTag> &tag, EPG_EVENT_STATE newState, bool bUpdateDatabase)
 {
   bool bRet = true;
   bool bNotify = true;
@@ -549,7 +549,7 @@ CDateTime CPVREpg::GetLastDate(void) const
 bool CPVREpg::FixOverlappingEvents(bool bUpdateDb /* = false */)
 {
   bool bReturn = true;
-  CPVREpgInfoTagPtr previousTag, currentTag;
+  std::shared_ptr<CPVREpgInfoTag> previousTag, currentTag;
 
   for (auto it = m_tags.begin(); it != m_tags.end(); it != m_tags.end() ? it++ : it)
   {
diff --git a/xbmc/pvr/epg/Epg.h b/xbmc/pvr/epg/Epg.h
index 37eec8cbebba..a9117897e418 100644
--- a/xbmc/pvr/epg/Epg.h
+++ b/xbmc/pvr/epg/Epg.h
@@ -129,19 +129,19 @@ namespace PVR
      * @brief Get the event that is occurring now
      * @return The current event or NULL if it wasn't found.
      */
-    CPVREpgInfoTagPtr GetTagNow(bool bUpdateIfNeeded = true) const;
+    std::shared_ptr<CPVREpgInfoTag> GetTagNow(bool bUpdateIfNeeded = true) const;
 
     /*!
      * @brief Get the event that will occur next
      * @return The next event or NULL if it wasn't found.
      */
-    CPVREpgInfoTagPtr GetTagNext() const;
+    std::shared_ptr<CPVREpgInfoTag> GetTagNext() const;
 
     /*!
      * @brief Get the event that occured previously
      * @return The previous event or NULL if it wasn't found.
      */
-    CPVREpgInfoTagPtr GetTagPrevious() const;
+    std::shared_ptr<CPVREpgInfoTag> GetTagPrevious() const;
 
     /*!
      * @brief Get the event that occurs between the given begin and end time.
@@ -150,14 +150,14 @@ namespace PVR
      * @param bUpdateFromClient if true, try to fetch the event from the client if not found locally.
      * @return The found tag or NULL if it wasn't found.
      */
-    CPVREpgInfoTagPtr GetTagBetween(const CDateTime &beginTime, const CDateTime &endTime, bool bUpdateFromClient = false);
+    std::shared_ptr<CPVREpgInfoTag> GetTagBetween(const CDateTime &beginTime, const CDateTime &endTime, bool bUpdateFromClient = false);
 
     /*!
      * @brief Get the event matching the given unique broadcast id
      * @param iUniqueBroadcastId The uid to look up
      * @return The matching event or NULL if it wasn't found.
      */
-    CPVREpgInfoTagPtr GetTagByBroadcastId(unsigned int iUniqueBroadcastId) const;
+    std::shared_ptr<CPVREpgInfoTag> GetTagByBroadcastId(unsigned int iUniqueBroadcastId) const;
 
     /*!
      * @brief Update an entry in this EPG.
@@ -173,7 +173,7 @@ namespace PVR
      * @param bUpdateDatabase If set to true, this event will be persisted in the database.
      * @return True if it was updated successfully, false otherwise.
      */
-    bool UpdateEntry(const CPVREpgInfoTagPtr &tag, bool bUpdateDatabase);
+    bool UpdateEntry(const std::shared_ptr<CPVREpgInfoTag> &tag, bool bUpdateDatabase);
 
     /*!
      * @brief Update an entry in this EPG.
@@ -182,7 +182,7 @@ namespace PVR
      * @param bUpdateDatabase If set to true, this event will be persisted in the database.
      * @return True if it was updated successfully, false otherwise.
      */
-    bool UpdateEntry(const CPVREpgInfoTagPtr &tag, EPG_EVENT_STATE newState, bool bUpdateDatabase);
+    bool UpdateEntry(const std::shared_ptr<CPVREpgInfoTag> &tag, EPG_EVENT_STATE newState, bool bUpdateDatabase);
 
     /*!
      * @brief Update the EPG from 'start' till 'end'.
@@ -303,9 +303,9 @@ namespace PVR
      */
     void Cleanup(int iPastDays);
 
-    std::map<CDateTime, CPVREpgInfoTagPtr> m_tags;
-    std::map<int, CPVREpgInfoTagPtr>       m_changedTags;
-    std::map<int, CPVREpgInfoTagPtr>       m_deletedTags;
+    std::map<CDateTime, std::shared_ptr<CPVREpgInfoTag>> m_tags;
+    std::map<int, std::shared_ptr<CPVREpgInfoTag>>       m_changedTags;
+    std::map<int, std::shared_ptr<CPVREpgInfoTag>>       m_deletedTags;
     bool                                m_bChanged = false;        /*!< true if anything changed that needs to be persisted, false otherwise */
     bool                                m_bTagsChanged = false;    /*!< true when any tags are changed and not persisted, false otherwise */
     bool                                m_bLoaded = false;         /*!< true when the initial entries have been loaded */
diff --git a/xbmc/pvr/epg/EpgContainer.cpp b/xbmc/pvr/epg/EpgContainer.cpp
index 67e270fc8ceb..2bac36853b0e 100644
--- a/xbmc/pvr/epg/EpgContainer.cpp
+++ b/xbmc/pvr/epg/EpgContainer.cpp
@@ -60,12 +60,12 @@ class CEpgTagStateChange
 {
 public:
   CEpgTagStateChange() = default;
-  CEpgTagStateChange(const CPVREpgInfoTagPtr &tag, EPG_EVENT_STATE eNewState) : m_epgtag(tag), m_state(eNewState) {}
+  CEpgTagStateChange(const std::shared_ptr<CPVREpgInfoTag> &tag, EPG_EVENT_STATE eNewState) : m_epgtag(tag), m_state(eNewState) {}
 
   void Deliver();
 
 private:
-  CPVREpgInfoTagPtr m_epgtag;
+  std::shared_ptr<CPVREpgInfoTag> m_epgtag;
   EPG_EVENT_STATE m_state = EPG_EVENT_CREATED;
 };
 
@@ -112,7 +112,7 @@ CPVREpgContainer::~CPVREpgContainer(void)
   Clear();
 }
 
-CPVREpgDatabasePtr CPVREpgContainer::GetEpgDatabase() const
+std::shared_ptr<CPVREpgDatabase> CPVREpgContainer::GetEpgDatabase() const
 {
   CSingleLock lock(m_critSection);
   if (!m_database || !m_database->IsOpen())
@@ -437,9 +437,9 @@ std::vector<std::shared_ptr<CPVREpg>> CPVREpgContainer::GetAllEpgs() const
   return epgs;
 }
 
-CPVREpgPtr CPVREpgContainer::GetById(int iEpgId) const
+std::shared_ptr<CPVREpg> CPVREpgContainer::GetById(int iEpgId) const
 {
-  CPVREpgPtr retval;
+  std::shared_ptr<CPVREpg> retval;
 
   if (iEpgId < 0)
     return retval;
@@ -469,7 +469,7 @@ std::shared_ptr<CPVREpg> CPVREpgContainer::GetByChannelUid(int iClientId, int iC
 
 std::shared_ptr<CPVREpgInfoTag> CPVREpgContainer::GetTagById(const std::shared_ptr<CPVREpg>& epg, unsigned int iBroadcastId) const
 {
-  CPVREpgInfoTagPtr retval;
+  std::shared_ptr<CPVREpgInfoTag> retval;
 
   if (iBroadcastId == EPG_TAG_INVALID_UID)
     return retval;
@@ -505,10 +505,10 @@ std::vector<std::shared_ptr<CPVREpgInfoTag>> CPVREpgContainer::GetAllTags() cons
   return allTags;
 }
 
-void CPVREpgContainer::InsertFromDB(const CPVREpgPtr &newEpg)
+void CPVREpgContainer::InsertFromDB(const std::shared_ptr<CPVREpg> &newEpg)
 {
   // table might already have been created when pvr channels were loaded
-  CPVREpgPtr epg = GetById(newEpg->EpgID());
+  std::shared_ptr<CPVREpg> epg = GetById(newEpg->EpgID());
   if (!epg)
   {
     // create a new epg table
@@ -518,9 +518,9 @@ void CPVREpgContainer::InsertFromDB(const CPVREpgPtr &newEpg)
   }
 }
 
-CPVREpgPtr CPVREpgContainer::CreateChannelEpg(int iEpgId, const std::string& strScraperName, const std::shared_ptr<CPVREpgChannelData>& channelData)
+std::shared_ptr<CPVREpg> CPVREpgContainer::CreateChannelEpg(int iEpgId, const std::string& strScraperName, const std::shared_ptr<CPVREpgChannelData>& channelData)
 {
-  CPVREpgPtr epg;
+  std::shared_ptr<CPVREpg> epg;
 
   WaitForUpdateFinish();
   LoadFromDB();
@@ -576,7 +576,7 @@ bool CPVREpgContainer::RemoveOldEntries(void)
   return true;
 }
 
-bool CPVREpgContainer::DeleteEpg(const CPVREpgPtr &epg, bool bDeleteFromDatabase /* = false */)
+bool CPVREpgContainer::DeleteEpg(const std::shared_ptr<CPVREpg> &epg, bool bDeleteFromDatabase /* = false */)
 {
   if (!epg || epg->EpgID() < 0)
     return false;
@@ -656,7 +656,7 @@ bool CPVREpgContainer::UpdateEPG(bool bOnlyPending /* = false */)
     pendingUpdates = m_pendingUpdates;
   }
 
-  std::vector<CPVREpgPtr> invalidTables;
+  std::vector<std::shared_ptr<CPVREpg>> invalidTables;
 
   CPVRGUIProgressHandler* progressHandler = nullptr;
   if (bShowProgress && !bOnlyPending)
@@ -673,7 +673,7 @@ bool CPVREpgContainer::UpdateEPG(bool bOnlyPending /* = false */)
       break;
     }
 
-    const CPVREpgPtr epg = epgEntry.second;
+    const std::shared_ptr<CPVREpg> epg = epgEntry.second;
     if (!epg)
       continue;
 
@@ -820,7 +820,7 @@ void CPVREpgContainer::UpdateRequest(int iClientID, int iUniqueChannelID)
   m_updateRequests.emplace_back(CEpgUpdateRequest(iClientID, iUniqueChannelID));
 }
 
-void CPVREpgContainer::UpdateFromClient(const CPVREpgInfoTagPtr &tag, EPG_EVENT_STATE eNewState)
+void CPVREpgContainer::UpdateFromClient(const std::shared_ptr<CPVREpgInfoTag> &tag, EPG_EVENT_STATE eNewState)
 {
   CSingleLock lock(m_epgTagChangesLock);
   m_epgTagChanges.emplace_back(CEpgTagStateChange(tag, eNewState));
diff --git a/xbmc/pvr/epg/EpgContainer.h b/xbmc/pvr/epg/EpgContainer.h
index 822b97129d74..56ed7f9dbc36 100644
--- a/xbmc/pvr/epg/EpgContainer.h
+++ b/xbmc/pvr/epg/EpgContainer.h
@@ -54,7 +54,7 @@ namespace PVR
      * @brief Get a pointer to the database instance.
      * @return A pointer to the database instance.
      */
-    CPVREpgDatabasePtr GetEpgDatabase() const;
+    std::shared_ptr<CPVREpgDatabase> GetEpgDatabase() const;
 
     /*!
      * @brief Query the events available for CEventStream
@@ -89,7 +89,7 @@ namespace PVR
      * @param bDeleteFromDatabase Delete this table from the database too if true.
      * @return True on success, false otherwise.
      */
-    bool DeleteEpg(const CPVREpgPtr &epg, bool bDeleteFromDatabase = false);
+    bool DeleteEpg(const std::shared_ptr<CPVREpg> &epg, bool bDeleteFromDatabase = false);
 
     /*!
      * @brief CEventStream callback for PVR events.
@@ -129,7 +129,7 @@ namespace PVR
      * @param iEpgId The database ID of the table.
      * @return The EPG or nullptr if it wasn't found.
      */
-    CPVREpgPtr GetById(int iEpgId) const;
+    std::shared_ptr<CPVREpg> GetById(int iEpgId) const;
 
     /*!
      * @brief Get an EPG given its client id and channel uid.
@@ -177,7 +177,7 @@ namespace PVR
      * @param tag The epg tag containing the updated data
      * @param eNewState The kind of change (CREATED, UPDATED, DELETED)
      */
-    void UpdateFromClient(const CPVREpgInfoTagPtr &tag, EPG_EVENT_STATE eNewState);
+    void UpdateFromClient(const std::shared_ptr<CPVREpgInfoTag> &tag, EPG_EVENT_STATE eNewState);
 
     /*!
      * @brief Get the number of past days to show in the guide and to import from backends.
@@ -258,9 +258,9 @@ namespace PVR
      * @brief Insert data from database
      * @param newEpg the EPG containing the updated data.
      */
-    void InsertFromDB(const CPVREpgPtr &newEpg);
+    void InsertFromDB(const std::shared_ptr<CPVREpg> &newEpg);
 
-    CPVREpgDatabasePtr m_database; /*!< the EPG database */
+    std::shared_ptr<CPVREpgDatabase> m_database; /*!< the EPG database */
 
     bool m_bIsUpdating = false;                /*!< true while an update is running */
     bool m_bIsInitialising = true;             /*!< true while the epg manager hasn't loaded all tables */
diff --git a/xbmc/pvr/epg/EpgSearchFilter.cpp b/xbmc/pvr/epg/EpgSearchFilter.cpp
index 9a72a858f90d..5e3743a83a4b 100644
--- a/xbmc/pvr/epg/EpgSearchFilter.cpp
+++ b/xbmc/pvr/epg/EpgSearchFilter.cpp
@@ -68,7 +68,7 @@ void CPVREpgSearchFilter::Reset()
   m_iUniqueBroadcastId       = EPG_TAG_INVALID_UID;
 }
 
-bool CPVREpgSearchFilter::MatchGenre(const CPVREpgInfoTagPtr &tag) const
+bool CPVREpgSearchFilter::MatchGenre(const std::shared_ptr<CPVREpgInfoTag> &tag) const
 {
   bool bReturn(true);
 
@@ -82,7 +82,7 @@ bool CPVREpgSearchFilter::MatchGenre(const CPVREpgInfoTagPtr &tag) const
   return bReturn;
 }
 
-bool CPVREpgSearchFilter::MatchDuration(const CPVREpgInfoTagPtr &tag) const
+bool CPVREpgSearchFilter::MatchDuration(const std::shared_ptr<CPVREpgInfoTag> &tag) const
 {
   bool bReturn(true);
 
@@ -95,7 +95,7 @@ bool CPVREpgSearchFilter::MatchDuration(const CPVREpgInfoTagPtr &tag) const
   return bReturn;
 }
 
-bool CPVREpgSearchFilter::MatchStartAndEndTimes(const CPVREpgInfoTagPtr &tag) const
+bool CPVREpgSearchFilter::MatchStartAndEndTimes(const std::shared_ptr<CPVREpgInfoTag> &tag) const
 {
   return (tag->StartAsLocalTime() >= m_startDateTime && tag->EndAsLocalTime() <= m_endDateTime);
 }
@@ -108,7 +108,7 @@ void CPVREpgSearchFilter::SetSearchPhrase(const std::string &strSearchPhrase)
   m_strSearchTerm.append("\"");
 }
 
-bool CPVREpgSearchFilter::MatchSearchTerm(const CPVREpgInfoTagPtr &tag) const
+bool CPVREpgSearchFilter::MatchSearchTerm(const std::shared_ptr<CPVREpgInfoTag> &tag) const
 {
   bool bReturn(true);
 
@@ -125,7 +125,7 @@ bool CPVREpgSearchFilter::MatchSearchTerm(const CPVREpgInfoTagPtr &tag) const
   return bReturn;
 }
 
-bool CPVREpgSearchFilter::MatchBroadcastId(const CPVREpgInfoTagPtr &tag) const
+bool CPVREpgSearchFilter::MatchBroadcastId(const std::shared_ptr<CPVREpgInfoTag> &tag) const
 {
   if (m_iUniqueBroadcastId != EPG_TAG_INVALID_UID)
     return (tag->UniqueBroadcastID() == m_iUniqueBroadcastId);
@@ -133,7 +133,7 @@ bool CPVREpgSearchFilter::MatchBroadcastId(const CPVREpgInfoTagPtr &tag) const
   return true;
 }
 
-bool CPVREpgSearchFilter::FilterEntry(const CPVREpgInfoTagPtr &tag) const
+bool CPVREpgSearchFilter::FilterEntry(const std::shared_ptr<CPVREpgInfoTag> &tag) const
 {
   return (MatchGenre(tag) &&
       MatchBroadcastId(tag) &&
@@ -165,12 +165,12 @@ void CPVREpgSearchFilter::RemoveDuplicates(std::vector<std::shared_ptr<CPVREpgIn
   }
 }
 
-bool CPVREpgSearchFilter::MatchChannelType(const CPVREpgInfoTagPtr &tag) const
+bool CPVREpgSearchFilter::MatchChannelType(const std::shared_ptr<CPVREpgInfoTag> &tag) const
 {
   return tag && (tag->IsRadio() == m_bIsRadio);
 }
 
-bool CPVREpgSearchFilter::MatchChannelNumber(const CPVREpgInfoTagPtr &tag) const
+bool CPVREpgSearchFilter::MatchChannelNumber(const std::shared_ptr<CPVREpgInfoTag> &tag) const
 {
   bool bReturn(true);
 
@@ -183,13 +183,13 @@ bool CPVREpgSearchFilter::MatchChannelNumber(const CPVREpgInfoTagPtr &tag) const
   return bReturn;
 }
 
-bool CPVREpgSearchFilter::MatchChannelGroup(const CPVREpgInfoTagPtr &tag) const
+bool CPVREpgSearchFilter::MatchChannelGroup(const std::shared_ptr<CPVREpgInfoTag> &tag) const
 {
   bool bReturn(true);
 
   if (m_iChannelGroup != EPG_SEARCH_UNSET)
   {
-    CPVRChannelGroupPtr group = CServiceBroker::GetPVRManager().ChannelGroups()->GetByIdFromAll(m_iChannelGroup);
+    std::shared_ptr<CPVRChannelGroup> group = CServiceBroker::GetPVRManager().ChannelGroups()->GetByIdFromAll(m_iChannelGroup);
     if (group)
     {
       const std::shared_ptr<CPVRChannel> channel = CServiceBroker::GetPVRManager().ChannelGroups()->GetChannelForEpgTag(tag);
@@ -200,7 +200,7 @@ bool CPVREpgSearchFilter::MatchChannelGroup(const CPVREpgInfoTagPtr &tag) const
   return bReturn;
 }
 
-bool CPVREpgSearchFilter::MatchFreeToAir(const CPVREpgInfoTagPtr &tag) const
+bool CPVREpgSearchFilter::MatchFreeToAir(const std::shared_ptr<CPVREpgInfoTag> &tag) const
 {
   if (m_bFreeToAirOnly)
   {
@@ -211,12 +211,12 @@ bool CPVREpgSearchFilter::MatchFreeToAir(const CPVREpgInfoTagPtr &tag) const
   return true;
 }
 
-bool CPVREpgSearchFilter::MatchTimers(const CPVREpgInfoTagPtr &tag) const
+bool CPVREpgSearchFilter::MatchTimers(const std::shared_ptr<CPVREpgInfoTag> &tag) const
 {
   return (!m_bIgnorePresentTimers || !CServiceBroker::GetPVRManager().Timers()->GetTimerForEpgTag(tag));
 }
 
-bool CPVREpgSearchFilter::MatchRecordings(const CPVREpgInfoTagPtr &tag) const
+bool CPVREpgSearchFilter::MatchRecordings(const std::shared_ptr<CPVREpgInfoTag> &tag) const
 {
   return (!m_bIgnorePresentRecordings || !CServiceBroker::GetPVRManager().Recordings()->GetRecordingForEpgTag(tag));
 }
diff --git a/xbmc/pvr/epg/EpgSearchFilter.h b/xbmc/pvr/epg/EpgSearchFilter.h
index f830273ba784..b40c1c543ef4 100644
--- a/xbmc/pvr/epg/EpgSearchFilter.h
+++ b/xbmc/pvr/epg/EpgSearchFilter.h
@@ -45,7 +45,7 @@ namespace PVR
      * @param tag The tag to check.
      * @return True if this tag matches the filter, false if not.
      */
-    bool FilterEntry(const CPVREpgInfoTagPtr &tag) const;
+    bool FilterEntry(const std::shared_ptr<CPVREpgInfoTag> &tag) const;
 
     /*!
      * @brief remove duplicates from a list of epg tags.
@@ -112,17 +112,17 @@ namespace PVR
     void SetUniqueBroadcastId(unsigned int iUniqueBroadcastId) { m_iUniqueBroadcastId = iUniqueBroadcastId; }
 
   private:
-    bool MatchGenre(const CPVREpgInfoTagPtr &tag) const;
-    bool MatchDuration(const CPVREpgInfoTagPtr &tag) const;
-    bool MatchStartAndEndTimes(const CPVREpgInfoTagPtr &tag) const;
-    bool MatchSearchTerm(const CPVREpgInfoTagPtr &tag) const;
-    bool MatchChannelNumber(const CPVREpgInfoTagPtr &tag) const;
-    bool MatchChannelGroup(const CPVREpgInfoTagPtr &tag) const;
-    bool MatchBroadcastId(const CPVREpgInfoTagPtr &tag) const;
-    bool MatchChannelType(const CPVREpgInfoTagPtr &tag) const;
-    bool MatchFreeToAir(const CPVREpgInfoTagPtr &tag) const;
-    bool MatchTimers(const CPVREpgInfoTagPtr &tag) const;
-    bool MatchRecordings(const CPVREpgInfoTagPtr &tag) const;
+    bool MatchGenre(const std::shared_ptr<CPVREpgInfoTag> &tag) const;
+    bool MatchDuration(const std::shared_ptr<CPVREpgInfoTag> &tag) const;
+    bool MatchStartAndEndTimes(const std::shared_ptr<CPVREpgInfoTag> &tag) const;
+    bool MatchSearchTerm(const std::shared_ptr<CPVREpgInfoTag> &tag) const;
+    bool MatchChannelNumber(const std::shared_ptr<CPVREpgInfoTag> &tag) const;
+    bool MatchChannelGroup(const std::shared_ptr<CPVREpgInfoTag> &tag) const;
+    bool MatchBroadcastId(const std::shared_ptr<CPVREpgInfoTag> &tag) const;
+    bool MatchChannelType(const std::shared_ptr<CPVREpgInfoTag> &tag) const;
+    bool MatchFreeToAir(const std::shared_ptr<CPVREpgInfoTag> &tag) const;
+    bool MatchTimers(const std::shared_ptr<CPVREpgInfoTag> &tag) const;
+    bool MatchRecordings(const std::shared_ptr<CPVREpgInfoTag> &tag) const;
 
     std::string   m_strSearchTerm;            /*!< The term to search for */
     bool          m_bIsCaseSensitive;         /*!< Do a case sensitive search */
diff --git a/xbmc/pvr/recordings/PVRRecording.cpp b/xbmc/pvr/recordings/PVRRecording.cpp
index 76f48f58e727..faa28966265a 100644
--- a/xbmc/pvr/recordings/PVRRecording.cpp
+++ b/xbmc/pvr/recordings/PVRRecording.cpp
@@ -108,14 +108,14 @@ CPVRRecording::CPVRRecording(const PVR_RECORDING &recording, unsigned int iClien
   }
   else
   {
-    const CPVRChannelPtr channel(Channel());
+    const std::shared_ptr<CPVRChannel> channel(Channel());
     if (channel)
     {
       m_bRadio = channel->IsRadio();
     }
     else
     {
-      const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
+      const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
       bool bSupportsRadio = client && client->GetClientCapabilities().SupportsRadio();
       if (bSupportsRadio && client && client->GetClientCapabilities().SupportsTV())
       {
@@ -219,26 +219,26 @@ void CPVRRecording::Reset(void)
 
 bool CPVRRecording::Delete(void)
 {
-  CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
+  std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
   return client && (client->DeleteRecording(*this) == PVR_ERROR_NO_ERROR);
 }
 
 bool CPVRRecording::Undelete(void)
 {
-  const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
+  const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
   return client && (client->UndeleteRecording(*this) == PVR_ERROR_NO_ERROR);
 }
 
 bool CPVRRecording::Rename(const std::string &strNewName)
 {
   m_strTitle = strNewName;
-  const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
+  const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
   return client && (client->RenameRecording(*this) == PVR_ERROR_NO_ERROR);
 }
 
 bool CPVRRecording::SetPlayCount(int count)
 {
-  const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
+  const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
   if (client && client->GetClientCapabilities().SupportsRecordingsPlayCount())
   {
     if (client->SetRecordingPlayCount(*this, count) != PVR_ERROR_NO_ERROR)
@@ -250,7 +250,7 @@ bool CPVRRecording::SetPlayCount(int count)
 
 bool CPVRRecording::IncrementPlayCount()
 {
-  const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
+  const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
   if (client && client->GetClientCapabilities().SupportsRecordingsPlayCount())
   {
     if (client->SetRecordingPlayCount(*this, CVideoInfoTag::GetPlayCount() + 1) != PVR_ERROR_NO_ERROR)
@@ -262,7 +262,7 @@ bool CPVRRecording::IncrementPlayCount()
 
 bool CPVRRecording::SetResumePoint(const CBookmark &resumePoint)
 {
-  const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
+  const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
   if (client && client->GetClientCapabilities().SupportsRecordingsLastPlayedPosition())
   {
     if (client->SetRecordingLastPlayedPosition(*this, lrint(resumePoint.timeInSeconds)) != PVR_ERROR_NO_ERROR)
@@ -274,7 +274,7 @@ bool CPVRRecording::SetResumePoint(const CBookmark &resumePoint)
 
 bool CPVRRecording::SetResumePoint(double timeInSeconds, double totalTimeInSeconds, const std::string &playerState /* = "" */)
 {
-  const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
+  const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
   if (client && client->GetClientCapabilities().SupportsRecordingsLastPlayedPosition())
   {
     if (client->SetRecordingLastPlayedPosition(*this, lrint(timeInSeconds)) != PVR_ERROR_NO_ERROR)
@@ -286,7 +286,7 @@ bool CPVRRecording::SetResumePoint(double timeInSeconds, double totalTimeInSecon
 
 CBookmark CPVRRecording::GetResumePoint() const
 {
-  const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
+  const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
   if (client && client->GetClientCapabilities().SupportsRecordingsLastPlayedPosition() &&
       m_resumePointRefetchTimeout.IsTimePast())
   {
@@ -312,7 +312,7 @@ void CPVRRecording::UpdateMetadata(CVideoDatabase &db)
   if (m_bGotMetaData || !db.IsOpen())
     return;
 
-  const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
+  const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
 
   if (!client || !client->GetClientCapabilities().SupportsRecordingsPlayCount())
     CVideoInfoTag::SetPlayCount(db.GetPlayCount(m_strFileNameAndPath));
@@ -331,7 +331,7 @@ std::vector<PVR_EDL_ENTRY> CPVRRecording::GetEdl() const
 {
   std::vector<PVR_EDL_ENTRY> edls;
 
-  const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
+  const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
   if (client && client->GetClientCapabilities().SupportsRecordingsEdl())
     client->GetRecordingEdl(*this, edls);
 
@@ -447,12 +447,12 @@ std::string CPVRRecording::GetTitleFromURL(const std::string &url)
   return CPVRRecordingsPath(url).GetTitle();
 }
 
-CPVRChannelPtr CPVRRecording::Channel(void) const
+std::shared_ptr<CPVRChannel> CPVRRecording::Channel(void) const
 {
   if (m_iChannelUid != PVR_CHANNEL_INVALID_UID)
     return CServiceBroker::GetPVRManager().ChannelGroups()->GetByUniqueID(m_iChannelUid, m_iClientId);
 
-  return CPVRChannelPtr();
+  return std::shared_ptr<CPVRChannel>();
 }
 
 int CPVRRecording::ChannelUid(void) const
diff --git a/xbmc/pvr/recordings/PVRRecording.h b/xbmc/pvr/recordings/PVRRecording.h
index 9286933899ad..c4bdc5a53c90 100644
--- a/xbmc/pvr/recordings/PVRRecording.h
+++ b/xbmc/pvr/recordings/PVRRecording.h
@@ -253,7 +253,7 @@ namespace PVR
      * @return Get the channel on which this recording is/was running
      * @note Only works if the recording has a channel uid provided by the add-on
      */
-    CPVRChannelPtr Channel(void) const;
+    std::shared_ptr<CPVRChannel> Channel(void) const;
 
     /*!
      * @brief Get the uid of the channel on which this recording is/was running
diff --git a/xbmc/pvr/recordings/PVRRecordings.cpp b/xbmc/pvr/recordings/PVRRecordings.cpp
index 8cb5cdcad49b..527156ddd995 100644
--- a/xbmc/pvr/recordings/PVRRecordings.cpp
+++ b/xbmc/pvr/recordings/PVRRecordings.cpp
@@ -137,7 +137,7 @@ std::shared_ptr<CPVRRecording> CPVRRecordings::GetByPath(const std::string& path
 
     for (const auto recording : m_recordings)
     {
-      CPVRRecordingPtr current = recording.second;
+      std::shared_ptr<CPVRRecording> current = recording.second;
       // Omit recordings not matching criteria
       if (!URIUtils::PathEquals(path, current->m_strFileNameAndPath) ||
           bDeleted != current->IsDeleted() || bRadio != current->IsRadio())
@@ -150,9 +150,9 @@ std::shared_ptr<CPVRRecording> CPVRRecordings::GetByPath(const std::string& path
   return {};
 }
 
-CPVRRecordingPtr CPVRRecordings::GetById(int iClientId, const std::string &strRecordingId) const
+std::shared_ptr<CPVRRecording> CPVRRecordings::GetById(int iClientId, const std::string &strRecordingId) const
 {
-  CPVRRecordingPtr retVal;
+  std::shared_ptr<CPVRRecording> retVal;
   CSingleLock lock(m_critSection);
   const auto it = m_recordings.find(CPVRRecordingUid(iClientId, strRecordingId));
   if (it != m_recordings.end())
@@ -161,7 +161,7 @@ CPVRRecordingPtr CPVRRecordings::GetById(int iClientId, const std::string &strRe
   return retVal;
 }
 
-void CPVRRecordings::UpdateFromClient(const CPVRRecordingPtr &tag)
+void CPVRRecordings::UpdateFromClient(const std::shared_ptr<CPVRRecording> &tag)
 {
   CSingleLock lock(m_critSection);
 
@@ -173,14 +173,14 @@ void CPVRRecordings::UpdateFromClient(const CPVRRecordingPtr &tag)
       m_bDeletedTVRecordings = true;
   }
 
-  CPVRRecordingPtr newTag = GetById(tag->m_iClientId, tag->m_strRecordingId);
+  std::shared_ptr<CPVRRecording> newTag = GetById(tag->m_iClientId, tag->m_strRecordingId);
   if (newTag)
   {
     newTag->Update(*tag);
   }
   else
   {
-    newTag = CPVRRecordingPtr(new CPVRRecording);
+    newTag = std::shared_ptr<CPVRRecording>(new CPVRRecording);
     newTag->Update(*tag);
     newTag->UpdateMetadata(GetVideoDatabase());
     newTag->m_iRecordingId = ++m_iLastId;
@@ -192,7 +192,7 @@ void CPVRRecordings::UpdateFromClient(const CPVRRecordingPtr &tag)
   }
 }
 
-CPVRRecordingPtr CPVRRecordings::GetRecordingForEpgTag(const CPVREpgInfoTagPtr &epgTag) const
+std::shared_ptr<CPVRRecording> CPVRRecordings::GetRecordingForEpgTag(const std::shared_ptr<CPVREpgInfoTag> &epgTag) const
 {
   if (!epgTag)
     return {};
@@ -224,7 +224,7 @@ CPVRRecordingPtr CPVRRecordings::GetRecordingForEpgTag(const CPVREpgInfoTagPtr &
     }
   }
 
-  return CPVRRecordingPtr();
+  return std::shared_ptr<CPVRRecording>();
 }
 
 bool CPVRRecordings::SetRecordingsPlayCount(const std::shared_ptr<CPVRRecording>& recording, int count)
diff --git a/xbmc/pvr/recordings/PVRRecordings.h b/xbmc/pvr/recordings/PVRRecordings.h
index 5402f6de07f7..c91337f156a2 100644
--- a/xbmc/pvr/recordings/PVRRecordings.h
+++ b/xbmc/pvr/recordings/PVRRecordings.h
@@ -41,7 +41,7 @@ namespace PVR
      */
     void Unload();
 
-    void UpdateFromClient(const CPVRRecordingPtr &tag);
+    void UpdateFromClient(const std::shared_ptr<CPVRRecording> &tag);
 
     /*!
      * @brief refresh the recordings list from the clients.
@@ -75,7 +75,7 @@ namespace PVR
     std::vector<std::shared_ptr<CPVRRecording>> GetAll() const;
 
     std::shared_ptr<CPVRRecording> GetByPath(const std::string& path) const;
-    CPVRRecordingPtr GetById(int iClientId, const std::string &strRecordingId) const;
+    std::shared_ptr<CPVRRecording> GetById(int iClientId, const std::string &strRecordingId) const;
     std::shared_ptr<CPVRRecording> GetById(unsigned int iId) const;
 
     /*!
@@ -83,12 +83,12 @@ namespace PVR
      * @param epgTag The epg tag.
      * @return The requested recording, or an empty recordingptr if none was found.
      */
-    CPVRRecordingPtr GetRecordingForEpgTag(const CPVREpgInfoTagPtr &epgTag) const;
+    std::shared_ptr<CPVRRecording> GetRecordingForEpgTag(const std::shared_ptr<CPVREpgInfoTag> &epgTag) const;
 
   private:
     mutable CCriticalSection m_critSection;
     bool m_bIsUpdating = false;
-    std::map<CPVRRecordingUid, CPVRRecordingPtr> m_recordings;
+    std::map<CPVRRecordingUid, std::shared_ptr<CPVRRecording>> m_recordings;
     unsigned int m_iLastId = 0;
     std::unique_ptr<CVideoDatabase> m_database;
     bool m_bDeletedTVRecordings = false;
diff --git a/xbmc/pvr/timers/PVRTimerInfoTag.cpp b/xbmc/pvr/timers/PVRTimerInfoTag.cpp
index 76a770384708..000ceb907c4e 100644
--- a/xbmc/pvr/timers/PVRTimerInfoTag.cpp
+++ b/xbmc/pvr/timers/PVRTimerInfoTag.cpp
@@ -56,7 +56,7 @@ CPVRTimerInfoTag::CPVRTimerInfoTag(bool bRadio /* = false */) :
 
   std::shared_ptr<CPVRTimerType> type;
 
-  const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
+  const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
   if (client && client->GetClientCapabilities().SupportsTimers())
   {
     // default to first available type for given client
@@ -77,7 +77,7 @@ CPVRTimerInfoTag::CPVRTimerInfoTag(bool bRadio /* = false */) :
   UpdateSummary();
 }
 
-CPVRTimerInfoTag::CPVRTimerInfoTag(const PVR_TIMER &timer, const CPVRChannelPtr &channel, unsigned int iClientId) :
+CPVRTimerInfoTag::CPVRTimerInfoTag(const PVR_TIMER &timer, const std::shared_ptr<CPVRChannel> &channel, unsigned int iClientId) :
   m_strTitle(timer.strTitle),
   m_strEpgSearchString(timer.strEpgSearchString),
   m_bFullTextEpgSearch(timer.bFullTextEpgSearch),
@@ -113,7 +113,7 @@ CPVRTimerInfoTag::CPVRTimerInfoTag(const PVR_TIMER &timer, const CPVRChannelPtr
   if (m_iClientIndex == PVR_TIMER_NO_CLIENT_INDEX)
     CLog::LogF(LOGERROR, "Invalid client index supplied by client %d (must be > 0)!", m_iClientId);
 
-  const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
+  const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
   if (client && client->GetClientCapabilities().SupportsTimers())
   {
     // begin compat section
@@ -348,7 +348,7 @@ void CPVRTimerInfoTag::UpdateSummary(void)
   }
 }
 
-void CPVRTimerInfoTag::SetTimerType(const CPVRTimerTypePtr &type)
+void CPVRTimerInfoTag::SetTimerType(const std::shared_ptr<CPVRTimerType> &type)
 {
   CSingleLock lock(m_critSection);
   m_timerType = type;
@@ -508,7 +508,7 @@ bool CPVRTimerInfoTag::IsOwnedByClient() const
 
 bool CPVRTimerInfoTag::AddToClient(void) const
 {
-  const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
+  const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
   if (client)
     return client->AddTimer(*this) == PVR_ERROR_NO_ERROR;
   return false;
@@ -516,7 +516,7 @@ bool CPVRTimerInfoTag::AddToClient(void) const
 
 TimerOperationResult CPVRTimerInfoTag::DeleteFromClient(bool bForce /* = false */) const
 {
-  const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
+  const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
   PVR_ERROR error = PVR_ERROR_UNKNOWN;
 
   if (client)
@@ -558,7 +558,7 @@ bool CPVRTimerInfoTag::DeleteFromDatabase()
   return false;
 }
 
-bool CPVRTimerInfoTag::UpdateEntry(const CPVRTimerInfoTagPtr &tag)
+bool CPVRTimerInfoTag::UpdateEntry(const std::shared_ptr<CPVRTimerInfoTag> &tag)
 {
   CSingleLock lock(m_critSection);
 
@@ -674,14 +674,14 @@ void CPVRTimerInfoTag::ResetChildState()
 
 bool CPVRTimerInfoTag::UpdateOnClient()
 {
-  const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
+  const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
   return client && (client->UpdateTimer(*this) == PVR_ERROR_NO_ERROR);
 }
 
 std::string CPVRTimerInfoTag::ChannelName() const
 {
   std::string strReturn;
-  CPVRChannelPtr channeltag = Channel();
+  std::shared_ptr<CPVRChannel> channeltag = Channel();
   if (channeltag)
     strReturn = channeltag->ChannelName();
   else if (m_timerType && m_timerType->IsEpgBasedTimerRule())
@@ -693,7 +693,7 @@ std::string CPVRTimerInfoTag::ChannelName() const
 std::string CPVRTimerInfoTag::ChannelIcon() const
 {
   std::string strReturn;
-  CPVRChannelPtr channeltag = Channel();
+  std::shared_ptr<CPVRChannel> channeltag = Channel();
   if (channeltag)
     strReturn = channeltag->IconPath();
   return strReturn;
@@ -734,7 +734,7 @@ std::shared_ptr<CPVRTimerInfoTag> CPVRTimerInfoTag::CreateFromDate(
   if (!channel)
   {
     CLog::LogF(LOGERROR, "No channel");
-    return CPVRTimerInfoTagPtr();
+    return std::shared_ptr<CPVRTimerInfoTag>();
   }
 
   bool bInstantStart = (start == CDateTime(INSTANT_TIMER_START));
@@ -748,7 +748,7 @@ std::shared_ptr<CPVRTimerInfoTag> CPVRTimerInfoTag::CreateFromDate(
       epgTag = channel->GetEPG()->GetTagBetween(start, start + CDateTimeSpan(0, 0, iDuration, 0));
   }
 
-  CPVRTimerInfoTagPtr newTimer;
+  std::shared_ptr<CPVRTimerInfoTag> newTimer;
   if (epgTag)
   {
     if (epgTag->IsRecordable())
@@ -758,7 +758,7 @@ std::shared_ptr<CPVRTimerInfoTag> CPVRTimerInfoTag::CreateFromDate(
     else
     {
       CLog::LogF(LOGERROR, "EPG tag is not recordable");
-      return CPVRTimerInfoTagPtr();
+      return std::shared_ptr<CPVRTimerInfoTag>();
     }
   }
 
@@ -786,7 +786,7 @@ std::shared_ptr<CPVRTimerInfoTag> CPVRTimerInfoTag::CreateFromDate(
     if (!timerType)
     {
       CLog::LogF(LOGERROR, "Unable to create one shot manual timer type");
-      return CPVRTimerInfoTagPtr();
+      return std::shared_ptr<CPVRTimerInfoTag>();
     }
 
     newTimer->SetTimerType(timerType);
@@ -866,14 +866,14 @@ std::shared_ptr<CPVRTimerInfoTag> CPVRTimerInfoTag::CreateFromEpg(
 std::shared_ptr<CPVRTimerInfoTag> CPVRTimerInfoTag::CreateFromEpg(
   const std::shared_ptr<CPVREpgInfoTag>& tag, bool bCreateRule, bool bCreateReminder, bool bReadOnly)
 {
-  CPVRTimerInfoTagPtr newTag(new CPVRTimerInfoTag());
+  std::shared_ptr<CPVRTimerInfoTag> newTag(new CPVRTimerInfoTag());
 
   /* check if a valid channel is set */
   const std::shared_ptr<CPVRChannel> channel = CServiceBroker::GetPVRManager().ChannelGroups()->GetChannelForEpgTag(tag);
   if (!channel)
   {
     CLog::LogF(LOGERROR, "EPG tag has no channel");
-    return CPVRTimerInfoTagPtr();
+    return std::shared_ptr<CPVRTimerInfoTag>();
   }
 
   newTag->m_iClientIndex       = PVR_TIMER_NO_CLIENT_INDEX;
@@ -894,7 +894,7 @@ std::shared_ptr<CPVRTimerInfoTag> CPVRTimerInfoTag::CreateFromEpg(
   const int iMustNotHaveAttribs = PVR_TIMER_TYPE_IS_MANUAL |
                                   PVR_TIMER_TYPE_FORBIDS_NEW_INSTANCES |
                                   PVR_TIMER_TYPE_FORBIDS_EPG_TAG_ON_CREATE;
-  CPVRTimerTypePtr timerType;
+  std::shared_ptr<CPVRTimerType> timerType;
   if (bCreateRule)
   {
     // create epg-based timer rule, prefer rule using series link if available.
@@ -943,7 +943,7 @@ std::shared_ptr<CPVRTimerInfoTag> CPVRTimerInfoTag::CreateFromEpg(
   if (!timerType)
   {
     CLog::LogF(LOGERROR, "Unable to create any epg-based timer type");
-    return CPVRTimerInfoTagPtr();
+    return std::shared_ptr<CPVRTimerInfoTag>();
   }
 
   newTag->SetTimerType(timerType);
@@ -1200,11 +1200,11 @@ void CPVRTimerInfoTag::UpdateEpgInfoTag()
   GetEpgInfoTag();
 }
 
-CPVREpgInfoTagPtr CPVRTimerInfoTag::GetEpgInfoTag(bool bCreate /* = true */) const
+std::shared_ptr<CPVREpgInfoTag> CPVRTimerInfoTag::GetEpgInfoTag(bool bCreate /* = true */) const
 {
   if (!m_epgTag && bCreate && CServiceBroker::GetPVRManager().EpgsCreated())
   {
-    CPVRChannelPtr channel(m_channel);
+    std::shared_ptr<CPVRChannel> channel(m_channel);
     if (!channel)
     {
       channel = CServiceBroker::GetPVRManager().ChannelGroups()->Get(m_bIsRadio)->GetGroupAll()->GetByUniqueID(m_iClientChannelUid, m_iClientId);
@@ -1215,7 +1215,7 @@ CPVREpgInfoTagPtr CPVRTimerInfoTag::GetEpgInfoTag(bool bCreate /* = true */) con
 
     if (channel)
     {
-      const CPVREpgPtr epg(channel->GetEPG());
+      const std::shared_ptr<CPVREpg> epg(channel->GetEPG());
       if (epg)
       {
         CSingleLock lock(m_critSection);
@@ -1257,14 +1257,14 @@ bool CPVRTimerInfoTag::HasChannel() const
   return m_channel.get() != nullptr;
 }
 
-CPVRChannelPtr CPVRTimerInfoTag::Channel() const
+std::shared_ptr<CPVRChannel> CPVRTimerInfoTag::Channel() const
 {
   return m_channel;
 }
 
-CPVRChannelPtr CPVRTimerInfoTag::UpdateChannel(void)
+std::shared_ptr<CPVRChannel> CPVRTimerInfoTag::UpdateChannel(void)
 {
-  const CPVRChannelPtr channel(CServiceBroker::GetPVRManager().ChannelGroups()->Get(m_bIsRadio)->GetGroupAll()->GetByUniqueID(m_iClientChannelUid, m_iClientId));
+  const std::shared_ptr<CPVRChannel> channel(CServiceBroker::GetPVRManager().ChannelGroups()->Get(m_bIsRadio)->GetGroupAll()->GetByUniqueID(m_iClientChannelUid, m_iClientId));
 
   CSingleLock lock(m_critSection);
   m_channel = channel;
diff --git a/xbmc/pvr/timers/PVRTimerInfoTag.h b/xbmc/pvr/timers/PVRTimerInfoTag.h
index 1a4c1e22f48a..4df1b1b9b18a 100644
--- a/xbmc/pvr/timers/PVRTimerInfoTag.h
+++ b/xbmc/pvr/timers/PVRTimerInfoTag.h
@@ -36,7 +36,7 @@ namespace PVR
   {
   public:
     explicit CPVRTimerInfoTag(bool bRadio = false);
-    CPVRTimerInfoTag(const PVR_TIMER &timer, const CPVRChannelPtr &channel, unsigned int iClientId);
+    CPVRTimerInfoTag(const PVR_TIMER &timer, const std::shared_ptr<CPVRChannel> &channel, unsigned int iClientId);
 
     bool operator ==(const CPVRTimerInfoTag& right) const;
     bool operator !=(const CPVRTimerInfoTag& right) const;
@@ -106,7 +106,7 @@ namespace PVR
      * @param bCreate if true, try to find the epg tag if not yet set (lazy evaluation)
      * @return the epg info tag associated with this timer or null if there is no tag
      */
-    CPVREpgInfoTagPtr GetEpgInfoTag(bool bCreate = true) const;
+    std::shared_ptr<CPVREpgInfoTag> GetEpgInfoTag(bool bCreate = true) const;
 
     std::string ChannelName(void) const;
     std::string ChannelIcon(void) const;
@@ -121,14 +121,14 @@ namespace PVR
      * @brief Get the channel associated with this timer, if any.
      * @return the channel or null if non is associated with this timer.
      */
-    CPVRChannelPtr Channel() const;
+    std::shared_ptr<CPVRChannel> Channel() const;
 
     /*!
      * @brief updates this timer excluding the state of any children.
      * @param tag A timer containing the data that shall be merged into this timer's data.
      * @return true if the timer was updated successfully
      */
-    bool UpdateEntry(const CPVRTimerInfoTagPtr &tag);
+    bool UpdateEntry(const std::shared_ptr<CPVRTimerInfoTag> &tag);
 
     /*!
      * @brief merge in the state of this child timer.
@@ -178,13 +178,13 @@ namespace PVR
       * @brief Gets the type of this timer.
       * @return the timer type or NULL if this tag has no timer type.
       */
-    const CPVRTimerTypePtr GetTimerType() const { return m_timerType; }
+    const std::shared_ptr<CPVRTimerType> GetTimerType() const { return m_timerType; }
 
     /*!
       * @brief Sets the type of this timer.
       * @param the new timer type.
       */
-    void SetTimerType(const CPVRTimerTypePtr &type);
+    void SetTimerType(const std::shared_ptr<CPVRTimerType> &type);
 
     /*!
       * @brief Checks whether this is a timer rule (vs. one time timer).
@@ -306,7 +306,7 @@ namespace PVR
      * @brief Update the channel associated with this timer.
      * @return the channel for the timer. Can be empty for epg based repeating timers (e.g. "match any channel" rules)
      */
-    CPVRChannelPtr UpdateChannel(void);
+    std::shared_ptr<CPVRChannel> UpdateChannel(void);
 
     /*!
      * @brief Return string representation for any possible combination of weekdays.
@@ -369,7 +369,7 @@ namespace PVR
     CDateTime             m_StartTime; /*!< start time */
     CDateTime             m_StopTime;  /*!< stop time */
     CDateTime             m_FirstDay;  /*!< if it is a manual timer rule the first date it starts */
-    CPVRTimerTypePtr      m_timerType; /*!< the type of this timer */
+    std::shared_ptr<CPVRTimerType>      m_timerType; /*!< the type of this timer */
 
     unsigned int m_iTVChildTimersActive = 0;
     unsigned int m_iTVChildTimersConflictNOK = 0;
@@ -380,8 +380,8 @@ namespace PVR
     unsigned int m_iRadioChildTimersRecording = 0;
     unsigned int m_iRadioChildTimersErrors = 0;
 
-    mutable CPVREpgInfoTagPtr m_epgTag; /*!< epg info tag matching m_iEpgUid. */
-    mutable CPVRChannelPtr m_channel;
+    mutable std::shared_ptr<CPVREpgInfoTag> m_epgTag; /*!< epg info tag matching m_iEpgUid. */
+    mutable std::shared_ptr<CPVRChannel> m_channel;
 
     mutable XbmcThreads::EndTime m_epTagRefetchTimeout;
   };
diff --git a/xbmc/pvr/timers/PVRTimerType.cpp b/xbmc/pvr/timers/PVRTimerType.cpp
index 9bc60476a86e..5666122fd800 100644
--- a/xbmc/pvr/timers/PVRTimerType.cpp
+++ b/xbmc/pvr/timers/PVRTimerType.cpp
@@ -23,9 +23,9 @@
 
 using namespace PVR;
 
-const std::vector<CPVRTimerTypePtr> CPVRTimerType::GetAllTypes()
+const std::vector<std::shared_ptr<CPVRTimerType>> CPVRTimerType::GetAllTypes()
 {
-  std::vector<CPVRTimerTypePtr> allTypes;
+  std::vector<std::shared_ptr<CPVRTimerType>> allTypes;
   CServiceBroker::GetPVRManager().Clients()->GetTimerTypes(allTypes);
 
   // Add local reminder timer types. Local reminders are always available.
@@ -101,11 +101,11 @@ const std::vector<CPVRTimerTypePtr> CPVRTimerType::GetAllTypes()
   return allTypes;
 }
 
-const CPVRTimerTypePtr CPVRTimerType::GetFirstAvailableType(const std::shared_ptr<CPVRClient>& client)
+const std::shared_ptr<CPVRTimerType> CPVRTimerType::GetFirstAvailableType(const std::shared_ptr<CPVRClient>& client)
 {
   if (client)
   {
-    std::vector<CPVRTimerTypePtr> types;
+    std::vector<std::shared_ptr<CPVRTimerType>> types;
     if (client->GetTimerTypes(types) == PVR_ERROR_NO_ERROR && !types.empty())
     {
       return *(types.begin());
@@ -114,7 +114,7 @@ const CPVRTimerTypePtr CPVRTimerType::GetFirstAvailableType(const std::shared_pt
   return {};
 }
 
-CPVRTimerTypePtr CPVRTimerType::CreateFromIds(unsigned int iTypeId, int iClientId)
+std::shared_ptr<CPVRTimerType> CPVRTimerType::CreateFromIds(unsigned int iTypeId, int iClientId)
 {
   const std::vector<std::shared_ptr<CPVRTimerType>> types = GetAllTypes();
   for (const auto& type : types)
@@ -135,7 +135,7 @@ CPVRTimerTypePtr CPVRTimerType::CreateFromIds(unsigned int iTypeId, int iClientI
   return {};
 }
 
-CPVRTimerTypePtr CPVRTimerType::CreateFromAttributes(
+std::shared_ptr<CPVRTimerType> CPVRTimerType::CreateFromAttributes(
   unsigned int iMustHaveAttr, unsigned int iMustNotHaveAttr, int iClientId)
 {
   const std::vector<std::shared_ptr<CPVRTimerType>> types = GetAllTypes();
diff --git a/xbmc/pvr/timers/PVRTimerType.h b/xbmc/pvr/timers/PVRTimerType.h
index 3b6cedbff409..dede868ac336 100644
--- a/xbmc/pvr/timers/PVRTimerType.h
+++ b/xbmc/pvr/timers/PVRTimerType.h
@@ -33,14 +33,14 @@ namespace PVR
      * @brief Return a list with all known timer types.
      * @return A list of timer types or an empty list if no types available.
      */
-    static const std::vector<CPVRTimerTypePtr> GetAllTypes();
+    static const std::vector<std::shared_ptr<CPVRTimerType>> GetAllTypes();
 
     /*!
      * @brief Return the first available timer type from given client.
      * @param client the PVR client.
      * @return A timer type or NULL if none available.
      */
-    static const CPVRTimerTypePtr GetFirstAvailableType(const std::shared_ptr<CPVRClient>& client);
+    static const std::shared_ptr<CPVRTimerType> GetFirstAvailableType(const std::shared_ptr<CPVRClient>& client);
 
     /*!
      * @brief Create a timer type from given timer type id and client id.
@@ -48,7 +48,7 @@ namespace PVR
      * @param iClientId the PVR client id.
      * @return A timer type instance.
      */
-    static CPVRTimerTypePtr CreateFromIds(unsigned int iTypeId, int iClientId);
+    static std::shared_ptr<CPVRTimerType> CreateFromIds(unsigned int iTypeId, int iClientId);
 
     /*!
      * @brief Create a timer type from given timer type attributes and client id.
@@ -57,7 +57,7 @@ namespace PVR
      * @param iClientId the PVR client id.
      * @return A timer type instance.
      */
-    static CPVRTimerTypePtr CreateFromAttributes(unsigned int iMustHaveAttr, unsigned int iMustNotHaveAttr, int iClientId);
+    static std::shared_ptr<CPVRTimerType> CreateFromAttributes(unsigned int iMustHaveAttr, unsigned int iMustNotHaveAttr, int iClientId);
 
     CPVRTimerType();
     CPVRTimerType(const PVR_TIMER_TYPE &type, int iClientId);
diff --git a/xbmc/pvr/timers/PVRTimers.cpp b/xbmc/pvr/timers/PVRTimers.cpp
index aa24746a899c..b24a4a0b490a 100644
--- a/xbmc/pvr/timers/PVRTimers.cpp
+++ b/xbmc/pvr/timers/PVRTimers.cpp
@@ -33,10 +33,10 @@
 
 using namespace PVR;
 
-bool CPVRTimersContainer::UpdateFromClient(const CPVRTimerInfoTagPtr &timer)
+bool CPVRTimersContainer::UpdateFromClient(const std::shared_ptr<CPVRTimerInfoTag> &timer)
 {
   CSingleLock lock(m_critSection);
-  CPVRTimerInfoTagPtr tag = GetByClient(timer->m_iClientId, timer->m_iClientIndex);
+  std::shared_ptr<CPVRTimerInfoTag> tag = GetByClient(timer->m_iClientId, timer->m_iClientIndex);
   if (!tag)
   {
     tag.reset(new CPVRTimerInfoTag());
@@ -61,7 +61,7 @@ std::shared_ptr<CPVRTimerInfoTag> CPVRTimersContainer::GetByClient(int iClientId
     }
   }
 
-  return CPVRTimerInfoTagPtr();
+  return std::shared_ptr<CPVRTimerInfoTag>();
 }
 
 void CPVRTimersContainer::InsertEntry(const std::shared_ptr<CPVRTimerInfoTag>& newTimer)
@@ -215,7 +215,7 @@ bool CPVRTimers::UpdateEntries(const CPVRTimersContainer &timers, const std::vec
     for (VecTimerInfoTag::const_iterator timerIt = it->second.begin(); timerIt != it->second.end(); ++timerIt)
     {
       /* check if this timer is present in this container */
-      CPVRTimerInfoTagPtr existingTimer = GetByClient((*timerIt)->m_iClientId, (*timerIt)->m_iClientIndex);
+      std::shared_ptr<CPVRTimerInfoTag> existingTimer = GetByClient((*timerIt)->m_iClientId, (*timerIt)->m_iClientIndex);
       if (existingTimer)
       {
         /* if it's present, update the current tag */
@@ -239,7 +239,7 @@ bool CPVRTimers::UpdateEntries(const CPVRTimersContainer &timers, const std::vec
       else
       {
         /* new timer */
-        CPVRTimerInfoTagPtr newTimer = CPVRTimerInfoTagPtr(new CPVRTimerInfoTag);
+        std::shared_ptr<CPVRTimerInfoTag> newTimer = std::shared_ptr<CPVRTimerInfoTag>(new CPVRTimerInfoTag);
         newTimer->UpdateEntry(*timerIt);
         newTimer->m_iTimerId = ++m_iLastId;
         InsertEntry(newTimer);
@@ -263,7 +263,7 @@ bool CPVRTimers::UpdateEntries(const CPVRTimersContainer &timers, const std::vec
   /* check for deleted timers */
   for (MapTags::iterator it = m_tags.begin(); it != m_tags.end();)
   {
-    for (std::vector<CPVRTimerInfoTagPtr>::iterator it2 = it->second.begin(); it2 != it->second.end();)
+    for (std::vector<std::shared_ptr<CPVRTimerInfoTag>>::iterator it2 = it->second.begin(); it2 != it->second.end();)
     {
       const std::shared_ptr<CPVRTimerInfoTag> timer = *it2;
       if (!timers.GetByClient(timer->m_iClientId, timer->m_iClientIndex))
@@ -363,7 +363,7 @@ bool CPVRTimers::UpdateEntries(const CPVRTimersContainer &timers, const std::vec
       /* queue notifications / fill eventlog */
       for (const auto &entry : timerNotifications)
       {
-        const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(entry.first);
+        const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(entry.first);
         if (client)
         {
           job->AddEvent(m_settings.GetBoolValue(CSettings::SETTING_PVRRECORD_TIMERNOTIFICATIONS),
@@ -670,7 +670,7 @@ std::shared_ptr<CPVRTimerInfoTag> CPVRTimers::GetNextReminderToAnnnounce()
   return ret;
 }
 
-bool CPVRTimers::KindMatchesTag(const TimerKind &eKind, const CPVRTimerInfoTagPtr &tag) const
+bool CPVRTimers::KindMatchesTag(const TimerKind &eKind, const std::shared_ptr<CPVRTimerInfoTag> &tag) const
 {
   return (eKind == TimerKindAny) ||
          (eKind == TimerKindTV && !tag->m_bIsRadio) ||
@@ -724,7 +724,7 @@ std::vector<std::shared_ptr<CPVRTimerInfoTag>> CPVRTimers::GetActiveTimers(void)
   {
     for (VecTimerInfoTag::const_iterator timerIt = it->second.begin(); timerIt != it->second.end(); ++timerIt)
     {
-      CPVRTimerInfoTagPtr current = *timerIt;
+      std::shared_ptr<CPVRTimerInfoTag> current = *timerIt;
       if (current->IsActive() &&
           !current->IsBroken() &&
           !current->IsReminder() &&
@@ -850,7 +850,7 @@ int CPVRTimers::AmountActiveRadioRecordings(void) const
 
 /********** channel methods **********/
 
-bool CPVRTimers::DeleteTimersOnChannel(const CPVRChannelPtr &channel, bool bDeleteTimerRules /* = true */, bool bCurrentlyActiveOnly /* = false */)
+bool CPVRTimers::DeleteTimersOnChannel(const std::shared_ptr<CPVRChannel> &channel, bool bDeleteTimerRules /* = true */, bool bCurrentlyActiveOnly /* = false */)
 {
   bool bReturn = false;
   bool bChanged = false;
@@ -917,7 +917,7 @@ std::shared_ptr<CPVRTimerInfoTag> CPVRTimers::UpdateEntry(const std::shared_ptr<
   return bChanged ? tag : std::shared_ptr<CPVRTimerInfoTag>();
 }
 
-bool CPVRTimers::AddTimer(const CPVRTimerInfoTagPtr &tag)
+bool CPVRTimers::AddTimer(const std::shared_ptr<CPVRTimerInfoTag> &tag)
 {
   bool bReturn = false;
   if (tag->IsOwnedByClient())
@@ -931,7 +931,7 @@ bool CPVRTimers::AddTimer(const CPVRTimerInfoTagPtr &tag)
   return bReturn;
 }
 
-TimerOperationResult CPVRTimers::DeleteTimer(const CPVRTimerInfoTagPtr &tag, bool bForce /* = false */, bool bDeleteRule /* = false */)
+TimerOperationResult CPVRTimers::DeleteTimer(const std::shared_ptr<CPVRTimerInfoTag> &tag, bool bForce /* = false */, bool bDeleteRule /* = false */)
 {
   TimerOperationResult ret = TimerOperationResult::FAILED;
   if (!tag)
@@ -965,7 +965,7 @@ TimerOperationResult CPVRTimers::DeleteTimer(const CPVRTimerInfoTagPtr &tag, boo
   return ret;
 }
 
-bool CPVRTimers::RenameTimer(const CPVRTimerInfoTagPtr &tag, const std::string &strNewName)
+bool CPVRTimers::RenameTimer(const std::shared_ptr<CPVRTimerInfoTag> &tag, const std::string &strNewName)
 {
   bool bReturn = false;
   if (tag->IsOwnedByClient())
@@ -979,7 +979,7 @@ bool CPVRTimers::RenameTimer(const CPVRTimerInfoTagPtr &tag, const std::string &
   return bReturn;
 }
 
-bool CPVRTimers::UpdateTimer(const CPVRTimerInfoTagPtr &tag)
+bool CPVRTimers::UpdateTimer(const std::shared_ptr<CPVRTimerInfoTag> &tag)
 {
   bool bReturn = false;
   if (tag->IsOwnedByClient())
@@ -1005,7 +1005,7 @@ bool CPVRTimers::AddLocalTimer(const std::shared_ptr<CPVRTimerInfoTag>& tag, boo
     if (persistedTimer->IsEpgBased())
     {
       // create and persist children of local epg-based timer rule
-      const std::vector<CPVREpgInfoTagPtr> epgTags = GetEpgTagsForTimerRule(CPVRTimerRuleMatcher(persistedTimer,
+      const std::vector<std::shared_ptr<CPVREpgInfoTag>> epgTags = GetEpgTagsForTimerRule(CPVRTimerRuleMatcher(persistedTimer,
                                                                                                  CDateTime::GetUTCDateTime()));
       for (const auto& epgTag : epgTags)
       {
@@ -1147,7 +1147,7 @@ bool CPVRTimers::IsRecordingOnChannel(const CPVRChannel &channel) const
   return false;
 }
 
-CPVRTimerInfoTagPtr CPVRTimers::GetActiveTimerForChannel(const CPVRChannelPtr &channel) const
+std::shared_ptr<CPVRTimerInfoTag> CPVRTimers::GetActiveTimerForChannel(const std::shared_ptr<CPVRChannel> &channel) const
 {
   CSingleLock lock(m_critSection);
   for (const auto &tagsEntry : m_tags)
@@ -1161,10 +1161,10 @@ CPVRTimerInfoTagPtr CPVRTimers::GetActiveTimerForChannel(const CPVRChannelPtr &c
     }
   }
 
-  return CPVRTimerInfoTagPtr();
+  return std::shared_ptr<CPVRTimerInfoTag>();
 }
 
-CPVRTimerInfoTagPtr CPVRTimers::GetTimerForEpgTag(const CPVREpgInfoTagPtr &epgTag) const
+std::shared_ptr<CPVRTimerInfoTag> CPVRTimers::GetTimerForEpgTag(const std::shared_ptr<CPVREpgInfoTag> &epgTag) const
 {
   if (epgTag)
   {
@@ -1196,10 +1196,10 @@ CPVRTimerInfoTagPtr CPVRTimers::GetTimerForEpgTag(const CPVREpgInfoTagPtr &epgTa
     }
   }
 
-  return CPVRTimerInfoTagPtr();
+  return std::shared_ptr<CPVRTimerInfoTag>();
 }
 
-CPVRTimerInfoTagPtr CPVRTimers::GetTimerRule(const CPVRTimerInfoTagPtr &timer) const
+std::shared_ptr<CPVRTimerInfoTag> CPVRTimers::GetTimerRule(const std::shared_ptr<CPVRTimerInfoTag> &timer) const
 {
   if (timer)
   {
@@ -1219,7 +1219,7 @@ CPVRTimerInfoTagPtr CPVRTimers::GetTimerRule(const CPVRTimerInfoTagPtr &timer) c
       }
     }
   }
-  return CPVRTimerInfoTagPtr();
+  return std::shared_ptr<CPVRTimerInfoTag>();
 }
 
 void CPVRTimers::Notify(const PVREvent& event)
@@ -1312,9 +1312,9 @@ std::vector<std::shared_ptr<CPVRTimerInfoTag>> CPVRTimers::GetAll() const
   return timers;
 }
 
-CPVRTimerInfoTagPtr CPVRTimers::GetById(unsigned int iTimerId) const
+std::shared_ptr<CPVRTimerInfoTag> CPVRTimers::GetById(unsigned int iTimerId) const
 {
-  CPVRTimerInfoTagPtr item;
+  std::shared_ptr<CPVRTimerInfoTag> item;
   CSingleLock lock(m_critSection);
   for (MapTags::const_iterator it = m_tags.begin(); !item && it != m_tags.end(); ++it)
   {
diff --git a/xbmc/pvr/timers/PVRTimers.h b/xbmc/pvr/timers/PVRTimers.h
index b3cd774a4a02..3e1994eb3faf 100644
--- a/xbmc/pvr/timers/PVRTimers.h
+++ b/xbmc/pvr/timers/PVRTimers.h
@@ -34,7 +34,7 @@ namespace PVR
      * @param The timer tag
      * @return True, if the update was successful. False, otherwise.
      */
-    bool UpdateFromClient(const CPVRTimerInfoTagPtr &timer);
+    bool UpdateFromClient(const std::shared_ptr<CPVRTimerInfoTag> &timer);
 
     /*!
      * @brief Get the timer tag denoted by given client id and timer id.
@@ -42,9 +42,9 @@ namespace PVR
      * @param iClientIndex The timer id.
      * @return the timer tag if found, null otherwise.
      */
-    CPVRTimerInfoTagPtr GetByClient(int iClientId, int iClientIndex) const;
+    std::shared_ptr<CPVRTimerInfoTag> GetByClient(int iClientId, int iClientIndex) const;
 
-    typedef std::vector<CPVRTimerInfoTagPtr> VecTimerInfoTag;
+    typedef std::vector<std::shared_ptr<CPVRTimerInfoTag>> VecTimerInfoTag;
     typedef std::map<CDateTime, VecTimerInfoTag> MapTags;
 
     /*!
@@ -168,7 +168,7 @@ namespace PVR
      * @param channel The channel to check.
      * @return the timer, null otherwise.
      */
-    CPVRTimerInfoTagPtr GetActiveTimerForChannel(const CPVRChannelPtr &channel) const;
+    std::shared_ptr<CPVRTimerInfoTag> GetActiveTimerForChannel(const std::shared_ptr<CPVRChannel> &channel) const;
 
     /*!
      * @return The amount of tv and radio timers that are currently recording
@@ -192,7 +192,7 @@ namespace PVR
      * @param bCurrentlyActiveOnly True to delete timers that are currently running only.
      * @return True if timers any were deleted, false otherwise.
      */
-    bool DeleteTimersOnChannel(const CPVRChannelPtr &channel, bool bDeleteTimerRules = true, bool bCurrentlyActiveOnly = false);
+    bool DeleteTimersOnChannel(const std::shared_ptr<CPVRChannel> &channel, bool bDeleteTimerRules = true, bool bCurrentlyActiveOnly = false);
 
     /*!
      * @return Next event time (timer or daily wake up)
@@ -235,14 +235,14 @@ namespace PVR
      * @param epgTag The epg tag.
      * @return The requested timer tag, or nullptr if none was found.
      */
-    CPVRTimerInfoTagPtr GetTimerForEpgTag(const CPVREpgInfoTagPtr &epgTag) const;
+    std::shared_ptr<CPVRTimerInfoTag> GetTimerForEpgTag(const std::shared_ptr<CPVREpgInfoTag> &epgTag) const;
 
     /*!
      * @brief Get the timer rule for a given timer tag
      * @param timer The timer to query the timer rule for
      * @return The timer rule, or nullptr if none was found.
      */
-    CPVRTimerInfoTagPtr GetTimerRule(const CPVRTimerInfoTagPtr &timer) const;
+    std::shared_ptr<CPVRTimerInfoTag> GetTimerRule(const std::shared_ptr<CPVRTimerInfoTag> &timer) const;
 
     /*!
      * @brief Update the channel pointers.
@@ -260,7 +260,7 @@ namespace PVR
      * @param iTimerId The ID to find
      * @return The tag, or an empty one when not found
      */
-    CPVRTimerInfoTagPtr GetById(unsigned int iTimerId) const;
+    std::shared_ptr<CPVRTimerInfoTag> GetById(unsigned int iTimerId) const;
 
   private:
     void Process() override;
@@ -285,7 +285,7 @@ namespace PVR
       TimerKindRadio
     };
 
-    bool KindMatchesTag(const TimerKind &eKind, const CPVRTimerInfoTagPtr &tag) const;
+    bool KindMatchesTag(const TimerKind &eKind, const std::shared_ptr<CPVRTimerInfoTag> &tag) const;
 
     std::shared_ptr<CPVRTimerInfoTag> GetNextActiveTimer(const TimerKind& eKind, bool bIgnoreReminders) const;
     int AmountActiveTimers(const TimerKind &eKind) const;
diff --git a/xbmc/pvr/windows/GUIEPGGridContainer.cpp b/xbmc/pvr/windows/GUIEPGGridContainer.cpp
index 279f6c81e74f..cdb467187231 100644
--- a/xbmc/pvr/windows/GUIEPGGridContainer.cpp
+++ b/xbmc/pvr/windows/GUIEPGGridContainer.cpp
@@ -658,7 +658,7 @@ void CGUIEPGGridContainer::UpdateItems()
     return;
 
   /* Safe currently selected epg tag and grid coordinates. Selection shall be restored after update. */
-  CPVREpgInfoTagPtr prevSelectedEpgTag;
+  std::shared_ptr<CPVREpgInfoTag> prevSelectedEpgTag;
   if (m_item)
     prevSelectedEpgTag = m_item->item->GetEPGInfoTag();
 
@@ -708,7 +708,7 @@ void CGUIEPGGridContainer::UpdateItems()
       const GridItem *prevItem(GetPrevItem(m_channelCursor));
       if (prevItem)
       {
-        const CPVREpgInfoTagPtr tag(prevItem->item->GetEPGInfoTag());
+        const std::shared_ptr<CPVREpgInfoTag> tag(prevItem->item->GetEPGInfoTag());
         if (tag && tag->EndAsUTC().IsValid())
         {
           if (oldGridStart >= tag->StartAsUTC())
@@ -1063,7 +1063,7 @@ bool CGUIEPGGridContainer::SetChannel(const std::string &channel)
   return false;
 }
 
-bool CGUIEPGGridContainer::SetChannel(const CPVRChannelPtr &channel)
+bool CGUIEPGGridContainer::SetChannel(const std::shared_ptr<CPVRChannel> &channel)
 {
   for (int iIndex = 0; iIndex < m_gridModel->ChannelItemsSize(); iIndex++)
   {
@@ -1285,7 +1285,7 @@ bool CGUIEPGGridContainer::OnMouseWheel(char wheel, const CPoint &point)
   return true;
 }
 
-CPVRChannelPtr CGUIEPGGridContainer::GetSelectedChannel() const
+std::shared_ptr<CPVRChannel> CGUIEPGGridContainer::GetSelectedChannel() const
 {
   CFileItemPtr fileItem;
   {
@@ -1297,7 +1297,7 @@ CPVRChannelPtr CGUIEPGGridContainer::GetSelectedChannel() const
   if (fileItem && fileItem->HasPVRChannelInfoTag())
     return fileItem->GetPVRChannelInfoTag();
 
-  return CPVRChannelPtr();
+  return std::shared_ptr<CPVRChannel>();
 }
 
 CDateTime CGUIEPGGridContainer::GetSelectedDate() const
diff --git a/xbmc/pvr/windows/GUIEPGGridContainerModel.cpp b/xbmc/pvr/windows/GUIEPGGridContainerModel.cpp
index 5034f59c7086..8a6b7feec306 100644
--- a/xbmc/pvr/windows/GUIEPGGridContainerModel.cpp
+++ b/xbmc/pvr/windows/GUIEPGGridContainerModel.cpp
@@ -170,7 +170,7 @@ void CGUIEPGGridContainerModel::Initialize(const std::unique_ptr<CFileItemList>
     int itemSize          = 1; // size of the programme in blocks
     int savedBlock        = 0;
     CFileItemPtr item;
-    CPVREpgInfoTagPtr tag;
+    std::shared_ptr<CPVREpgInfoTag> tag;
 
     for (int block = 0; block < m_blocks; ++block)
     {
@@ -285,7 +285,7 @@ void CGUIEPGGridContainerModel::FindChannelAndBlockIndex(int channelUid, unsigne
     unsigned long progIdx = m_epgItemsPtr[newChannelIndex].start;
     unsigned long lastIdx = m_epgItemsPtr[newChannelIndex].stop;
     int iEpgId = m_programmeItems[progIdx]->GetEPGInfoTag()->EpgID();
-    CPVREpgInfoTagPtr tag;
+    std::shared_ptr<CPVREpgInfoTag> tag;
     for (int block = 0; block < m_blocks; ++block)
     {
       while (progIdx <= lastIdx)
@@ -447,7 +447,7 @@ int CGUIEPGGridContainerModel::GetNowBlock() const
   return GetBlock(CDateTime::GetUTCDateTime()) - GetPageNowOffset();
 }
 
-int CGUIEPGGridContainerModel::GetFirstEventBlock(const CPVREpgInfoTagPtr &event) const
+int CGUIEPGGridContainerModel::GetFirstEventBlock(const std::shared_ptr<CPVREpgInfoTag> &event) const
 {
   const CDateTime eventStart = event->StartAsUTC();
   int diff;
@@ -465,7 +465,7 @@ int CGUIEPGGridContainerModel::GetFirstEventBlock(const CPVREpgInfoTagPtr &event
   return std::ceil(fBlockIndex);
 }
 
-int CGUIEPGGridContainerModel::GetLastEventBlock(const CPVREpgInfoTagPtr &event) const
+int CGUIEPGGridContainerModel::GetLastEventBlock(const std::shared_ptr<CPVREpgInfoTag> &event) const
 {
   // Last block of a tag is always the block calculated using event's end time, not rounded up.
   // Refer to CGUIEPGGridContainerModel::Refresh, where the model is created, for details!
diff --git a/xbmc/pvr/windows/GUIEPGGridContainerModel.h b/xbmc/pvr/windows/GUIEPGGridContainerModel.h
index adcc37a1f85d..b1dcc8a79f6a 100644
--- a/xbmc/pvr/windows/GUIEPGGridContainerModel.h
+++ b/xbmc/pvr/windows/GUIEPGGridContainerModel.h
@@ -76,8 +76,8 @@ namespace PVR
 
     CDateTime GetStartTimeForBlock(int block) const;
     int GetBlock(const CDateTime &datetime) const;
-    int GetFirstEventBlock(const CPVREpgInfoTagPtr &event) const;
-    int GetLastEventBlock(const CPVREpgInfoTagPtr &event) const;
+    int GetFirstEventBlock(const std::shared_ptr<CPVREpgInfoTag> &event) const;
+    int GetLastEventBlock(const std::shared_ptr<CPVREpgInfoTag> &event) const;
 
   private:
     void FreeItemsMemory();
diff --git a/xbmc/pvr/windows/GUIWindowPVRBase.cpp b/xbmc/pvr/windows/GUIWindowPVRBase.cpp
index f832f19261fa..cf84fb1f59a4 100644
--- a/xbmc/pvr/windows/GUIWindowPVRBase.cpp
+++ b/xbmc/pvr/windows/GUIWindowPVRBase.cpp
@@ -53,12 +53,12 @@ class CGUIPVRChannelGroupsSelector
   bool Initialize(CGUIWindow* parent, bool bRadio);
 
   bool HasFocus() const;
-  CPVRChannelGroupPtr GetSelectedChannelGroup() const;
-  bool SelectChannelGroup(const CPVRChannelGroupPtr &newGroup);
+  std::shared_ptr<CPVRChannelGroup> GetSelectedChannelGroup() const;
+  bool SelectChannelGroup(const std::shared_ptr<CPVRChannelGroup> &newGroup);
 
 private:
   CGUIControl *m_control = nullptr;
-  std::vector<CPVRChannelGroupPtr> m_channelGroups;
+  std::vector<std::shared_ptr<CPVRChannelGroup>> m_channelGroups;
 };
 
 } // namespace PVR
@@ -86,7 +86,7 @@ bool CGUIPVRChannelGroupsSelector::HasFocus() const
   return m_control && m_control->HasFocus();
 }
 
-CPVRChannelGroupPtr CGUIPVRChannelGroupsSelector::GetSelectedChannelGroup() const
+std::shared_ptr<CPVRChannelGroup> CGUIPVRChannelGroupsSelector::GetSelectedChannelGroup() const
 {
   if (m_control)
   {
@@ -99,10 +99,10 @@ CPVRChannelGroupPtr CGUIPVRChannelGroupsSelector::GetSelectedChannelGroup() cons
       return *it;
     }
   }
-  return CPVRChannelGroupPtr();
+  return std::shared_ptr<CPVRChannelGroup>();
 }
 
-bool CGUIPVRChannelGroupsSelector::SelectChannelGroup(const CPVRChannelGroupPtr &newGroup)
+bool CGUIPVRChannelGroupsSelector::SelectChannelGroup(const std::shared_ptr<CPVRChannelGroup> &newGroup)
 {
   if (m_control && newGroup)
   {
@@ -378,7 +378,7 @@ bool CGUIWindowPVRBase::OpenChannelGroupSelectionDialog(void)
   dialog->SetHeading(CVariant{g_localizeStrings.Get(19146)});
   dialog->SetItems(options);
   dialog->SetMultiSelection(false);
-  if (const CPVRChannelGroupPtr channelGroup = GetChannelGroup())
+  if (const std::shared_ptr<CPVRChannelGroup> channelGroup = GetChannelGroup())
   {
     dialog->SetSelected(channelGroup->GroupName());
   }
@@ -427,18 +427,18 @@ bool CGUIWindowPVRBase::InitChannelGroup()
   return false;
 }
 
-CPVRChannelGroupPtr CGUIWindowPVRBase::GetChannelGroup(void)
+std::shared_ptr<CPVRChannelGroup> CGUIWindowPVRBase::GetChannelGroup(void)
 {
   CSingleLock lock(m_critSection);
   return m_channelGroup;
 }
 
-void CGUIWindowPVRBase::SetChannelGroup(CPVRChannelGroupPtr &&group, bool bUpdate /* = true */)
+void CGUIWindowPVRBase::SetChannelGroup(std::shared_ptr<CPVRChannelGroup> &&group, bool bUpdate /* = true */)
 {
   if (!group)
     return;
 
-  CPVRChannelGroupPtr updateChannelGroup;
+  std::shared_ptr<CPVRChannelGroup> updateChannelGroup;
   {
     CSingleLock lock(m_critSection);
     if (m_channelGroup != group)
@@ -504,7 +504,7 @@ void CGUIWindowPVRBase::UpdateButtons(void)
 {
   CGUIMediaWindow::UpdateButtons();
 
-  const CPVRChannelGroupPtr channelGroup = GetChannelGroup();
+  const std::shared_ptr<CPVRChannelGroup> channelGroup = GetChannelGroup();
   if (channelGroup)
   {
     SET_CONTROL_LABEL(CONTROL_BTNCHANNELGROUPS, g_localizeStrings.Get(19141) + ": " + channelGroup->GroupName());
diff --git a/xbmc/pvr/windows/GUIWindowPVRBase.h b/xbmc/pvr/windows/GUIWindowPVRBase.h
index 05fe019c48bf..2d2ced02ef50 100644
--- a/xbmc/pvr/windows/GUIWindowPVRBase.h
+++ b/xbmc/pvr/windows/GUIWindowPVRBase.h
@@ -96,14 +96,14 @@ namespace PVR
      * @brief Get the channel group for this window.
      * @return the group or null, if no group set.
      */
-   CPVRChannelGroupPtr GetChannelGroup(void);
+   std::shared_ptr<CPVRChannelGroup> GetChannelGroup(void);
 
     /*!
      * @brief Set a new channel group, start listening to this group, optionally update window content.
      * @param group The new group.
      * @param bUpdate if true, window content will be updated.
      */
-    void SetChannelGroup(CPVRChannelGroupPtr &&group, bool bUpdate = true);
+    void SetChannelGroup(std::shared_ptr<CPVRChannelGroup> &&group, bool bUpdate = true);
 
     virtual void UpdateSelectedItemPath();
 
@@ -131,7 +131,7 @@ namespace PVR
     void HideProgressDialog(void);
 
     std::unique_ptr<CGUIPVRChannelGroupsSelector> m_channelGroupsSelector;
-    CPVRChannelGroupPtr m_channelGroup;
+    std::shared_ptr<CPVRChannelGroup> m_channelGroup;
     XbmcThreads::EndTime m_refreshTimeout;
     CGUIDialogProgressBarHandle *m_progressHandle; /*!< progress dialog that is displayed while the pvr manager is loading */
   };
diff --git a/xbmc/pvr/windows/GUIWindowPVRChannels.cpp b/xbmc/pvr/windows/GUIWindowPVRChannels.cpp
index a4f1cf305c95..c0369cda71e9 100644
--- a/xbmc/pvr/windows/GUIWindowPVRChannels.cpp
+++ b/xbmc/pvr/windows/GUIWindowPVRChannels.cpp
@@ -270,7 +270,7 @@ bool CGUIWindowPVRChannelsBase::OnContextButtonManage(const CFileItemPtr &item,
 
 void CGUIWindowPVRChannelsBase::UpdateEpg(const CFileItemPtr &item)
 {
-  const CPVRChannelPtr channel(item->GetPVRChannelInfoTag());
+  const std::shared_ptr<CPVRChannel> channel(item->GetPVRChannelInfoTag());
 
   if (!CGUIDialogYesNo::ShowAndGetInput(CVariant{19251}, // "Update guide information"
                                         CVariant{19252}, // "Schedule guide update for this channel?"
@@ -278,7 +278,7 @@ void CGUIWindowPVRChannelsBase::UpdateEpg(const CFileItemPtr &item)
                                         CVariant{channel->ChannelName()}))
     return;
 
-  const CPVREpgPtr epg = channel->GetEPG();
+  const std::shared_ptr<CPVREpg> epg = channel->GetEPG();
   if (epg)
   {
     epg->ForceUpdate();
@@ -339,7 +339,7 @@ void CGUIWindowPVRChannelsBase::OnInputDone()
 
 void CGUIWindowPVRChannelsBase::GetChannelNumbers(std::vector<std::string>& channelNumbers)
 {
-  const CPVRChannelGroupPtr group = GetChannelGroup();
+  const std::shared_ptr<CPVRChannelGroup> group = GetChannelGroup();
   if (group)
     group->GetChannelNumbers(channelNumbers);
 }
diff --git a/xbmc/pvr/windows/GUIWindowPVRGuide.cpp b/xbmc/pvr/windows/GUIWindowPVRGuide.cpp
index d5035569ca6c..61789443e533 100644
--- a/xbmc/pvr/windows/GUIWindowPVRGuide.cpp
+++ b/xbmc/pvr/windows/GUIWindowPVRGuide.cpp
@@ -184,7 +184,7 @@ void CGUIWindowPVRGuideBase::UpdateSelectedItemPath()
   CGUIEPGGridContainer *epgGridContainer = GetGridControl();
   if (epgGridContainer)
   {
-    CPVRChannelPtr channel(epgGridContainer->GetSelectedChannel());
+    std::shared_ptr<CPVRChannel> channel(epgGridContainer->GetSelectedChannel());
     if (channel)
       CServiceBroker::GetPVRManager().GUIActions()->SetSelectedItemPath(m_bRadio, channel->Path());
   }
@@ -434,7 +434,7 @@ bool CGUIWindowPVRGuideBase::OnMessage(CGUIMessage& message)
                   break;
                 case EPG_SELECT_ACTION_SMART_SELECT:
                 {
-                  const CPVREpgInfoTagPtr tag(pItem->GetEPGInfoTag());
+                  const std::shared_ptr<CPVREpgInfoTag> tag(pItem->GetEPGInfoTag());
                   if (tag)
                   {
                     const CDateTime start(tag->StartAsUTC());
@@ -626,7 +626,7 @@ bool CGUIWindowPVRGuideBase::RefreshTimelineItems()
     CGUIEPGGridContainer* epgGridContainer = GetGridControl();
     if (epgGridContainer)
     {
-      const CPVRChannelGroupPtr group(GetChannelGroup());
+      const std::shared_ptr<CPVRChannelGroup> group(GetChannelGroup());
       if (!group)
         return false;
 
@@ -761,7 +761,7 @@ void CGUIWindowPVRGuideBase::OnInputDone()
 
 void CGUIWindowPVRGuideBase::GetChannelNumbers(std::vector<std::string>& channelNumbers)
 {
-  const CPVRChannelGroupPtr group = GetChannelGroup();
+  const std::shared_ptr<CPVRChannelGroup> group = GetChannelGroup();
   if (group)
     group->GetChannelNumbers(channelNumbers);
 }
diff --git a/xbmc/pvr/windows/GUIWindowPVRGuide.h b/xbmc/pvr/windows/GUIWindowPVRGuide.h
index 3836a95c8388..4687e8358fee 100644
--- a/xbmc/pvr/windows/GUIWindowPVRGuide.h
+++ b/xbmc/pvr/windows/GUIWindowPVRGuide.h
@@ -80,7 +80,7 @@ namespace PVR
     std::atomic_bool m_bRefreshTimelineItems;
     std::atomic_bool m_bSyncRefreshTimelineItems;
 
-    CPVRChannelGroupPtr m_cachedChannelGroup;
+    std::shared_ptr<CPVRChannelGroup> m_cachedChannelGroup;
     std::unique_ptr<CFileItemList> m_newTimeline;
 
     bool m_bChannelSelectionRestored;
diff --git a/xbmc/pvr/windows/GUIWindowPVRRecordings.cpp b/xbmc/pvr/windows/GUIWindowPVRRecordings.cpp
index 0278118ed904..25d163cb2fcd 100644
--- a/xbmc/pvr/windows/GUIWindowPVRRecordings.cpp
+++ b/xbmc/pvr/windows/GUIWindowPVRRecordings.cpp
@@ -71,7 +71,7 @@ void CGUIWindowPVRRecordingsBase::GetContextButtons(int itemNumber, CContextButt
 
   bool isDeletedRecording = false;
 
-  CPVRRecordingPtr recording(pItem->GetPVRRecordingInfoTag());
+  std::shared_ptr<CPVRRecording> recording(pItem->GetPVRRecordingInfoTag());
   if (recording)
   {
     isDeletedRecording = recording->IsDeleted();
diff --git a/xbmc/pvr/windows/GUIWindowPVRSearch.cpp b/xbmc/pvr/windows/GUIWindowPVRSearch.cpp
index 396aef4fa406..e31b38d96e6b 100644
--- a/xbmc/pvr/windows/GUIWindowPVRSearch.cpp
+++ b/xbmc/pvr/windows/GUIWindowPVRSearch.cpp
@@ -123,7 +123,7 @@ void CGUIWindowPVRSearchBase::SetItemToSearch(const CFileItemPtr &item)
   }
   else
   {
-    const CPVREpgInfoTagPtr epgTag(CPVRItem(item).GetEpgInfoTag());
+    const std::shared_ptr<CPVREpgInfoTag> epgTag(CPVRItem(item).GetEpgInfoTag());
     if (epgTag && !CServiceBroker::GetPVRManager().IsParentalLocked(epgTag))
       m_searchfilter->SetSearchPhrase(epgTag->Title());
   }
diff --git a/xbmc/pvr/windows/GUIWindowPVRTimersBase.cpp b/xbmc/pvr/windows/GUIWindowPVRTimersBase.cpp
index fdb0afd46739..c91e2574fdf7 100644
--- a/xbmc/pvr/windows/GUIWindowPVRTimersBase.cpp
+++ b/xbmc/pvr/windows/GUIWindowPVRTimersBase.cpp
@@ -81,7 +81,7 @@ void CGUIWindowPVRTimersBase::UpdateButtons(void)
   std::string strHeaderTitle;
   if (m_currentFileItem && m_currentFileItem->HasPVRTimerInfoTag())
   {
-    CPVRTimerInfoTagPtr timer = m_currentFileItem->GetPVRTimerInfoTag();
+    std::shared_ptr<CPVRTimerInfoTag> timer = m_currentFileItem->GetPVRTimerInfoTag();
     strHeaderTitle = timer->Title();
   }
 

From 030827fc364b07965de01ea6fee518c1458d4f09 Mon Sep 17 00:00:00 2001
From: phunkyfish <phunkyfish@gmail.com>
Date: Wed, 25 Sep 2019 22:57:33 +0100
Subject: [PATCH 3/7] Refactor out PVR::CPVR*Ptr classes

---
 xbmc/FileItem.h                              | 28 ++++++++++----------
 xbmc/cores/VideoPlayer/VideoPlayerRadioRDS.h |  5 ++--
 xbmc/interfaces/AnnouncementManager.cpp      |  2 +-
 xbmc/interfaces/builtins/PlayerBuiltins.cpp  |  4 +--
 xbmc/interfaces/json-rpc/PVROperations.h     |  4 ++-
 xbmc/interfaces/json-rpc/PlayerOperations.h  |  2 +-
 xbmc/interfaces/legacy/InfoTagRadioRDS.cpp   |  2 +-
 xbmc/interfaces/legacy/InfoTagRadioRDS.h     |  6 +++--
 8 files changed, 29 insertions(+), 24 deletions(-)

diff --git a/xbmc/FileItem.h b/xbmc/FileItem.h
index 98fa458046e3..c7d0d0942bb8 100644
--- a/xbmc/FileItem.h
+++ b/xbmc/FileItem.h
@@ -103,10 +103,10 @@ class CFileItem :
   explicit CFileItem(const CGenre& genre);
   explicit CFileItem(const MUSIC_INFO::CMusicInfoTag& music);
   explicit CFileItem(const CVideoInfoTag& movie);
-  explicit CFileItem(const PVR::CPVREpgInfoTagPtr& tag);
-  explicit CFileItem(const PVR::CPVRChannelPtr& channel);
-  explicit CFileItem(const PVR::CPVRRecordingPtr& record);
-  explicit CFileItem(const PVR::CPVRTimerInfoTagPtr& timer);
+  explicit CFileItem(const std::shared_ptr<PVR::CPVREpgInfoTag>& tag);
+  explicit CFileItem(const std::shared_ptr<PVR::CPVRChannel>& channel);
+  explicit CFileItem(const std::shared_ptr<PVR::CPVRRecording>& record);
+  explicit CFileItem(const std::shared_ptr<PVR::CPVRTimerInfoTag>& timer);
   explicit CFileItem(const CMediaSource& share);
   explicit CFileItem(std::shared_ptr<const ADDON::IAddon> addonInfo);
   explicit CFileItem(const EventPtr& eventLogEntry);
@@ -277,12 +277,12 @@ class CFileItem :
     return m_epgInfoTag.get() != NULL;
   }
 
-  inline const PVR::CPVREpgInfoTagPtr GetEPGInfoTag() const
+  inline const std::shared_ptr<PVR::CPVREpgInfoTag> GetEPGInfoTag() const
   {
     return m_epgInfoTag;
   }
 
-  inline void SetEPGInfoTag(const PVR::CPVREpgInfoTagPtr& tag)
+  inline void SetEPGInfoTag(const std::shared_ptr<PVR::CPVREpgInfoTag>& tag)
   {
     m_epgInfoTag = tag;
   }
@@ -292,7 +292,7 @@ class CFileItem :
     return m_pvrChannelInfoTag.get() != NULL;
   }
 
-  inline const PVR::CPVRChannelPtr GetPVRChannelInfoTag() const
+  inline const std::shared_ptr<PVR::CPVRChannel> GetPVRChannelInfoTag() const
   {
     return m_pvrChannelInfoTag;
   }
@@ -302,7 +302,7 @@ class CFileItem :
     return m_pvrRecordingInfoTag.get() != NULL;
   }
 
-  inline const PVR::CPVRRecordingPtr GetPVRRecordingInfoTag() const
+  inline const std::shared_ptr<PVR::CPVRRecording> GetPVRRecordingInfoTag() const
   {
     return m_pvrRecordingInfoTag;
   }
@@ -312,7 +312,7 @@ class CFileItem :
     return m_pvrTimerInfoTag != NULL;
   }
 
-  inline const PVR::CPVRTimerInfoTagPtr GetPVRTimerInfoTag() const
+  inline const std::shared_ptr<PVR::CPVRTimerInfoTag> GetPVRTimerInfoTag() const
   {
     return m_pvrTimerInfoTag;
   }
@@ -550,7 +550,7 @@ class CFileItem :
   /*!
    \brief If given channel is radio, fill item's music tag from given epg tag and channel info.
    */
-  void FillMusicInfoTag(const PVR::CPVRChannelPtr& channel, const PVR::CPVREpgInfoTagPtr& tag);
+  void FillMusicInfoTag(const std::shared_ptr<PVR::CPVRChannel>& channel, const std::shared_ptr<PVR::CPVREpgInfoTag>& tag);
 
   std::string m_strPath;            ///< complete path to item
   std::string m_strDynPath;
@@ -564,10 +564,10 @@ class CFileItem :
   bool m_doContentLookup;
   MUSIC_INFO::CMusicInfoTag* m_musicInfoTag;
   CVideoInfoTag* m_videoInfoTag;
-  PVR::CPVREpgInfoTagPtr m_epgInfoTag;
-  PVR::CPVRChannelPtr m_pvrChannelInfoTag;
-  PVR::CPVRRecordingPtr m_pvrRecordingInfoTag;
-  PVR::CPVRTimerInfoTagPtr m_pvrTimerInfoTag;
+  std::shared_ptr<PVR::CPVREpgInfoTag> m_epgInfoTag;
+  std::shared_ptr<PVR::CPVRChannel> m_pvrChannelInfoTag;
+  std::shared_ptr<PVR::CPVRRecording> m_pvrRecordingInfoTag;
+  std::shared_ptr<PVR::CPVRTimerInfoTag> m_pvrTimerInfoTag;
   CPictureInfoTag* m_pictureInfoTag;
   std::shared_ptr<const ADDON::IAddon> m_addonInfo;
   KODI::GAME::CGameInfoTag* m_gameInfoTag;
diff --git a/xbmc/cores/VideoPlayer/VideoPlayerRadioRDS.h b/xbmc/cores/VideoPlayer/VideoPlayerRadioRDS.h
index d24f02529020..bfcaf0c97429 100644
--- a/xbmc/cores/VideoPlayer/VideoPlayerRadioRDS.h
+++ b/xbmc/cores/VideoPlayer/VideoPlayerRadioRDS.h
@@ -15,6 +15,7 @@
 #include "utils/Stopwatch.h"
 
 #include <deque>
+#include <memory>
 
 class CDVDStreamInfo;
 
@@ -80,8 +81,8 @@ class CDVDRadioRDSData : public CThread, public IDVDStreamPlayer
   void SendTMCSignal(unsigned int flags, uint8_t *data);
   void SetRadioStyle(std::string genre);
 
-  PVR::CPVRRadioRDSInfoTagPtr m_currentInfoTag;
-  PVR::CPVRChannelPtr         m_currentChannel;
+  std::shared_ptr<PVR::CPVRRadioRDSInfoTag> m_currentInfoTag;
+  std::shared_ptr<PVR::CPVRChannel>         m_currentChannel;
   bool                        m_currentFileUpdate;
   int                         m_speed;
   CCriticalSection            m_critSection;
diff --git a/xbmc/interfaces/AnnouncementManager.cpp b/xbmc/interfaces/AnnouncementManager.cpp
index c91d71a22000..260a5abf826b 100644
--- a/xbmc/interfaces/AnnouncementManager.cpp
+++ b/xbmc/interfaces/AnnouncementManager.cpp
@@ -136,7 +136,7 @@ void CAnnouncementManager::DoAnnounce(AnnouncementFlag flag, const char *sender,
 
   if(item->HasPVRChannelInfoTag())
   {
-    const PVR::CPVRChannelPtr channel(item->GetPVRChannelInfoTag());
+    const std::shared_ptr<PVR::CPVRChannel> channel(item->GetPVRChannelInfoTag());
     id = channel->ChannelID();
     type = "channel";
 
diff --git a/xbmc/interfaces/builtins/PlayerBuiltins.cpp b/xbmc/interfaces/builtins/PlayerBuiltins.cpp
index 14b9c59decf9..bd1b054945e4 100644
--- a/xbmc/interfaces/builtins/PlayerBuiltins.cpp
+++ b/xbmc/interfaces/builtins/PlayerBuiltins.cpp
@@ -333,7 +333,7 @@ static int PlayerControl(const std::vector<std::string>& params)
   else if (StringUtils::StartsWithNoCase(params[0], "resumelivetv"))
   {
     CFileItem& fileItem(g_application.CurrentFileItem());
-    PVR::CPVRChannelPtr channel = fileItem.HasPVRRecordingInfoTag() ? fileItem.GetPVRRecordingInfoTag()->Channel() : PVR::CPVRChannelPtr();
+    std::shared_ptr<PVR::CPVRChannel> channel = fileItem.HasPVRRecordingInfoTag() ? fileItem.GetPVRRecordingInfoTag()->Channel() : std::shared_ptr<PVR::CPVRChannel>();
 
     if (channel)
     {
@@ -530,7 +530,7 @@ static int Seek(const std::vector<std::string>& params)
 ///     <br>
 ///     | Control                 | Video playback behaviour               | Audio playback behaviour    | Added in    |
 ///     |:------------------------|:---------------------------------------|:----------------------------|:------------|
-///     | Play                    | Play/Pause                             | Play/Pause                  |             | 
+///     | Play                    | Play/Pause                             | Play/Pause                  |             |
 ///     | Stop                    | Stop                                   | Stop                        |             |
 ///     | Forward                 | Fast Forward                           | Fast Forward                |             |
 ///     | Rewind                  | Rewind                                 | Rewind                      |             |
diff --git a/xbmc/interfaces/json-rpc/PVROperations.h b/xbmc/interfaces/json-rpc/PVROperations.h
index 378778926e63..d75df45f22f8 100644
--- a/xbmc/interfaces/json-rpc/PVROperations.h
+++ b/xbmc/interfaces/json-rpc/PVROperations.h
@@ -11,6 +11,8 @@
 #include "FileItemHandler.h"
 #include "pvr/channels/PVRChannelGroup.h"
 
+#include <memory>
+
 class CVariant;
 
 namespace JSONRPC
@@ -39,6 +41,6 @@ namespace JSONRPC
 
   private:
     static JSONRPC_STATUS GetPropertyValue(const std::string &property, CVariant &result);
-    static void FillChannelGroupDetails(const PVR::CPVRChannelGroupPtr &channelGroup, const CVariant &parameterObject, CVariant &result, bool append = false);
+    static void FillChannelGroupDetails(const std::shared_ptr<PVR::CPVRChannelGroup> &channelGroup, const CVariant &parameterObject, CVariant &result, bool append = false);
   };
 }
diff --git a/xbmc/interfaces/json-rpc/PlayerOperations.h b/xbmc/interfaces/json-rpc/PlayerOperations.h
index 0959b439f572..afe7fa0607a2 100644
--- a/xbmc/interfaces/json-rpc/PlayerOperations.h
+++ b/xbmc/interfaces/json-rpc/PlayerOperations.h
@@ -69,6 +69,6 @@ namespace JSONRPC
     static int ParseRepeatState(const CVariant &repeat);
     static double ParseTimeInSeconds(const CVariant &time);
     static bool IsPVRChannel();
-    static PVR::CPVREpgInfoTagPtr GetCurrentEpg();
+    static std::shared_ptr<PVR::CPVREpgInfoTag> GetCurrentEpg();
   };
 }
diff --git a/xbmc/interfaces/legacy/InfoTagRadioRDS.cpp b/xbmc/interfaces/legacy/InfoTagRadioRDS.cpp
index f93330e9c23d..6126686f8e3b 100644
--- a/xbmc/interfaces/legacy/InfoTagRadioRDS.cpp
+++ b/xbmc/interfaces/legacy/InfoTagRadioRDS.cpp
@@ -17,7 +17,7 @@ namespace XBMCAddon
   {
     InfoTagRadioRDS::InfoTagRadioRDS() = default;
 
-    InfoTagRadioRDS::InfoTagRadioRDS(const PVR::CPVRChannelPtr& channel)
+    InfoTagRadioRDS::InfoTagRadioRDS(const std::shared_ptr<PVR::CPVRChannel>& channel)
     {
       if (channel)
         infoTag = channel->GetRadioRDSInfoTag();
diff --git a/xbmc/interfaces/legacy/InfoTagRadioRDS.h b/xbmc/interfaces/legacy/InfoTagRadioRDS.h
index 18f9e0fd1bb1..b086e536ff7d 100644
--- a/xbmc/interfaces/legacy/InfoTagRadioRDS.h
+++ b/xbmc/interfaces/legacy/InfoTagRadioRDS.h
@@ -12,6 +12,8 @@
 #include "pvr/PVRTypes.h"
 #include "pvr/channels/PVRRadioRDSInfoTag.h"
 
+#include <memory>
+
 namespace XBMCAddon
 {
   namespace xbmc
@@ -46,11 +48,11 @@ namespace XBMCAddon
     class InfoTagRadioRDS : public AddonClass
     {
     private:
-      PVR::CPVRRadioRDSInfoTagPtr infoTag;
+      std::shared_ptr<PVR::CPVRRadioRDSInfoTag> infoTag;
 
     public:
 #ifndef SWIG
-      explicit InfoTagRadioRDS(const PVR::CPVRChannelPtr& channel);
+      explicit InfoTagRadioRDS(const std::shared_ptr<PVR::CPVRChannel>& channel);
 #endif
       InfoTagRadioRDS();
       ~InfoTagRadioRDS() override;

From 83917ccf9346d0989f1ad06e66e023576d45eb12 Mon Sep 17 00:00:00 2001
From: phunkyfish <phunkyfish@gmail.com>
Date: Wed, 25 Sep 2019 23:05:10 +0100
Subject: [PATCH 4/7] Refactor out remaining CPVR*Ptr classes

---
 xbmc/FileItem.cpp                             | 18 ++++----
 xbmc/addons/PVRClient.cpp                     | 26 +++++------
 xbmc/addons/PVRClient.h                       | 16 +++----
 xbmc/interfaces/json-rpc/PVROperations.cpp    | 44 +++++++++----------
 xbmc/interfaces/json-rpc/PlayerOperations.cpp | 36 +++++++--------
 5 files changed, 69 insertions(+), 71 deletions(-)

diff --git a/xbmc/FileItem.cpp b/xbmc/FileItem.cpp
index d00c7022106f..6cb6d460ef21 100644
--- a/xbmc/FileItem.cpp
+++ b/xbmc/FileItem.cpp
@@ -128,7 +128,7 @@ namespace
   }
 } // unnamed namespace
 
-void CFileItem::FillMusicInfoTag(const CPVRChannelPtr& channel, const CPVREpgInfoTagPtr& tag)
+void CFileItem::FillMusicInfoTag(const std::shared_ptr<CPVRChannel>& channel, const std::shared_ptr<CPVREpgInfoTag>& tag)
 {
   if (channel && channel->IsRadio() && !HasMusicInfoTag())
   {
@@ -153,7 +153,7 @@ void CFileItem::FillMusicInfoTag(const CPVRChannelPtr& channel, const CPVREpgInf
   }
 }
 
-CFileItem::CFileItem(const CPVREpgInfoTagPtr& tag)
+CFileItem::CFileItem(const std::shared_ptr<CPVREpgInfoTag>& tag)
 {
   Initialize();
 
@@ -180,11 +180,11 @@ CFileItem::CFileItem(const CPVREpgInfoTagPtr& tag)
   FillInMimeType(false);
 }
 
-CFileItem::CFileItem(const CPVRChannelPtr& channel)
+CFileItem::CFileItem(const std::shared_ptr<CPVRChannel>& channel)
 {
   Initialize();
 
-  CPVREpgInfoTagPtr epgNow(channel->GetEPGNow());
+  std::shared_ptr<CPVREpgInfoTag> epgNow(channel->GetEPGNow());
 
   m_strPath = channel->Path();
   m_bIsFolder = false;
@@ -206,7 +206,7 @@ CFileItem::CFileItem(const CPVRChannelPtr& channel)
   FillInMimeType(false);
 }
 
-CFileItem::CFileItem(const CPVRRecordingPtr& record)
+CFileItem::CFileItem(const std::shared_ptr<CPVRRecording>& record)
 {
   Initialize();
 
@@ -231,7 +231,7 @@ CFileItem::CFileItem(const CPVRRecordingPtr& record)
   FillInMimeType(false);
 }
 
-CFileItem::CFileItem(const CPVRTimerInfoTagPtr& timer)
+CFileItem::CFileItem(const std::shared_ptr<CPVRTimerInfoTag>& timer)
 {
   Initialize();
 
@@ -1197,9 +1197,9 @@ bool CFileItem::IsBluray() const
 {
   if (URIUtils::IsBluray(m_strPath))
     return true;
-  
+
   CFileItem item = CFileItem(GetOpticalMediaPath(), false);
-  
+
   return item.IsBDFile();
 }
 
@@ -1507,7 +1507,7 @@ void CFileItem::FillInMimeType(bool lookup /*= true*/)
   }
 
   // change protocol to mms for the following mime-type.  Allows us to create proper FileMMS.
-  if(StringUtils::StartsWithNoCase(m_mimetype, "application/vnd.ms.wms-hdr.asfv1") || 
+  if(StringUtils::StartsWithNoCase(m_mimetype, "application/vnd.ms.wms-hdr.asfv1") ||
      StringUtils::StartsWithNoCase(m_mimetype, "application/x-mms-framed"))
   {
     if (m_strDynPath.empty())
diff --git a/xbmc/addons/PVRClient.cpp b/xbmc/addons/PVRClient.cpp
index 13de0345b13e..e32062f70003 100644
--- a/xbmc/addons/PVRClient.cpp
+++ b/xbmc/addons/PVRClient.cpp
@@ -314,7 +314,7 @@ void CPVRClient::WriteClientTimerInfo(const CPVRTimerInfoTag &xbmcTimer, PVR_TIM
   xbmcTimer.StartAsUTC().GetAsTime(start);
   xbmcTimer.EndAsUTC().GetAsTime(end);
   xbmcTimer.FirstDayAsUTC().GetAsTime(firstDay);
-  CPVREpgInfoTagPtr epgTag = xbmcTimer.GetEpgInfoTag();
+  std::shared_ptr<CPVREpgInfoTag> epgTag = xbmcTimer.GetEpgInfoTag();
 
   int iPVRTimeCorrection = CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->m_iPVRTimeCorrection;
 
@@ -353,7 +353,7 @@ void CPVRClient::WriteClientTimerInfo(const CPVRTimerInfoTag &xbmcTimer, PVR_TIM
  * @param xbmcChannel The channel on XBMC's side.
  * @param addonChannel The channel on the addon's side.
  */
-void CPVRClient::WriteClientChannelInfo(const CPVRChannelPtr &xbmcChannel, PVR_CHANNEL &addonChannel)
+void CPVRClient::WriteClientChannelInfo(const std::shared_ptr<CPVRChannel> &xbmcChannel, PVR_CHANNEL &addonChannel)
 {
   addonChannel = {0};
   addonChannel.iUniqueId         = xbmcChannel->UniqueID();
@@ -487,7 +487,7 @@ bool CPVRClient::GetAddonProperties(void)
           CLog::LogF(LOGERROR, "Invalid timer type supplied by add-on '%s'. Please contact the developer of this add-on: %s", GetFriendlyName().c_str(), Author().c_str());
           continue;
         }
-        timerTypes.emplace_back(CPVRTimerTypePtr(new CPVRTimerType(types_array[i], m_iClientId)));
+        timerTypes.emplace_back(std::shared_ptr<CPVRTimerType>(new CPVRTimerType(types_array[i], m_iClientId)));
       }
     }
     return retval;
@@ -560,7 +560,7 @@ PVR_ERROR CPVRClient::StartChannelScan(void)
   }, m_clientCapabilities.SupportsChannelScan());
 }
 
-PVR_ERROR CPVRClient::OpenDialogChannelAdd(const CPVRChannelPtr &channel)
+PVR_ERROR CPVRClient::OpenDialogChannelAdd(const std::shared_ptr<CPVRChannel> &channel)
 {
   return DoAddonCall(__FUNCTION__, [channel](const AddonInstance* addon) {
     PVR_CHANNEL addonChannel;
@@ -569,7 +569,7 @@ PVR_ERROR CPVRClient::OpenDialogChannelAdd(const CPVRChannelPtr &channel)
   }, m_clientCapabilities.SupportsChannelSettings());
 }
 
-PVR_ERROR CPVRClient::OpenDialogChannelSettings(const CPVRChannelPtr &channel)
+PVR_ERROR CPVRClient::OpenDialogChannelSettings(const std::shared_ptr<CPVRChannel> &channel)
 {
   return DoAddonCall(__FUNCTION__, [channel] (const AddonInstance* addon){
     PVR_CHANNEL addonChannel;
@@ -578,7 +578,7 @@ PVR_ERROR CPVRClient::OpenDialogChannelSettings(const CPVRChannelPtr &channel)
   }, m_clientCapabilities.SupportsChannelSettings());
 }
 
-PVR_ERROR CPVRClient::DeleteChannel(const CPVRChannelPtr &channel)
+PVR_ERROR CPVRClient::DeleteChannel(const std::shared_ptr<CPVRChannel> &channel)
 {
   return DoAddonCall(__FUNCTION__, [channel](const AddonInstance* addon) {
     PVR_CHANNEL addonChannel;
@@ -587,7 +587,7 @@ PVR_ERROR CPVRClient::DeleteChannel(const CPVRChannelPtr &channel)
   }, m_clientCapabilities.SupportsChannelSettings());
 }
 
-PVR_ERROR CPVRClient::RenameChannel(const CPVRChannelPtr &channel)
+PVR_ERROR CPVRClient::RenameChannel(const std::shared_ptr<CPVRChannel> &channel)
 {
   return DoAddonCall(__FUNCTION__, [channel](const AddonInstance* addon) {
     PVR_CHANNEL addonChannel;
@@ -1181,7 +1181,7 @@ PVR_ERROR CPVRClient::DoAddonCall(const char* strFunctionName, std::function<PVR
   return error;
 }
 
-bool CPVRClient::CanPlayChannel(const CPVRChannelPtr &channel) const
+bool CPVRClient::CanPlayChannel(const std::shared_ptr<CPVRChannel> &channel) const
 {
   return (m_bReadyToUse &&
            ((m_clientCapabilities.SupportsTV() && !channel->IsRadio()) ||
@@ -1486,7 +1486,7 @@ void CPVRClient::cb_transfer_channel_group_member(void *kodiInstance, const ADDO
     return;
   }
 
-  CPVRChannelPtr channel  = CServiceBroker::GetPVRManager().ChannelGroups()->GetByUniqueID(member->iChannelUniqueId, client->GetID());
+  std::shared_ptr<CPVRChannel> channel  = CServiceBroker::GetPVRManager().ChannelGroups()->GetByUniqueID(member->iChannelUniqueId, client->GetID());
   if (!channel)
   {
     CLog::LogF(LOGERROR, "Cannot find group '%s' or channel '%d'", member->strGroupName, member->iChannelUniqueId);
@@ -1535,7 +1535,7 @@ void CPVRClient::cb_transfer_channel_entry(void *kodiInstance, const ADDON_HANDL
   }
 
   /* transfer this entry to the internal channels group */
-  CPVRChannelPtr transferChannel(new CPVRChannel(*channel, client->GetID()));
+  std::shared_ptr<CPVRChannel> transferChannel(new CPVRChannel(*channel, client->GetID()));
   kodiChannels->UpdateFromClient(transferChannel, CPVRChannelNumber(), channel->iOrder, transferChannel->ClientChannelNumber());
 }
 
@@ -1556,7 +1556,7 @@ void CPVRClient::cb_transfer_recording_entry(void *kodiInstance, const ADDON_HAN
   }
 
   /* transfer this entry to the recordings container */
-  CPVRRecordingPtr transferRecording(new CPVRRecording(*recording, client->GetID()));
+  std::shared_ptr<CPVRRecording> transferRecording(new CPVRRecording(*recording, client->GetID()));
   kodiRecordings->UpdateFromClient(transferRecording);
 }
 
@@ -1577,10 +1577,10 @@ void CPVRClient::cb_transfer_timer_entry(void *kodiInstance, const ADDON_HANDLE
   }
 
   /* Note: channel can be NULL here, for instance for epg-based timer rules ("record on any channel" condition). */
-  CPVRChannelPtr channel = CServiceBroker::GetPVRManager().ChannelGroups()->GetByUniqueID(timer->iClientChannelUid, client->GetID());
+  std::shared_ptr<CPVRChannel> channel = CServiceBroker::GetPVRManager().ChannelGroups()->GetByUniqueID(timer->iClientChannelUid, client->GetID());
 
   /* transfer this entry to the timers container */
-  CPVRTimerInfoTagPtr transferTimer(new CPVRTimerInfoTag(*timer, channel, client->GetID()));
+  std::shared_ptr<CPVRTimerInfoTag> transferTimer(new CPVRTimerInfoTag(*timer, channel, client->GetID()));
   kodiTimers->UpdateFromClient(transferTimer);
 }
 
diff --git a/xbmc/addons/PVRClient.h b/xbmc/addons/PVRClient.h
index c5a0a89c7d0e..7d25d03344d2 100644
--- a/xbmc/addons/PVRClient.h
+++ b/xbmc/addons/PVRClient.h
@@ -26,12 +26,10 @@ namespace PVR
   class CPVRClientMenuHooks;
   class CPVRStreamProperties;
   class CPVRTimersContainer;
-
   class CPVRClient;
-  typedef std::shared_ptr<CPVRClient> CPVRClientPtr;
 
   class CPVRTimerType;
-  typedef std::vector<CPVRTimerTypePtr> CPVRTimerTypes;
+  typedef std::vector<std::shared_ptr<CPVRTimerType>> CPVRTimerTypes;
 
   #define PVR_INVALID_CLIENT_ID (-2)
 
@@ -349,28 +347,28 @@ namespace PVR
      * @param channel The channel to add
      * @return PVR_ERROR_NO_ERROR if the add has been fetched successfully.
      */
-    PVR_ERROR OpenDialogChannelAdd(const CPVRChannelPtr &channel);
+    PVR_ERROR OpenDialogChannelAdd(const std::shared_ptr<CPVRChannel> &channel);
 
     /*!
      * @brief Request the client to open dialog about given channel settings
      * @param channel The channel to edit
      * @return PVR_ERROR_NO_ERROR if the edit has been fetched successfully.
      */
-    PVR_ERROR OpenDialogChannelSettings(const CPVRChannelPtr &channel);
+    PVR_ERROR OpenDialogChannelSettings(const std::shared_ptr<CPVRChannel> &channel);
 
     /*!
      * @brief Request the client to delete given channel
      * @param channel The channel to delete
      * @return PVR_ERROR_NO_ERROR if the delete has been fetched successfully.
      */
-    PVR_ERROR DeleteChannel(const CPVRChannelPtr &channel);
+    PVR_ERROR DeleteChannel(const std::shared_ptr<CPVRChannel> &channel);
 
     /*!
      * @brief Request the client to rename given channel
      * @param channel The channel to rename
      * @return PVR_ERROR_NO_ERROR if the rename has been fetched successfully.
      */
-    PVR_ERROR RenameChannel(const CPVRChannelPtr &channel);
+    PVR_ERROR RenameChannel(const std::shared_ptr<CPVRChannel> &channel);
 
     /*
      * @brief Check if an epg tag can be recorded
@@ -928,7 +926,7 @@ namespace PVR
      * @param xbmcChannel The channel on XBMC's side.
      * @param addonChannel The channel on the addon's side.
      */
-    static void WriteClientChannelInfo(const CPVRChannelPtr &xbmcChannel, PVR_CHANNEL &addonChannel);
+    static void WriteClientChannelInfo(const std::shared_ptr<CPVRChannel> &xbmcChannel, PVR_CHANNEL &addonChannel);
 
     /*!
      * @brief Write the given addon properties to the given properties container.
@@ -943,7 +941,7 @@ namespace PVR
      * @param channel The channel to check.
      * @return True when it can be played, false otherwise.
      */
-    bool CanPlayChannel(const CPVRChannelPtr &channel) const;
+    bool CanPlayChannel(const std::shared_ptr<CPVRChannel> &channel) const;
 
     /*!
      * @brief Stop this instance, if it is currently running.
diff --git a/xbmc/interfaces/json-rpc/PVROperations.cpp b/xbmc/interfaces/json-rpc/PVROperations.cpp
index 4cb7a61530a9..9ea1fcb5116a 100644
--- a/xbmc/interfaces/json-rpc/PVROperations.cpp
+++ b/xbmc/interfaces/json-rpc/PVROperations.cpp
@@ -52,7 +52,7 @@ JSONRPC_STATUS CPVROperations::GetChannelGroups(const std::string &method, ITran
   if (!CServiceBroker::GetPVRManager().IsStarted())
     return FailedToExecute;
 
-  CPVRChannelGroupsContainerPtr channelGroupContainer = CServiceBroker::GetPVRManager().ChannelGroups();
+  std::shared_ptr<CPVRChannelGroupsContainer> channelGroupContainer = CServiceBroker::GetPVRManager().ChannelGroups();
   if (!channelGroupContainer)
     return FailedToExecute;
 
@@ -62,7 +62,7 @@ JSONRPC_STATUS CPVROperations::GetChannelGroups(const std::string &method, ITran
 
   int start, end;
 
-  std::vector<CPVRChannelGroupPtr> groupList = channelGroups->GetMembers(true);
+  std::vector<std::shared_ptr<CPVRChannelGroup>> groupList = channelGroups->GetMembers(true);
   HandleLimits(parameterObject, result, groupList.size(), start, end);
   for (int index = start; index < end; index++)
     FillChannelGroupDetails(groupList.at(index), parameterObject, result["channelgroups"], true);
@@ -75,11 +75,11 @@ JSONRPC_STATUS CPVROperations::GetChannelGroupDetails(const std::string &method,
   if (!CServiceBroker::GetPVRManager().IsStarted())
     return FailedToExecute;
 
-  CPVRChannelGroupsContainerPtr channelGroupContainer = CServiceBroker::GetPVRManager().ChannelGroups();
+  std::shared_ptr<CPVRChannelGroupsContainer> channelGroupContainer = CServiceBroker::GetPVRManager().ChannelGroups();
   if (!channelGroupContainer)
     return FailedToExecute;
 
-  CPVRChannelGroupPtr channelGroup;
+  std::shared_ptr<CPVRChannelGroup> channelGroup;
   CVariant id = parameterObject["channelgroupid"];
   if (id.isInteger())
     channelGroup = channelGroupContainer->GetByIdFromAll((int)id.asInteger());
@@ -99,11 +99,11 @@ JSONRPC_STATUS CPVROperations::GetChannels(const std::string &method, ITransport
   if (!CServiceBroker::GetPVRManager().IsStarted())
     return FailedToExecute;
 
-  CPVRChannelGroupsContainerPtr channelGroupContainer = CServiceBroker::GetPVRManager().ChannelGroups();
+  std::shared_ptr<CPVRChannelGroupsContainer> channelGroupContainer = CServiceBroker::GetPVRManager().ChannelGroups();
   if (!channelGroupContainer)
     return FailedToExecute;
 
-  CPVRChannelGroupPtr channelGroup;
+  std::shared_ptr<CPVRChannelGroup> channelGroup;
   CVariant id = parameterObject["channelgroupid"];
   if (id.isInteger())
     channelGroup = channelGroupContainer->GetByIdFromAll((int)id.asInteger());
@@ -130,11 +130,11 @@ JSONRPC_STATUS CPVROperations::GetChannelDetails(const std::string &method, ITra
   if (!CServiceBroker::GetPVRManager().IsStarted())
     return FailedToExecute;
 
-  CPVRChannelGroupsContainerPtr channelGroupContainer = CServiceBroker::GetPVRManager().ChannelGroups();
+  std::shared_ptr<CPVRChannelGroupsContainer> channelGroupContainer = CServiceBroker::GetPVRManager().ChannelGroups();
   if (!channelGroupContainer)
     return FailedToExecute;
 
-  CPVRChannelPtr channel = channelGroupContainer->GetChannelById((int)parameterObject["channelid"].asInteger());
+  std::shared_ptr<CPVRChannel> channel = channelGroupContainer->GetChannelById((int)parameterObject["channelid"].asInteger());
   if (channel == NULL)
     return InvalidParams;
 
@@ -148,15 +148,15 @@ JSONRPC_STATUS CPVROperations::GetBroadcasts(const std::string &method, ITranspo
   if (!CServiceBroker::GetPVRManager().IsStarted())
     return FailedToExecute;
 
-  CPVRChannelGroupsContainerPtr channelGroupContainer = CServiceBroker::GetPVRManager().ChannelGroups();
+  std::shared_ptr<CPVRChannelGroupsContainer> channelGroupContainer = CServiceBroker::GetPVRManager().ChannelGroups();
   if (!channelGroupContainer)
     return FailedToExecute;
 
-  CPVRChannelPtr channel = channelGroupContainer->GetChannelById((int)parameterObject["channelid"].asInteger());
+  std::shared_ptr<CPVRChannel> channel = channelGroupContainer->GetChannelById((int)parameterObject["channelid"].asInteger());
   if (channel == NULL)
     return InvalidParams;
 
-  CPVREpgPtr channelEpg = channel->GetEPG();
+  std::shared_ptr<CPVREpg> channelEpg = channel->GetEPG();
   if (!channelEpg)
     return InternalError;
 
@@ -195,7 +195,7 @@ JSONRPC_STATUS CPVROperations::Record(const std::string &method, ITransportLayer
   if (!CServiceBroker::GetPVRManager().IsStarted())
     return FailedToExecute;
 
-  CPVRChannelPtr pChannel;
+  std::shared_ptr<CPVRChannel> pChannel;
   CVariant channel = parameterObject["channel"];
   if (channel.isString() && channel.asString() == "current")
   {
@@ -205,7 +205,7 @@ JSONRPC_STATUS CPVROperations::Record(const std::string &method, ITransportLayer
   }
   else if (channel.isInteger())
   {
-    CPVRChannelGroupsContainerPtr channelGroupContainer = CServiceBroker::GetPVRManager().ChannelGroups();
+    std::shared_ptr<CPVRChannelGroupsContainer> channelGroupContainer = CServiceBroker::GetPVRManager().ChannelGroups();
     if (!channelGroupContainer)
       return FailedToExecute;
 
@@ -269,7 +269,7 @@ JSONRPC_STATUS CPVROperations::GetPropertyValue(const std::string &property, CVa
   return OK;
 }
 
-void CPVROperations::FillChannelGroupDetails(const CPVRChannelGroupPtr &channelGroup, const CVariant &parameterObject, CVariant &result, bool append /* = false */)
+void CPVROperations::FillChannelGroupDetails(const std::shared_ptr<CPVRChannelGroup> &channelGroup, const CVariant &parameterObject, CVariant &result, bool append /* = false */)
 {
   if (channelGroup == NULL)
     return;
@@ -302,7 +302,7 @@ JSONRPC_STATUS CPVROperations::GetTimers(const std::string &method, ITransportLa
   if (!CServiceBroker::GetPVRManager().IsStarted())
     return FailedToExecute;
 
-  CPVRTimersPtr timers = CServiceBroker::GetPVRManager().Timers();
+  std::shared_ptr<CPVRTimers> timers = CServiceBroker::GetPVRManager().Timers();
   if (!timers)
     return FailedToExecute;
 
@@ -323,11 +323,11 @@ JSONRPC_STATUS CPVROperations::GetTimerDetails(const std::string &method, ITrans
   if (!CServiceBroker::GetPVRManager().IsStarted())
     return FailedToExecute;
 
-  CPVRTimersPtr timers = CServiceBroker::GetPVRManager().Timers();
+  std::shared_ptr<CPVRTimers> timers = CServiceBroker::GetPVRManager().Timers();
   if (!timers)
     return FailedToExecute;
 
-  CPVRTimerInfoTagPtr timer = timers->GetById((int)parameterObject["timerid"].asInteger());
+  std::shared_ptr<CPVRTimerInfoTag> timer = timers->GetById((int)parameterObject["timerid"].asInteger());
   if (!timer)
     return InvalidParams;
 
@@ -350,7 +350,7 @@ JSONRPC_STATUS CPVROperations::AddTimer(const std::string &method, ITransportLay
   if (CServiceBroker::GetPVRManager().Timers()->GetTimerForEpgTag(epgTag))
     return InvalidParams;
 
-  CPVRTimerInfoTagPtr newTimer = CPVRTimerInfoTag::CreateFromEpg(epgTag, parameterObject["timerrule"].asBoolean(false));
+  std::shared_ptr<CPVRTimerInfoTag> newTimer = CPVRTimerInfoTag::CreateFromEpg(epgTag, parameterObject["timerrule"].asBoolean(false));
   if (newTimer)
   {
     if (CServiceBroker::GetPVRManager().GUIActions()->AddTimer(newTimer))
@@ -365,11 +365,11 @@ JSONRPC_STATUS CPVROperations::DeleteTimer(const std::string &method, ITransport
   if (!CServiceBroker::GetPVRManager().IsStarted())
     return FailedToExecute;
 
-  CPVRTimersPtr timers = CServiceBroker::GetPVRManager().Timers();
+  std::shared_ptr<CPVRTimers> timers = CServiceBroker::GetPVRManager().Timers();
   if (!timers)
     return FailedToExecute;
 
-  CPVRTimerInfoTagPtr timer = timers->GetById(parameterObject["timerid"].asInteger());
+  std::shared_ptr<CPVRTimerInfoTag> timer = timers->GetById(parameterObject["timerid"].asInteger());
   if (!timer)
     return InvalidParams;
 
@@ -421,7 +421,7 @@ JSONRPC_STATUS CPVROperations::GetRecordings(const std::string &method, ITranspo
   if (!CServiceBroker::GetPVRManager().IsStarted())
     return FailedToExecute;
 
-  CPVRRecordingsPtr recordings = CServiceBroker::GetPVRManager().Recordings();
+  std::shared_ptr<CPVRRecordings> recordings = CServiceBroker::GetPVRManager().Recordings();
   if (!recordings)
     return FailedToExecute;
 
@@ -442,7 +442,7 @@ JSONRPC_STATUS CPVROperations::GetRecordingDetails(const std::string &method, IT
   if (!CServiceBroker::GetPVRManager().IsStarted())
     return FailedToExecute;
 
-  CPVRRecordingsPtr recordings = CServiceBroker::GetPVRManager().Recordings();
+  std::shared_ptr<CPVRRecordings> recordings = CServiceBroker::GetPVRManager().Recordings();
   if (!recordings)
     return FailedToExecute;
 
diff --git a/xbmc/interfaces/json-rpc/PlayerOperations.cpp b/xbmc/interfaces/json-rpc/PlayerOperations.cpp
index 433a07990aa4..e38749c6be7f 100644
--- a/xbmc/interfaces/json-rpc/PlayerOperations.cpp
+++ b/xbmc/interfaces/json-rpc/PlayerOperations.cpp
@@ -152,7 +152,7 @@ JSONRPC_STATUS CPlayerOperations::GetItem(const std::string &method, ITransportL
       fileItem = CFileItemPtr(new CFileItem(g_application.CurrentFileItem()));
       if (IsPVRChannel())
       {
-        CPVRChannelPtr currentChannel(CServiceBroker::GetPVRManager().GetPlayingChannel());
+        std::shared_ptr<CPVRChannel> currentChannel(CServiceBroker::GetPVRManager().GetPlayingChannel());
         if (currentChannel)
           fileItem = CFileItemPtr(new CFileItem(currentChannel));
       }
@@ -163,7 +163,7 @@ JSONRPC_STATUS CPlayerOperations::GetItem(const std::string &method, ITransportL
           // Fallback to item details held by GUI but ensure path unchanged
           //! @todo  remove this once there is no route to playback that updates
           // GUI item without also updating app item e.g. start playback of a
-          // non-library item via JSON 
+          // non-library item via JSON
           const CVideoInfoTag *currentVideoTag = CServiceBroker::GetGUI()->GetInfoManager().GetCurrentMovieTag();
           if (currentVideoTag != NULL)
           {
@@ -183,7 +183,7 @@ JSONRPC_STATUS CPlayerOperations::GetItem(const std::string &method, ITransportL
           // Fallback to item details held by GUI but ensure path unchanged
           //! @todo  remove this once there is no route to playback that updates
           // GUI item without also updating app item e.g. start playback of a
-          // non-library item via JSON 
+          // non-library item via JSON
           const MUSIC_INFO::CMusicInfoTag *currentMusicTag = CServiceBroker::GetGUI()->GetInfoManager().GetCurrentSongTag();
           if (currentMusicTag != NULL)
           {
@@ -517,13 +517,13 @@ std::string GetStringFromViewMode(ViewMode viewMode)
   {
     return p.second == viewMode;
   });
-  
+
   if (it != viewModes.end())
   {
     std::pair<std::string, ViewMode> value = *it;
     result = value.first;
   }
-  
+
   return result;
 }
 
@@ -540,7 +540,7 @@ void GetNewValueForViewModeParameter(const CVariant &parameter, float stepSize,
     {
       stepSize *= -1;
     }
-    
+
     result += stepSize;
   }
 
@@ -583,7 +583,7 @@ JSONRPC_STATUS CPlayerOperations::SetViewMode(const std::string &method, ITransp
       GetNewValueForViewModeParameter(pixelRatio, 0.01f, 0.5f, 2.f, vs.m_CustomPixelRatio);
       jsonStatus = ACK;
     }
-    
+
     if (!verticalShift.isNull())
     {
       GetNewValueForViewModeParameter(verticalShift, -0.01f, -2.f, 2.f, vs.m_CustomVerticalShift);
@@ -610,7 +610,7 @@ JSONRPC_STATUS CPlayerOperations::SetViewMode(const std::string &method, ITransp
 JSONRPC_STATUS CPlayerOperations::GetViewMode(const std::string &method, ITransportLayer *transport, IClient *client, const CVariant &parameterObject, CVariant &result)
 {
   int mode = g_application.GetAppPlayer().GetVideoSettings().m_ViewMode;
-  
+
   result["viewmode"] = GetStringFromViewMode(static_cast<ViewMode>(mode));
 
   result["zoom"] = CDisplaySettings::GetInstance().GetZoomAmount();
@@ -707,11 +707,11 @@ JSONRPC_STATUS CPlayerOperations::Open(const std::string &method, ITransportLaye
   }
   else if (parameterObject["item"].isMember("channelid"))
   {
-    const CPVRChannelGroupsContainerPtr channelGroupContainer = CServiceBroker::GetPVRManager().ChannelGroups();
+    const std::shared_ptr<CPVRChannelGroupsContainer> channelGroupContainer = CServiceBroker::GetPVRManager().ChannelGroups();
     if (!channelGroupContainer)
       return FailedToExecute;
 
-    const CPVRChannelPtr channel = channelGroupContainer->GetChannelById(static_cast<int>(parameterObject["item"]["channelid"].asInteger()));
+    const std::shared_ptr<CPVRChannel> channel = channelGroupContainer->GetChannelById(static_cast<int>(parameterObject["item"]["channelid"].asInteger()));
     if (!channel)
       return InvalidParams;
 
@@ -722,7 +722,7 @@ JSONRPC_STATUS CPlayerOperations::Open(const std::string &method, ITransportLaye
   }
   else if (parameterObject["item"].isMember("recordingid"))
   {
-    const CPVRRecordingsPtr recordingsContainer = CServiceBroker::GetPVRManager().Recordings();
+    const std::shared_ptr<CPVRRecordings> recordingsContainer = CServiceBroker::GetPVRManager().Recordings();
     if (!recordingsContainer)
       return FailedToExecute;
 
@@ -1378,7 +1378,7 @@ JSONRPC_STATUS CPlayerOperations::GetPropertyValue(PlayerType player, const std:
           ms = (int)(g_application.GetTime() * 1000.0);
         else
         {
-          CPVREpgInfoTagPtr epg(GetCurrentEpg());
+          std::shared_ptr<CPVREpgInfoTag> epg(GetCurrentEpg());
           if (epg)
             ms = epg->Progress() * 1000;
         }
@@ -1407,7 +1407,7 @@ JSONRPC_STATUS CPlayerOperations::GetPropertyValue(PlayerType player, const std:
           result = g_application.GetPercentage();
         else
         {
-          CPVREpgInfoTagPtr epg(GetCurrentEpg());
+          std::shared_ptr<CPVREpgInfoTag> epg(GetCurrentEpg());
           if (epg)
             result = epg->ProgressPercentage();
           else
@@ -1440,7 +1440,7 @@ JSONRPC_STATUS CPlayerOperations::GetPropertyValue(PlayerType player, const std:
           ms = (int)(g_application.GetTotalTime() * 1000.0);
         else
         {
-          CPVREpgInfoTagPtr epg(GetCurrentEpg());
+          std::shared_ptr<CPVREpgInfoTag> epg(GetCurrentEpg());
           if (epg)
             ms = epg->GetDuration() * 1000;
         }
@@ -1898,14 +1898,14 @@ bool CPlayerOperations::IsPVRChannel()
   return CServiceBroker::GetPVRManager().IsPlayingTV() || CServiceBroker::GetPVRManager().IsPlayingRadio();
 }
 
-CPVREpgInfoTagPtr CPlayerOperations::GetCurrentEpg()
+std::shared_ptr<CPVREpgInfoTag> CPlayerOperations::GetCurrentEpg()
 {
   if (!CServiceBroker::GetPVRManager().IsPlayingTV() && !CServiceBroker::GetPVRManager().IsPlayingRadio())
-    return CPVREpgInfoTagPtr();
+    return std::shared_ptr<CPVREpgInfoTag>();
 
-  CPVRChannelPtr currentChannel(CServiceBroker::GetPVRManager().GetPlayingChannel());
+  std::shared_ptr<CPVRChannel> currentChannel(CServiceBroker::GetPVRManager().GetPlayingChannel());
   if (!currentChannel)
-    return CPVREpgInfoTagPtr();
+    return std::shared_ptr<CPVREpgInfoTag>();
 
   return currentChannel->GetEPGNow();
 }

From 969da1594ceb01d98127e2d2aaac146d7b28e2ad Mon Sep 17 00:00:00 2001
From: phunkyfish <phunkyfish@gmail.com>
Date: Thu, 26 Sep 2019 07:38:33 +0100
Subject: [PATCH 5/7] Refactoring remove PVRTypes.h

---
 xbmc/FileItem.h                               |   9 +-
 xbmc/addons/PVRClient.h                       | 113 +++++++++---------
 xbmc/cores/VideoPlayer/VideoPlayerRadioRDS.h  |   6 +
 xbmc/interfaces/json-rpc/PlayerOperations.h   |   7 +-
 xbmc/interfaces/legacy/InfoTagRadioRDS.cpp    |   1 +
 xbmc/interfaces/legacy/InfoTagRadioRDS.h      |   8 +-
 xbmc/pvr/CMakeLists.txt                       |   1 -
 xbmc/pvr/PVRDatabase.h                        |   5 +-
 xbmc/pvr/PVRGUIActions.h                      |   4 +-
 xbmc/pvr/PVRGUIChannelNavigator.h             |   3 +-
 xbmc/pvr/PVRGUITimesInfo.h                    |   4 +-
 xbmc/pvr/PVRItem.h                            |   6 +-
 xbmc/pvr/PVRManager.h                         |  10 +-
 xbmc/pvr/PVRTypes.h                           |  62 ----------
 xbmc/pvr/channels/PVRChannel.h                |   1 -
 xbmc/pvr/channels/PVRChannelGroup.h           |   4 +-
 xbmc/pvr/channels/PVRChannelGroupInternal.h   |   1 -
 xbmc/pvr/channels/PVRChannelGroups.h          |   1 -
 xbmc/pvr/channels/PVRChannelGroupsContainer.h |   2 +-
 xbmc/pvr/dialogs/GUIDialogPVRChannelGuide.h   |   3 +-
 xbmc/pvr/dialogs/GUIDialogPVRChannelManager.h |   2 +-
 xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.h    |   3 +-
 xbmc/pvr/dialogs/GUIDialogPVRGroupManager.h   |   3 +-
 xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.h      |   3 +-
 .../dialogs/GUIDialogPVRRecordingSettings.h   |   3 +-
 xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.h  |   4 +-
 xbmc/pvr/epg/Epg.h                            |   1 -
 xbmc/pvr/epg/EpgContainer.h                   |   1 -
 xbmc/pvr/epg/EpgSearchFilter.h                |   1 -
 xbmc/pvr/recordings/PVRRecording.h            |   2 +-
 xbmc/pvr/recordings/PVRRecordings.h           |   2 +-
 xbmc/pvr/timers/PVRTimerInfoTag.h             |   1 -
 xbmc/pvr/timers/PVRTimerType.h                |   1 -
 xbmc/pvr/timers/PVRTimers.h                   |   3 +-
 xbmc/pvr/windows/GUIEPGGridContainerModel.h   |   3 +-
 xbmc/pvr/windows/GUIWindowPVRBase.h           |   2 +-
 xbmc/pvr/windows/GUIWindowPVRGuide.h          |   1 +
 37 files changed, 138 insertions(+), 149 deletions(-)
 delete mode 100644 xbmc/pvr/PVRTypes.h

diff --git a/xbmc/FileItem.h b/xbmc/FileItem.h
index c7d0d0942bb8..8c1f03860df6 100644
--- a/xbmc/FileItem.h
+++ b/xbmc/FileItem.h
@@ -17,7 +17,6 @@
 #include "XBDateTime.h"
 #include "addons/IAddon.h"
 #include "guilib/GUIListItem.h"
-#include "pvr/PVRTypes.h"
 #include "threads/CriticalSection.h"
 #include "utils/IArchivable.h"
 #include "utils/ISerializable.h"
@@ -45,6 +44,14 @@ namespace GAME
 }
 }
 
+namespace PVR
+{
+  class CPVRChannel;
+  class CPVREpgInfoTag;
+  class CPVRRecording;
+  class CPVRTimerInfoTag;
+}
+
 class CAlbum;
 class CArtist;
 class CSong;
diff --git a/xbmc/addons/PVRClient.h b/xbmc/addons/PVRClient.h
index 7d25d03344d2..387dd640085b 100644
--- a/xbmc/addons/PVRClient.h
+++ b/xbmc/addons/PVRClient.h
@@ -10,7 +10,6 @@
 
 #include "addons/binary-addons/AddonDll.h"
 #include "addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h"
-#include "pvr/PVRTypes.h"
 
 #include <atomic>
 #include <functional>
@@ -21,12 +20,18 @@
 
 namespace PVR
 {
+  class CPVRChannel;
+  class CPVRChannelGroup;
   class CPVRChannelGroups;
   class CPVRClientMenuHook;
   class CPVRClientMenuHooks;
+  class CPVREpg;
+  class CPVREpgInfoTag;
+  class CPVRRecording;
+  class CPVRRecordings;
   class CPVRStreamProperties;
+  class CPVRTimerInfoTag;
   class CPVRTimersContainer;
-  class CPVRClient;
 
   class CPVRTimerType;
   typedef std::vector<std::shared_ptr<CPVRTimerType>> CPVRTimerTypes;
@@ -176,7 +181,7 @@ namespace PVR
      * @brief Obtain a list with all possible values for recordings lifetime.
      * @param list out, the list with the values or an empty list, if lifetime is not supported.
      */
-    void GetRecordingsLifetimeValues(std::vector<std::pair<std::string, int>> &list) const;
+    void GetRecordingsLifetimeValues(std::vector<std::pair<std::string, int>>& list) const;
 
     /////////////////////////////////////////////////////////////////////////////////
     //
@@ -301,7 +306,7 @@ namespace PVR
      * @param pProperties The properties.
      * @return PVR_ERROR_NO_ERROR if the properties have been fetched successfully.
      */
-    PVR_ERROR GetStreamProperties(PVR_STREAM_PROPERTIES *pProperties);
+    PVR_ERROR GetStreamProperties(PVR_STREAM_PROPERTIES* pProperties);
 
     /*!
      * @return The name reported by the backend.
@@ -334,7 +339,7 @@ namespace PVR
      * @param iUsed The used disk space.
      * @return PVR_ERROR_NO_ERROR if the drive space has been fetched successfully.
      */
-    PVR_ERROR GetDriveSpace(long long &iTotal, long long &iUsed);
+    PVR_ERROR GetDriveSpace(long long& iTotal, long long& iUsed);
 
     /*!
      * @brief Start a channel scan on the server.
@@ -347,28 +352,28 @@ namespace PVR
      * @param channel The channel to add
      * @return PVR_ERROR_NO_ERROR if the add has been fetched successfully.
      */
-    PVR_ERROR OpenDialogChannelAdd(const std::shared_ptr<CPVRChannel> &channel);
+    PVR_ERROR OpenDialogChannelAdd(const std::shared_ptr<CPVRChannel>& channel);
 
     /*!
      * @brief Request the client to open dialog about given channel settings
      * @param channel The channel to edit
      * @return PVR_ERROR_NO_ERROR if the edit has been fetched successfully.
      */
-    PVR_ERROR OpenDialogChannelSettings(const std::shared_ptr<CPVRChannel> &channel);
+    PVR_ERROR OpenDialogChannelSettings(const std::shared_ptr<CPVRChannel>& channel);
 
     /*!
      * @brief Request the client to delete given channel
      * @param channel The channel to delete
      * @return PVR_ERROR_NO_ERROR if the delete has been fetched successfully.
      */
-    PVR_ERROR DeleteChannel(const std::shared_ptr<CPVRChannel> &channel);
+    PVR_ERROR DeleteChannel(const std::shared_ptr<CPVRChannel>& channel);
 
     /*!
      * @brief Request the client to rename given channel
      * @param channel The channel to rename
      * @return PVR_ERROR_NO_ERROR if the rename has been fetched successfully.
      */
-    PVR_ERROR RenameChannel(const std::shared_ptr<CPVRChannel> &channel);
+    PVR_ERROR RenameChannel(const std::shared_ptr<CPVRChannel>& channel);
 
     /*
      * @brief Check if an epg tag can be recorded
@@ -376,7 +381,7 @@ namespace PVR
      * @param bIsRecordable Set to true if the tag can be recorded
      * @return PVR_ERROR_NO_ERROR if bIsRecordable has been set successfully.
      */
-    PVR_ERROR IsRecordable(const std::shared_ptr<const CPVREpgInfoTag> &tag, bool &bIsRecordable) const;
+    PVR_ERROR IsRecordable(const std::shared_ptr<const CPVREpgInfoTag>& tag, bool& bIsRecordable) const;
 
     /*
      * @brief Check if an epg tag can be played
@@ -384,7 +389,7 @@ namespace PVR
      * @param bIsPlayable Set to true if the tag can be played
      * @return PVR_ERROR_NO_ERROR if bIsPlayable has been set successfully.
      */
-    PVR_ERROR IsPlayable(const std::shared_ptr<const CPVREpgInfoTag> &tag, bool &bIsPlayable) const;
+    PVR_ERROR IsPlayable(const std::shared_ptr<const CPVREpgInfoTag>& tag, bool& bIsPlayable) const;
 
     /*!
      * @brief Fill the given container with the properties required for playback of the given EPG tag. Values are obtained from the PVR backend.
@@ -426,21 +431,21 @@ namespace PVR
      * @param iGroups The total amount of channel groups on the server or -1 on error.
      * @return PVR_ERROR_NO_ERROR on success, respective error code otherwise.
      */
-    PVR_ERROR GetChannelGroupsAmount(int &iGroups);
+    PVR_ERROR GetChannelGroupsAmount(int& iGroups);
 
     /*!
      * @brief Request the list of all channel groups from the backend.
      * @param groups The groups container to get the groups for.
      * @return PVR_ERROR_NO_ERROR if the list has been fetched successfully.
      */
-    PVR_ERROR GetChannelGroups(CPVRChannelGroups *groups);
+    PVR_ERROR GetChannelGroups(CPVRChannelGroups* groups);
 
     /*!
      * @brief Request the list of all group members from the backend.
      * @param group The group to get the members for.
      * @return PVR_ERROR_NO_ERROR if the list has been fetched successfully.
      */
-    PVR_ERROR GetChannelGroupMembers(CPVRChannelGroup *group);
+    PVR_ERROR GetChannelGroupMembers(CPVRChannelGroup* group);
 
     //@}
     /** @name PVR channel methods */
@@ -451,7 +456,7 @@ namespace PVR
      * @param iChannels The total amount of channels on the server or -1 on error.
      * @return PVR_ERROR_NO_ERROR on success, respective error code otherwise.
      */
-    PVR_ERROR GetChannelsAmount(int &iChannels);
+    PVR_ERROR GetChannelsAmount(int& iChannels);
 
     /*!
      * @brief Request the list of all channels from the backend.
@@ -459,7 +464,7 @@ namespace PVR
      * @param bRadio True to get the radio channels, false to get the TV channels.
      * @return PVR_ERROR_NO_ERROR if the list has been fetched successfully.
      */
-    PVR_ERROR GetChannels(CPVRChannelGroup &channels, bool bRadio);
+    PVR_ERROR GetChannels(CPVRChannelGroup& channels, bool bRadio);
 
     //@}
     /** @name PVR recording methods */
@@ -471,7 +476,7 @@ namespace PVR
      * @param iRecordings The total amount of recordings on the server or -1 on error.
      * @return PVR_ERROR_NO_ERROR on success, respective error code otherwise.
      */
-    PVR_ERROR GetRecordingsAmount(bool deleted, int &iRecordings);
+    PVR_ERROR GetRecordingsAmount(bool deleted, int& iRecordings);
 
     /*!
      * @brief Request the list of all recordings from the backend.
@@ -479,21 +484,21 @@ namespace PVR
      * @param deleted True to return deleted recordings.
      * @return PVR_ERROR_NO_ERROR if the list has been fetched successfully.
      */
-    PVR_ERROR GetRecordings(CPVRRecordings *results, bool deleted);
+    PVR_ERROR GetRecordings(CPVRRecordings* results, bool deleted);
 
     /*!
      * @brief Delete a recording on the backend.
      * @param recording The recording to delete.
      * @return PVR_ERROR_NO_ERROR if the recording has been deleted successfully.
      */
-    PVR_ERROR DeleteRecording(const CPVRRecording &recording);
+    PVR_ERROR DeleteRecording(const CPVRRecording& recording);
 
     /*!
      * @brief Undelete a recording on the backend.
      * @param recording The recording to undelete.
      * @return PVR_ERROR_NO_ERROR if the recording has been undeleted successfully.
      */
-    PVR_ERROR UndeleteRecording(const CPVRRecording &recording);
+    PVR_ERROR UndeleteRecording(const CPVRRecording& recording);
 
     /*!
      * @brief Delete all recordings permanent which in the deleted folder on the backend.
@@ -506,14 +511,14 @@ namespace PVR
      * @param recording The recording to rename.
      * @return PVR_ERROR_NO_ERROR if the recording has been renamed successfully.
      */
-    PVR_ERROR RenameRecording(const CPVRRecording &recording);
+    PVR_ERROR RenameRecording(const CPVRRecording& recording);
 
     /*!
      * @brief Set the lifetime of a recording on the backend.
      * @param recording The recording to set the lifetime for. recording.m_iLifetime contains the new lifetime value.
      * @return PVR_ERROR_NO_ERROR if the recording's lifetime has been set successfully.
      */
-    PVR_ERROR SetRecordingLifetime(const CPVRRecording &recording);
+    PVR_ERROR SetRecordingLifetime(const CPVRRecording& recording);
 
     /*!
      * @brief Set the play count of a recording on the backend.
@@ -521,7 +526,7 @@ namespace PVR
      * @param count Play count.
      * @return PVR_ERROR_NO_ERROR if the recording's play count has been set successfully.
      */
-    PVR_ERROR SetRecordingPlayCount(const CPVRRecording &recording, int count);
+    PVR_ERROR SetRecordingPlayCount(const CPVRRecording& recording, int count);
 
     /*!
     * @brief Set the last watched position of a recording on the backend.
@@ -529,7 +534,7 @@ namespace PVR
     * @param lastplayedposition The last watched position in seconds
     * @return PVR_ERROR_NO_ERROR if the position has been stored successfully.
     */
-    PVR_ERROR SetRecordingLastPlayedPosition(const CPVRRecording &recording, int lastplayedposition);
+    PVR_ERROR SetRecordingLastPlayedPosition(const CPVRRecording& recording, int lastplayedposition);
 
     /*!
     * @brief Retrieve the last watched position of a recording on the backend.
@@ -537,7 +542,7 @@ namespace PVR
     * @param iPosition The last watched position in seconds or -1 on error
     * @return PVR_ERROR_NO_ERROR on success, respective error code otherwise.
     */
-    PVR_ERROR GetRecordingLastPlayedPosition(const CPVRRecording &recording, int &iPosition);
+    PVR_ERROR GetRecordingLastPlayedPosition(const CPVRRecording& recording, int& iPosition);
 
     /*!
     * @brief Retrieve the edit decision list (EDL) from the backend.
@@ -545,7 +550,7 @@ namespace PVR
     * @param edls The edit decision list (empty on error).
     * @return PVR_ERROR_NO_ERROR on success, respective error code otherwise.
     */
-    PVR_ERROR GetRecordingEdl(const CPVRRecording &recording, std::vector<PVR_EDL_ENTRY> &edls);
+    PVR_ERROR GetRecordingEdl(const CPVRRecording& recording, std::vector<PVR_EDL_ENTRY>& edls);
 
     /*!
     * @brief Retrieve the edit decision list (EDL) from the backend.
@@ -553,7 +558,7 @@ namespace PVR
     * @param edls The edit decision list (empty on error).
     * @return PVR_ERROR_NO_ERROR on success, respective error code otherwise.
     */
-    PVR_ERROR GetEpgTagEdl(const std::shared_ptr<const CPVREpgInfoTag> &epgTag, std::vector<PVR_EDL_ENTRY> &edls);
+    PVR_ERROR GetEpgTagEdl(const std::shared_ptr<const CPVREpgInfoTag>& epgTag, std::vector<PVR_EDL_ENTRY>& edls);
 
     //@}
     /** @name PVR timer methods */
@@ -564,21 +569,21 @@ namespace PVR
      * @param iTimers The total amount of timers on the backend or -1 on error.
      * @return PVR_ERROR_NO_ERROR on success, respective error code otherwise.
      */
-    PVR_ERROR GetTimersAmount(int &iTimers);
+    PVR_ERROR GetTimersAmount(int& iTimers);
 
     /*!
      * @brief Request the list of all timers from the backend.
      * @param results The container to store the result in.
      * @return PVR_ERROR_NO_ERROR if the list has been fetched successfully.
      */
-    PVR_ERROR GetTimers(CPVRTimersContainer *results);
+    PVR_ERROR GetTimers(CPVRTimersContainer* results);
 
     /*!
      * @brief Add a timer on the backend.
      * @param timer The timer to add.
      * @return PVR_ERROR_NO_ERROR if the timer has been added successfully.
      */
-    PVR_ERROR AddTimer(const CPVRTimerInfoTag &timer);
+    PVR_ERROR AddTimer(const CPVRTimerInfoTag& timer);
 
     /*!
      * @brief Delete a timer on the backend.
@@ -586,14 +591,14 @@ namespace PVR
      * @param bForce Set to true to delete a timer that is currently recording a program.
      * @return PVR_ERROR_NO_ERROR if the timer has been deleted successfully.
      */
-    PVR_ERROR DeleteTimer(const CPVRTimerInfoTag &timer, bool bForce = false);
+    PVR_ERROR DeleteTimer(const CPVRTimerInfoTag& timer, bool bForce = false);
 
     /*!
      * @brief Update the timer information on the server.
      * @param timer The timer to update.
      * @return PVR_ERROR_NO_ERROR if the timer has been updated successfully.
      */
-    PVR_ERROR UpdateTimer(const CPVRTimerInfoTag &timer);
+    PVR_ERROR UpdateTimer(const CPVRTimerInfoTag& timer);
 
     /*!
      * @brief Get all timer types supported by the backend.
@@ -626,7 +631,7 @@ namespace PVR
      * @param iRead The amount of bytes that were actually read from the stream.
      * @return PVR_ERROR_NO_ERROR on success, respective error code otherwise.
      */
-    PVR_ERROR ReadLiveStream(void* lpBuf, int64_t uiBufSize, int &iRead);
+    PVR_ERROR ReadLiveStream(void* lpBuf, int64_t uiBufSize, int& iRead);
 
     /*!
      * @brief Seek in a live stream on a backend.
@@ -635,14 +640,14 @@ namespace PVR
      * @param iPosition The new position or -1 on error.
      * @return PVR_ERROR_NO_ERROR on success, respective error code otherwise.
      */
-    PVR_ERROR SeekLiveStream(int64_t iFilePosition, int iWhence, int64_t &iPosition);
+    PVR_ERROR SeekLiveStream(int64_t iFilePosition, int iWhence, int64_t& iPosition);
 
     /*!
      * @brief Get the lenght of the currently playing live stream, if any.
      * @param iLength The total length of the stream that's currently being read or -1 on error.
      * @return PVR_ERROR_NO_ERROR on success, respective error code otherwise.
      */
-    PVR_ERROR GetLiveStreamLength(int64_t &iLength);
+    PVR_ERROR GetLiveStreamLength(int64_t& iLength);
 
     /*!
      * @brief (Un)Pause a stream.
@@ -656,14 +661,14 @@ namespace PVR
      * @param qualityinfo The signal quality.
      * @return PVR_ERROR_NO_ERROR on success, respective error code otherwise.
      */
-    PVR_ERROR SignalQuality(PVR_SIGNAL_STATUS &qualityinfo);
+    PVR_ERROR SignalQuality(PVR_SIGNAL_STATUS& qualityinfo);
 
     /*!
      * @brief Get the descramble information of the stream that's currently open.
      * @param descrambleinfo The descramble information.
      * @return PVR_ERROR_NO_ERROR on success, respective error code otherwise.
      */
-    PVR_ERROR GetDescrambleInfo(PVR_DESCRAMBLE_INFO &descrambleinfo) const;
+    PVR_ERROR GetDescrambleInfo(PVR_DESCRAMBLE_INFO& descrambleinfo) const;
 
     /*!
      * @brief Fill the given container with the properties required for playback of the given channel. Values are obtained from the PVR backend.
@@ -678,14 +683,14 @@ namespace PVR
      * @param bCanPause True if the stream can be paused, false otherwise.
      * @return PVR_ERROR_NO_ERROR on success, respective error code otherwise.
      */
-    PVR_ERROR CanPauseStream(bool &bCanPause) const;
+    PVR_ERROR CanPauseStream(bool& bCanPause) const;
 
     /*!
      * @brief Check whether PVR backend supports seeking for the currently playing stream
      * @param bCanSeek True if the stream can be seeked, false otherwise.
      * @return PVR_ERROR_NO_ERROR on success, respective error code otherwise.
      */
-    PVR_ERROR CanSeekStream(bool &bCanSeek) const;
+    PVR_ERROR CanSeekStream(bool& bCanSeek) const;
 
     /*!
      * @brief Notify the pvr addon/demuxer that Kodi wishes to seek the stream by time
@@ -695,7 +700,7 @@ namespace PVR
      * @return PVR_ERROR_NO_ERROR on success, respective error code otherwise.
      * @remarks Optional, and only used if addon has its own demuxer.
      */
-    PVR_ERROR SeekTime(double time, bool backwards, double *startpts);
+    PVR_ERROR SeekTime(double time, bool backwards, double* startpts);
 
     /*!
      * @brief Notify the pvr addon/demuxer that Kodi wishes to change playback speed
@@ -737,7 +742,7 @@ namespace PVR
      * @param iRead The amount of bytes that were actually read from the stream.
      * @return PVR_ERROR_NO_ERROR on success, respective error code otherwise.
      */
-    PVR_ERROR ReadRecordedStream(void* lpBuf, int64_t uiBufSize, int &iRead);
+    PVR_ERROR ReadRecordedStream(void* lpBuf, int64_t uiBufSize, int& iRead);
 
     /*!
      * @brief Seek in a recording stream on a backend.
@@ -746,14 +751,14 @@ namespace PVR
      * @param iPosition The new position or -1 on error.
      * @return PVR_ERROR_NO_ERROR on success, respective error code otherwise.
      */
-    PVR_ERROR SeekRecordedStream(int64_t iFilePosition, int iWhence, int64_t &iPosition);
+    PVR_ERROR SeekRecordedStream(int64_t iFilePosition, int iWhence, int64_t& iPosition);
 
     /*!
      * @brief Get the lenght of the currently playing recording stream, if any.
      * @param iLength The total length of the stream that's currently being read or -1 on error.
      * @return PVR_ERROR_NO_ERROR on success, respective error code otherwise.
      */
-    PVR_ERROR GetRecordedStreamLength(int64_t &iLength);
+    PVR_ERROR GetRecordedStreamLength(int64_t& iLength);
 
     /*!
      * @brief Fill the given container with the properties required for playback of the given recording. Values are obtained from the PVR backend.
@@ -792,21 +797,21 @@ namespace PVR
      */
     PVR_ERROR DemuxRead(DemuxPacket* &packet);
 
-    static const char *ToString(const PVR_ERROR error);
+    static const char* ToString(const PVR_ERROR error);
 
     /*!
      * @brief Check whether the currently playing stream, if any, is a real-time stream.
      * @param bRealTime True if real-time, false otherwise.
      * @return PVR_ERROR_NO_ERROR on success, respective error code otherwise.
      */
-    PVR_ERROR IsRealTimeStream(bool &bRealTime) const;
+    PVR_ERROR IsRealTimeStream(bool& bRealTime) const;
 
     /*!
      * @brief Get Stream times for the currently playing stream, if any (will be moved to inputstream).
      * @param times The stream times.
      * @return PVR_ERROR_NO_ERROR on success, respective error code otherwise.
      */
-    PVR_ERROR GetStreamTimes(PVR_STREAM_TIMES *times);
+    PVR_ERROR GetStreamTimes(PVR_STREAM_TIMES* times);
 
     /*!
      * @brief reads the client's properties.
@@ -886,7 +891,7 @@ namespace PVR
      * @param iChunkSize the chunk size in bytes.
      * @return PVR_ERROR_NO_ERROR on success, respective error code otherwise.
      */
-    PVR_ERROR GetStreamReadChunkSize(int &iChunkSize);
+    PVR_ERROR GetStreamReadChunkSize(int& iChunkSize);
 
     /*!
      * @brief Get the interface table used between addon and Kodi.
@@ -905,28 +910,28 @@ namespace PVR
      * @param xbmcGroup The group on XBMC's side.
      * @param addonGroup The group on the addon's side.
      */
-    static void WriteClientGroupInfo(const CPVRChannelGroup &xbmcGroup, PVR_CHANNEL_GROUP &addonGroup);
+    static void WriteClientGroupInfo(const CPVRChannelGroup& xbmcGroup, PVR_CHANNEL_GROUP& addonGroup);
 
     /*!
      * @brief Copy over recording info from xbmcRecording to addonRecording.
      * @param xbmcRecording The recording on XBMC's side.
      * @param addonRecording The recording on the addon's side.
      */
-    static void WriteClientRecordingInfo(const CPVRRecording &xbmcRecording, PVR_RECORDING &addonRecording);
+    static void WriteClientRecordingInfo(const CPVRRecording& xbmcRecording, PVR_RECORDING& addonRecording);
 
     /*!
      * @brief Copy over timer info from xbmcTimer to addonTimer.
      * @param xbmcTimer The timer on XBMC's side.
      * @param addonTimer The timer on the addon's side.
      */
-    static void WriteClientTimerInfo(const CPVRTimerInfoTag &xbmcTimer, PVR_TIMER &addonTimer);
+    static void WriteClientTimerInfo(const CPVRTimerInfoTag& xbmcTimer, PVR_TIMER& addonTimer);
 
     /*!
      * @brief Copy over channel info from xbmcChannel to addonClient.
      * @param xbmcChannel The channel on XBMC's side.
      * @param addonChannel The channel on the addon's side.
      */
-    static void WriteClientChannelInfo(const std::shared_ptr<CPVRChannel> &xbmcChannel, PVR_CHANNEL &addonChannel);
+    static void WriteClientChannelInfo(const std::shared_ptr<CPVRChannel>& xbmcChannel, PVR_CHANNEL& addonChannel);
 
     /*!
      * @brief Write the given addon properties to the given properties container.
@@ -934,14 +939,14 @@ namespace PVR
      * @param iPropertyCount The number of properties contained in the addon properties array.
      * @param props The container the addon properties shall be written to.
      */
-    static void WriteStreamProperties(const PVR_NAMED_VALUE *properties, unsigned int iPropertyCount, CPVRStreamProperties& props);
+    static void WriteStreamProperties(const PVR_NAMED_VALUE* properties, unsigned int iPropertyCount, CPVRStreamProperties& props);
 
     /*!
      * @brief Whether a channel can be played by this add-on
      * @param channel The channel to check.
      * @return True when it can be played, false otherwise.
      */
-    bool CanPlayChannel(const std::shared_ptr<CPVRChannel> &channel) const;
+    bool CanPlayChannel(const std::shared_ptr<CPVRChannel>& channel) const;
 
     /*!
      * @brief Stop this instance, if it is currently running.
@@ -1085,7 +1090,7 @@ namespace PVR
      * @param strMessage A localized addon-defined string representing the new state, that can be displayed
      *        in the UI or NULL if the Kodi-defined default string for the new state shall be displayed.
      */
-    static void cb_connection_state_change(void* kodiInstance, const char* strConnectionString, PVR_CONNECTION_STATE newState, const char *strMessage);
+    static void cb_connection_state_change(void* kodiInstance, const char* strConnectionString, PVR_CONNECTION_STATE newState, const char* strMessage);
 
     /*!
      * @brief Notify a state change for an EPG event
diff --git a/xbmc/cores/VideoPlayer/VideoPlayerRadioRDS.h b/xbmc/cores/VideoPlayer/VideoPlayerRadioRDS.h
index bfcaf0c97429..42c52c65ea4a 100644
--- a/xbmc/cores/VideoPlayer/VideoPlayerRadioRDS.h
+++ b/xbmc/cores/VideoPlayer/VideoPlayerRadioRDS.h
@@ -19,6 +19,12 @@
 
 class CDVDStreamInfo;
 
+namespace PVR
+{
+  class CPVRChannel;
+  class CPVRRadioRDSInfoTag;
+}
+
 /// --- CDVDRadioRDSData ------------------------------------------------------------
 
 #define UECP_DATA_START               0xFE    /*!< A data record starts with the start byte */
diff --git a/xbmc/interfaces/json-rpc/PlayerOperations.h b/xbmc/interfaces/json-rpc/PlayerOperations.h
index afe7fa0607a2..def0b385c61c 100644
--- a/xbmc/interfaces/json-rpc/PlayerOperations.h
+++ b/xbmc/interfaces/json-rpc/PlayerOperations.h
@@ -10,12 +10,17 @@
 
 #include "FileItemHandler.h"
 #include "JSONRPC.h"
-#include "pvr/PVRTypes.h"
 
 #include <string>
 
 class CVariant;
 
+namespace PVR
+{
+  class CPVRChannelGroup;
+  class CPVREpgInfoTag;
+}
+
 namespace JSONRPC
 {
   enum PlayerType
diff --git a/xbmc/interfaces/legacy/InfoTagRadioRDS.cpp b/xbmc/interfaces/legacy/InfoTagRadioRDS.cpp
index 6126686f8e3b..b60ea4c3796a 100644
--- a/xbmc/interfaces/legacy/InfoTagRadioRDS.cpp
+++ b/xbmc/interfaces/legacy/InfoTagRadioRDS.cpp
@@ -9,6 +9,7 @@
 #include "InfoTagRadioRDS.h"
 
 #include "pvr/channels/PVRChannel.h"
+#include "pvr/channels/PVRRadioRDSInfoTag.h"
 #include "utils/StringUtils.h"
 
 namespace XBMCAddon
diff --git a/xbmc/interfaces/legacy/InfoTagRadioRDS.h b/xbmc/interfaces/legacy/InfoTagRadioRDS.h
index b086e536ff7d..0d59de5d09d2 100644
--- a/xbmc/interfaces/legacy/InfoTagRadioRDS.h
+++ b/xbmc/interfaces/legacy/InfoTagRadioRDS.h
@@ -9,11 +9,15 @@
 #pragma once
 
 #include "AddonClass.h"
-#include "pvr/PVRTypes.h"
-#include "pvr/channels/PVRRadioRDSInfoTag.h"
 
 #include <memory>
 
+namespace PVR
+{
+  class CPVRChannel;
+  class CPVRRadioRDSInfoTag;
+}
+
 namespace XBMCAddon
 {
   namespace xbmc
diff --git a/xbmc/pvr/CMakeLists.txt b/xbmc/pvr/CMakeLists.txt
index e94189ac70df..e7ef5217471a 100644
--- a/xbmc/pvr/CMakeLists.txt
+++ b/xbmc/pvr/CMakeLists.txt
@@ -25,7 +25,6 @@ set(HEADERS PVRActionListener.h
             PVRContextMenus.h
             PVRGUIActions.h
             PVRItem.h
-            PVRTypes.h
             PVRChannelNumberInputHandler.h
             PVRJobs.h
             PVRGUIChannelIconUpdater.h
diff --git a/xbmc/pvr/PVRDatabase.h b/xbmc/pvr/PVRDatabase.h
index 05988a9e0e36..b5b88d319153 100644
--- a/xbmc/pvr/PVRDatabase.h
+++ b/xbmc/pvr/PVRDatabase.h
@@ -9,7 +9,6 @@
 #pragma once
 
 #include "dbwrappers/Database.h"
-#include "pvr/PVRTypes.h"
 #include "threads/CriticalSection.h"
 
 #include <map>
@@ -17,8 +16,12 @@
 
 namespace PVR
 {
+  class CPVRChannel;
+  class CPVRChannelGroup;
   class CPVRChannelGroups;
   class CPVRClient;
+  class CPVRTimerInfoTag;
+  class CPVRTimers;
 
   /** The PVR database */
 
diff --git a/xbmc/pvr/PVRGUIActions.h b/xbmc/pvr/PVRGUIActions.h
index f8de74c6ae1e..0f33b78b808a 100644
--- a/xbmc/pvr/PVRGUIActions.h
+++ b/xbmc/pvr/PVRGUIActions.h
@@ -11,7 +11,6 @@
 #include "pvr/PVRChannelNumberInputHandler.h"
 #include "pvr/PVRGUIChannelNavigator.h"
 #include "pvr/PVRSettings.h"
-#include "pvr/PVRTypes.h"
 #include "threads/CriticalSection.h"
 
 #include <memory>
@@ -38,6 +37,9 @@ namespace PVR
     SUCCESS
   };
 
+  class CPVRRecording;
+  class CPVRTimerInfoTag;
+
   class CPVRChannelSwitchingInputHandler : public CPVRChannelNumberInputHandler
   {
   public:
diff --git a/xbmc/pvr/PVRGUIChannelNavigator.h b/xbmc/pvr/PVRGUIChannelNavigator.h
index 9e76cb7895b1..3d1cb1b959e2 100644
--- a/xbmc/pvr/PVRGUIChannelNavigator.h
+++ b/xbmc/pvr/PVRGUIChannelNavigator.h
@@ -8,7 +8,6 @@
 
 #pragma once
 
-#include "pvr/PVRTypes.h"
 #include "threads/CriticalSection.h"
 
 #include <memory>
@@ -21,6 +20,8 @@ namespace PVR
     INSTANT_OR_DELAYED_SWITCH // switch according to SETTING_PVRPLAYBACK_CHANNELENTRYTIMEOUT
   };
 
+  class CPVRChannel;
+
   class CPVRGUIChannelNavigator
   {
   public:
diff --git a/xbmc/pvr/PVRGUITimesInfo.h b/xbmc/pvr/PVRGUITimesInfo.h
index 54f69ff1a3c8..a516e5596882 100644
--- a/xbmc/pvr/PVRGUITimesInfo.h
+++ b/xbmc/pvr/PVRGUITimesInfo.h
@@ -9,13 +9,15 @@
 #pragma once
 
 #include "XBDateTime.h"
-#include "pvr/PVRTypes.h"
 #include "threads/CriticalSection.h"
 
 #include <memory>
 
 namespace PVR
 {
+  class CPVRChannel;
+  class CPVREpgInfoTag;
+
   class CPVRGUITimesInfo
   {
   public:
diff --git a/xbmc/pvr/PVRItem.h b/xbmc/pvr/PVRItem.h
index 0895bccf8d82..83c46ba12d4e 100644
--- a/xbmc/pvr/PVRItem.h
+++ b/xbmc/pvr/PVRItem.h
@@ -8,7 +8,6 @@
 
 #pragma once
 
-#include "pvr/PVRTypes.h"
 
 #include <memory>
 
@@ -16,6 +15,11 @@ class CFileItem;
 
 namespace PVR
 {
+  class CPVRChannel;
+  class CPVREpgInfoTag;
+  class CPVRRecording;
+  class CPVRTimerInfoTag;
+
   class CPVRItem
   {
   public:
diff --git a/xbmc/pvr/PVRManager.h b/xbmc/pvr/PVRManager.h
index a04dbdead9cf..6390209f0903 100644
--- a/xbmc/pvr/PVRManager.h
+++ b/xbmc/pvr/PVRManager.h
@@ -12,7 +12,6 @@
 #include "interfaces/IAnnouncer.h"
 #include "pvr/PVRActionListener.h"
 #include "pvr/PVRSettings.h"
-#include "pvr/PVRTypes.h"
 #include "pvr/epg/EpgContainer.h"
 #include "threads/CriticalSection.h"
 #include "threads/Event.h"
@@ -29,9 +28,18 @@ class CStopWatch;
 
 namespace PVR
 {
+  class CPVRChannel;
+  class CPVRChannelGroup;
+  class CPVRChannelGroupsContainer;
   class CPVRClient;
+  class CPVRClients;
+  class CPVRDatabase;
+  class CPVRGUIActions;
   class CPVRGUIInfo;
   class CPVRGUIProgressHandler;
+  class CPVRRecording;
+  class CPVRRecordings;
+  class CPVRTimers;
 
   enum class PVREvent
   {
diff --git a/xbmc/pvr/PVRTypes.h b/xbmc/pvr/PVRTypes.h
deleted file mode 100644
index aa759a4a3c34..000000000000
--- a/xbmc/pvr/PVRTypes.h
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
- *  Copyright (C) 2016-2018 Team Kodi
- *  This file is part of Kodi - https://kodi.tv
- *
- *  SPDX-License-Identifier: GPL-2.0-or-later
- *  See LICENSES/README.md for more information.
- */
-
-#pragma once
-
-#include <memory>
-
-namespace PVR
-{
-  class CPVRDatabase;
-  typedef std::shared_ptr<CPVRDatabase> CPVRDatabasePtr;
-
-  class CPVREpgDatabase;
-  typedef std::shared_ptr<CPVREpgDatabase> CPVREpgDatabasePtr;
-
-  class CPVRChannel;
-  typedef std::shared_ptr<CPVRChannel> CPVRChannelPtr;
-
-  class CPVRChannelGroup;
-  typedef std::shared_ptr<CPVRChannelGroup> CPVRChannelGroupPtr;
-
-  class CPVRChannelGroupsContainer;
-  typedef std::shared_ptr<CPVRChannelGroupsContainer> CPVRChannelGroupsContainerPtr;
-
-  class CPVRClients;
-  typedef std::shared_ptr<CPVRClients> CPVRClientsPtr;
-
-  class CPVRRadioRDSInfoTag;
-  typedef std::shared_ptr<CPVRRadioRDSInfoTag> CPVRRadioRDSInfoTagPtr;
-
-  class CPVRRecording;
-  typedef std::shared_ptr<CPVRRecording> CPVRRecordingPtr;
-
-  class CPVRRecordings;
-  typedef std::shared_ptr<CPVRRecordings> CPVRRecordingsPtr;
-
-  class CPVRTimerInfoTag;
-  typedef std::shared_ptr<CPVRTimerInfoTag> CPVRTimerInfoTagPtr;
-
-  class CPVRTimerType;
-  typedef std::shared_ptr<CPVRTimerType> CPVRTimerTypePtr;
-
-  class CPVRTimers;
-  typedef std::shared_ptr<CPVRTimers> CPVRTimersPtr;
-
-  class CPVRGUIActions;
-  typedef std::shared_ptr<CPVRGUIActions> CPVRGUIActionsPtr;
-
-  class CPVREpg;
-  typedef std::shared_ptr<CPVREpg> CPVREpgPtr;
-
-  class CPVREpgInfoTag;
-  typedef std::shared_ptr<CPVREpgInfoTag> CPVREpgInfoTagPtr;
-  typedef std::shared_ptr<const CPVREpgInfoTag> CConstPVREpgInfoTagPtr;
-
-} // namespace PVR
-
diff --git a/xbmc/pvr/channels/PVRChannel.h b/xbmc/pvr/channels/PVRChannel.h
index be2c4c7c1114..4cfffd6b8b2a 100644
--- a/xbmc/pvr/channels/PVRChannel.h
+++ b/xbmc/pvr/channels/PVRChannel.h
@@ -9,7 +9,6 @@
 #pragma once
 
 #include "addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h"
-#include "pvr/PVRTypes.h"
 #include "pvr/channels/PVRChannelNumber.h"
 #include "threads/CriticalSection.h"
 #include "utils/ISerializable.h"
diff --git a/xbmc/pvr/channels/PVRChannelGroup.h b/xbmc/pvr/channels/PVRChannelGroup.h
index 03a966a4ddfd..75509e62fda6 100644
--- a/xbmc/pvr/channels/PVRChannelGroup.h
+++ b/xbmc/pvr/channels/PVRChannelGroup.h
@@ -9,7 +9,6 @@
 #pragma once
 
 #include "XBDateTime.h"
-#include "pvr/PVRTypes.h"
 #include "pvr/channels/PVRChannelNumber.h"
 #include "pvr/channels/PVRChannelsPath.h"
 #include "settings/lib/ISettingCallback.h"
@@ -31,6 +30,9 @@ namespace PVR
 
   enum class PVREvent;
 
+  class CPVRChannel;
+  class CPVREpgInfoTag;
+
   struct PVRChannelGroupMember
   {
     PVRChannelGroupMember() = default;
diff --git a/xbmc/pvr/channels/PVRChannelGroupInternal.h b/xbmc/pvr/channels/PVRChannelGroupInternal.h
index 48770508c00c..ffb9ff571152 100644
--- a/xbmc/pvr/channels/PVRChannelGroupInternal.h
+++ b/xbmc/pvr/channels/PVRChannelGroupInternal.h
@@ -8,7 +8,6 @@
 
 #pragma once
 
-#include "pvr/PVRTypes.h"
 #include "pvr/channels/PVRChannelGroup.h"
 
 #include <memory>
diff --git a/xbmc/pvr/channels/PVRChannelGroups.h b/xbmc/pvr/channels/PVRChannelGroups.h
index e82c811ce7f1..a33f3195b73b 100644
--- a/xbmc/pvr/channels/PVRChannelGroups.h
+++ b/xbmc/pvr/channels/PVRChannelGroups.h
@@ -8,7 +8,6 @@
 
 #pragma once
 
-#include "pvr/PVRTypes.h"
 #include "pvr/channels/PVRChannelGroup.h"
 #include "threads/CriticalSection.h"
 #include "threads/SingleLock.h"
diff --git a/xbmc/pvr/channels/PVRChannelGroupsContainer.h b/xbmc/pvr/channels/PVRChannelGroupsContainer.h
index 23506423c60e..76237a120209 100644
--- a/xbmc/pvr/channels/PVRChannelGroupsContainer.h
+++ b/xbmc/pvr/channels/PVRChannelGroupsContainer.h
@@ -8,7 +8,6 @@
 
 #pragma once
 
-#include "pvr/PVRTypes.h"
 #include "threads/CriticalSection.h"
 
 #include <memory>
@@ -16,6 +15,7 @@
 namespace PVR
 {
   class CPVRChannel;
+  class CPVRChannelGroup;
   class CPVRChannelGroups;
   class CPVREpgInfoTag;
 
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRChannelGuide.h b/xbmc/pvr/dialogs/GUIDialogPVRChannelGuide.h
index 2f78bfe64344..50ef9727f3ec 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRChannelGuide.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRChannelGuide.h
@@ -8,13 +8,14 @@
 
 #pragma once
 
-#include "pvr/PVRTypes.h"
 #include "pvr/dialogs/GUIDialogPVRItemsViewBase.h"
 
 #include <memory>
 
 namespace PVR
 {
+  class CPVRChannel;
+
   class CGUIDialogPVRChannelGuide : public CGUIDialogPVRItemsViewBase
   {
   public:
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.h b/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.h
index 022d61f97708..05d1f9093273 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.h
@@ -10,7 +10,6 @@
 
 #include "dialogs/GUIDialogContextMenu.h"
 #include "guilib/GUIDialog.h"
-#include "pvr/PVRTypes.h"
 #include "view/GUIViewControl.h"
 
 #include <memory>
@@ -22,6 +21,7 @@ class CGUIMessage;
 
 namespace PVR
 {
+  class CPVRChannelGroup;
   class CPVRClient;
 
   class CGUIDialogPVRChannelManager : public CGUIDialog
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.h b/xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.h
index e7e635fe6ef1..e056d657d023 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.h
@@ -9,7 +9,6 @@
 #pragma once
 
 #include "pvr/PVRChannelNumberInputHandler.h"
-#include "pvr/PVRTypes.h"
 #include "pvr/dialogs/GUIDialogPVRItemsViewBase.h"
 #include "threads/SystemClock.h"
 
@@ -21,6 +20,8 @@ namespace PVR
 {
   enum class PVREvent;
 
+  class CPVRChannelGroup;
+
   class CGUIDialogPVRChannelsOSD : public CGUIDialogPVRItemsViewBase, public CPVRChannelNumberInputHandler
   {
   public:
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.h b/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.h
index 879827caad55..6f134233caa8 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.h
@@ -10,7 +10,6 @@
 
 #include "guilib/GUIDialog.h"
 #include "pvr/PVRThumbLoader.h"
-#include "pvr/PVRTypes.h"
 #include "view/GUIViewControl.h"
 
 #include <memory>
@@ -20,6 +19,8 @@ class CGUIMessage;
 
 namespace PVR
 {
+  class CPVRChannelGroup;
+
   class CGUIDialogPVRGroupManager : public CGUIDialog
   {
   public:
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.h b/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.h
index 4be811779d53..8bf30d8a5669 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.h
@@ -9,7 +9,6 @@
 #pragma once
 
 #include "guilib/GUIDialog.h"
-#include "pvr/PVRTypes.h"
 
 #include <memory>
 
@@ -17,6 +16,8 @@ class CGUIMessage;
 
 namespace PVR
 {
+  class CPVREpgInfoTag;
+
   class CGUIDialogPVRGuideInfo : public CGUIDialog
   {
   public:
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRRecordingSettings.h b/xbmc/pvr/dialogs/GUIDialogPVRRecordingSettings.h
index 37a0a3f1e7c3..e7ff259c6d2b 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRRecordingSettings.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRRecordingSettings.h
@@ -8,7 +8,6 @@
 
 #pragma once
 
-#include "pvr/PVRTypes.h"
 #include "settings/dialogs/GUIDialogSettingsManualBase.h"
 
 #include <memory>
@@ -22,6 +21,8 @@ struct IntegerSettingOption;
 
 namespace PVR
 {
+  class CPVRRecording;
+
   class CGUIDialogPVRRecordingSettings : public CGUIDialogSettingsManualBase
   {
   public:
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.h b/xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.h
index 450b2472a300..339bf2733e32 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.h
@@ -9,7 +9,6 @@
 #pragma once
 
 #include "addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h" // PVR_CHANNEL_INVALID_UID
-#include "pvr/PVRTypes.h"
 #include "settings/SettingConditions.h"
 #include "settings/dialogs/GUIDialogSettingsManualBase.h"
 #include "settings/lib/SettingDependency.h"
@@ -26,6 +25,9 @@ struct IntegerSettingOption;
 
 namespace PVR
 {
+  class CPVRTimerInfoTag;
+  class CPVRTimerType;
+
   class CGUIDialogPVRTimerSettings : public CGUIDialogSettingsManualBase
   {
   public:
diff --git a/xbmc/pvr/epg/Epg.h b/xbmc/pvr/epg/Epg.h
index a9117897e418..30fc3a6feeb3 100644
--- a/xbmc/pvr/epg/Epg.h
+++ b/xbmc/pvr/epg/Epg.h
@@ -10,7 +10,6 @@
 
 #include "XBDateTime.h"
 #include "addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h"
-#include "pvr/PVRTypes.h"
 #include "threads/CriticalSection.h"
 #include "utils/EventStream.h"
 
diff --git a/xbmc/pvr/epg/EpgContainer.h b/xbmc/pvr/epg/EpgContainer.h
index 56ed7f9dbc36..a3251eaae93e 100644
--- a/xbmc/pvr/epg/EpgContainer.h
+++ b/xbmc/pvr/epg/EpgContainer.h
@@ -11,7 +11,6 @@
 #include "XBDateTime.h"
 #include "addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h"
 #include "pvr/PVRSettings.h"
-#include "pvr/PVRTypes.h"
 #include "threads/CriticalSection.h"
 #include "threads/Event.h"
 #include "threads/Thread.h"
diff --git a/xbmc/pvr/epg/EpgSearchFilter.h b/xbmc/pvr/epg/EpgSearchFilter.h
index b40c1c543ef4..612279ed9b86 100644
--- a/xbmc/pvr/epg/EpgSearchFilter.h
+++ b/xbmc/pvr/epg/EpgSearchFilter.h
@@ -9,7 +9,6 @@
 #pragma once
 
 #include "XBDateTime.h"
-#include "pvr/PVRTypes.h"
 #include "pvr/channels/PVRChannelNumber.h"
 
 #include <memory>
diff --git a/xbmc/pvr/recordings/PVRRecording.h b/xbmc/pvr/recordings/PVRRecording.h
index c4bdc5a53c90..86c6eba64fa6 100644
--- a/xbmc/pvr/recordings/PVRRecording.h
+++ b/xbmc/pvr/recordings/PVRRecording.h
@@ -25,7 +25,6 @@
  */
 
 #include "XBDateTime.h"
-#include "pvr/PVRTypes.h"
 #include "threads/SystemClock.h"
 #include "video/Bookmark.h"
 #include "video/VideoInfoTag.h"
@@ -41,6 +40,7 @@ struct PVR_RECORDING;
 
 namespace PVR
 {
+  class CPVRChannel;
   class CPVRTimerInfoTag;
 
   /*!
diff --git a/xbmc/pvr/recordings/PVRRecordings.h b/xbmc/pvr/recordings/PVRRecordings.h
index c91337f156a2..56a4953f1f92 100644
--- a/xbmc/pvr/recordings/PVRRecordings.h
+++ b/xbmc/pvr/recordings/PVRRecordings.h
@@ -8,7 +8,6 @@
 
 #pragma once
 
-#include "pvr/PVRTypes.h"
 #include "threads/CriticalSection.h"
 
 #include <map>
@@ -20,6 +19,7 @@ class CVideoDatabase;
 
 namespace PVR
 {
+  class CPVREpgInfoTag;
   class CPVRRecording;
   class CPVRRecordingUid;
   class CPVRRecordingsPath;
diff --git a/xbmc/pvr/timers/PVRTimerInfoTag.h b/xbmc/pvr/timers/PVRTimerInfoTag.h
index 4df1b1b9b18a..5caa2b3f7011 100644
--- a/xbmc/pvr/timers/PVRTimerInfoTag.h
+++ b/xbmc/pvr/timers/PVRTimerInfoTag.h
@@ -9,7 +9,6 @@
 #pragma once
 
 #include "XBDateTime.h"
-#include "pvr/PVRTypes.h"
 #include "pvr/timers/PVRTimerType.h"
 #include "threads/CriticalSection.h"
 #include "threads/SystemClock.h"
diff --git a/xbmc/pvr/timers/PVRTimerType.h b/xbmc/pvr/timers/PVRTimerType.h
index dede868ac336..dc2e4314b188 100644
--- a/xbmc/pvr/timers/PVRTimerType.h
+++ b/xbmc/pvr/timers/PVRTimerType.h
@@ -9,7 +9,6 @@
 #pragma once
 
 #include "addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h"
-#include "pvr/PVRTypes.h"
 
 #include <memory>
 #include <string>
diff --git a/xbmc/pvr/timers/PVRTimers.h b/xbmc/pvr/timers/PVRTimers.h
index 3e1994eb3faf..dff9e3049b3b 100644
--- a/xbmc/pvr/timers/PVRTimers.h
+++ b/xbmc/pvr/timers/PVRTimers.h
@@ -10,7 +10,6 @@
 
 #include "XBDateTime.h"
 #include "pvr/PVRSettings.h"
-#include "pvr/PVRTypes.h"
 #include "threads/Thread.h"
 
 #include <map>
@@ -23,6 +22,8 @@ namespace PVR
   enum class TimerOperationResult;
   enum class PVREvent;
 
+  class CPVRChannel;
+  class CPVREpgInfoTag;
   class CPVRTimerInfoTag;
   class CPVRTimersPath;
 
diff --git a/xbmc/pvr/windows/GUIEPGGridContainerModel.h b/xbmc/pvr/windows/GUIEPGGridContainerModel.h
index b1dcc8a79f6a..f5af77cd780c 100644
--- a/xbmc/pvr/windows/GUIEPGGridContainerModel.h
+++ b/xbmc/pvr/windows/GUIEPGGridContainerModel.h
@@ -9,7 +9,6 @@
 #pragma once
 
 #include "XBDateTime.h"
-#include "pvr/PVRTypes.h"
 
 #include <memory>
 #include <vector>
@@ -27,6 +26,8 @@ namespace PVR
     int progIndex = -1;
   };
 
+  class CPVREpgInfoTag;
+
   class CGUIEPGGridContainerModel
   {
   public:
diff --git a/xbmc/pvr/windows/GUIWindowPVRBase.h b/xbmc/pvr/windows/GUIWindowPVRBase.h
index 2d2ced02ef50..ab12a32857f1 100644
--- a/xbmc/pvr/windows/GUIWindowPVRBase.h
+++ b/xbmc/pvr/windows/GUIWindowPVRBase.h
@@ -8,7 +8,6 @@
 
 #pragma once
 
-#include "pvr/PVRTypes.h"
 #include "threads/CriticalSection.h"
 #include "threads/SystemClock.h"
 #include "windows/GUIMediaWindow.h"
@@ -49,6 +48,7 @@ namespace PVR
     EPG_SELECT_ACTION_SMART_SELECT   = 5
   };
 
+  class CPVRChannelGroup;
   class CGUIPVRChannelGroupsSelector;
 
   class CGUIWindowPVRBase : public CGUIMediaWindow
diff --git a/xbmc/pvr/windows/GUIWindowPVRGuide.h b/xbmc/pvr/windows/GUIWindowPVRGuide.h
index 4687e8358fee..94af5a8d36b6 100644
--- a/xbmc/pvr/windows/GUIWindowPVRGuide.h
+++ b/xbmc/pvr/windows/GUIWindowPVRGuide.h
@@ -24,6 +24,7 @@ namespace PVR
 {
   enum class PVREvent;
 
+  class CPVRChannelGroup;
   class CGUIEPGGridContainer;
   class CPVRRefreshTimelineItemsThread;
 

From 2da634c8613641e02d73079f5b58b2c20210dfd2 Mon Sep 17 00:00:00 2001
From: phunkyfish <phunkyfish@gmail.com>
Date: Thu, 26 Sep 2019 09:11:22 +0100
Subject: [PATCH 6/7] Refactoring Left align ampersand in pvr

---
 xbmc/addons/PVRClient.cpp                     |  84 +++++++-------
 xbmc/addons/PVRClientMenuHooks.cpp            |   4 +-
 xbmc/addons/PVRClientMenuHooks.h              |   6 +-
 xbmc/pvr/PVRActionListener.cpp                |   6 +-
 xbmc/pvr/PVRActionListener.h                  |   2 +-
 xbmc/pvr/PVRContextMenus.cpp                  | 108 +++++++++---------
 xbmc/pvr/PVRDatabase.cpp                      |  36 +++---
 xbmc/pvr/PVRDatabase.h                        |  36 +++---
 xbmc/pvr/PVRGUIActions.cpp                    | 100 ++++++++--------
 xbmc/pvr/PVRGUIActions.h                      |  24 ++--
 xbmc/pvr/PVRGUIInfo.cpp                       |  70 ++++++------
 xbmc/pvr/PVRGUIInfo.h                         |  74 ++++++------
 xbmc/pvr/PVRGUIProgressHandler.cpp            |   4 +-
 xbmc/pvr/PVRGUIProgressHandler.h              |   4 +-
 xbmc/pvr/PVRJobs.cpp                          |   6 +-
 xbmc/pvr/PVRJobs.h                            |   6 +-
 xbmc/pvr/PVRManager.cpp                       |  16 +--
 xbmc/pvr/PVRManager.h                         |  16 +--
 xbmc/pvr/PVRSettings.cpp                      |  18 +--
 xbmc/pvr/PVRSettings.h                        |  16 +--
 xbmc/pvr/addons/PVRClients.cpp                |  96 ++++++++--------
 xbmc/pvr/addons/PVRClients.h                  |  30 ++---
 xbmc/pvr/channels/PVRChannel.cpp              |  14 +--
 xbmc/pvr/channels/PVRChannel.h                |  14 +--
 xbmc/pvr/channels/PVRChannelGroup.cpp         |  18 +--
 xbmc/pvr/channels/PVRChannelGroup.h           |  16 +--
 xbmc/pvr/channels/PVRChannelGroupInternal.cpp |   8 +-
 xbmc/pvr/channels/PVRChannelGroupInternal.h   |   8 +-
 xbmc/pvr/channels/PVRChannelGroups.cpp        |  22 ++--
 xbmc/pvr/channels/PVRChannelGroups.h          |  16 +--
 .../channels/PVRChannelGroupsContainer.cpp    |   2 +-
 xbmc/pvr/channels/PVRChannelGroupsContainer.h |   2 +-
 xbmc/pvr/channels/PVRChannelNumber.h          |   6 +-
 xbmc/pvr/channels/PVRRadioRDSInfoTag.cpp      |   6 +-
 xbmc/pvr/channels/PVRRadioRDSInfoTag.h        |   4 +-
 xbmc/pvr/dialogs/GUIDialogPVRChannelGuide.cpp |   2 +-
 xbmc/pvr/dialogs/GUIDialogPVRChannelGuide.h   |   2 +-
 .../dialogs/GUIDialogPVRChannelManager.cpp    |  34 +++---
 xbmc/pvr/dialogs/GUIDialogPVRChannelManager.h |  32 +++---
 xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.cpp  |   2 +-
 xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.h    |   2 +-
 xbmc/pvr/dialogs/GUIDialogPVRGroupManager.cpp |  20 ++--
 xbmc/pvr/dialogs/GUIDialogPVRGroupManager.h   |  20 ++--
 xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.cpp    |  12 +-
 xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.h      |  12 +-
 xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.cpp  |   2 +-
 xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.h    |   2 +-
 .../pvr/dialogs/GUIDialogPVRItemsViewBase.cpp |   4 +-
 xbmc/pvr/dialogs/GUIDialogPVRItemsViewBase.h  |   4 +-
 .../pvr/dialogs/GUIDialogPVRRecordingInfo.cpp |   4 +-
 xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.h  |   4 +-
 .../dialogs/GUIDialogPVRRecordingSettings.cpp |   8 +-
 .../dialogs/GUIDialogPVRRecordingSettings.h   |   6 +-
 .../pvr/dialogs/GUIDialogPVRTimerSettings.cpp |  62 +++++-----
 xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.h  |  48 ++++----
 xbmc/pvr/epg/Epg.cpp                          |  14 +--
 xbmc/pvr/epg/Epg.h                            |  16 +--
 xbmc/pvr/epg/EpgContainer.cpp                 |  18 +--
 xbmc/pvr/epg/EpgContainer.h                   |   6 +-
 xbmc/pvr/epg/EpgDatabase.cpp                  |  12 +-
 xbmc/pvr/epg/EpgDatabase.h                    |  12 +-
 xbmc/pvr/epg/EpgInfoTag.cpp                   |  10 +-
 xbmc/pvr/epg/EpgInfoTag.h                     |  14 +--
 xbmc/pvr/epg/EpgSearchFilter.cpp              |  26 ++---
 xbmc/pvr/epg/EpgSearchFilter.h                |  38 +++---
 xbmc/pvr/recordings/PVRRecording.cpp          |  18 +--
 xbmc/pvr/recordings/PVRRecording.h            |  26 ++---
 xbmc/pvr/recordings/PVRRecordings.cpp         |   6 +-
 xbmc/pvr/recordings/PVRRecordings.h           |   6 +-
 xbmc/pvr/recordings/PVRRecordingsPath.cpp     |  14 +--
 xbmc/pvr/recordings/PVRRecordingsPath.h       |  16 +--
 xbmc/pvr/timers/PVRTimerInfoTag.cpp           |  14 +--
 xbmc/pvr/timers/PVRTimerInfoTag.h             |  16 +--
 xbmc/pvr/timers/PVRTimerType.cpp              |  34 +++---
 xbmc/pvr/timers/PVRTimerType.h                |  32 +++---
 xbmc/pvr/timers/PVRTimers.cpp                 |  64 +++++------
 xbmc/pvr/timers/PVRTimers.h                   |  22 ++--
 xbmc/pvr/timers/PVRTimersPath.h               |   2 +-
 xbmc/pvr/windows/GUIEPGGridContainer.cpp      |  58 +++++-----
 xbmc/pvr/windows/GUIEPGGridContainer.h        |  56 ++++-----
 xbmc/pvr/windows/GUIEPGGridContainerModel.cpp |  22 ++--
 xbmc/pvr/windows/GUIEPGGridContainerModel.h   |  16 +--
 xbmc/pvr/windows/GUIWindowPVRBase.cpp         |  12 +-
 xbmc/pvr/windows/GUIWindowPVRBase.h           |   8 +-
 xbmc/pvr/windows/GUIWindowPVRChannels.cpp     |  12 +-
 xbmc/pvr/windows/GUIWindowPVRChannels.h       |  12 +-
 xbmc/pvr/windows/GUIWindowPVRGuide.cpp        |  12 +-
 xbmc/pvr/windows/GUIWindowPVRGuide.h          |  12 +-
 xbmc/pvr/windows/GUIWindowPVRRecordings.cpp   |  12 +-
 xbmc/pvr/windows/GUIWindowPVRRecordings.h     |  12 +-
 xbmc/pvr/windows/GUIWindowPVRSearch.cpp       |  10 +-
 xbmc/pvr/windows/GUIWindowPVRSearch.h         |   8 +-
 xbmc/pvr/windows/GUIWindowPVRTimersBase.cpp   |  10 +-
 xbmc/pvr/windows/GUIWindowPVRTimersBase.h     |   6 +-
 94 files changed, 947 insertions(+), 947 deletions(-)

diff --git a/xbmc/addons/PVRClient.cpp b/xbmc/addons/PVRClient.cpp
index e32062f70003..81b303571f43 100644
--- a/xbmc/addons/PVRClient.cpp
+++ b/xbmc/addons/PVRClient.cpp
@@ -258,7 +258,7 @@ int CPVRClient::GetID(void) const
  * @param xbmcGroup The group on XBMC's side.
  * @param addonGroup The group on the addon's side.
  */
-void CPVRClient::WriteClientGroupInfo(const CPVRChannelGroup &xbmcGroup, PVR_CHANNEL_GROUP &addonGroup)
+void CPVRClient::WriteClientGroupInfo(const CPVRChannelGroup& xbmcGroup, PVR_CHANNEL_GROUP& addonGroup)
 {
   addonGroup = {{0}};
   addonGroup.bIsRadio = xbmcGroup.IsRadio();
@@ -270,7 +270,7 @@ void CPVRClient::WriteClientGroupInfo(const CPVRChannelGroup &xbmcGroup, PVR_CHA
  * @param xbmcRecording The recording on XBMC's side.
  * @param addonRecording The recording on the addon's side.
  */
-void CPVRClient::WriteClientRecordingInfo(const CPVRRecording &xbmcRecording, PVR_RECORDING &addonRecording)
+void CPVRClient::WriteClientRecordingInfo(const CPVRRecording& xbmcRecording, PVR_RECORDING& addonRecording)
 {
   time_t recTime;
   xbmcRecording.RecordingTimeAsUTC().GetAsTime(recTime);
@@ -308,7 +308,7 @@ void CPVRClient::WriteClientRecordingInfo(const CPVRRecording &xbmcRecording, PV
  * @param xbmcTimer The timer on XBMC's side.
  * @param addonTimer The timer on the addon's side.
  */
-void CPVRClient::WriteClientTimerInfo(const CPVRTimerInfoTag &xbmcTimer, PVR_TIMER &addonTimer)
+void CPVRClient::WriteClientTimerInfo(const CPVRTimerInfoTag& xbmcTimer, PVR_TIMER& addonTimer)
 {
   time_t start, end, firstDay;
   xbmcTimer.StartAsUTC().GetAsTime(start);
@@ -353,7 +353,7 @@ void CPVRClient::WriteClientTimerInfo(const CPVRTimerInfoTag &xbmcTimer, PVR_TIM
  * @param xbmcChannel The channel on XBMC's side.
  * @param addonChannel The channel on the addon's side.
  */
-void CPVRClient::WriteClientChannelInfo(const std::shared_ptr<CPVRChannel> &xbmcChannel, PVR_CHANNEL &addonChannel)
+void CPVRClient::WriteClientChannelInfo(const std::shared_ptr<CPVRChannel>& xbmcChannel, PVR_CHANNEL& addonChannel)
 {
   addonChannel = {0};
   addonChannel.iUniqueId         = xbmcChannel->UniqueID();
@@ -534,7 +534,7 @@ const std::string& CPVRClient::GetFriendlyName(void) const
   return m_strFriendlyName;
 }
 
-PVR_ERROR CPVRClient::GetDriveSpace(long long &iTotal, long long &iUsed)
+PVR_ERROR CPVRClient::GetDriveSpace(long long& iTotal, long long& iUsed)
 {
   /* default to 0 in case of error */
   iTotal = 0;
@@ -560,7 +560,7 @@ PVR_ERROR CPVRClient::StartChannelScan(void)
   }, m_clientCapabilities.SupportsChannelScan());
 }
 
-PVR_ERROR CPVRClient::OpenDialogChannelAdd(const std::shared_ptr<CPVRChannel> &channel)
+PVR_ERROR CPVRClient::OpenDialogChannelAdd(const std::shared_ptr<CPVRChannel>& channel)
 {
   return DoAddonCall(__FUNCTION__, [channel](const AddonInstance* addon) {
     PVR_CHANNEL addonChannel;
@@ -569,7 +569,7 @@ PVR_ERROR CPVRClient::OpenDialogChannelAdd(const std::shared_ptr<CPVRChannel> &c
   }, m_clientCapabilities.SupportsChannelSettings());
 }
 
-PVR_ERROR CPVRClient::OpenDialogChannelSettings(const std::shared_ptr<CPVRChannel> &channel)
+PVR_ERROR CPVRClient::OpenDialogChannelSettings(const std::shared_ptr<CPVRChannel>& channel)
 {
   return DoAddonCall(__FUNCTION__, [channel] (const AddonInstance* addon){
     PVR_CHANNEL addonChannel;
@@ -578,7 +578,7 @@ PVR_ERROR CPVRClient::OpenDialogChannelSettings(const std::shared_ptr<CPVRChanne
   }, m_clientCapabilities.SupportsChannelSettings());
 }
 
-PVR_ERROR CPVRClient::DeleteChannel(const std::shared_ptr<CPVRChannel> &channel)
+PVR_ERROR CPVRClient::DeleteChannel(const std::shared_ptr<CPVRChannel>& channel)
 {
   return DoAddonCall(__FUNCTION__, [channel](const AddonInstance* addon) {
     PVR_CHANNEL addonChannel;
@@ -587,7 +587,7 @@ PVR_ERROR CPVRClient::DeleteChannel(const std::shared_ptr<CPVRChannel> &channel)
   }, m_clientCapabilities.SupportsChannelSettings());
 }
 
-PVR_ERROR CPVRClient::RenameChannel(const std::shared_ptr<CPVRChannel> &channel)
+PVR_ERROR CPVRClient::RenameChannel(const std::shared_ptr<CPVRChannel>& channel)
 {
   return DoAddonCall(__FUNCTION__, [channel](const AddonInstance* addon) {
     PVR_CHANNEL addonChannel;
@@ -693,7 +693,7 @@ class CAddonEpgTag : public EPG_TAG
   std::string m_strGenreDescription;
 };
 
-PVR_ERROR CPVRClient::IsRecordable(const std::shared_ptr<const CPVREpgInfoTag> &tag, bool &bIsRecordable) const
+PVR_ERROR CPVRClient::IsRecordable(const std::shared_ptr<const CPVREpgInfoTag>& tag, bool& bIsRecordable) const
 {
   return DoAddonCall(__FUNCTION__, [tag, &bIsRecordable](const AddonInstance* addon) {
     CAddonEpgTag addonTag(tag);
@@ -701,7 +701,7 @@ PVR_ERROR CPVRClient::IsRecordable(const std::shared_ptr<const CPVREpgInfoTag> &
   }, m_clientCapabilities.SupportsRecordings() && m_clientCapabilities.SupportsEPG());
 }
 
-PVR_ERROR CPVRClient::IsPlayable(const std::shared_ptr<const CPVREpgInfoTag> &tag, bool &bIsPlayable) const
+PVR_ERROR CPVRClient::IsPlayable(const std::shared_ptr<const CPVREpgInfoTag>& tag, bool& bIsPlayable) const
 {
   return DoAddonCall(__FUNCTION__, [tag, &bIsPlayable](const AddonInstance* addon) {
     CAddonEpgTag addonTag(tag);
@@ -734,7 +734,7 @@ PVR_ERROR CPVRClient::GetEpgTagStreamProperties(const std::shared_ptr<CPVREpgInf
   });
 }
 
-PVR_ERROR CPVRClient::GetEpgTagEdl(const std::shared_ptr<const CPVREpgInfoTag> &epgTag, std::vector<PVR_EDL_ENTRY> &edls)
+PVR_ERROR CPVRClient::GetEpgTagEdl(const std::shared_ptr<const CPVREpgInfoTag>& epgTag, std::vector<PVR_EDL_ENTRY>& edls)
 {
   edls.clear();
   return DoAddonCall(__FUNCTION__, [&epgTag, &edls](const AddonInstance* addon) {
@@ -753,7 +753,7 @@ PVR_ERROR CPVRClient::GetEpgTagEdl(const std::shared_ptr<const CPVREpgInfoTag> &
   }, m_clientCapabilities.SupportsEpgTagEdl());
 }
 
-PVR_ERROR CPVRClient::GetChannelGroupsAmount(int &iGroups)
+PVR_ERROR CPVRClient::GetChannelGroupsAmount(int& iGroups)
 {
   iGroups = -1;
   return DoAddonCall(__FUNCTION__, [&iGroups](const AddonInstance* addon) {
@@ -785,7 +785,7 @@ PVR_ERROR CPVRClient::GetChannelGroupMembers(CPVRChannelGroup *group)
   }, m_clientCapabilities.SupportsChannelGroups());
 }
 
-PVR_ERROR CPVRClient::GetChannelsAmount(int &iChannels)
+PVR_ERROR CPVRClient::GetChannelsAmount(int& iChannels)
 {
   iChannels = -1;
   return DoAddonCall(__FUNCTION__, [&iChannels](const AddonInstance* addon) {
@@ -794,7 +794,7 @@ PVR_ERROR CPVRClient::GetChannelsAmount(int &iChannels)
   });
 }
 
-PVR_ERROR CPVRClient::GetChannels(CPVRChannelGroup &channels, bool radio)
+PVR_ERROR CPVRClient::GetChannels(CPVRChannelGroup& channels, bool radio)
 {
   return DoAddonCall(__FUNCTION__, [this, &channels, radio](const AddonInstance* addon) {
     ADDON_HANDLE_STRUCT handle = {0};
@@ -804,7 +804,7 @@ PVR_ERROR CPVRClient::GetChannels(CPVRChannelGroup &channels, bool radio)
   }, (radio && m_clientCapabilities.SupportsRadio()) || (!radio && m_clientCapabilities.SupportsTV()));
 }
 
-PVR_ERROR CPVRClient::GetRecordingsAmount(bool deleted, int &iRecordings)
+PVR_ERROR CPVRClient::GetRecordingsAmount(bool deleted, int& iRecordings)
 {
   iRecordings = -1;
   return DoAddonCall(__FUNCTION__, [deleted, &iRecordings](const AddonInstance* addon) {
@@ -823,7 +823,7 @@ PVR_ERROR CPVRClient::GetRecordings(CPVRRecordings *results, bool deleted) {
   }, m_clientCapabilities.SupportsRecordings() && (!deleted || m_clientCapabilities.SupportsRecordingsUndelete()));
 }
 
-PVR_ERROR CPVRClient::DeleteRecording(const CPVRRecording &recording)
+PVR_ERROR CPVRClient::DeleteRecording(const CPVRRecording& recording)
 {
   return DoAddonCall(__FUNCTION__, [&recording](const AddonInstance* addon) {
     PVR_RECORDING tag;
@@ -832,7 +832,7 @@ PVR_ERROR CPVRClient::DeleteRecording(const CPVRRecording &recording)
   }, m_clientCapabilities.SupportsRecordings());
 }
 
-PVR_ERROR CPVRClient::UndeleteRecording(const CPVRRecording &recording)
+PVR_ERROR CPVRClient::UndeleteRecording(const CPVRRecording& recording)
 {
   return DoAddonCall(__FUNCTION__, [&recording](const AddonInstance* addon) {
     PVR_RECORDING tag;
@@ -848,7 +848,7 @@ PVR_ERROR CPVRClient::DeleteAllRecordingsFromTrash()
   }, m_clientCapabilities.SupportsRecordingsUndelete());
 }
 
-PVR_ERROR CPVRClient::RenameRecording(const CPVRRecording &recording)
+PVR_ERROR CPVRClient::RenameRecording(const CPVRRecording& recording)
 {
   return DoAddonCall(__FUNCTION__, [&recording](const AddonInstance* addon) {
     PVR_RECORDING tag;
@@ -857,7 +857,7 @@ PVR_ERROR CPVRClient::RenameRecording(const CPVRRecording &recording)
   }, m_clientCapabilities.SupportsRecordings());
 }
 
-PVR_ERROR CPVRClient::SetRecordingLifetime(const CPVRRecording &recording)
+PVR_ERROR CPVRClient::SetRecordingLifetime(const CPVRRecording& recording)
 {
   return DoAddonCall(__FUNCTION__, [&recording](const AddonInstance* addon) {
     PVR_RECORDING tag;
@@ -866,7 +866,7 @@ PVR_ERROR CPVRClient::SetRecordingLifetime(const CPVRRecording &recording)
   }, m_clientCapabilities.SupportsRecordingsLifetimeChange());
 }
 
-PVR_ERROR CPVRClient::SetRecordingPlayCount(const CPVRRecording &recording, int count)
+PVR_ERROR CPVRClient::SetRecordingPlayCount(const CPVRRecording& recording, int count)
 {
   return DoAddonCall(__FUNCTION__, [&recording, count](const AddonInstance* addon) {
     PVR_RECORDING tag;
@@ -875,7 +875,7 @@ PVR_ERROR CPVRClient::SetRecordingPlayCount(const CPVRRecording &recording, int
   }, m_clientCapabilities.SupportsRecordingsPlayCount());
 }
 
-PVR_ERROR CPVRClient::SetRecordingLastPlayedPosition(const CPVRRecording &recording, int lastplayedposition)
+PVR_ERROR CPVRClient::SetRecordingLastPlayedPosition(const CPVRRecording& recording, int lastplayedposition)
 {
   return DoAddonCall(__FUNCTION__, [&recording, lastplayedposition](const AddonInstance* addon) {
     PVR_RECORDING tag;
@@ -884,7 +884,7 @@ PVR_ERROR CPVRClient::SetRecordingLastPlayedPosition(const CPVRRecording &record
   }, m_clientCapabilities.SupportsRecordingsLastPlayedPosition());
  }
 
-PVR_ERROR CPVRClient::GetRecordingLastPlayedPosition(const CPVRRecording &recording, int &iPosition)
+PVR_ERROR CPVRClient::GetRecordingLastPlayedPosition(const CPVRRecording& recording, int& iPosition)
 {
   iPosition = -1;
   return DoAddonCall(__FUNCTION__, [&recording, &iPosition](const AddonInstance* addon) {
@@ -895,7 +895,7 @@ PVR_ERROR CPVRClient::GetRecordingLastPlayedPosition(const CPVRRecording &record
   }, m_clientCapabilities.SupportsRecordingsLastPlayedPosition());
 }
 
-PVR_ERROR CPVRClient::GetRecordingEdl(const CPVRRecording &recording, std::vector<PVR_EDL_ENTRY> &edls)
+PVR_ERROR CPVRClient::GetRecordingEdl(const CPVRRecording& recording, std::vector<PVR_EDL_ENTRY>& edls)
 {
   edls.clear();
   return DoAddonCall(__FUNCTION__, [&recording, &edls](const AddonInstance* addon) {
@@ -915,7 +915,7 @@ PVR_ERROR CPVRClient::GetRecordingEdl(const CPVRRecording &recording, std::vecto
   }, m_clientCapabilities.SupportsRecordingsEdl());
 }
 
-PVR_ERROR CPVRClient::GetTimersAmount(int &iTimers)
+PVR_ERROR CPVRClient::GetTimersAmount(int& iTimers)
 {
   iTimers = -1;
   return DoAddonCall(__FUNCTION__, [&iTimers](const AddonInstance* addon) {
@@ -934,7 +934,7 @@ PVR_ERROR CPVRClient::GetTimers(CPVRTimersContainer *results)
   }, m_clientCapabilities.SupportsTimers());
 }
 
-PVR_ERROR CPVRClient::AddTimer(const CPVRTimerInfoTag &timer)
+PVR_ERROR CPVRClient::AddTimer(const CPVRTimerInfoTag& timer)
 {
   return DoAddonCall(__FUNCTION__, [&timer](const AddonInstance* addon) {
     PVR_TIMER tag;
@@ -943,7 +943,7 @@ PVR_ERROR CPVRClient::AddTimer(const CPVRTimerInfoTag &timer)
   }, m_clientCapabilities.SupportsTimers());
 }
 
-PVR_ERROR CPVRClient::DeleteTimer(const CPVRTimerInfoTag &timer, bool bForce /* = false */)
+PVR_ERROR CPVRClient::DeleteTimer(const CPVRTimerInfoTag& timer, bool bForce /* = false */)
 {
   return DoAddonCall(__FUNCTION__, [&timer, bForce](const AddonInstance* addon) {
     PVR_TIMER tag;
@@ -952,7 +952,7 @@ PVR_ERROR CPVRClient::DeleteTimer(const CPVRTimerInfoTag &timer, bool bForce /*
   }, m_clientCapabilities.SupportsTimers());
 }
 
-PVR_ERROR CPVRClient::UpdateTimer(const CPVRTimerInfoTag &timer)
+PVR_ERROR CPVRClient::UpdateTimer(const CPVRTimerInfoTag& timer)
 {
   return DoAddonCall(__FUNCTION__, [&timer](const AddonInstance* addon) {
     PVR_TIMER tag;
@@ -975,7 +975,7 @@ PVR_ERROR CPVRClient::GetStreamReadChunkSize(int& iChunkSize)
   }, m_clientCapabilities.SupportsRecordings() || m_clientCapabilities.HandlesInputStream());
 }
 
-PVR_ERROR CPVRClient::ReadLiveStream(void* lpBuf, int64_t uiBufSize, int &iRead)
+PVR_ERROR CPVRClient::ReadLiveStream(void* lpBuf, int64_t uiBufSize, int& iRead)
 {
   iRead = -1;
   return DoAddonCall(__FUNCTION__, [&lpBuf, uiBufSize, &iRead](const AddonInstance* addon) {
@@ -984,7 +984,7 @@ PVR_ERROR CPVRClient::ReadLiveStream(void* lpBuf, int64_t uiBufSize, int &iRead)
   });
 }
 
-PVR_ERROR CPVRClient::ReadRecordedStream(void* lpBuf, int64_t uiBufSize, int &iRead)
+PVR_ERROR CPVRClient::ReadRecordedStream(void* lpBuf, int64_t uiBufSize, int& iRead)
 {
   iRead = -1;
   return DoAddonCall(__FUNCTION__, [&lpBuf, uiBufSize, &iRead](const AddonInstance* addon) {
@@ -993,7 +993,7 @@ PVR_ERROR CPVRClient::ReadRecordedStream(void* lpBuf, int64_t uiBufSize, int &iR
   });
 }
 
-PVR_ERROR CPVRClient::SeekLiveStream(int64_t iFilePosition, int iWhence, int64_t &iPosition)
+PVR_ERROR CPVRClient::SeekLiveStream(int64_t iFilePosition, int iWhence, int64_t& iPosition)
 {
   iPosition = -1;
   return DoAddonCall(__FUNCTION__, [iFilePosition, iWhence, &iPosition](const AddonInstance* addon) {
@@ -1002,7 +1002,7 @@ PVR_ERROR CPVRClient::SeekLiveStream(int64_t iFilePosition, int iWhence, int64_t
   });
 }
 
-PVR_ERROR CPVRClient::SeekRecordedStream(int64_t iFilePosition, int iWhence, int64_t &iPosition)
+PVR_ERROR CPVRClient::SeekRecordedStream(int64_t iFilePosition, int iWhence, int64_t& iPosition)
 {
   iPosition = -1;
   return DoAddonCall(__FUNCTION__, [iFilePosition, iWhence, &iPosition](const AddonInstance* addon) {
@@ -1018,7 +1018,7 @@ PVR_ERROR CPVRClient::SeekTime(double time, bool backwards, double *startpts)
   });
 }
 
-PVR_ERROR CPVRClient::GetLiveStreamLength(int64_t &iLength)
+PVR_ERROR CPVRClient::GetLiveStreamLength(int64_t& iLength)
 {
   iLength = -1;
   return DoAddonCall(__FUNCTION__, [&iLength](const AddonInstance* addon) {
@@ -1027,7 +1027,7 @@ PVR_ERROR CPVRClient::GetLiveStreamLength(int64_t &iLength)
   });
 }
 
-PVR_ERROR CPVRClient::GetRecordedStreamLength(int64_t &iLength)
+PVR_ERROR CPVRClient::GetRecordedStreamLength(int64_t& iLength)
 {
   iLength = -1;
   return DoAddonCall(__FUNCTION__, [&iLength](const AddonInstance* addon) {
@@ -1036,14 +1036,14 @@ PVR_ERROR CPVRClient::GetRecordedStreamLength(int64_t &iLength)
   });
 }
 
-PVR_ERROR CPVRClient::SignalQuality(PVR_SIGNAL_STATUS &qualityinfo)
+PVR_ERROR CPVRClient::SignalQuality(PVR_SIGNAL_STATUS& qualityinfo)
 {
   return DoAddonCall(__FUNCTION__, [&qualityinfo](const AddonInstance* addon) {
     return addon->SignalStatus(qualityinfo);
   });
 }
 
-PVR_ERROR CPVRClient::GetDescrambleInfo(PVR_DESCRAMBLE_INFO &descrambleinfo) const
+PVR_ERROR CPVRClient::GetDescrambleInfo(PVR_DESCRAMBLE_INFO& descrambleinfo) const
 {
   return DoAddonCall(__FUNCTION__, [&descrambleinfo](const AddonInstance* addon) {
     return addon->GetDescrambleInfo(&descrambleinfo);
@@ -1181,7 +1181,7 @@ PVR_ERROR CPVRClient::DoAddonCall(const char* strFunctionName, std::function<PVR
   return error;
 }
 
-bool CPVRClient::CanPlayChannel(const std::shared_ptr<CPVRChannel> &channel) const
+bool CPVRClient::CanPlayChannel(const std::shared_ptr<CPVRChannel>& channel) const
 {
   return (m_bReadyToUse &&
            ((m_clientCapabilities.SupportsTV() && !channel->IsRadio()) ||
@@ -1266,7 +1266,7 @@ PVR_ERROR CPVRClient::FillBuffer(bool mode)
   });
 }
 
-PVR_ERROR CPVRClient::CanPauseStream(bool &bCanPause) const
+PVR_ERROR CPVRClient::CanPauseStream(bool& bCanPause) const
 {
   bCanPause = false;
   return DoAddonCall(__FUNCTION__, [&bCanPause](const AddonInstance* addon) {
@@ -1275,7 +1275,7 @@ PVR_ERROR CPVRClient::CanPauseStream(bool &bCanPause) const
   });
 }
 
-PVR_ERROR CPVRClient::CanSeekStream(bool &bCanSeek) const
+PVR_ERROR CPVRClient::CanSeekStream(bool& bCanSeek) const
 {
   bCanSeek = false;
   return DoAddonCall(__FUNCTION__, [&bCanSeek](const AddonInstance* addon) {
@@ -1291,7 +1291,7 @@ PVR_ERROR CPVRClient::GetStreamTimes(PVR_STREAM_TIMES *times)
   });
 }
 
-PVR_ERROR CPVRClient::IsRealTimeStream(bool &bRealTime) const
+PVR_ERROR CPVRClient::IsRealTimeStream(bool& bRealTime) const
 {
   bRealTime = false;
   return DoAddonCall(__FUNCTION__, [&bRealTime](const AddonInstance* addon) {
@@ -1831,9 +1831,9 @@ void CPVRClientCapabilities::InitRecordingsLifetimeValues()
   }
 }
 
-void CPVRClientCapabilities::GetRecordingsLifetimeValues(std::vector<std::pair<std::string, int>> &list) const
+void CPVRClientCapabilities::GetRecordingsLifetimeValues(std::vector<std::pair<std::string, int>>& list) const
 {
-  for (const auto &lifetime : m_recordingsLifetimeValues)
+  for (const auto& lifetime : m_recordingsLifetimeValues)
     list.push_back(lifetime);
 }
 
diff --git a/xbmc/addons/PVRClientMenuHooks.cpp b/xbmc/addons/PVRClientMenuHooks.cpp
index 6244964b8155..5b8ea83979ff 100644
--- a/xbmc/addons/PVRClientMenuHooks.cpp
+++ b/xbmc/addons/PVRClientMenuHooks.cpp
@@ -16,7 +16,7 @@
 namespace PVR
 {
 
-CPVRClientMenuHook::CPVRClientMenuHook(const std::string &addonId, const PVR_MENUHOOK &hook)
+CPVRClientMenuHook::CPVRClientMenuHook(const std::string& addonId, const PVR_MENUHOOK& hook)
 : m_addonId(addonId),
   m_hook(new PVR_MENUHOOK(hook))
 {
@@ -92,7 +92,7 @@ std::string CPVRClientMenuHook::GetLabel() const
   return g_localizeStrings.GetAddonString(m_addonId, m_hook->iLocalizedStringId);
 }
 
-void CPVRClientMenuHooks::AddHook(const PVR_MENUHOOK &addonHook)
+void CPVRClientMenuHooks::AddHook(const PVR_MENUHOOK& addonHook)
 {
   if (!m_hooks)
     m_hooks.reset(new std::vector<CPVRClientMenuHook>());
diff --git a/xbmc/addons/PVRClientMenuHooks.h b/xbmc/addons/PVRClientMenuHooks.h
index cae91fe1f7d9..a2b1c65913df 100644
--- a/xbmc/addons/PVRClientMenuHooks.h
+++ b/xbmc/addons/PVRClientMenuHooks.h
@@ -23,7 +23,7 @@ namespace PVR
     CPVRClientMenuHook() = delete;
     virtual ~CPVRClientMenuHook() = default;
 
-    CPVRClientMenuHook(const std::string &addonId, const PVR_MENUHOOK &hook);
+    CPVRClientMenuHook(const std::string& addonId, const PVR_MENUHOOK& hook);
 
     bool operator ==(const CPVRClientMenuHook& right) const;
 
@@ -50,9 +50,9 @@ namespace PVR
     CPVRClientMenuHooks() = default;
     virtual ~CPVRClientMenuHooks() = default;
 
-    explicit CPVRClientMenuHooks(const std::string &addonId) : m_addonId(addonId) {}
+    explicit CPVRClientMenuHooks(const std::string& addonId) : m_addonId(addonId) {}
 
-    void AddHook(const PVR_MENUHOOK &addonHook);
+    void AddHook(const PVR_MENUHOOK& addonHook);
     void Clear();
 
     std::vector<CPVRClientMenuHook> GetChannelHooks() const;
diff --git a/xbmc/pvr/PVRActionListener.cpp b/xbmc/pvr/PVRActionListener.cpp
index b94f8817cdc9..27300679eb6c 100644
--- a/xbmc/pvr/PVRActionListener.cpp
+++ b/xbmc/pvr/PVRActionListener.cpp
@@ -87,7 +87,7 @@ ChannelSwitchMode CPVRActionListener::GetChannelSwitchMode(int iAction)
   return ChannelSwitchMode::INSTANT_OR_DELAYED_SWITCH;
 }
 
-bool CPVRActionListener::OnAction(const CAction &action)
+bool CPVRActionListener::OnAction(const CAction& action)
 {
   bool bIsJumpSMS = false;
   bool bIsPlayingPVR(CServiceBroker::GetPVRManager().IsPlaying() &&
@@ -275,7 +275,7 @@ void CPVRActionListener::OnSettingChanged(std::shared_ptr<const CSetting> settin
   if (setting == nullptr)
     return;
 
-  const std::string &settingId = setting->GetId();
+  const std::string& settingId = setting->GetId();
   if (settingId == CSettings::SETTING_PVRPARENTAL_ENABLED)
   {
     if (std::static_pointer_cast<const CSettingBool>(setting)->GetValue() && CServiceBroker::GetSettingsComponent()->GetSettings()->GetString(CSettings::SETTING_PVRPARENTAL_PIN).empty())
@@ -300,7 +300,7 @@ void CPVRActionListener::OnSettingAction(std::shared_ptr<const CSetting> setting
   if (setting == nullptr)
     return;
 
-  const std::string &settingId = setting->GetId();
+  const std::string& settingId = setting->GetId();
   if (settingId == CSettings::SETTING_PVRMANAGER_RESETDB)
   {
     CServiceBroker::GetPVRManager().GUIActions()->ResetPVRDatabase(false);
diff --git a/xbmc/pvr/PVRActionListener.h b/xbmc/pvr/PVRActionListener.h
index 0ffe32e194bf..19ff1bc9cdcc 100644
--- a/xbmc/pvr/PVRActionListener.h
+++ b/xbmc/pvr/PVRActionListener.h
@@ -28,7 +28,7 @@ class CPVRActionListener : public IActionListener, public ISettingCallback
   void Deinit(CPVRManager& mgr);
 
   // IActionListener implementation
-  bool OnAction(const CAction &action) override;
+  bool OnAction(const CAction& action) override;
 
   // ISettingCallback implementation
   void OnSettingChanged(std::shared_ptr<const CSetting> setting) override;
diff --git a/xbmc/pvr/PVRContextMenus.cpp b/xbmc/pvr/PVRContextMenus.cpp
index 6e794792f215..bfb6f119d631 100644
--- a/xbmc/pvr/PVRContextMenus.cpp
+++ b/xbmc/pvr/PVRContextMenus.cpp
@@ -37,17 +37,17 @@ namespace PVR
     { \
     public: \
       explicit clazz(uint32_t label) : CStaticContextMenuAction(label) {} \
-      bool IsVisible(const CFileItem &item) const override; \
-      bool Execute(const CFileItemPtr &item) const override; \
+      bool IsVisible(const CFileItem& item) const override; \
+      bool Execute(const CFileItemPtr& item) const override; \
     };
 
     #define DECL_CONTEXTMENUITEM(clazz) \
     class clazz : public IContextMenuItem \
     { \
     public: \
-      std::string GetLabel(const CFileItem &item) const override; \
-      bool IsVisible(const CFileItem &item) const override; \
-      bool Execute(const CFileItemPtr &item) const override; \
+      std::string GetLabel(const CFileItem& item) const override; \
+      bool IsVisible(const CFileItem& item) const override; \
+      bool Execute(const CFileItemPtr& item) const override; \
     };
 
     DECL_STATICCONTEXTMENUITEM(PlayEpgTag);
@@ -75,9 +75,9 @@ namespace PVR
     public:
       PVRClientMenuHook(const CPVRClientMenuHook& hook) : m_hook(hook) {};
 
-      std::string GetLabel(const CFileItem &item) const override;
-      bool IsVisible(const CFileItem &item) const override;
-      bool Execute(const CFileItemPtr &item) const override;
+      std::string GetLabel(const CFileItem& item) const override;
+      bool IsVisible(const CFileItem& item) const override;
+      bool Execute(const CFileItemPtr& item) const override;
 
       const CPVRClientMenuHook& GetHook() const { return m_hook; }
 
@@ -85,7 +85,7 @@ namespace PVR
       const CPVRClientMenuHook m_hook;
     };
 
-    std::shared_ptr<CPVRTimerInfoTag> GetTimerInfoTagFromItem(const CFileItem &item)
+    std::shared_ptr<CPVRTimerInfoTag> GetTimerInfoTagFromItem(const CFileItem& item)
     {
       std::shared_ptr<CPVRTimerInfoTag> timer;
 
@@ -102,7 +102,7 @@ namespace PVR
     ///////////////////////////////////////////////////////////////////////////////
     // Play epg tag
 
-    bool PlayEpgTag::IsVisible(const CFileItem &item) const
+    bool PlayEpgTag::IsVisible(const CFileItem& item) const
     {
       const std::shared_ptr<CPVREpgInfoTag> epg(item.GetEPGInfoTag());
       if (epg)
@@ -111,7 +111,7 @@ namespace PVR
       return false;
     }
 
-    bool PlayEpgTag::Execute(const CFileItemPtr &item) const
+    bool PlayEpgTag::Execute(const CFileItemPtr& item) const
     {
       return CServiceBroker::GetPVRManager().GUIActions()->PlayEpgTag(item);
     }
@@ -119,7 +119,7 @@ namespace PVR
     ///////////////////////////////////////////////////////////////////////////////
     // Play recording
 
-    bool PlayRecording::IsVisible(const CFileItem &item) const
+    bool PlayRecording::IsVisible(const CFileItem& item) const
     {
       const std::shared_ptr<CPVRRecording> recording = CServiceBroker::GetPVRManager().Recordings()->GetRecordingForEpgTag(item.GetEPGInfoTag());
       if (recording)
@@ -128,7 +128,7 @@ namespace PVR
       return false;
     }
 
-    bool PlayRecording::Execute(const CFileItemPtr &item) const
+    bool PlayRecording::Execute(const CFileItemPtr& item) const
     {
       return CServiceBroker::GetPVRManager().GUIActions()->PlayRecording(item, true /* bCheckResume */);
     }
@@ -136,7 +136,7 @@ namespace PVR
     ///////////////////////////////////////////////////////////////////////////////
     // Show information (epg, recording)
 
-    std::string ShowInformation::GetLabel(const CFileItem &item) const
+    std::string ShowInformation::GetLabel(const CFileItem& item) const
     {
       if (item.GetPVRRecordingInfoTag())
         return g_localizeStrings.Get(19053); /* Recording Information */
@@ -144,7 +144,7 @@ namespace PVR
       return g_localizeStrings.Get(19047); /* Programme information */
     }
 
-    bool ShowInformation::IsVisible(const CFileItem &item) const
+    bool ShowInformation::IsVisible(const CFileItem& item) const
     {
       const std::shared_ptr<CPVRChannel> channel(item.GetPVRChannelInfoTag());
       if (channel)
@@ -163,7 +163,7 @@ namespace PVR
       return false;
     }
 
-    bool ShowInformation::Execute(const CFileItemPtr &item) const
+    bool ShowInformation::Execute(const CFileItemPtr& item) const
     {
       if (item->GetPVRRecordingInfoTag())
         return CServiceBroker::GetPVRManager().GUIActions()->ShowRecordingInfo(item);
@@ -174,7 +174,7 @@ namespace PVR
     ///////////////////////////////////////////////////////////////////////////////
     // Show channel guide
 
-    bool ShowChannelGuide::IsVisible(const CFileItem &item) const
+    bool ShowChannelGuide::IsVisible(const CFileItem& item) const
     {
       const std::shared_ptr<CPVRChannel> channel(item.GetPVRChannelInfoTag());
       if (channel)
@@ -183,7 +183,7 @@ namespace PVR
       return false;
     }
 
-    bool ShowChannelGuide::Execute(const CFileItemPtr &item) const
+    bool ShowChannelGuide::Execute(const CFileItemPtr& item) const
     {
       return CServiceBroker::GetPVRManager().GUIActions()->ShowChannelEPG(item);
     }
@@ -191,7 +191,7 @@ namespace PVR
     ///////////////////////////////////////////////////////////////////////////////
     // Find similar
 
-    bool FindSimilar::IsVisible(const CFileItem &item) const
+    bool FindSimilar::IsVisible(const CFileItem& item) const
     {
       const std::shared_ptr<CPVRChannel> channel(item.GetPVRChannelInfoTag());
       if (channel)
@@ -211,7 +211,7 @@ namespace PVR
       return false;
     }
 
-    bool FindSimilar::Execute(const CFileItemPtr &item) const
+    bool FindSimilar::Execute(const CFileItemPtr& item) const
     {
       return CServiceBroker::GetPVRManager().GUIActions()->FindSimilar(item);
     }
@@ -219,7 +219,7 @@ namespace PVR
     ///////////////////////////////////////////////////////////////////////////////
     // Start recording
 
-    bool StartRecording::IsVisible(const CFileItem &item) const
+    bool StartRecording::IsVisible(const CFileItem& item) const
     {
       const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(item);
 
@@ -237,7 +237,7 @@ namespace PVR
       return false;
     }
 
-    bool StartRecording::Execute(const CFileItemPtr &item) const
+    bool StartRecording::Execute(const CFileItemPtr& item) const
     {
       return CServiceBroker::GetPVRManager().GUIActions()->AddTimer(item, false);
     }
@@ -245,7 +245,7 @@ namespace PVR
     ///////////////////////////////////////////////////////////////////////////////
     // Stop recording
 
-    bool StopRecording::IsVisible(const CFileItem &item) const
+    bool StopRecording::IsVisible(const CFileItem& item) const
     {
       const std::shared_ptr<CPVRRecording> recording(item.GetPVRRecordingInfoTag());
       if (recording && recording->IsInProgress())
@@ -262,7 +262,7 @@ namespace PVR
       return false;
     }
 
-    bool StopRecording::Execute(const CFileItemPtr &item) const
+    bool StopRecording::Execute(const CFileItemPtr& item) const
     {
       return CServiceBroker::GetPVRManager().GUIActions()->StopRecording(item);
     }
@@ -270,7 +270,7 @@ namespace PVR
     ///////////////////////////////////////////////////////////////////////////////
     // Edit recording
 
-    bool EditRecording::IsVisible(const CFileItem &item) const
+    bool EditRecording::IsVisible(const CFileItem& item) const
     {
       const std::shared_ptr<CPVRRecording> recording(item.GetPVRRecordingInfoTag());
       if (recording && !recording->IsDeleted() && !recording->IsInProgress())
@@ -280,7 +280,7 @@ namespace PVR
       return false;
     }
 
-    bool EditRecording::Execute(const CFileItemPtr &item) const
+    bool EditRecording::Execute(const CFileItemPtr& item) const
     {
       return CServiceBroker::GetPVRManager().GUIActions()->EditRecording(item);
     }
@@ -288,7 +288,7 @@ namespace PVR
     ///////////////////////////////////////////////////////////////////////////////
     // Rename recording
 
-    bool RenameRecording::IsVisible(const CFileItem &item) const
+    bool RenameRecording::IsVisible(const CFileItem& item) const
     {
       const std::shared_ptr<CPVRRecording> recording = item.GetPVRRecordingInfoTag();
       if (recording &&
@@ -301,7 +301,7 @@ namespace PVR
       return false;
     }
 
-    bool RenameRecording::Execute(const CFileItemPtr &item) const
+    bool RenameRecording::Execute(const CFileItemPtr& item) const
     {
       return CServiceBroker::GetPVRManager().GUIActions()->RenameRecording(item);
     }
@@ -309,7 +309,7 @@ namespace PVR
     ///////////////////////////////////////////////////////////////////////////////
     // Delete recording
 
-    std::string DeleteRecording::GetLabel(const CFileItem &item) const
+    std::string DeleteRecording::GetLabel(const CFileItem& item) const
     {
       const std::shared_ptr<CPVRRecording> recording(item.GetPVRRecordingInfoTag());
       if (recording && recording->IsDeleted())
@@ -318,7 +318,7 @@ namespace PVR
       return g_localizeStrings.Get(117); /* Delete */
     }
 
-    bool DeleteRecording::IsVisible(const CFileItem &item) const
+    bool DeleteRecording::IsVisible(const CFileItem& item) const
     {
       const std::shared_ptr<CPVRRecording> recording(item.GetPVRRecordingInfoTag());
       if (recording && !recording->IsInProgress())
@@ -334,7 +334,7 @@ namespace PVR
       return false;
     }
 
-    bool DeleteRecording::Execute(const CFileItemPtr &item) const
+    bool DeleteRecording::Execute(const CFileItemPtr& item) const
     {
       return CServiceBroker::GetPVRManager().GUIActions()->DeleteRecording(item);
     }
@@ -342,7 +342,7 @@ namespace PVR
     ///////////////////////////////////////////////////////////////////////////////
     // Undelete recording
 
-    bool UndeleteRecording::IsVisible(const CFileItem &item) const
+    bool UndeleteRecording::IsVisible(const CFileItem& item) const
     {
       const std::shared_ptr<CPVRRecording> recording(item.GetPVRRecordingInfoTag());
       if (recording && recording->IsDeleted())
@@ -351,7 +351,7 @@ namespace PVR
       return false;
     }
 
-    bool UndeleteRecording::Execute(const CFileItemPtr &item) const
+    bool UndeleteRecording::Execute(const CFileItemPtr& item) const
     {
       return CServiceBroker::GetPVRManager().GUIActions()->UndeleteRecording(item);
     }
@@ -378,7 +378,7 @@ namespace PVR
     ///////////////////////////////////////////////////////////////////////////////
     // Activate / deactivate timer or timer rule
 
-    std::string ToggleTimerState::GetLabel(const CFileItem &item) const
+    std::string ToggleTimerState::GetLabel(const CFileItem& item) const
     {
       const std::shared_ptr<CPVRTimerInfoTag> timer(item.GetPVRTimerInfoTag());
       if (timer && timer->m_state != PVR_TIMER_STATE_DISABLED)
@@ -387,7 +387,7 @@ namespace PVR
       return g_localizeStrings.Get(843); /* Activate */
     }
 
-    bool ToggleTimerState::IsVisible(const CFileItem &item) const
+    bool ToggleTimerState::IsVisible(const CFileItem& item) const
     {
       const std::shared_ptr<CPVRTimerInfoTag> timer(item.GetPVRTimerInfoTag());
       if (!timer || URIUtils::PathEquals(item.GetPath(), CPVRTimersPath::PATH_ADDTIMER) || timer->IsBroken())
@@ -397,7 +397,7 @@ namespace PVR
       return timerType && timerType->SupportsEnableDisable();
     }
 
-    bool ToggleTimerState::Execute(const CFileItemPtr &item) const
+    bool ToggleTimerState::Execute(const CFileItemPtr& item) const
     {
       return CServiceBroker::GetPVRManager().GUIActions()->ToggleTimerState(item);
     }
@@ -405,7 +405,7 @@ namespace PVR
     ///////////////////////////////////////////////////////////////////////////////
     // Add timer rule
 
-    bool AddTimerRule::IsVisible(const CFileItem &item) const
+    bool AddTimerRule::IsVisible(const CFileItem& item) const
     {
       const std::shared_ptr<CPVREpgInfoTag> epg = item.GetEPGInfoTag();
       if (epg && !CServiceBroker::GetPVRManager().Timers()->GetTimerForEpgTag(epg))
@@ -416,7 +416,7 @@ namespace PVR
       return false;
     }
 
-    bool AddTimerRule::Execute(const CFileItemPtr &item) const
+    bool AddTimerRule::Execute(const CFileItemPtr& item) const
     {
       return CServiceBroker::GetPVRManager().GUIActions()->AddTimerRule(item, true, true);
     }
@@ -424,7 +424,7 @@ namespace PVR
     ///////////////////////////////////////////////////////////////////////////////
     // Edit timer rule
 
-    std::string EditTimerRule::GetLabel(const CFileItem &item) const
+    std::string EditTimerRule::GetLabel(const CFileItem& item) const
     {
       const std::shared_ptr<CPVRTimerInfoTag> timer(GetTimerInfoTagFromItem(item));
       if (timer && !URIUtils::PathEquals(item.GetPath(), CPVRTimersPath::PATH_ADDTIMER))
@@ -441,7 +441,7 @@ namespace PVR
       return g_localizeStrings.Get(19304); /* View timer rule */
     }
 
-    bool EditTimerRule::IsVisible(const CFileItem &item) const
+    bool EditTimerRule::IsVisible(const CFileItem& item) const
     {
       const std::shared_ptr<CPVRTimerInfoTag> timer(GetTimerInfoTagFromItem(item));
       if (timer && !URIUtils::PathEquals(item.GetPath(), CPVRTimersPath::PATH_ADDTIMER))
@@ -450,7 +450,7 @@ namespace PVR
       return false;
     }
 
-    bool EditTimerRule::Execute(const CFileItemPtr &item) const
+    bool EditTimerRule::Execute(const CFileItemPtr& item) const
     {
       return CServiceBroker::GetPVRManager().GUIActions()->EditTimerRule(item);
     }
@@ -458,7 +458,7 @@ namespace PVR
     ///////////////////////////////////////////////////////////////////////////////
     // Delete timer rule
 
-    bool DeleteTimerRule::IsVisible(const CFileItem &item) const
+    bool DeleteTimerRule::IsVisible(const CFileItem& item) const
     {
       const std::shared_ptr<CPVRTimerInfoTag> timer(GetTimerInfoTagFromItem(item));
       if (timer && !URIUtils::PathEquals(item.GetPath(), CPVRTimersPath::PATH_ADDTIMER))
@@ -474,7 +474,7 @@ namespace PVR
       return false;
     }
 
-    bool DeleteTimerRule::Execute(const CFileItemPtr &item) const
+    bool DeleteTimerRule::Execute(const CFileItemPtr& item) const
     {
       const std::shared_ptr<CFileItem> parentTimer = CServiceBroker::GetPVRManager().GUIActions()->GetTimerRule(item);
       if (parentTimer)
@@ -486,7 +486,7 @@ namespace PVR
     ///////////////////////////////////////////////////////////////////////////////
     // Edit / View timer
 
-    std::string EditTimer::GetLabel(const CFileItem &item) const
+    std::string EditTimer::GetLabel(const CFileItem& item) const
     {
       const std::shared_ptr<CPVRTimerInfoTag> timer(GetTimerInfoTagFromItem(item));
       if (timer)
@@ -508,13 +508,13 @@ namespace PVR
       return g_localizeStrings.Get(19241); /* View timer */
     }
 
-    bool EditTimer::IsVisible(const CFileItem &item) const
+    bool EditTimer::IsVisible(const CFileItem& item) const
     {
       const std::shared_ptr<CPVRTimerInfoTag> timer(GetTimerInfoTagFromItem(item));
       return timer && (!item.GetEPGInfoTag() || !URIUtils::PathEquals(item.GetPath(), CPVRTimersPath::PATH_ADDTIMER));
     }
 
-    bool EditTimer::Execute(const CFileItemPtr &item) const
+    bool EditTimer::Execute(const CFileItemPtr& item) const
     {
       return CServiceBroker::GetPVRManager().GUIActions()->EditTimer(item);
     }
@@ -522,7 +522,7 @@ namespace PVR
     ///////////////////////////////////////////////////////////////////////////////
     // Rename timer
 
-    bool RenameTimer::IsVisible(const CFileItem &item) const
+    bool RenameTimer::IsVisible(const CFileItem& item) const
     {
       const std::shared_ptr<CPVRTimerInfoTag> timer(item.GetPVRTimerInfoTag());
       if (!timer || URIUtils::PathEquals(item.GetPath(), CPVRTimersPath::PATH_ADDTIMER))
@@ -539,7 +539,7 @@ namespace PVR
       return false;
     }
 
-    bool RenameTimer::Execute(const CFileItemPtr &item) const
+    bool RenameTimer::Execute(const CFileItemPtr& item) const
     {
       return CServiceBroker::GetPVRManager().GUIActions()->RenameTimer(item);
     }
@@ -547,7 +547,7 @@ namespace PVR
     ///////////////////////////////////////////////////////////////////////////////
     // Delete timer
 
-    std::string DeleteTimer::GetLabel(const CFileItem &item) const
+    std::string DeleteTimer::GetLabel(const CFileItem& item) const
     {
       if (item.GetPVRTimerInfoTag())
         return g_localizeStrings.Get(117); /* Delete */
@@ -562,7 +562,7 @@ namespace PVR
       return g_localizeStrings.Get(19060); /* Delete timer */
     }
 
-    bool DeleteTimer::IsVisible(const CFileItem &item) const
+    bool DeleteTimer::IsVisible(const CFileItem& item) const
     {
       const std::shared_ptr<CPVRTimerInfoTag> timer(GetTimerInfoTagFromItem(item));
       if (timer && (!item.GetEPGInfoTag() || !URIUtils::PathEquals(item.GetPath(), CPVRTimersPath::PATH_ADDTIMER)) && !timer->IsRecording())
@@ -574,7 +574,7 @@ namespace PVR
       return false;
     }
 
-    bool DeleteTimer::Execute(const CFileItemPtr &item) const
+    bool DeleteTimer::Execute(const CFileItemPtr& item) const
     {
       return CServiceBroker::GetPVRManager().GUIActions()->DeleteTimer(item);
     }
@@ -582,12 +582,12 @@ namespace PVR
     ///////////////////////////////////////////////////////////////////////////////
     // PVR Client menu hook
 
-    std::string PVRClientMenuHook::GetLabel(const CFileItem &item) const
+    std::string PVRClientMenuHook::GetLabel(const CFileItem& item) const
     {
       return m_hook.GetLabel();
     }
 
-    bool PVRClientMenuHook::IsVisible(const CFileItem &item) const
+    bool PVRClientMenuHook::IsVisible(const CFileItem& item) const
     {
       if (m_hook.IsAllHook())
         return !item.m_bIsFolder && !URIUtils::PathEquals(item.GetPath(), CPVRTimersPath::PATH_ADDTIMER);
@@ -605,7 +605,7 @@ namespace PVR
         return false;
     }
 
-    bool PVRClientMenuHook::Execute(const CFileItemPtr &item) const
+    bool PVRClientMenuHook::Execute(const CFileItemPtr& item) const
     {
       const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(*item);
       if (!client)
diff --git a/xbmc/pvr/PVRDatabase.cpp b/xbmc/pvr/PVRDatabase.cpp
index 791b2b7222a6..59f8a09af191 100644
--- a/xbmc/pvr/PVRDatabase.cpp
+++ b/xbmc/pvr/PVRDatabase.cpp
@@ -230,7 +230,7 @@ bool CPVRDatabase::DeleteClients()
   return DeleteValues("clients");
 }
 
-bool CPVRDatabase::Persist(const CPVRClient &client)
+bool CPVRDatabase::Persist(const CPVRClient& client)
 {
   if (client.GetID() == PVR_INVALID_CLIENT_ID)
     return false;
@@ -245,7 +245,7 @@ bool CPVRDatabase::Persist(const CPVRClient &client)
   return ExecuteQuery(strQuery);
 }
 
-bool CPVRDatabase::Delete(const CPVRClient &client)
+bool CPVRDatabase::Delete(const CPVRClient& client)
 {
   if (client.GetID() == PVR_INVALID_CLIENT_ID)
     return false;
@@ -260,7 +260,7 @@ bool CPVRDatabase::Delete(const CPVRClient &client)
   return DeleteValues("clients", filter);
 }
 
-int CPVRDatabase::GetPriority(const CPVRClient &client)
+int CPVRDatabase::GetPriority(const CPVRClient& client)
 {
   if (client.GetID() == PVR_INVALID_CLIENT_ID)
     return 0;
@@ -288,7 +288,7 @@ bool CPVRDatabase::DeleteChannels(void)
   return DeleteValues("channels");
 }
 
-bool CPVRDatabase::Delete(const CPVRChannel &channel)
+bool CPVRDatabase::Delete(const CPVRChannel& channel)
 {
   /* invalid channel */
   if (channel.ChannelID() <= 0)
@@ -303,7 +303,7 @@ bool CPVRDatabase::Delete(const CPVRChannel &channel)
   return DeleteValues("channels", filter);
 }
 
-int CPVRDatabase::Get(CPVRChannelGroup &results, bool bCompressDB)
+int CPVRDatabase::Get(CPVRChannelGroup& results, bool bCompressDB)
 {
   int iReturn(0);
   bool bUseEpgDB = CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_EPG_STOREEPGINDATABASE);
@@ -376,7 +376,7 @@ int CPVRDatabase::Get(CPVRChannelGroup &results, bool bCompressDB)
 
 /********** Channel group methods **********/
 
-bool CPVRDatabase::RemoveChannelsFromGroup(const CPVRChannelGroup &group)
+bool CPVRDatabase::RemoveChannelsFromGroup(const CPVRChannelGroup& group)
 {
   Filter filter;
   filter.AppendWhere(PrepareSQL("idGroup = %u", group.GroupID()));
@@ -385,7 +385,7 @@ bool CPVRDatabase::RemoveChannelsFromGroup(const CPVRChannelGroup &group)
   return DeleteValues("map_channelgroups_channels", filter);
 }
 
-bool CPVRDatabase::GetCurrentGroupMembers(const CPVRChannelGroup &group, std::vector<int> &members)
+bool CPVRDatabase::GetCurrentGroupMembers(const CPVRChannelGroup& group, std::vector<int>& members)
 {
   bool bReturn(false);
   /* invalid group id */
@@ -423,7 +423,7 @@ bool CPVRDatabase::GetCurrentGroupMembers(const CPVRChannelGroup &group, std::ve
   return bReturn;
 }
 
-bool CPVRDatabase::DeleteChannelsFromGroup(const CPVRChannelGroup &group, const std::vector<int> &channelsToDelete)
+bool CPVRDatabase::DeleteChannelsFromGroup(const CPVRChannelGroup& group, const std::vector<int>& channelsToDelete)
 {
   bool bDelete(true);
   unsigned int iDeletedChannels(0);
@@ -470,7 +470,7 @@ int CPVRDatabase::GetClientIdByChannelId(int iChannelId)
   return PVR_INVALID_CLIENT_ID;
 }
 
-bool CPVRDatabase::RemoveStaleChannelsFromGroup(const CPVRChannelGroup &group)
+bool CPVRDatabase::RemoveStaleChannelsFromGroup(const CPVRChannelGroup& group)
 {
   bool bDelete(true);
   /* invalid group id */
@@ -543,7 +543,7 @@ bool CPVRDatabase::DeleteChannelGroups(void)
   return DeleteValues("channelgroups") && DeleteValues("map_channelgroups_channels");
 }
 
-bool CPVRDatabase::Delete(const CPVRChannelGroup &group)
+bool CPVRDatabase::Delete(const CPVRChannelGroup& group)
 {
   /* invalid group id */
   if (group.GroupID() <= 0)
@@ -581,7 +581,7 @@ bool CPVRDatabase::Delete(const CPVRChannelGroup &group)
   return true;
 }
 
-bool CPVRDatabase::Get(CPVRChannelGroups &results)
+bool CPVRDatabase::Get(CPVRChannelGroups& results)
 {
   bool bReturn = false;
   CSingleLock lock(m_critSection);
@@ -617,7 +617,7 @@ bool CPVRDatabase::Get(CPVRChannelGroups &results)
   return bReturn;
 }
 
-int CPVRDatabase::Get(CPVRChannelGroup &group, const CPVRChannelGroup &allGroup)
+int CPVRDatabase::Get(CPVRChannelGroup& group, const CPVRChannelGroup& allGroup)
 {
   int iReturn = -1;
 
@@ -691,7 +691,7 @@ int CPVRDatabase::Get(CPVRChannelGroup &group, const CPVRChannelGroup &allGroup)
   return iReturn;
 }
 
-bool CPVRDatabase::PersistChannels(CPVRChannelGroup &group)
+bool CPVRDatabase::PersistChannels(CPVRChannelGroup& group)
 {
   bool bReturn(true);
 
@@ -728,7 +728,7 @@ bool CPVRDatabase::PersistChannels(CPVRChannelGroup &group)
   return bReturn;
 }
 
-bool CPVRDatabase::PersistGroupMembers(const CPVRChannelGroup &group)
+bool CPVRDatabase::PersistGroupMembers(const CPVRChannelGroup& group)
 {
   bool bReturn = true;
   bool bRemoveChannels = true;
@@ -771,7 +771,7 @@ bool CPVRDatabase::ResetEPG(void)
   return ExecuteQuery(strQuery);
 }
 
-bool CPVRDatabase::Persist(CPVRChannelGroup &group)
+bool CPVRDatabase::Persist(CPVRChannelGroup& group)
 {
   bool bReturn(false);
   if (group.GroupName().empty())
@@ -813,7 +813,7 @@ bool CPVRDatabase::Persist(CPVRChannelGroup &group)
   return bReturn;
 }
 
-bool CPVRDatabase::Persist(CPVRChannel &channel, bool bCommit)
+bool CPVRDatabase::Persist(CPVRChannel& channel, bool bCommit)
 {
   bool bReturn(false);
 
@@ -866,7 +866,7 @@ bool CPVRDatabase::Persist(CPVRChannel &channel, bool bCommit)
   return bReturn;
 }
 
-bool CPVRDatabase::UpdateLastWatched(const CPVRChannel &channel)
+bool CPVRDatabase::UpdateLastWatched(const CPVRChannel& channel)
 {
   CSingleLock lock(m_critSection);
   const std::string strQuery = PrepareSQL("UPDATE channels SET iLastWatched = %u WHERE idChannel = %d",
@@ -874,7 +874,7 @@ bool CPVRDatabase::UpdateLastWatched(const CPVRChannel &channel)
   return ExecuteQuery(strQuery);
 }
 
-bool CPVRDatabase::UpdateLastWatched(const CPVRChannelGroup &group)
+bool CPVRDatabase::UpdateLastWatched(const CPVRChannelGroup& group)
 {
   CSingleLock lock(m_critSection);
   const std::string strQuery = PrepareSQL("UPDATE channelgroups SET iLastWatched = %u WHERE idGroup = %d",
diff --git a/xbmc/pvr/PVRDatabase.h b/xbmc/pvr/PVRDatabase.h
index b5b88d319153..7227715e1f04 100644
--- a/xbmc/pvr/PVRDatabase.h
+++ b/xbmc/pvr/PVRDatabase.h
@@ -71,21 +71,21 @@ namespace PVR
      * @param client The client to persist.
      * @return True when persisted, false otherwise.
      */
-    bool Persist(const CPVRClient &client);
+    bool Persist(const CPVRClient& client);
 
     /*!
      * @brief Remove a client entry from the database
      * @param client The client to remove.
      * @return True if the client was removed, false otherwise.
      */
-    bool Delete(const CPVRClient &client);
+    bool Delete(const CPVRClient& client);
 
     /*!
      * @brief Get the priority for a given client from the database.
      * @param client The client.
      * @return The priority.
      */
-    int GetPriority(const CPVRClient &client);
+    int GetPriority(const CPVRClient& client);
 
     /*! @name Channel methods */
     //@{
@@ -102,14 +102,14 @@ namespace PVR
      * @param bCommit queue only or queue and commit
      * @return True when persisted or queued, false otherwise.
      */
-    bool Persist(CPVRChannel &channel, bool bCommit);
+    bool Persist(CPVRChannel& channel, bool bCommit);
 
     /*!
      * @brief Remove a channel entry from the database
      * @param channel The channel to remove.
      * @return True if the channel was removed, false otherwise.
      */
-    bool Delete(const CPVRChannel &channel);
+    bool Delete(const CPVRChannel& channel);
 
     /*!
      * @brief Get the list of channels from the database
@@ -117,7 +117,7 @@ namespace PVR
      * @param bCompressDB Compress the DB after getting the list
      * @return The amount of channels that were added.
      */
-    int Get(CPVRChannelGroup &results, bool bCompressDB);
+    int Get(CPVRChannelGroup& results, bool bCompressDB);
 
     //@}
 
@@ -135,14 +135,14 @@ namespace PVR
      * @param group The group to delete.
      * @return True if the group was deleted successfully, false otherwise.
      */
-    bool Delete(const CPVRChannelGroup &group);
+    bool Delete(const CPVRChannelGroup& group);
 
     /*!
      * @brief Get the channel groups.
      * @param results The container to store the results in.
      * @return True if the list was fetched successfully, false otherwise.
      */
-    bool Get(CPVRChannelGroups &results);
+    bool Get(CPVRChannelGroups& results);
 
     /*!
      * @brief Add the group members to a group.
@@ -150,14 +150,14 @@ namespace PVR
      * @param allGroup The "all channels group" matching param group's 'IsRadio' property.
      * @return The amount of channels that were added.
      */
-    int Get(CPVRChannelGroup &group, const CPVRChannelGroup &allGroup);
+    int Get(CPVRChannelGroup& group, const CPVRChannelGroup& allGroup);
 
     /*!
      * @brief Add or update a channel group entry in the database.
      * @param group The group to persist.
      * @return True if the group was persisted successfully, false otherwise.
      */
-    bool Persist(CPVRChannelGroup &group);
+    bool Persist(CPVRChannelGroup& group);
 
     /*!
      * @brief Reset all epg ids to 0
@@ -204,14 +204,14 @@ namespace PVR
      * @param channel the channel
      * @return whether the update was successful
      */
-    bool UpdateLastWatched(const CPVRChannel &channel);
+    bool UpdateLastWatched(const CPVRChannel& channel);
 
     /*!
      * @brief Updates the last watched timestamp for the channel group
      * @param group the group
      * @return whether the update was successful
      */
-    bool UpdateLastWatched(const CPVRChannelGroup &group);
+    bool UpdateLastWatched(const CPVRChannelGroup& group);
     //@}
 
   private:
@@ -227,16 +227,16 @@ namespace PVR
     void UpdateTables(int version) override;
     int GetMinSchemaVersion() const override { return 11; }
 
-    bool DeleteChannelsFromGroup(const CPVRChannelGroup &group, const std::vector<int> &channelsToDelete);
+    bool DeleteChannelsFromGroup(const CPVRChannelGroup& group, const std::vector<int>& channelsToDelete);
 
-    bool GetCurrentGroupMembers(const CPVRChannelGroup &group, std::vector<int> &members);
-    bool RemoveStaleChannelsFromGroup(const CPVRChannelGroup &group);
+    bool GetCurrentGroupMembers(const CPVRChannelGroup& group, std::vector<int>& members);
+    bool RemoveStaleChannelsFromGroup(const CPVRChannelGroup& group);
 
-    bool PersistGroupMembers(const CPVRChannelGroup &group);
+    bool PersistGroupMembers(const CPVRChannelGroup& group);
 
-    bool PersistChannels(CPVRChannelGroup &group);
+    bool PersistChannels(CPVRChannelGroup& group);
 
-    bool RemoveChannelsFromGroup(const CPVRChannelGroup &group);
+    bool RemoveChannelsFromGroup(const CPVRChannelGroup& group);
 
     int GetClientIdByChannelId(int iChannelId);
 
diff --git a/xbmc/pvr/PVRGUIActions.cpp b/xbmc/pvr/PVRGUIActions.cpp
index 60291b57e450..146b6149429e 100644
--- a/xbmc/pvr/PVRGUIActions.cpp
+++ b/xbmc/pvr/PVRGUIActions.cpp
@@ -82,7 +82,7 @@ namespace PVR
   class AsyncRecordingAction : private IRunnable
   {
   public:
-    bool Execute(const CFileItemPtr &item);
+    bool Execute(const CFileItemPtr& item);
 
   protected:
     AsyncRecordingAction() = default;
@@ -92,13 +92,13 @@ namespace PVR
     void Run() override;
 
     // the worker function
-    virtual bool DoRun(const CFileItemPtr &item) = 0;
+    virtual bool DoRun(const CFileItemPtr& item) = 0;
 
     CFileItemPtr m_item;
     bool m_bSuccess = false;
   };
 
-  bool AsyncRecordingAction::Execute(const CFileItemPtr &item)
+  bool AsyncRecordingAction::Execute(const CFileItemPtr& item)
   {
     m_item = item;
     CGUIDialogBusy::Wait(this, 100, false);
@@ -116,7 +116,7 @@ namespace PVR
   class AsyncRenameRecording : public AsyncRecordingAction
   {
   public:
-    explicit AsyncRenameRecording(const std::string &strNewName) : m_strNewName(strNewName) {}
+    explicit AsyncRenameRecording(const std::string& strNewName) : m_strNewName(strNewName) {}
 
   private:
     bool DoRun(const std::shared_ptr<CFileItem>& item) override
@@ -190,7 +190,7 @@ namespace PVR
   class AsyncSetRecordingPlayCount : public AsyncRecordingAction
   {
   private:
-    bool DoRun(const CFileItemPtr &item) override
+    bool DoRun(const CFileItemPtr& item) override
     {
       const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(*item);
       if (client)
@@ -205,7 +205,7 @@ namespace PVR
   class AsyncSetRecordingLifetime : public AsyncRecordingAction
   {
   private:
-    bool DoRun(const CFileItemPtr &item) override
+    bool DoRun(const CFileItemPtr& item) override
     {
       const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(*item);
       if (client)
@@ -232,7 +232,7 @@ namespace PVR
   {
   }
 
-  bool CPVRGUIActions::ShowEPGInfo(const CFileItemPtr &item) const
+  bool CPVRGUIActions::ShowEPGInfo(const CFileItemPtr& item) const
   {
     const std::shared_ptr<CPVRChannel> channel(CPVRItem(item).GetChannel());
     if (channel && CheckParentalLock(channel) != ParentalCheckResult::SUCCESS)
@@ -258,7 +258,7 @@ namespace PVR
   }
 
 
-  bool CPVRGUIActions::ShowChannelEPG(const CFileItemPtr &item) const
+  bool CPVRGUIActions::ShowChannelEPG(const CFileItemPtr& item) const
   {
     const std::shared_ptr<CPVRChannel> channel(CPVRItem(item).GetChannel());
     if (channel && CheckParentalLock(channel) != ParentalCheckResult::SUCCESS)
@@ -276,7 +276,7 @@ namespace PVR
   }
 
 
-  bool CPVRGUIActions::ShowRecordingInfo(const CFileItemPtr &item) const
+  bool CPVRGUIActions::ShowRecordingInfo(const CFileItemPtr& item) const
   {
     if (!item->IsPVRRecording())
     {
@@ -339,7 +339,7 @@ namespace PVR
     return true;
   };
 
-  bool CPVRGUIActions::ShowTimerSettings(const std::shared_ptr<CPVRTimerInfoTag> &timer) const
+  bool CPVRGUIActions::ShowTimerSettings(const std::shared_ptr<CPVRTimerInfoTag>& timer) const
   {
     CGUIDialogPVRTimerSettings* pDlgInfo = CServiceBroker::GetGUI()->GetWindowManager().GetWindow<CGUIDialogPVRTimerSettings>(WINDOW_DIALOG_PVR_TIMER_SETTING);
     if (!pDlgInfo)
@@ -391,7 +391,7 @@ namespace PVR
     return false;
   }
 
-  bool CPVRGUIActions::AddTimer(const CFileItemPtr &item, bool bShowTimerSettings) const
+  bool CPVRGUIActions::AddTimer(const CFileItemPtr& item, bool bShowTimerSettings) const
   {
     return AddTimer(item, false, bShowTimerSettings, false);
   }
@@ -453,7 +453,7 @@ namespace PVR
     return AddTimer(newTimer);
   }
 
-  bool CPVRGUIActions::AddTimer(const std::shared_ptr<CPVRTimerInfoTag> &item) const
+  bool CPVRGUIActions::AddTimer(const std::shared_ptr<CPVRTimerInfoTag>& item) const
   {
     if (!item->Channel() && item->GetTimerType() && !item->GetTimerType()->IsEpgBasedTimerRule())
     {
@@ -500,7 +500,7 @@ namespace PVR
       explicit InstantRecordingActionSelector(int iInstantRecordTime);
       virtual ~InstantRecordingActionSelector() = default;
 
-      void AddAction(PVRRECORD_INSTANTRECORDACTION eAction, const std::string &title);
+      void AddAction(PVRRECORD_INSTANTRECORDACTION eAction, const std::string& title);
       void PreSelectAction(PVRRECORD_INSTANTRECORDACTION eAction);
       PVRRECORD_INSTANTRECORDACTION Select();
 
@@ -525,7 +525,7 @@ namespace PVR
       }
     }
 
-    void InstantRecordingActionSelector::AddAction(PVRRECORD_INSTANTRECORDACTION eAction, const std::string &title)
+    void InstantRecordingActionSelector::AddAction(PVRRECORD_INSTANTRECORDACTION eAction, const std::string& title)
     {
       if (m_actions.find(eAction) == m_actions.end())
       {
@@ -561,7 +561,7 @@ namespace PVR
 
     void InstantRecordingActionSelector::PreSelectAction(PVRRECORD_INSTANTRECORDACTION eAction)
     {
-      const auto &it = m_actions.find(eAction);
+      const auto& it = m_actions.find(eAction);
       if (it != m_actions.end())
         m_pDlgSelect->SetSelected(it->second);
     }
@@ -575,7 +575,7 @@ namespace PVR
       if (m_pDlgSelect->IsConfirmed())
       {
         int iSelection = m_pDlgSelect->GetSelectedItem();
-        for (const auto &action : m_actions)
+        for (const auto& action : m_actions)
         {
           if (action.second == iSelection)
           {
@@ -599,7 +599,7 @@ namespace PVR
     return false;
   }
 
-  bool CPVRGUIActions::SetRecordingOnChannel(const std::shared_ptr<CPVRChannel> &channel, bool bOnOff)
+  bool CPVRGUIActions::SetRecordingOnChannel(const std::shared_ptr<CPVRChannel>& channel, bool bOnOff)
   {
     bool bReturn = false;
 
@@ -737,7 +737,7 @@ namespace PVR
     return bReturn;
   }
 
-  bool CPVRGUIActions::ToggleTimer(const CFileItemPtr &item) const
+  bool CPVRGUIActions::ToggleTimer(const CFileItemPtr& item) const
   {
     if (!item->HasEPGInfoTag())
       return false;
@@ -754,7 +754,7 @@ namespace PVR
       return AddTimer(item, false);
   }
 
-  bool CPVRGUIActions::ToggleTimerState(const CFileItemPtr &item) const
+  bool CPVRGUIActions::ToggleTimerState(const CFileItemPtr& item) const
   {
     if (!item->HasPVRTimerInfoTag())
       return false;
@@ -772,7 +772,7 @@ namespace PVR
     return false;
   }
 
-  bool CPVRGUIActions::EditTimer(const CFileItemPtr &item) const
+  bool CPVRGUIActions::EditTimer(const CFileItemPtr& item) const
   {
     const std::shared_ptr<CPVRTimerInfoTag> timer(CPVRItem(item).GetTimerInfoTag());
     if (!timer)
@@ -814,7 +814,7 @@ namespace PVR
     return false;
   }
 
-  bool CPVRGUIActions::EditTimerRule(const CFileItemPtr &item) const
+  bool CPVRGUIActions::EditTimerRule(const CFileItemPtr& item) const
   {
     const std::shared_ptr<CFileItem> parentTimer = GetTimerRule(item);
     if (parentTimer)
@@ -840,7 +840,7 @@ namespace PVR
     return {};
   }
 
-  bool CPVRGUIActions::RenameTimer(const CFileItemPtr &item) const
+  bool CPVRGUIActions::RenameTimer(const CFileItemPtr& item) const
   {
     if (!item->HasPVRTimerInfoTag())
       return false;
@@ -868,17 +868,17 @@ namespace PVR
     return true;
   }
 
-  bool CPVRGUIActions::DeleteTimer(const CFileItemPtr &item) const
+  bool CPVRGUIActions::DeleteTimer(const CFileItemPtr& item) const
   {
     return DeleteTimer(item, false, false);
   }
 
-  bool CPVRGUIActions::DeleteTimerRule(const CFileItemPtr &item) const
+  bool CPVRGUIActions::DeleteTimerRule(const CFileItemPtr& item) const
   {
     return DeleteTimer(item, false, true);
   }
 
-  bool CPVRGUIActions::DeleteTimer(const CFileItemPtr &item, bool bIsRecording, bool bDeleteRule) const
+  bool CPVRGUIActions::DeleteTimer(const CFileItemPtr& item, bool bIsRecording, bool bDeleteRule) const
   {
     std::shared_ptr<CPVRTimerInfoTag> timer;
     const std::shared_ptr<CPVRRecording> recording(CPVRItem(item).GetRecording());
@@ -927,7 +927,7 @@ namespace PVR
     return false;
   }
 
-  bool CPVRGUIActions::DeleteTimer(const std::shared_ptr<CPVRTimerInfoTag> &timer, bool bIsRecording, bool bDeleteRule) const
+  bool CPVRGUIActions::DeleteTimer(const std::shared_ptr<CPVRTimerInfoTag>& timer, bool bIsRecording, bool bDeleteRule) const
   {
     TimerOperationResult result = CServiceBroker::GetPVRManager().Timers()->DeleteTimer(timer, bIsRecording, bDeleteRule);
     switch (result)
@@ -960,7 +960,7 @@ namespace PVR
     return false;
   }
 
-  bool CPVRGUIActions::ConfirmDeleteTimer(const std::shared_ptr<CPVRTimerInfoTag> &timer, bool &bDeleteRule) const
+  bool CPVRGUIActions::ConfirmDeleteTimer(const std::shared_ptr<CPVRTimerInfoTag>& timer, bool& bDeleteRule) const
   {
     bool bConfirmed(false);
     const std::shared_ptr<CPVRTimerInfoTag> parentTimer(CServiceBroker::GetPVRManager().Timers()->GetTimerRule(timer));
@@ -995,7 +995,7 @@ namespace PVR
     return bConfirmed;
   }
 
-  bool CPVRGUIActions::StopRecording(const CFileItemPtr &item) const
+  bool CPVRGUIActions::StopRecording(const CFileItemPtr& item) const
   {
     if (!DeleteTimer(item, true, false))
       return false;
@@ -1004,7 +1004,7 @@ namespace PVR
     return true;
   }
 
-  bool CPVRGUIActions::ConfirmStopRecording(const std::shared_ptr<CPVRTimerInfoTag> &timer) const
+  bool CPVRGUIActions::ConfirmStopRecording(const std::shared_ptr<CPVRTimerInfoTag>& timer) const
   {
     return CGUIDialogYesNo::ShowAndGetInput(CVariant{847}, // "Confirm stop recording"
                                             CVariant{848}, // "Are you sure you want to stop this recording?"
@@ -1012,7 +1012,7 @@ namespace PVR
                                             CVariant{timer->Title()});
   }
 
-  bool CPVRGUIActions::EditRecording(const CFileItemPtr &item) const
+  bool CPVRGUIActions::EditRecording(const CFileItemPtr& item) const
   {
     const std::shared_ptr<CPVRRecording> recording = CPVRItem(item).GetRecording();
     if (!recording)
@@ -1053,7 +1053,7 @@ namespace PVR
     return CGUIDialogPVRRecordingSettings::CanEditRecording(item);
   }
 
-  bool CPVRGUIActions::RenameRecording(const CFileItemPtr &item) const
+  bool CPVRGUIActions::RenameRecording(const CFileItemPtr& item) const
   {
     const std::shared_ptr<CPVRRecording> recording(item->GetPVRRecordingInfoTag());
     if (!recording)
@@ -1072,7 +1072,7 @@ namespace PVR
     return true;
   }
 
-  bool CPVRGUIActions::DeleteRecording(const CFileItemPtr &item) const
+  bool CPVRGUIActions::DeleteRecording(const CFileItemPtr& item) const
   {
     if ((!item->IsPVRRecording() && !item->m_bIsFolder) || item->IsParentFolder())
       return false;
@@ -1089,7 +1089,7 @@ namespace PVR
     return true;
   }
 
-  bool CPVRGUIActions::ConfirmDeleteRecording(const CFileItemPtr &item) const
+  bool CPVRGUIActions::ConfirmDeleteRecording(const CFileItemPtr& item) const
   {
     return CGUIDialogYesNo::ShowAndGetInput(CVariant{122}, // "Confirm delete"
                                             item->m_bIsFolder
@@ -1118,7 +1118,7 @@ namespace PVR
                                             CVariant{19293}); // "Remove all deleted recordings from trash? This operation cannot be reverted."
   }
 
-  bool CPVRGUIActions::UndeleteRecording(const CFileItemPtr &item) const
+  bool CPVRGUIActions::UndeleteRecording(const CFileItemPtr& item) const
   {
     if (!item->IsDeletedPVRRecording())
       return false;
@@ -1132,7 +1132,7 @@ namespace PVR
     return true;
   }
 
-  bool CPVRGUIActions::ShowRecordingSettings(const std::shared_ptr<CPVRRecording> &recording) const
+  bool CPVRGUIActions::ShowRecordingSettings(const std::shared_ptr<CPVRRecording>& recording) const
   {
     CGUIDialogPVRRecordingSettings* pDlgInfo = CServiceBroker::GetGUI()->GetWindowManager().GetWindow<CGUIDialogPVRRecordingSettings>(WINDOW_DIALOG_PVR_RECORDING_SETTING);
     if (!pDlgInfo)
@@ -1147,7 +1147,7 @@ namespace PVR
     return pDlgInfo->IsConfirmed();
   }
 
-  std::string CPVRGUIActions::GetResumeLabel(const CFileItem &item) const
+  std::string CPVRGUIActions::GetResumeLabel(const CFileItem& item) const
   {
     std::string resumeString;
 
@@ -1162,7 +1162,7 @@ namespace PVR
     return resumeString;
   }
 
-  bool CPVRGUIActions::CheckResumeRecording(const CFileItemPtr &item) const
+  bool CPVRGUIActions::CheckResumeRecording(const CFileItemPtr& item) const
   {
     bool bPlayIt(true);
     std::string resumeString(GetResumeLabel(*item));
@@ -1180,7 +1180,7 @@ namespace PVR
     return bPlayIt;
   }
 
-  bool CPVRGUIActions::ResumePlayRecording(const CFileItemPtr &item, bool bFallbackToPlay) const
+  bool CPVRGUIActions::ResumePlayRecording(const CFileItemPtr& item, bool bFallbackToPlay) const
   {
     bool bCanResume = !GetResumeLabel(*item).empty();
     if (bCanResume)
@@ -1246,7 +1246,7 @@ namespace PVR
     CheckAndSwitchToFullscreen(bFullscreen);
   }
 
-  bool CPVRGUIActions::PlayRecording(const CFileItemPtr &item, bool bCheckResume) const
+  bool CPVRGUIActions::PlayRecording(const CFileItemPtr& item, bool bCheckResume) const
   {
     const std::shared_ptr<CPVRRecording> recording(CPVRItem(item).GetRecording());
     if (!recording)
@@ -1268,7 +1268,7 @@ namespace PVR
     return true;
   }
 
-  bool CPVRGUIActions::PlayEpgTag(const CFileItemPtr &item) const
+  bool CPVRGUIActions::PlayEpgTag(const CFileItemPtr& item) const
   {
     const std::shared_ptr<CPVREpgInfoTag> epgTag(CPVRItem(item).GetEpgInfoTag());
     if (!epgTag)
@@ -1285,7 +1285,7 @@ namespace PVR
     return true;
   }
 
-  bool CPVRGUIActions::SwitchToChannel(const CFileItemPtr &item, bool bCheckResume) const
+  bool CPVRGUIActions::SwitchToChannel(const CFileItemPtr& item, bool bCheckResume) const
   {
     if (item->m_bIsFolder)
       return false;
@@ -1453,7 +1453,7 @@ namespace PVR
     return SwitchToChannel(std::make_shared<CFileItem>(channel), true);
   }
 
-  bool CPVRGUIActions::PlayMedia(const CFileItemPtr &item) const
+  bool CPVRGUIActions::PlayMedia(const CFileItemPtr& item) const
   {
     CFileItemPtr pvrItem(item);
     if (URIUtils::IsPVRChannel(item->GetPath()) && !item->HasPVRChannelInfoTag())
@@ -1477,7 +1477,7 @@ namespace PVR
     return false;
   }
 
-  bool CPVRGUIActions::HideChannel(const CFileItemPtr &item) const
+  bool CPVRGUIActions::HideChannel(const CFileItemPtr& item) const
   {
     const std::shared_ptr<CPVRChannel> channel(item->GetPVRChannelInfoTag());
 
@@ -1725,7 +1725,7 @@ namespace PVR
     return true;
   }
 
-  ParentalCheckResult CPVRGUIActions::CheckParentalLock(const std::shared_ptr<CPVRChannel> &channel) const
+  ParentalCheckResult CPVRGUIActions::CheckParentalLock(const std::shared_ptr<CPVRChannel>& channel) const
   {
     if (!CServiceBroker::GetPVRManager().IsParentalLocked(channel))
       return ParentalCheckResult::SUCCESS;
@@ -2108,7 +2108,7 @@ namespace PVR
     m_bReminderAnnouncementRunning = false;
   }
 
-  void CPVRGUIActions::SetSelectedItemPath(bool bRadio, const std::string &path)
+  void CPVRGUIActions::SetSelectedItemPath(bool bRadio, const std::string& path)
   {
     CSingleLock lock(m_critSection);
     if (bRadio)
@@ -2209,7 +2209,7 @@ namespace PVR
     }
   }
 
-  CPVRChannelNumberInputHandler &CPVRGUIActions::GetChannelNumberInputHandler()
+  CPVRChannelNumberInputHandler& CPVRGUIActions::GetChannelNumberInputHandler()
   {
     // window/dialog specific input handler
     CPVRChannelNumberInputHandler *windowInputHandler = dynamic_cast<CPVRChannelNumberInputHandler*>(CServiceBroker::GetGUI()->GetWindowManager().GetWindow(CServiceBroker::GetGUI()->GetWindowManager().GetActiveWindowOrDialog()));
@@ -2220,12 +2220,12 @@ namespace PVR
     return m_channelNumberInputHandler;
   }
 
-  CPVRGUIChannelNavigator &CPVRGUIActions::GetChannelNavigator()
+  CPVRGUIChannelNavigator& CPVRGUIActions::GetChannelNavigator()
   {
     return m_channelNavigator;
   }
 
-  void CPVRGUIActions::OnPlaybackStarted(const CFileItemPtr &item)
+  void CPVRGUIActions::OnPlaybackStarted(const CFileItemPtr& item)
   {
     if (item->HasPVRChannelInfoTag())
     {
@@ -2235,7 +2235,7 @@ namespace PVR
     }
   }
 
-  void CPVRGUIActions::OnPlaybackStopped(const CFileItemPtr &item)
+  void CPVRGUIActions::OnPlaybackStopped(const CFileItemPtr& item)
   {
     if (item->HasPVRChannelInfoTag())
     {
@@ -2293,7 +2293,7 @@ namespace PVR
             // channel number present in any group?
             const CPVRChannelGroups* groupAccess = CServiceBroker::GetPVRManager().ChannelGroups()->Get(bRadio);
             const std::vector<std::shared_ptr<CPVRChannelGroup>> groups = groupAccess->GetMembers(true);
-            for (const auto &currentGroup : groups)
+            for (const auto& currentGroup : groups)
             {
               channel = currentGroup->GetByChannelNumber(channelNumber);
               if (channel)
diff --git a/xbmc/pvr/PVRGUIActions.h b/xbmc/pvr/PVRGUIActions.h
index 0f33b78b808a..bcc5e5dab0ad 100644
--- a/xbmc/pvr/PVRGUIActions.h
+++ b/xbmc/pvr/PVRGUIActions.h
@@ -107,7 +107,7 @@ namespace PVR
      * @brief Add a timer to the client. Doesn't add the timer to the container. The backend will do this.
      * @return True if it was sent correctly, false if not.
      */
-    bool AddTimer(const std::shared_ptr<CPVRTimerInfoTag> &item) const;
+    bool AddTimer(const std::shared_ptr<CPVRTimerInfoTag>& item) const;
 
     /*!
      * @brief Create a new timer rule, either interactive or non-interactive.
@@ -193,7 +193,7 @@ namespace PVR
      * @param bOnOff True to start recording, false to stop.
      * @return True if the recording was started or stopped successfully, false otherwise.
      */
-    bool SetRecordingOnChannel(const std::shared_ptr<CPVRChannel> &channel, bool bOnOff);
+    bool SetRecordingOnChannel(const std::shared_ptr<CPVRChannel>& channel, bool bOnOff);
 
     /*!
      * @brief Stop a currently active recording, always showing a confirmation dialog.
@@ -248,7 +248,7 @@ namespace PVR
      * @param item containing a recording or an epg tag.
      * @return the localized resume play label that can be used for instance as context menu item label or an empty string if resume is not possible.
      */
-    std::string GetResumeLabel(const CFileItem &item) const;
+    std::string GetResumeLabel(const CFileItem& item) const;
 
     /*!
      * @brief Resume a previously not completely played recording.
@@ -337,7 +337,7 @@ namespace PVR
      * @param channel The channel to do the check for.
      * @return the result of the check (success, failed, or canceled by user).
      */
-    ParentalCheckResult CheckParentalLock(const std::shared_ptr<CPVRChannel> &channel) const;
+    ParentalCheckResult CheckParentalLock(const std::shared_ptr<CPVRChannel>& channel) const;
 
     /*!
      * @brief Open Numeric dialog to check for parental PIN.
@@ -381,7 +381,7 @@ namespace PVR
      * @param bRadio True to set the selected path for PVR radio, false for Live TV.
      * @param path The new path to set.
      */
-    void SetSelectedItemPath(bool bRadio, const std::string &path);
+    void SetSelectedItemPath(bool bRadio, const std::string& path);
 
     /*!
      * @brief Seek to the start of the next epg event in timeshift buffer, relative to the currently playing event.
@@ -401,13 +401,13 @@ namespace PVR
      * @brief Get the currently active channel number input handler.
      * @return the handler.
      */
-    CPVRChannelNumberInputHandler &GetChannelNumberInputHandler();
+    CPVRChannelNumberInputHandler& GetChannelNumberInputHandler();
 
     /*!
      * @brief Get the channel navigator.
      * @return the navigator.
      */
-    CPVRGUIChannelNavigator &GetChannelNavigator();
+    CPVRGUIChannelNavigator& GetChannelNavigator();
 
     /*!
      * @brief Inform GUI actions that playback of an item just started.
@@ -430,7 +430,7 @@ namespace PVR
      * @param timer containing the timer the settings shall be displayed for.
      * @return true, if the dialog was ended successfully, false otherwise.
      */
-    bool ShowTimerSettings(const std::shared_ptr<CPVRTimerInfoTag> &timer) const;
+    bool ShowTimerSettings(const std::shared_ptr<CPVRTimerInfoTag>& timer) const;
 
     /*!
      * @brief Add a timer or timer rule, either interactive or non-interactive.
@@ -458,7 +458,7 @@ namespace PVR
      * @param bDeleteRule denotes to delete a timer rule. For convenience, one can pass a timer created by a rule.
      * @return true, if the timer or timer rule was deleted successfully, false otherwise.
      */
-    bool DeleteTimer(const std::shared_ptr<CPVRTimerInfoTag> &timer, bool bIsRecording, bool bDeleteRule) const;
+    bool DeleteTimer(const std::shared_ptr<CPVRTimerInfoTag>& timer, bool bIsRecording, bool bDeleteRule) const;
 
     /*!
      * @brief Open a dialog to confirm timer delete.
@@ -469,14 +469,14 @@ namespace PVR
      *                    out, for one shot timer not scheduled by a timer rule: ignored
      * @return true, to proceed with delete, false otherwise.
      */
-    bool ConfirmDeleteTimer(const std::shared_ptr<CPVRTimerInfoTag> &timer, bool &bDeleteRule) const;
+    bool ConfirmDeleteTimer(const std::shared_ptr<CPVRTimerInfoTag>& timer, bool& bDeleteRule) const;
 
     /*!
      * @brief Open a dialog to confirm stop recording.
      * @param timer the recording to stop (actually the timer to delete).
      * @return true, to proceed with delete, false otherwise.
      */
-    bool ConfirmStopRecording(const std::shared_ptr<CPVRTimerInfoTag> &timer) const;
+    bool ConfirmStopRecording(const std::shared_ptr<CPVRTimerInfoTag>& timer) const;
 
     /*!
      * @brief Open a dialog to confirm to delete a recording.
@@ -496,7 +496,7 @@ namespace PVR
      * @param recording containing the recording the settings shall be displayed for.
      * @return true, if the dialog was ended successfully, false otherwise.
      */
-    bool ShowRecordingSettings(const std::shared_ptr<CPVRRecording> &recording) const;
+    bool ShowRecordingSettings(const std::shared_ptr<CPVRRecording>& recording) const;
 
     /*!
      * @brief Check whether resume play is possible for a given item, display "resume from ..."/"play from start" context menu in case.
diff --git a/xbmc/pvr/PVRGUIInfo.cpp b/xbmc/pvr/PVRGUIInfo.cpp
index a4a168b05a26..184de37aace6 100644
--- a/xbmc/pvr/PVRGUIInfo.cpp
+++ b/xbmc/pvr/PVRGUIInfo.cpp
@@ -93,14 +93,14 @@ void CPVRGUIInfo::ResetProperties(void)
   m_bRegistered = false;
 }
 
-void CPVRGUIInfo::ClearQualityInfo(PVR_SIGNAL_STATUS &qualityInfo)
+void CPVRGUIInfo::ClearQualityInfo(PVR_SIGNAL_STATUS& qualityInfo)
 {
   memset(&qualityInfo, 0, sizeof(qualityInfo));
   strncpy(qualityInfo.strAdapterName, g_localizeStrings.Get(13106).c_str(), PVR_ADDON_NAME_STRING_LENGTH - 1);
   strncpy(qualityInfo.strAdapterStatus, g_localizeStrings.Get(13106).c_str(), PVR_ADDON_NAME_STRING_LENGTH - 1);
 }
 
-void CPVRGUIInfo::ClearDescrambleInfo(PVR_DESCRAMBLE_INFO &descrambleInfo)
+void CPVRGUIInfo::ClearDescrambleInfo(PVR_DESCRAMBLE_INFO& descrambleInfo)
 {
   descrambleInfo = {0};
 }
@@ -277,7 +277,7 @@ bool CPVRGUIInfo::InitCurrentItem(CFileItem *item)
   return false;
 }
 
-bool CPVRGUIInfo::GetLabel(std::string& value, const CFileItem *item, int contextWindow, const CGUIInfo &info, std::string *fallback) const
+bool CPVRGUIInfo::GetLabel(std::string& value, const CFileItem *item, int contextWindow, const CGUIInfo& info, std::string *fallback) const
 {
   return GetListItemAndPlayerLabel(item, info, value) ||
          GetPVRLabel(item, info, value) ||
@@ -303,7 +303,7 @@ namespace
 
 } // unnamed namespace
 
-bool CPVRGUIInfo::GetListItemAndPlayerLabel(const CFileItem *item, const CGUIInfo &info, std::string &strValue) const
+bool CPVRGUIInfo::GetListItemAndPlayerLabel(const CFileItem *item, const CGUIInfo& info, std::string& strValue) const
 {
   const std::shared_ptr<CPVRTimerInfoTag> timer = item->GetPVRTimerInfoTag();
   if (timer)
@@ -666,7 +666,7 @@ bool CPVRGUIInfo::GetListItemAndPlayerLabel(const CFileItem *item, const CGUIInf
   return false;
 }
 
-bool CPVRGUIInfo::GetPVRLabel(const CFileItem *item, const CGUIInfo &info, std::string &strValue) const
+bool CPVRGUIInfo::GetPVRLabel(const CFileItem *item, const CGUIInfo& info, std::string& strValue) const
 {
   CSingleLock lock(m_critSection);
 
@@ -876,7 +876,7 @@ bool CPVRGUIInfo::GetPVRLabel(const CFileItem *item, const CGUIInfo &info, std::
   return false;
 }
 
-bool CPVRGUIInfo::GetRadioRDSLabel(const CFileItem *item, const CGUIInfo &info, std::string &strValue) const
+bool CPVRGUIInfo::GetRadioRDSLabel(const CFileItem *item, const CGUIInfo& info, std::string& strValue) const
 {
   if (!item->HasPVRChannelInfoTag())
     return false;
@@ -1019,7 +1019,7 @@ bool CPVRGUIInfo::GetRadioRDSLabel(const CFileItem *item, const CGUIInfo &info,
   return false;
 }
 
-bool CPVRGUIInfo::GetInt(int& value, const CGUIListItem *item, int contextWindow, const CGUIInfo &info) const
+bool CPVRGUIInfo::GetInt(int& value, const CGUIListItem *item, int contextWindow, const CGUIInfo& info) const
 {
   if (!item->IsFileItem())
     return false;
@@ -1029,7 +1029,7 @@ bool CPVRGUIInfo::GetInt(int& value, const CGUIListItem *item, int contextWindow
          GetPVRInt(fitem, info, value);
 }
 
-bool CPVRGUIInfo::GetListItemAndPlayerInt(const CFileItem *item, const CGUIInfo &info, int &iValue) const
+bool CPVRGUIInfo::GetListItemAndPlayerInt(const CFileItem *item, const CGUIInfo& info, int& iValue) const
 {
   switch (info.m_info)
   {
@@ -1045,7 +1045,7 @@ bool CPVRGUIInfo::GetListItemAndPlayerInt(const CFileItem *item, const CGUIInfo
   return false;
 }
 
-bool CPVRGUIInfo::GetPVRInt(const CFileItem *item, const CGUIInfo &info, int& iValue) const
+bool CPVRGUIInfo::GetPVRInt(const CFileItem *item, const CGUIInfo& info, int& iValue) const
 {
   CSingleLock lock(m_critSection);
 
@@ -1100,7 +1100,7 @@ bool CPVRGUIInfo::GetPVRInt(const CFileItem *item, const CGUIInfo &info, int& iV
   return false;
 }
 
-bool CPVRGUIInfo::GetBool(bool& value, const CGUIListItem *item, int contextWindow, const CGUIInfo &info) const
+bool CPVRGUIInfo::GetBool(bool& value, const CGUIListItem *item, int contextWindow, const CGUIInfo& info) const
 {
   if (!item->IsFileItem())
     return false;
@@ -1111,7 +1111,7 @@ bool CPVRGUIInfo::GetBool(bool& value, const CGUIListItem *item, int contextWind
          GetRadioRDSBool(fitem, info, value);
 }
 
-bool CPVRGUIInfo::GetListItemAndPlayerBool(const CFileItem *item, const CGUIInfo &info, bool &bValue) const
+bool CPVRGUIInfo::GetListItemAndPlayerBool(const CFileItem *item, const CGUIInfo& info, bool& bValue) const
 {
   switch (info.m_info)
   {
@@ -1313,7 +1313,7 @@ bool CPVRGUIInfo::GetListItemAndPlayerBool(const CFileItem *item, const CGUIInfo
   return false;
 }
 
-bool CPVRGUIInfo::GetPVRBool(const CFileItem *item, const CGUIInfo &info, bool& bValue) const
+bool CPVRGUIInfo::GetPVRBool(const CFileItem *item, const CGUIInfo& info, bool& bValue) const
 {
   CSingleLock lock(m_critSection);
 
@@ -1383,7 +1383,7 @@ bool CPVRGUIInfo::GetPVRBool(const CFileItem *item, const CGUIInfo &info, bool&
   return false;
 }
 
-bool CPVRGUIInfo::GetRadioRDSBool(const CFileItem *item, const CGUIInfo &info, bool &bValue) const
+bool CPVRGUIInfo::GetRadioRDSBool(const CFileItem *item, const CGUIInfo& info, bool& bValue) const
 {
   if (!item->HasPVRChannelInfoTag())
     return false;
@@ -1418,7 +1418,7 @@ bool CPVRGUIInfo::GetRadioRDSBool(const CFileItem *item, const CGUIInfo &info, b
   return false;
 }
 
-void CPVRGUIInfo::CharInfoBackendNumber(std::string &strValue) const
+void CPVRGUIInfo::CharInfoBackendNumber(std::string& strValue) const
 {
   size_t numBackends = m_backendProperties.size();
 
@@ -1428,32 +1428,32 @@ void CPVRGUIInfo::CharInfoBackendNumber(std::string &strValue) const
     strValue = g_localizeStrings.Get(14023);
 }
 
-void CPVRGUIInfo::CharInfoTotalDiskSpace(std::string &strValue) const
+void CPVRGUIInfo::CharInfoTotalDiskSpace(std::string& strValue) const
 {
   strValue = StringUtils::SizeToString(m_iBackendDiskTotal).c_str();
 }
 
-void CPVRGUIInfo::CharInfoSignal(std::string &strValue) const
+void CPVRGUIInfo::CharInfoSignal(std::string& strValue) const
 {
   strValue = StringUtils::Format("%d %%", m_qualityInfo.iSignal / 655);
 }
 
-void CPVRGUIInfo::CharInfoSNR(std::string &strValue) const
+void CPVRGUIInfo::CharInfoSNR(std::string& strValue) const
 {
   strValue = StringUtils::Format("%d %%", m_qualityInfo.iSNR / 655);
 }
 
-void CPVRGUIInfo::CharInfoBER(std::string &strValue) const
+void CPVRGUIInfo::CharInfoBER(std::string& strValue) const
 {
   strValue = StringUtils::Format("%08lX", m_qualityInfo.iBER);
 }
 
-void CPVRGUIInfo::CharInfoUNC(std::string &strValue) const
+void CPVRGUIInfo::CharInfoUNC(std::string& strValue) const
 {
   strValue = StringUtils::Format("%08lX", m_qualityInfo.iUNC);
 }
 
-void CPVRGUIInfo::CharInfoFrontendName(std::string &strValue) const
+void CPVRGUIInfo::CharInfoFrontendName(std::string& strValue) const
 {
   if (!strlen(m_qualityInfo.strAdapterName))
     strValue = g_localizeStrings.Get(13205);
@@ -1461,7 +1461,7 @@ void CPVRGUIInfo::CharInfoFrontendName(std::string &strValue) const
     strValue = m_qualityInfo.strAdapterName;
 }
 
-void CPVRGUIInfo::CharInfoFrontendStatus(std::string &strValue) const
+void CPVRGUIInfo::CharInfoFrontendStatus(std::string& strValue) const
 {
   if (!strlen(m_qualityInfo.strAdapterStatus))
     strValue = g_localizeStrings.Get(13205);
@@ -1469,25 +1469,25 @@ void CPVRGUIInfo::CharInfoFrontendStatus(std::string &strValue) const
     strValue = m_qualityInfo.strAdapterStatus;
 }
 
-void CPVRGUIInfo::CharInfoBackendName(std::string &strValue) const
+void CPVRGUIInfo::CharInfoBackendName(std::string& strValue) const
 {
   m_updateBackendCacheRequested = true;
   strValue = m_strBackendName;
 }
 
-void CPVRGUIInfo::CharInfoBackendVersion(std::string &strValue) const
+void CPVRGUIInfo::CharInfoBackendVersion(std::string& strValue) const
 {
   m_updateBackendCacheRequested = true;
   strValue = m_strBackendVersion;
 }
 
-void CPVRGUIInfo::CharInfoBackendHost(std::string &strValue) const
+void CPVRGUIInfo::CharInfoBackendHost(std::string& strValue) const
 {
   m_updateBackendCacheRequested = true;
   strValue = m_strBackendHost;
 }
 
-void CPVRGUIInfo::CharInfoBackendDiskspace(std::string &strValue) const
+void CPVRGUIInfo::CharInfoBackendDiskspace(std::string& strValue) const
 {
   m_updateBackendCacheRequested = true;
 
@@ -1504,31 +1504,31 @@ void CPVRGUIInfo::CharInfoBackendDiskspace(std::string &strValue) const
     strValue = g_localizeStrings.Get(13205);
 }
 
-void CPVRGUIInfo::CharInfoBackendChannels(std::string &strValue) const
+void CPVRGUIInfo::CharInfoBackendChannels(std::string& strValue) const
 {
   m_updateBackendCacheRequested = true;
   strValue = m_strBackendChannels;
 }
 
-void CPVRGUIInfo::CharInfoBackendTimers(std::string &strValue) const
+void CPVRGUIInfo::CharInfoBackendTimers(std::string& strValue) const
 {
   m_updateBackendCacheRequested = true;
   strValue = m_strBackendTimers;
 }
 
-void CPVRGUIInfo::CharInfoBackendRecordings(std::string &strValue) const
+void CPVRGUIInfo::CharInfoBackendRecordings(std::string& strValue) const
 {
   m_updateBackendCacheRequested = true;
   strValue = m_strBackendRecordings;
 }
 
-void CPVRGUIInfo::CharInfoBackendDeletedRecordings(std::string &strValue) const
+void CPVRGUIInfo::CharInfoBackendDeletedRecordings(std::string& strValue) const
 {
   m_updateBackendCacheRequested = true;
   strValue = m_strBackendDeletedRecordings;
 }
 
-void CPVRGUIInfo::CharInfoPlayingClientName(std::string &strValue) const
+void CPVRGUIInfo::CharInfoPlayingClientName(std::string& strValue) const
 {
   if (m_strPlayingClientName.empty())
     strValue = g_localizeStrings.Get(13205);
@@ -1536,7 +1536,7 @@ void CPVRGUIInfo::CharInfoPlayingClientName(std::string &strValue) const
     strValue = m_strPlayingClientName;
 }
 
-void CPVRGUIInfo::CharInfoEncryption(std::string &strValue) const
+void CPVRGUIInfo::CharInfoEncryption(std::string& strValue) const
 {
   if (m_descrambleInfo.iCaid != PVR_DESCRAMBLE_INFO_NOT_AVAILABLE)
   {
@@ -1557,7 +1557,7 @@ void CPVRGUIInfo::CharInfoEncryption(std::string &strValue) const
   strValue.clear();
 }
 
-void CPVRGUIInfo::CharInfoService(std::string &strValue) const
+void CPVRGUIInfo::CharInfoService(std::string& strValue) const
 {
   if (!strlen(m_qualityInfo.strServiceName))
     strValue = g_localizeStrings.Get(13205);
@@ -1565,7 +1565,7 @@ void CPVRGUIInfo::CharInfoService(std::string &strValue) const
     strValue = m_qualityInfo.strServiceName;
 }
 
-void CPVRGUIInfo::CharInfoMux(std::string &strValue) const
+void CPVRGUIInfo::CharInfoMux(std::string& strValue) const
 {
   if (!strlen(m_qualityInfo.strMuxName))
     strValue = g_localizeStrings.Get(13205);
@@ -1573,7 +1573,7 @@ void CPVRGUIInfo::CharInfoMux(std::string &strValue) const
     strValue = m_qualityInfo.strMuxName;
 }
 
-void CPVRGUIInfo::CharInfoProvider(std::string &strValue) const
+void CPVRGUIInfo::CharInfoProvider(std::string& strValue) const
 {
   if (!strlen(m_qualityInfo.strProviderName))
     strValue = g_localizeStrings.Get(13205);
@@ -1613,7 +1613,7 @@ void CPVRGUIInfo::UpdateBackendCache(void)
   // Update with values from the current client when we have at least one
   if (!m_backendProperties.empty())
   {
-    const auto &backend = m_backendProperties[m_iCurrentActiveClient];
+    const auto& backend = m_backendProperties[m_iCurrentActiveClient];
 
     m_strBackendName = backend.name;
     m_strBackendVersion = backend.version;
diff --git a/xbmc/pvr/PVRGUIInfo.h b/xbmc/pvr/PVRGUIInfo.h
index 01a41d7cf317..39556b6afbf6 100644
--- a/xbmc/pvr/PVRGUIInfo.h
+++ b/xbmc/pvr/PVRGUIInfo.h
@@ -54,14 +54,14 @@ namespace PVR
 
     // KODI::GUILIB::GUIINFO::IGUIInfoProvider implementation
     bool InitCurrentItem(CFileItem *item) override;
-    bool GetLabel(std::string& value, const CFileItem *item, int contextWindow, const KODI::GUILIB::GUIINFO::CGUIInfo &info, std::string *fallback) const override;
-    bool GetInt(int& value, const CGUIListItem *item, int contextWindow, const KODI::GUILIB::GUIINFO::CGUIInfo &info) const override;
-    bool GetBool(bool& value, const CGUIListItem *item, int contextWindow, const KODI::GUILIB::GUIINFO::CGUIInfo &info) const override;
+    bool GetLabel(std::string& value, const CFileItem *item, int contextWindow, const KODI::GUILIB::GUIINFO::CGUIInfo& info, std::string *fallback) const override;
+    bool GetInt(int& value, const CGUIListItem *item, int contextWindow, const KODI::GUILIB::GUIINFO::CGUIInfo& info) const override;
+    bool GetBool(bool& value, const CGUIListItem *item, int contextWindow, const KODI::GUILIB::GUIINFO::CGUIInfo& info) const override;
 
   private:
     void ResetProperties(void);
-    void ClearQualityInfo(PVR_SIGNAL_STATUS &qualityInfo);
-    void ClearDescrambleInfo(PVR_DESCRAMBLE_INFO &descrambleInfo);
+    void ClearQualityInfo(PVR_SIGNAL_STATUS& qualityInfo);
+    void ClearDescrambleInfo(PVR_DESCRAMBLE_INFO& descrambleInfo);
 
     void Process(void) override;
 
@@ -76,38 +76,38 @@ namespace PVR
 
     void UpdateTimersToggle(void);
 
-    bool GetListItemAndPlayerLabel(const CFileItem *item, const KODI::GUILIB::GUIINFO::CGUIInfo &info, std::string &strValue) const;
-    bool GetPVRLabel(const CFileItem *item, const KODI::GUILIB::GUIINFO::CGUIInfo &info, std::string &strValue) const;
-    bool GetRadioRDSLabel(const CFileItem *item, const KODI::GUILIB::GUIINFO::CGUIInfo &info, std::string &strValue) const;
-
-    bool GetListItemAndPlayerInt(const CFileItem *item, const KODI::GUILIB::GUIINFO::CGUIInfo &info, int &iValue) const;
-    bool GetPVRInt(const CFileItem *item, const KODI::GUILIB::GUIINFO::CGUIInfo &info, int& iValue) const;
-
-    bool GetListItemAndPlayerBool(const CFileItem *item, const KODI::GUILIB::GUIINFO::CGUIInfo &info, bool &bValue) const;
-    bool GetPVRBool(const CFileItem *item, const KODI::GUILIB::GUIINFO::CGUIInfo &info, bool& bValue) const;
-    bool GetRadioRDSBool(const CFileItem *item, const KODI::GUILIB::GUIINFO::CGUIInfo &info, bool &bValue) const;
-
-    void CharInfoBackendNumber(std::string &strValue) const;
-    void CharInfoTotalDiskSpace(std::string &strValue) const;
-    void CharInfoSignal(std::string &strValue) const;
-    void CharInfoSNR(std::string &strValue) const;
-    void CharInfoBER(std::string &strValue) const;
-    void CharInfoUNC(std::string &strValue) const;
-    void CharInfoFrontendName(std::string &strValue) const;
-    void CharInfoFrontendStatus(std::string &strValue) const;
-    void CharInfoBackendName(std::string &strValue) const;
-    void CharInfoBackendVersion(std::string &strValue) const;
-    void CharInfoBackendHost(std::string &strValue) const;
-    void CharInfoBackendDiskspace(std::string &strValue) const;
-    void CharInfoBackendChannels(std::string &strValue) const;
-    void CharInfoBackendTimers(std::string &strValue) const;
-    void CharInfoBackendRecordings(std::string &strValue) const;
-    void CharInfoBackendDeletedRecordings(std::string &strValue) const;
-    void CharInfoPlayingClientName(std::string &strValue) const;
-    void CharInfoEncryption(std::string &strValue) const;
-    void CharInfoService(std::string &strValue) const;
-    void CharInfoMux(std::string &strValue) const;
-    void CharInfoProvider(std::string &strValue) const;
+    bool GetListItemAndPlayerLabel(const CFileItem *item, const KODI::GUILIB::GUIINFO::CGUIInfo& info, std::string& strValue) const;
+    bool GetPVRLabel(const CFileItem *item, const KODI::GUILIB::GUIINFO::CGUIInfo& info, std::string& strValue) const;
+    bool GetRadioRDSLabel(const CFileItem *item, const KODI::GUILIB::GUIINFO::CGUIInfo& info, std::string& strValue) const;
+
+    bool GetListItemAndPlayerInt(const CFileItem *item, const KODI::GUILIB::GUIINFO::CGUIInfo& info, int& iValue) const;
+    bool GetPVRInt(const CFileItem *item, const KODI::GUILIB::GUIINFO::CGUIInfo& info, int& iValue) const;
+
+    bool GetListItemAndPlayerBool(const CFileItem *item, const KODI::GUILIB::GUIINFO::CGUIInfo& info, bool& bValue) const;
+    bool GetPVRBool(const CFileItem *item, const KODI::GUILIB::GUIINFO::CGUIInfo& info, bool& bValue) const;
+    bool GetRadioRDSBool(const CFileItem *item, const KODI::GUILIB::GUIINFO::CGUIInfo& info, bool& bValue) const;
+
+    void CharInfoBackendNumber(std::string& strValue) const;
+    void CharInfoTotalDiskSpace(std::string& strValue) const;
+    void CharInfoSignal(std::string& strValue) const;
+    void CharInfoSNR(std::string& strValue) const;
+    void CharInfoBER(std::string& strValue) const;
+    void CharInfoUNC(std::string& strValue) const;
+    void CharInfoFrontendName(std::string& strValue) const;
+    void CharInfoFrontendStatus(std::string& strValue) const;
+    void CharInfoBackendName(std::string& strValue) const;
+    void CharInfoBackendVersion(std::string& strValue) const;
+    void CharInfoBackendHost(std::string& strValue) const;
+    void CharInfoBackendDiskspace(std::string& strValue) const;
+    void CharInfoBackendChannels(std::string& strValue) const;
+    void CharInfoBackendTimers(std::string& strValue) const;
+    void CharInfoBackendRecordings(std::string& strValue) const;
+    void CharInfoBackendDeletedRecordings(std::string& strValue) const;
+    void CharInfoPlayingClientName(std::string& strValue) const;
+    void CharInfoEncryption(std::string& strValue) const;
+    void CharInfoService(std::string& strValue) const;
+    void CharInfoMux(std::string& strValue) const;
+    void CharInfoProvider(std::string& strValue) const;
 
     /** @name PVRGUIInfo data */
     //@{
diff --git a/xbmc/pvr/PVRGUIProgressHandler.cpp b/xbmc/pvr/PVRGUIProgressHandler.cpp
index a68edba563cc..a4316a40d2ee 100644
--- a/xbmc/pvr/PVRGUIProgressHandler.cpp
+++ b/xbmc/pvr/PVRGUIProgressHandler.cpp
@@ -29,7 +29,7 @@ namespace PVR
     Create(true /* bAutoDelete */);
   }
 
-  void CPVRGUIProgressHandler::UpdateProgress(const std::string &strText, float fProgress)
+  void CPVRGUIProgressHandler::UpdateProgress(const std::string& strText, float fProgress)
   {
     CSingleLock lock(m_critSection);
     m_bChanged = true;
@@ -37,7 +37,7 @@ namespace PVR
     m_fProgress = fProgress;
   }
 
-  void CPVRGUIProgressHandler::UpdateProgress(const std::string &strText, int iCurrent, int iMax)
+  void CPVRGUIProgressHandler::UpdateProgress(const std::string& strText, int iCurrent, int iMax)
   {
     float fPercentage = (iCurrent * 100.0f) / iMax;
     if (!std::isnan(fPercentage))
diff --git a/xbmc/pvr/PVRGUIProgressHandler.h b/xbmc/pvr/PVRGUIProgressHandler.h
index ef19f3c698fb..8c7d297664dc 100644
--- a/xbmc/pvr/PVRGUIProgressHandler.h
+++ b/xbmc/pvr/PVRGUIProgressHandler.h
@@ -31,7 +31,7 @@ namespace PVR
      * @param strText The new progress text.
      * @param fProgress The new progress value, in a range from 0.0 to 100.0.
      */
-    void UpdateProgress(const std::string &strText, float fProgress);
+    void UpdateProgress(const std::string& strText, float fProgress);
 
     /*!
      * @brief Update the progress dialogs's content.
@@ -39,7 +39,7 @@ namespace PVR
      * @param iCurrent The new current progress value, must be less or equal iMax.
      * @param iMax The new maximum progress value, must be greater or equal iCurrent.
      */
-    void UpdateProgress(const std::string &strText, int iCurrent, int iMax);
+    void UpdateProgress(const std::string& strText, int iCurrent, int iMax);
 
     /*!
      * @brief Destroy the progress dialog. This happens asynchrounous, instance must not be touched anymore after calling this method.
diff --git a/xbmc/pvr/PVRJobs.cpp b/xbmc/pvr/PVRJobs.cpp
index b6f49efcadac..55315c73acc4 100644
--- a/xbmc/pvr/PVRJobs.cpp
+++ b/xbmc/pvr/PVRJobs.cpp
@@ -69,19 +69,19 @@ bool CPVRPlayChannelOnStartupJob::DoWork()
   return CServiceBroker::GetPVRManager().GUIActions()->PlayChannelOnStartup();
 }
 
-CPVREventlogJob::CPVREventlogJob(bool bNotifyUser, bool bError, const std::string &label, const std::string &msg, const std::string &icon)
+CPVREventlogJob::CPVREventlogJob(bool bNotifyUser, bool bError, const std::string& label, const std::string& msg, const std::string& icon)
 {
   AddEvent(bNotifyUser, bError, label, msg, icon);
 }
 
-void CPVREventlogJob::AddEvent(bool bNotifyUser, bool bError, const std::string &label, const std::string &msg, const std::string &icon)
+void CPVREventlogJob::AddEvent(bool bNotifyUser, bool bError, const std::string& label, const std::string& msg, const std::string& icon)
 {
   m_events.emplace_back(Event(bNotifyUser, bError, label, msg, icon));
 }
 
 bool CPVREventlogJob::DoWork()
 {
-  for (const auto &event : m_events)
+  for (const auto& event : m_events)
   {
     if (event.m_bNotifyUser)
       CGUIDialogKaiToast::QueueNotification(
diff --git a/xbmc/pvr/PVRJobs.h b/xbmc/pvr/PVRJobs.h
index d0f5948b4217..518611afc2fd 100644
--- a/xbmc/pvr/PVRJobs.h
+++ b/xbmc/pvr/PVRJobs.h
@@ -61,11 +61,11 @@ namespace PVR
   {
   public:
     CPVREventlogJob() = default;
-    CPVREventlogJob(bool bNotifyUser, bool bError, const std::string &label, const std::string &msg, const std::string &icon);
+    CPVREventlogJob(bool bNotifyUser, bool bError, const std::string& label, const std::string& msg, const std::string& icon);
     ~CPVREventlogJob() override = default;
     const char *GetType() const override { return "pvr-eventlog-job"; }
 
-    void AddEvent(bool bNotifyUser, bool bError, const std::string &label, const std::string &msg, const std::string &icon);
+    void AddEvent(bool bNotifyUser, bool bError, const std::string& label, const std::string& msg, const std::string& icon);
 
     bool DoWork() override;
   private:
@@ -77,7 +77,7 @@ namespace PVR
       std::string m_msg;
       std::string m_icon;
 
-      Event(bool bNotifyUser, bool bError, const std::string &label, const std::string &msg, const std::string &icon)
+      Event(bool bNotifyUser, bool bError, const std::string& label, const std::string& msg, const std::string& icon)
       : m_bNotifyUser(bNotifyUser), m_bError(bError), m_label(label), m_msg(msg), m_icon(icon) {}
     };
 
diff --git a/xbmc/pvr/PVRManager.cpp b/xbmc/pvr/PVRManager.cpp
index 23a581fe9184..cbb04f779f32 100644
--- a/xbmc/pvr/PVRManager.cpp
+++ b/xbmc/pvr/PVRManager.cpp
@@ -153,7 +153,7 @@ CPVRManager::~CPVRManager(void)
   CLog::LogFC(LOGDEBUG, LOGPVR, "PVR Manager instance destroyed");
 }
 
-void CPVRManager::Announce(ANNOUNCEMENT::AnnouncementFlag flag, const char *sender, const char *message, const CVariant &data)
+void CPVRManager::Announce(ANNOUNCEMENT::AnnouncementFlag flag, const char *sender, const char *message, const CVariant& data)
 {
   if (!IsStarted())
     return;
@@ -200,7 +200,7 @@ std::shared_ptr<CPVRClients> CPVRManager::Clients(void) const
   return m_addons;
 }
 
-std::shared_ptr<CPVRClient> CPVRManager::GetClient(const CFileItem &item) const
+std::shared_ptr<CPVRClient> CPVRManager::GetClient(const CFileItem& item) const
 {
   int iClientID = PVR_INVALID_CLIENT_ID;
 
@@ -598,7 +598,7 @@ bool CPVRManager::IsPlaying(void) const
   return IsStarted() && (m_playingChannel || m_playingRecording || m_playingEpgTag);
 }
 
-bool CPVRManager::IsPlayingChannel(const std::shared_ptr<CPVRChannel> &channel) const
+bool CPVRManager::IsPlayingChannel(const std::shared_ptr<CPVRChannel>& channel) const
 {
   bool bReturn(false);
 
@@ -617,7 +617,7 @@ bool CPVRManager::IsPlayingEncryptedChannel(void) const
   return IsStarted() && m_playingChannel && m_playingChannel->IsEncrypted();
 }
 
-bool CPVRManager::IsPlayingRecording(const std::shared_ptr<CPVRRecording> &recording) const
+bool CPVRManager::IsPlayingRecording(const std::shared_ptr<CPVRRecording>& recording) const
 {
   bool bReturn(false);
 
@@ -631,7 +631,7 @@ bool CPVRManager::IsPlayingRecording(const std::shared_ptr<CPVRRecording> &recor
   return bReturn;
 }
 
-bool CPVRManager::IsPlayingEpgTag(const std::shared_ptr<CPVREpgInfoTag> &epgTag) const
+bool CPVRManager::IsPlayingEpgTag(const std::shared_ptr<CPVREpgInfoTag>& epgTag) const
 {
   bool bReturn(false);
 
@@ -738,13 +738,13 @@ bool CPVRManager::IsCurrentlyParentalLocked(const std::shared_ptr<CPVRChannel>&
   return bReturn;
 }
 
-void CPVRManager::SetPlayingGroup(const std::shared_ptr<CPVRChannelGroup> &group)
+void CPVRManager::SetPlayingGroup(const std::shared_ptr<CPVRChannelGroup>& group)
 {
   if (m_channelGroups && group)
     m_channelGroups->Get(group->IsRadio())->SetSelectedGroup(group);
 }
 
-void CPVRManager::SetPlayingGroup(const std::shared_ptr<CPVRChannel> &channel)
+void CPVRManager::SetPlayingGroup(const std::shared_ptr<CPVRChannel>& channel)
 {
   std::shared_ptr<CPVRChannelGroup> group = m_channelGroups->GetSelectedGroup(channel->IsRadio());
   if (!group || !group->IsGroupMember(channel))
@@ -1003,7 +1003,7 @@ bool CPVRManager::CreateChannelEpgs(void)
   return m_bEpgsCreated;
 }
 
-void CPVRManager::UpdateLastWatched(const std::shared_ptr<CPVRChannel> &channel, const CDateTime& time)
+void CPVRManager::UpdateLastWatched(const std::shared_ptr<CPVRChannel>& channel, const CDateTime& time)
 {
   time_t iTime;
   time.GetAsTime(iTime);
diff --git a/xbmc/pvr/PVRManager.h b/xbmc/pvr/PVRManager.h
index 6390209f0903..e3858d1c01de 100644
--- a/xbmc/pvr/PVRManager.h
+++ b/xbmc/pvr/PVRManager.h
@@ -112,7 +112,7 @@ namespace PVR
      */
     ~CPVRManager(void) override;
 
-    void Announce(ANNOUNCEMENT::AnnouncementFlag flag, const char *sender, const char *message, const CVariant &data) override;
+    void Announce(ANNOUNCEMENT::AnnouncementFlag flag, const char *sender, const char *message, const CVariant& data) override;
 
     /*!
      * @brief Get the channel groups container.
@@ -143,7 +143,7 @@ namespace PVR
      * @param item The item containing a PVR recording, a PVR channel, a PVR timer or a PVR EPG event.
      * @return the requested client on success, nullptr otherwise.
      */
-    std::shared_ptr<CPVRClient> GetClient(const CFileItem &item) const;
+    std::shared_ptr<CPVRClient> GetClient(const CFileItem& item) const;
 
     /*!
      * @brief Get the instance of a client that matches the given id.
@@ -216,21 +216,21 @@ namespace PVR
      * @param channel The channel to check.
      * @return True if it's playing, false otherwise.
      */
-    bool IsPlayingChannel(const std::shared_ptr<CPVRChannel> &channel) const;
+    bool IsPlayingChannel(const std::shared_ptr<CPVRChannel>& channel) const;
 
     /*!
      * @brief Check if the given recording is playing.
      * @param recording The recording to check.
      * @return True if it's playing, false otherwise.
      */
-    bool IsPlayingRecording(const std::shared_ptr<CPVRRecording> &recording) const;
+    bool IsPlayingRecording(const std::shared_ptr<CPVRRecording>& recording) const;
 
     /*!
      * @brief Check if the given epg tag is playing.
      * @param epgTag The tag to check.
      * @return True if it's playing, false otherwise.
      */
-    bool IsPlayingEpgTag(const std::shared_ptr<CPVREpgInfoTag> &epgTag) const;
+    bool IsPlayingEpgTag(const std::shared_ptr<CPVREpgInfoTag>& epgTag) const;
 
     /*!
      * @return True while the PVRManager is initialising.
@@ -357,7 +357,7 @@ namespace PVR
      * @brief Set the current playing group, used to load the right channel.
      * @param group The new group.
      */
-    void SetPlayingGroup(const std::shared_ptr<CPVRChannelGroup> &group);
+    void SetPlayingGroup(const std::shared_ptr<CPVRChannelGroup>& group);
 
     /*!
      * @brief Get the current playing group, used to load the right channel.
@@ -490,13 +490,13 @@ namespace PVR
      * @param channel The channel which is updated
      * @param time The last watched time to set
      */
-    void UpdateLastWatched(const std::shared_ptr<CPVRChannel> &channel, const CDateTime& time);
+    void UpdateLastWatched(const std::shared_ptr<CPVRChannel>& channel, const CDateTime& time);
 
     /*!
      * @brief Set the playing group to the first group the channel is in if the given channel is not part of the current playing group
      * @param channel The channel
      */
-    void SetPlayingGroup(const std::shared_ptr<CPVRChannel> &channel);
+    void SetPlayingGroup(const std::shared_ptr<CPVRChannel>& channel);
 
     /*!
      * @brief Executes "pvrpowermanagement.setwakeupcmd"
diff --git a/xbmc/pvr/PVRSettings.cpp b/xbmc/pvr/PVRSettings.cpp
index 02cce59977f0..4372bacdffa2 100644
--- a/xbmc/pvr/PVRSettings.cpp
+++ b/xbmc/pvr/PVRSettings.cpp
@@ -28,7 +28,7 @@ using namespace PVR;
 
 unsigned int CPVRSettings::m_iInstances = 0;
 
-CPVRSettings::CPVRSettings(const std::set<std::string> &settingNames)
+CPVRSettings::CPVRSettings(const std::set<std::string>& settingNames)
 {
   Init(settingNames);
 
@@ -62,7 +62,7 @@ CPVRSettings::~CPVRSettings()
   settings->GetSettingsManager()->UnregisterSettingsHandler(this);
 }
 
-void CPVRSettings::Init(const std::set<std::string> &settingNames)
+void CPVRSettings::Init(const std::set<std::string>& settingNames)
 {
   for (auto settingName : settingNames)
   {
@@ -102,7 +102,7 @@ void CPVRSettings::OnSettingChanged(std::shared_ptr<const CSetting> setting)
   m_settings[setting->GetId()] = setting->Clone(setting->GetId());
 }
 
-bool CPVRSettings::GetBoolValue(const std::string &settingName) const
+bool CPVRSettings::GetBoolValue(const std::string& settingName) const
 {
   CSingleLock lock(m_critSection);
   auto settingIt = m_settings.find(settingName);
@@ -117,7 +117,7 @@ bool CPVRSettings::GetBoolValue(const std::string &settingName) const
   return false;
 }
 
-int CPVRSettings::GetIntValue(const std::string &settingName) const
+int CPVRSettings::GetIntValue(const std::string& settingName) const
 {
   CSingleLock lock(m_critSection);
   auto settingIt = m_settings.find(settingName);
@@ -132,7 +132,7 @@ int CPVRSettings::GetIntValue(const std::string &settingName) const
   return -1;
 }
 
-std::string CPVRSettings::GetStringValue(const std::string &settingName) const
+std::string CPVRSettings::GetStringValue(const std::string& settingName) const
 {
   CSingleLock lock(m_critSection);
   auto settingIt = m_settings.find(settingName);
@@ -148,7 +148,7 @@ std::string CPVRSettings::GetStringValue(const std::string &settingName) const
 }
 
 void CPVRSettings::MarginTimeFiller(
-  SettingConstPtr  /*setting*/, std::vector<IntegerSettingOption> &list, int &current, void * /*data*/)
+  SettingConstPtr  /*setting*/, std::vector<IntegerSettingOption>& list, int& current, void * /*data*/)
 {
   list.clear();
 
@@ -163,12 +163,12 @@ void CPVRSettings::MarginTimeFiller(
   }
 }
 
-bool CPVRSettings::IsSettingVisible(const std::string &condition, const std::string &value, std::shared_ptr<const CSetting> setting, void *data)
+bool CPVRSettings::IsSettingVisible(const std::string& condition, const std::string& value, std::shared_ptr<const CSetting> setting, void *data)
 {
   if (setting == nullptr)
     return false;
 
-  const std::string &settingId = setting->GetId();
+  const std::string& settingId = setting->GetId();
 
   if (settingId == CSettings::SETTING_PVRMANAGER_USEBACKENDCHANNELNUMBERS)
   {
@@ -187,7 +187,7 @@ bool CPVRSettings::IsSettingVisible(const std::string &condition, const std::str
   }
 }
 
-bool CPVRSettings::CheckParentalPin(const std::string &condition, const std::string &value, std::shared_ptr<const CSetting> setting, void *data)
+bool CPVRSettings::CheckParentalPin(const std::string& condition, const std::string& value, std::shared_ptr<const CSetting> setting, void *data)
 {
   return CServiceBroker::GetPVRManager().GUIActions()->CheckParentalPIN() == ParentalCheckResult::SUCCESS;
 }
diff --git a/xbmc/pvr/PVRSettings.h b/xbmc/pvr/PVRSettings.h
index 23a0ed895532..279c77e8590b 100644
--- a/xbmc/pvr/PVRSettings.h
+++ b/xbmc/pvr/PVRSettings.h
@@ -27,7 +27,7 @@ namespace PVR
   class CPVRSettings : private ISettingsHandler, private ISettingCallback
   {
   public:
-    explicit CPVRSettings(const std::set<std::string> & settingNames);
+    explicit CPVRSettings(const std::set<std::string>&  settingNames);
     ~CPVRSettings() override;
 
     // ISettingsHandler implementation
@@ -36,25 +36,25 @@ namespace PVR
     // ISettingCallback implementation
     void OnSettingChanged(std::shared_ptr<const CSetting> setting) override;
 
-    bool GetBoolValue(const std::string &settingName) const;
-    int GetIntValue(const std::string &settingName) const;
-    std::string GetStringValue(const std::string &settingName) const;
+    bool GetBoolValue(const std::string& settingName) const;
+    int GetIntValue(const std::string& settingName) const;
+    std::string GetStringValue(const std::string& settingName) const;
 
     // settings value filler for start/end recording margin time for PVR timers.
     static void MarginTimeFiller(
-      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption> &list, int &current, void *data);
+      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption>& list, int& current, void *data);
 
     // Dynamically hide or show settings.
-    static bool IsSettingVisible(const std::string &condition, const std::string &value, std::shared_ptr<const CSetting> setting, void *data);
+    static bool IsSettingVisible(const std::string& condition, const std::string& value, std::shared_ptr<const CSetting> setting, void *data);
 
     // Do parental PIN check.
-    static bool CheckParentalPin(const std::string &condition, const std::string &value, std::shared_ptr<const CSetting> setting, void *data);
+    static bool CheckParentalPin(const std::string& condition, const std::string& value, std::shared_ptr<const CSetting> setting, void *data);
 
   private:
     CPVRSettings(const CPVRSettings&) = delete;
     CPVRSettings& operator=(CPVRSettings const&) = delete;
 
-    void Init(const std::set<std::string> &settingNames);
+    void Init(const std::set<std::string>& settingNames);
 
     mutable CCriticalSection m_critSection;
     std::map<std::string, std::shared_ptr<CSetting>> m_settings;
diff --git a/xbmc/pvr/addons/PVRClients.cpp b/xbmc/pvr/addons/PVRClients.cpp
index c77b85595678..cf8b5c2915c3 100644
--- a/xbmc/pvr/addons/PVRClients.cpp
+++ b/xbmc/pvr/addons/PVRClients.cpp
@@ -29,7 +29,7 @@ using namespace KODI::MESSAGING;
 
 namespace
 {
-  int ClientIdFromAddonId(const std::string &strID)
+  int ClientIdFromAddonId(const std::string& strID)
   {
     std::hash<std::string> hasher;
     int iClientId = static_cast<int>(hasher(strID));
@@ -51,7 +51,7 @@ CPVRClients::~CPVRClients(void)
   CServiceBroker::GetAddonMgr().Events().Unsubscribe(this);
   CServiceBroker::GetAddonMgr().UnregisterAddonMgrCallback(ADDON_PVRDLL);
 
-  for (const auto &client : m_clientMap)
+  for (const auto& client : m_clientMap)
   {
     client.second->Destroy();
   }
@@ -65,7 +65,7 @@ void CPVRClients::Start(void)
 void CPVRClients::Stop()
 {
   CSingleLock lock(m_critSection);
-  for (const auto &client : m_clientMap)
+  for (const auto& client : m_clientMap)
   {
     client.second->Stop();
   }
@@ -74,13 +74,13 @@ void CPVRClients::Stop()
 void CPVRClients::Continue()
 {
   CSingleLock lock(m_critSection);
-  for (const auto &client : m_clientMap)
+  for (const auto& client : m_clientMap)
   {
     client.second->Continue();
   }
 }
 
-void CPVRClients::UpdateAddons(const std::string &changedAddonId /*= ""*/)
+void CPVRClients::UpdateAddons(const std::string& changedAddonId /*= ""*/)
 {
   VECADDONS addons;
   CServiceBroker::GetAddonMgr().GetInstalledAddons(addons, ADDON_PVRDLL);
@@ -90,7 +90,7 @@ void CPVRClients::UpdateAddons(const std::string &changedAddonId /*= ""*/)
 
   bool bFoundChangedAddon = changedAddonId.empty();
   std::vector<std::pair<AddonPtr, bool>> addonsWithStatus;
-  for (const auto &addon : addons)
+  for (const auto& addon : addons)
   {
     bool bEnabled = !CServiceBroker::GetAddonMgr().IsAddonDisabled(addon->ID());
     addonsWithStatus.emplace_back(std::make_pair(addon, bEnabled));
@@ -110,7 +110,7 @@ void CPVRClients::UpdateAddons(const std::string &changedAddonId /*= ""*/)
 
   {
     CSingleLock lock(m_critSection);
-    for (const auto &addonWithStatus : addonsWithStatus)
+    for (const auto& addonWithStatus : addonsWithStatus)
     {
       AddonPtr addon = addonWithStatus.first;
       bool bEnabled = addonWithStatus.second;
@@ -198,7 +198,7 @@ bool CPVRClients::RequestRestart(AddonPtr addon, bool bDataChanged)
   return StopClient(addon, true);
 }
 
-bool CPVRClients::StopClient(const AddonPtr &addon, bool bRestart)
+bool CPVRClients::StopClient(const AddonPtr& addon, bool bRestart)
 {
   // stop playback if needed
   if (CServiceBroker::GetPVRManager().IsPlaying())
@@ -245,10 +245,10 @@ void CPVRClients::OnAddonEvent(const AddonEvent& event)
 // client access
 ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 
-bool CPVRClients::GetClient(const std::string &strId, AddonPtr &addon) const
+bool CPVRClients::GetClient(const std::string& strId, AddonPtr& addon) const
 {
   CSingleLock lock(m_critSection);
-  for (const auto &client : m_clientMap)
+  for (const auto& client : m_clientMap)
   {
     if (client.second->ID() == strId)
     {
@@ -259,14 +259,14 @@ bool CPVRClients::GetClient(const std::string &strId, AddonPtr &addon) const
   return false;
 }
 
-bool CPVRClients::GetClient(int iClientId, std::shared_ptr<CPVRClient> &addon) const
+bool CPVRClients::GetClient(int iClientId, std::shared_ptr<CPVRClient>& addon) const
 {
   bool bReturn = false;
   if (iClientId <= PVR_INVALID_CLIENT_ID)
     return bReturn;
 
   CSingleLock lock(m_critSection);
-  const auto &itr = m_clientMap.find(iClientId);
+  const auto& itr = m_clientMap.find(iClientId);
   if (itr != m_clientMap.end())
   {
     addon = itr->second;
@@ -279,7 +279,7 @@ bool CPVRClients::GetClient(int iClientId, std::shared_ptr<CPVRClient> &addon) c
 int CPVRClients::GetClientId(const std::string& strId) const
 {
   CSingleLock lock(m_critSection);
-  for (const auto &entry : m_clientMap)
+  for (const auto& entry : m_clientMap)
   {
     if (entry.second->ID() == strId)
     {
@@ -295,7 +295,7 @@ int CPVRClients::CreatedClientAmount(void) const
   int iReturn = 0;
 
   CSingleLock lock(m_critSection);
-  for (const auto &client : m_clientMap)
+  for (const auto& client : m_clientMap)
   {
     if (client.second->ReadyToUse())
       ++iReturn;
@@ -307,7 +307,7 @@ int CPVRClients::CreatedClientAmount(void) const
 bool CPVRClients::HasCreatedClients(void) const
 {
   CSingleLock lock(m_critSection);
-  for (const auto &client : m_clientMap)
+  for (const auto& client : m_clientMap)
   {
     if (client.second->ReadyToUse() && !client.second->IgnoreClient())
       return true;
@@ -316,7 +316,7 @@ bool CPVRClients::HasCreatedClients(void) const
   return false;
 }
 
-bool CPVRClients::IsKnownClient(const AddonPtr &client) const
+bool CPVRClients::IsKnownClient(const AddonPtr& client) const
 {
   // valid client IDs start at 1
   return GetClientId(client->ID()) > 0;
@@ -328,10 +328,10 @@ bool CPVRClients::IsCreatedClient(int iClientId) const
   return GetCreatedClient(iClientId, client);
 }
 
-bool CPVRClients::IsCreatedClient(const AddonPtr &addon)
+bool CPVRClients::IsCreatedClient(const AddonPtr& addon)
 {
   CSingleLock lock(m_critSection);
-  for (const auto &client : m_clientMap)
+  for (const auto& client : m_clientMap)
   {
     if (client.second->ID() == addon->ID())
       return client.second->ReadyToUse();
@@ -339,7 +339,7 @@ bool CPVRClients::IsCreatedClient(const AddonPtr &addon)
   return false;
 }
 
-bool CPVRClients::GetCreatedClient(int iClientId, std::shared_ptr<CPVRClient> &addon) const
+bool CPVRClients::GetCreatedClient(int iClientId, std::shared_ptr<CPVRClient>& addon) const
 {
   if (GetClient(iClientId, addon))
     return addon->ReadyToUse();
@@ -347,12 +347,12 @@ bool CPVRClients::GetCreatedClient(int iClientId, std::shared_ptr<CPVRClient> &a
   return false;
 }
 
-int CPVRClients::GetCreatedClients(CPVRClientMap &clients) const
+int CPVRClients::GetCreatedClients(CPVRClientMap& clients) const
 {
   int iReturn = 0;
 
   CSingleLock lock(m_critSection);
-  for (const auto &client : m_clientMap)
+  for (const auto& client : m_clientMap)
   {
     if (client.second->ReadyToUse() && !client.second->IgnoreClient())
     {
@@ -364,15 +364,15 @@ int CPVRClients::GetCreatedClients(CPVRClientMap &clients) const
   return iReturn;
 }
 
-PVR_ERROR CPVRClients::GetCreatedClients(CPVRClientMap &clientsReady, std::vector<int> &clientsNotReady) const
+PVR_ERROR CPVRClients::GetCreatedClients(CPVRClientMap& clientsReady, std::vector<int>& clientsNotReady) const
 {
   clientsNotReady.clear();
 
   VECADDONS addons;
-  CBinaryAddonCache &addonCache = CServiceBroker::GetBinaryAddonCache();
+  CBinaryAddonCache& addonCache = CServiceBroker::GetBinaryAddonCache();
   addonCache.GetAddons(addons, ADDON::ADDON_PVRDLL);
 
-  for (const auto &addon : addons)
+  for (const auto& addon : addons)
   {
     int iClientId = ClientIdFromAddonId(addon->ID());
     std::shared_ptr<CPVRClient> client;
@@ -394,7 +394,7 @@ PVR_ERROR CPVRClients::GetCreatedClients(CPVRClientMap &clientsReady, std::vecto
 int CPVRClients::GetFirstCreatedClientID(void)
 {
   CSingleLock lock(m_critSection);
-  for (const auto &client : m_clientMap)
+  for (const auto& client : m_clientMap)
   {
     if (client.second->ReadyToUse())
       return client.second->GetID();
@@ -413,7 +413,7 @@ int CPVRClients::EnabledClientAmount(void) const
     clientMap = m_clientMap;
   }
 
-  for (const auto &client : clientMap)
+  for (const auto& client : clientMap)
   {
     if (!CServiceBroker::GetAddonMgr().IsAddonDisabled(client.second->ID()))
       ++iReturn;
@@ -430,7 +430,7 @@ std::vector<SBackend> CPVRClients::GetBackendProperties() const
 {
   std::vector<SBackend> backendProperties;
 
-  ForCreatedClients(__FUNCTION__, [&backendProperties](const std::shared_ptr<CPVRClient> &client) {
+  ForCreatedClients(__FUNCTION__, [&backendProperties](const std::shared_ptr<CPVRClient>& client) {
     SBackend properties;
 
     if (client->GetDriveSpace(properties.diskTotal, properties.diskUsed) == PVR_ERROR_NO_ERROR)
@@ -459,16 +459,16 @@ std::vector<SBackend> CPVRClients::GetBackendProperties() const
   return backendProperties;
 }
 
-bool CPVRClients::GetTimers(CPVRTimersContainer *timers, std::vector<int> &failedClients)
+bool CPVRClients::GetTimers(CPVRTimersContainer *timers, std::vector<int>& failedClients)
 {
-  return ForCreatedClients(__FUNCTION__, [timers](const std::shared_ptr<CPVRClient> &client) {
+  return ForCreatedClients(__FUNCTION__, [timers](const std::shared_ptr<CPVRClient>& client) {
     return client->GetTimers(timers);
   }, failedClients) == PVR_ERROR_NO_ERROR;
 }
 
 PVR_ERROR CPVRClients::GetTimerTypes(CPVRTimerTypes& results) const
 {
-  return ForCreatedClients(__FUNCTION__, [&results](const std::shared_ptr<CPVRClient> &client) {
+  return ForCreatedClients(__FUNCTION__, [&results](const std::shared_ptr<CPVRClient>& client) {
     CPVRTimerTypes types;
     PVR_ERROR ret = client->GetTimerTypes(types);
     if (ret == PVR_ERROR_NO_ERROR)
@@ -479,42 +479,42 @@ PVR_ERROR CPVRClients::GetTimerTypes(CPVRTimerTypes& results) const
 
 PVR_ERROR CPVRClients::GetRecordings(CPVRRecordings *recordings, bool deleted)
 {
-  return ForCreatedClients(__FUNCTION__, [recordings, deleted](const std::shared_ptr<CPVRClient> &client) {
+  return ForCreatedClients(__FUNCTION__, [recordings, deleted](const std::shared_ptr<CPVRClient>& client) {
     return client->GetRecordings(recordings, deleted);
   });
 }
 
 PVR_ERROR CPVRClients::DeleteAllRecordingsFromTrash()
 {
-  return ForCreatedClients(__FUNCTION__, [](const std::shared_ptr<CPVRClient> &client) {
+  return ForCreatedClients(__FUNCTION__, [](const std::shared_ptr<CPVRClient>& client) {
     return client->DeleteAllRecordingsFromTrash();
   });
 }
 
 PVR_ERROR CPVRClients::SetEPGTimeFrame(int iDays)
 {
-  return ForCreatedClients(__FUNCTION__, [iDays](const std::shared_ptr<CPVRClient> &client) {
+  return ForCreatedClients(__FUNCTION__, [iDays](const std::shared_ptr<CPVRClient>& client) {
     return client->SetEPGTimeFrame(iDays);
   });
 }
 
-PVR_ERROR CPVRClients::GetChannels(CPVRChannelGroupInternal *group, std::vector<int> &failedClients)
+PVR_ERROR CPVRClients::GetChannels(CPVRChannelGroupInternal *group, std::vector<int>& failedClients)
 {
-  return ForCreatedClients(__FUNCTION__, [group](const std::shared_ptr<CPVRClient> &client) {
+  return ForCreatedClients(__FUNCTION__, [group](const std::shared_ptr<CPVRClient>& client) {
     return client->GetChannels(*group, group->IsRadio());
   }, failedClients);
 }
 
-PVR_ERROR CPVRClients::GetChannelGroups(CPVRChannelGroups *groups, std::vector<int> &failedClients)
+PVR_ERROR CPVRClients::GetChannelGroups(CPVRChannelGroups *groups, std::vector<int>& failedClients)
 {
-  return ForCreatedClients(__FUNCTION__, [groups](const std::shared_ptr<CPVRClient> &client) {
+  return ForCreatedClients(__FUNCTION__, [groups](const std::shared_ptr<CPVRClient>& client) {
     return client->GetChannelGroups(groups);
   }, failedClients);
 }
 
-PVR_ERROR CPVRClients::GetChannelGroupMembers(CPVRChannelGroup *group, std::vector<int> &failedClients)
+PVR_ERROR CPVRClients::GetChannelGroupMembers(CPVRChannelGroup *group, std::vector<int>& failedClients)
 {
-  return ForCreatedClients(__FUNCTION__, [group](const std::shared_ptr<CPVRClient> &client) {
+  return ForCreatedClients(__FUNCTION__, [group](const std::shared_ptr<CPVRClient>& client) {
     return client->GetChannelGroupMembers(group);
   }, failedClients);
 }
@@ -522,7 +522,7 @@ PVR_ERROR CPVRClients::GetChannelGroupMembers(CPVRChannelGroup *group, std::vect
 std::vector<std::shared_ptr<CPVRClient>> CPVRClients::GetClientsSupportingChannelScan(void) const
 {
   std::vector<std::shared_ptr<CPVRClient>> possibleScanClients;
-  ForCreatedClients(__FUNCTION__, [&possibleScanClients](const std::shared_ptr<CPVRClient> &client) {
+  ForCreatedClients(__FUNCTION__, [&possibleScanClients](const std::shared_ptr<CPVRClient>& client) {
     if (client->GetClientCapabilities().SupportsChannelScan())
       possibleScanClients.emplace_back(client);
     return PVR_ERROR_NO_ERROR;
@@ -533,7 +533,7 @@ std::vector<std::shared_ptr<CPVRClient>> CPVRClients::GetClientsSupportingChanne
 std::vector<std::shared_ptr<CPVRClient>> CPVRClients::GetClientsSupportingChannelSettings(bool bRadio) const
 {
   std::vector<std::shared_ptr<CPVRClient>> possibleSettingsClients;
-  ForCreatedClients(__FUNCTION__, [bRadio, &possibleSettingsClients](const std::shared_ptr<CPVRClient> &client) {
+  ForCreatedClients(__FUNCTION__, [bRadio, &possibleSettingsClients](const std::shared_ptr<CPVRClient>& client) {
     const CPVRClientCapabilities& caps = client->GetClientCapabilities();
     if (caps.SupportsChannelSettings() &&
         ((bRadio && caps.SupportsRadio()) || (!bRadio && caps.SupportsTV())))
@@ -545,7 +545,7 @@ std::vector<std::shared_ptr<CPVRClient>> CPVRClients::GetClientsSupportingChanne
 
 void CPVRClients::OnSystemSleep()
 {
-  ForCreatedClients(__FUNCTION__, [](const std::shared_ptr<CPVRClient> &client) {
+  ForCreatedClients(__FUNCTION__, [](const std::shared_ptr<CPVRClient>& client) {
     client->OnSystemSleep();
     return PVR_ERROR_NO_ERROR;
   });
@@ -553,7 +553,7 @@ void CPVRClients::OnSystemSleep()
 
 void CPVRClients::OnSystemWake()
 {
-  ForCreatedClients(__FUNCTION__, [](const std::shared_ptr<CPVRClient> &client) {
+  ForCreatedClients(__FUNCTION__, [](const std::shared_ptr<CPVRClient>& client) {
     client->OnSystemWake();
     return PVR_ERROR_NO_ERROR;
   });
@@ -561,7 +561,7 @@ void CPVRClients::OnSystemWake()
 
 void CPVRClients::OnPowerSavingActivated()
 {
-  ForCreatedClients(__FUNCTION__, [](const std::shared_ptr<CPVRClient> &client) {
+  ForCreatedClients(__FUNCTION__, [](const std::shared_ptr<CPVRClient>& client) {
     client->OnPowerSavingActivated();
     return PVR_ERROR_NO_ERROR;
   });
@@ -569,14 +569,14 @@ void CPVRClients::OnPowerSavingActivated()
 
 void CPVRClients::OnPowerSavingDeactivated()
 {
-  ForCreatedClients(__FUNCTION__, [](const std::shared_ptr<CPVRClient> &client) {
+  ForCreatedClients(__FUNCTION__, [](const std::shared_ptr<CPVRClient>& client) {
     client->OnPowerSavingDeactivated();
     return PVR_ERROR_NO_ERROR;
   });
 }
 
 void CPVRClients::ConnectionStateChange(
-  CPVRClient *client, std::string &strConnectionString, PVR_CONNECTION_STATE newState, std::string &strMessage)
+  CPVRClient *client, std::string& strConnectionString, PVR_CONNECTION_STATE newState, std::string& strMessage)
 {
   if (!client)
     return;
@@ -652,14 +652,14 @@ PVR_ERROR CPVRClients::ForCreatedClients(const char* strFunctionName, PVRClientF
   return ForCreatedClients(strFunctionName, function, failedClients);
 }
 
-PVR_ERROR CPVRClients::ForCreatedClients(const char* strFunctionName, PVRClientFunction function, std::vector<int> &failedClients) const
+PVR_ERROR CPVRClients::ForCreatedClients(const char* strFunctionName, PVRClientFunction function, std::vector<int>& failedClients) const
 {
   PVR_ERROR lastError = PVR_ERROR_NO_ERROR;
 
   CPVRClientMap clients;
   GetCreatedClients(clients, failedClients);
 
-  for (const auto &clientEntry : clients)
+  for (const auto& clientEntry : clients)
   {
     PVR_ERROR currentError = function(clientEntry.second);
 
diff --git a/xbmc/pvr/addons/PVRClients.h b/xbmc/pvr/addons/PVRClients.h
index 7b8b39b90496..b1e4fc7e1050 100644
--- a/xbmc/pvr/addons/PVRClients.h
+++ b/xbmc/pvr/addons/PVRClients.h
@@ -76,7 +76,7 @@ namespace PVR
      * @brief Update add-ons from the AddonManager
      * @param changedAddonId The id of the changed addon, empty string denotes 'any addon'.
      */
-    void UpdateAddons(const std::string &changedAddonId = "");
+    void UpdateAddons(const std::string& changedAddonId = "");
 
     /*!
      * @brief Restart a single client add-on.
@@ -92,7 +92,7 @@ namespace PVR
      * @param bRestart If true, restart the client.
      * @return True if the client was found, false otherwise.
      */
-    bool StopClient(const ADDON::AddonPtr &addon, bool bRestart);
+    bool StopClient(const ADDON::AddonPtr& addon, bool bRestart);
 
     /*!
      * @brief Handle addon events (enable, disable, ...).
@@ -106,7 +106,7 @@ namespace PVR
      * @param addon On success, filled with the client matching the given ID, null otherwise.
      * @return True if the client was found, false otherwise.
      */
-    bool GetClient(const std::string &strId, ADDON::AddonPtr &addon) const;
+    bool GetClient(const std::string& strId, ADDON::AddonPtr& addon) const;
 
     /*!
      * @brief Get a client's numeric ID given its string ID.
@@ -140,14 +140,14 @@ namespace PVR
      * @param addon Will be filled with requested client on success, null otherwise.
      * @return True on success, false otherwise.
      */
-    bool GetCreatedClient(int iClientId, std::shared_ptr<CPVRClient> &addon) const;
+    bool GetCreatedClient(int iClientId, std::shared_ptr<CPVRClient>& addon) const;
 
     /*!
      * @brief Get all created clients.
      * @param clients All created clients will be added to this map.
      * @return The amount of clients added to the map.
      */
-    int GetCreatedClients(CPVRClientMap &clients) const;
+    int GetCreatedClients(CPVRClientMap& clients) const;
 
     /*!
      * @brief Get the ID of the first created client.
@@ -183,7 +183,7 @@ namespace PVR
      * @param failedClients in case of errors will contain the ids of the clients for which the timers could not be obtained.
      * @return true on success for all clients, false in case of error for at least one client.
      */
-    bool GetTimers(CPVRTimersContainer *timers, std::vector<int> &failedClients);
+    bool GetTimers(CPVRTimersContainer *timers, std::vector<int>& failedClients);
 
     /*!
      * @brief Get all supported timer types.
@@ -236,7 +236,7 @@ namespace PVR
      * @param failedClients in case of errors will contain the ids of the clients for which the channels could not be obtained.
      * @return PVR_ERROR_NO_ERROR if the channels were fetched successfully, last error otherwise.
      */
-    PVR_ERROR GetChannels(CPVRChannelGroupInternal *group, std::vector<int> &failedClients);
+    PVR_ERROR GetChannels(CPVRChannelGroupInternal *group, std::vector<int>& failedClients);
 
     /*!
      * @brief Get all channel groups from backends.
@@ -244,7 +244,7 @@ namespace PVR
      * @param failedClients in case of errors will contain the ids of the clients for which the channel groups could not be obtained.
      * @return PVR_ERROR_NO_ERROR if the channel groups were fetched successfully, last error otherwise.
      */
-    PVR_ERROR GetChannelGroups(CPVRChannelGroups *groups, std::vector<int> &failedClients);
+    PVR_ERROR GetChannelGroups(CPVRChannelGroups *groups, std::vector<int>& failedClients);
 
     /*!
      * @brief Get all group members of a channel group.
@@ -252,7 +252,7 @@ namespace PVR
      * @param failedClients in case of errors will contain the ids of the clients for which the channel group members could not be obtained.
      * @return PVR_ERROR_NO_ERROR if the channel group members were fetched successfully, last error otherwise.
      */
-    PVR_ERROR GetChannelGroupMembers(CPVRChannelGroup *group, std::vector<int> &failedClients);
+    PVR_ERROR GetChannelGroupMembers(CPVRChannelGroup *group, std::vector<int>& failedClients);
 
     /*!
      * @brief Get a list of clients providing a channel scan dialog.
@@ -300,7 +300,7 @@ namespace PVR
      * @param newState The new connection state.
      * @param strMessage A human readable message providing additional information.
      */
-    void ConnectionStateChange(CPVRClient *client, std::string &strConnectionString, PVR_CONNECTION_STATE newState, std::string &strMessage);
+    void ConnectionStateChange(CPVRClient *client, std::string& strConnectionString, PVR_CONNECTION_STATE newState, std::string& strMessage);
 
   private:
     /*!
@@ -309,21 +309,21 @@ namespace PVR
      * @param addon The client.
      * @return True if the client was found, false otherwise.
      */
-    bool GetClient(int iClientId, std::shared_ptr<CPVRClient> &addon) const;
+    bool GetClient(int iClientId, std::shared_ptr<CPVRClient>& addon) const;
 
     /*!
      * @brief Check whether a client is known.
      * @param client The client to check.
      * @return True if this client is known, false otherwise.
      */
-    bool IsKnownClient(const ADDON::AddonPtr &client) const;
+    bool IsKnownClient(const ADDON::AddonPtr& client) const;
 
     /*!
      * @brief Check whether an given addon instance is a created pvr client.
      * @param addon The addon.
      * @return True if the the addon represents a created client, false otherwise.
      */
-    bool IsCreatedClient(const ADDON::AddonPtr &addon);
+    bool IsCreatedClient(const ADDON::AddonPtr& addon);
 
     /*!
      * @brief Get all created clients and clients not (yet) ready to use.
@@ -331,7 +331,7 @@ namespace PVR
      * @param clientsNotReady Store the the ids of the not (yet) ready clients in this list.
      * @return PVR_ERROR_NO_ERROR in case all clients are ready, PVR_ERROR_SERVER_ERROR otherwise.
      */
-    PVR_ERROR GetCreatedClients(CPVRClientMap &clientsReady, std::vector<int> &clientsNotReady) const;
+    PVR_ERROR GetCreatedClients(CPVRClientMap& clientsReady, std::vector<int>& clientsNotReady) const;
 
     typedef std::function<PVR_ERROR(const std::shared_ptr<CPVRClient>&)> PVRClientFunction;
 
@@ -350,7 +350,7 @@ namespace PVR
      * @param failedClients Contains a list of the ids of clients for that the call failed, if any.
      * @return PVR_ERROR_NO_ERROR on success, any other PVR_ERROR_* value otherwise.
      */
-    PVR_ERROR ForCreatedClients(const char* strFunctionName, PVRClientFunction function, std::vector<int> &failedClients) const;
+    PVR_ERROR ForCreatedClients(const char* strFunctionName, PVRClientFunction function, std::vector<int>& failedClients) const;
 
     mutable CCriticalSection m_critSection;
     CPVRClientMap m_clientMap;
diff --git a/xbmc/pvr/channels/PVRChannel.cpp b/xbmc/pvr/channels/PVRChannel.cpp
index c3083cbde528..abc694ed42e8 100644
--- a/xbmc/pvr/channels/PVRChannel.cpp
+++ b/xbmc/pvr/channels/PVRChannel.cpp
@@ -29,14 +29,14 @@
 
 using namespace PVR;
 
-bool CPVRChannel::operator==(const CPVRChannel &right) const
+bool CPVRChannel::operator==(const CPVRChannel& right) const
 {
   return (m_bIsRadio  == right.m_bIsRadio &&
           m_iUniqueId == right.m_iUniqueId &&
           m_iClientId == right.m_iClientId);
 }
 
-bool CPVRChannel::operator!=(const CPVRChannel &right) const
+bool CPVRChannel::operator!=(const CPVRChannel& right) const
 {
   return !(*this == right);
 }
@@ -47,7 +47,7 @@ CPVRChannel::CPVRChannel(bool bRadio /* = false */)
   UpdateEncryptionName();
 }
 
-CPVRChannel::CPVRChannel(const PVR_CHANNEL &channel, unsigned int iClientId)
+CPVRChannel::CPVRChannel(const PVR_CHANNEL& channel, unsigned int iClientId)
 : m_bIsRadio(channel.bIsRadio),
   m_bIsHidden(channel.bIsHidden),
   m_strIconPath(channel.strIconPath),
@@ -152,7 +152,7 @@ bool CPVRChannel::CreateEPG()
   return false;
 }
 
-bool CPVRChannel::UpdateFromClient(const std::shared_ptr<CPVRChannel> &channel)
+bool CPVRChannel::UpdateFromClient(const std::shared_ptr<CPVRChannel>& channel)
 {
   SetClientID(channel->ClientID());
 
@@ -288,7 +288,7 @@ bool CPVRChannel::HasArchive(void) const
   return m_bHasArchive;
 }
 
-bool CPVRChannel::SetIconPath(const std::string &strIconPath, bool bIsUserSetIcon /* = false */)
+bool CPVRChannel::SetIconPath(const std::string& strIconPath, bool bIsUserSetIcon /* = false */)
 {
   CSingleLock lock(m_critSection);
   if (m_strIconPath != strIconPath)
@@ -307,7 +307,7 @@ bool CPVRChannel::SetIconPath(const std::string &strIconPath, bool bIsUserSetIco
   return false;
 }
 
-bool CPVRChannel::SetChannelName(const std::string &strChannelName, bool bIsUserSetName /*= false*/)
+bool CPVRChannel::SetChannelName(const std::string& strChannelName, bool bIsUserSetName /*= false*/)
 {
   std::string strName(strChannelName);
 
@@ -581,7 +581,7 @@ bool CPVRChannel::SetEPGEnabled(bool bEPGEnabled)
   return false;
 }
 
-bool CPVRChannel::SetEPGScraper(const std::string &strScraper)
+bool CPVRChannel::SetEPGScraper(const std::string& strScraper)
 {
   CSingleLock lock(m_critSection);
 
diff --git a/xbmc/pvr/channels/PVRChannel.h b/xbmc/pvr/channels/PVRChannel.h
index 4cfffd6b8b2a..471745905d3a 100644
--- a/xbmc/pvr/channels/PVRChannel.h
+++ b/xbmc/pvr/channels/PVRChannel.h
@@ -31,12 +31,12 @@ namespace PVR
 
   public:
     explicit CPVRChannel(bool bRadio = false);
-    CPVRChannel(const PVR_CHANNEL &channel, unsigned int iClientId);
+    CPVRChannel(const PVR_CHANNEL& channel, unsigned int iClientId);
 
     virtual ~CPVRChannel() = default;
 
-    bool operator ==(const CPVRChannel &right) const;
-    bool operator !=(const CPVRChannel &right) const;
+    bool operator ==(const CPVRChannel& right) const;
+    bool operator !=(const CPVRChannel& right) const;
 
     void Serialize(CVariant& value) const override;
 
@@ -55,7 +55,7 @@ namespace PVR
      * @param channel The new channel data.
      * @return True if something changed, false otherwise.
      */
-    bool UpdateFromClient(const std::shared_ptr<CPVRChannel> &channel);
+    bool UpdateFromClient(const std::shared_ptr<CPVRChannel>& channel);
 
     /*!
      * @brief Persists the changes in the database.
@@ -171,7 +171,7 @@ namespace PVR
      * @param bIsUserSetIcon true if user changed the icon via GUI, false otherwise.
      * @return True if the something changed, false otherwise.
      */
-    bool SetIconPath(const std::string &strIconPath, bool bIsUserSetIcon = false);
+    bool SetIconPath(const std::string& strIconPath, bool bIsUserSetIcon = false);
 
     /*!
      * @return The name for this channel used by XBMC.
@@ -184,7 +184,7 @@ namespace PVR
      * @param bIsUserSetName whether the change was triggered by the user directly
      * @return True if the something changed, false otherwise.
      */
-    bool SetChannelName(const std::string &strChannelName, bool bIsUserSetName = false);
+    bool SetChannelName(const std::string& strChannelName, bool bIsUserSetName = false);
 
     /*!
      * @return Time channel has been watched last.
@@ -407,7 +407,7 @@ namespace PVR
      * @param strScraper The new scraper name.
      * @return True if the something changed, false otherwise.
      */
-    bool SetEPGScraper(const std::string &strScraper);
+    bool SetEPGScraper(const std::string& strScraper);
 
     bool CanRecord(void) const;
 
diff --git a/xbmc/pvr/channels/PVRChannelGroup.cpp b/xbmc/pvr/channels/PVRChannelGroup.cpp
index 3aba9c739b0e..248ba5293fd5 100644
--- a/xbmc/pvr/channels/PVRChannelGroup.cpp
+++ b/xbmc/pvr/channels/PVRChannelGroup.cpp
@@ -69,7 +69,7 @@ bool CPVRChannelGroup::operator==(const CPVRChannelGroup& right) const
           m_path == right.m_path);
 }
 
-bool CPVRChannelGroup::operator!=(const CPVRChannelGroup &right) const
+bool CPVRChannelGroup::operator!=(const CPVRChannelGroup& right) const
 {
   return !(*this == right);
 }
@@ -157,7 +157,7 @@ void CPVRChannelGroup::SetPath(const CPVRChannelsPath& path)
   }
 }
 
-bool CPVRChannelGroup::SetChannelNumber(const std::shared_ptr<CPVRChannel> &channel, const CPVRChannelNumber &channelNumber)
+bool CPVRChannelGroup::SetChannelNumber(const std::shared_ptr<CPVRChannel>& channel, const CPVRChannelNumber& channelNumber)
 {
   bool bReturn(false);
   CSingleLock lock(m_critSection);
@@ -184,7 +184,7 @@ bool CPVRChannelGroup::SetChannelNumber(const std::shared_ptr<CPVRChannel> &chan
 
 struct sortByClientChannelNumber
 {
-  bool operator()(const PVRChannelGroupMember &channel1, const PVRChannelGroupMember &channel2) const
+  bool operator()(const PVRChannelGroupMember& channel1, const PVRChannelGroupMember& channel2) const
   {
     if (channel1.iClientPriority == channel2.iClientPriority)
     {
@@ -199,7 +199,7 @@ struct sortByClientChannelNumber
 
 struct sortByChannelNumber
 {
-  bool operator()(const PVRChannelGroupMember &channel1, const PVRChannelGroupMember &channel2) const
+  bool operator()(const PVRChannelGroupMember& channel1, const PVRChannelGroupMember& channel2) const
   {
     return channel1.channelNumber < channel2.channelNumber;
   }
@@ -477,7 +477,7 @@ bool CPVRChannelGroup::LoadFromClients(void)
   return CServiceBroker::GetPVRManager().Clients()->GetChannelGroupMembers(this, m_failedClientsForChannelGroupMembers) == PVR_ERROR_NO_ERROR;
 }
 
-bool CPVRChannelGroup::AddAndUpdateChannels(const CPVRChannelGroup &channels, bool bUseBackendChannelNumbers)
+bool CPVRChannelGroup::AddAndUpdateChannels(const CPVRChannelGroup& channels, bool bUseBackendChannelNumbers)
 {
   bool bReturn(false);
 
@@ -542,7 +542,7 @@ void CPVRChannelGroup::UpdateChannelNumbers()
   }
 }
 
-std::vector<std::shared_ptr<CPVRChannel>> CPVRChannelGroup::RemoveDeletedChannels(const CPVRChannelGroup &channels)
+std::vector<std::shared_ptr<CPVRChannel>> CPVRChannelGroup::RemoveDeletedChannels(const CPVRChannelGroup& channels)
 {
   std::vector<std::shared_ptr<CPVRChannel>> removedChannels;
   CSingleLock lock(m_critSection);
@@ -608,7 +608,7 @@ bool CPVRChannelGroup::UpdateGroupEntries(const CPVRChannelGroup& channels, std:
   return bReturn;
 }
 
-bool CPVRChannelGroup::RemoveFromGroup(const std::shared_ptr<CPVRChannel> &channel)
+bool CPVRChannelGroup::RemoveFromGroup(const std::shared_ptr<CPVRChannel>& channel)
 {
   bool bReturn(false);
   CSingleLock lock(m_critSection);
@@ -672,7 +672,7 @@ bool CPVRChannelGroup::AddToGroup(const std::shared_ptr<CPVRChannel>& channel, c
   return bReturn;
 }
 
-bool CPVRChannelGroup::IsGroupMember(const std::shared_ptr<CPVRChannel> &channel) const
+bool CPVRChannelGroup::IsGroupMember(const std::shared_ptr<CPVRChannel>& channel) const
 {
   CSingleLock lock(m_critSection);
   return m_members.find(channel->StorageId()) != m_members.end();
@@ -820,7 +820,7 @@ void CPVRChannelGroup::OnSettingChanged(std::shared_ptr<const CSetting> setting)
     return;
   }
 
-  const std::string &settingId = setting->GetId();
+  const std::string& settingId = setting->GetId();
   if (settingId == CSettings::SETTING_PVRMANAGER_BACKENDCHANNELORDER || settingId == CSettings::SETTING_PVRMANAGER_USEBACKENDCHANNELNUMBERS ||
       settingId == CSettings::SETTING_PVRMANAGER_STARTGROUPCHANNELNUMBERSFROMONE)
   {
diff --git a/xbmc/pvr/channels/PVRChannelGroup.h b/xbmc/pvr/channels/PVRChannelGroup.h
index 75509e62fda6..092834638eb5 100644
--- a/xbmc/pvr/channels/PVRChannelGroup.h
+++ b/xbmc/pvr/channels/PVRChannelGroup.h
@@ -87,8 +87,8 @@ namespace PVR
 
     ~CPVRChannelGroup(void) override;
 
-    bool operator ==(const CPVRChannelGroup &right) const;
-    bool operator !=(const CPVRChannelGroup &right) const;
+    bool operator ==(const CPVRChannelGroup& right) const;
+    bool operator !=(const CPVRChannelGroup& right) const;
 
     /**
      * Empty group member
@@ -135,14 +135,14 @@ namespace PVR
      * @param channel The channel to change the channel number for.
      * @param channelNumber The new channel number.
      */
-    bool SetChannelNumber(const std::shared_ptr<CPVRChannel> &channel, const CPVRChannelNumber &channelNumber);
+    bool SetChannelNumber(const std::shared_ptr<CPVRChannel>& channel, const CPVRChannelNumber& channelNumber);
 
     /*!
      * @brief Remove a channel from this container.
      * @param channel The channel to remove.
      * @return True if the channel was found and removed, false otherwise.
      */
-    virtual bool RemoveFromGroup(const std::shared_ptr<CPVRChannel> &channel);
+    virtual bool RemoveFromGroup(const std::shared_ptr<CPVRChannel>& channel);
 
     /*!
      * @brief Add a channel to this container.
@@ -172,7 +172,7 @@ namespace PVR
      * @param channel The channel to find.
      * @return True if the channel was found, false otherwise.
      */
-    virtual bool IsGroupMember(const std::shared_ptr<CPVRChannel> &channel) const;
+    virtual bool IsGroupMember(const std::shared_ptr<CPVRChannel>& channel) const;
 
     /*!
      * @brief Check whether a channel is in this container.
@@ -297,7 +297,7 @@ namespace PVR
      * @param channel The channel to get the channel number for.
      * @return The channel number in this group.
      */
-    CPVRChannelNumber GetChannelNumber(const std::shared_ptr<CPVRChannel> &channel) const;
+    CPVRChannelNumber GetChannelNumber(const std::shared_ptr<CPVRChannel>& channel) const;
 
     /*!
      * @brief Get the client channel number in this group of the given channel.
@@ -506,14 +506,14 @@ namespace PVR
      * @param bUseBackendChannelNumbers True, if channel numbers from backends shall be used.
      * @return True if everything went well, false otherwise.
      */
-    virtual bool AddAndUpdateChannels(const CPVRChannelGroup &channels, bool bUseBackendChannelNumbers);
+    virtual bool AddAndUpdateChannels(const CPVRChannelGroup& channels, bool bUseBackendChannelNumbers);
 
     /*!
      * @brief Remove deleted channels from this group.
      * @param channels The new channels to use for this group.
      * @return The removed channels.
      */
-    virtual std::vector<std::shared_ptr<CPVRChannel>> RemoveDeletedChannels(const CPVRChannelGroup &channels);
+    virtual std::vector<std::shared_ptr<CPVRChannel>> RemoveDeletedChannels(const CPVRChannelGroup& channels);
 
     /*!
      * @brief Clear this channel list.
diff --git a/xbmc/pvr/channels/PVRChannelGroupInternal.cpp b/xbmc/pvr/channels/PVRChannelGroupInternal.cpp
index 853ec2dd2843..28e152c2a520 100644
--- a/xbmc/pvr/channels/PVRChannelGroupInternal.cpp
+++ b/xbmc/pvr/channels/PVRChannelGroupInternal.cpp
@@ -156,7 +156,7 @@ bool CPVRChannelGroupInternal::AddToGroup(const std::shared_ptr<CPVRChannel>& ch
   return bReturn;
 }
 
-bool CPVRChannelGroupInternal::RemoveFromGroup(const std::shared_ptr<CPVRChannel> &channel)
+bool CPVRChannelGroupInternal::RemoveFromGroup(const std::shared_ptr<CPVRChannel>& channel)
 {
   if (!IsGroupMember(channel))
     return false;
@@ -214,12 +214,12 @@ bool CPVRChannelGroupInternal::LoadFromClients(void)
   return CServiceBroker::GetPVRManager().Clients()->GetChannels(this, m_failedClientsForChannels) == PVR_ERROR_NO_ERROR;
 }
 
-bool CPVRChannelGroupInternal::IsGroupMember(const std::shared_ptr<CPVRChannel> &channel) const
+bool CPVRChannelGroupInternal::IsGroupMember(const std::shared_ptr<CPVRChannel>& channel) const
 {
   return !channel->IsHidden();
 }
 
-bool CPVRChannelGroupInternal::AddAndUpdateChannels(const CPVRChannelGroup &channels, bool bUseBackendChannelNumbers)
+bool CPVRChannelGroupInternal::AddAndUpdateChannels(const CPVRChannelGroup& channels, bool bUseBackendChannelNumbers)
 {
   bool bReturn(false);
   CSingleLock lock(m_critSection);
@@ -257,7 +257,7 @@ bool CPVRChannelGroupInternal::AddAndUpdateChannels(const CPVRChannelGroup &chan
   return bReturn;
 }
 
-std::vector<std::shared_ptr<CPVRChannel>> CPVRChannelGroupInternal::RemoveDeletedChannels(const CPVRChannelGroup &channels)
+std::vector<std::shared_ptr<CPVRChannel>> CPVRChannelGroupInternal::RemoveDeletedChannels(const CPVRChannelGroup& channels)
 {
   std::vector<std::shared_ptr<CPVRChannel>> removedChannels = CPVRChannelGroup::RemoveDeletedChannels(channels);
 
diff --git a/xbmc/pvr/channels/PVRChannelGroupInternal.h b/xbmc/pvr/channels/PVRChannelGroupInternal.h
index ffb9ff571152..0f6e1b9f9b31 100644
--- a/xbmc/pvr/channels/PVRChannelGroupInternal.h
+++ b/xbmc/pvr/channels/PVRChannelGroupInternal.h
@@ -50,7 +50,7 @@ namespace PVR
     /*!
      * @see CPVRChannelGroup::IsGroupMember
      */
-    bool IsGroupMember(const std::shared_ptr<CPVRChannel> &channel) const override;
+    bool IsGroupMember(const std::shared_ptr<CPVRChannel>& channel) const override;
 
     /*!
      * @see CPVRChannelGroup::AddToGroup
@@ -60,7 +60,7 @@ namespace PVR
     /*!
      * @see CPVRChannelGroup::RemoveFromGroup
      */
-    bool RemoveFromGroup(const std::shared_ptr<CPVRChannel> &channel) override;
+    bool RemoveFromGroup(const std::shared_ptr<CPVRChannel>& channel) override;
 
     /*!
      * @brief Check whether the group name is still correct after the language setting changed.
@@ -112,14 +112,14 @@ namespace PVR
      * @param bUseBackendChannelNumbers True, if channel numbers from backends shall be used.
      * @return True if everything went well, false otherwise.
      */
-    bool AddAndUpdateChannels(const CPVRChannelGroup &channels, bool bUseBackendChannelNumbers) override;
+    bool AddAndUpdateChannels(const CPVRChannelGroup& channels, bool bUseBackendChannelNumbers) override;
 
     /*!
      * @brief Remove deleted channels from this group.
      * @param channels The new channels to use for this group.
      * @return The removed channels.
      */
-    std::vector<std::shared_ptr<CPVRChannel>> RemoveDeletedChannels(const CPVRChannelGroup &channels) override;
+    std::vector<std::shared_ptr<CPVRChannel>> RemoveDeletedChannels(const CPVRChannelGroup& channels) override;
 
     /*!
      * @brief Refresh the channel list from the clients.
diff --git a/xbmc/pvr/channels/PVRChannelGroups.cpp b/xbmc/pvr/channels/PVRChannelGroups.cpp
index e14e5875afa9..4431581786a4 100644
--- a/xbmc/pvr/channels/PVRChannelGroups.cpp
+++ b/xbmc/pvr/channels/PVRChannelGroups.cpp
@@ -53,7 +53,7 @@ bool CPVRChannelGroups::GetGroupsFromClients(void)
   return CServiceBroker::GetPVRManager().Clients()->GetChannelGroups(this, m_failedClientsForChannelGroups) == PVR_ERROR_NO_ERROR;
 }
 
-bool CPVRChannelGroups::Update(const CPVRChannelGroup &group, bool bUpdateFromClient /* = false */)
+bool CPVRChannelGroups::Update(const CPVRChannelGroup& group, bool bUpdateFromClient /* = false */)
 {
   if (group.GroupName().empty() && group.GroupID() <= 0)
     return true;
@@ -110,14 +110,14 @@ void CPVRChannelGroups::SortGroups()
   CSingleLock lock(m_critSection);
 
   // check if one of the group holds a valid sort position
-  std::vector<std::shared_ptr<CPVRChannelGroup>>::iterator it = std::find_if(m_groups.begin(), m_groups.end(), [](const std::shared_ptr<CPVRChannelGroup> &group) {
+  std::vector<std::shared_ptr<CPVRChannelGroup>>::iterator it = std::find_if(m_groups.begin(), m_groups.end(), [](const std::shared_ptr<CPVRChannelGroup>& group) {
     return (group->GetPosition() > 0);
   });
 
   // sort by position if we found a valid sort position
   if (it != m_groups.end())
   {
-    std::sort(m_groups.begin(), m_groups.end(), [](const std::shared_ptr<CPVRChannelGroup> &group1, const std::shared_ptr<CPVRChannelGroup> &group2) {
+    std::sort(m_groups.begin(), m_groups.end(), [](const std::shared_ptr<CPVRChannelGroup>& group1, const std::shared_ptr<CPVRChannelGroup>& group2) {
       return group1->GetPosition() < group2->GetPosition();
     });
   }
@@ -149,7 +149,7 @@ std::shared_ptr<CPVRChannelGroup> CPVRChannelGroups::GetById(int iGroupId) const
   return empty;
 }
 
-std::vector<std::shared_ptr<CPVRChannelGroup>> CPVRChannelGroups::GetGroupsByChannel(const std::shared_ptr<CPVRChannel> &channel, bool bExcludeHidden /* = false */) const
+std::vector<std::shared_ptr<CPVRChannelGroup>> CPVRChannelGroups::GetGroupsByChannel(const std::shared_ptr<CPVRChannel>& channel, bool bExcludeHidden /* = false */) const
 {
   std::vector<std::shared_ptr<CPVRChannelGroup>> groups;
 
@@ -177,7 +177,7 @@ std::shared_ptr<CPVRChannelGroup> CPVRChannelGroups::GetGroupByPath(const std::s
   return {};
 }
 
-std::shared_ptr<CPVRChannelGroup> CPVRChannelGroups::GetByName(const std::string &strName) const
+std::shared_ptr<CPVRChannelGroup> CPVRChannelGroups::GetByName(const std::string& strName) const
 {
   CSingleLock lock(m_critSection);
   for (std::vector<std::shared_ptr<CPVRChannelGroup>>::const_iterator it = m_groups.begin(); it != m_groups.end(); ++it)
@@ -199,7 +199,7 @@ void CPVRChannelGroups::RemoveFromAllGroups(const std::vector<std::shared_ptr<CP
   }
 }
 
-void CPVRChannelGroups::RemoveFromAllGroups(const std::shared_ptr<CPVRChannel> &channel)
+void CPVRChannelGroups::RemoveFromAllGroups(const std::shared_ptr<CPVRChannel>& channel)
 {
   CSingleLock lock(m_critSection);
   const std::shared_ptr<CPVRChannelGroup> allGroup = GetGroupAll();
@@ -228,7 +228,7 @@ bool CPVRChannelGroups::Update(bool bChannelsOnly /* = false */)
     groups = m_groups;
   }
 
-  for (const auto &group : groups)
+  for (const auto& group : groups)
   {
     if (bUpdateAllGroups || group->IsInternalGroup())
     {
@@ -404,7 +404,7 @@ std::vector<std::shared_ptr<CPVRChannelGroup>> CPVRChannelGroups::GetMembers(boo
   return groups;
 }
 
-std::shared_ptr<CPVRChannelGroup> CPVRChannelGroups::GetPreviousGroup(const CPVRChannelGroup &group) const
+std::shared_ptr<CPVRChannelGroup> CPVRChannelGroups::GetPreviousGroup(const CPVRChannelGroup& group) const
 {
   bool bReturnNext(false);
 
@@ -433,7 +433,7 @@ std::shared_ptr<CPVRChannelGroup> CPVRChannelGroups::GetPreviousGroup(const CPVR
   return GetLastGroup();
 }
 
-std::shared_ptr<CPVRChannelGroup> CPVRChannelGroups::GetNextGroup(const CPVRChannelGroup &group) const
+std::shared_ptr<CPVRChannelGroup> CPVRChannelGroups::GetNextGroup(const CPVRChannelGroup& group) const
 {
   bool bReturnNext(false);
 
@@ -479,7 +479,7 @@ void CPVRChannelGroups::SetSelectedGroup(const std::shared_ptr<CPVRChannelGroup>
     group->SetSelectedGroup(group == m_selectedGroup);
 }
 
-bool CPVRChannelGroups::AddGroup(const std::string &strName)
+bool CPVRChannelGroups::AddGroup(const std::string& strName)
 {
   bool bPersist(false);
   std::shared_ptr<CPVRChannelGroup> group;
@@ -503,7 +503,7 @@ bool CPVRChannelGroups::AddGroup(const std::string &strName)
   return bPersist ? group->Persist() : true;
 }
 
-bool CPVRChannelGroups::DeleteGroup(const CPVRChannelGroup &group)
+bool CPVRChannelGroups::DeleteGroup(const CPVRChannelGroup& group)
 {
   // don't delete internal groups
   if (group.IsInternalGroup())
diff --git a/xbmc/pvr/channels/PVRChannelGroups.h b/xbmc/pvr/channels/PVRChannelGroups.h
index a33f3195b73b..0e5b2f0de3ab 100644
--- a/xbmc/pvr/channels/PVRChannelGroups.h
+++ b/xbmc/pvr/channels/PVRChannelGroups.h
@@ -54,14 +54,14 @@ namespace PVR
      * @param bUpdateFromClient True to save the changes in the db.
      * @return True if the group was added or update successfully, false otherwise.
      */
-    bool Update(const CPVRChannelGroup &group, bool bUpdateFromClient = false);
+    bool Update(const CPVRChannelGroup& group, bool bUpdateFromClient = false);
 
     /*!
      * @brief Called by the add-on callback to add a new group
      * @param group The group to add
      * @return True when updated, false otherwise
      */
-    bool UpdateFromClient(const CPVRChannelGroup &group) { return Update(group, true); }
+    bool UpdateFromClient(const CPVRChannelGroup& group) { return Update(group, true); }
 
     /*!
      * @brief Get a channel given its path
@@ -83,7 +83,7 @@ namespace PVR
      * @param bExcludeHidden Whenever to exclude hidden channel groups.
      * @return A list of groups the channel is a member.
      */
-    std::vector<std::shared_ptr<CPVRChannelGroup>> GetGroupsByChannel(const std::shared_ptr<CPVRChannel> &channel, bool bExcludeHidden = false) const;
+    std::vector<std::shared_ptr<CPVRChannelGroup>> GetGroupsByChannel(const std::shared_ptr<CPVRChannel>& channel, bool bExcludeHidden = false) const;
 
     /*!
      * @brief Get a channel group given its path
@@ -97,7 +97,7 @@ namespace PVR
      * @param strName The name.
      * @return The group or NULL if it wasn't found.
      */
-    std::shared_ptr<CPVRChannelGroup> GetByName(const std::string &strName) const;
+    std::shared_ptr<CPVRChannelGroup> GetByName(const std::string& strName) const;
 
     /*!
      * @brief Get the group that contains all channels.
@@ -135,14 +135,14 @@ namespace PVR
      * @param group The current group.
      * @return The previous group or the group containing all channels if it wasn't found.
      */
-    std::shared_ptr<CPVRChannelGroup> GetPreviousGroup(const CPVRChannelGroup &group) const;
+    std::shared_ptr<CPVRChannelGroup> GetPreviousGroup(const CPVRChannelGroup& group) const;
 
     /*!
      * @brief Get the next group in this container.
      * @param group The current group.
      * @return The next group or the group containing all channels if it wasn't found.
      */
-    std::shared_ptr<CPVRChannelGroup> GetNextGroup(const CPVRChannelGroup &group) const;
+    std::shared_ptr<CPVRChannelGroup> GetNextGroup(const CPVRChannelGroup& group) const;
 
     /*!
      * @brief Get the group that is currently selected in the UI.
@@ -161,14 +161,14 @@ namespace PVR
      * @param strName The name of the group.
      * @return True if the group was added, false otherwise.
      */
-    bool AddGroup(const std::string &strName);
+    bool AddGroup(const std::string& strName);
 
     /*!
      * @brief Delete a group in this container.
      * @param group The group to delete.
      * @return True if it was deleted successfully, false if not.
      */
-    bool DeleteGroup(const CPVRChannelGroup &group);
+    bool DeleteGroup(const CPVRChannelGroup& group);
 
     /*!
      * @brief Create EPG tags for all channels of the internal group.
diff --git a/xbmc/pvr/channels/PVRChannelGroupsContainer.cpp b/xbmc/pvr/channels/PVRChannelGroupsContainer.cpp
index 4ee8082ec421..50fb6406a1bc 100644
--- a/xbmc/pvr/channels/PVRChannelGroupsContainer.cpp
+++ b/xbmc/pvr/channels/PVRChannelGroupsContainer.cpp
@@ -176,7 +176,7 @@ std::shared_ptr<CPVRChannelGroup> CPVRChannelGroupsContainer::GetPreviousPlayedG
   return m_lastPlayedGroups[0];
 }
 
-void CPVRChannelGroupsContainer::SetLastPlayedGroup(const std::shared_ptr<CPVRChannelGroup> &group)
+void CPVRChannelGroupsContainer::SetLastPlayedGroup(const std::shared_ptr<CPVRChannelGroup>& group)
 {
   CSingleLock lock(m_critSection);
   m_lastPlayedGroups[0] = m_lastPlayedGroups[1];
diff --git a/xbmc/pvr/channels/PVRChannelGroupsContainer.h b/xbmc/pvr/channels/PVRChannelGroupsContainer.h
index 76237a120209..bf038ce0f651 100644
--- a/xbmc/pvr/channels/PVRChannelGroupsContainer.h
+++ b/xbmc/pvr/channels/PVRChannelGroupsContainer.h
@@ -173,7 +173,7 @@ namespace PVR
      * @brief Set the last played group.
      * @param The last played group
      */
-    void SetLastPlayedGroup(const std::shared_ptr<CPVRChannelGroup> &group);
+    void SetLastPlayedGroup(const std::shared_ptr<CPVRChannelGroup>& group);
 
   protected:
     CPVRChannelGroups *m_groupsRadio; /*!< all radio channel groups */
diff --git a/xbmc/pvr/channels/PVRChannelNumber.h b/xbmc/pvr/channels/PVRChannelNumber.h
index b4ed1a4d6c67..048b6835102c 100644
--- a/xbmc/pvr/channels/PVRChannelNumber.h
+++ b/xbmc/pvr/channels/PVRChannelNumber.h
@@ -20,18 +20,18 @@ namespace PVR
     constexpr CPVRChannelNumber(unsigned int iChannelNumber, unsigned int iSubChannelNumber)
     : m_iChannelNumber(iChannelNumber), m_iSubChannelNumber(iSubChannelNumber) {}
 
-    constexpr bool operator ==(const CPVRChannelNumber &right) const
+    constexpr bool operator ==(const CPVRChannelNumber& right) const
     {
       return (m_iChannelNumber  == right.m_iChannelNumber &&
               m_iSubChannelNumber == right.m_iSubChannelNumber);
     }
 
-    constexpr bool operator !=(const CPVRChannelNumber &right) const
+    constexpr bool operator !=(const CPVRChannelNumber& right) const
     {
       return !(*this == right);
     }
 
-    constexpr bool operator <(const CPVRChannelNumber &right) const
+    constexpr bool operator <(const CPVRChannelNumber& right) const
     {
       return m_iChannelNumber == right.m_iChannelNumber
         ? m_iSubChannelNumber < right.m_iSubChannelNumber
diff --git a/xbmc/pvr/channels/PVRRadioRDSInfoTag.cpp b/xbmc/pvr/channels/PVRRadioRDSInfoTag.cpp
index f5585d009f2a..c953c40dd87c 100644
--- a/xbmc/pvr/channels/PVRRadioRDSInfoTag.cpp
+++ b/xbmc/pvr/channels/PVRRadioRDSInfoTag.cpp
@@ -111,7 +111,7 @@ void CPVRRadioRDSInfoTag::Archive(CArchive& ar)
   }
 }
 
-bool CPVRRadioRDSInfoTag::operator==(const CPVRRadioRDSInfoTag &right) const
+bool CPVRRadioRDSInfoTag::operator==(const CPVRRadioRDSInfoTag& right) const
 {
   if (this == &right)
     return true;
@@ -640,7 +640,7 @@ bool CPVRRadioRDSInfoTag::IsPlayingRadiotextPlus() const
   return m_bHaveRadiotextPlus;
 }
 
-std::string CPVRRadioRDSInfoTag::Trim(const std::string &value)
+std::string CPVRRadioRDSInfoTag::Trim(const std::string& value)
 {
   std::string trimmedValue(value);
   StringUtils::TrimLeft(trimmedValue);
@@ -648,7 +648,7 @@ std::string CPVRRadioRDSInfoTag::Trim(const std::string &value)
   return trimmedValue;
 }
 
-bool CPVRRadioRDSInfoTag::Info::operator==(const CPVRRadioRDSInfoTag::Info &right) const
+bool CPVRRadioRDSInfoTag::Info::operator==(const CPVRRadioRDSInfoTag::Info& right) const
 {
   if (this == &right)
     return true;
diff --git a/xbmc/pvr/channels/PVRRadioRDSInfoTag.h b/xbmc/pvr/channels/PVRRadioRDSInfoTag.h
index 5370585e5e40..731acbbd9ef1 100644
--- a/xbmc/pvr/channels/PVRRadioRDSInfoTag.h
+++ b/xbmc/pvr/channels/PVRRadioRDSInfoTag.h
@@ -125,7 +125,7 @@ class CPVRRadioRDSInfoTag final : public IArchivable, public ISerializable
   CPVRRadioRDSInfoTag(const CPVRRadioRDSInfoTag& tag) = delete;
   const CPVRRadioRDSInfoTag& operator =(const CPVRRadioRDSInfoTag& tag) = delete;
 
-  static std::string Trim(const std::string &value);
+  static std::string Trim(const std::string& value);
 
   mutable CCriticalSection m_critSection;
 
@@ -148,7 +148,7 @@ class CPVRRadioRDSInfoTag final : public IArchivable, public ISerializable
   public:
     Info() = default;
 
-    bool operator==(const Info &right) const;
+    bool operator==(const Info& right) const;
 
     void Clear();
     void Add(const std::string& text);
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRChannelGuide.cpp b/xbmc/pvr/dialogs/GUIDialogPVRChannelGuide.cpp
index d7106023306b..f6824c2dd24d 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRChannelGuide.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRChannelGuide.cpp
@@ -24,7 +24,7 @@ CGUIDialogPVRChannelGuide::CGUIDialogPVRChannelGuide()
 {
 }
 
-void CGUIDialogPVRChannelGuide::Open(const std::shared_ptr<CPVRChannel> &channel)
+void CGUIDialogPVRChannelGuide::Open(const std::shared_ptr<CPVRChannel>& channel)
 {
   m_channel = channel;
   CGUIDialogPVRItemsViewBase::Open();
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRChannelGuide.h b/xbmc/pvr/dialogs/GUIDialogPVRChannelGuide.h
index 50ef9727f3ec..f7a4830d8385 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRChannelGuide.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRChannelGuide.h
@@ -22,7 +22,7 @@ namespace PVR
     CGUIDialogPVRChannelGuide(void);
     ~CGUIDialogPVRChannelGuide(void) override = default;
 
-    void Open(const std::shared_ptr<CPVRChannel> &channel);
+    void Open(const std::shared_ptr<CPVRChannel>& channel);
 
   protected:
     void OnInitWindow() override;
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.cpp b/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.cpp
index 6230422e2dcc..00792ca02e65 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.cpp
@@ -72,7 +72,7 @@ CGUIDialogPVRChannelManager::~CGUIDialogPVRChannelManager(void)
   delete m_channelItems;
 }
 
-bool CGUIDialogPVRChannelManager::OnActionMove(const CAction &action)
+bool CGUIDialogPVRChannelManager::OnActionMove(const CAction& action)
 {
   bool bReturn(false);
   int iActionId = action.GetID();
@@ -174,7 +174,7 @@ void CGUIDialogPVRChannelManager::OnDeinitWindow(int nextWindowID)
   CGUIDialog::OnDeinitWindow(nextWindowID);
 }
 
-bool CGUIDialogPVRChannelManager::OnClickListChannels(CGUIMessage &message)
+bool CGUIDialogPVRChannelManager::OnClickListChannels(CGUIMessage& message)
 {
   if (!m_bMovingMode)
   {
@@ -209,26 +209,26 @@ bool CGUIDialogPVRChannelManager::OnClickListChannels(CGUIMessage &message)
   return false;
 }
 
-bool CGUIDialogPVRChannelManager::OnClickButtonOK(CGUIMessage &message)
+bool CGUIDialogPVRChannelManager::OnClickButtonOK(CGUIMessage& message)
 {
   SaveList();
   Close();
   return true;
 }
 
-bool CGUIDialogPVRChannelManager::OnClickButtonApply(CGUIMessage &message)
+bool CGUIDialogPVRChannelManager::OnClickButtonApply(CGUIMessage& message)
 {
   SaveList();
   return true;
 }
 
-bool CGUIDialogPVRChannelManager::OnClickButtonCancel(CGUIMessage &message)
+bool CGUIDialogPVRChannelManager::OnClickButtonCancel(CGUIMessage& message)
 {
   Close();
   return true;
 }
 
-bool CGUIDialogPVRChannelManager::OnClickButtonRadioTV(CGUIMessage &message)
+bool CGUIDialogPVRChannelManager::OnClickButtonRadioTV(CGUIMessage& message)
 {
   if (m_bContainsChanges)
   {
@@ -257,7 +257,7 @@ bool CGUIDialogPVRChannelManager::OnClickButtonRadioTV(CGUIMessage &message)
   return true;
 }
 
-bool CGUIDialogPVRChannelManager::OnClickButtonRadioActive(CGUIMessage &message)
+bool CGUIDialogPVRChannelManager::OnClickButtonRadioActive(CGUIMessage& message)
 {
   CGUIMessage msg(GUI_MSG_IS_SELECTED, GetID(), RADIOBUTTON_ACTIVE);
   if (OnMessage(msg))
@@ -277,7 +277,7 @@ bool CGUIDialogPVRChannelManager::OnClickButtonRadioActive(CGUIMessage &message)
   return false;
 }
 
-bool CGUIDialogPVRChannelManager::OnClickButtonRadioParentalLocked(CGUIMessage &message)
+bool CGUIDialogPVRChannelManager::OnClickButtonRadioParentalLocked(CGUIMessage& message)
 {
   CGUIMessage msg(GUI_MSG_IS_SELECTED, GetID(), RADIOBUTTON_PARENTAL_LOCK);
   if (!OnMessage(msg))
@@ -305,7 +305,7 @@ bool CGUIDialogPVRChannelManager::OnClickButtonRadioParentalLocked(CGUIMessage &
   return false;
 }
 
-bool CGUIDialogPVRChannelManager::OnClickButtonEditName(CGUIMessage &message)
+bool CGUIDialogPVRChannelManager::OnClickButtonEditName(CGUIMessage& message)
 {
   CGUIMessage msg(GUI_MSG_ITEM_SELECTED, GetID(), EDIT_NAME);
   if (OnMessage(msg))
@@ -324,7 +324,7 @@ bool CGUIDialogPVRChannelManager::OnClickButtonEditName(CGUIMessage &message)
   return false;
 }
 
-bool CGUIDialogPVRChannelManager::OnClickButtonChannelLogo(CGUIMessage &message)
+bool CGUIDialogPVRChannelManager::OnClickButtonChannelLogo(CGUIMessage& message)
 {
   CFileItemPtr pItem = m_channelItems->Get(m_iSelected);
   if (!pItem)
@@ -387,7 +387,7 @@ bool CGUIDialogPVRChannelManager::OnClickButtonChannelLogo(CGUIMessage &message)
   return true;
 }
 
-bool CGUIDialogPVRChannelManager::OnClickButtonUseEPG(CGUIMessage &message)
+bool CGUIDialogPVRChannelManager::OnClickButtonUseEPG(CGUIMessage& message)
 {
   CGUIMessage msg(GUI_MSG_IS_SELECTED, GetID(), RADIOBUTTON_USEEPG);
   if (OnMessage(msg))
@@ -407,7 +407,7 @@ bool CGUIDialogPVRChannelManager::OnClickButtonUseEPG(CGUIMessage &message)
   return false;
 }
 
-bool CGUIDialogPVRChannelManager::OnClickEPGSourceSpin(CGUIMessage &message)
+bool CGUIDialogPVRChannelManager::OnClickEPGSourceSpin(CGUIMessage& message)
 {
   //! @todo Add EPG scraper support
   return true;
@@ -425,7 +425,7 @@ bool CGUIDialogPVRChannelManager::OnClickEPGSourceSpin(CGUIMessage &message)
 //  }
 }
 
-bool CGUIDialogPVRChannelManager::OnClickButtonGroupManager(CGUIMessage &message)
+bool CGUIDialogPVRChannelManager::OnClickButtonGroupManager(CGUIMessage& message)
 {
   /* Load group manager dialog */
   CGUIDialogPVRGroupManager* pDlgInfo = CServiceBroker::GetGUI()->GetWindowManager().GetWindow<CGUIDialogPVRGroupManager>(WINDOW_DIALOG_PVR_GROUP_MANAGER);
@@ -485,7 +485,7 @@ bool CGUIDialogPVRChannelManager::OnClickButtonNewChannel()
   return true;
 }
 
-bool CGUIDialogPVRChannelManager::OnMessageClick(CGUIMessage &message)
+bool CGUIDialogPVRChannelManager::OnMessageClick(CGUIMessage& message)
 {
   int iControl = message.GetSenderId();
   switch(iControl)
@@ -683,7 +683,7 @@ void CGUIDialogPVRChannelManager::Update()
 
   std::vector<PVRChannelGroupMember> groupMembers(channels->GetMembers());
   CFileItemPtr channelFile;
-  for (const auto &member : groupMembers)
+  for (const auto& member : groupMembers)
   {
     channelFile = CFileItemPtr(new CFileItem(member.channel));
     if (!channelFile || !channelFile->HasPVRChannelInfoTag())
@@ -735,7 +735,7 @@ void CGUIDialogPVRChannelManager::Clear(void)
   m_channelItems->Clear();
 }
 
-void CGUIDialogPVRChannelManager::RenameChannel(const CFileItemPtr &pItem)
+void CGUIDialogPVRChannelManager::RenameChannel(const CFileItemPtr& pItem)
 {
   std::string strChannelName = pItem->GetProperty("Name").asString();
   if (strChannelName != pItem->GetPVRChannelInfoTag()->ChannelName())
@@ -749,7 +749,7 @@ void CGUIDialogPVRChannelManager::RenameChannel(const CFileItemPtr &pItem)
   }
 }
 
-bool CGUIDialogPVRChannelManager::PersistChannel(const CFileItemPtr &pItem, const std::shared_ptr<CPVRChannelGroup> &group, unsigned int *iChannelNumber)
+bool CGUIDialogPVRChannelManager::PersistChannel(const CFileItemPtr& pItem, const std::shared_ptr<CPVRChannelGroup>& group, unsigned int *iChannelNumber)
 {
   if (!pItem || !pItem->HasPVRChannelInfoTag() || !group)
     return false;
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.h b/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.h
index 05d1f9093273..22a65df68262 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.h
@@ -46,27 +46,27 @@ namespace PVR
     void SaveList(void);
     void Renumber(void);
     void SetData(int iItem);
-    void RenameChannel(const CFileItemPtr &pItem);
+    void RenameChannel(const CFileItemPtr& pItem);
 
     bool OnPopupMenu(int iItem);
     bool OnContextButton(int itemNumber, CONTEXT_BUTTON button);
-    bool OnActionMove(const CAction &action);
-    bool OnMessageClick(CGUIMessage &message);
-    bool OnClickListChannels(CGUIMessage &message);
-    bool OnClickButtonOK(CGUIMessage &message);
-    bool OnClickButtonApply(CGUIMessage &message);
-    bool OnClickButtonCancel(CGUIMessage &message);
-    bool OnClickButtonRadioTV(CGUIMessage &message);
-    bool OnClickButtonRadioActive(CGUIMessage &message);
-    bool OnClickButtonRadioParentalLocked(CGUIMessage &message);
-    bool OnClickButtonEditName(CGUIMessage &message);
-    bool OnClickButtonChannelLogo(CGUIMessage &message);
-    bool OnClickButtonUseEPG(CGUIMessage &message);
-    bool OnClickEPGSourceSpin(CGUIMessage &message);
-    bool OnClickButtonGroupManager(CGUIMessage &message);
+    bool OnActionMove(const CAction& action);
+    bool OnMessageClick(CGUIMessage& message);
+    bool OnClickListChannels(CGUIMessage& message);
+    bool OnClickButtonOK(CGUIMessage& message);
+    bool OnClickButtonApply(CGUIMessage& message);
+    bool OnClickButtonCancel(CGUIMessage& message);
+    bool OnClickButtonRadioTV(CGUIMessage& message);
+    bool OnClickButtonRadioActive(CGUIMessage& message);
+    bool OnClickButtonRadioParentalLocked(CGUIMessage& message);
+    bool OnClickButtonEditName(CGUIMessage& message);
+    bool OnClickButtonChannelLogo(CGUIMessage& message);
+    bool OnClickButtonUseEPG(CGUIMessage& message);
+    bool OnClickEPGSourceSpin(CGUIMessage& message);
+    bool OnClickButtonGroupManager(CGUIMessage& message);
     bool OnClickButtonNewChannel();
 
-    bool PersistChannel(const CFileItemPtr &pItem, const std::shared_ptr<CPVRChannelGroup> &group, unsigned int *iChannelNumber);
+    bool PersistChannel(const CFileItemPtr& pItem, const std::shared_ptr<CPVRChannelGroup>& group, unsigned int *iChannelNumber);
     void SetItemsUnchanged(void);
 
     bool m_bIsRadio = false;
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.cpp b/xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.cpp
index 23e5f567f1a4..b03e41ffb5be 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.cpp
@@ -96,7 +96,7 @@ void CGUIDialogPVRChannelsOSD::OnDeinitWindow(int nextWindowID)
   CGUIDialogPVRItemsViewBase::OnDeinitWindow(nextWindowID);
 }
 
-bool CGUIDialogPVRChannelsOSD::OnAction(const CAction &action)
+bool CGUIDialogPVRChannelsOSD::OnAction(const CAction& action)
 {
   switch (action.GetID())
   {
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.h b/xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.h
index e056d657d023..8ec2280a7c8b 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.h
@@ -28,7 +28,7 @@ namespace PVR
     CGUIDialogPVRChannelsOSD(void);
     ~CGUIDialogPVRChannelsOSD(void) override;
     bool OnMessage(CGUIMessage& message) override;
-    bool OnAction(const CAction &action) override;
+    bool OnAction(const CAction& action) override;
 
     /*!
      * @brief CEventStream callback for PVR events.
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.cpp b/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.cpp
index f4c17f3d5b60..9ed84ccd3161 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.cpp
@@ -77,7 +77,7 @@ bool CGUIDialogPVRGroupManager::PersistChanges(void)
   return CServiceBroker::GetPVRManager().ChannelGroups()->Get(m_bIsRadio)->PersistAll();
 }
 
-bool CGUIDialogPVRGroupManager::ActionButtonOk(CGUIMessage &message)
+bool CGUIDialogPVRGroupManager::ActionButtonOk(CGUIMessage& message)
 {
   bool bReturn = false;
   unsigned int iControl = message.GetSenderId();
@@ -92,7 +92,7 @@ bool CGUIDialogPVRGroupManager::ActionButtonOk(CGUIMessage &message)
   return bReturn;
 }
 
-bool CGUIDialogPVRGroupManager::ActionButtonNewGroup(CGUIMessage &message)
+bool CGUIDialogPVRGroupManager::ActionButtonNewGroup(CGUIMessage& message)
 {
   bool bReturn = false;
   unsigned int iControl = message.GetSenderId();
@@ -121,7 +121,7 @@ bool CGUIDialogPVRGroupManager::ActionButtonNewGroup(CGUIMessage &message)
   return bReturn;
 }
 
-bool CGUIDialogPVRGroupManager::ActionButtonDeleteGroup(CGUIMessage &message)
+bool CGUIDialogPVRGroupManager::ActionButtonDeleteGroup(CGUIMessage& message)
 {
   bool bReturn = false;
   unsigned int iControl = message.GetSenderId();
@@ -154,7 +154,7 @@ bool CGUIDialogPVRGroupManager::ActionButtonDeleteGroup(CGUIMessage &message)
   return bReturn;
 }
 
-bool CGUIDialogPVRGroupManager::ActionButtonRenameGroup(CGUIMessage &message)
+bool CGUIDialogPVRGroupManager::ActionButtonRenameGroup(CGUIMessage& message)
 {
   bool bReturn = false;
   unsigned int iControl = message.GetSenderId();
@@ -181,7 +181,7 @@ bool CGUIDialogPVRGroupManager::ActionButtonRenameGroup(CGUIMessage &message)
   return bReturn;
 }
 
-bool CGUIDialogPVRGroupManager::ActionButtonUngroupedChannels(CGUIMessage &message)
+bool CGUIDialogPVRGroupManager::ActionButtonUngroupedChannels(CGUIMessage& message)
 {
   bool bReturn = false;
   unsigned int iControl = message.GetSenderId();
@@ -213,7 +213,7 @@ bool CGUIDialogPVRGroupManager::ActionButtonUngroupedChannels(CGUIMessage &messa
   return bReturn;
 }
 
-bool CGUIDialogPVRGroupManager::ActionButtonGroupMembers(CGUIMessage &message)
+bool CGUIDialogPVRGroupManager::ActionButtonGroupMembers(CGUIMessage& message)
 {
   bool bReturn = false;
   unsigned int iControl = message.GetSenderId();
@@ -239,7 +239,7 @@ bool CGUIDialogPVRGroupManager::ActionButtonGroupMembers(CGUIMessage &message)
   return bReturn;
 }
 
-bool CGUIDialogPVRGroupManager::ActionButtonChannelGroups(CGUIMessage &message)
+bool CGUIDialogPVRGroupManager::ActionButtonChannelGroups(CGUIMessage& message)
 {
   bool bReturn = false;
   unsigned int iControl = message.GetSenderId();
@@ -259,7 +259,7 @@ bool CGUIDialogPVRGroupManager::ActionButtonChannelGroups(CGUIMessage &message)
   return bReturn;
 }
 
-bool CGUIDialogPVRGroupManager::ActionButtonHideGroup(CGUIMessage &message)
+bool CGUIDialogPVRGroupManager::ActionButtonHideGroup(CGUIMessage& message)
 {
   bool bReturn = false;
 
@@ -278,7 +278,7 @@ bool CGUIDialogPVRGroupManager::ActionButtonHideGroup(CGUIMessage &message)
   return bReturn;
 }
 
-bool CGUIDialogPVRGroupManager::ActionButtonToggleRadioTV(CGUIMessage &message)
+bool CGUIDialogPVRGroupManager::ActionButtonToggleRadioTV(CGUIMessage& message)
 {
   bool bReturn = false;
 
@@ -307,7 +307,7 @@ bool CGUIDialogPVRGroupManager::ActionButtonRecreateThumbnail(CGUIMessage& messa
   return bReturn;
 }
 
-bool CGUIDialogPVRGroupManager::OnMessageClick(CGUIMessage &message)
+bool CGUIDialogPVRGroupManager::OnMessageClick(CGUIMessage& message)
 {
   return ActionButtonOk(message) ||
       ActionButtonNewGroup(message) ||
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.h b/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.h
index 6f134233caa8..604b290bad05 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.h
@@ -42,17 +42,17 @@ namespace PVR
     void ClearSelectedGroupsThumbnail();
     void Update();
     bool PersistChanges(void);
-    bool ActionButtonOk(CGUIMessage &message);
-    bool ActionButtonNewGroup(CGUIMessage &message);
-    bool ActionButtonDeleteGroup(CGUIMessage &message);
-    bool ActionButtonRenameGroup(CGUIMessage &message);
-    bool ActionButtonUngroupedChannels(CGUIMessage &message);
-    bool ActionButtonGroupMembers(CGUIMessage &message);
-    bool ActionButtonChannelGroups(CGUIMessage &message);
-    bool ActionButtonHideGroup(CGUIMessage &message);
-    bool ActionButtonToggleRadioTV(CGUIMessage &message);
+    bool ActionButtonOk(CGUIMessage& message);
+    bool ActionButtonNewGroup(CGUIMessage& message);
+    bool ActionButtonDeleteGroup(CGUIMessage& message);
+    bool ActionButtonRenameGroup(CGUIMessage& message);
+    bool ActionButtonUngroupedChannels(CGUIMessage& message);
+    bool ActionButtonGroupMembers(CGUIMessage& message);
+    bool ActionButtonChannelGroups(CGUIMessage& message);
+    bool ActionButtonHideGroup(CGUIMessage& message);
+    bool ActionButtonToggleRadioTV(CGUIMessage& message);
     bool ActionButtonRecreateThumbnail(CGUIMessage& message);
-    bool OnMessageClick(CGUIMessage &message);
+    bool OnMessageClick(CGUIMessage& message);
     bool OnActionMove(const CAction& action);
 
     std::shared_ptr<CPVRChannelGroup> m_selectedGroup;
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.cpp b/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.cpp
index 56793e5d7e68..15cfaf75362f 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.cpp
@@ -39,7 +39,7 @@ CGUIDialogPVRGuideInfo::CGUIDialogPVRGuideInfo(void)
 
 CGUIDialogPVRGuideInfo::~CGUIDialogPVRGuideInfo(void) = default;
 
-bool CGUIDialogPVRGuideInfo::OnClickButtonOK(CGUIMessage &message)
+bool CGUIDialogPVRGuideInfo::OnClickButtonOK(CGUIMessage& message)
 {
   bool bReturn = false;
 
@@ -52,7 +52,7 @@ bool CGUIDialogPVRGuideInfo::OnClickButtonOK(CGUIMessage &message)
   return bReturn;
 }
 
-bool CGUIDialogPVRGuideInfo::OnClickButtonRecord(CGUIMessage &message)
+bool CGUIDialogPVRGuideInfo::OnClickButtonRecord(CGUIMessage& message)
 {
   bool bReturn = false;
 
@@ -82,7 +82,7 @@ bool CGUIDialogPVRGuideInfo::OnClickButtonRecord(CGUIMessage &message)
   return bReturn;
 }
 
-bool CGUIDialogPVRGuideInfo::OnClickButtonAddTimer(CGUIMessage &message)
+bool CGUIDialogPVRGuideInfo::OnClickButtonAddTimer(CGUIMessage& message)
 {
   bool bReturn = false;
 
@@ -120,7 +120,7 @@ bool CGUIDialogPVRGuideInfo::OnClickButtonSetReminder(CGUIMessage& message)
   return bReturn;
 }
 
-bool CGUIDialogPVRGuideInfo::OnClickButtonPlay(CGUIMessage &message)
+bool CGUIDialogPVRGuideInfo::OnClickButtonPlay(CGUIMessage& message)
 {
   bool bReturn = false;
 
@@ -144,7 +144,7 @@ bool CGUIDialogPVRGuideInfo::OnClickButtonPlay(CGUIMessage &message)
   return bReturn;
 }
 
-bool CGUIDialogPVRGuideInfo::OnClickButtonFind(CGUIMessage &message)
+bool CGUIDialogPVRGuideInfo::OnClickButtonFind(CGUIMessage& message)
 {
   bool bReturn = false;
 
@@ -179,7 +179,7 @@ bool CGUIDialogPVRGuideInfo::OnInfo(int actionID)
   return true;
 }
 
-void CGUIDialogPVRGuideInfo::SetProgInfo(const std::shared_ptr<CPVREpgInfoTag> &tag)
+void CGUIDialogPVRGuideInfo::SetProgInfo(const std::shared_ptr<CPVREpgInfoTag>& tag)
 {
   m_progItem = tag;
 }
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.h b/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.h
index 8bf30d8a5669..3a03cac01c6a 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.h
@@ -28,7 +28,7 @@ namespace PVR
     bool HasListItems() const override { return true; }
     CFileItemPtr GetCurrentListItem(int offset = 0) override;
 
-    void SetProgInfo(const std::shared_ptr<CPVREpgInfoTag> &tag);
+    void SetProgInfo(const std::shared_ptr<CPVREpgInfoTag>& tag);
 
     static void ShowFor(const CFileItemPtr& item);
 
@@ -36,11 +36,11 @@ namespace PVR
     void OnInitWindow() override;
 
   private:
-    bool OnClickButtonOK(CGUIMessage &message);
-    bool OnClickButtonRecord(CGUIMessage &message);
-    bool OnClickButtonPlay(CGUIMessage &message);
-    bool OnClickButtonFind(CGUIMessage &message);
-    bool OnClickButtonAddTimer(CGUIMessage &message);
+    bool OnClickButtonOK(CGUIMessage& message);
+    bool OnClickButtonRecord(CGUIMessage& message);
+    bool OnClickButtonPlay(CGUIMessage& message);
+    bool OnClickButtonFind(CGUIMessage& message);
+    bool OnClickButtonAddTimer(CGUIMessage& message);
     bool OnClickButtonSetReminder(CGUIMessage& message);
 
     std::shared_ptr<CPVREpgInfoTag> m_progItem;
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.cpp b/xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.cpp
index ff9ff844bd86..7a3f140165c9 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.cpp
@@ -202,7 +202,7 @@ void CGUIDialogPVRGuideSearch::OnWindowLoaded()
   return CGUIDialog::OnWindowLoaded();
 }
 
-CDateTime CGUIDialogPVRGuideSearch::ReadDateTime(const std::string &strDate, const std::string &strTime) const
+CDateTime CGUIDialogPVRGuideSearch::ReadDateTime(const std::string& strDate, const std::string& strTime) const
 {
   CDateTime dateTime;
   int iHours, iMinutes;
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.h b/xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.h
index 2325d63a9ecc..3ad54609c68f 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.h
@@ -40,7 +40,7 @@ namespace PVR
     void UpdateGroupsSpin(void);
     void UpdateGenreSpin(void);
     void UpdateDurationSpin(void);
-    CDateTime ReadDateTime(const std::string &strDate, const std::string &strTime) const;
+    CDateTime ReadDateTime(const std::string& strDate, const std::string& strTime) const;
     void Update();
 
     bool IsRadioSelected(int controlID);
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRItemsViewBase.cpp b/xbmc/pvr/dialogs/GUIDialogPVRItemsViewBase.cpp
index 7bd96f7a31bb..790e5e4cc99e 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRItemsViewBase.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRItemsViewBase.cpp
@@ -24,7 +24,7 @@
 
 using namespace PVR;
 
-CGUIDialogPVRItemsViewBase::CGUIDialogPVRItemsViewBase(int id, const std::string &xmlFile)
+CGUIDialogPVRItemsViewBase::CGUIDialogPVRItemsViewBase(int id, const std::string& xmlFile)
 : CGUIDialog(id, xmlFile),
   m_vecItems(new CFileItemList)
 {
@@ -55,7 +55,7 @@ void CGUIDialogPVRItemsViewBase::OnDeinitWindow(int nextWindowID)
   Clear();
 }
 
-bool CGUIDialogPVRItemsViewBase::OnAction(const CAction &action)
+bool CGUIDialogPVRItemsViewBase::OnAction(const CAction& action)
 {
   if (m_viewControl.HasControl(GetFocusedControlID()))
   {
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRItemsViewBase.h b/xbmc/pvr/dialogs/GUIDialogPVRItemsViewBase.h
index 25ef00daea9e..545de588dc70 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRItemsViewBase.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRItemsViewBase.h
@@ -22,12 +22,12 @@ namespace PVR
   {
   public:
     CGUIDialogPVRItemsViewBase() = delete;
-    CGUIDialogPVRItemsViewBase(int id, const std::string &xmlFile);
+    CGUIDialogPVRItemsViewBase(int id, const std::string& xmlFile);
     ~CGUIDialogPVRItemsViewBase() override = default;
 
     void OnWindowLoaded() override;
     void OnWindowUnload() override;
-    bool OnAction(const CAction &action) override;
+    bool OnAction(const CAction& action) override;
 
   protected:
     void Init();
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.cpp b/xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.cpp
index e6aa04970df4..a8406a0eb9a9 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.cpp
@@ -39,7 +39,7 @@ bool CGUIDialogPVRRecordingInfo::OnMessage(CGUIMessage& message)
   return CGUIDialog::OnMessage(message);
 }
 
-bool CGUIDialogPVRRecordingInfo::OnClickButtonOK(CGUIMessage &message)
+bool CGUIDialogPVRRecordingInfo::OnClickButtonOK(CGUIMessage& message)
 {
   bool bReturn = false;
 
@@ -52,7 +52,7 @@ bool CGUIDialogPVRRecordingInfo::OnClickButtonOK(CGUIMessage &message)
   return bReturn;
 }
 
-bool CGUIDialogPVRRecordingInfo::OnClickButtonPlay(CGUIMessage &message)
+bool CGUIDialogPVRRecordingInfo::OnClickButtonPlay(CGUIMessage& message)
 {
   bool bReturn = false;
 
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.h b/xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.h
index 03cb60be10e6..c598ce477b43 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.h
@@ -31,8 +31,8 @@ namespace PVR
 
   private:
     bool OnClickButtonFind(CGUIMessage& message);
-    bool OnClickButtonOK(CGUIMessage &message);
-    bool OnClickButtonPlay(CGUIMessage &message);
+    bool OnClickButtonOK(CGUIMessage& message);
+    bool OnClickButtonPlay(CGUIMessage& message);
 
     CFileItemPtr m_recordItem;
   };
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRRecordingSettings.cpp b/xbmc/pvr/dialogs/GUIDialogPVRRecordingSettings.cpp
index c6c5e787ff21..47700ec56e26 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRRecordingSettings.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRRecordingSettings.cpp
@@ -39,7 +39,7 @@ CGUIDialogPVRRecordingSettings::CGUIDialogPVRRecordingSettings() :
   m_loadType = LOAD_EVERY_TIME;
 }
 
-void CGUIDialogPVRRecordingSettings::SetRecording(const std::shared_ptr<CPVRRecording> &recording)
+void CGUIDialogPVRRecordingSettings::SetRecording(const std::shared_ptr<CPVRRecording>& recording)
 {
   if (!recording)
   {
@@ -123,7 +123,7 @@ bool CGUIDialogPVRRecordingSettings::OnSettingChanging(std::shared_ptr<const CSe
     return false;
   }
 
-  const std::string &settingId = setting->GetId();
+  const std::string& settingId = setting->GetId();
 
   if (settingId == SETTING_RECORDING_LIFETIME)
   {
@@ -150,7 +150,7 @@ void CGUIDialogPVRRecordingSettings::OnSettingChanged(std::shared_ptr<const CSet
 
   CGUIDialogSettingsManualBase::OnSettingChanged(setting);
 
-  const std::string &settingId = setting->GetId();
+  const std::string& settingId = setting->GetId();
 
   if (settingId == SETTING_RECORDING_NAME)
   {
@@ -179,7 +179,7 @@ void CGUIDialogPVRRecordingSettings::Save()
 }
 
 void CGUIDialogPVRRecordingSettings::LifetimesFiller(
-  SettingConstPtr setting, std::vector<IntegerSettingOption> &list, int &current, void *data)
+  SettingConstPtr setting, std::vector<IntegerSettingOption>& list, int& current, void *data)
 {
   CGUIDialogPVRRecordingSettings *pThis = static_cast<CGUIDialogPVRRecordingSettings*>(data);
   if (pThis)
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRRecordingSettings.h b/xbmc/pvr/dialogs/GUIDialogPVRRecordingSettings.h
index e7ff259c6d2b..a44bc5f9bdca 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRRecordingSettings.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRRecordingSettings.h
@@ -28,7 +28,7 @@ namespace PVR
   public:
     CGUIDialogPVRRecordingSettings();
 
-    void SetRecording(const std::shared_ptr<CPVRRecording> &recording);
+    void SetRecording(const std::shared_ptr<CPVRRecording>& recording);
     static bool CanEditRecording(const CFileItem& item);
 
   protected:
@@ -46,8 +46,8 @@ namespace PVR
 
   private:
     static void LifetimesFiller(std::shared_ptr<const CSetting> setting,
-                                std::vector<IntegerSettingOption> &list,
-                                int &current, void *data);
+                                std::vector<IntegerSettingOption>& list,
+                                int& current, void *data);
 
     std::shared_ptr<CPVRRecording> m_recording;
     std::string m_strTitle;
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.cpp b/xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.cpp
index c2bb2e8b5ea1..9c0a035141a1 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.cpp
@@ -84,7 +84,7 @@ bool CGUIDialogPVRTimerSettings::CanBeActivated() const
   return true;
 }
 
-void CGUIDialogPVRTimerSettings::SetTimer(const std::shared_ptr<CPVRTimerInfoTag> &timer)
+void CGUIDialogPVRTimerSettings::SetTimer(const std::shared_ptr<CPVRTimerInfoTag>& timer)
 {
   if (!timer)
   {
@@ -178,7 +178,7 @@ void CGUIDialogPVRTimerSettings::SetTimer(const std::shared_ptr<CPVRTimerInfoTag
   {
     // Find matching channel entry
     bool bChannelSet(false);
-    for (const auto &channel : m_channelEntries)
+    for (const auto& channel : m_channelEntries)
     {
       if ((channel.second.channelUid == m_timerInfoTag->m_iClientChannelUid) &&
           (channel.second.clientId == m_timerInfoTag->m_iClientId))
@@ -362,7 +362,7 @@ int CGUIDialogPVRTimerSettings::GetWeekdaysFromSetting(SettingConstPtr setting)
   }
   int weekdays = 0;
   std::vector<CVariant> list = CSettingUtils::GetList(settingList);
-  for (const auto &value : list)
+  for (const auto& value : list)
   {
     if (!value.isInteger())
     {
@@ -385,7 +385,7 @@ void CGUIDialogPVRTimerSettings::OnSettingChanged(std::shared_ptr<const CSetting
 
   CGUIDialogSettingsManualBase::OnSettingChanged(setting);
 
-  const std::string &settingId = setting->GetId();
+  const std::string& settingId = setting->GetId();
 
   if (settingId == SETTING_TMR_TYPE)
   {
@@ -500,7 +500,7 @@ void CGUIDialogPVRTimerSettings::OnSettingAction(std::shared_ptr<const CSetting>
 
   CGUIDialogSettingsManualBase::OnSettingAction(setting);
 
-  const std::string &settingId = setting->GetId();
+  const std::string& settingId = setting->GetId();
   if (settingId == SETTING_TMR_BEGIN)
   {
     SYSTEMTIME timerStartTime;
@@ -657,8 +657,8 @@ void CGUIDialogPVRTimerSettings::SetButtonLabels()
 }
 
 void CGUIDialogPVRTimerSettings::AddCondition(
-  std::shared_ptr<CSetting> setting, const std::string &identifier, SettingConditionCheck condition,
-  SettingDependencyType depType, const std::string &settingId)
+  std::shared_ptr<CSetting> setting, const std::string& identifier, SettingConditionCheck condition,
+  SettingDependencyType depType, const std::string& settingId)
 {
   GetSettingsManager()->AddDynamicCondition(identifier, condition, this);
   CSettingDependency dep(depType, GetSettingsManager());
@@ -670,7 +670,7 @@ void CGUIDialogPVRTimerSettings::AddCondition(
   setting->SetDependencies(deps);
 }
 
-int CGUIDialogPVRTimerSettings::GetDateAsIndex(const CDateTime &datetime)
+int CGUIDialogPVRTimerSettings::GetDateAsIndex(const CDateTime& datetime)
 {
   const CDateTime date(datetime.GetYear(), datetime.GetMonth(), datetime.GetDay(), 0, 0, 0);
   time_t t(0);
@@ -678,7 +678,7 @@ int CGUIDialogPVRTimerSettings::GetDateAsIndex(const CDateTime &datetime)
   return static_cast<int>(t);
 }
 
-void CGUIDialogPVRTimerSettings::SetDateFromIndex(CDateTime &datetime, int date)
+void CGUIDialogPVRTimerSettings::SetDateFromIndex(CDateTime& datetime, int date)
 {
   const CDateTime newDate(static_cast<time_t>(date));
   datetime.SetDateTime(
@@ -686,7 +686,7 @@ void CGUIDialogPVRTimerSettings::SetDateFromIndex(CDateTime &datetime, int date)
     datetime.GetHour(), datetime.GetMinute(), datetime.GetSecond());
 }
 
-void CGUIDialogPVRTimerSettings::SetTimeFromSystemTime(CDateTime &datetime, const SYSTEMTIME &time)
+void CGUIDialogPVRTimerSettings::SetTimeFromSystemTime(CDateTime& datetime, const SYSTEMTIME& time)
 {
   const CDateTime newTime(time);
   datetime.SetDateTime(
@@ -708,7 +708,7 @@ void CGUIDialogPVRTimerSettings::InitializeTypesList()
   bool bFoundThisType(false);
   int idx(0);
   const std::vector<std::shared_ptr<CPVRTimerType>> types(CPVRTimerType::GetAllTypes());
-  for (const auto &type : types)
+  for (const auto& type : types)
   {
     // Type definition prohibits created of new instances.
     // But the dialog can act as a viewer for these types.
@@ -794,7 +794,7 @@ void CGUIDialogPVRTimerSettings::InitializeChannelsList()
 }
 
 void CGUIDialogPVRTimerSettings::TypesFiller(
-  SettingConstPtr setting, std::vector<IntegerSettingOption> &list, int &current, void *data)
+  SettingConstPtr setting, std::vector<IntegerSettingOption>& list, int& current, void *data)
 {
   CGUIDialogPVRTimerSettings *pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
   if (pThis)
@@ -806,7 +806,7 @@ void CGUIDialogPVRTimerSettings::TypesFiller(
     static const std::vector<std::pair<std::string, CVariant>> recordingTimerProps{std::make_pair("PVR.IsRecordingTimer", CVariant{true})};
 
     bool foundCurrent(false);
-    for (const auto &typeEntry : pThis->m_typeEntries)
+    for (const auto& typeEntry : pThis->m_typeEntries)
     {
       list.emplace_back(typeEntry.second->GetDescription(), typeEntry.first,
                         typeEntry.second->IsReminder() ? reminderTimerProps : recordingTimerProps);
@@ -823,7 +823,7 @@ void CGUIDialogPVRTimerSettings::TypesFiller(
 }
 
 void CGUIDialogPVRTimerSettings::ChannelsFiller(
-  SettingConstPtr setting, std::vector<IntegerSettingOption> &list, int &current, void *data)
+  SettingConstPtr setting, std::vector<IntegerSettingOption>& list, int& current, void *data)
 {
   CGUIDialogPVRTimerSettings *pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
   if (pThis)
@@ -832,7 +832,7 @@ void CGUIDialogPVRTimerSettings::ChannelsFiller(
     current = 0;
 
     bool foundCurrent(false);
-    for (const auto &channelEntry : pThis->m_channelEntries)
+    for (const auto& channelEntry : pThis->m_channelEntries)
     {
       // Only include channels for the currently selected timer type or all channels if type is client-independent.
       if (pThis->m_timerType->GetClientId() == -1 || // client-independent
@@ -858,7 +858,7 @@ void CGUIDialogPVRTimerSettings::ChannelsFiller(
 }
 
 void CGUIDialogPVRTimerSettings::DaysFiller(
-  SettingConstPtr setting, std::vector<IntegerSettingOption> &list, int &current, void *data)
+  SettingConstPtr setting, std::vector<IntegerSettingOption>& list, int& current, void *data)
 {
   CGUIDialogPVRTimerSettings *pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
   if (pThis)
@@ -902,7 +902,7 @@ void CGUIDialogPVRTimerSettings::DaysFiller(
 }
 
 void CGUIDialogPVRTimerSettings::DupEpisodesFiller(
-  SettingConstPtr setting, std::vector<IntegerSettingOption> &list, int &current, void *data)
+  SettingConstPtr setting, std::vector<IntegerSettingOption>& list, int& current, void *data)
 {
   CGUIDialogPVRTimerSettings *pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
   if (pThis)
@@ -921,7 +921,7 @@ void CGUIDialogPVRTimerSettings::DupEpisodesFiller(
 }
 
 void CGUIDialogPVRTimerSettings::WeekdaysFiller(
-  SettingConstPtr setting, std::vector<IntegerSettingOption> &list, int &current, void *data)
+  SettingConstPtr setting, std::vector<IntegerSettingOption>& list, int& current, void *data)
 {
   CGUIDialogPVRTimerSettings *pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
   if (pThis)
@@ -942,7 +942,7 @@ void CGUIDialogPVRTimerSettings::WeekdaysFiller(
 }
 
 void CGUIDialogPVRTimerSettings::PrioritiesFiller(
-  SettingConstPtr setting, std::vector<IntegerSettingOption> &list, int &current, void *data)
+  SettingConstPtr setting, std::vector<IntegerSettingOption>& list, int& current, void *data)
 {
   CGUIDialogPVRTimerSettings *pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
   if (pThis)
@@ -976,7 +976,7 @@ void CGUIDialogPVRTimerSettings::PrioritiesFiller(
 }
 
 void CGUIDialogPVRTimerSettings::LifetimesFiller(
-  SettingConstPtr setting, std::vector<IntegerSettingOption> &list, int &current, void *data)
+  SettingConstPtr setting, std::vector<IntegerSettingOption>& list, int& current, void *data)
 {
   CGUIDialogPVRTimerSettings *pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
   if (pThis)
@@ -1010,7 +1010,7 @@ void CGUIDialogPVRTimerSettings::LifetimesFiller(
 }
 
 void CGUIDialogPVRTimerSettings::MaxRecordingsFiller(
-  SettingConstPtr setting, std::vector<IntegerSettingOption> &list, int &current, void *data)
+  SettingConstPtr setting, std::vector<IntegerSettingOption>& list, int& current, void *data)
 {
   CGUIDialogPVRTimerSettings *pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
   if (pThis)
@@ -1044,7 +1044,7 @@ void CGUIDialogPVRTimerSettings::MaxRecordingsFiller(
 }
 
 void CGUIDialogPVRTimerSettings::RecordingGroupFiller(
-  SettingConstPtr setting, std::vector<IntegerSettingOption> &list, int &current, void *data)
+  SettingConstPtr setting, std::vector<IntegerSettingOption>& list, int& current, void *data)
 {
   CGUIDialogPVRTimerSettings *pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
   if (pThis)
@@ -1063,7 +1063,7 @@ void CGUIDialogPVRTimerSettings::RecordingGroupFiller(
 }
 
 void CGUIDialogPVRTimerSettings::MarginTimeFiller(
-  SettingConstPtr setting, std::vector<IntegerSettingOption> &list, int &current, void *data)
+  SettingConstPtr setting, std::vector<IntegerSettingOption>& list, int& current, void *data)
 {
   CGUIDialogPVRTimerSettings *pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
   if (pThis)
@@ -1109,7 +1109,7 @@ std::string CGUIDialogPVRTimerSettings::WeekdaysValueFormatter(SettingConstPtr s
   return CPVRTimerInfoTag::GetWeekdaysString(GetWeekdaysFromSetting(setting), true, true);
 }
 
-void CGUIDialogPVRTimerSettings::AddTypeDependentEnableCondition(std::shared_ptr<CSetting> setting, const std::string &identifier)
+void CGUIDialogPVRTimerSettings::AddTypeDependentEnableCondition(std::shared_ptr<CSetting> setting, const std::string& identifier)
 {
   // Enable setting depending on read-only attribute of the selected timer type
   std::string id(identifier);
@@ -1117,7 +1117,7 @@ void CGUIDialogPVRTimerSettings::AddTypeDependentEnableCondition(std::shared_ptr
   AddCondition(setting, id, TypeReadOnlyCondition, SettingDependencyType::Enable, SETTING_TMR_TYPE);
 }
 
-bool CGUIDialogPVRTimerSettings::TypeReadOnlyCondition(const std::string &condition, const std::string &value, SettingConstPtr setting, void *data)
+bool CGUIDialogPVRTimerSettings::TypeReadOnlyCondition(const std::string& condition, const std::string& value, SettingConstPtr setting, void *data)
 {
   if (setting == NULL)
     return false;
@@ -1172,7 +1172,7 @@ bool CGUIDialogPVRTimerSettings::TypeReadOnlyCondition(const std::string &condit
   return false;
 }
 
-void CGUIDialogPVRTimerSettings::AddTypeDependentVisibilityCondition(std::shared_ptr<CSetting> setting, const std::string &identifier)
+void CGUIDialogPVRTimerSettings::AddTypeDependentVisibilityCondition(std::shared_ptr<CSetting> setting, const std::string& identifier)
 {
   // Show or hide setting depending on attributes of the selected timer type
   std::string id(identifier);
@@ -1180,7 +1180,7 @@ void CGUIDialogPVRTimerSettings::AddTypeDependentVisibilityCondition(std::shared
   AddCondition(setting, id, TypeSupportsCondition, SettingDependencyType::Visible, SETTING_TMR_TYPE);
 }
 
-bool CGUIDialogPVRTimerSettings::TypeSupportsCondition(const std::string &condition, const std::string &value, SettingConstPtr setting, void *data)
+bool CGUIDialogPVRTimerSettings::TypeSupportsCondition(const std::string& condition, const std::string& value, SettingConstPtr setting, void *data)
 {
   if (setting == NULL)
     return false;
@@ -1252,7 +1252,7 @@ bool CGUIDialogPVRTimerSettings::TypeSupportsCondition(const std::string &condit
   return false;
 }
 
-void CGUIDialogPVRTimerSettings::AddStartAnytimeDependentVisibilityCondition(std::shared_ptr<CSetting> setting, const std::string &identifier)
+void CGUIDialogPVRTimerSettings::AddStartAnytimeDependentVisibilityCondition(std::shared_ptr<CSetting> setting, const std::string& identifier)
 {
   // Show or hide setting depending on value of setting "any time"
   std::string id(identifier);
@@ -1260,7 +1260,7 @@ void CGUIDialogPVRTimerSettings::AddStartAnytimeDependentVisibilityCondition(std
   AddCondition(setting, id, StartAnytimeSetCondition, SettingDependencyType::Visible, SETTING_TMR_START_ANYTIME);
 }
 
-bool CGUIDialogPVRTimerSettings::StartAnytimeSetCondition(const std::string &condition, const std::string &value, SettingConstPtr setting, void *data)
+bool CGUIDialogPVRTimerSettings::StartAnytimeSetCondition(const std::string& condition, const std::string& value, SettingConstPtr setting, void *data)
 {
   if (setting == NULL)
     return false;
@@ -1295,7 +1295,7 @@ bool CGUIDialogPVRTimerSettings::StartAnytimeSetCondition(const std::string &con
   return false;
 }
 
-void CGUIDialogPVRTimerSettings::AddEndAnytimeDependentVisibilityCondition(std::shared_ptr<CSetting> setting, const std::string &identifier)
+void CGUIDialogPVRTimerSettings::AddEndAnytimeDependentVisibilityCondition(std::shared_ptr<CSetting> setting, const std::string& identifier)
 {
   // Show or hide setting depending on value of setting "any time"
   std::string id(identifier);
@@ -1303,7 +1303,7 @@ void CGUIDialogPVRTimerSettings::AddEndAnytimeDependentVisibilityCondition(std::
   AddCondition(setting, id, EndAnytimeSetCondition, SettingDependencyType::Visible, SETTING_TMR_END_ANYTIME);
 }
 
-bool CGUIDialogPVRTimerSettings::EndAnytimeSetCondition(const std::string &condition, const std::string &value, SettingConstPtr setting, void *data)
+bool CGUIDialogPVRTimerSettings::EndAnytimeSetCondition(const std::string& condition, const std::string& value, SettingConstPtr setting, void *data)
 {
   if (setting == NULL)
     return false;
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.h b/xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.h
index 339bf2733e32..34fe98cc9de0 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.h
@@ -36,7 +36,7 @@ namespace PVR
 
     bool CanBeActivated() const override;
 
-    void SetTimer(const std::shared_ptr<CPVRTimerInfoTag> &timer);
+    void SetTimer(const std::shared_ptr<CPVRTimerInfoTag>& timer);
 
   protected:
     // implementation of ISettingCallback
@@ -56,53 +56,53 @@ namespace PVR
     void InitializeChannelsList();
     void SetButtonLabels();
 
-    static int  GetDateAsIndex(const CDateTime &datetime);
-    static void SetDateFromIndex(CDateTime &datetime, int date);
-    static void SetTimeFromSystemTime(CDateTime &datetime, const SYSTEMTIME &time);
+    static int  GetDateAsIndex(const CDateTime& datetime);
+    static void SetDateFromIndex(CDateTime& datetime, int date);
+    static void SetTimeFromSystemTime(CDateTime& datetime, const SYSTEMTIME& time);
 
     static int GetWeekdaysFromSetting(std::shared_ptr<const CSetting> setting);
 
     static void TypesFiller(
-      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption> &list, int &current, void *data);
+      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption>& list, int& current, void *data);
     static void ChannelsFiller(
-      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption> &list, int &current, void *data);
+      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption>& list, int& current, void *data);
     static void DaysFiller(
-      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption> &list, int &current, void *data);
+      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption>& list, int& current, void *data);
     static void DupEpisodesFiller(
-      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption> &list, int &current, void *data);
+      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption>& list, int& current, void *data);
     static void WeekdaysFiller(
-      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption> &list, int &current, void *data);
+      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption>& list, int& current, void *data);
     static void PrioritiesFiller(
-      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption> &list, int &current, void *data);
+      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption>& list, int& current, void *data);
     static void LifetimesFiller(
-      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption> &list, int &current, void *data);
+      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption>& list, int& current, void *data);
     static void MaxRecordingsFiller(
-      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption> &list, int &current, void *data);
+      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption>& list, int& current, void *data);
     static void RecordingGroupFiller(
-      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption> &list, int &current, void *data);
+      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption>& list, int& current, void *data);
     static void MarginTimeFiller(
-      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption> &list, int &current, void *data);
+      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption>& list, int& current, void *data);
 
     static std::string WeekdaysValueFormatter(std::shared_ptr<const CSetting> setting);
 
     void AddCondition(
-      std::shared_ptr<CSetting> setting, const std::string &identifier, SettingConditionCheck condition,
-      SettingDependencyType depType, const std::string &settingId);
+      std::shared_ptr<CSetting> setting, const std::string& identifier, SettingConditionCheck condition,
+      SettingDependencyType depType, const std::string& settingId);
 
-    void AddTypeDependentEnableCondition(std::shared_ptr<CSetting> setting, const std::string &identifier);
+    void AddTypeDependentEnableCondition(std::shared_ptr<CSetting> setting, const std::string& identifier);
     static bool TypeReadOnlyCondition(
-      const std::string &condition, const std::string &value, std::shared_ptr<const CSetting> setting, void *data);
+      const std::string& condition, const std::string& value, std::shared_ptr<const CSetting> setting, void *data);
 
-    void AddTypeDependentVisibilityCondition(std::shared_ptr<CSetting> setting, const std::string &identifier);
+    void AddTypeDependentVisibilityCondition(std::shared_ptr<CSetting> setting, const std::string& identifier);
     static bool TypeSupportsCondition(
-      const std::string &condition, const std::string &value, std::shared_ptr<const CSetting> setting, void *data);
+      const std::string& condition, const std::string& value, std::shared_ptr<const CSetting> setting, void *data);
 
-    void AddStartAnytimeDependentVisibilityCondition(std::shared_ptr<CSetting> setting, const std::string &identifier);
+    void AddStartAnytimeDependentVisibilityCondition(std::shared_ptr<CSetting> setting, const std::string& identifier);
     static bool StartAnytimeSetCondition(
-      const std::string &condition, const std::string &value, std::shared_ptr<const CSetting> setting, void *data);
-    void AddEndAnytimeDependentVisibilityCondition(std::shared_ptr<CSetting> setting, const std::string &identifier);
+      const std::string& condition, const std::string& value, std::shared_ptr<const CSetting> setting, void *data);
+    void AddEndAnytimeDependentVisibilityCondition(std::shared_ptr<CSetting> setting, const std::string& identifier);
     static bool EndAnytimeSetCondition(
-      const std::string &condition, const std::string &value, std::shared_ptr<const CSetting> setting, void *data);
+      const std::string& condition, const std::string& value, std::shared_ptr<const CSetting> setting, void *data);
 
     typedef std::map<int, std::shared_ptr<CPVRTimerType>>  TypeEntriesMap;
 
diff --git a/xbmc/pvr/epg/Epg.cpp b/xbmc/pvr/epg/Epg.cpp
index 6b3d7ae0bd69..f579188d0e8e 100644
--- a/xbmc/pvr/epg/Epg.cpp
+++ b/xbmc/pvr/epg/Epg.cpp
@@ -80,7 +80,7 @@ void CPVREpg::Cleanup(int iPastDays)
   Cleanup(cleanupTime);
 }
 
-void CPVREpg::Cleanup(const CDateTime &time)
+void CPVREpg::Cleanup(const CDateTime& time)
 {
   CSingleLock lock(m_critSection);
   for (auto it = m_tags.begin(); it != m_tags.end();)
@@ -203,7 +203,7 @@ std::shared_ptr<CPVREpgInfoTag> CPVREpg::GetTagByBroadcastId(unsigned int iUniqu
   if (iUniqueBroadcastId != EPG_TAG_INVALID_UID)
   {
     CSingleLock lock(m_critSection);
-    for (const auto &infoTag : m_tags)
+    for (const auto& infoTag : m_tags)
     {
       if (infoTag.second->UniqueBroadcastID() == iUniqueBroadcastId)
         return infoTag.second;
@@ -212,7 +212,7 @@ std::shared_ptr<CPVREpgInfoTag> CPVREpg::GetTagByBroadcastId(unsigned int iUniqu
   return std::shared_ptr<CPVREpgInfoTag>();
 }
 
-std::shared_ptr<CPVREpgInfoTag> CPVREpg::GetTagBetween(const CDateTime &beginTime, const CDateTime &endTime, bool bUpdateFromClient /* = false */)
+std::shared_ptr<CPVREpgInfoTag> CPVREpg::GetTagBetween(const CDateTime& beginTime, const CDateTime& endTime, bool bUpdateFromClient /* = false */)
 {
   std::shared_ptr<CPVREpgInfoTag> tag;
 
@@ -248,7 +248,7 @@ std::shared_ptr<CPVREpgInfoTag> CPVREpg::GetTagBetween(const CDateTime &beginTim
   return tag;
 }
 
-void CPVREpg::AddEntry(const CPVREpgInfoTag &tag)
+void CPVREpg::AddEntry(const CPVREpgInfoTag& tag)
 {
   std::shared_ptr<CPVREpgInfoTag> newTag;
 
@@ -306,7 +306,7 @@ bool CPVREpg::Load(const std::shared_ptr<CPVREpgDatabase>& database)
   return bReturn;
 }
 
-bool CPVREpg::UpdateEntries(const CPVREpg &epg, bool bStoreInDb /* = true */)
+bool CPVREpg::UpdateEntries(const CPVREpg& epg, bool bStoreInDb /* = true */)
 {
   CSingleLock lock(m_critSection);
   /* copy over tags */
@@ -332,7 +332,7 @@ bool CPVREpg::UpdateEntry(const EPG_TAG *data, int iClientId)
   return UpdateEntry(tag, CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_EPG_STOREEPGINDATABASE));
 }
 
-bool CPVREpg::UpdateEntry(const std::shared_ptr<CPVREpgInfoTag> &tag, bool bUpdateDatabase)
+bool CPVREpg::UpdateEntry(const std::shared_ptr<CPVREpgInfoTag>& tag, bool bUpdateDatabase)
 {
   std::shared_ptr<CPVREpgInfoTag> infoTag;
 
@@ -361,7 +361,7 @@ bool CPVREpg::UpdateEntry(const std::shared_ptr<CPVREpgInfoTag> &tag, bool bUpda
   return true;
 }
 
-bool CPVREpg::UpdateEntry(const std::shared_ptr<CPVREpgInfoTag> &tag, EPG_EVENT_STATE newState, bool bUpdateDatabase)
+bool CPVREpg::UpdateEntry(const std::shared_ptr<CPVREpgInfoTag>& tag, EPG_EVENT_STATE newState, bool bUpdateDatabase)
 {
   bool bRet = true;
   bool bNotify = true;
diff --git a/xbmc/pvr/epg/Epg.h b/xbmc/pvr/epg/Epg.h
index 30fc3a6feeb3..26a5bfaf43e7 100644
--- a/xbmc/pvr/epg/Epg.h
+++ b/xbmc/pvr/epg/Epg.h
@@ -82,7 +82,7 @@ namespace PVR
      * @brief Get the name of the scraper to use for this table.
      * @return The name of the scraper to use for this table.
      */
-    const std::string &ScraperName(void) const;
+    const std::string& ScraperName(void) const;
 
     /*!
      * @brief Returns if there is a manual update pending for this EPG
@@ -99,7 +99,7 @@ namespace PVR
      * @brief Get the name of this table.
      * @return The name of this table.
      */
-    const std::string &Name(void) const;
+    const std::string& Name(void) const;
 
     /*!
      * @brief Get the database ID of this table.
@@ -117,7 +117,7 @@ namespace PVR
      * @brief Remove all entries from this EPG that finished before the given time.
      * @param time Delete entries with an end time before this time in UTC.
      */
-    void Cleanup(const CDateTime &time);
+    void Cleanup(const CDateTime& time);
 
     /*!
      * @brief Remove all entries from this EPG.
@@ -149,7 +149,7 @@ namespace PVR
      * @param bUpdateFromClient if true, try to fetch the event from the client if not found locally.
      * @return The found tag or NULL if it wasn't found.
      */
-    std::shared_ptr<CPVREpgInfoTag> GetTagBetween(const CDateTime &beginTime, const CDateTime &endTime, bool bUpdateFromClient = false);
+    std::shared_ptr<CPVREpgInfoTag> GetTagBetween(const CDateTime& beginTime, const CDateTime& endTime, bool bUpdateFromClient = false);
 
     /*!
      * @brief Get the event matching the given unique broadcast id
@@ -172,7 +172,7 @@ namespace PVR
      * @param bUpdateDatabase If set to true, this event will be persisted in the database.
      * @return True if it was updated successfully, false otherwise.
      */
-    bool UpdateEntry(const std::shared_ptr<CPVREpgInfoTag> &tag, bool bUpdateDatabase);
+    bool UpdateEntry(const std::shared_ptr<CPVREpgInfoTag>& tag, bool bUpdateDatabase);
 
     /*!
      * @brief Update an entry in this EPG.
@@ -181,7 +181,7 @@ namespace PVR
      * @param bUpdateDatabase If set to true, this event will be persisted in the database.
      * @return True if it was updated successfully, false otherwise.
      */
-    bool UpdateEntry(const std::shared_ptr<CPVREpgInfoTag> &tag, EPG_EVENT_STATE newState, bool bUpdateDatabase);
+    bool UpdateEntry(const std::shared_ptr<CPVREpgInfoTag>& tag, EPG_EVENT_STATE newState, bool bUpdateDatabase);
 
     /*!
      * @brief Update the EPG from 'start' till 'end'.
@@ -277,7 +277,7 @@ namespace PVR
      * @brief Add an infotag to this container.
      * @param tag The tag to add.
      */
-    void AddEntry(const CPVREpgInfoTag &tag);
+    void AddEntry(const CPVREpgInfoTag& tag);
 
     /*!
      * @brief Load all EPG entries from clients into a temporary table and update this table with the contents of that temporary table.
@@ -294,7 +294,7 @@ namespace PVR
      * @param bStoreInDb True to store the updated contents in the db, false otherwise.
      * @return True if the update was successful, false otherwise.
      */
-    bool UpdateEntries(const CPVREpg &epg, bool bStoreInDb = true);
+    bool UpdateEntries(const CPVREpg& epg, bool bStoreInDb = true);
 
     /*!
      * @brief Remove all entries from this EPG that finished before the given amount of days.
diff --git a/xbmc/pvr/epg/EpgContainer.cpp b/xbmc/pvr/epg/EpgContainer.cpp
index 2bac36853b0e..3c0ab11331bd 100644
--- a/xbmc/pvr/epg/EpgContainer.cpp
+++ b/xbmc/pvr/epg/EpgContainer.cpp
@@ -60,7 +60,7 @@ class CEpgTagStateChange
 {
 public:
   CEpgTagStateChange() = default;
-  CEpgTagStateChange(const std::shared_ptr<CPVREpgInfoTag> &tag, EPG_EVENT_STATE eNewState) : m_epgtag(tag), m_state(eNewState) {}
+  CEpgTagStateChange(const std::shared_ptr<CPVREpgInfoTag>& tag, EPG_EVENT_STATE eNewState) : m_epgtag(tag), m_state(eNewState) {}
 
   void Deliver();
 
@@ -143,7 +143,7 @@ void CPVREpgContainer::Clear()
   {
     CSingleLock lock(m_critSection);
     /* clear all epg tables and remove pointers to epg tables on channels */
-    for (const auto &epgEntry : m_epgIdToEpgMap)
+    for (const auto& epgEntry : m_epgIdToEpgMap)
       epgEntry.second->Events().Unsubscribe(this);
 
     m_epgIdToEpgMap.clear();
@@ -272,7 +272,7 @@ void CPVREpgContainer::LoadFromDB(void)
   for (const auto& entry : result)
     InsertFromDB(entry);
 
-  for (const auto &epgEntry : m_epgIdToEpgMap)
+  for (const auto& epgEntry : m_epgIdToEpgMap)
   {
     if (m_bStop)
       break;
@@ -445,7 +445,7 @@ std::shared_ptr<CPVREpg> CPVREpgContainer::GetById(int iEpgId) const
     return retval;
 
   CSingleLock lock(m_critSection);
-  const auto &epgEntry = m_epgIdToEpgMap.find(iEpgId);
+  const auto& epgEntry = m_epgIdToEpgMap.find(iEpgId);
   if (epgEntry != m_epgIdToEpgMap.end())
     retval = epgEntry->second;
 
@@ -505,7 +505,7 @@ std::vector<std::shared_ptr<CPVREpgInfoTag>> CPVREpgContainer::GetAllTags() cons
   return allTags;
 }
 
-void CPVREpgContainer::InsertFromDB(const std::shared_ptr<CPVREpg> &newEpg)
+void CPVREpgContainer::InsertFromDB(const std::shared_ptr<CPVREpg>& newEpg)
 {
   // table might already have been created when pvr channels were loaded
   std::shared_ptr<CPVREpg> epg = GetById(newEpg->EpgID());
@@ -576,7 +576,7 @@ bool CPVREpgContainer::RemoveOldEntries(void)
   return true;
 }
 
-bool CPVREpgContainer::DeleteEpg(const std::shared_ptr<CPVREpg> &epg, bool bDeleteFromDatabase /* = false */)
+bool CPVREpgContainer::DeleteEpg(const std::shared_ptr<CPVREpg>& epg, bool bDeleteFromDatabase /* = false */)
 {
   if (!epg || epg->EpgID() < 0)
     return false;
@@ -737,7 +737,7 @@ const CDateTime CPVREpgContainer::GetFirstEPGDate(void)
   const auto epgs = m_epgIdToEpgMap;
   m_critSection.unlock();
 
-  for (const auto &epgEntry : epgs)
+  for (const auto& epgEntry : epgs)
   {
     CDateTime entry = epgEntry.second->GetFirstDate();
     if (entry.IsValid() && (!returnValue.IsValid() || entry < returnValue))
@@ -755,7 +755,7 @@ const CDateTime CPVREpgContainer::GetLastEPGDate(void)
   const auto epgs = m_epgIdToEpgMap;
   m_critSection.unlock();
 
-  for (const auto &epgEntry : epgs)
+  for (const auto& epgEntry : epgs)
   {
     CDateTime entry = epgEntry.second->GetLastDate();
     if (entry.IsValid() && (!returnValue.IsValid() || entry > returnValue))
@@ -820,7 +820,7 @@ void CPVREpgContainer::UpdateRequest(int iClientID, int iUniqueChannelID)
   m_updateRequests.emplace_back(CEpgUpdateRequest(iClientID, iUniqueChannelID));
 }
 
-void CPVREpgContainer::UpdateFromClient(const std::shared_ptr<CPVREpgInfoTag> &tag, EPG_EVENT_STATE eNewState)
+void CPVREpgContainer::UpdateFromClient(const std::shared_ptr<CPVREpgInfoTag>& tag, EPG_EVENT_STATE eNewState)
 {
   CSingleLock lock(m_epgTagChangesLock);
   m_epgTagChanges.emplace_back(CEpgTagStateChange(tag, eNewState));
diff --git a/xbmc/pvr/epg/EpgContainer.h b/xbmc/pvr/epg/EpgContainer.h
index a3251eaae93e..fd10473b5fdd 100644
--- a/xbmc/pvr/epg/EpgContainer.h
+++ b/xbmc/pvr/epg/EpgContainer.h
@@ -88,7 +88,7 @@ namespace PVR
      * @param bDeleteFromDatabase Delete this table from the database too if true.
      * @return True on success, false otherwise.
      */
-    bool DeleteEpg(const std::shared_ptr<CPVREpg> &epg, bool bDeleteFromDatabase = false);
+    bool DeleteEpg(const std::shared_ptr<CPVREpg>& epg, bool bDeleteFromDatabase = false);
 
     /*!
      * @brief CEventStream callback for PVR events.
@@ -176,7 +176,7 @@ namespace PVR
      * @param tag The epg tag containing the updated data
      * @param eNewState The kind of change (CREATED, UPDATED, DELETED)
      */
-    void UpdateFromClient(const std::shared_ptr<CPVREpgInfoTag> &tag, EPG_EVENT_STATE eNewState);
+    void UpdateFromClient(const std::shared_ptr<CPVREpgInfoTag>& tag, EPG_EVENT_STATE eNewState);
 
     /*!
      * @brief Get the number of past days to show in the guide and to import from backends.
@@ -257,7 +257,7 @@ namespace PVR
      * @brief Insert data from database
      * @param newEpg the EPG containing the updated data.
      */
-    void InsertFromDB(const std::shared_ptr<CPVREpg> &newEpg);
+    void InsertFromDB(const std::shared_ptr<CPVREpg>& newEpg);
 
     std::shared_ptr<CPVREpgDatabase> m_database; /*!< the EPG database */
 
diff --git a/xbmc/pvr/epg/EpgDatabase.cpp b/xbmc/pvr/epg/EpgDatabase.cpp
index c0af73edf4ad..dc9f3ee4aa6c 100644
--- a/xbmc/pvr/epg/EpgDatabase.cpp
+++ b/xbmc/pvr/epg/EpgDatabase.cpp
@@ -158,7 +158,7 @@ bool CPVREpgDatabase::DeleteEpg(void)
   return bReturn;
 }
 
-bool CPVREpgDatabase::Delete(const CPVREpg &table)
+bool CPVREpgDatabase::Delete(const CPVREpg& table)
 {
   /* invalid channel */
   if (table.EpgID() <= 0)
@@ -174,7 +174,7 @@ bool CPVREpgDatabase::Delete(const CPVREpg &table)
   return DeleteValues("epg", filter);
 }
 
-bool CPVREpgDatabase::DeleteEpgEntries(const CDateTime &maxEndTime)
+bool CPVREpgDatabase::DeleteEpgEntries(const CDateTime& maxEndTime)
 {
   time_t iMaxEndTime;
   maxEndTime.GetAsTime(iMaxEndTime);
@@ -186,7 +186,7 @@ bool CPVREpgDatabase::DeleteEpgEntries(const CDateTime &maxEndTime)
   return DeleteValues("epgtags", filter);
 }
 
-bool CPVREpgDatabase::Delete(const CPVREpgInfoTag &tag)
+bool CPVREpgDatabase::Delete(const CPVREpgInfoTag& tag)
 {
   /* tag without a database ID was not persisted */
   if (tag.DatabaseID() <= 0)
@@ -229,7 +229,7 @@ std::vector<std::shared_ptr<CPVREpg>> CPVREpgDatabase::GetAll()
   return result;
 }
 
-std::vector<std::shared_ptr<CPVREpgInfoTag>> CPVREpgDatabase::Get(const CPVREpg &epg)
+std::vector<std::shared_ptr<CPVREpgInfoTag>> CPVREpgDatabase::Get(const CPVREpg& epg)
 {
   std::vector<std::shared_ptr<CPVREpgInfoTag>> result;
 
@@ -327,7 +327,7 @@ bool CPVREpgDatabase::PersistLastEpgScanTime(int iEpgId, const CDateTime& lastSc
   return bQueueWrite ? QueueInsertQuery(strQuery) : ExecuteQuery(strQuery);
 }
 
-int CPVREpgDatabase::Persist(const CPVREpg &epg, bool bQueueWrite /* = false */)
+int CPVREpgDatabase::Persist(const CPVREpg& epg, bool bQueueWrite /* = false */)
 {
   int iReturn(-1);
   std::string strQuery;
@@ -354,7 +354,7 @@ int CPVREpgDatabase::Persist(const CPVREpg &epg, bool bQueueWrite /* = false */)
   return iReturn;
 }
 
-int CPVREpgDatabase::Persist(const CPVREpgInfoTag &tag, bool bSingleUpdate /* = true */)
+int CPVREpgDatabase::Persist(const CPVREpgInfoTag& tag, bool bSingleUpdate /* = true */)
 {
   int iReturn(-1);
 
diff --git a/xbmc/pvr/epg/EpgDatabase.h b/xbmc/pvr/epg/EpgDatabase.h
index da8474768664..90c97be9c66c 100644
--- a/xbmc/pvr/epg/EpgDatabase.h
+++ b/xbmc/pvr/epg/EpgDatabase.h
@@ -83,21 +83,21 @@ namespace PVR
      * @param table The table to remove.
      * @return True if the table was removed successfully, false otherwise.
      */
-    bool Delete(const CPVREpg &table);
+    bool Delete(const CPVREpg& table);
 
     /*!
      * @brief Erase all EPG entries with an end time less than the given time.
      * @param maxEndTime The maximum allowed end time.
      * @return True if the entries were removed successfully, false otherwise.
      */
-    bool DeleteEpgEntries(const CDateTime &maxEndTime);
+    bool DeleteEpgEntries(const CDateTime& maxEndTime);
 
     /*!
      * @brief Remove a single EPG entry.
      * @param tag The entry to remove.
      * @return True if it was removed successfully, false otherwise.
      */
-    bool Delete(const CPVREpgInfoTag &tag);
+    bool Delete(const CPVREpgInfoTag& tag);
 
     /*!
      * @brief Get all EPG tables from the database. Does not get the EPG tables' entries.
@@ -110,7 +110,7 @@ namespace PVR
      * @param epg The EPG table to get the entries for.
      * @return The entries.
      */
-    std::vector<std::shared_ptr<CPVREpgInfoTag>> Get(const CPVREpg &epg);
+    std::vector<std::shared_ptr<CPVREpgInfoTag>> Get(const CPVREpg& epg);
 
     /*!
      * @brief Get the last stored EPG scan time.
@@ -135,7 +135,7 @@ namespace PVR
      * @param bQueueWrite Don't execute the query immediately but queue it if true.
      * @return The database ID of this entry or 0 if bSingleUpdate is false and the query was queued.
      */
-    int Persist(const CPVREpg &epg, bool bQueueWrite = false);
+    int Persist(const CPVREpg& epg, bool bQueueWrite = false);
 
     /*!
      * @brief Persist an infotag.
@@ -143,7 +143,7 @@ namespace PVR
      * @param bSingleUpdate If true, this is a single update and the query will be executed immediately.
      * @return The database ID of this entry or 0 if bSingleUpdate is false and the query was queued.
      */
-    int Persist(const CPVREpgInfoTag &tag, bool bSingleUpdate = true);
+    int Persist(const CPVREpgInfoTag& tag, bool bSingleUpdate = true);
 
     /*!
      * @return Last EPG id in the database
diff --git a/xbmc/pvr/epg/EpgInfoTag.cpp b/xbmc/pvr/epg/EpgInfoTag.cpp
index a65e9f6daab6..e69a427b9c17 100644
--- a/xbmc/pvr/epg/EpgInfoTag.cpp
+++ b/xbmc/pvr/epg/EpgInfoTag.cpp
@@ -166,7 +166,7 @@ bool CPVREpgInfoTag::operator !=(const CPVREpgInfoTag& right) const
   return !(*this == right);
 }
 
-void CPVREpgInfoTag::Serialize(CVariant &value) const
+void CPVREpgInfoTag::Serialize(CVariant& value) const
 {
   CSingleLock lock(m_critSection);
   value["broadcastid"] = m_iUniqueBroadcastID;
@@ -344,7 +344,7 @@ CDateTime CPVREpgInfoTag::EndAsLocalTime(void) const
   return retVal;
 }
 
-void CPVREpgInfoTag::SetEndFromUTC(const CDateTime &end)
+void CPVREpgInfoTag::SetEndFromUTC(const CDateTime& end)
 {
   m_endTime = end;
 }
@@ -519,7 +519,7 @@ std::string CPVREpgInfoTag::Path(void) const
   return m_strFileNameAndPath;
 }
 
-bool CPVREpgInfoTag::Update(const CPVREpgInfoTag &tag, bool bUpdateBroadcastId /* = true */)
+bool CPVREpgInfoTag::Update(const CPVREpgInfoTag& tag, bool bUpdateBroadcastId /* = true */)
 {
   CSingleLock lock(m_critSection);
   bool bChanged = (
@@ -704,12 +704,12 @@ bool CPVREpgInfoTag::IsParentalLocked() const
   return m_channelData->IsLocked();
 }
 
-const std::vector<std::string> CPVREpgInfoTag::Tokenize(const std::string &str)
+const std::vector<std::string> CPVREpgInfoTag::Tokenize(const std::string& str)
 {
   return StringUtils::Split(str.c_str(), EPG_STRING_TOKEN_SEPARATOR);
 }
 
-const std::string CPVREpgInfoTag::DeTokenize(const std::vector<std::string> &tokens)
+const std::string CPVREpgInfoTag::DeTokenize(const std::vector<std::string>& tokens)
 {
   return StringUtils::Join(tokens, EPG_STRING_TOKEN_SEPARATOR);
 }
diff --git a/xbmc/pvr/epg/EpgInfoTag.h b/xbmc/pvr/epg/EpgInfoTag.h
index 1496fed38fb6..af2b804bd0b3 100644
--- a/xbmc/pvr/epg/EpgInfoTag.h
+++ b/xbmc/pvr/epg/EpgInfoTag.h
@@ -57,7 +57,7 @@ namespace PVR
     bool operator !=(const CPVREpgInfoTag& right) const;
 
     // ISerializable implementation
-    void Serialize(CVariant &value) const override;
+    void Serialize(CVariant& value) const override;
 
     // ISortable implementation
     void ToSortable(SortItem& sortable, Field field) const override;
@@ -162,7 +162,7 @@ namespace PVR
      * @brief Change the event's end time.
      * @param end The new end time.
      */
-    void SetEndFromUTC(const CDateTime &end);
+    void SetEndFromUTC(const CDateTime& end);
 
     /*!
      * @brief Get the duration of this event in seconds.
@@ -358,7 +358,7 @@ namespace PVR
      * @param bUpdateBroadcastId If set to false, the tag BroadcastId (locally unique) will not be checked/updated
      * @return True if something changed, false otherwise.
      */
-    bool Update(const CPVREpgInfoTag &tag, bool bUpdateBroadcastId = true);
+    bool Update(const CPVREpgInfoTag& tag, bool bUpdateBroadcastId = true);
 
     /*!
      * @brief Retrieve the edit decision list (EDL) of an EPG tag.
@@ -395,20 +395,20 @@ namespace PVR
      * @param str The string to tokenize.
      * @return the tokens.
      */
-    static const std::vector<std::string> Tokenize(const std::string &str);
+    static const std::vector<std::string> Tokenize(const std::string& str);
 
     /*!
      * @brief Combine the given strings to a single string. Inserts EPG_STRING_TOKEN_SEPARATOR as separator.
      * @param tokens The tokens.
      * @return the combined string.
      */
-    static const std::string DeTokenize(const std::vector<std::string> &tokens);
+    static const std::string DeTokenize(const std::vector<std::string>& tokens);
 
   private:
     CPVREpgInfoTag();
 
-    CPVREpgInfoTag(const CPVREpgInfoTag &tag) = delete;
-    CPVREpgInfoTag &operator =(const CPVREpgInfoTag &other) = delete;
+    CPVREpgInfoTag(const CPVREpgInfoTag& tag) = delete;
+    CPVREpgInfoTag& operator =(const CPVREpgInfoTag& other) = delete;
 
     /*!
      * @brief Change the genre of this event.
diff --git a/xbmc/pvr/epg/EpgSearchFilter.cpp b/xbmc/pvr/epg/EpgSearchFilter.cpp
index 5e3743a83a4b..a359d2aab3c1 100644
--- a/xbmc/pvr/epg/EpgSearchFilter.cpp
+++ b/xbmc/pvr/epg/EpgSearchFilter.cpp
@@ -68,7 +68,7 @@ void CPVREpgSearchFilter::Reset()
   m_iUniqueBroadcastId       = EPG_TAG_INVALID_UID;
 }
 
-bool CPVREpgSearchFilter::MatchGenre(const std::shared_ptr<CPVREpgInfoTag> &tag) const
+bool CPVREpgSearchFilter::MatchGenre(const std::shared_ptr<CPVREpgInfoTag>& tag) const
 {
   bool bReturn(true);
 
@@ -82,7 +82,7 @@ bool CPVREpgSearchFilter::MatchGenre(const std::shared_ptr<CPVREpgInfoTag> &tag)
   return bReturn;
 }
 
-bool CPVREpgSearchFilter::MatchDuration(const std::shared_ptr<CPVREpgInfoTag> &tag) const
+bool CPVREpgSearchFilter::MatchDuration(const std::shared_ptr<CPVREpgInfoTag>& tag) const
 {
   bool bReturn(true);
 
@@ -95,12 +95,12 @@ bool CPVREpgSearchFilter::MatchDuration(const std::shared_ptr<CPVREpgInfoTag> &t
   return bReturn;
 }
 
-bool CPVREpgSearchFilter::MatchStartAndEndTimes(const std::shared_ptr<CPVREpgInfoTag> &tag) const
+bool CPVREpgSearchFilter::MatchStartAndEndTimes(const std::shared_ptr<CPVREpgInfoTag>& tag) const
 {
   return (tag->StartAsLocalTime() >= m_startDateTime && tag->EndAsLocalTime() <= m_endDateTime);
 }
 
-void CPVREpgSearchFilter::SetSearchPhrase(const std::string &strSearchPhrase)
+void CPVREpgSearchFilter::SetSearchPhrase(const std::string& strSearchPhrase)
 {
   // match the exact phrase
   m_strSearchTerm = "\"";
@@ -108,7 +108,7 @@ void CPVREpgSearchFilter::SetSearchPhrase(const std::string &strSearchPhrase)
   m_strSearchTerm.append("\"");
 }
 
-bool CPVREpgSearchFilter::MatchSearchTerm(const std::shared_ptr<CPVREpgInfoTag> &tag) const
+bool CPVREpgSearchFilter::MatchSearchTerm(const std::shared_ptr<CPVREpgInfoTag>& tag) const
 {
   bool bReturn(true);
 
@@ -125,7 +125,7 @@ bool CPVREpgSearchFilter::MatchSearchTerm(const std::shared_ptr<CPVREpgInfoTag>
   return bReturn;
 }
 
-bool CPVREpgSearchFilter::MatchBroadcastId(const std::shared_ptr<CPVREpgInfoTag> &tag) const
+bool CPVREpgSearchFilter::MatchBroadcastId(const std::shared_ptr<CPVREpgInfoTag>& tag) const
 {
   if (m_iUniqueBroadcastId != EPG_TAG_INVALID_UID)
     return (tag->UniqueBroadcastID() == m_iUniqueBroadcastId);
@@ -133,7 +133,7 @@ bool CPVREpgSearchFilter::MatchBroadcastId(const std::shared_ptr<CPVREpgInfoTag>
   return true;
 }
 
-bool CPVREpgSearchFilter::FilterEntry(const std::shared_ptr<CPVREpgInfoTag> &tag) const
+bool CPVREpgSearchFilter::FilterEntry(const std::shared_ptr<CPVREpgInfoTag>& tag) const
 {
   return (MatchGenre(tag) &&
       MatchBroadcastId(tag) &&
@@ -165,12 +165,12 @@ void CPVREpgSearchFilter::RemoveDuplicates(std::vector<std::shared_ptr<CPVREpgIn
   }
 }
 
-bool CPVREpgSearchFilter::MatchChannelType(const std::shared_ptr<CPVREpgInfoTag> &tag) const
+bool CPVREpgSearchFilter::MatchChannelType(const std::shared_ptr<CPVREpgInfoTag>& tag) const
 {
   return tag && (tag->IsRadio() == m_bIsRadio);
 }
 
-bool CPVREpgSearchFilter::MatchChannelNumber(const std::shared_ptr<CPVREpgInfoTag> &tag) const
+bool CPVREpgSearchFilter::MatchChannelNumber(const std::shared_ptr<CPVREpgInfoTag>& tag) const
 {
   bool bReturn(true);
 
@@ -183,7 +183,7 @@ bool CPVREpgSearchFilter::MatchChannelNumber(const std::shared_ptr<CPVREpgInfoTa
   return bReturn;
 }
 
-bool CPVREpgSearchFilter::MatchChannelGroup(const std::shared_ptr<CPVREpgInfoTag> &tag) const
+bool CPVREpgSearchFilter::MatchChannelGroup(const std::shared_ptr<CPVREpgInfoTag>& tag) const
 {
   bool bReturn(true);
 
@@ -200,7 +200,7 @@ bool CPVREpgSearchFilter::MatchChannelGroup(const std::shared_ptr<CPVREpgInfoTag
   return bReturn;
 }
 
-bool CPVREpgSearchFilter::MatchFreeToAir(const std::shared_ptr<CPVREpgInfoTag> &tag) const
+bool CPVREpgSearchFilter::MatchFreeToAir(const std::shared_ptr<CPVREpgInfoTag>& tag) const
 {
   if (m_bFreeToAirOnly)
   {
@@ -211,12 +211,12 @@ bool CPVREpgSearchFilter::MatchFreeToAir(const std::shared_ptr<CPVREpgInfoTag> &
   return true;
 }
 
-bool CPVREpgSearchFilter::MatchTimers(const std::shared_ptr<CPVREpgInfoTag> &tag) const
+bool CPVREpgSearchFilter::MatchTimers(const std::shared_ptr<CPVREpgInfoTag>& tag) const
 {
   return (!m_bIgnorePresentTimers || !CServiceBroker::GetPVRManager().Timers()->GetTimerForEpgTag(tag));
 }
 
-bool CPVREpgSearchFilter::MatchRecordings(const std::shared_ptr<CPVREpgInfoTag> &tag) const
+bool CPVREpgSearchFilter::MatchRecordings(const std::shared_ptr<CPVREpgInfoTag>& tag) const
 {
   return (!m_bIgnorePresentRecordings || !CServiceBroker::GetPVRManager().Recordings()->GetRecordingForEpgTag(tag));
 }
diff --git a/xbmc/pvr/epg/EpgSearchFilter.h b/xbmc/pvr/epg/EpgSearchFilter.h
index 612279ed9b86..a2a5c4aac92a 100644
--- a/xbmc/pvr/epg/EpgSearchFilter.h
+++ b/xbmc/pvr/epg/EpgSearchFilter.h
@@ -44,7 +44,7 @@ namespace PVR
      * @param tag The tag to check.
      * @return True if this tag matches the filter, false if not.
      */
-    bool FilterEntry(const std::shared_ptr<CPVREpgInfoTag> &tag) const;
+    bool FilterEntry(const std::shared_ptr<CPVREpgInfoTag>& tag) const;
 
     /*!
      * @brief remove duplicates from a list of epg tags.
@@ -58,9 +58,9 @@ namespace PVR
      */
     bool IsRadio() const { return m_bIsRadio; }
 
-    const std::string &GetSearchTerm() const { return m_strSearchTerm; }
-    void SetSearchTerm(const std::string &strSearchTerm) { m_strSearchTerm = strSearchTerm; }
-    void SetSearchPhrase(const std::string &strSearchPhrase);
+    const std::string& GetSearchTerm() const { return m_strSearchTerm; }
+    void SetSearchTerm(const std::string& strSearchTerm) { m_strSearchTerm = strSearchTerm; }
+    void SetSearchPhrase(const std::string& strSearchPhrase);
 
     bool IsCaseSensitive() const { return m_bIsCaseSensitive; }
     void SetCaseSensitive(bool bIsCaseSensitive) { m_bIsCaseSensitive = bIsCaseSensitive; }
@@ -80,11 +80,11 @@ namespace PVR
     int GetMaximumDuration() const { return m_iMaximumDuration; }
     void SetMaximumDuration(int iMaximumDuration) { m_iMaximumDuration = iMaximumDuration; }
 
-    const CDateTime &GetStartDateTime() const { return m_startDateTime; }
-    void SetStartDateTime(const CDateTime &startDateTime) { m_startDateTime = startDateTime; }
+    const CDateTime& GetStartDateTime() const { return m_startDateTime; }
+    void SetStartDateTime(const CDateTime& startDateTime) { m_startDateTime = startDateTime; }
 
-    const CDateTime &GetEndDateTime() const  { return m_endDateTime; }
-    void SetEndDateTime(const CDateTime &endDateTime) { m_endDateTime = endDateTime; }
+    const CDateTime& GetEndDateTime() const  { return m_endDateTime; }
+    void SetEndDateTime(const CDateTime& endDateTime) { m_endDateTime = endDateTime; }
 
     bool ShouldIncludeUnknownGenres() const { return m_bIncludeUnknownGenres; }
     void SetIncludeUnknownGenres(bool bIncludeUnknownGenres) { m_bIncludeUnknownGenres = bIncludeUnknownGenres; }
@@ -111,17 +111,17 @@ namespace PVR
     void SetUniqueBroadcastId(unsigned int iUniqueBroadcastId) { m_iUniqueBroadcastId = iUniqueBroadcastId; }
 
   private:
-    bool MatchGenre(const std::shared_ptr<CPVREpgInfoTag> &tag) const;
-    bool MatchDuration(const std::shared_ptr<CPVREpgInfoTag> &tag) const;
-    bool MatchStartAndEndTimes(const std::shared_ptr<CPVREpgInfoTag> &tag) const;
-    bool MatchSearchTerm(const std::shared_ptr<CPVREpgInfoTag> &tag) const;
-    bool MatchChannelNumber(const std::shared_ptr<CPVREpgInfoTag> &tag) const;
-    bool MatchChannelGroup(const std::shared_ptr<CPVREpgInfoTag> &tag) const;
-    bool MatchBroadcastId(const std::shared_ptr<CPVREpgInfoTag> &tag) const;
-    bool MatchChannelType(const std::shared_ptr<CPVREpgInfoTag> &tag) const;
-    bool MatchFreeToAir(const std::shared_ptr<CPVREpgInfoTag> &tag) const;
-    bool MatchTimers(const std::shared_ptr<CPVREpgInfoTag> &tag) const;
-    bool MatchRecordings(const std::shared_ptr<CPVREpgInfoTag> &tag) const;
+    bool MatchGenre(const std::shared_ptr<CPVREpgInfoTag>& tag) const;
+    bool MatchDuration(const std::shared_ptr<CPVREpgInfoTag>& tag) const;
+    bool MatchStartAndEndTimes(const std::shared_ptr<CPVREpgInfoTag>& tag) const;
+    bool MatchSearchTerm(const std::shared_ptr<CPVREpgInfoTag>& tag) const;
+    bool MatchChannelNumber(const std::shared_ptr<CPVREpgInfoTag>& tag) const;
+    bool MatchChannelGroup(const std::shared_ptr<CPVREpgInfoTag>& tag) const;
+    bool MatchBroadcastId(const std::shared_ptr<CPVREpgInfoTag>& tag) const;
+    bool MatchChannelType(const std::shared_ptr<CPVREpgInfoTag>& tag) const;
+    bool MatchFreeToAir(const std::shared_ptr<CPVREpgInfoTag>& tag) const;
+    bool MatchTimers(const std::shared_ptr<CPVREpgInfoTag>& tag) const;
+    bool MatchRecordings(const std::shared_ptr<CPVREpgInfoTag>& tag) const;
 
     std::string   m_strSearchTerm;            /*!< The term to search for */
     bool          m_bIsCaseSensitive;         /*!< Do a case sensitive search */
diff --git a/xbmc/pvr/recordings/PVRRecording.cpp b/xbmc/pvr/recordings/PVRRecording.cpp
index faa28966265a..0e3fc0cdcb57 100644
--- a/xbmc/pvr/recordings/PVRRecording.cpp
+++ b/xbmc/pvr/recordings/PVRRecording.cpp
@@ -68,7 +68,7 @@ CPVRRecording::CPVRRecording()
   Reset();
 }
 
-CPVRRecording::CPVRRecording(const PVR_RECORDING &recording, unsigned int iClientId)
+CPVRRecording::CPVRRecording(const PVR_RECORDING& recording, unsigned int iClientId)
 {
   Reset();
 
@@ -229,7 +229,7 @@ bool CPVRRecording::Undelete(void)
   return client && (client->UndeleteRecording(*this) == PVR_ERROR_NO_ERROR);
 }
 
-bool CPVRRecording::Rename(const std::string &strNewName)
+bool CPVRRecording::Rename(const std::string& strNewName)
 {
   m_strTitle = strNewName;
   const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
@@ -260,7 +260,7 @@ bool CPVRRecording::IncrementPlayCount()
   return CVideoInfoTag::IncrementPlayCount();
 }
 
-bool CPVRRecording::SetResumePoint(const CBookmark &resumePoint)
+bool CPVRRecording::SetResumePoint(const CBookmark& resumePoint)
 {
   const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
   if (client && client->GetClientCapabilities().SupportsRecordingsLastPlayedPosition())
@@ -272,7 +272,7 @@ bool CPVRRecording::SetResumePoint(const CBookmark &resumePoint)
   return CVideoInfoTag::SetResumePoint(resumePoint);
 }
 
-bool CPVRRecording::SetResumePoint(double timeInSeconds, double totalTimeInSeconds, const std::string &playerState /* = "" */)
+bool CPVRRecording::SetResumePoint(double timeInSeconds, double totalTimeInSeconds, const std::string& playerState /* = "" */)
 {
   const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
   if (client && client->GetClientCapabilities().SupportsRecordingsLastPlayedPosition())
@@ -307,7 +307,7 @@ CBookmark CPVRRecording::GetResumePoint() const
   return CVideoInfoTag::GetResumePoint();
 }
 
-void CPVRRecording::UpdateMetadata(CVideoDatabase &db)
+void CPVRRecording::UpdateMetadata(CVideoDatabase& db)
 {
   if (m_bGotMetaData || !db.IsOpen())
     return;
@@ -338,7 +338,7 @@ std::vector<PVR_EDL_ENTRY> CPVRRecording::GetEdl() const
   return edls;
 }
 
-void CPVRRecording::Update(const CPVRRecording &tag)
+void CPVRRecording::Update(const CPVRRecording& tag)
 {
   m_strRecordingId    = tag.m_strRecordingId;
   m_iClientId         = tag.m_iClientId;
@@ -404,7 +404,7 @@ void CPVRRecording::UpdatePath(void)
     m_bIsDeleted, m_bRadio, m_strDirectory, m_strTitle, m_iSeason, m_iEpisode, GetYear(), m_strShowTitle, m_strChannelName, m_recordingTime, m_strRecordingId);
 }
 
-const CDateTime &CPVRRecording::RecordingTimeAsLocalTime(void) const
+const CDateTime& CPVRRecording::RecordingTimeAsLocalTime(void) const
 {
   static CDateTime tmp;
   tmp.SetFromUTCDateTime(m_recordingTime);
@@ -442,7 +442,7 @@ CDateTime CPVRRecording::ExpirationTimeAsLocalTime() const
   return ret;
 }
 
-std::string CPVRRecording::GetTitleFromURL(const std::string &url)
+std::string CPVRRecording::GetTitleFromURL(const std::string& url)
 {
   return CPVRRecordingsPath(url).GetTitle();
 }
@@ -499,7 +499,7 @@ bool CPVRRecording::IsInProgress() const
   return GetRecordingTimer() != nullptr;
 }
 
-void CPVRRecording::SetGenre(int iGenreType, int iGenreSubType, const std::string &strGenre)
+void CPVRRecording::SetGenre(int iGenreType, int iGenreSubType, const std::string& strGenre)
 {
   m_iGenreType = iGenreType;
   m_iGenreSubType = iGenreSubType;
diff --git a/xbmc/pvr/recordings/PVRRecording.h b/xbmc/pvr/recordings/PVRRecording.h
index 86c6eba64fa6..04b1e6979fba 100644
--- a/xbmc/pvr/recordings/PVRRecording.h
+++ b/xbmc/pvr/recordings/PVRRecording.h
@@ -52,7 +52,7 @@ namespace PVR
     int           m_iClientId;        /*!< ID of the backend */
     std::string   m_strRecordingId;   /*!< unique ID of the recording on the client */
 
-    CPVRRecordingUid(int iClientId, const std::string &strRecordingId);
+    CPVRRecordingUid(int iClientId, const std::string& strRecordingId);
 
     bool operator >(const CPVRRecordingUid& right) const;
     bool operator <(const CPVRRecordingUid& right) const;
@@ -75,11 +75,11 @@ namespace PVR
     unsigned      m_iRecordingId;     /*!< id that won't change while xbmc is running */
 
     CPVRRecording(void);
-    CPVRRecording(const PVR_RECORDING &recording, unsigned int iClientId);
+    CPVRRecording(const PVR_RECORDING& recording, unsigned int iClientId);
 
   private:
-    CPVRRecording(const CPVRRecording &tag) = delete;
-    CPVRRecording &operator =(const CPVRRecording &other) = delete;
+    CPVRRecording(const CPVRRecording& tag) = delete;
+    CPVRRecording& operator =(const CPVRRecording& other) = delete;
 
   public:
     bool operator ==(const CPVRRecording& right) const;
@@ -109,7 +109,7 @@ namespace PVR
      * @param strNewName The new name.
      * @return True if it was renamed successfully, false otherwise.
      */
-    bool Rename(const std::string &strNewName);
+    bool Rename(const std::string& strNewName);
 
     /*!
      * @brief Set this recording's play count. The value will be transferred to the backend if it supports server-side play counts.
@@ -142,7 +142,7 @@ namespace PVR
      * @param resumePoint resume point.
      * @return True if resume point was set successfully, false otherwise.
      */
-    bool SetResumePoint(const CBookmark &resumePoint) override;
+    bool SetResumePoint(const CBookmark& resumePoint) override;
 
     /*!
      * @brief Set this recording's resume point. The value will be transferred to the backend if it supports server-side resume points.
@@ -151,7 +151,7 @@ namespace PVR
      * @param playerState the player state
      * @return True if resume point was set successfully, false otherwise.
      */
-    bool SetResumePoint(double timeInSeconds, double totalTimeInSeconds, const std::string &playerState = "") override;
+    bool SetResumePoint(double timeInSeconds, double totalTimeInSeconds, const std::string& playerState = "") override;
 
     /*!
      * @brief Get this recording's resume point. The value will be obtained from the backend if it supports server-side resume points.
@@ -175,25 +175,25 @@ namespace PVR
      * @brief Get the resume point and play count from the database if the
      * client doesn't handle it itself.
      */
-    void UpdateMetadata(CVideoDatabase &db);
+    void UpdateMetadata(CVideoDatabase& db);
 
     /*!
      * @brief Update this tag with the contents of the given tag.
      * @param tag The new tag info.
      */
-    void Update(const CPVRRecording &tag);
+    void Update(const CPVRRecording& tag);
 
     /*!
      * @brief Retrieve the recording start as UTC time
      * @return the recording start time
      */
-    const CDateTime &RecordingTimeAsUTC(void) const { return m_recordingTime; }
+    const CDateTime& RecordingTimeAsUTC(void) const { return m_recordingTime; }
 
     /*!
      * @brief Retrieve the recording start as local time
      * @return the recording start time
      */
-    const CDateTime &RecordingTimeAsLocalTime(void) const;
+    const CDateTime& RecordingTimeAsLocalTime(void) const;
 
     /*!
      * @brief Retrieve the recording end as UTC time
@@ -231,7 +231,7 @@ namespace PVR
      * @param url the URL for the recording
      * @return Title of the recording
      */
-    static std::string GetTitleFromURL(const std::string &url);
+    static std::string GetTitleFromURL(const std::string& url);
 
     /*!
      * @brief If deleted but can be undeleted it is true
@@ -291,7 +291,7 @@ namespace PVR
     * @param iGenreSubType The genre subtype ID
     * @param strGenre The genre
     */
-   void SetGenre(int iGenreType, int iGenreSubType, const std::string &strGenre);
+   void SetGenre(int iGenreType, int iGenreSubType, const std::string& strGenre);
 
     /*!
      * @brief Get the genre type ID of this event.
diff --git a/xbmc/pvr/recordings/PVRRecordings.cpp b/xbmc/pvr/recordings/PVRRecordings.cpp
index 527156ddd995..23889e961a55 100644
--- a/xbmc/pvr/recordings/PVRRecordings.cpp
+++ b/xbmc/pvr/recordings/PVRRecordings.cpp
@@ -150,7 +150,7 @@ std::shared_ptr<CPVRRecording> CPVRRecordings::GetByPath(const std::string& path
   return {};
 }
 
-std::shared_ptr<CPVRRecording> CPVRRecordings::GetById(int iClientId, const std::string &strRecordingId) const
+std::shared_ptr<CPVRRecording> CPVRRecordings::GetById(int iClientId, const std::string& strRecordingId) const
 {
   std::shared_ptr<CPVRRecording> retVal;
   CSingleLock lock(m_critSection);
@@ -161,7 +161,7 @@ std::shared_ptr<CPVRRecording> CPVRRecordings::GetById(int iClientId, const std:
   return retVal;
 }
 
-void CPVRRecordings::UpdateFromClient(const std::shared_ptr<CPVRRecording> &tag)
+void CPVRRecordings::UpdateFromClient(const std::shared_ptr<CPVRRecording>& tag)
 {
   CSingleLock lock(m_critSection);
 
@@ -192,7 +192,7 @@ void CPVRRecordings::UpdateFromClient(const std::shared_ptr<CPVRRecording> &tag)
   }
 }
 
-std::shared_ptr<CPVRRecording> CPVRRecordings::GetRecordingForEpgTag(const std::shared_ptr<CPVREpgInfoTag> &epgTag) const
+std::shared_ptr<CPVRRecording> CPVRRecordings::GetRecordingForEpgTag(const std::shared_ptr<CPVREpgInfoTag>& epgTag) const
 {
   if (!epgTag)
     return {};
diff --git a/xbmc/pvr/recordings/PVRRecordings.h b/xbmc/pvr/recordings/PVRRecordings.h
index 56a4953f1f92..97342b7ef86b 100644
--- a/xbmc/pvr/recordings/PVRRecordings.h
+++ b/xbmc/pvr/recordings/PVRRecordings.h
@@ -41,7 +41,7 @@ namespace PVR
      */
     void Unload();
 
-    void UpdateFromClient(const std::shared_ptr<CPVRRecording> &tag);
+    void UpdateFromClient(const std::shared_ptr<CPVRRecording>& tag);
 
     /*!
      * @brief refresh the recordings list from the clients.
@@ -75,7 +75,7 @@ namespace PVR
     std::vector<std::shared_ptr<CPVRRecording>> GetAll() const;
 
     std::shared_ptr<CPVRRecording> GetByPath(const std::string& path) const;
-    std::shared_ptr<CPVRRecording> GetById(int iClientId, const std::string &strRecordingId) const;
+    std::shared_ptr<CPVRRecording> GetById(int iClientId, const std::string& strRecordingId) const;
     std::shared_ptr<CPVRRecording> GetById(unsigned int iId) const;
 
     /*!
@@ -83,7 +83,7 @@ namespace PVR
      * @param epgTag The epg tag.
      * @return The requested recording, or an empty recordingptr if none was found.
      */
-    std::shared_ptr<CPVRRecording> GetRecordingForEpgTag(const std::shared_ptr<CPVREpgInfoTag> &epgTag) const;
+    std::shared_ptr<CPVRRecording> GetRecordingForEpgTag(const std::shared_ptr<CPVREpgInfoTag>& epgTag) const;
 
   private:
     mutable CCriticalSection m_critSection;
diff --git a/xbmc/pvr/recordings/PVRRecordingsPath.cpp b/xbmc/pvr/recordings/PVRRecordingsPath.cpp
index 1b31545e817d..2b5bf0ec9099 100644
--- a/xbmc/pvr/recordings/PVRRecordingsPath.cpp
+++ b/xbmc/pvr/recordings/PVRRecordingsPath.cpp
@@ -24,7 +24,7 @@ const std::string CPVRRecordingsPath::PATH_ACTIVE_RADIO_RECORDINGS  = "pvr://rec
 const std::string CPVRRecordingsPath::PATH_DELETED_TV_RECORDINGS    = "pvr://recordings/tv/deleted/";
 const std::string CPVRRecordingsPath::PATH_DELETED_RADIO_RECORDINGS = "pvr://recordings/radio/deleted/";
 
-CPVRRecordingsPath::CPVRRecordingsPath(const std::string &strPath)
+CPVRRecordingsPath::CPVRRecordingsPath(const std::string& strPath)
 {
   std::string strVarPath(TrimSlashes(strPath));
   const std::vector<std::string> segments = URIUtils::SplitPath(strVarPath);
@@ -75,10 +75,10 @@ CPVRRecordingsPath::CPVRRecordingsPath(bool bDeleted, bool bRadio)
 }
 
 CPVRRecordingsPath::CPVRRecordingsPath(bool bDeleted, bool bRadio,
-                       const std::string &strDirectory, const std::string &strTitle,
+                       const std::string& strDirectory, const std::string& strTitle,
                        int iSeason, int iEpisode, int iYear,
-                       const std::string &strSubtitle, const std::string &strChannelName,
-                       const CDateTime &recordingTime, const std::string &strId)
+                       const std::string& strSubtitle, const std::string& strChannelName,
+                       const CDateTime& recordingTime, const std::string& strId)
 : m_bValid(true),
   m_bRoot(false),
   m_bActive(!bDeleted),
@@ -125,7 +125,7 @@ std::string CPVRRecordingsPath::GetUnescapedDirectoryPath() const
   return CURL::Decode(m_directoryPath);
 }
 
-std::string CPVRRecordingsPath::GetUnescapedSubDirectoryPath(const std::string &strPath) const
+std::string CPVRRecordingsPath::GetUnescapedSubDirectoryPath(const std::string& strPath) const
 {
   // note: strPath must be unescaped.
 
@@ -167,7 +167,7 @@ const std::string CPVRRecordingsPath::GetTitle() const
   return "";
 }
 
-void CPVRRecordingsPath::AppendSegment(const std::string &strSegment)
+void CPVRRecordingsPath::AppendSegment(const std::string& strSegment)
 {
   if (!m_bValid || strSegment.empty() || strSegment == "/")
     return;
@@ -201,7 +201,7 @@ void CPVRRecordingsPath::AppendSegment(const std::string &strSegment)
   m_bRoot = false;
 }
 
-std::string CPVRRecordingsPath::TrimSlashes(const std::string &strString)
+std::string CPVRRecordingsPath::TrimSlashes(const std::string& strString)
 {
   std::string strTrimmed(strString);
   while (!strTrimmed.empty() && strTrimmed.front() == '/')
diff --git a/xbmc/pvr/recordings/PVRRecordingsPath.h b/xbmc/pvr/recordings/PVRRecordingsPath.h
index a7f36b1af438..9df45d45c6e5 100644
--- a/xbmc/pvr/recordings/PVRRecordingsPath.h
+++ b/xbmc/pvr/recordings/PVRRecordingsPath.h
@@ -23,32 +23,32 @@ namespace PVR
     static const std::string PATH_DELETED_TV_RECORDINGS;
     static const std::string PATH_DELETED_RADIO_RECORDINGS;
 
-    explicit CPVRRecordingsPath(const std::string &strPath);
+    explicit CPVRRecordingsPath(const std::string& strPath);
     CPVRRecordingsPath(bool bDeleted, bool bRadio);
     CPVRRecordingsPath(bool bDeleted, bool bRadio,
-                       const std::string &strDirectory, const std::string &strTitle,
+                       const std::string& strDirectory, const std::string& strTitle,
                        int iSeason, int iEpisode, int iYear,
-                       const std::string &strSubtitle, const std::string &strChannelName,
-                       const CDateTime &recordingTime, const std::string &strId);
+                       const std::string& strSubtitle, const std::string& strChannelName,
+                       const CDateTime& recordingTime, const std::string& strId);
 
     operator std::string() const { return m_path; }
 
     bool IsValid() const { return m_bValid; }
 
-    const std::string &GetPath() const { return m_path; }
+    const std::string& GetPath() const { return m_path; }
     bool IsRecordingsRoot() const { return m_bRoot; }
     bool IsActive() const { return m_bActive; }
     bool IsDeleted() const { return !IsActive(); }
     bool IsRadio() const { return m_bRadio; }
     bool IsTV() const { return !IsRadio(); }
     std::string GetUnescapedDirectoryPath() const;
-    std::string GetUnescapedSubDirectoryPath(const std::string &strPath) const;
+    std::string GetUnescapedSubDirectoryPath(const std::string& strPath) const;
 
     const std::string GetTitle() const;
-    void AppendSegment(const std::string &strSegment);
+    void AppendSegment(const std::string& strSegment);
 
   private:
-    static std::string TrimSlashes(const std::string &strString);
+    static std::string TrimSlashes(const std::string& strString);
     size_t GetDirectoryPathPosition() const;
 
     bool m_bValid;
diff --git a/xbmc/pvr/timers/PVRTimerInfoTag.cpp b/xbmc/pvr/timers/PVRTimerInfoTag.cpp
index 000ceb907c4e..dc1ab9ac7b80 100644
--- a/xbmc/pvr/timers/PVRTimerInfoTag.cpp
+++ b/xbmc/pvr/timers/PVRTimerInfoTag.cpp
@@ -77,7 +77,7 @@ CPVRTimerInfoTag::CPVRTimerInfoTag(bool bRadio /* = false */) :
   UpdateSummary();
 }
 
-CPVRTimerInfoTag::CPVRTimerInfoTag(const PVR_TIMER &timer, const std::shared_ptr<CPVRChannel> &channel, unsigned int iClientId) :
+CPVRTimerInfoTag::CPVRTimerInfoTag(const PVR_TIMER& timer, const std::shared_ptr<CPVRChannel>& channel, unsigned int iClientId) :
   m_strTitle(timer.strTitle),
   m_strEpgSearchString(timer.strEpgSearchString),
   m_bFullTextEpgSearch(timer.bFullTextEpgSearch),
@@ -217,7 +217,7 @@ bool CPVRTimerInfoTag::operator !=(const CPVRTimerInfoTag& right) const
   return !(*this == right);
 }
 
-void CPVRTimerInfoTag::Serialize(CVariant &value) const
+void CPVRTimerInfoTag::Serialize(CVariant& value) const
 {
   value["channelid"] = m_channel != NULL ? m_channel->ChannelID() : -1;
   value["summary"] = m_strSummary;
@@ -348,7 +348,7 @@ void CPVRTimerInfoTag::UpdateSummary(void)
   }
 }
 
-void CPVRTimerInfoTag::SetTimerType(const std::shared_ptr<CPVRTimerType> &type)
+void CPVRTimerInfoTag::SetTimerType(const std::shared_ptr<CPVRTimerType>& type)
 {
   CSingleLock lock(m_critSection);
   m_timerType = type;
@@ -418,7 +418,7 @@ std::string CPVRTimerInfoTag::GetTypeAsString() const
 
 namespace
 {
-void AppendDay(std::string &strReturn, unsigned int iId)
+void AppendDay(std::string& strReturn, unsigned int iId)
 {
   if (!strReturn.empty())
     strReturn += "-";
@@ -528,7 +528,7 @@ TimerOperationResult CPVRTimerInfoTag::DeleteFromClient(bool bForce /* = false *
   return (error == PVR_ERROR_NO_ERROR) ? TimerOperationResult::OK : TimerOperationResult::FAILED;
 }
 
-bool CPVRTimerInfoTag::RenameOnClient(const std::string &strNewName)
+bool CPVRTimerInfoTag::RenameOnClient(const std::string& strNewName)
 {
   {
     // set the new timer title locally
@@ -558,7 +558,7 @@ bool CPVRTimerInfoTag::DeleteFromDatabase()
   return false;
 }
 
-bool CPVRTimerInfoTag::UpdateEntry(const std::shared_ptr<CPVRTimerInfoTag> &tag)
+bool CPVRTimerInfoTag::UpdateEntry(const std::shared_ptr<CPVRTimerInfoTag>& tag)
 {
   CSingleLock lock(m_critSection);
 
@@ -1124,7 +1124,7 @@ void CPVRTimerInfoTag::SetFirstDayFromLocalTime(const CDateTime& firstDay)
   m_FirstDay = ConvertLocalTimeToUTC(firstDay);
 }
 
-void CPVRTimerInfoTag::GetNotificationText(std::string &strText) const
+void CPVRTimerInfoTag::GetNotificationText(std::string& strText) const
 {
   CSingleLock lock(m_critSection);
 
diff --git a/xbmc/pvr/timers/PVRTimerInfoTag.h b/xbmc/pvr/timers/PVRTimerInfoTag.h
index 5caa2b3f7011..3a6ce7c4d3cd 100644
--- a/xbmc/pvr/timers/PVRTimerInfoTag.h
+++ b/xbmc/pvr/timers/PVRTimerInfoTag.h
@@ -35,12 +35,12 @@ namespace PVR
   {
   public:
     explicit CPVRTimerInfoTag(bool bRadio = false);
-    CPVRTimerInfoTag(const PVR_TIMER &timer, const std::shared_ptr<CPVRChannel> &channel, unsigned int iClientId);
+    CPVRTimerInfoTag(const PVR_TIMER& timer, const std::shared_ptr<CPVRChannel>& channel, unsigned int iClientId);
 
     bool operator ==(const CPVRTimerInfoTag& right) const;
     bool operator !=(const CPVRTimerInfoTag& right) const;
 
-    void Serialize(CVariant &value) const override;
+    void Serialize(CVariant& value) const override;
 
     void UpdateSummary(void);
 
@@ -127,7 +127,7 @@ namespace PVR
      * @param tag A timer containing the data that shall be merged into this timer's data.
      * @return true if the timer was updated successfully
      */
-    bool UpdateEntry(const std::shared_ptr<CPVRTimerInfoTag> &tag);
+    bool UpdateEntry(const std::shared_ptr<CPVRTimerInfoTag>& tag);
 
     /*!
      * @brief merge in the state of this child timer.
@@ -183,7 +183,7 @@ namespace PVR
       * @brief Sets the type of this timer.
       * @param the new timer type.
       */
-    void SetTimerType(const std::shared_ptr<CPVRTimerType> &type);
+    void SetTimerType(const std::shared_ptr<CPVRTimerType>& type);
 
     /*!
       * @brief Checks whether this is a timer rule (vs. one time timer).
@@ -239,7 +239,7 @@ namespace PVR
      * @brief Get the text for the notification.
      * @param strText The notification.
      */
-    void GetNotificationText(std::string &strText) const;
+    void GetNotificationText(std::string& strText) const;
 
     /*!
     * @brief Get the text for the notification when a timer has been deleted
@@ -281,7 +281,7 @@ namespace PVR
      * @param strNewName The new name.
      * @return True on success, false otherwise.
      */
-    bool RenameOnClient(const std::string &strNewName);
+    bool RenameOnClient(const std::string& strNewName);
 
     /*!
      * @brief Update this timer on the backend, transferring all local data of this timer to the backend.
@@ -355,8 +355,8 @@ namespace PVR
     std::string m_strSeriesLink; /*!< series link */
 
   private:
-    CPVRTimerInfoTag(const CPVRTimerInfoTag &tag) = delete;
-    CPVRTimerInfoTag &operator=(const CPVRTimerInfoTag &orig) = delete;
+    CPVRTimerInfoTag(const CPVRTimerInfoTag& tag) = delete;
+    CPVRTimerInfoTag& operator=(const CPVRTimerInfoTag& orig) = delete;
 
     std::string GetWeekdaysString() const;
     void UpdateEpgInfoTag(void);
diff --git a/xbmc/pvr/timers/PVRTimerType.cpp b/xbmc/pvr/timers/PVRTimerType.cpp
index 5666122fd800..c81ed14f2fa7 100644
--- a/xbmc/pvr/timers/PVRTimerType.cpp
+++ b/xbmc/pvr/timers/PVRTimerType.cpp
@@ -165,7 +165,7 @@ CPVRTimerType::CPVRTimerType() :
 {
 }
 
-CPVRTimerType::CPVRTimerType(const PVR_TIMER_TYPE &type, int iClientId) :
+CPVRTimerType::CPVRTimerType(const PVR_TIMER_TYPE& type, int iClientId) :
   m_iClientId(iClientId),
   m_iTypeId(type.iId),
   m_iAttributes(type.iAttributes),
@@ -237,7 +237,7 @@ void CPVRTimerType::InitDescription()
   m_strDescription = StringUtils::Format(g_localizeStrings.Get(prefixId).c_str(), m_strDescription.c_str());
 }
 
-void CPVRTimerType::InitAttributeValues(const PVR_TIMER_TYPE &type)
+void CPVRTimerType::InitAttributeValues(const PVR_TIMER_TYPE& type)
 {
   InitPriorityValues(type);
   InitLifetimeValues(type);
@@ -246,7 +246,7 @@ void CPVRTimerType::InitAttributeValues(const PVR_TIMER_TYPE &type)
   InitRecordingGroupValues(type);
 }
 
-void CPVRTimerType::InitPriorityValues(const PVR_TIMER_TYPE &type)
+void CPVRTimerType::InitPriorityValues(const PVR_TIMER_TYPE& type)
 {
   if (type.iPrioritiesSize > 0)
   {
@@ -278,13 +278,13 @@ void CPVRTimerType::InitPriorityValues(const PVR_TIMER_TYPE &type)
   }
 }
 
-void CPVRTimerType::GetPriorityValues(std::vector< std::pair<std::string, int> > &list) const
+void CPVRTimerType::GetPriorityValues(std::vector< std::pair<std::string, int>>& list) const
 {
-  for (const auto &prio : m_priorityValues)
+  for (const auto& prio : m_priorityValues)
     list.push_back(prio);
 }
 
-void CPVRTimerType::InitLifetimeValues(const PVR_TIMER_TYPE &type)
+void CPVRTimerType::InitLifetimeValues(const PVR_TIMER_TYPE& type)
 {
   if (type.iLifetimesSize > 0)
   {
@@ -318,13 +318,13 @@ void CPVRTimerType::InitLifetimeValues(const PVR_TIMER_TYPE &type)
   }
 }
 
-void CPVRTimerType::GetLifetimeValues(std::vector< std::pair<std::string, int> > &list) const
+void CPVRTimerType::GetLifetimeValues(std::vector< std::pair<std::string, int>>& list) const
 {
-  for (const auto &lifetime : m_lifetimeValues)
+  for (const auto& lifetime : m_lifetimeValues)
     list.push_back(lifetime);
 }
 
-void CPVRTimerType::InitMaxRecordingsValues(const PVR_TIMER_TYPE &type)
+void CPVRTimerType::InitMaxRecordingsValues(const PVR_TIMER_TYPE& type)
 {
   if (type.iMaxRecordingsSize > 0)
   {
@@ -343,13 +343,13 @@ void CPVRTimerType::InitMaxRecordingsValues(const PVR_TIMER_TYPE &type)
   }
 }
 
-void CPVRTimerType::GetMaxRecordingsValues(std::vector< std::pair<std::string, int> > &list) const
+void CPVRTimerType::GetMaxRecordingsValues(std::vector< std::pair<std::string, int>>& list) const
 {
-  for (const auto &maxRecordings : m_maxRecordingsValues)
+  for (const auto& maxRecordings : m_maxRecordingsValues)
     list.push_back(maxRecordings);
 }
 
-void CPVRTimerType::InitPreventDuplicateEpisodesValues(const PVR_TIMER_TYPE &type)
+void CPVRTimerType::InitPreventDuplicateEpisodesValues(const PVR_TIMER_TYPE& type)
 {
   if (type.iPreventDuplicateEpisodesSize > 0)
   {
@@ -380,13 +380,13 @@ void CPVRTimerType::InitPreventDuplicateEpisodesValues(const PVR_TIMER_TYPE &typ
   }
 }
 
-void CPVRTimerType::GetPreventDuplicateEpisodesValues(std::vector< std::pair<std::string, int> > &list) const
+void CPVRTimerType::GetPreventDuplicateEpisodesValues(std::vector< std::pair<std::string, int>>& list) const
 {
-  for (const auto &preventDupEpisodes : m_preventDupEpisodesValues)
+  for (const auto& preventDupEpisodes : m_preventDupEpisodesValues)
     list.push_back(preventDupEpisodes);
 }
 
-void CPVRTimerType::InitRecordingGroupValues(const PVR_TIMER_TYPE &type)
+void CPVRTimerType::InitRecordingGroupValues(const PVR_TIMER_TYPE& type)
 {
   if (type.iRecordingGroupSize > 0)
   {
@@ -407,8 +407,8 @@ void CPVRTimerType::InitRecordingGroupValues(const PVR_TIMER_TYPE &type)
   }
 }
 
-void CPVRTimerType::GetRecordingGroupValues(std::vector< std::pair<std::string, int> > &list) const
+void CPVRTimerType::GetRecordingGroupValues(std::vector< std::pair<std::string, int>>& list) const
 {
-  for (const auto &recordingGroup : m_recordingGroupValues)
+  for (const auto& recordingGroup : m_recordingGroupValues)
     list.push_back(recordingGroup);
 }
diff --git a/xbmc/pvr/timers/PVRTimerType.h b/xbmc/pvr/timers/PVRTimerType.h
index dc2e4314b188..9075696e5261 100644
--- a/xbmc/pvr/timers/PVRTimerType.h
+++ b/xbmc/pvr/timers/PVRTimerType.h
@@ -59,16 +59,16 @@ namespace PVR
     static std::shared_ptr<CPVRTimerType> CreateFromAttributes(unsigned int iMustHaveAttr, unsigned int iMustNotHaveAttr, int iClientId);
 
     CPVRTimerType();
-    CPVRTimerType(const PVR_TIMER_TYPE &type, int iClientId);
+    CPVRTimerType(const PVR_TIMER_TYPE& type, int iClientId);
     CPVRTimerType(unsigned int iTypeId, unsigned int iAttributes, const std::string& strDescription = "");
 
     virtual ~CPVRTimerType();
 
-    CPVRTimerType(const CPVRTimerType &type) = delete;
-    CPVRTimerType &operator=(const CPVRTimerType &orig) = delete;
+    CPVRTimerType(const CPVRTimerType& type) = delete;
+    CPVRTimerType& operator=(const CPVRTimerType& orig) = delete;
 
-    bool operator ==(const CPVRTimerType &right) const;
-    bool operator !=(const CPVRTimerType &right) const;
+    bool operator ==(const CPVRTimerType& right) const;
+    bool operator !=(const CPVRTimerType& right) const;
 
     /*!
      * @brief Get the PVR client id for this type.
@@ -310,7 +310,7 @@ namespace PVR
      * @brief Obtain a list with all possible values for the priority attribute.
      * @param list out, the list with the values or an empty list, if priority is not supported by this type.
      */
-    void GetPriorityValues(std::vector< std::pair<std::string, int> > &list) const;
+    void GetPriorityValues(std::vector< std::pair<std::string, int>>& list) const;
 
     /*!
      * @brief Obtain the default value for the priority attribute.
@@ -322,7 +322,7 @@ namespace PVR
      * @brief Obtain a list with all possible values for the lifetime attribute.
      * @param list out, the list with the values or an empty list, if lifetime is not supported by this type.
      */
-    void GetLifetimeValues(std::vector< std::pair<std::string, int> > &list) const;
+    void GetLifetimeValues(std::vector< std::pair<std::string, int>>& list) const;
 
     /*!
      * @brief Obtain the default value for the lifetime attribute.
@@ -334,7 +334,7 @@ namespace PVR
      * @brief Obtain a list with all possible values for the MaxRecordings attribute.
      * @param list out, the list with the values or an empty list, if MaxRecordings is not supported by this type.
      */
-    void GetMaxRecordingsValues(std::vector< std::pair<std::string, int> > &list) const;
+    void GetMaxRecordingsValues(std::vector< std::pair<std::string, int>>& list) const;
 
     /*!
      * @brief Obtain the default value for the MaxRecordings attribute.
@@ -346,7 +346,7 @@ namespace PVR
      * @brief Obtain a list with all possible values for the duplicate episode prevention attribute.
      * @param list out, the list with the values or an empty list, if duplicate episode prevention is not supported by this type.
      */
-    void GetPreventDuplicateEpisodesValues(std::vector< std::pair<std::string, int> > &list) const;
+    void GetPreventDuplicateEpisodesValues(std::vector< std::pair<std::string, int>>& list) const;
 
     /*!
      * @brief Obtain the default value for the duplicate episode prevention attribute.
@@ -358,7 +358,7 @@ namespace PVR
      * @brief Obtain a list with all possible values for the recording group attribute.
      * @param list out, the list with the values or an empty list, if recording group is not supported by this type.
      */
-    void GetRecordingGroupValues(std::vector< std::pair<std::string, int> > &list) const;
+    void GetRecordingGroupValues(std::vector< std::pair<std::string, int>>& list) const;
 
     /*!
      * @brief Obtain the default value for the Recording Group attribute.
@@ -368,12 +368,12 @@ namespace PVR
 
   private:
     void InitDescription();
-    void InitAttributeValues(const PVR_TIMER_TYPE &type);
-    void InitPriorityValues(const PVR_TIMER_TYPE &type);
-    void InitLifetimeValues(const PVR_TIMER_TYPE &type);
-    void InitMaxRecordingsValues(const PVR_TIMER_TYPE &type);
-    void InitPreventDuplicateEpisodesValues(const PVR_TIMER_TYPE &type);
-    void InitRecordingGroupValues(const PVR_TIMER_TYPE &type);
+    void InitAttributeValues(const PVR_TIMER_TYPE& type);
+    void InitPriorityValues(const PVR_TIMER_TYPE& type);
+    void InitLifetimeValues(const PVR_TIMER_TYPE& type);
+    void InitMaxRecordingsValues(const PVR_TIMER_TYPE& type);
+    void InitPreventDuplicateEpisodesValues(const PVR_TIMER_TYPE& type);
+    void InitRecordingGroupValues(const PVR_TIMER_TYPE& type);
 
     int           m_iClientId = -1;
     unsigned int  m_iTypeId;
diff --git a/xbmc/pvr/timers/PVRTimers.cpp b/xbmc/pvr/timers/PVRTimers.cpp
index b24a4a0b490a..52f8e1c269d4 100644
--- a/xbmc/pvr/timers/PVRTimers.cpp
+++ b/xbmc/pvr/timers/PVRTimers.cpp
@@ -33,7 +33,7 @@
 
 using namespace PVR;
 
-bool CPVRTimersContainer::UpdateFromClient(const std::shared_ptr<CPVRTimerInfoTag> &timer)
+bool CPVRTimersContainer::UpdateFromClient(const std::shared_ptr<CPVRTimerInfoTag>& timer)
 {
   CSingleLock lock(m_critSection);
   std::shared_ptr<CPVRTimerInfoTag> tag = GetByClient(timer->m_iClientId, timer->m_iClientIndex);
@@ -201,7 +201,7 @@ void CPVRTimers::RemoveEntry(const std::shared_ptr<CPVRTimerInfoTag>& tag)
   }
 }
 
-bool CPVRTimers::UpdateEntries(const CPVRTimersContainer &timers, const std::vector<int> &failedClients)
+bool CPVRTimers::UpdateEntries(const CPVRTimersContainer& timers, const std::vector<int>& failedClients)
 {
   bool bChanged(false);
   bool bAddedOrDeleted(false);
@@ -332,9 +332,9 @@ bool CPVRTimers::UpdateEntries(const CPVRTimersContainer &timers, const std::vec
   }
 
   /* update child information for all parent timers */
-  for (const auto &tagsEntry : m_tags)
+  for (const auto& tagsEntry : m_tags)
   {
-    for (const auto &timersEntry : tagsEntry.second)
+    for (const auto& timersEntry : tagsEntry.second)
     {
       if (timersEntry->IsTimerRule())
         timersEntry->ResetChildState();
@@ -361,7 +361,7 @@ bool CPVRTimers::UpdateEntries(const CPVRTimersContainer &timers, const std::vec
       CPVREventlogJob *job = new CPVREventlogJob;
 
       /* queue notifications / fill eventlog */
-      for (const auto &entry : timerNotifications)
+      for (const auto& entry : timerNotifications)
       {
         const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(entry.first);
         if (client)
@@ -670,20 +670,20 @@ std::shared_ptr<CPVRTimerInfoTag> CPVRTimers::GetNextReminderToAnnnounce()
   return ret;
 }
 
-bool CPVRTimers::KindMatchesTag(const TimerKind &eKind, const std::shared_ptr<CPVRTimerInfoTag> &tag) const
+bool CPVRTimers::KindMatchesTag(const TimerKind& eKind, const std::shared_ptr<CPVRTimerInfoTag>& tag) const
 {
   return (eKind == TimerKindAny) ||
          (eKind == TimerKindTV && !tag->m_bIsRadio) ||
          (eKind == TimerKindRadio && tag->m_bIsRadio);
 }
 
-std::shared_ptr<CPVRTimerInfoTag> CPVRTimers::GetNextActiveTimer(const TimerKind &eKind, bool bIgnoreReminders) const
+std::shared_ptr<CPVRTimerInfoTag> CPVRTimers::GetNextActiveTimer(const TimerKind& eKind, bool bIgnoreReminders) const
 {
   CSingleLock lock(m_critSection);
 
-  for (const auto &tagsEntry : m_tags)
+  for (const auto& tagsEntry : m_tags)
   {
-    for (const auto &timersEntry : tagsEntry.second)
+    for (const auto& timersEntry : tagsEntry.second)
     {
       if (bIgnoreReminders && timersEntry->IsReminder())
         continue;
@@ -738,14 +738,14 @@ std::vector<std::shared_ptr<CPVRTimerInfoTag>> CPVRTimers::GetActiveTimers(void)
   return tags;
 }
 
-int CPVRTimers::AmountActiveTimers(const TimerKind &eKind) const
+int CPVRTimers::AmountActiveTimers(const TimerKind& eKind) const
 {
   int iReturn = 0;
   CSingleLock lock(m_critSection);
 
-  for (const auto &tagsEntry : m_tags)
+  for (const auto& tagsEntry : m_tags)
   {
-    for (const auto &timersEntry : tagsEntry.second)
+    for (const auto& timersEntry : tagsEntry.second)
     {
       if (KindMatchesTag(eKind, timersEntry) &&
           timersEntry->IsActive() &&
@@ -779,9 +779,9 @@ std::vector<std::shared_ptr<CPVRTimerInfoTag>> CPVRTimers::GetActiveRecordings(c
   std::vector<std::shared_ptr<CPVRTimerInfoTag>> tags;
   CSingleLock lock(m_critSection);
 
-  for (const auto &tagsEntry : m_tags)
+  for (const auto& tagsEntry : m_tags)
   {
-    for (const auto &timersEntry : tagsEntry.second)
+    for (const auto& timersEntry : tagsEntry.second)
     {
       if (KindMatchesTag(eKind, timersEntry) &&
           timersEntry->IsRecording() &&
@@ -812,14 +812,14 @@ std::vector<std::shared_ptr<CPVRTimerInfoTag>> CPVRTimers::GetActiveRadioRecordi
   return GetActiveRecordings(TimerKindRadio);
 }
 
-int CPVRTimers::AmountActiveRecordings(const TimerKind &eKind) const
+int CPVRTimers::AmountActiveRecordings(const TimerKind& eKind) const
 {
   int iReturn = 0;
   CSingleLock lock(m_critSection);
 
-  for (const auto &tagsEntry : m_tags)
+  for (const auto& tagsEntry : m_tags)
   {
-    for (const auto &timersEntry : tagsEntry.second)
+    for (const auto& timersEntry : tagsEntry.second)
     {
       if (KindMatchesTag(eKind, timersEntry) &&
           timersEntry->IsRecording() &&
@@ -850,7 +850,7 @@ int CPVRTimers::AmountActiveRadioRecordings(void) const
 
 /********** channel methods **********/
 
-bool CPVRTimers::DeleteTimersOnChannel(const std::shared_ptr<CPVRChannel> &channel, bool bDeleteTimerRules /* = true */, bool bCurrentlyActiveOnly /* = false */)
+bool CPVRTimers::DeleteTimersOnChannel(const std::shared_ptr<CPVRChannel>& channel, bool bDeleteTimerRules /* = true */, bool bCurrentlyActiveOnly /* = false */)
 {
   bool bReturn = false;
   bool bChanged = false;
@@ -917,7 +917,7 @@ std::shared_ptr<CPVRTimerInfoTag> CPVRTimers::UpdateEntry(const std::shared_ptr<
   return bChanged ? tag : std::shared_ptr<CPVRTimerInfoTag>();
 }
 
-bool CPVRTimers::AddTimer(const std::shared_ptr<CPVRTimerInfoTag> &tag)
+bool CPVRTimers::AddTimer(const std::shared_ptr<CPVRTimerInfoTag>& tag)
 {
   bool bReturn = false;
   if (tag->IsOwnedByClient())
@@ -931,7 +931,7 @@ bool CPVRTimers::AddTimer(const std::shared_ptr<CPVRTimerInfoTag> &tag)
   return bReturn;
 }
 
-TimerOperationResult CPVRTimers::DeleteTimer(const std::shared_ptr<CPVRTimerInfoTag> &tag, bool bForce /* = false */, bool bDeleteRule /* = false */)
+TimerOperationResult CPVRTimers::DeleteTimer(const std::shared_ptr<CPVRTimerInfoTag>& tag, bool bForce /* = false */, bool bDeleteRule /* = false */)
 {
   TimerOperationResult ret = TimerOperationResult::FAILED;
   if (!tag)
@@ -965,7 +965,7 @@ TimerOperationResult CPVRTimers::DeleteTimer(const std::shared_ptr<CPVRTimerInfo
   return ret;
 }
 
-bool CPVRTimers::RenameTimer(const std::shared_ptr<CPVRTimerInfoTag> &tag, const std::string &strNewName)
+bool CPVRTimers::RenameTimer(const std::shared_ptr<CPVRTimerInfoTag>& tag, const std::string& strNewName)
 {
   bool bReturn = false;
   if (tag->IsOwnedByClient())
@@ -979,7 +979,7 @@ bool CPVRTimers::RenameTimer(const std::shared_ptr<CPVRTimerInfoTag> &tag, const
   return bReturn;
 }
 
-bool CPVRTimers::UpdateTimer(const std::shared_ptr<CPVRTimerInfoTag> &tag)
+bool CPVRTimers::UpdateTimer(const std::shared_ptr<CPVRTimerInfoTag>& tag)
 {
   bool bReturn = false;
   if (tag->IsOwnedByClient())
@@ -1129,7 +1129,7 @@ std::shared_ptr<CPVRTimerInfoTag> CPVRTimers::PersistAndUpdateLocalTimer(
   return bReturn ? tag : std::shared_ptr<CPVRTimerInfoTag>();
 }
 
-bool CPVRTimers::IsRecordingOnChannel(const CPVRChannel &channel) const
+bool CPVRTimers::IsRecordingOnChannel(const CPVRChannel& channel) const
 {
   CSingleLock lock(m_critSection);
 
@@ -1147,12 +1147,12 @@ bool CPVRTimers::IsRecordingOnChannel(const CPVRChannel &channel) const
   return false;
 }
 
-std::shared_ptr<CPVRTimerInfoTag> CPVRTimers::GetActiveTimerForChannel(const std::shared_ptr<CPVRChannel> &channel) const
+std::shared_ptr<CPVRTimerInfoTag> CPVRTimers::GetActiveTimerForChannel(const std::shared_ptr<CPVRChannel>& channel) const
 {
   CSingleLock lock(m_critSection);
-  for (const auto &tagsEntry : m_tags)
+  for (const auto& tagsEntry : m_tags)
   {
-    for (const auto &timersEntry : tagsEntry.second)
+    for (const auto& timersEntry : tagsEntry.second)
     {
       if (timersEntry->IsRecording() &&
           timersEntry->m_iClientChannelUid == channel->UniqueID() &&
@@ -1164,15 +1164,15 @@ std::shared_ptr<CPVRTimerInfoTag> CPVRTimers::GetActiveTimerForChannel(const std
   return std::shared_ptr<CPVRTimerInfoTag>();
 }
 
-std::shared_ptr<CPVRTimerInfoTag> CPVRTimers::GetTimerForEpgTag(const std::shared_ptr<CPVREpgInfoTag> &epgTag) const
+std::shared_ptr<CPVRTimerInfoTag> CPVRTimers::GetTimerForEpgTag(const std::shared_ptr<CPVREpgInfoTag>& epgTag) const
 {
   if (epgTag)
   {
     CSingleLock lock(m_critSection);
 
-    for (const auto &tagsEntry : m_tags)
+    for (const auto& tagsEntry : m_tags)
     {
-      for (const auto &timersEntry : tagsEntry.second)
+      for (const auto& timersEntry : tagsEntry.second)
       {
         if (timersEntry->IsTimerRule())
           continue;
@@ -1199,7 +1199,7 @@ std::shared_ptr<CPVRTimerInfoTag> CPVRTimers::GetTimerForEpgTag(const std::share
   return std::shared_ptr<CPVRTimerInfoTag>();
 }
 
-std::shared_ptr<CPVRTimerInfoTag> CPVRTimers::GetTimerRule(const std::shared_ptr<CPVRTimerInfoTag> &timer) const
+std::shared_ptr<CPVRTimerInfoTag> CPVRTimers::GetTimerRule(const std::shared_ptr<CPVRTimerInfoTag>& timer) const
 {
   if (timer)
   {
@@ -1209,9 +1209,9 @@ std::shared_ptr<CPVRTimerInfoTag> CPVRTimers::GetTimerRule(const std::shared_ptr
       int iClientId = timer->m_iClientId;
 
       CSingleLock lock(m_critSection);
-      for (const auto &tagsEntry : m_tags)
+      for (const auto& tagsEntry : m_tags)
       {
-        for (const auto &timersEntry : tagsEntry.second)
+        for (const auto& timersEntry : tagsEntry.second)
         {
           if (timersEntry->m_iClientId == iClientId && timersEntry->m_iClientIndex == iRuleId)
             return timersEntry;
diff --git a/xbmc/pvr/timers/PVRTimers.h b/xbmc/pvr/timers/PVRTimers.h
index dff9e3049b3b..c2854b4b97a9 100644
--- a/xbmc/pvr/timers/PVRTimers.h
+++ b/xbmc/pvr/timers/PVRTimers.h
@@ -35,7 +35,7 @@ namespace PVR
      * @param The timer tag
      * @return True, if the update was successful. False, otherwise.
      */
-    bool UpdateFromClient(const std::shared_ptr<CPVRTimerInfoTag> &timer);
+    bool UpdateFromClient(const std::shared_ptr<CPVRTimerInfoTag>& timer);
 
     /*!
      * @brief Get the timer tag denoted by given client id and timer id.
@@ -162,14 +162,14 @@ namespace PVR
      * @param channel The channel to check.
      * @return True when recording, false otherwise.
      */
-    bool IsRecordingOnChannel(const CPVRChannel &channel) const;
+    bool IsRecordingOnChannel(const CPVRChannel& channel) const;
 
     /*!
      * @brief Obtain the active timer for a given channel.
      * @param channel The channel to check.
      * @return the timer, null otherwise.
      */
-    std::shared_ptr<CPVRTimerInfoTag> GetActiveTimerForChannel(const std::shared_ptr<CPVRChannel> &channel) const;
+    std::shared_ptr<CPVRTimerInfoTag> GetActiveTimerForChannel(const std::shared_ptr<CPVRChannel>& channel) const;
 
     /*!
      * @return The amount of tv and radio timers that are currently recording
@@ -193,7 +193,7 @@ namespace PVR
      * @param bCurrentlyActiveOnly True to delete timers that are currently running only.
      * @return True if timers any were deleted, false otherwise.
      */
-    bool DeleteTimersOnChannel(const std::shared_ptr<CPVRChannel> &channel, bool bDeleteTimerRules = true, bool bCurrentlyActiveOnly = false);
+    bool DeleteTimersOnChannel(const std::shared_ptr<CPVRChannel>& channel, bool bDeleteTimerRules = true, bool bCurrentlyActiveOnly = false);
 
     /*!
      * @return Next event time (timer or daily wake up)
@@ -222,7 +222,7 @@ namespace PVR
      * @param tag The timer to rename.
      * @return True if timer rename request was sent correctly, false if not.
      */
-    bool RenameTimer(const std::shared_ptr<CPVRTimerInfoTag>& tag, const std::string &strNewName);
+    bool RenameTimer(const std::shared_ptr<CPVRTimerInfoTag>& tag, const std::string& strNewName);
 
     /*!
      * @brief Update the timer on the client. Doesn't update the timer in the container. The backend will do this.
@@ -236,14 +236,14 @@ namespace PVR
      * @param epgTag The epg tag.
      * @return The requested timer tag, or nullptr if none was found.
      */
-    std::shared_ptr<CPVRTimerInfoTag> GetTimerForEpgTag(const std::shared_ptr<CPVREpgInfoTag> &epgTag) const;
+    std::shared_ptr<CPVRTimerInfoTag> GetTimerForEpgTag(const std::shared_ptr<CPVREpgInfoTag>& epgTag) const;
 
     /*!
      * @brief Get the timer rule for a given timer tag
      * @param timer The timer to query the timer rule for
      * @return The timer rule, or nullptr if none was found.
      */
-    std::shared_ptr<CPVRTimerInfoTag> GetTimerRule(const std::shared_ptr<CPVRTimerInfoTag> &timer) const;
+    std::shared_ptr<CPVRTimerInfoTag> GetTimerRule(const std::shared_ptr<CPVRTimerInfoTag>& timer) const;
 
     /*!
      * @brief Update the channel pointers.
@@ -267,7 +267,7 @@ namespace PVR
     void Process() override;
 
     void RemoveEntry(const std::shared_ptr<CPVRTimerInfoTag>& tag);
-    bool UpdateEntries(const CPVRTimersContainer &timers, const std::vector<int> &failedClients);
+    bool UpdateEntries(const CPVRTimersContainer& timers, const std::vector<int>& failedClients);
     bool UpdateEntries(int iMaxNotificationDelay);
     std::shared_ptr<CPVRTimerInfoTag> UpdateEntry(const std::shared_ptr<CPVRTimerInfoTag>& timer);
 
@@ -286,12 +286,12 @@ namespace PVR
       TimerKindRadio
     };
 
-    bool KindMatchesTag(const TimerKind &eKind, const std::shared_ptr<CPVRTimerInfoTag> &tag) const;
+    bool KindMatchesTag(const TimerKind& eKind, const std::shared_ptr<CPVRTimerInfoTag>& tag) const;
 
     std::shared_ptr<CPVRTimerInfoTag> GetNextActiveTimer(const TimerKind& eKind, bool bIgnoreReminders) const;
-    int AmountActiveTimers(const TimerKind &eKind) const;
+    int AmountActiveTimers(const TimerKind& eKind) const;
     std::vector<std::shared_ptr<CPVRTimerInfoTag>> GetActiveRecordings(const TimerKind& eKind) const;
-    int AmountActiveRecordings(const TimerKind &eKind) const;
+    int AmountActiveRecordings(const TimerKind& eKind) const;
 
     bool m_bIsUpdating = false;
     CPVRSettings m_settings;
diff --git a/xbmc/pvr/timers/PVRTimersPath.h b/xbmc/pvr/timers/PVRTimersPath.h
index 11a54fb17b2e..a577692e07b1 100644
--- a/xbmc/pvr/timers/PVRTimersPath.h
+++ b/xbmc/pvr/timers/PVRTimersPath.h
@@ -33,7 +33,7 @@ namespace PVR
     int GetParentId() const { return m_iParentId; }
 
   private:
-    bool Init(const std::string &strPath);
+    bool Init(const std::string& strPath);
 
     std::string m_path;
     bool m_bValid = false;
diff --git a/xbmc/pvr/windows/GUIEPGGridContainer.cpp b/xbmc/pvr/windows/GUIEPGGridContainer.cpp
index cdb467187231..354a2eefc9d5 100644
--- a/xbmc/pvr/windows/GUIEPGGridContainer.cpp
+++ b/xbmc/pvr/windows/GUIEPGGridContainer.cpp
@@ -89,7 +89,7 @@ CGUIEPGGridContainer::CGUIEPGGridContainer(int parentID, int controlID, float po
   ControlType = GUICONTAINER_EPGGRID;
 }
 
-CGUIEPGGridContainer::CGUIEPGGridContainer(const CGUIEPGGridContainer &other)
+CGUIEPGGridContainer::CGUIEPGGridContainer(const CGUIEPGGridContainer& other)
 : IGUIContainer(other),
   m_renderOffset(other.m_renderOffset),
   m_orientation(other.m_orientation),
@@ -172,7 +172,7 @@ void CGUIEPGGridContainer::SetPageControl(int id)
   m_pageControl = id;
 }
 
-void CGUIEPGGridContainer::Process(unsigned int currentTime, CDirtyRegionList &dirtyregions)
+void CGUIEPGGridContainer::Process(unsigned int currentTime, CDirtyRegionList& dirtyregions)
 {
   ValidateOffset();
 
@@ -232,7 +232,7 @@ void CGUIEPGGridContainer::Render()
   CGUIControl::Render();
 }
 
-void CGUIEPGGridContainer::ProcessChannels(unsigned int currentTime, CDirtyRegionList &dirtyregions)
+void CGUIEPGGridContainer::ProcessChannels(unsigned int currentTime, CDirtyRegionList& dirtyregions)
 {
   HandleChannels(false, currentTime, dirtyregions);
 }
@@ -245,7 +245,7 @@ void CGUIEPGGridContainer::RenderChannels()
   HandleChannels(true, dummyTime, dummyRegions);
 }
 
-void CGUIEPGGridContainer::ProcessRulerDate(unsigned int currentTime, CDirtyRegionList &dirtyregions)
+void CGUIEPGGridContainer::ProcessRulerDate(unsigned int currentTime, CDirtyRegionList& dirtyregions)
 {
   HandleRulerDate(false, currentTime, dirtyregions);
 }
@@ -258,7 +258,7 @@ void CGUIEPGGridContainer::RenderRulerDate()
   HandleRulerDate(true, dummyTime, dummyRegions);
 }
 
-void CGUIEPGGridContainer::ProcessRuler(unsigned int currentTime, CDirtyRegionList &dirtyregions)
+void CGUIEPGGridContainer::ProcessRuler(unsigned int currentTime, CDirtyRegionList& dirtyregions)
 {
   HandleRuler(false, currentTime, dirtyregions);
 }
@@ -271,7 +271,7 @@ void CGUIEPGGridContainer::RenderRuler()
   HandleRuler(true, dummyTime, dummyRegions);
 }
 
-void CGUIEPGGridContainer::ProcessProgrammeGrid(unsigned int currentTime, CDirtyRegionList &dirtyregions)
+void CGUIEPGGridContainer::ProcessProgrammeGrid(unsigned int currentTime, CDirtyRegionList& dirtyregions)
 {
   HandleProgrammeGrid(false, currentTime, dirtyregions);
 }
@@ -304,7 +304,7 @@ float CGUIEPGGridContainer::GetProgressIndicatorHeight() const
   return (m_orientation == VERTICAL) ? m_rulerHeight + m_gridHeight : GetCurrentTimePositionOnPage();
 }
 
-void CGUIEPGGridContainer::ProcessProgressIndicator(unsigned int currentTime, CDirtyRegionList &dirtyregions)
+void CGUIEPGGridContainer::ProcessProgressIndicator(unsigned int currentTime, CDirtyRegionList& dirtyregions)
 {
   float width = GetProgressIndicatorWidth();
   float height = GetProgressIndicatorHeight();
@@ -334,9 +334,9 @@ void CGUIEPGGridContainer::RenderProgressIndicator()
   }
 }
 
-void CGUIEPGGridContainer::ProcessItem(float posX, float posY, const CFileItemPtr &item, CFileItemPtr &lastitem,
+void CGUIEPGGridContainer::ProcessItem(float posX, float posY, const CFileItemPtr& item, CFileItemPtr& lastitem,
   bool focused, CGUIListItemLayout* normallayout, CGUIListItemLayout* focusedlayout,
-  unsigned int currentTime, CDirtyRegionList &dirtyregions, float resize /* = -1.0f */)
+  unsigned int currentTime, CDirtyRegionList& dirtyregions, float resize /* = -1.0f */)
 {
   if (!normallayout || !focusedlayout)
     return;
@@ -425,7 +425,7 @@ void CGUIEPGGridContainer::RenderItem(float posX, float posY, CGUIListItem *item
   CServiceBroker::GetWinSystem()->GetGfxContext().RestoreOrigin();
 }
 
-bool CGUIEPGGridContainer::OnAction(const CAction &action)
+bool CGUIEPGGridContainer::OnAction(const CAction& action)
 {
   switch (action.GetID())
   {
@@ -1049,7 +1049,7 @@ void CGUIEPGGridContainer::OnRight()
   }
 }
 
-bool CGUIEPGGridContainer::SetChannel(const std::string &channel)
+bool CGUIEPGGridContainer::SetChannel(const std::string& channel)
 {
   for (int iIndex = 0; iIndex < m_gridModel->ChannelItemsSize(); iIndex++)
   {
@@ -1063,7 +1063,7 @@ bool CGUIEPGGridContainer::SetChannel(const std::string &channel)
   return false;
 }
 
-bool CGUIEPGGridContainer::SetChannel(const std::shared_ptr<CPVRChannel> &channel)
+bool CGUIEPGGridContainer::SetChannel(const std::shared_ptr<CPVRChannel>& channel)
 {
   for (int iIndex = 0; iIndex < m_gridModel->ChannelItemsSize(); iIndex++)
   {
@@ -1123,7 +1123,7 @@ CGUIListItemLayout *CGUIEPGGridContainer::GetFocusedLayout() const
   return nullptr;
 }
 
-bool CGUIEPGGridContainer::SelectItemFromPoint(const CPoint &point, bool justGrid /* = false */)
+bool CGUIEPGGridContainer::SelectItemFromPoint(const CPoint& point, bool justGrid /* = false */)
 {
   /* point has already had origin set to m_posX, m_posY */
   if (!m_focusedProgrammeLayout || !m_programmeLayout || (justGrid && point.x < 0))
@@ -1174,7 +1174,7 @@ bool CGUIEPGGridContainer::SelectItemFromPoint(const CPoint &point, bool justGri
   return true;
 }
 
-EVENT_RESULT CGUIEPGGridContainer::OnMouseEvent(const CPoint &point, const CMouseEvent &event)
+EVENT_RESULT CGUIEPGGridContainer::OnMouseEvent(const CPoint& point, const CMouseEvent& event)
 {
   switch (event.m_id)
   {
@@ -1231,14 +1231,14 @@ EVENT_RESULT CGUIEPGGridContainer::OnMouseEvent(const CPoint &point, const CMous
   }
 }
 
-bool CGUIEPGGridContainer::OnMouseOver(const CPoint &point)
+bool CGUIEPGGridContainer::OnMouseOver(const CPoint& point)
 {
   // select the item under the pointer
   SelectItemFromPoint(point - CPoint(m_gridPosX, m_gridPosY), false);
   return CGUIControl::OnMouseOver(point);
 }
 
-bool CGUIEPGGridContainer::OnMouseClick(int dwButton, const CPoint &point)
+bool CGUIEPGGridContainer::OnMouseClick(int dwButton, const CPoint& point)
 {
   if (SelectItemFromPoint(point - CPoint(m_gridPosX, m_gridPosY)))
   {
@@ -1249,7 +1249,7 @@ bool CGUIEPGGridContainer::OnMouseClick(int dwButton, const CPoint &point)
   return false;
 }
 
-bool CGUIEPGGridContainer::OnMouseDoubleClick(int dwButton, const CPoint &point)
+bool CGUIEPGGridContainer::OnMouseDoubleClick(int dwButton, const CPoint& point)
 {
   if (SelectItemFromPoint(point - CPoint(m_gridPosX, m_gridPosY)))
   {
@@ -1278,7 +1278,7 @@ bool CGUIEPGGridContainer::OnClick(int actionID)
   return SendWindowMessage(msg);
 }
 
-bool CGUIEPGGridContainer::OnMouseWheel(char wheel, const CPoint &point)
+bool CGUIEPGGridContainer::OnMouseWheel(char wheel, const CPoint& point)
 {
   // doesn't work while an item is selected?
   ProgrammesScroll(-wheel);
@@ -1384,7 +1384,7 @@ std::string CGUIEPGGridContainer::GetLabel(int info) const
   return label;
 }
 
-int CGUIEPGGridContainer::GetBlock(const CGUIListItemPtr &item, int channel)
+int CGUIEPGGridContainer::GetBlock(const CGUIListItemPtr& item, int channel)
 {
   if (!item)
     return 0;
@@ -1392,7 +1392,7 @@ int CGUIEPGGridContainer::GetBlock(const CGUIListItemPtr &item, int channel)
   return GetRealBlock(item, channel) - m_blockOffset;
 }
 
-int CGUIEPGGridContainer::GetRealBlock(const CGUIListItemPtr &item, int channel)
+int CGUIEPGGridContainer::GetRealBlock(const CGUIListItemPtr& item, int channel)
 {
   int channelIndex = channel + m_channelOffset;
   int block = 0;
@@ -1648,7 +1648,7 @@ void CGUIEPGGridContainer::GoToNow()
   SetBlock(m_gridModel->GetPageNowOffset());
 }
 
-void CGUIEPGGridContainer::GoToDate(const CDateTime &date)
+void CGUIEPGGridContainer::GoToDate(const CDateTime& date)
 {
   unsigned int offset = m_gridModel->GetPageNowOffset();
   ScrollToBlockOffset(m_gridModel->GetBlock(date) - offset);
@@ -1711,7 +1711,7 @@ void CGUIEPGGridContainer::GoToMostRight()
   }
 }
 
-void CGUIEPGGridContainer::SetTimelineItems(const std::unique_ptr<CFileItemList> &items, const CDateTime &gridStart, const CDateTime &gridEnd)
+void CGUIEPGGridContainer::SetTimelineItems(const std::unique_ptr<CFileItemList>& items, const CDateTime& gridStart, const CDateTime& gridEnd)
 {
   int iRulerUnit;
   int iBlocksPerPage;
@@ -1963,12 +1963,12 @@ void CGUIEPGGridContainer::GetCurrentLayouts()
   // Note: m_rulerDateLayout is optional; so no "failsafe" logic here (see above)
 }
 
-void CGUIEPGGridContainer::SetRenderOffset(const CPoint &offset)
+void CGUIEPGGridContainer::SetRenderOffset(const CPoint& offset)
 {
   m_renderOffset = offset;
 }
 
-void CGUIEPGGridContainer::GetChannelCacheOffsets(int &cacheBefore, int &cacheAfter)
+void CGUIEPGGridContainer::GetChannelCacheOffsets(int& cacheBefore, int& cacheAfter)
 {
   if (m_channelScrollSpeed > 0)
   {
@@ -1987,7 +1987,7 @@ void CGUIEPGGridContainer::GetChannelCacheOffsets(int &cacheBefore, int &cacheAf
   }
 }
 
-void CGUIEPGGridContainer::GetProgrammeCacheOffsets(int &cacheBefore, int &cacheAfter)
+void CGUIEPGGridContainer::GetProgrammeCacheOffsets(int& cacheBefore, int& cacheAfter)
 {
   if (m_programmeScrollSpeed > 0)
   {
@@ -2006,7 +2006,7 @@ void CGUIEPGGridContainer::GetProgrammeCacheOffsets(int &cacheBefore, int &cache
   }
 }
 
-void CGUIEPGGridContainer::HandleChannels(bool bRender, unsigned int currentTime, CDirtyRegionList &dirtyregions)
+void CGUIEPGGridContainer::HandleChannels(bool bRender, unsigned int currentTime, CDirtyRegionList& dirtyregions)
 {
   if (!m_focusedChannelLayout || !m_channelLayout)
     return;
@@ -2114,7 +2114,7 @@ void CGUIEPGGridContainer::HandleChannels(bool bRender, unsigned int currentTime
   }
 }
 
-void CGUIEPGGridContainer::HandleRulerDate(bool bRender, unsigned int currentTime, CDirtyRegionList &dirtyregions)
+void CGUIEPGGridContainer::HandleRulerDate(bool bRender, unsigned int currentTime, CDirtyRegionList& dirtyregions)
 {
   if (!m_rulerDateLayout || m_gridModel->RulerItemsSize() <= 1 || m_gridModel->IsZeroGridDuration())
     return;
@@ -2138,7 +2138,7 @@ void CGUIEPGGridContainer::HandleRulerDate(bool bRender, unsigned int currentTim
   }
 }
 
-void CGUIEPGGridContainer::HandleRuler(bool bRender, unsigned int currentTime, CDirtyRegionList &dirtyregions)
+void CGUIEPGGridContainer::HandleRuler(bool bRender, unsigned int currentTime, CDirtyRegionList& dirtyregions)
 {
   if (!m_rulerLayout || m_gridModel->RulerItemsSize() <= 1 || m_gridModel->IsZeroGridDuration())
     return;
@@ -2244,7 +2244,7 @@ void CGUIEPGGridContainer::HandleRuler(bool bRender, unsigned int currentTime, C
     CServiceBroker::GetWinSystem()->GetGfxContext().RestoreClipRegion();
 }
 
-void CGUIEPGGridContainer::HandleProgrammeGrid(bool bRender, unsigned int currentTime, CDirtyRegionList &dirtyregions)
+void CGUIEPGGridContainer::HandleProgrammeGrid(bool bRender, unsigned int currentTime, CDirtyRegionList& dirtyregions)
 {
   if (!m_focusedProgrammeLayout || !m_programmeLayout || m_gridModel->RulerItemsSize() <= 1 || m_gridModel->IsZeroGridDuration())
     return;
diff --git a/xbmc/pvr/windows/GUIEPGGridContainer.h b/xbmc/pvr/windows/GUIEPGGridContainer.h
index cdd2cabbb752..4af89860c850 100644
--- a/xbmc/pvr/windows/GUIEPGGridContainer.h
+++ b/xbmc/pvr/windows/GUIEPGGridContainer.h
@@ -39,7 +39,7 @@ namespace PVR
     CGUIEPGGridContainer(int parentID, int controlID, float posX, float posY, float width, float height,
                          ORIENTATION orientation, int scrollTime, int preloadItems, int minutesPerPage,
                          int rulerUnit, const CTextureInfo& progressIndicatorTexture);
-    CGUIEPGGridContainer(const CGUIEPGGridContainer &other);
+    CGUIEPGGridContainer(const CGUIEPGGridContainer& other);
 
     CGUIEPGGridContainer *Clone() const override { return new CGUIEPGGridContainer(*this); }
 
@@ -52,18 +52,18 @@ namespace PVR
     void AllocResources() override;
     void FreeResources(bool immediately) override;
 
-    bool OnAction(const CAction &action) override;
+    bool OnAction(const CAction& action) override;
     void OnDown() override;
     void OnUp() override;
     void OnLeft() override;
     void OnRight() override;
-    bool OnMouseOver(const CPoint &point) override;
+    bool OnMouseOver(const CPoint& point) override;
     bool OnMessage(CGUIMessage& message) override;
     void SetFocus(bool focus) override;
     std::string GetDescription() const override;
-    EVENT_RESULT OnMouseEvent(const CPoint &point, const CMouseEvent &event) override;
+    EVENT_RESULT OnMouseEvent(const CPoint& point, const CMouseEvent& event) override;
 
-    void Process(unsigned int currentTime, CDirtyRegionList &dirtyregions) override;
+    void Process(unsigned int currentTime, CDirtyRegionList& dirtyregions) override;
     void Render() override;
 
     CGUIListItemPtr GetListItem(int offset, unsigned int flag = 0) const override;
@@ -81,18 +81,18 @@ namespace PVR
      normally cut off from the clipping window defined by the container's position + size.
      \param offset CPoint holding the offset in skin coordinates.
      */
-    void SetRenderOffset(const CPoint &offset);
+    void SetRenderOffset(const CPoint& offset);
 
     void GoToBegin();
     void GoToEnd();
     void GoToNow();
-    void GoToDate(const CDateTime &date);
+    void GoToDate(const CDateTime& date);
     void GoToTop();
     void GoToBottom();
     void GoToMostLeft();
     void GoToMostRight();
 
-    void SetTimelineItems(const std::unique_ptr<CFileItemList> &items, const CDateTime &gridStart, const CDateTime &gridEnd);
+    void SetTimelineItems(const std::unique_ptr<CFileItemList>& items, const CDateTime& gridStart, const CDateTime& gridEnd);
     /*!
      * @brief Set the control's selection to the given channel and set the control's view port to show the channel.
      * @param channel the channel.
@@ -105,11 +105,11 @@ namespace PVR
      * @param channel the channel's path.
      * @return true if the selection was set to the given channel, false otherwise.
      */
-    bool SetChannel(const std::string &channel);
+    bool SetChannel(const std::string& channel);
 
   protected:
     bool OnClick(int actionID);
-    bool SelectItemFromPoint(const CPoint &point, bool justGrid = true);
+    bool SelectItemFromPoint(const CPoint& point, bool justGrid = true);
 
     void SetChannel(int channel);
     void SetBlock(int block, bool bUpdateBlockTravelAxis = true);
@@ -122,8 +122,8 @@ namespace PVR
     GridItem *GetNextItem(int channel);
     GridItem *GetPrevItem(int channel);
 
-    int GetBlock(const CGUIListItemPtr &item, int channel);
-    int GetRealBlock(const CGUIListItemPtr &item, int channel);
+    int GetBlock(const CGUIListItemPtr& item, int channel);
+    int GetRealBlock(const CGUIListItemPtr& item, int channel);
     void MoveToRow(int row);
 
     CGUIListItemLayout *GetFocusedLayout() const;
@@ -133,15 +133,15 @@ namespace PVR
     void GoToBlock(int blockIndex);
     void GoToChannel(int channelIndex);
     void UpdateScrollOffset(unsigned int currentTime);
-    void ProcessItem(float posX, float posY, const std::shared_ptr<CFileItem>& item, std::shared_ptr<CFileItem>& lastitem, bool focused, CGUIListItemLayout* normallayout, CGUIListItemLayout* focusedlayout, unsigned int currentTime, CDirtyRegionList &dirtyregions, float resize = -1.0f);
+    void ProcessItem(float posX, float posY, const std::shared_ptr<CFileItem>& item, std::shared_ptr<CFileItem>& lastitem, bool focused, CGUIListItemLayout* normallayout, CGUIListItemLayout* focusedlayout, unsigned int currentTime, CDirtyRegionList& dirtyregions, float resize = -1.0f);
     void RenderItem(float posX, float posY, CGUIListItem *item, bool focused);
     void GetCurrentLayouts();
 
-    void ProcessChannels(unsigned int currentTime, CDirtyRegionList &dirtyregions);
-    void ProcessRuler(unsigned int currentTime, CDirtyRegionList &dirtyregions);
-    void ProcessRulerDate(unsigned int currentTime, CDirtyRegionList &dirtyregions);
-    void ProcessProgrammeGrid(unsigned int currentTime, CDirtyRegionList &dirtyregions);
-    void ProcessProgressIndicator(unsigned int currentTime, CDirtyRegionList &dirtyregions);
+    void ProcessChannels(unsigned int currentTime, CDirtyRegionList& dirtyregions);
+    void ProcessRuler(unsigned int currentTime, CDirtyRegionList& dirtyregions);
+    void ProcessRulerDate(unsigned int currentTime, CDirtyRegionList& dirtyregions);
+    void ProcessProgrammeGrid(unsigned int currentTime, CDirtyRegionList& dirtyregions);
+    void ProcessProgressIndicator(unsigned int currentTime, CDirtyRegionList& dirtyregions);
     void RenderChannels();
     void RenderRulerDate();
     void RenderRuler();
@@ -168,18 +168,18 @@ namespace PVR
 
     int m_pageControl;
 
-    void GetChannelCacheOffsets(int &cacheBefore, int &cacheAfter);
-    void GetProgrammeCacheOffsets(int &cacheBefore, int &cacheAfter);
+    void GetChannelCacheOffsets(int& cacheBefore, int& cacheAfter);
+    void GetProgrammeCacheOffsets(int& cacheBefore, int& cacheAfter);
 
   private:
-    bool OnMouseClick(int dwButton, const CPoint &point);
-    bool OnMouseDoubleClick(int dwButton, const CPoint &point);
-    bool OnMouseWheel(char wheel, const CPoint &point);
-
-    void HandleChannels(bool bRender, unsigned int currentTime, CDirtyRegionList &dirtyregions);
-    void HandleRuler(bool bRender, unsigned int currentTime, CDirtyRegionList &dirtyregions);
-    void HandleRulerDate(bool bRender, unsigned int currentTime, CDirtyRegionList &dirtyregions);
-    void HandleProgrammeGrid(bool bRender, unsigned int currentTime, CDirtyRegionList &dirtyregions);
+    bool OnMouseClick(int dwButton, const CPoint& point);
+    bool OnMouseDoubleClick(int dwButton, const CPoint& point);
+    bool OnMouseWheel(char wheel, const CPoint& point);
+
+    void HandleChannels(bool bRender, unsigned int currentTime, CDirtyRegionList& dirtyregions);
+    void HandleRuler(bool bRender, unsigned int currentTime, CDirtyRegionList& dirtyregions);
+    void HandleRulerDate(bool bRender, unsigned int currentTime, CDirtyRegionList& dirtyregions);
+    void HandleProgrammeGrid(bool bRender, unsigned int currentTime, CDirtyRegionList& dirtyregions);
 
     float GetCurrentTimePositionOnPage() const;
     float GetProgressIndicatorWidth() const;
diff --git a/xbmc/pvr/windows/GUIEPGGridContainerModel.cpp b/xbmc/pvr/windows/GUIEPGGridContainerModel.cpp
index 8a6b7feec306..cde580109880 100644
--- a/xbmc/pvr/windows/GUIEPGGridContainerModel.cpp
+++ b/xbmc/pvr/windows/GUIEPGGridContainerModel.cpp
@@ -29,11 +29,11 @@ static const unsigned int GRID_START_PADDING = 30; // minutes
 
 void CGUIEPGGridContainerModel::SetInvalid()
 {
-  for (const auto &programme : m_programmeItems)
+  for (const auto& programme : m_programmeItems)
     programme->SetInvalid();
-  for (const auto &channel : m_channelItems)
+  for (const auto& channel : m_channelItems)
     channel->SetInvalid();
-  for (const auto &ruler : m_rulerItems)
+  for (const auto& ruler : m_rulerItems)
     ruler->SetInvalid();
 }
 
@@ -51,7 +51,7 @@ std::shared_ptr<CFileItem> CGUIEPGGridContainerModel::CreateGapItem(int iChannel
   return std::make_shared<CFileItem>(gapTag);
 }
 
-void CGUIEPGGridContainerModel::Initialize(const std::unique_ptr<CFileItemList> &items, const CDateTime &gridStart, const CDateTime &gridEnd, int iRulerUnit, int iBlocksPerPage, float fBlockSize)
+void CGUIEPGGridContainerModel::Initialize(const std::unique_ptr<CFileItemList>& items, const CDateTime& gridStart, const CDateTime& gridEnd, int iRulerUnit, int iBlocksPerPage, float fBlockSize)
 {
   if (!m_channelItems.empty())
   {
@@ -259,7 +259,7 @@ void CGUIEPGGridContainerModel::Initialize(const std::unique_ptr<CFileItemList>
   }
 }
 
-void CGUIEPGGridContainerModel::FindChannelAndBlockIndex(int channelUid, unsigned int broadcastUid, int eventOffset, int &newChannelIndex, int &newBlockIndex) const
+void CGUIEPGGridContainerModel::FindChannelAndBlockIndex(int channelUid, unsigned int broadcastUid, int eventOffset, int& newChannelIndex, int& newBlockIndex) const
 {
   const CDateTimeSpan blockDuration(0, 0, MINSPERBLOCK, 0);
 
@@ -405,11 +405,11 @@ void CGUIEPGGridContainerModel::FreeRulerMemory(int keepStart, int keepEnd)
 
 void CGUIEPGGridContainerModel::FreeItemsMemory()
 {
-  for (const auto &programme : m_programmeItems)
+  for (const auto& programme : m_programmeItems)
     programme->FreeMemory();
-  for (const auto &channel : m_channelItems)
+  for (const auto& channel : m_channelItems)
     channel->FreeMemory();
-  for (const auto &ruler : m_rulerItems)
+  for (const auto& ruler : m_rulerItems)
     ruler->FreeMemory();
 }
 
@@ -428,7 +428,7 @@ CDateTime CGUIEPGGridContainerModel::GetStartTimeForBlock(int block) const
   return m_gridStart + CDateTimeSpan(0, 0 , block * MINSPERBLOCK, 0);
 }
 
-int CGUIEPGGridContainerModel::GetBlock(const CDateTime &datetime) const
+int CGUIEPGGridContainerModel::GetBlock(const CDateTime& datetime) const
 {
   int diff;
 
@@ -447,7 +447,7 @@ int CGUIEPGGridContainerModel::GetNowBlock() const
   return GetBlock(CDateTime::GetUTCDateTime()) - GetPageNowOffset();
 }
 
-int CGUIEPGGridContainerModel::GetFirstEventBlock(const std::shared_ptr<CPVREpgInfoTag> &event) const
+int CGUIEPGGridContainerModel::GetFirstEventBlock(const std::shared_ptr<CPVREpgInfoTag>& event) const
 {
   const CDateTime eventStart = event->StartAsUTC();
   int diff;
@@ -465,7 +465,7 @@ int CGUIEPGGridContainerModel::GetFirstEventBlock(const std::shared_ptr<CPVREpgI
   return std::ceil(fBlockIndex);
 }
 
-int CGUIEPGGridContainerModel::GetLastEventBlock(const std::shared_ptr<CPVREpgInfoTag> &event) const
+int CGUIEPGGridContainerModel::GetLastEventBlock(const std::shared_ptr<CPVREpgInfoTag>& event) const
 {
   // Last block of a tag is always the block calculated using event's end time, not rounded up.
   // Refer to CGUIEPGGridContainerModel::Refresh, where the model is created, for details!
diff --git a/xbmc/pvr/windows/GUIEPGGridContainerModel.h b/xbmc/pvr/windows/GUIEPGGridContainerModel.h
index f5af77cd780c..ff3bcdd4b8dd 100644
--- a/xbmc/pvr/windows/GUIEPGGridContainerModel.h
+++ b/xbmc/pvr/windows/GUIEPGGridContainerModel.h
@@ -37,11 +37,11 @@ namespace PVR
     CGUIEPGGridContainerModel() = default;
     virtual ~CGUIEPGGridContainerModel() = default;
 
-    void Initialize(const std::unique_ptr<CFileItemList> &items, const CDateTime &gridStart, const CDateTime &gridEnd, int iRulerUnit, int iBlocksPerPage, float fBlockSize);
+    void Initialize(const std::unique_ptr<CFileItemList>& items, const CDateTime& gridStart, const CDateTime& gridEnd, int iRulerUnit, int iBlocksPerPage, float fBlockSize);
     void SetInvalid();
 
     static const int INVALID_INDEX = -1;
-    void FindChannelAndBlockIndex(int channelUid, unsigned int broadcastUid, int eventOffset, int &newChannelIndex, int &newBlockIndex) const;
+    void FindChannelAndBlockIndex(int channelUid, unsigned int broadcastUid, int eventOffset, int& newChannelIndex, int& newBlockIndex) const;
 
     void FreeChannelMemory(int keepStart, int keepEnd);
     void FreeProgrammeMemory(int channel, int keepStart, int keepEnd);
@@ -60,7 +60,7 @@ namespace PVR
 
     int GetBlockCount() const { return m_blocks; }
     bool HasGridItems() const { return !m_gridIndex.empty(); }
-    GridItem *GetGridItemPtr(int iChannel, int iBlock) { return &m_gridIndex[iChannel][iBlock]; }
+    GridItem *GetGridItemPtr(int iChannel, int iBlock) { return& m_gridIndex[iChannel][iBlock]; }
     std::shared_ptr<CFileItem> GetGridItem(int iChannel, int iBlock) const { return m_gridIndex[iChannel][iBlock].item; }
     float GetGridItemWidth(int iChannel, int iBlock) const { return m_gridIndex[iChannel][iBlock].width; }
     float GetGridItemOriginWidth(int iChannel, int iBlock) const { return m_gridIndex[iChannel][iBlock].originWidth; }
@@ -68,17 +68,17 @@ namespace PVR
     void SetGridItemWidth(int iChannel, int iBlock, float fWidth) { m_gridIndex[iChannel][iBlock].width = fWidth; }
 
     bool IsZeroGridDuration() const { return (m_gridEnd - m_gridStart) == CDateTimeSpan(0, 0, 0, 0); }
-    const CDateTime &GetGridStart() const { return m_gridStart; }
-    const CDateTime &GetGridEnd() const { return m_gridEnd; }
+    const CDateTime& GetGridStart() const { return m_gridStart; }
+    const CDateTime& GetGridEnd() const { return m_gridEnd; }
     unsigned int GetGridStartPadding() const;
 
     unsigned int GetPageNowOffset() const;
     int GetNowBlock() const;
 
     CDateTime GetStartTimeForBlock(int block) const;
-    int GetBlock(const CDateTime &datetime) const;
-    int GetFirstEventBlock(const std::shared_ptr<CPVREpgInfoTag> &event) const;
-    int GetLastEventBlock(const std::shared_ptr<CPVREpgInfoTag> &event) const;
+    int GetBlock(const CDateTime& datetime) const;
+    int GetFirstEventBlock(const std::shared_ptr<CPVREpgInfoTag>& event) const;
+    int GetLastEventBlock(const std::shared_ptr<CPVREpgInfoTag>& event) const;
 
   private:
     void FreeItemsMemory();
diff --git a/xbmc/pvr/windows/GUIWindowPVRBase.cpp b/xbmc/pvr/windows/GUIWindowPVRBase.cpp
index cf84fb1f59a4..55382b9868f5 100644
--- a/xbmc/pvr/windows/GUIWindowPVRBase.cpp
+++ b/xbmc/pvr/windows/GUIWindowPVRBase.cpp
@@ -54,7 +54,7 @@ class CGUIPVRChannelGroupsSelector
 
   bool HasFocus() const;
   std::shared_ptr<CPVRChannelGroup> GetSelectedChannelGroup() const;
-  bool SelectChannelGroup(const std::shared_ptr<CPVRChannelGroup> &newGroup);
+  bool SelectChannelGroup(const std::shared_ptr<CPVRChannelGroup>& newGroup);
 
 private:
   CGUIControl *m_control = nullptr;
@@ -102,7 +102,7 @@ std::shared_ptr<CPVRChannelGroup> CGUIPVRChannelGroupsSelector::GetSelectedChann
   return std::shared_ptr<CPVRChannelGroup>();
 }
 
-bool CGUIPVRChannelGroupsSelector::SelectChannelGroup(const std::shared_ptr<CPVRChannelGroup> &newGroup)
+bool CGUIPVRChannelGroupsSelector::SelectChannelGroup(const std::shared_ptr<CPVRChannelGroup>& newGroup)
 {
   if (m_control && newGroup)
   {
@@ -121,7 +121,7 @@ bool CGUIPVRChannelGroupsSelector::SelectChannelGroup(const std::shared_ptr<CPVR
   return false;
 }
 
-CGUIWindowPVRBase::CGUIWindowPVRBase(bool bRadio, int id, const std::string &xmlFile) :
+CGUIWindowPVRBase::CGUIWindowPVRBase(bool bRadio, int id, const std::string& xmlFile) :
   CGUIMediaWindow(id, xmlFile.c_str()),
   m_bRadio(bRadio),
   m_channelGroupsSelector(new CGUIPVRChannelGroupsSelector),
@@ -180,7 +180,7 @@ void CGUIWindowPVRBase::NotifyEvent(const PVREvent& event)
   }
 }
 
-bool CGUIWindowPVRBase::OnAction(const CAction &action)
+bool CGUIWindowPVRBase::OnAction(const CAction& action)
 {
   switch (action.GetID())
   {
@@ -460,7 +460,7 @@ void CGUIWindowPVRBase::SetChannelGroup(std::shared_ptr<CPVRChannelGroup> &&grou
   }
 }
 
-bool CGUIWindowPVRBase::Update(const std::string &strDirectory, bool updateFilterPath /*= true*/)
+bool CGUIWindowPVRBase::Update(const std::string& strDirectory, bool updateFilterPath /*= true*/)
 {
   if (m_bUpdating)
   {
@@ -513,7 +513,7 @@ void CGUIWindowPVRBase::UpdateButtons(void)
   m_channelGroupsSelector->SelectChannelGroup(channelGroup);
 }
 
-void CGUIWindowPVRBase::ShowProgressDialog(const std::string &strText, int iProgress)
+void CGUIWindowPVRBase::ShowProgressDialog(const std::string& strText, int iProgress)
 {
   if (!m_progressHandle)
   {
diff --git a/xbmc/pvr/windows/GUIWindowPVRBase.h b/xbmc/pvr/windows/GUIWindowPVRBase.h
index ab12a32857f1..47363f95e865 100644
--- a/xbmc/pvr/windows/GUIWindowPVRBase.h
+++ b/xbmc/pvr/windows/GUIWindowPVRBase.h
@@ -59,9 +59,9 @@ namespace PVR
     void OnInitWindow(void) override;
     void OnDeinitWindow(int nextWindowID) override;
     bool OnMessage(CGUIMessage& message) override;
-    bool Update(const std::string &strDirectory, bool updateFilterPath = true) override;
+    bool Update(const std::string& strDirectory, bool updateFilterPath = true) override;
     void UpdateButtons(void) override;
-    bool OnAction(const CAction &action) override;
+    bool OnAction(const CAction& action) override;
     bool OnBack(int actionID) override;
     void SetInvalid() override;
     bool CanBeActivated() const override;
@@ -80,7 +80,7 @@ namespace PVR
     bool DoRefresh(void) { return Refresh(true); }
 
   protected:
-    CGUIWindowPVRBase(bool bRadio, int id, const std::string &xmlFile);
+    CGUIWindowPVRBase(bool bRadio, int id, const std::string& xmlFile);
 
     virtual std::string GetDirectoryPath(void) = 0;
 
@@ -123,7 +123,7 @@ namespace PVR
      * @param strText The current status.
      * @param iProgress The current progress in %.
      */
-    void ShowProgressDialog(const std::string &strText, int iProgress);
+    void ShowProgressDialog(const std::string& strText, int iProgress);
 
     /*!
      * @brief Hide the progress dialog if it's visible.
diff --git a/xbmc/pvr/windows/GUIWindowPVRChannels.cpp b/xbmc/pvr/windows/GUIWindowPVRChannels.cpp
index c0369cda71e9..0211536357e2 100644
--- a/xbmc/pvr/windows/GUIWindowPVRChannels.cpp
+++ b/xbmc/pvr/windows/GUIWindowPVRChannels.cpp
@@ -40,7 +40,7 @@
 
 using namespace PVR;
 
-CGUIWindowPVRChannelsBase::CGUIWindowPVRChannelsBase(bool bRadio, int id, const std::string &xmlFile) :
+CGUIWindowPVRChannelsBase::CGUIWindowPVRChannelsBase(bool bRadio, int id, const std::string& xmlFile) :
   CGUIWindowPVRBase(bRadio, id, xmlFile),
   m_bShowHiddenChannels(false)
 {
@@ -52,7 +52,7 @@ CGUIWindowPVRChannelsBase::~CGUIWindowPVRChannelsBase()
   CServiceBroker::GetPVRManager().EpgContainer().Events().Unsubscribe(this);
 }
 
-void CGUIWindowPVRChannelsBase::GetContextButtons(int itemNumber, CContextButtons &buttons)
+void CGUIWindowPVRChannelsBase::GetContextButtons(int itemNumber, CContextButtons& buttons)
 {
   // Add parent buttons before the Manage button
   CGUIWindowPVRBase::GetContextButtons(itemNumber, buttons);
@@ -69,7 +69,7 @@ bool CGUIWindowPVRChannelsBase::OnContextButton(int itemNumber, CONTEXT_BUTTON b
       CGUIMediaWindow::OnContextButton(itemNumber, button);
 }
 
-bool CGUIWindowPVRChannelsBase::Update(const std::string &strDirectory, bool updateFilterPath /* = true */)
+bool CGUIWindowPVRChannelsBase::Update(const std::string& strDirectory, bool updateFilterPath /* = true */)
 {
   bool bReturn = CGUIWindowPVRBase::Update(strDirectory);
 
@@ -101,7 +101,7 @@ void CGUIWindowPVRChannelsBase::UpdateButtons(void)
   SET_CONTROL_LABEL(CONTROL_LABEL_HEADER1, m_bShowHiddenChannels ? g_localizeStrings.Get(19022) : GetChannelGroup()->GroupName());
 }
 
-bool CGUIWindowPVRChannelsBase::OnAction(const CAction &action)
+bool CGUIWindowPVRChannelsBase::OnAction(const CAction& action)
 {
   switch (action.GetID())
   {
@@ -227,7 +227,7 @@ bool CGUIWindowPVRChannelsBase::OnMessage(CGUIMessage& message)
   return bReturn || CGUIWindowPVRBase::OnMessage(message);
 }
 
-bool CGUIWindowPVRChannelsBase::OnContextButtonManage(const CFileItemPtr &item, CONTEXT_BUTTON button)
+bool CGUIWindowPVRChannelsBase::OnContextButtonManage(const CFileItemPtr& item, CONTEXT_BUTTON button)
 {
   bool bReturn = false;
 
@@ -268,7 +268,7 @@ bool CGUIWindowPVRChannelsBase::OnContextButtonManage(const CFileItemPtr &item,
   return bReturn;
 }
 
-void CGUIWindowPVRChannelsBase::UpdateEpg(const CFileItemPtr &item)
+void CGUIWindowPVRChannelsBase::UpdateEpg(const CFileItemPtr& item)
 {
   const std::shared_ptr<CPVRChannel> channel(item->GetPVRChannelInfoTag());
 
diff --git a/xbmc/pvr/windows/GUIWindowPVRChannels.h b/xbmc/pvr/windows/GUIWindowPVRChannels.h
index dbfe485e2cf8..64b0be189f53 100644
--- a/xbmc/pvr/windows/GUIWindowPVRChannels.h
+++ b/xbmc/pvr/windows/GUIWindowPVRChannels.h
@@ -19,26 +19,26 @@ namespace PVR
   class CGUIWindowPVRChannelsBase : public CGUIWindowPVRBase, public CPVRChannelNumberInputHandler
   {
   public:
-    CGUIWindowPVRChannelsBase(bool bRadio, int id, const std::string &xmlFile);
+    CGUIWindowPVRChannelsBase(bool bRadio, int id, const std::string& xmlFile);
     ~CGUIWindowPVRChannelsBase() override;
 
     bool OnMessage(CGUIMessage& message) override;
-    void GetContextButtons(int itemNumber, CContextButtons &buttons) override;
+    void GetContextButtons(int itemNumber, CContextButtons& buttons) override;
     bool OnContextButton(int itemNumber, CONTEXT_BUTTON button) override;
-    bool Update(const std::string &strDirectory, bool updateFilterPath = true) override;
+    bool Update(const std::string& strDirectory, bool updateFilterPath = true) override;
     void UpdateButtons(void) override;
-    bool OnAction(const CAction &action) override;
+    bool OnAction(const CAction& action) override;
 
     // CPVRChannelNumberInputHandler implementation
     void GetChannelNumbers(std::vector<std::string>& channelNumbers) override;
     void OnInputDone() override;
 
   private:
-    bool OnContextButtonManage(const CFileItemPtr &item, CONTEXT_BUTTON button);
+    bool OnContextButtonManage(const CFileItemPtr& item, CONTEXT_BUTTON button);
 
     void ShowChannelManager();
     void ShowGroupManager();
-    void UpdateEpg(const CFileItemPtr &item);
+    void UpdateEpg(const CFileItemPtr& item);
 
   protected:
     bool m_bShowHiddenChannels;
diff --git a/xbmc/pvr/windows/GUIWindowPVRGuide.cpp b/xbmc/pvr/windows/GUIWindowPVRGuide.cpp
index 61789443e533..0bde6c7df3a3 100644
--- a/xbmc/pvr/windows/GUIWindowPVRGuide.cpp
+++ b/xbmc/pvr/windows/GUIWindowPVRGuide.cpp
@@ -43,7 +43,7 @@
 using namespace KODI::MESSAGING;
 using namespace PVR;
 
-CGUIWindowPVRGuideBase::CGUIWindowPVRGuideBase(bool bRadio, int id, const std::string &xmlFile) :
+CGUIWindowPVRGuideBase::CGUIWindowPVRGuideBase(bool bRadio, int id, const std::string& xmlFile) :
   CGUIWindowPVRBase(bRadio, id, xmlFile),
   m_bChannelSelectionRestored(false),
   m_bFirstOpen(true)
@@ -169,7 +169,7 @@ void CGUIWindowPVRGuideBase::SetInvalid()
   CGUIWindowPVRBase::SetInvalid();
 }
 
-void CGUIWindowPVRGuideBase::GetContextButtons(int itemNumber, CContextButtons &buttons)
+void CGUIWindowPVRGuideBase::GetContextButtons(int itemNumber, CContextButtons& buttons)
 {
   buttons.Add(CONTEXT_BUTTON_BEGIN, 19063); /* Go to begin */
   buttons.Add(CONTEXT_BUTTON_NOW,   19070); /* Go to now */
@@ -198,7 +198,7 @@ void CGUIWindowPVRGuideBase::UpdateButtons(void)
   SET_CONTROL_LABEL(CONTROL_LABEL_HEADER2, GetChannelGroup()->GroupName());
 }
 
-bool CGUIWindowPVRGuideBase::Update(const std::string &strDirectory, bool updateFilterPath /* = true */)
+bool CGUIWindowPVRGuideBase::Update(const std::string& strDirectory, bool updateFilterPath /* = true */)
 {
   if (m_bUpdating)
   {
@@ -219,7 +219,7 @@ bool CGUIWindowPVRGuideBase::Update(const std::string &strDirectory, bool update
   return bReturn;
 }
 
-bool CGUIWindowPVRGuideBase::GetDirectory(const std::string &strDirectory, CFileItemList &items)
+bool CGUIWindowPVRGuideBase::GetDirectory(const std::string& strDirectory, CFileItemList& items)
 {
   {
     CSingleLock lock(m_critSection);
@@ -250,7 +250,7 @@ bool CGUIWindowPVRGuideBase::GetDirectory(const std::string &strDirectory, CFile
   return true;
 }
 
-void CGUIWindowPVRGuideBase::FormatAndSort(CFileItemList &items)
+void CGUIWindowPVRGuideBase::FormatAndSort(CFileItemList& items)
 {
   if (&items == m_vecItems)
   {
@@ -298,7 +298,7 @@ bool CGUIWindowPVRGuideBase::ShouldNavigateToGridContainer(int iAction)
   return false;
 }
 
-bool CGUIWindowPVRGuideBase::OnAction(const CAction &action)
+bool CGUIWindowPVRGuideBase::OnAction(const CAction& action)
 {
   switch (action.GetID())
   {
diff --git a/xbmc/pvr/windows/GUIWindowPVRGuide.h b/xbmc/pvr/windows/GUIWindowPVRGuide.h
index 94af5a8d36b6..124893afc2cf 100644
--- a/xbmc/pvr/windows/GUIWindowPVRGuide.h
+++ b/xbmc/pvr/windows/GUIWindowPVRGuide.h
@@ -31,18 +31,18 @@ namespace PVR
   class CGUIWindowPVRGuideBase : public CGUIWindowPVRBase, public CPVRChannelNumberInputHandler
   {
   public:
-    CGUIWindowPVRGuideBase(bool bRadio, int id, const std::string &xmlFile);
+    CGUIWindowPVRGuideBase(bool bRadio, int id, const std::string& xmlFile);
     ~CGUIWindowPVRGuideBase() override;
 
     void OnInitWindow() override;
     void OnDeinitWindow(int nextWindowID) override;
     bool OnMessage(CGUIMessage& message) override;
-    bool OnAction(const CAction &action) override;
-    void GetContextButtons(int itemNumber, CContextButtons &buttons) override;
+    bool OnAction(const CAction& action) override;
+    void GetContextButtons(int itemNumber, CContextButtons& buttons) override;
     bool OnContextButton(int itemNumber, CONTEXT_BUTTON button) override;
     void UpdateButtons(void) override;
     void SetInvalid() override;
-    bool Update(const std::string &strDirectory, bool updateFilterPath = true) override;
+    bool Update(const std::string& strDirectory, bool updateFilterPath = true) override;
 
     void NotifyEvent(const PVREvent& event) override;
 
@@ -55,8 +55,8 @@ namespace PVR
   protected:
     void UpdateSelectedItemPath() override;
     std::string GetDirectoryPath(void) override { return ""; }
-    bool GetDirectory(const std::string &strDirectory, CFileItemList &items) override;
-    void FormatAndSort(CFileItemList &items) override;
+    bool GetDirectory(const std::string& strDirectory, CFileItemList& items) override;
+    void FormatAndSort(CFileItemList& items) override;
     CFileItemPtr GetCurrentListItem(int offset = 0) override;
 
     void ClearData() override;
diff --git a/xbmc/pvr/windows/GUIWindowPVRRecordings.cpp b/xbmc/pvr/windows/GUIWindowPVRRecordings.cpp
index 25d163cb2fcd..a4838ccf17bb 100644
--- a/xbmc/pvr/windows/GUIWindowPVRRecordings.cpp
+++ b/xbmc/pvr/windows/GUIWindowPVRRecordings.cpp
@@ -34,7 +34,7 @@
 
 using namespace PVR;
 
-CGUIWindowPVRRecordingsBase::CGUIWindowPVRRecordingsBase(bool bRadio, int id, const std::string &xmlFile) :
+CGUIWindowPVRRecordingsBase::CGUIWindowPVRRecordingsBase(bool bRadio, int id, const std::string& xmlFile) :
   CGUIWindowPVRBase(bRadio, id, xmlFile),
   m_bShowDeletedRecordings(false),
   m_settings({
@@ -57,7 +57,7 @@ std::string CGUIWindowPVRRecordingsBase::GetDirectoryPath()
   return URIUtils::PathHasParent(m_vecItems->GetPath(), basePath) ? m_vecItems->GetPath() : basePath;
 }
 
-void CGUIWindowPVRRecordingsBase::GetContextButtons(int itemNumber, CContextButtons &buttons)
+void CGUIWindowPVRRecordingsBase::GetContextButtons(int itemNumber, CContextButtons& buttons)
 {
   if (itemNumber < 0 || itemNumber >= m_vecItems->Size())
     return;
@@ -87,7 +87,7 @@ void CGUIWindowPVRRecordingsBase::GetContextButtons(int itemNumber, CContextButt
     CGUIWindowPVRBase::GetContextButtons(itemNumber, buttons);
 }
 
-bool CGUIWindowPVRRecordingsBase::OnAction(const CAction &action)
+bool CGUIWindowPVRRecordingsBase::OnAction(const CAction& action)
 {
   if (action.GetID() == ACTION_PARENT_DIR ||
       action.GetID() == ACTION_NAV_BACK)
@@ -112,7 +112,7 @@ bool CGUIWindowPVRRecordingsBase::OnContextButton(int itemNumber, CONTEXT_BUTTON
       CGUIMediaWindow::OnContextButton(itemNumber, button);
 }
 
-bool CGUIWindowPVRRecordingsBase::Update(const std::string &strDirectory, bool updateFilterPath /* = true */)
+bool CGUIWindowPVRRecordingsBase::Update(const std::string& strDirectory, bool updateFilterPath /* = true */)
 {
   m_thumbLoader.StopThread();
 
@@ -181,7 +181,7 @@ void CGUIWindowPVRRecordingsBase::UpdateButtons()
   SET_CONTROL_LABEL(CONTROL_LABEL_HEADER2, bGroupRecordings && path.IsValid() ? path.GetUnescapedDirectoryPath() : "");
 }
 
-bool CGUIWindowPVRRecordingsBase::OnMessage(CGUIMessage &message)
+bool CGUIWindowPVRRecordingsBase::OnMessage(CGUIMessage& message)
 {
   bool bReturn = false;
   switch (message.GetMessage())
@@ -355,7 +355,7 @@ void CGUIWindowPVRRecordingsBase::OnPrepareFileItems(CFileItemList& items)
   CGUIWindowPVRBase::OnPrepareFileItems(items);
 }
 
-bool CGUIWindowPVRRecordingsBase::GetFilteredItems(const std::string &filter, CFileItemList &items)
+bool CGUIWindowPVRRecordingsBase::GetFilteredItems(const std::string& filter, CFileItemList& items)
 {
   bool listchanged = CGUIWindowPVRBase::GetFilteredItems(filter, items);
 
diff --git a/xbmc/pvr/windows/GUIWindowPVRRecordings.h b/xbmc/pvr/windows/GUIWindowPVRRecordings.h
index 11284e17cb02..4bc04723f8c1 100644
--- a/xbmc/pvr/windows/GUIWindowPVRRecordings.h
+++ b/xbmc/pvr/windows/GUIWindowPVRRecordings.h
@@ -23,21 +23,21 @@ namespace PVR
   class CGUIWindowPVRRecordingsBase : public CGUIWindowPVRBase
   {
   public:
-    CGUIWindowPVRRecordingsBase(bool bRadio, int id, const std::string &xmlFile);
+    CGUIWindowPVRRecordingsBase(bool bRadio, int id, const std::string& xmlFile);
     ~CGUIWindowPVRRecordingsBase() override;
 
     void OnWindowLoaded() override;
     bool OnMessage(CGUIMessage& message) override;
-    bool OnAction(const CAction &action) override;
-    void GetContextButtons(int itemNumber, CContextButtons &buttons) override;
+    bool OnAction(const CAction& action) override;
+    void GetContextButtons(int itemNumber, CContextButtons& buttons) override;
     bool OnContextButton(int itemNumber, CONTEXT_BUTTON button) override;
-    bool Update(const std::string &strDirectory, bool updateFilterPath = true) override;
+    bool Update(const std::string& strDirectory, bool updateFilterPath = true) override;
     void UpdateButtons() override;
 
   protected:
     std::string GetDirectoryPath(void) override;
-    void OnPrepareFileItems(CFileItemList &items) override;
-    bool GetFilteredItems(const std::string &filter, CFileItemList &items) override;
+    void OnPrepareFileItems(CFileItemList& items) override;
+    bool GetFilteredItems(const std::string& filter, CFileItemList& items) override;
 
   private:
     bool OnContextButtonDeleteAll(CFileItem *item, CONTEXT_BUTTON button);
diff --git a/xbmc/pvr/windows/GUIWindowPVRSearch.cpp b/xbmc/pvr/windows/GUIWindowPVRSearch.cpp
index e31b38d96e6b..2d05751a29f3 100644
--- a/xbmc/pvr/windows/GUIWindowPVRSearch.cpp
+++ b/xbmc/pvr/windows/GUIWindowPVRSearch.cpp
@@ -83,7 +83,7 @@ namespace
   }
 } // unnamed namespace
 
-CGUIWindowPVRSearchBase::CGUIWindowPVRSearchBase(bool bRadio, int id, const std::string &xmlFile) :
+CGUIWindowPVRSearchBase::CGUIWindowPVRSearchBase(bool bRadio, int id, const std::string& xmlFile) :
   CGUIWindowPVRBase(bRadio, id, xmlFile),
   m_bSearchConfirmed(false)
 {
@@ -93,7 +93,7 @@ CGUIWindowPVRSearchBase::~CGUIWindowPVRSearchBase()
 {
 }
 
-void CGUIWindowPVRSearchBase::GetContextButtons(int itemNumber, CContextButtons &buttons)
+void CGUIWindowPVRSearchBase::GetContextButtons(int itemNumber, CContextButtons& buttons)
 {
   if (itemNumber < 0 || itemNumber >= m_vecItems->Size())
     return;
@@ -113,7 +113,7 @@ bool CGUIWindowPVRSearchBase::OnContextButton(int itemNumber, CONTEXT_BUTTON but
       CGUIMediaWindow::OnContextButton(itemNumber, button);
 }
 
-void CGUIWindowPVRSearchBase::SetItemToSearch(const CFileItemPtr &item)
+void CGUIWindowPVRSearchBase::SetItemToSearch(const CFileItemPtr& item)
 {
   m_searchfilter.reset(new CPVREpgSearchFilter(m_bRadio));
 
@@ -134,7 +134,7 @@ void CGUIWindowPVRSearchBase::SetItemToSearch(const CFileItemPtr &item)
     Refresh(true);
 }
 
-void CGUIWindowPVRSearchBase::OnPrepareFileItems(CFileItemList &items)
+void CGUIWindowPVRSearchBase::OnPrepareFileItems(CFileItemList& items)
 {
   bool bAddSpecialSearchItem = items.IsEmpty();
 
@@ -161,7 +161,7 @@ void CGUIWindowPVRSearchBase::OnPrepareFileItems(CFileItemList &items)
   }
 }
 
-bool CGUIWindowPVRSearchBase::OnMessage(CGUIMessage &message)
+bool CGUIWindowPVRSearchBase::OnMessage(CGUIMessage& message)
 {
   if (message.GetMessage() == GUI_MSG_CLICKED)
   {
diff --git a/xbmc/pvr/windows/GUIWindowPVRSearch.h b/xbmc/pvr/windows/GUIWindowPVRSearch.h
index 3b95887b5139..deb67159cc18 100644
--- a/xbmc/pvr/windows/GUIWindowPVRSearch.h
+++ b/xbmc/pvr/windows/GUIWindowPVRSearch.h
@@ -23,21 +23,21 @@ namespace PVR
   class CGUIWindowPVRSearchBase : public CGUIWindowPVRBase
   {
   public:
-    CGUIWindowPVRSearchBase(bool bRadio, int id, const std::string &xmlFile);
+    CGUIWindowPVRSearchBase(bool bRadio, int id, const std::string& xmlFile);
     ~CGUIWindowPVRSearchBase() override;
 
     bool OnMessage(CGUIMessage& message)  override;
-    void GetContextButtons(int itemNumber, CContextButtons &buttons) override;
+    void GetContextButtons(int itemNumber, CContextButtons& buttons) override;
     bool OnContextButton(int itemNumber, CONTEXT_BUTTON button) override;
 
     /*!
      * @brief set the item to search similar events for.
      * @param item the epg event to search similar events for.
      */
-    void SetItemToSearch(const CFileItemPtr &item);
+    void SetItemToSearch(const CFileItemPtr& item);
 
   protected:
-    void OnPrepareFileItems(CFileItemList &items) override;
+    void OnPrepareFileItems(CFileItemList& items) override;
     std::string GetDirectoryPath(void) override { return ""; }
 
   private:
diff --git a/xbmc/pvr/windows/GUIWindowPVRTimersBase.cpp b/xbmc/pvr/windows/GUIWindowPVRTimersBase.cpp
index c91e2574fdf7..43869b72f3a2 100644
--- a/xbmc/pvr/windows/GUIWindowPVRTimersBase.cpp
+++ b/xbmc/pvr/windows/GUIWindowPVRTimersBase.cpp
@@ -28,14 +28,14 @@
 
 using namespace PVR;
 
-CGUIWindowPVRTimersBase::CGUIWindowPVRTimersBase(bool bRadio, int id, const std::string &xmlFile) :
+CGUIWindowPVRTimersBase::CGUIWindowPVRTimersBase(bool bRadio, int id, const std::string& xmlFile) :
   CGUIWindowPVRBase(bRadio, id, xmlFile)
 {
 }
 
 CGUIWindowPVRTimersBase::~CGUIWindowPVRTimersBase() = default;
 
-bool CGUIWindowPVRTimersBase::OnAction(const CAction &action)
+bool CGUIWindowPVRTimersBase::OnAction(const CAction& action)
 {
   if (action.GetID() == ACTION_PARENT_DIR ||
       action.GetID() == ACTION_NAV_BACK)
@@ -51,7 +51,7 @@ bool CGUIWindowPVRTimersBase::OnAction(const CAction &action)
   return CGUIWindowPVRBase::OnAction(action);
 }
 
-bool CGUIWindowPVRTimersBase::Update(const std::string &strDirectory, bool updateFilterPath /* = true */)
+bool CGUIWindowPVRTimersBase::Update(const std::string& strDirectory, bool updateFilterPath /* = true */)
 {
   int iOldCount = m_vecItems->GetObjectCount();
   const std::string oldPath = m_vecItems->GetPath();
@@ -88,7 +88,7 @@ void CGUIWindowPVRTimersBase::UpdateButtons(void)
   SET_CONTROL_LABEL(CONTROL_LABEL_HEADER1, strHeaderTitle);
 }
 
-bool CGUIWindowPVRTimersBase::OnMessage(CGUIMessage &message)
+bool CGUIWindowPVRTimersBase::OnMessage(CGUIMessage& message)
 {
   bool bReturn = false;
   switch (message.GetMessage())
@@ -167,7 +167,7 @@ bool CGUIWindowPVRTimersBase::OnMessage(CGUIMessage &message)
   return bReturn || CGUIWindowPVRBase::OnMessage(message);
 }
 
-bool CGUIWindowPVRTimersBase::ActionShowTimer(const CFileItemPtr &item)
+bool CGUIWindowPVRTimersBase::ActionShowTimer(const CFileItemPtr& item)
 {
   bool bReturn = false;
 
diff --git a/xbmc/pvr/windows/GUIWindowPVRTimersBase.h b/xbmc/pvr/windows/GUIWindowPVRTimersBase.h
index 159d62916bc9..acd3c1e3e605 100644
--- a/xbmc/pvr/windows/GUIWindowPVRTimersBase.h
+++ b/xbmc/pvr/windows/GUIWindowPVRTimersBase.h
@@ -19,12 +19,12 @@ namespace PVR
   class CGUIWindowPVRTimersBase : public CGUIWindowPVRBase
   {
   public:
-    CGUIWindowPVRTimersBase(bool bRadio, int id, const std::string &xmlFile);
+    CGUIWindowPVRTimersBase(bool bRadio, int id, const std::string& xmlFile);
     ~CGUIWindowPVRTimersBase(void) override;
 
     bool OnMessage(CGUIMessage& message) override;
-    bool OnAction(const CAction &action) override;
-    bool Update(const std::string &strDirectory, bool updateFilterPath = true) override;
+    bool OnAction(const CAction& action) override;
+    bool Update(const std::string& strDirectory, bool updateFilterPath = true) override;
     void UpdateButtons(void) override;
 
   private:

From e8c3b6fa3cbaedbf6c337afbc7f7ccfac37cefe9 Mon Sep 17 00:00:00 2001
From: phunkyfish <phunkyfish@gmail.com>
Date: Thu, 26 Sep 2019 14:19:16 +0100
Subject: [PATCH 7/7] Refactoring Left align pointer in pvr

---
 xbmc/addons/PVRClient.cpp                     | 82 +++++++++----------
 xbmc/pvr/PVRActionListener.cpp                |  6 +-
 xbmc/pvr/PVRDatabase.h                        |  2 +-
 xbmc/pvr/PVRGUIActions.cpp                    | 14 ++--
 xbmc/pvr/PVRGUIActions.h                      |  2 +-
 xbmc/pvr/PVRGUIChannelNavigator.cpp           |  4 +-
 xbmc/pvr/PVRGUIInfo.cpp                       | 28 +++----
 xbmc/pvr/PVRGUIInfo.h                         | 24 +++---
 xbmc/pvr/PVRJobs.h                            | 34 ++++----
 xbmc/pvr/PVRManager.cpp                       | 12 +--
 xbmc/pvr/PVRManager.h                         |  4 +-
 xbmc/pvr/PVRSettings.cpp                      |  4 +-
 xbmc/pvr/PVRSettings.h                        |  6 +-
 xbmc/pvr/addons/PVRClients.cpp                | 12 +--
 xbmc/pvr/addons/PVRClients.h                  | 12 +--
 .../channels/PVRChannelGroupsContainer.cpp    |  2 +-
 xbmc/pvr/channels/PVRChannelGroupsContainer.h | 10 +--
 .../dialogs/GUIDialogPVRChannelManager.cpp    |  4 +-
 xbmc/pvr/dialogs/GUIDialogPVRChannelManager.h |  2 +-
 xbmc/pvr/dialogs/GUIDialogPVRGroupManager.cpp |  4 +-
 xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.h    |  4 +-
 .../pvr/dialogs/GUIDialogPVRItemsViewBase.cpp |  2 +-
 xbmc/pvr/dialogs/GUIDialogPVRItemsViewBase.h  |  2 +-
 xbmc/pvr/dialogs/GUIDialogPVRRadioRDSInfo.cpp |  4 +-
 .../pvr/dialogs/GUIDialogPVRRecordingInfo.cpp |  2 +-
 xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.h  |  2 +-
 .../dialogs/GUIDialogPVRRecordingSettings.cpp |  4 +-
 .../dialogs/GUIDialogPVRRecordingSettings.h   |  2 +-
 .../pvr/dialogs/GUIDialogPVRTimerSettings.cpp | 56 ++++++-------
 xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.h  | 28 +++----
 xbmc/pvr/epg/Epg.cpp                          |  2 +-
 xbmc/pvr/epg/Epg.h                            |  2 +-
 xbmc/pvr/epg/EpgContainer.cpp                 |  2 +-
 xbmc/pvr/epg/EpgDatabase.cpp                  |  2 +-
 xbmc/pvr/epg/EpgDatabase.h                    |  4 +-
 xbmc/pvr/recordings/PVRRecording.cpp          |  2 +-
 xbmc/pvr/timers/PVRTimers.cpp                 |  2 +-
 xbmc/pvr/windows/GUIEPGGridContainer.cpp      | 32 ++++----
 xbmc/pvr/windows/GUIEPGGridContainer.h        | 28 +++----
 xbmc/pvr/windows/GUIEPGGridContainerModel.h   |  2 +-
 xbmc/pvr/windows/GUIWindowPVRBase.cpp         |  6 +-
 xbmc/pvr/windows/GUIWindowPVRBase.h           |  2 +-
 xbmc/pvr/windows/GUIWindowPVRChannels.cpp     |  6 +-
 xbmc/pvr/windows/GUIWindowPVRGuide.cpp        | 14 ++--
 xbmc/pvr/windows/GUIWindowPVRGuide.h          |  4 +-
 xbmc/pvr/windows/GUIWindowPVRRecordings.cpp   |  6 +-
 xbmc/pvr/windows/GUIWindowPVRRecordings.h     |  2 +-
 xbmc/pvr/windows/GUIWindowPVRSearch.cpp       |  2 +-
 xbmc/pvr/windows/GUIWindowPVRSearch.h         |  2 +-
 49 files changed, 248 insertions(+), 248 deletions(-)

diff --git a/xbmc/addons/PVRClient.cpp b/xbmc/addons/PVRClient.cpp
index 81b303571f43..151d697bdc4a 100644
--- a/xbmc/addons/PVRClient.cpp
+++ b/xbmc/addons/PVRClient.cpp
@@ -709,7 +709,7 @@ PVR_ERROR CPVRClient::IsPlayable(const std::shared_ptr<const CPVREpgInfoTag>& ta
   }, m_clientCapabilities.SupportsEPG());
 }
 
-void CPVRClient::WriteStreamProperties(const PVR_NAMED_VALUE *properties, unsigned int iPropertyCount, CPVRStreamProperties& props)
+void CPVRClient::WriteStreamProperties(const PVR_NAMED_VALUE* properties, unsigned int iPropertyCount, CPVRStreamProperties& props)
 {
   for (unsigned int i = 0; i < iPropertyCount; ++i)
   {
@@ -762,7 +762,7 @@ PVR_ERROR CPVRClient::GetChannelGroupsAmount(int& iGroups)
   }, m_clientCapabilities.SupportsChannelGroups());
 }
 
-PVR_ERROR CPVRClient::GetChannelGroups(CPVRChannelGroups *groups)
+PVR_ERROR CPVRClient::GetChannelGroups(CPVRChannelGroups* groups)
 {
   return DoAddonCall(__FUNCTION__, [this, groups](const AddonInstance* addon) {
     ADDON_HANDLE_STRUCT handle = {0};
@@ -772,7 +772,7 @@ PVR_ERROR CPVRClient::GetChannelGroups(CPVRChannelGroups *groups)
   }, m_clientCapabilities.SupportsChannelGroups());
 }
 
-PVR_ERROR CPVRClient::GetChannelGroupMembers(CPVRChannelGroup *group)
+PVR_ERROR CPVRClient::GetChannelGroupMembers(CPVRChannelGroup* group)
 {
   return DoAddonCall(__FUNCTION__, [this, group](const AddonInstance* addon) {
     ADDON_HANDLE_STRUCT handle = {0};
@@ -813,7 +813,7 @@ PVR_ERROR CPVRClient::GetRecordingsAmount(bool deleted, int& iRecordings)
   }, m_clientCapabilities.SupportsRecordings() && (!deleted || m_clientCapabilities.SupportsRecordingsUndelete()));
 }
 
-PVR_ERROR CPVRClient::GetRecordings(CPVRRecordings *results, bool deleted) {
+PVR_ERROR CPVRClient::GetRecordings(CPVRRecordings* results, bool deleted) {
   return DoAddonCall(__FUNCTION__, [this, results, deleted](const AddonInstance* addon)
   {
     ADDON_HANDLE_STRUCT handle = {0};
@@ -924,7 +924,7 @@ PVR_ERROR CPVRClient::GetTimersAmount(int& iTimers)
   }, m_clientCapabilities.SupportsTimers());
 }
 
-PVR_ERROR CPVRClient::GetTimers(CPVRTimersContainer *results)
+PVR_ERROR CPVRClient::GetTimers(CPVRTimersContainer* results)
 {
   return DoAddonCall(__FUNCTION__, [this, results](const AddonInstance* addon) {
     ADDON_HANDLE_STRUCT handle = {0};
@@ -1011,7 +1011,7 @@ PVR_ERROR CPVRClient::SeekRecordedStream(int64_t iFilePosition, int iWhence, int
   });
 }
 
-PVR_ERROR CPVRClient::SeekTime(double time, bool backwards, double *startpts)
+PVR_ERROR CPVRClient::SeekTime(double time, bool backwards, double* startpts)
 {
   return DoAddonCall(__FUNCTION__, [time, backwards, &startpts](const AddonInstance* addon) {
     return addon->SeekTime(time, backwards, startpts) ? PVR_ERROR_NO_ERROR : PVR_ERROR_NOT_IMPLEMENTED;
@@ -1092,7 +1092,7 @@ PVR_ERROR CPVRClient::GetRecordingStreamProperties(const std::shared_ptr<CPVRRec
   });
 }
 
-PVR_ERROR CPVRClient::GetStreamProperties(PVR_STREAM_PROPERTIES *props)
+PVR_ERROR CPVRClient::GetStreamProperties(PVR_STREAM_PROPERTIES* props)
 {
   return DoAddonCall(__FUNCTION__, [&props](const AddonInstance* addon) {
     return addon->GetStreamProperties(props);
@@ -1131,7 +1131,7 @@ PVR_ERROR CPVRClient::DemuxRead(DemuxPacket* &packet)
   }, m_clientCapabilities.HandlesDemuxing());
 }
 
-const char *CPVRClient::ToString(const PVR_ERROR error)
+const char* CPVRClient::ToString(const PVR_ERROR error)
 {
   switch (error)
   {
@@ -1284,7 +1284,7 @@ PVR_ERROR CPVRClient::CanSeekStream(bool& bCanSeek) const
   });
 }
 
-PVR_ERROR CPVRClient::GetStreamTimes(PVR_STREAM_TIMES *times)
+PVR_ERROR CPVRClient::GetStreamTimes(PVR_STREAM_TIMES* times)
 {
   return DoAddonCall(__FUNCTION__, [&times](const AddonInstance* addon) {
     return addon->GetStreamTimes(times);
@@ -1444,7 +1444,7 @@ int CPVRClient::GetPriority() const
   return m_iPriority;
 }
 
-void CPVRClient::cb_transfer_channel_group(void *kodiInstance, const ADDON_HANDLE handle, const PVR_CHANNEL_GROUP *group)
+void CPVRClient::cb_transfer_channel_group(void* kodiInstance, const ADDON_HANDLE handle, const PVR_CHANNEL_GROUP* group)
 {
   if (!handle)
   {
@@ -1452,7 +1452,7 @@ void CPVRClient::cb_transfer_channel_group(void *kodiInstance, const ADDON_HANDL
     return;
   }
 
-  CPVRChannelGroups *kodiGroups = static_cast<CPVRChannelGroups *>(handle->dataAddress);
+  CPVRChannelGroups* kodiGroups = static_cast<CPVRChannelGroups *>(handle->dataAddress);
   if (!group || !kodiGroups)
   {
     CLog::LogF(LOGERROR, "Invalid handler data");
@@ -1470,7 +1470,7 @@ void CPVRClient::cb_transfer_channel_group(void *kodiInstance, const ADDON_HANDL
   kodiGroups->UpdateFromClient(transferGroup);
 }
 
-void CPVRClient::cb_transfer_channel_group_member(void *kodiInstance, const ADDON_HANDLE handle, const PVR_CHANNEL_GROUP_MEMBER *member)
+void CPVRClient::cb_transfer_channel_group_member(void* kodiInstance, const ADDON_HANDLE handle, const PVR_CHANNEL_GROUP_MEMBER* member)
 {
   if (!handle)
   {
@@ -1478,8 +1478,8 @@ void CPVRClient::cb_transfer_channel_group_member(void *kodiInstance, const ADDO
     return;
   }
 
-  CPVRClient *client = static_cast<CPVRClient*>(kodiInstance);
-  CPVRChannelGroup *group = static_cast<CPVRChannelGroup *>(handle->dataAddress);
+  CPVRClient* client = static_cast<CPVRClient*>(kodiInstance);
+  CPVRChannelGroup* group = static_cast<CPVRChannelGroup *>(handle->dataAddress);
   if (!member || !client || !group)
   {
     CLog::LogF(LOGERROR, "Invalid handler data");
@@ -1498,7 +1498,7 @@ void CPVRClient::cb_transfer_channel_group_member(void *kodiInstance, const ADDO
   }
 }
 
-void CPVRClient::cb_transfer_epg_entry(void *kodiInstance, const ADDON_HANDLE handle, const EPG_TAG *epgentry)
+void CPVRClient::cb_transfer_epg_entry(void* kodiInstance, const ADDON_HANDLE handle, const EPG_TAG* epgentry)
 {
   if (!handle)
   {
@@ -1506,8 +1506,8 @@ void CPVRClient::cb_transfer_epg_entry(void *kodiInstance, const ADDON_HANDLE ha
     return;
   }
 
-  CPVRClient *client = static_cast<CPVRClient*>(kodiInstance);
-  CPVREpg *kodiEpg = static_cast<CPVREpg *>(handle->dataAddress);
+  CPVRClient* client = static_cast<CPVRClient*>(kodiInstance);
+  CPVREpg* kodiEpg = static_cast<CPVREpg *>(handle->dataAddress);
   if (!epgentry || !client || !kodiEpg)
   {
     CLog::LogF(LOGERROR, "Invalid handler data");
@@ -1518,7 +1518,7 @@ void CPVRClient::cb_transfer_epg_entry(void *kodiInstance, const ADDON_HANDLE ha
   kodiEpg->UpdateEntry(epgentry, client->GetID());
 }
 
-void CPVRClient::cb_transfer_channel_entry(void *kodiInstance, const ADDON_HANDLE handle, const PVR_CHANNEL *channel)
+void CPVRClient::cb_transfer_channel_entry(void* kodiInstance, const ADDON_HANDLE handle, const PVR_CHANNEL* channel)
 {
   if (!handle)
   {
@@ -1526,8 +1526,8 @@ void CPVRClient::cb_transfer_channel_entry(void *kodiInstance, const ADDON_HANDL
     return;
   }
 
-  CPVRClient *client = static_cast<CPVRClient*>(kodiInstance);
-  CPVRChannelGroupInternal *kodiChannels = static_cast<CPVRChannelGroupInternal *>(handle->dataAddress);
+  CPVRClient* client = static_cast<CPVRClient*>(kodiInstance);
+  CPVRChannelGroupInternal* kodiChannels = static_cast<CPVRChannelGroupInternal *>(handle->dataAddress);
   if (!channel || !client || !kodiChannels)
   {
     CLog::LogF(LOGERROR, "Invalid handler data");
@@ -1539,7 +1539,7 @@ void CPVRClient::cb_transfer_channel_entry(void *kodiInstance, const ADDON_HANDL
   kodiChannels->UpdateFromClient(transferChannel, CPVRChannelNumber(), channel->iOrder, transferChannel->ClientChannelNumber());
 }
 
-void CPVRClient::cb_transfer_recording_entry(void *kodiInstance, const ADDON_HANDLE handle, const PVR_RECORDING *recording)
+void CPVRClient::cb_transfer_recording_entry(void* kodiInstance, const ADDON_HANDLE handle, const PVR_RECORDING* recording)
 {
   if (!handle)
   {
@@ -1547,8 +1547,8 @@ void CPVRClient::cb_transfer_recording_entry(void *kodiInstance, const ADDON_HAN
     return;
   }
 
-  CPVRClient *client = static_cast<CPVRClient*>(kodiInstance);
-  CPVRRecordings *kodiRecordings = static_cast<CPVRRecordings *>(handle->dataAddress);
+  CPVRClient* client = static_cast<CPVRClient*>(kodiInstance);
+  CPVRRecordings* kodiRecordings = static_cast<CPVRRecordings *>(handle->dataAddress);
   if (!recording || !client || !kodiRecordings)
   {
     CLog::LogF(LOGERROR, "Invalid handler data");
@@ -1560,7 +1560,7 @@ void CPVRClient::cb_transfer_recording_entry(void *kodiInstance, const ADDON_HAN
   kodiRecordings->UpdateFromClient(transferRecording);
 }
 
-void CPVRClient::cb_transfer_timer_entry(void *kodiInstance, const ADDON_HANDLE handle, const PVR_TIMER *timer)
+void CPVRClient::cb_transfer_timer_entry(void* kodiInstance, const ADDON_HANDLE handle, const PVR_TIMER* timer)
 {
   if (!handle)
   {
@@ -1568,8 +1568,8 @@ void CPVRClient::cb_transfer_timer_entry(void *kodiInstance, const ADDON_HANDLE
     return;
   }
 
-  CPVRClient *client = static_cast<CPVRClient*>(kodiInstance);
-  CPVRTimersContainer *kodiTimers = static_cast<CPVRTimersContainer *>(handle->dataAddress);
+  CPVRClient* client = static_cast<CPVRClient*>(kodiInstance);
+  CPVRTimersContainer* kodiTimers = static_cast<CPVRTimersContainer *>(handle->dataAddress);
   if (!timer || !client || !kodiTimers)
   {
     CLog::LogF(LOGERROR, "Invalid handler data");
@@ -1584,9 +1584,9 @@ void CPVRClient::cb_transfer_timer_entry(void *kodiInstance, const ADDON_HANDLE
   kodiTimers->UpdateFromClient(transferTimer);
 }
 
-void CPVRClient::cb_add_menu_hook(void *kodiInstance, PVR_MENUHOOK *hook)
+void CPVRClient::cb_add_menu_hook(void* kodiInstance, PVR_MENUHOOK* hook)
 {
-  CPVRClient *client = static_cast<CPVRClient*>(kodiInstance);
+  CPVRClient* client = static_cast<CPVRClient*>(kodiInstance);
   if (!hook || !client)
   {
     CLog::LogF(LOGERROR, "Invalid handler data");
@@ -1596,9 +1596,9 @@ void CPVRClient::cb_add_menu_hook(void *kodiInstance, PVR_MENUHOOK *hook)
   client->GetMenuHooks()->AddHook(*hook);
 }
 
-void CPVRClient::cb_recording(void *kodiInstance, const char *strName, const char *strFileName, bool bOnOff)
+void CPVRClient::cb_recording(void* kodiInstance, const char* strName, const char* strFileName, bool bOnOff)
 {
-  CPVRClient *client = static_cast<CPVRClient*>(kodiInstance);
+  CPVRClient* client = static_cast<CPVRClient*>(kodiInstance);
   if (!client || !strFileName)
   {
     CLog::LogF(LOGERROR, "Invalid handler data");
@@ -1620,33 +1620,33 @@ void CPVRClient::cb_recording(void *kodiInstance, const char *strName, const cha
               bOnOff ? "started" : "finished", client->Name().c_str(), strName, strFileName);
 }
 
-void CPVRClient::cb_trigger_channel_update(void *kodiInstance)
+void CPVRClient::cb_trigger_channel_update(void* kodiInstance)
 {
   /* update the channels table in the next iteration of the pvrmanager's main loop */
   CServiceBroker::GetPVRManager().TriggerChannelsUpdate();
 }
 
-void CPVRClient::cb_trigger_timer_update(void *kodiInstance)
+void CPVRClient::cb_trigger_timer_update(void* kodiInstance)
 {
   /* update the timers table in the next iteration of the pvrmanager's main loop */
   CServiceBroker::GetPVRManager().TriggerTimersUpdate();
 }
 
-void CPVRClient::cb_trigger_recording_update(void *kodiInstance)
+void CPVRClient::cb_trigger_recording_update(void* kodiInstance)
 {
   /* update the recordings table in the next iteration of the pvrmanager's main loop */
   CServiceBroker::GetPVRManager().TriggerRecordingsUpdate();
 }
 
-void CPVRClient::cb_trigger_channel_groups_update(void *kodiInstance)
+void CPVRClient::cb_trigger_channel_groups_update(void* kodiInstance)
 {
   /* update all channel groups in the next iteration of the pvrmanager's main loop */
   CServiceBroker::GetPVRManager().TriggerChannelGroupsUpdate();
 }
 
-void CPVRClient::cb_trigger_epg_update(void *kodiInstance, unsigned int iChannelUid)
+void CPVRClient::cb_trigger_epg_update(void* kodiInstance, unsigned int iChannelUid)
 {
-  CPVRClient *client = static_cast<CPVRClient*>(kodiInstance);
+  CPVRClient* client = static_cast<CPVRClient*>(kodiInstance);
   if (!client)
   {
     CLog::LogF(LOGERROR, "Invalid handler data");
@@ -1656,19 +1656,19 @@ void CPVRClient::cb_trigger_epg_update(void *kodiInstance, unsigned int iChannel
   CServiceBroker::GetPVRManager().EpgContainer().UpdateRequest(client->GetID(), iChannelUid);
 }
 
-void CPVRClient::cb_free_demux_packet(void *kodiInstance, DemuxPacket* pPacket)
+void CPVRClient::cb_free_demux_packet(void* kodiInstance, DemuxPacket* pPacket)
 {
   CDVDDemuxUtils::FreeDemuxPacket(pPacket);
 }
 
-DemuxPacket* CPVRClient::cb_allocate_demux_packet(void *kodiInstance, int iDataSize)
+DemuxPacket* CPVRClient::cb_allocate_demux_packet(void* kodiInstance, int iDataSize)
 {
   return CDVDDemuxUtils::AllocateDemuxPacket(iDataSize);
 }
 
-void CPVRClient::cb_connection_state_change(void* kodiInstance, const char* strConnectionString, PVR_CONNECTION_STATE newState, const char *strMessage)
+void CPVRClient::cb_connection_state_change(void* kodiInstance, const char* strConnectionString, PVR_CONNECTION_STATE newState, const char* strMessage)
 {
-  CPVRClient *client = static_cast<CPVRClient*>(kodiInstance);
+  CPVRClient* client = static_cast<CPVRClient*>(kodiInstance);
   if (!client || !strConnectionString)
   {
     CLog::LogF(LOGERROR, "Invalid handler data");
@@ -1692,7 +1692,7 @@ void CPVRClient::cb_connection_state_change(void* kodiInstance, const char* strC
 
 void CPVRClient::cb_epg_event_state_change(void* kodiInstance, EPG_TAG* tag, EPG_EVENT_STATE newState)
 {
-  CPVRClient *client = static_cast<CPVRClient*>(kodiInstance);
+  CPVRClient* client = static_cast<CPVRClient*>(kodiInstance);
   if (!client || !tag)
   {
     CLog::LogF(LOGERROR, "Invalid handler data");
diff --git a/xbmc/pvr/PVRActionListener.cpp b/xbmc/pvr/PVRActionListener.cpp
index 27300679eb6c..0896d1f60b21 100644
--- a/xbmc/pvr/PVRActionListener.cpp
+++ b/xbmc/pvr/PVRActionListener.cpp
@@ -313,7 +313,7 @@ void CPVRActionListener::OnSettingAction(std::shared_ptr<const CSetting> setting
   {
     if (CServiceBroker::GetPVRManager().IsStarted())
     {
-      CGUIDialog *dialog = CServiceBroker::GetGUI()->GetWindowManager().GetDialog(WINDOW_DIALOG_PVR_CLIENT_PRIORITIES);
+      CGUIDialog* dialog = CServiceBroker::GetGUI()->GetWindowManager().GetDialog(WINDOW_DIALOG_PVR_CLIENT_PRIORITIES);
       if (dialog)
       {
         dialog->Open();
@@ -325,7 +325,7 @@ void CPVRActionListener::OnSettingAction(std::shared_ptr<const CSetting> setting
   {
     if (CServiceBroker::GetPVRManager().IsStarted())
     {
-      CGUIDialog *dialog = CServiceBroker::GetGUI()->GetWindowManager().GetDialog(WINDOW_DIALOG_PVR_CHANNEL_MANAGER);
+      CGUIDialog* dialog = CServiceBroker::GetGUI()->GetWindowManager().GetDialog(WINDOW_DIALOG_PVR_CHANNEL_MANAGER);
       if (dialog)
         dialog->Open();
     }
@@ -334,7 +334,7 @@ void CPVRActionListener::OnSettingAction(std::shared_ptr<const CSetting> setting
   {
     if (CServiceBroker::GetPVRManager().IsStarted())
     {
-      CGUIDialog *dialog = CServiceBroker::GetGUI()->GetWindowManager().GetDialog(WINDOW_DIALOG_PVR_GROUP_MANAGER);
+      CGUIDialog* dialog = CServiceBroker::GetGUI()->GetWindowManager().GetDialog(WINDOW_DIALOG_PVR_GROUP_MANAGER);
       if (dialog)
         dialog->Open();
     }
diff --git a/xbmc/pvr/PVRDatabase.h b/xbmc/pvr/PVRDatabase.h
index 7227715e1f04..8ec0b86af1fc 100644
--- a/xbmc/pvr/PVRDatabase.h
+++ b/xbmc/pvr/PVRDatabase.h
@@ -55,7 +55,7 @@ namespace PVR
      * @brief Get the default sqlite database filename.
      * @return The default filename.
      */
-    const char *GetBaseDBName() const override { return "TV"; }
+    const char* GetBaseDBName() const override { return "TV"; }
 
     /*! @name Client methods */
     //@{
diff --git a/xbmc/pvr/PVRGUIActions.cpp b/xbmc/pvr/PVRGUIActions.cpp
index 146b6149429e..653e8a73123d 100644
--- a/xbmc/pvr/PVRGUIActions.cpp
+++ b/xbmc/pvr/PVRGUIActions.cpp
@@ -301,7 +301,7 @@ namespace PVR
     const bool bRadio(CPVRItem(item).IsRadio());
 
     int windowSearchId = bRadio ? WINDOW_RADIO_SEARCH : WINDOW_TV_SEARCH;
-    CGUIWindowPVRSearchBase *windowSearch;
+    CGUIWindowPVRSearchBase* windowSearch;
     if (bRadio)
       windowSearch = CServiceBroker::GetGUI()->GetWindowManager().GetWindow<CGUIWindowPVRRadioSearch>(windowSearchId);
     else
@@ -506,7 +506,7 @@ namespace PVR
 
     private:
       int m_iInstantRecordTime;
-      CGUIDialogSelect *m_pDlgSelect; // not owner!
+      CGUIDialogSelect* m_pDlgSelect; // not owner!
       std::map<PVRRECORD_INSTANTRECORDACTION, int> m_actions;
     };
 
@@ -859,7 +859,7 @@ namespace PVR
       return false;
     }
 
-    CGUIWindowPVRBase *pvrWindow = dynamic_cast<CGUIWindowPVRBase*>(CServiceBroker::GetGUI()->GetWindowManager().GetWindow(CServiceBroker::GetGUI()->GetWindowManager().GetActiveWindow()));
+    CGUIWindowPVRBase* pvrWindow = dynamic_cast<CGUIWindowPVRBase*>(CServiceBroker::GetGUI()->GetWindowManager().GetWindow(CServiceBroker::GetGUI()->GetWindowManager().GetActiveWindow()));
     if (pvrWindow)
       pvrWindow->DoRefresh();
     else
@@ -1209,7 +1209,7 @@ namespace PVR
     }
   }
 
-  void CPVRGUIActions::StartPlayback(CFileItem *item, bool bFullscreen) const
+  void CPVRGUIActions::StartPlayback(CFileItem* item, bool bFullscreen) const
   {
     // Obtain dynamic playback url and properties from the respective pvr client
     const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(*item);
@@ -1261,7 +1261,7 @@ namespace PVR
 
     if (!bCheckResume || CheckResumeRecording(item))
     {
-      CFileItem *itemToPlay = new CFileItem(recording);
+      CFileItem* itemToPlay = new CFileItem(recording);
       itemToPlay->m_lStartOffset = item->m_lStartOffset;
       StartPlayback(itemToPlay, true);
     }
@@ -1494,7 +1494,7 @@ namespace PVR
     if (!CServiceBroker::GetPVRManager().ChannelGroups()->GetGroupAll(channel->IsRadio())->RemoveFromGroup(channel))
       return false;
 
-    CGUIWindowPVRBase *pvrWindow = dynamic_cast<CGUIWindowPVRBase*>(CServiceBroker::GetGUI()->GetWindowManager().GetWindow(CServiceBroker::GetGUI()->GetWindowManager().GetActiveWindow()));
+    CGUIWindowPVRBase* pvrWindow = dynamic_cast<CGUIWindowPVRBase*>(CServiceBroker::GetGUI()->GetWindowManager().GetWindow(CServiceBroker::GetGUI()->GetWindowManager().GetActiveWindow()));
     if (pvrWindow)
       pvrWindow->DoRefresh();
     else
@@ -2212,7 +2212,7 @@ namespace PVR
   CPVRChannelNumberInputHandler& CPVRGUIActions::GetChannelNumberInputHandler()
   {
     // window/dialog specific input handler
-    CPVRChannelNumberInputHandler *windowInputHandler = dynamic_cast<CPVRChannelNumberInputHandler*>(CServiceBroker::GetGUI()->GetWindowManager().GetWindow(CServiceBroker::GetGUI()->GetWindowManager().GetActiveWindowOrDialog()));
+    CPVRChannelNumberInputHandler* windowInputHandler = dynamic_cast<CPVRChannelNumberInputHandler*>(CServiceBroker::GetGUI()->GetWindowManager().GetWindow(CServiceBroker::GetGUI()->GetWindowManager().GetActiveWindowOrDialog()));
     if (windowInputHandler)
       return *windowInputHandler;
 
diff --git a/xbmc/pvr/PVRGUIActions.h b/xbmc/pvr/PVRGUIActions.h
index bcc5e5dab0ad..f2b72f112825 100644
--- a/xbmc/pvr/PVRGUIActions.h
+++ b/xbmc/pvr/PVRGUIActions.h
@@ -516,7 +516,7 @@ namespace PVR
      * @param bFullscreen start playback fullscreen or not.
      * @param item containing a channel or a recording.
      */
-    void StartPlayback(CFileItem *item, bool bFullscreen) const;
+    void StartPlayback(CFileItem* item, bool bFullscreen) const;
 
     bool AllLocalBackendsIdle(std::shared_ptr<CPVRTimerInfoTag>& causingEvent) const;
     bool EventOccursOnLocalBackend(const std::shared_ptr<CFileItem>& item) const;
diff --git a/xbmc/pvr/PVRGUIChannelNavigator.cpp b/xbmc/pvr/PVRGUIChannelNavigator.cpp
index fb51cf0f26cd..e30d970df09c 100644
--- a/xbmc/pvr/PVRGUIChannelNavigator.cpp
+++ b/xbmc/pvr/PVRGUIChannelNavigator.cpp
@@ -85,7 +85,7 @@ namespace PVR
         if (m_iChannelEntryJobId >= 0)
           CJobManager::GetInstance().CancelJob(m_iChannelEntryJobId);
 
-        CPVRChannelEntryTimeoutJob *job = new CPVRChannelEntryTimeoutJob(iTimeout);
+        CPVRChannelEntryTimeoutJob* job = new CPVRChannelEntryTimeoutJob(iTimeout);
         m_iChannelEntryJobId = CJobManager::GetInstance().AddJob(job, dynamic_cast<IJobCallback*>(job));
       }
       else
@@ -150,7 +150,7 @@ namespace PVR
 
       if (!bForce && iTimeout > 0)
       {
-        CPVRChannelInfoTimeoutJob *job = new CPVRChannelInfoTimeoutJob(iTimeout * 1000);
+        CPVRChannelInfoTimeoutJob* job = new CPVRChannelInfoTimeoutJob(iTimeout * 1000);
         m_iChannelInfoJobId = CJobManager::GetInstance().AddJob(job, dynamic_cast<IJobCallback*>(job));
       }
     }
diff --git a/xbmc/pvr/PVRGUIInfo.cpp b/xbmc/pvr/PVRGUIInfo.cpp
index 184de37aace6..49f847e1e6b6 100644
--- a/xbmc/pvr/PVRGUIInfo.cpp
+++ b/xbmc/pvr/PVRGUIInfo.cpp
@@ -271,13 +271,13 @@ void CPVRGUIInfo::UpdateTimeshiftData(void)
   m_timesInfo.Update();
 }
 
-bool CPVRGUIInfo::InitCurrentItem(CFileItem *item)
+bool CPVRGUIInfo::InitCurrentItem(CFileItem* item)
 {
   CServiceBroker::GetPVRManager().PublishEvent(PVREvent::CurrentItem);
   return false;
 }
 
-bool CPVRGUIInfo::GetLabel(std::string& value, const CFileItem *item, int contextWindow, const CGUIInfo& info, std::string *fallback) const
+bool CPVRGUIInfo::GetLabel(std::string& value, const CFileItem* item, int contextWindow, const CGUIInfo& info, std::string* fallback) const
 {
   return GetListItemAndPlayerLabel(item, info, value) ||
          GetPVRLabel(item, info, value) ||
@@ -303,7 +303,7 @@ namespace
 
 } // unnamed namespace
 
-bool CPVRGUIInfo::GetListItemAndPlayerLabel(const CFileItem *item, const CGUIInfo& info, std::string& strValue) const
+bool CPVRGUIInfo::GetListItemAndPlayerLabel(const CFileItem* item, const CGUIInfo& info, std::string& strValue) const
 {
   const std::shared_ptr<CPVRTimerInfoTag> timer = item->GetPVRTimerInfoTag();
   if (timer)
@@ -666,7 +666,7 @@ bool CPVRGUIInfo::GetListItemAndPlayerLabel(const CFileItem *item, const CGUIInf
   return false;
 }
 
-bool CPVRGUIInfo::GetPVRLabel(const CFileItem *item, const CGUIInfo& info, std::string& strValue) const
+bool CPVRGUIInfo::GetPVRLabel(const CFileItem* item, const CGUIInfo& info, std::string& strValue) const
 {
   CSingleLock lock(m_critSection);
 
@@ -876,7 +876,7 @@ bool CPVRGUIInfo::GetPVRLabel(const CFileItem *item, const CGUIInfo& info, std::
   return false;
 }
 
-bool CPVRGUIInfo::GetRadioRDSLabel(const CFileItem *item, const CGUIInfo& info, std::string& strValue) const
+bool CPVRGUIInfo::GetRadioRDSLabel(const CFileItem* item, const CGUIInfo& info, std::string& strValue) const
 {
   if (!item->HasPVRChannelInfoTag())
     return false;
@@ -1019,17 +1019,17 @@ bool CPVRGUIInfo::GetRadioRDSLabel(const CFileItem *item, const CGUIInfo& info,
   return false;
 }
 
-bool CPVRGUIInfo::GetInt(int& value, const CGUIListItem *item, int contextWindow, const CGUIInfo& info) const
+bool CPVRGUIInfo::GetInt(int& value, const CGUIListItem* item, int contextWindow, const CGUIInfo& info) const
 {
   if (!item->IsFileItem())
     return false;
 
-  const CFileItem *fitem = static_cast<const CFileItem*>(item);
+  const CFileItem* fitem = static_cast<const CFileItem*>(item);
   return GetListItemAndPlayerInt(fitem, info, value) ||
          GetPVRInt(fitem, info, value);
 }
 
-bool CPVRGUIInfo::GetListItemAndPlayerInt(const CFileItem *item, const CGUIInfo& info, int& iValue) const
+bool CPVRGUIInfo::GetListItemAndPlayerInt(const CFileItem* item, const CGUIInfo& info, int& iValue) const
 {
   switch (info.m_info)
   {
@@ -1045,7 +1045,7 @@ bool CPVRGUIInfo::GetListItemAndPlayerInt(const CFileItem *item, const CGUIInfo&
   return false;
 }
 
-bool CPVRGUIInfo::GetPVRInt(const CFileItem *item, const CGUIInfo& info, int& iValue) const
+bool CPVRGUIInfo::GetPVRInt(const CFileItem* item, const CGUIInfo& info, int& iValue) const
 {
   CSingleLock lock(m_critSection);
 
@@ -1100,18 +1100,18 @@ bool CPVRGUIInfo::GetPVRInt(const CFileItem *item, const CGUIInfo& info, int& iV
   return false;
 }
 
-bool CPVRGUIInfo::GetBool(bool& value, const CGUIListItem *item, int contextWindow, const CGUIInfo& info) const
+bool CPVRGUIInfo::GetBool(bool& value, const CGUIListItem* item, int contextWindow, const CGUIInfo& info) const
 {
   if (!item->IsFileItem())
     return false;
 
-  const CFileItem *fitem = static_cast<const CFileItem*>(item);
+  const CFileItem* fitem = static_cast<const CFileItem*>(item);
   return GetListItemAndPlayerBool(fitem, info, value) ||
          GetPVRBool(fitem, info, value) ||
          GetRadioRDSBool(fitem, info, value);
 }
 
-bool CPVRGUIInfo::GetListItemAndPlayerBool(const CFileItem *item, const CGUIInfo& info, bool& bValue) const
+bool CPVRGUIInfo::GetListItemAndPlayerBool(const CFileItem* item, const CGUIInfo& info, bool& bValue) const
 {
   switch (info.m_info)
   {
@@ -1313,7 +1313,7 @@ bool CPVRGUIInfo::GetListItemAndPlayerBool(const CFileItem *item, const CGUIInfo
   return false;
 }
 
-bool CPVRGUIInfo::GetPVRBool(const CFileItem *item, const CGUIInfo& info, bool& bValue) const
+bool CPVRGUIInfo::GetPVRBool(const CFileItem* item, const CGUIInfo& info, bool& bValue) const
 {
   CSingleLock lock(m_critSection);
 
@@ -1383,7 +1383,7 @@ bool CPVRGUIInfo::GetPVRBool(const CFileItem *item, const CGUIInfo& info, bool&
   return false;
 }
 
-bool CPVRGUIInfo::GetRadioRDSBool(const CFileItem *item, const CGUIInfo& info, bool& bValue) const
+bool CPVRGUIInfo::GetRadioRDSBool(const CFileItem* item, const CGUIInfo& info, bool& bValue) const
 {
   if (!item->HasPVRChannelInfoTag())
     return false;
diff --git a/xbmc/pvr/PVRGUIInfo.h b/xbmc/pvr/PVRGUIInfo.h
index 39556b6afbf6..b07b257f67e1 100644
--- a/xbmc/pvr/PVRGUIInfo.h
+++ b/xbmc/pvr/PVRGUIInfo.h
@@ -53,10 +53,10 @@ namespace PVR
     void Notify(const PVREvent& event);
 
     // KODI::GUILIB::GUIINFO::IGUIInfoProvider implementation
-    bool InitCurrentItem(CFileItem *item) override;
-    bool GetLabel(std::string& value, const CFileItem *item, int contextWindow, const KODI::GUILIB::GUIINFO::CGUIInfo& info, std::string *fallback) const override;
-    bool GetInt(int& value, const CGUIListItem *item, int contextWindow, const KODI::GUILIB::GUIINFO::CGUIInfo& info) const override;
-    bool GetBool(bool& value, const CGUIListItem *item, int contextWindow, const KODI::GUILIB::GUIINFO::CGUIInfo& info) const override;
+    bool InitCurrentItem(CFileItem* item) override;
+    bool GetLabel(std::string& value, const CFileItem* item, int contextWindow, const KODI::GUILIB::GUIINFO::CGUIInfo& info, std::string* fallback) const override;
+    bool GetInt(int& value, const CGUIListItem* item, int contextWindow, const KODI::GUILIB::GUIINFO::CGUIInfo& info) const override;
+    bool GetBool(bool& value, const CGUIListItem* item, int contextWindow, const KODI::GUILIB::GUIINFO::CGUIInfo& info) const override;
 
   private:
     void ResetProperties(void);
@@ -76,16 +76,16 @@ namespace PVR
 
     void UpdateTimersToggle(void);
 
-    bool GetListItemAndPlayerLabel(const CFileItem *item, const KODI::GUILIB::GUIINFO::CGUIInfo& info, std::string& strValue) const;
-    bool GetPVRLabel(const CFileItem *item, const KODI::GUILIB::GUIINFO::CGUIInfo& info, std::string& strValue) const;
-    bool GetRadioRDSLabel(const CFileItem *item, const KODI::GUILIB::GUIINFO::CGUIInfo& info, std::string& strValue) const;
+    bool GetListItemAndPlayerLabel(const CFileItem* item, const KODI::GUILIB::GUIINFO::CGUIInfo& info, std::string& strValue) const;
+    bool GetPVRLabel(const CFileItem* item, const KODI::GUILIB::GUIINFO::CGUIInfo& info, std::string& strValue) const;
+    bool GetRadioRDSLabel(const CFileItem* item, const KODI::GUILIB::GUIINFO::CGUIInfo& info, std::string& strValue) const;
 
-    bool GetListItemAndPlayerInt(const CFileItem *item, const KODI::GUILIB::GUIINFO::CGUIInfo& info, int& iValue) const;
-    bool GetPVRInt(const CFileItem *item, const KODI::GUILIB::GUIINFO::CGUIInfo& info, int& iValue) const;
+    bool GetListItemAndPlayerInt(const CFileItem* item, const KODI::GUILIB::GUIINFO::CGUIInfo& info, int& iValue) const;
+    bool GetPVRInt(const CFileItem* item, const KODI::GUILIB::GUIINFO::CGUIInfo& info, int& iValue) const;
 
-    bool GetListItemAndPlayerBool(const CFileItem *item, const KODI::GUILIB::GUIINFO::CGUIInfo& info, bool& bValue) const;
-    bool GetPVRBool(const CFileItem *item, const KODI::GUILIB::GUIINFO::CGUIInfo& info, bool& bValue) const;
-    bool GetRadioRDSBool(const CFileItem *item, const KODI::GUILIB::GUIINFO::CGUIInfo& info, bool& bValue) const;
+    bool GetListItemAndPlayerBool(const CFileItem* item, const KODI::GUILIB::GUIINFO::CGUIInfo& info, bool& bValue) const;
+    bool GetPVRBool(const CFileItem* item, const KODI::GUILIB::GUIINFO::CGUIInfo& info, bool& bValue) const;
+    bool GetRadioRDSBool(const CFileItem* item, const KODI::GUILIB::GUIINFO::CGUIInfo& info, bool& bValue) const;
 
     void CharInfoBackendNumber(std::string& strValue) const;
     void CharInfoTotalDiskSpace(std::string& strValue) const;
diff --git a/xbmc/pvr/PVRJobs.h b/xbmc/pvr/PVRJobs.h
index 518611afc2fd..e1eadb1e6144 100644
--- a/xbmc/pvr/PVRJobs.h
+++ b/xbmc/pvr/PVRJobs.h
@@ -26,7 +26,7 @@ namespace PVR
   public:
     CPVRPlayChannelOnStartupJob() = default;
     ~CPVRPlayChannelOnStartupJob() override = default;
-    const char *GetType() const override { return "pvr-play-channel-on-startup"; }
+    const char* GetType() const override { return "pvr-play-channel-on-startup"; }
 
     bool DoWork() override;
   };
@@ -36,8 +36,8 @@ namespace PVR
   public:
     explicit CPVRChannelEntryTimeoutJob(int timeout);
     ~CPVRChannelEntryTimeoutJob() override = default;
-    const char *GetType() const override { return "pvr-channel-entry-timeout-job"; }
-    void OnJobComplete(unsigned int iJobID, bool bSuccess, CJob *job) override {}
+    const char* GetType() const override { return "pvr-channel-entry-timeout-job"; }
+    void OnJobComplete(unsigned int iJobID, bool bSuccess, CJob* job) override {}
 
     bool DoWork() override;
   private:
@@ -49,8 +49,8 @@ namespace PVR
   public:
     CPVRChannelInfoTimeoutJob(int iTimeout);
     ~CPVRChannelInfoTimeoutJob() override = default;
-    const char *GetType() const override { return "pvr-channel-info-timeout-job"; }
-    void OnJobComplete(unsigned int iJobID, bool bSuccess, CJob *job) override {}
+    const char* GetType() const override { return "pvr-channel-info-timeout-job"; }
+    void OnJobComplete(unsigned int iJobID, bool bSuccess, CJob* job) override {}
 
     bool DoWork() override;
   private:
@@ -63,7 +63,7 @@ namespace PVR
     CPVREventlogJob() = default;
     CPVREventlogJob(bool bNotifyUser, bool bError, const std::string& label, const std::string& msg, const std::string& icon);
     ~CPVREventlogJob() override = default;
-    const char *GetType() const override { return "pvr-eventlog-job"; }
+    const char* GetType() const override { return "pvr-eventlog-job"; }
 
     void AddEvent(bool bNotifyUser, bool bError, const std::string& label, const std::string& msg, const std::string& icon);
 
@@ -89,7 +89,7 @@ namespace PVR
   public:
     CPVRStartupJob(void) = default;
     ~CPVRStartupJob() override = default;
-    const char *GetType() const override { return "pvr-startup"; }
+    const char* GetType() const override { return "pvr-startup"; }
 
     bool DoWork() override;
   };
@@ -99,7 +99,7 @@ namespace PVR
   public:
     explicit CPVRUpdateAddonsJob(const std::string& changedAddonId) : m_changedAddonId(changedAddonId) {};
     ~CPVRUpdateAddonsJob() override = default;
-    const char *GetType() const override { return "pvr-update-addons"; }
+    const char* GetType() const override { return "pvr-update-addons"; }
 
     bool DoWork() override;
 
@@ -114,7 +114,7 @@ namespace PVR
   public:
     CPVREpgsCreateJob(void) = default;
     ~CPVREpgsCreateJob() override = default;
-    const char *GetType() const override { return "pvr-create-epgs"; }
+    const char* GetType() const override { return "pvr-create-epgs"; }
 
     bool DoWork() override;
   };
@@ -124,7 +124,7 @@ namespace PVR
   public:
     CPVRRecordingsUpdateJob(void) = default;
     ~CPVRRecordingsUpdateJob() override = default;
-    const char *GetType() const override { return "pvr-update-recordings"; }
+    const char* GetType() const override { return "pvr-update-recordings"; }
 
     bool DoWork() override;
   };
@@ -134,7 +134,7 @@ namespace PVR
   public:
     CPVRTimersUpdateJob(void) = default;
     ~CPVRTimersUpdateJob() override = default;
-    const char *GetType() const override { return "pvr-update-timers"; }
+    const char* GetType() const override { return "pvr-update-timers"; }
 
     bool DoWork() override;
   };
@@ -144,7 +144,7 @@ namespace PVR
   public:
     CPVRChannelsUpdateJob(void) = default;
     ~CPVRChannelsUpdateJob() override = default;
-    const char *GetType() const override { return "pvr-update-channels"; }
+    const char* GetType() const override { return "pvr-update-channels"; }
 
     bool DoWork() override;
   };
@@ -154,7 +154,7 @@ namespace PVR
   public:
     CPVRChannelGroupsUpdateJob(void) = default;
     ~CPVRChannelGroupsUpdateJob() override = default;
-    const char *GetType() const override { return "pvr-update-channelgroups"; }
+    const char* GetType() const override { return "pvr-update-channelgroups"; }
 
     bool DoWork() override;
   };
@@ -166,7 +166,7 @@ namespace PVR
   public:
     CPVRSearchMissingChannelIconsJob(const std::vector<std::shared_ptr<CPVRChannelGroup>>& groups, bool bUpdateDb);
     ~CPVRSearchMissingChannelIconsJob() override = default;
-    const char *GetType() const override { return "pvr-search-missing-channel-icons"; }
+    const char* GetType() const override { return "pvr-search-missing-channel-icons"; }
 
     bool DoWork() override;
   private:
@@ -176,14 +176,14 @@ namespace PVR
   class CPVRClientConnectionJob : public CJob
   {
   public:
-    CPVRClientConnectionJob(CPVRClient *client, std::string connectString, PVR_CONNECTION_STATE state, std::string message)
+    CPVRClientConnectionJob(CPVRClient* client, std::string connectString, PVR_CONNECTION_STATE state, std::string message)
     : m_client(client), m_connectString(connectString), m_state(state), m_message(message) {}
     ~CPVRClientConnectionJob() override = default;
-    const char *GetType() const override { return "pvr-client-connection"; }
+    const char* GetType() const override { return "pvr-client-connection"; }
 
     bool DoWork() override;
   private:
-    CPVRClient *m_client;
+    CPVRClient* m_client;
     std::string m_connectString;
     PVR_CONNECTION_STATE m_state;
     std::string m_message;
diff --git a/xbmc/pvr/PVRManager.cpp b/xbmc/pvr/PVRManager.cpp
index cbb04f779f32..538feae44dcd 100644
--- a/xbmc/pvr/PVRManager.cpp
+++ b/xbmc/pvr/PVRManager.cpp
@@ -66,7 +66,7 @@ void CPVRManagerJobQueue::Stop()
 void CPVRManagerJobQueue::Clear()
 {
   CSingleLock lock(m_critSection);
-  for (CJob *updateJob : m_pendingUpdates)
+  for (CJob* updateJob : m_pendingUpdates)
     delete updateJob;
 
   m_pendingUpdates.clear();
@@ -78,7 +78,7 @@ void CPVRManagerJobQueue::AppendJob(CJob * job)
   CSingleLock lock(m_critSection);
 
   // check for another pending job of given type...
-  for (CJob *updateJob : m_pendingUpdates)
+  for (CJob* updateJob : m_pendingUpdates)
   {
     if (!strcmp(updateJob->GetType(), job->GetType()))
     {
@@ -105,7 +105,7 @@ void CPVRManagerJobQueue::ExecutePendingJobs()
     m_triggerEvent.Reset();
   }
 
-  CJob *job = nullptr;
+  CJob* job = nullptr;
   while (!pendingUpdates.empty())
   {
     job = pendingUpdates.front();
@@ -153,7 +153,7 @@ CPVRManager::~CPVRManager(void)
   CLog::LogFC(LOGDEBUG, LOGPVR, "PVR Manager instance destroyed");
 }
 
-void CPVRManager::Announce(ANNOUNCEMENT::AnnouncementFlag flag, const char *sender, const char *message, const CVariant& data)
+void CPVRManager::Announce(ANNOUNCEMENT::AnnouncementFlag flag, const char* sender, const char* message, const CVariant& data)
 {
   if (!IsStarted())
     return;
@@ -751,7 +751,7 @@ void CPVRManager::SetPlayingGroup(const std::shared_ptr<CPVRChannel>& channel)
   {
     // The channel we'll switch to is not part of the current selected group.
     // Set the first group as the selected group where the channel is a member.
-    CPVRChannelGroups *channelGroups = m_channelGroups->Get(channel->IsRadio());
+    CPVRChannelGroups* channelGroups = m_channelGroups->Get(channel->IsRadio());
     std::vector<std::shared_ptr<CPVRChannelGroup>> groups = channelGroups->GetGroupsByChannel(channel, true);
     if (!groups.empty())
       channelGroups->SetSelectedGroup(groups.front());
@@ -985,7 +985,7 @@ void CPVRManager::TriggerSearchMissingChannelIcons(const std::shared_ptr<CPVRCha
     CJobManager::GetInstance().AddJob(new CPVRSearchMissingChannelIconsJob({group}, false), nullptr);
 }
 
-void CPVRManager::ConnectionStateChange(CPVRClient *client, std::string connectString, PVR_CONNECTION_STATE state, std::string message)
+void CPVRManager::ConnectionStateChange(CPVRClient* client, std::string connectString, PVR_CONNECTION_STATE state, std::string message)
 {
   // Note: No check for started pvr manager here. This method is intended to get called even before the mgr is started.
   CJobManager::GetInstance().AddJob(new CPVRClientConnectionJob(client, connectString, state, message), NULL);
diff --git a/xbmc/pvr/PVRManager.h b/xbmc/pvr/PVRManager.h
index e3858d1c01de..d847e718c14f 100644
--- a/xbmc/pvr/PVRManager.h
+++ b/xbmc/pvr/PVRManager.h
@@ -112,7 +112,7 @@ namespace PVR
      */
     ~CPVRManager(void) override;
 
-    void Announce(ANNOUNCEMENT::AnnouncementFlag flag, const char *sender, const char *message, const CVariant& data) override;
+    void Announce(ANNOUNCEMENT::AnnouncementFlag flag, const char* sender, const char* message, const CVariant& data) override;
 
     /*!
      * @brief Get the channel groups container.
@@ -465,7 +465,7 @@ namespace PVR
     /*!
      * @brief Signal a connection change of a client
      */
-    void ConnectionStateChange(CPVRClient *client, std::string connectString, PVR_CONNECTION_STATE state, std::string message);
+    void ConnectionStateChange(CPVRClient* client, std::string connectString, PVR_CONNECTION_STATE state, std::string message);
 
     /*!
      * @brief Query the events available for CEventStream
diff --git a/xbmc/pvr/PVRSettings.cpp b/xbmc/pvr/PVRSettings.cpp
index 4372bacdffa2..0297537f85cb 100644
--- a/xbmc/pvr/PVRSettings.cpp
+++ b/xbmc/pvr/PVRSettings.cpp
@@ -163,7 +163,7 @@ void CPVRSettings::MarginTimeFiller(
   }
 }
 
-bool CPVRSettings::IsSettingVisible(const std::string& condition, const std::string& value, std::shared_ptr<const CSetting> setting, void *data)
+bool CPVRSettings::IsSettingVisible(const std::string& condition, const std::string& value, std::shared_ptr<const CSetting> setting, void* data)
 {
   if (setting == nullptr)
     return false;
@@ -187,7 +187,7 @@ bool CPVRSettings::IsSettingVisible(const std::string& condition, const std::str
   }
 }
 
-bool CPVRSettings::CheckParentalPin(const std::string& condition, const std::string& value, std::shared_ptr<const CSetting> setting, void *data)
+bool CPVRSettings::CheckParentalPin(const std::string& condition, const std::string& value, std::shared_ptr<const CSetting> setting, void* data)
 {
   return CServiceBroker::GetPVRManager().GUIActions()->CheckParentalPIN() == ParentalCheckResult::SUCCESS;
 }
diff --git a/xbmc/pvr/PVRSettings.h b/xbmc/pvr/PVRSettings.h
index 279c77e8590b..269291b92c8b 100644
--- a/xbmc/pvr/PVRSettings.h
+++ b/xbmc/pvr/PVRSettings.h
@@ -42,13 +42,13 @@ namespace PVR
 
     // settings value filler for start/end recording margin time for PVR timers.
     static void MarginTimeFiller(
-      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption>& list, int& current, void *data);
+      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption>& list, int& current, void* data);
 
     // Dynamically hide or show settings.
-    static bool IsSettingVisible(const std::string& condition, const std::string& value, std::shared_ptr<const CSetting> setting, void *data);
+    static bool IsSettingVisible(const std::string& condition, const std::string& value, std::shared_ptr<const CSetting> setting, void* data);
 
     // Do parental PIN check.
-    static bool CheckParentalPin(const std::string& condition, const std::string& value, std::shared_ptr<const CSetting> setting, void *data);
+    static bool CheckParentalPin(const std::string& condition, const std::string& value, std::shared_ptr<const CSetting> setting, void* data);
 
   private:
     CPVRSettings(const CPVRSettings&) = delete;
diff --git a/xbmc/pvr/addons/PVRClients.cpp b/xbmc/pvr/addons/PVRClients.cpp
index cf8b5c2915c3..cc3b48dd4907 100644
--- a/xbmc/pvr/addons/PVRClients.cpp
+++ b/xbmc/pvr/addons/PVRClients.cpp
@@ -459,7 +459,7 @@ std::vector<SBackend> CPVRClients::GetBackendProperties() const
   return backendProperties;
 }
 
-bool CPVRClients::GetTimers(CPVRTimersContainer *timers, std::vector<int>& failedClients)
+bool CPVRClients::GetTimers(CPVRTimersContainer* timers, std::vector<int>& failedClients)
 {
   return ForCreatedClients(__FUNCTION__, [timers](const std::shared_ptr<CPVRClient>& client) {
     return client->GetTimers(timers);
@@ -477,7 +477,7 @@ PVR_ERROR CPVRClients::GetTimerTypes(CPVRTimerTypes& results) const
   });
 }
 
-PVR_ERROR CPVRClients::GetRecordings(CPVRRecordings *recordings, bool deleted)
+PVR_ERROR CPVRClients::GetRecordings(CPVRRecordings* recordings, bool deleted)
 {
   return ForCreatedClients(__FUNCTION__, [recordings, deleted](const std::shared_ptr<CPVRClient>& client) {
     return client->GetRecordings(recordings, deleted);
@@ -498,21 +498,21 @@ PVR_ERROR CPVRClients::SetEPGTimeFrame(int iDays)
   });
 }
 
-PVR_ERROR CPVRClients::GetChannels(CPVRChannelGroupInternal *group, std::vector<int>& failedClients)
+PVR_ERROR CPVRClients::GetChannels(CPVRChannelGroupInternal* group, std::vector<int>& failedClients)
 {
   return ForCreatedClients(__FUNCTION__, [group](const std::shared_ptr<CPVRClient>& client) {
     return client->GetChannels(*group, group->IsRadio());
   }, failedClients);
 }
 
-PVR_ERROR CPVRClients::GetChannelGroups(CPVRChannelGroups *groups, std::vector<int>& failedClients)
+PVR_ERROR CPVRClients::GetChannelGroups(CPVRChannelGroups* groups, std::vector<int>& failedClients)
 {
   return ForCreatedClients(__FUNCTION__, [groups](const std::shared_ptr<CPVRClient>& client) {
     return client->GetChannelGroups(groups);
   }, failedClients);
 }
 
-PVR_ERROR CPVRClients::GetChannelGroupMembers(CPVRChannelGroup *group, std::vector<int>& failedClients)
+PVR_ERROR CPVRClients::GetChannelGroupMembers(CPVRChannelGroup* group, std::vector<int>& failedClients)
 {
   return ForCreatedClients(__FUNCTION__, [group](const std::shared_ptr<CPVRClient>& client) {
     return client->GetChannelGroupMembers(group);
@@ -576,7 +576,7 @@ void CPVRClients::OnPowerSavingDeactivated()
 }
 
 void CPVRClients::ConnectionStateChange(
-  CPVRClient *client, std::string& strConnectionString, PVR_CONNECTION_STATE newState, std::string& strMessage)
+  CPVRClient* client, std::string& strConnectionString, PVR_CONNECTION_STATE newState, std::string& strMessage)
 {
   if (!client)
     return;
diff --git a/xbmc/pvr/addons/PVRClients.h b/xbmc/pvr/addons/PVRClients.h
index b1e4fc7e1050..db9e44178887 100644
--- a/xbmc/pvr/addons/PVRClients.h
+++ b/xbmc/pvr/addons/PVRClients.h
@@ -183,7 +183,7 @@ namespace PVR
      * @param failedClients in case of errors will contain the ids of the clients for which the timers could not be obtained.
      * @return true on success for all clients, false in case of error for at least one client.
      */
-    bool GetTimers(CPVRTimersContainer *timers, std::vector<int>& failedClients);
+    bool GetTimers(CPVRTimersContainer* timers, std::vector<int>& failedClients);
 
     /*!
      * @brief Get all supported timer types.
@@ -203,7 +203,7 @@ namespace PVR
      * @param deleted If true, return deleted recordings, return not deleted recordings otherwise.
      * @return PVR_ERROR_NO_ERROR if the operation succeeded, the respective PVR_ERROR value otherwise.
      */
-    PVR_ERROR GetRecordings(CPVRRecordings *recordings, bool deleted);
+    PVR_ERROR GetRecordings(CPVRRecordings* recordings, bool deleted);
 
     /*!
      * @brief Delete all "soft" deleted recordings permanently on the backend.
@@ -236,7 +236,7 @@ namespace PVR
      * @param failedClients in case of errors will contain the ids of the clients for which the channels could not be obtained.
      * @return PVR_ERROR_NO_ERROR if the channels were fetched successfully, last error otherwise.
      */
-    PVR_ERROR GetChannels(CPVRChannelGroupInternal *group, std::vector<int>& failedClients);
+    PVR_ERROR GetChannels(CPVRChannelGroupInternal* group, std::vector<int>& failedClients);
 
     /*!
      * @brief Get all channel groups from backends.
@@ -244,7 +244,7 @@ namespace PVR
      * @param failedClients in case of errors will contain the ids of the clients for which the channel groups could not be obtained.
      * @return PVR_ERROR_NO_ERROR if the channel groups were fetched successfully, last error otherwise.
      */
-    PVR_ERROR GetChannelGroups(CPVRChannelGroups *groups, std::vector<int>& failedClients);
+    PVR_ERROR GetChannelGroups(CPVRChannelGroups* groups, std::vector<int>& failedClients);
 
     /*!
      * @brief Get all group members of a channel group.
@@ -252,7 +252,7 @@ namespace PVR
      * @param failedClients in case of errors will contain the ids of the clients for which the channel group members could not be obtained.
      * @return PVR_ERROR_NO_ERROR if the channel group members were fetched successfully, last error otherwise.
      */
-    PVR_ERROR GetChannelGroupMembers(CPVRChannelGroup *group, std::vector<int>& failedClients);
+    PVR_ERROR GetChannelGroupMembers(CPVRChannelGroup* group, std::vector<int>& failedClients);
 
     /*!
      * @brief Get a list of clients providing a channel scan dialog.
@@ -300,7 +300,7 @@ namespace PVR
      * @param newState The new connection state.
      * @param strMessage A human readable message providing additional information.
      */
-    void ConnectionStateChange(CPVRClient *client, std::string& strConnectionString, PVR_CONNECTION_STATE newState, std::string& strMessage);
+    void ConnectionStateChange(CPVRClient* client, std::string& strConnectionString, PVR_CONNECTION_STATE newState, std::string& strMessage);
 
   private:
     /*!
diff --git a/xbmc/pvr/channels/PVRChannelGroupsContainer.cpp b/xbmc/pvr/channels/PVRChannelGroupsContainer.cpp
index 50fb6406a1bc..d50fa1f8fc6b 100644
--- a/xbmc/pvr/channels/PVRChannelGroupsContainer.cpp
+++ b/xbmc/pvr/channels/PVRChannelGroupsContainer.cpp
@@ -68,7 +68,7 @@ void CPVRChannelGroupsContainer::Unload(void)
   m_bLoaded = false;
 }
 
-CPVRChannelGroups *CPVRChannelGroupsContainer::Get(bool bRadio) const
+CPVRChannelGroups* CPVRChannelGroupsContainer::Get(bool bRadio) const
 {
   return bRadio ? m_groupsRadio : m_groupsTV;
 }
diff --git a/xbmc/pvr/channels/PVRChannelGroupsContainer.h b/xbmc/pvr/channels/PVRChannelGroupsContainer.h
index bf038ce0f651..be877f8acedf 100644
--- a/xbmc/pvr/channels/PVRChannelGroupsContainer.h
+++ b/xbmc/pvr/channels/PVRChannelGroupsContainer.h
@@ -60,20 +60,20 @@ namespace PVR
      * @brief Get the TV channel groups.
      * @return The TV channel groups.
      */
-    CPVRChannelGroups *GetTV(void) const { return Get(false); }
+    CPVRChannelGroups* GetTV(void) const { return Get(false); }
 
     /*!
      * @brief Get the radio channel groups.
      * @return The radio channel groups.
      */
-    CPVRChannelGroups *GetRadio(void) const { return Get(true); }
+    CPVRChannelGroups* GetRadio(void) const { return Get(true); }
 
     /*!
      * @brief Get the radio or TV channel groups.
      * @param bRadio If true, get the radio channel groups. Get the TV channel groups otherwise.
      * @return The requested groups.
      */
-    CPVRChannelGroups *Get(bool bRadio) const;
+    CPVRChannelGroups* Get(bool bRadio) const;
 
     /*!
      * @brief Get the group containing all TV channels.
@@ -176,8 +176,8 @@ namespace PVR
     void SetLastPlayedGroup(const std::shared_ptr<CPVRChannelGroup>& group);
 
   protected:
-    CPVRChannelGroups *m_groupsRadio; /*!< all radio channel groups */
-    CPVRChannelGroups *m_groupsTV;    /*!< all TV channel groups */
+    CPVRChannelGroups* m_groupsRadio; /*!< all radio channel groups */
+    CPVRChannelGroups* m_groupsTV;    /*!< all TV channel groups */
     CCriticalSection   m_critSection;
     bool               m_bUpdateChannelsOnly = false;
     bool               m_bIsUpdating = false;
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.cpp b/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.cpp
index 00792ca02e65..a27fcbb15fc6 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.cpp
@@ -411,7 +411,7 @@ bool CGUIDialogPVRChannelManager::OnClickEPGSourceSpin(CGUIMessage& message)
 {
   //! @todo Add EPG scraper support
   return true;
-//  CGUISpinControlEx *pSpin = (CGUISpinControlEx *)GetControl(SPIN_EPGSOURCE_SELECTION);
+//  CGUISpinControlEx* pSpin = (CGUISpinControlEx *)GetControl(SPIN_EPGSOURCE_SELECTION);
 //  if (pSpin)
 //  {
 //    CFileItemPtr pItem = m_channelItems->Get(m_iSelected);
@@ -749,7 +749,7 @@ void CGUIDialogPVRChannelManager::RenameChannel(const CFileItemPtr& pItem)
   }
 }
 
-bool CGUIDialogPVRChannelManager::PersistChannel(const CFileItemPtr& pItem, const std::shared_ptr<CPVRChannelGroup>& group, unsigned int *iChannelNumber)
+bool CGUIDialogPVRChannelManager::PersistChannel(const CFileItemPtr& pItem, const std::shared_ptr<CPVRChannelGroup>& group, unsigned int* iChannelNumber)
 {
   if (!pItem || !pItem->HasPVRChannelInfoTag() || !group)
     return false;
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.h b/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.h
index 22a65df68262..bdd870cd7545 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.h
@@ -66,7 +66,7 @@ namespace PVR
     bool OnClickButtonGroupManager(CGUIMessage& message);
     bool OnClickButtonNewChannel();
 
-    bool PersistChannel(const CFileItemPtr& pItem, const std::shared_ptr<CPVRChannelGroup>& group, unsigned int *iChannelNumber);
+    bool PersistChannel(const CFileItemPtr& pItem, const std::shared_ptr<CPVRChannelGroup>& group, unsigned int* iChannelNumber);
     void SetItemsUnchanged(void);
 
     bool m_bIsRadio = false;
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.cpp b/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.cpp
index 9ed84ccd3161..82287e127a4d 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.cpp
@@ -106,7 +106,7 @@ bool CGUIDialogPVRGroupManager::ActionButtonNewGroup(CGUIMessage& message)
       if (strGroupName != "")
       {
         /* add the group if it doesn't already exist */
-        CPVRChannelGroups *groups = CServiceBroker::GetPVRManager().ChannelGroups()->Get(m_bIsRadio);
+        CPVRChannelGroups* groups = CServiceBroker::GetPVRManager().ChannelGroups()->Get(m_bIsRadio);
         if (groups->AddGroup(strGroupName))
         {
           CServiceBroker::GetPVRManager().ChannelGroups()->Get(m_bIsRadio)->GetByName(strGroupName)->SetGroupType(PVR_GROUP_TYPE_USER_DEFINED);
@@ -265,7 +265,7 @@ bool CGUIDialogPVRGroupManager::ActionButtonHideGroup(CGUIMessage& message)
 
   if (message.GetSenderId() == BUTTON_HIDE_GROUP && m_selectedGroup)
   {
-    CGUIRadioButtonControl *button = static_cast<CGUIRadioButtonControl*>(GetControl(message.GetSenderId()));
+    CGUIRadioButtonControl* button = static_cast<CGUIRadioButtonControl*>(GetControl(message.GetSenderId()));
     if (button)
     {
       m_selectedGroup->SetHidden(button->IsSelected());
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.h b/xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.h
index 3ad54609c68f..6b61bc2d02da 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.h
@@ -27,7 +27,7 @@ namespace PVR
     bool OnMessage(CGUIMessage& message) override;
     void OnWindowLoaded() override;
 
-    void SetFilterData(CPVREpgSearchFilter *searchFilter) { m_searchFilter = searchFilter; }
+    void SetFilterData(CPVREpgSearchFilter* searchFilter) { m_searchFilter = searchFilter; }
     bool IsConfirmed() const { return m_bConfirmed; }
     bool IsCanceled() const { return m_bCanceled; }
 
@@ -49,7 +49,7 @@ namespace PVR
 
     bool m_bConfirmed = false;
     bool m_bCanceled = false;
-    CPVREpgSearchFilter *m_searchFilter;
+    CPVREpgSearchFilter* m_searchFilter;
     std::map<int, CPVRChannelNumber> m_channelNumbersMap;
   };
 }
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRItemsViewBase.cpp b/xbmc/pvr/dialogs/GUIDialogPVRItemsViewBase.cpp
index 790e5e4cc99e..ae148f9ef4a6 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRItemsViewBase.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRItemsViewBase.cpp
@@ -78,7 +78,7 @@ bool CGUIDialogPVRItemsViewBase::OnAction(const CAction& action)
   return CGUIDialog::OnAction(action);
 }
 
-CGUIControl *CGUIDialogPVRItemsViewBase::GetFirstFocusableControl(int id)
+CGUIControl* CGUIDialogPVRItemsViewBase::GetFirstFocusableControl(int id)
 {
   if (m_viewControl.HasControl(id))
     id = m_viewControl.GetCurrentControl();
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRItemsViewBase.h b/xbmc/pvr/dialogs/GUIDialogPVRItemsViewBase.h
index 545de588dc70..875d36c7373b 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRItemsViewBase.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRItemsViewBase.h
@@ -34,7 +34,7 @@ namespace PVR
 
     void OnInitWindow() override;
     void OnDeinitWindow(int nextWindowID) override;
-    CGUIControl *GetFirstFocusableControl(int id) override;
+    CGUIControl* GetFirstFocusableControl(int id) override;
 
     std::unique_ptr<CFileItemList> m_vecItems;
     CGUIViewControl m_viewControl;
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRRadioRDSInfo.cpp b/xbmc/pvr/dialogs/GUIDialogPVRRadioRDSInfo.cpp
index 4e4046157ca6..707fb12d6ae4 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRRadioRDSInfo.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRRadioRDSInfo.cpp
@@ -71,11 +71,11 @@ bool CGUIDialogPVRRadioRDSInfo::OnMessage(CGUIMessage& message)
       if (!currentRDS)
         return false;
 
-      const CGUISpinControl *spin = static_cast<CGUISpinControl*>(GetControl(SPIN_CONTROL_INFO));
+      const CGUISpinControl* spin = static_cast<CGUISpinControl*>(GetControl(SPIN_CONTROL_INFO));
       if (!spin)
         return false;
 
-      CGUITextBox *textbox = static_cast<CGUITextBox*>(GetControl(TEXT_INFO));
+      CGUITextBox* textbox = static_cast<CGUITextBox*>(GetControl(TEXT_INFO));
       if (!textbox)
         return false;
 
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.cpp b/xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.cpp
index a8406a0eb9a9..709c742804cd 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.cpp
@@ -92,7 +92,7 @@ bool CGUIDialogPVRRecordingInfo::OnInfo(int actionID)
   return true;
 }
 
-void CGUIDialogPVRRecordingInfo::SetRecording(const CFileItem *item)
+void CGUIDialogPVRRecordingInfo::SetRecording(const CFileItem* item)
 {
   *m_recordItem = *item;
 }
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.h b/xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.h
index c598ce477b43..4cc5c9a06665 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.h
@@ -25,7 +25,7 @@ namespace PVR
     bool HasListItems() const override { return true; }
     CFileItemPtr GetCurrentListItem(int offset = 0) override;
 
-    void SetRecording(const CFileItem *item);
+    void SetRecording(const CFileItem* item);
 
     static void ShowFor(const CFileItemPtr& item);
 
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRRecordingSettings.cpp b/xbmc/pvr/dialogs/GUIDialogPVRRecordingSettings.cpp
index 47700ec56e26..e4d57fb5330a 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRRecordingSettings.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRRecordingSettings.cpp
@@ -179,9 +179,9 @@ void CGUIDialogPVRRecordingSettings::Save()
 }
 
 void CGUIDialogPVRRecordingSettings::LifetimesFiller(
-  SettingConstPtr setting, std::vector<IntegerSettingOption>& list, int& current, void *data)
+  SettingConstPtr setting, std::vector<IntegerSettingOption>& list, int& current, void* data)
 {
-  CGUIDialogPVRRecordingSettings *pThis = static_cast<CGUIDialogPVRRecordingSettings*>(data);
+  CGUIDialogPVRRecordingSettings* pThis = static_cast<CGUIDialogPVRRecordingSettings*>(data);
   if (pThis)
   {
     list.clear();
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRRecordingSettings.h b/xbmc/pvr/dialogs/GUIDialogPVRRecordingSettings.h
index a44bc5f9bdca..7508de7c025c 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRRecordingSettings.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRRecordingSettings.h
@@ -47,7 +47,7 @@ namespace PVR
   private:
     static void LifetimesFiller(std::shared_ptr<const CSetting> setting,
                                 std::vector<IntegerSettingOption>& list,
-                                int& current, void *data);
+                                int& current, void* data);
 
     std::shared_ptr<CPVRRecording> m_recording;
     std::string m_strTitle;
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.cpp b/xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.cpp
index 9c0a035141a1..66ec9e8b62b6 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.cpp
@@ -794,9 +794,9 @@ void CGUIDialogPVRTimerSettings::InitializeChannelsList()
 }
 
 void CGUIDialogPVRTimerSettings::TypesFiller(
-  SettingConstPtr setting, std::vector<IntegerSettingOption>& list, int& current, void *data)
+  SettingConstPtr setting, std::vector<IntegerSettingOption>& list, int& current, void* data)
 {
-  CGUIDialogPVRTimerSettings *pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
+  CGUIDialogPVRTimerSettings* pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
   if (pThis)
   {
     list.clear();
@@ -823,9 +823,9 @@ void CGUIDialogPVRTimerSettings::TypesFiller(
 }
 
 void CGUIDialogPVRTimerSettings::ChannelsFiller(
-  SettingConstPtr setting, std::vector<IntegerSettingOption>& list, int& current, void *data)
+  SettingConstPtr setting, std::vector<IntegerSettingOption>& list, int& current, void* data)
 {
-  CGUIDialogPVRTimerSettings *pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
+  CGUIDialogPVRTimerSettings* pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
   if (pThis)
   {
     list.clear();
@@ -858,9 +858,9 @@ void CGUIDialogPVRTimerSettings::ChannelsFiller(
 }
 
 void CGUIDialogPVRTimerSettings::DaysFiller(
-  SettingConstPtr setting, std::vector<IntegerSettingOption>& list, int& current, void *data)
+  SettingConstPtr setting, std::vector<IntegerSettingOption>& list, int& current, void* data)
 {
-  CGUIDialogPVRTimerSettings *pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
+  CGUIDialogPVRTimerSettings* pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
   if (pThis)
   {
     list.clear();
@@ -902,9 +902,9 @@ void CGUIDialogPVRTimerSettings::DaysFiller(
 }
 
 void CGUIDialogPVRTimerSettings::DupEpisodesFiller(
-  SettingConstPtr setting, std::vector<IntegerSettingOption>& list, int& current, void *data)
+  SettingConstPtr setting, std::vector<IntegerSettingOption>& list, int& current, void* data)
 {
-  CGUIDialogPVRTimerSettings *pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
+  CGUIDialogPVRTimerSettings* pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
   if (pThis)
   {
     list.clear();
@@ -921,9 +921,9 @@ void CGUIDialogPVRTimerSettings::DupEpisodesFiller(
 }
 
 void CGUIDialogPVRTimerSettings::WeekdaysFiller(
-  SettingConstPtr setting, std::vector<IntegerSettingOption>& list, int& current, void *data)
+  SettingConstPtr setting, std::vector<IntegerSettingOption>& list, int& current, void* data)
 {
-  CGUIDialogPVRTimerSettings *pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
+  CGUIDialogPVRTimerSettings* pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
   if (pThis)
   {
     list.clear();
@@ -942,9 +942,9 @@ void CGUIDialogPVRTimerSettings::WeekdaysFiller(
 }
 
 void CGUIDialogPVRTimerSettings::PrioritiesFiller(
-  SettingConstPtr setting, std::vector<IntegerSettingOption>& list, int& current, void *data)
+  SettingConstPtr setting, std::vector<IntegerSettingOption>& list, int& current, void* data)
 {
-  CGUIDialogPVRTimerSettings *pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
+  CGUIDialogPVRTimerSettings* pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
   if (pThis)
   {
     list.clear();
@@ -976,9 +976,9 @@ void CGUIDialogPVRTimerSettings::PrioritiesFiller(
 }
 
 void CGUIDialogPVRTimerSettings::LifetimesFiller(
-  SettingConstPtr setting, std::vector<IntegerSettingOption>& list, int& current, void *data)
+  SettingConstPtr setting, std::vector<IntegerSettingOption>& list, int& current, void* data)
 {
-  CGUIDialogPVRTimerSettings *pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
+  CGUIDialogPVRTimerSettings* pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
   if (pThis)
   {
     list.clear();
@@ -1010,9 +1010,9 @@ void CGUIDialogPVRTimerSettings::LifetimesFiller(
 }
 
 void CGUIDialogPVRTimerSettings::MaxRecordingsFiller(
-  SettingConstPtr setting, std::vector<IntegerSettingOption>& list, int& current, void *data)
+  SettingConstPtr setting, std::vector<IntegerSettingOption>& list, int& current, void* data)
 {
-  CGUIDialogPVRTimerSettings *pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
+  CGUIDialogPVRTimerSettings* pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
   if (pThis)
   {
     list.clear();
@@ -1044,9 +1044,9 @@ void CGUIDialogPVRTimerSettings::MaxRecordingsFiller(
 }
 
 void CGUIDialogPVRTimerSettings::RecordingGroupFiller(
-  SettingConstPtr setting, std::vector<IntegerSettingOption>& list, int& current, void *data)
+  SettingConstPtr setting, std::vector<IntegerSettingOption>& list, int& current, void* data)
 {
-  CGUIDialogPVRTimerSettings *pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
+  CGUIDialogPVRTimerSettings* pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
   if (pThis)
   {
     list.clear();
@@ -1063,9 +1063,9 @@ void CGUIDialogPVRTimerSettings::RecordingGroupFiller(
 }
 
 void CGUIDialogPVRTimerSettings::MarginTimeFiller(
-  SettingConstPtr setting, std::vector<IntegerSettingOption>& list, int& current, void *data)
+  SettingConstPtr setting, std::vector<IntegerSettingOption>& list, int& current, void* data)
 {
-  CGUIDialogPVRTimerSettings *pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
+  CGUIDialogPVRTimerSettings* pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
   if (pThis)
   {
     list.clear();
@@ -1117,12 +1117,12 @@ void CGUIDialogPVRTimerSettings::AddTypeDependentEnableCondition(std::shared_ptr
   AddCondition(setting, id, TypeReadOnlyCondition, SettingDependencyType::Enable, SETTING_TMR_TYPE);
 }
 
-bool CGUIDialogPVRTimerSettings::TypeReadOnlyCondition(const std::string& condition, const std::string& value, SettingConstPtr setting, void *data)
+bool CGUIDialogPVRTimerSettings::TypeReadOnlyCondition(const std::string& condition, const std::string& value, SettingConstPtr setting, void* data)
 {
   if (setting == NULL)
     return false;
 
-  CGUIDialogPVRTimerSettings *pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
+  CGUIDialogPVRTimerSettings* pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
   if (pThis == NULL)
   {
     CLog::LogF(LOGERROR, "No dialog");
@@ -1180,12 +1180,12 @@ void CGUIDialogPVRTimerSettings::AddTypeDependentVisibilityCondition(std::shared
   AddCondition(setting, id, TypeSupportsCondition, SettingDependencyType::Visible, SETTING_TMR_TYPE);
 }
 
-bool CGUIDialogPVRTimerSettings::TypeSupportsCondition(const std::string& condition, const std::string& value, SettingConstPtr setting, void *data)
+bool CGUIDialogPVRTimerSettings::TypeSupportsCondition(const std::string& condition, const std::string& value, SettingConstPtr setting, void* data)
 {
   if (setting == NULL)
     return false;
 
-  CGUIDialogPVRTimerSettings *pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
+  CGUIDialogPVRTimerSettings* pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
   if (pThis == NULL)
   {
     CLog::LogF(LOGERROR, "No dialog");
@@ -1260,12 +1260,12 @@ void CGUIDialogPVRTimerSettings::AddStartAnytimeDependentVisibilityCondition(std
   AddCondition(setting, id, StartAnytimeSetCondition, SettingDependencyType::Visible, SETTING_TMR_START_ANYTIME);
 }
 
-bool CGUIDialogPVRTimerSettings::StartAnytimeSetCondition(const std::string& condition, const std::string& value, SettingConstPtr setting, void *data)
+bool CGUIDialogPVRTimerSettings::StartAnytimeSetCondition(const std::string& condition, const std::string& value, SettingConstPtr setting, void* data)
 {
   if (setting == NULL)
     return false;
 
-  CGUIDialogPVRTimerSettings *pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
+  CGUIDialogPVRTimerSettings* pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
   if (pThis == NULL)
   {
     CLog::LogF(LOGERROR, "No dialog");
@@ -1303,12 +1303,12 @@ void CGUIDialogPVRTimerSettings::AddEndAnytimeDependentVisibilityCondition(std::
   AddCondition(setting, id, EndAnytimeSetCondition, SettingDependencyType::Visible, SETTING_TMR_END_ANYTIME);
 }
 
-bool CGUIDialogPVRTimerSettings::EndAnytimeSetCondition(const std::string& condition, const std::string& value, SettingConstPtr setting, void *data)
+bool CGUIDialogPVRTimerSettings::EndAnytimeSetCondition(const std::string& condition, const std::string& value, SettingConstPtr setting, void* data)
 {
   if (setting == NULL)
     return false;
 
-  CGUIDialogPVRTimerSettings *pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
+  CGUIDialogPVRTimerSettings* pThis = static_cast<CGUIDialogPVRTimerSettings*>(data);
   if (pThis == NULL)
   {
     CLog::LogF(LOGERROR, "No dialog");
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.h b/xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.h
index 34fe98cc9de0..96c446fd60f6 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.h
@@ -63,25 +63,25 @@ namespace PVR
     static int GetWeekdaysFromSetting(std::shared_ptr<const CSetting> setting);
 
     static void TypesFiller(
-      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption>& list, int& current, void *data);
+      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption>& list, int& current, void* data);
     static void ChannelsFiller(
-      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption>& list, int& current, void *data);
+      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption>& list, int& current, void* data);
     static void DaysFiller(
-      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption>& list, int& current, void *data);
+      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption>& list, int& current, void* data);
     static void DupEpisodesFiller(
-      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption>& list, int& current, void *data);
+      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption>& list, int& current, void* data);
     static void WeekdaysFiller(
-      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption>& list, int& current, void *data);
+      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption>& list, int& current, void* data);
     static void PrioritiesFiller(
-      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption>& list, int& current, void *data);
+      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption>& list, int& current, void* data);
     static void LifetimesFiller(
-      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption>& list, int& current, void *data);
+      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption>& list, int& current, void* data);
     static void MaxRecordingsFiller(
-      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption>& list, int& current, void *data);
+      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption>& list, int& current, void* data);
     static void RecordingGroupFiller(
-      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption>& list, int& current, void *data);
+      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption>& list, int& current, void* data);
     static void MarginTimeFiller(
-      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption>& list, int& current, void *data);
+      std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption>& list, int& current, void* data);
 
     static std::string WeekdaysValueFormatter(std::shared_ptr<const CSetting> setting);
 
@@ -91,18 +91,18 @@ namespace PVR
 
     void AddTypeDependentEnableCondition(std::shared_ptr<CSetting> setting, const std::string& identifier);
     static bool TypeReadOnlyCondition(
-      const std::string& condition, const std::string& value, std::shared_ptr<const CSetting> setting, void *data);
+      const std::string& condition, const std::string& value, std::shared_ptr<const CSetting> setting, void* data);
 
     void AddTypeDependentVisibilityCondition(std::shared_ptr<CSetting> setting, const std::string& identifier);
     static bool TypeSupportsCondition(
-      const std::string& condition, const std::string& value, std::shared_ptr<const CSetting> setting, void *data);
+      const std::string& condition, const std::string& value, std::shared_ptr<const CSetting> setting, void* data);
 
     void AddStartAnytimeDependentVisibilityCondition(std::shared_ptr<CSetting> setting, const std::string& identifier);
     static bool StartAnytimeSetCondition(
-      const std::string& condition, const std::string& value, std::shared_ptr<const CSetting> setting, void *data);
+      const std::string& condition, const std::string& value, std::shared_ptr<const CSetting> setting, void* data);
     void AddEndAnytimeDependentVisibilityCondition(std::shared_ptr<CSetting> setting, const std::string& identifier);
     static bool EndAnytimeSetCondition(
-      const std::string& condition, const std::string& value, std::shared_ptr<const CSetting> setting, void *data);
+      const std::string& condition, const std::string& value, std::shared_ptr<const CSetting> setting, void* data);
 
     typedef std::map<int, std::shared_ptr<CPVRTimerType>>  TypeEntriesMap;
 
diff --git a/xbmc/pvr/epg/Epg.cpp b/xbmc/pvr/epg/Epg.cpp
index f579188d0e8e..7f403ef206d7 100644
--- a/xbmc/pvr/epg/Epg.cpp
+++ b/xbmc/pvr/epg/Epg.cpp
@@ -323,7 +323,7 @@ bool CPVREpg::UpdateEntries(const CPVREpg& epg, bool bStoreInDb /* = true */)
   return true;
 }
 
-bool CPVREpg::UpdateEntry(const EPG_TAG *data, int iClientId)
+bool CPVREpg::UpdateEntry(const EPG_TAG* data, int iClientId)
 {
   if (!data)
     return false;
diff --git a/xbmc/pvr/epg/Epg.h b/xbmc/pvr/epg/Epg.h
index 26a5bfaf43e7..d1e52a76620c 100644
--- a/xbmc/pvr/epg/Epg.h
+++ b/xbmc/pvr/epg/Epg.h
@@ -164,7 +164,7 @@ namespace PVR
      * @param iClientId The id of the pvr client this event belongs to.
      * @return True if it was updated successfully, false otherwise.
      */
-    bool UpdateEntry(const EPG_TAG *data, int iClientId);
+    bool UpdateEntry(const EPG_TAG* data, int iClientId);
 
     /*!
      * @brief Update an entry in this EPG.
diff --git a/xbmc/pvr/epg/EpgContainer.cpp b/xbmc/pvr/epg/EpgContainer.cpp
index 3c0ab11331bd..ba34740e48f8 100644
--- a/xbmc/pvr/epg/EpgContainer.cpp
+++ b/xbmc/pvr/epg/EpgContainer.cpp
@@ -178,7 +178,7 @@ void CPVREpgContainer::Start(bool bAsync)
 {
   if (bAsync)
   {
-    CPVREpgContainerStartJob *job = new CPVREpgContainerStartJob();
+    CPVREpgContainerStartJob* job = new CPVREpgContainerStartJob();
     CJobManager::GetInstance().AddJob(job, NULL);
     return;
   }
diff --git a/xbmc/pvr/epg/EpgDatabase.cpp b/xbmc/pvr/epg/EpgDatabase.cpp
index dc9f3ee4aa6c..7c7e2a8bbecb 100644
--- a/xbmc/pvr/epg/EpgDatabase.cpp
+++ b/xbmc/pvr/epg/EpgDatabase.cpp
@@ -297,7 +297,7 @@ std::vector<std::shared_ptr<CPVREpgInfoTag>> CPVREpgDatabase::Get(const CPVREpg&
   return result;
 }
 
-bool CPVREpgDatabase::GetLastEpgScanTime(int iEpgId, CDateTime *lastScan)
+bool CPVREpgDatabase::GetLastEpgScanTime(int iEpgId, CDateTime* lastScan)
 {
   bool bReturn = false;
 
diff --git a/xbmc/pvr/epg/EpgDatabase.h b/xbmc/pvr/epg/EpgDatabase.h
index 90c97be9c66c..366e761a1158 100644
--- a/xbmc/pvr/epg/EpgDatabase.h
+++ b/xbmc/pvr/epg/EpgDatabase.h
@@ -67,7 +67,7 @@ namespace PVR
      * @brief Get the default sqlite database filename.
      * @return The default filename.
      */
-    const char *GetBaseDBName(void) const override { return "Epg"; }
+    const char* GetBaseDBName(void) const override { return "Epg"; }
 
     /*! @name EPG methods */
     //@{
@@ -118,7 +118,7 @@ namespace PVR
      * @param lastScan The last scan time or -1 if it wasn't found.
      * @return True if the time was fetched successfully, false otherwise.
      */
-    bool GetLastEpgScanTime(int iEpgId, CDateTime *lastScan);
+    bool GetLastEpgScanTime(int iEpgId, CDateTime* lastScan);
 
     /*!
      * @brief Update the last scan time.
diff --git a/xbmc/pvr/recordings/PVRRecording.cpp b/xbmc/pvr/recordings/PVRRecording.cpp
index 0e3fc0cdcb57..fa888423a176 100644
--- a/xbmc/pvr/recordings/PVRRecording.cpp
+++ b/xbmc/pvr/recordings/PVRRecording.cpp
@@ -300,7 +300,7 @@ CBookmark CPVRRecording::GetResumePoint() const
     {
       CBookmark resumePoint(CVideoInfoTag::GetResumePoint());
       resumePoint.timeInSeconds = pos;
-      CPVRRecording *pThis = const_cast<CPVRRecording*>(this);
+      CPVRRecording* pThis = const_cast<CPVRRecording*>(this);
       pThis->CVideoInfoTag::SetResumePoint(resumePoint);
     }
   }
diff --git a/xbmc/pvr/timers/PVRTimers.cpp b/xbmc/pvr/timers/PVRTimers.cpp
index 52f8e1c269d4..28a13b9822e3 100644
--- a/xbmc/pvr/timers/PVRTimers.cpp
+++ b/xbmc/pvr/timers/PVRTimers.cpp
@@ -358,7 +358,7 @@ bool CPVRTimers::UpdateEntries(const CPVRTimersContainer& timers, const std::vec
 
     if (!timerNotifications.empty() && CServiceBroker::GetPVRManager().IsStarted())
     {
-      CPVREventlogJob *job = new CPVREventlogJob;
+      CPVREventlogJob* job = new CPVREventlogJob;
 
       /* queue notifications / fill eventlog */
       for (const auto& entry : timerNotifications)
diff --git a/xbmc/pvr/windows/GUIEPGGridContainer.cpp b/xbmc/pvr/windows/GUIEPGGridContainer.cpp
index 354a2eefc9d5..3de7938c6e31 100644
--- a/xbmc/pvr/windows/GUIEPGGridContainer.cpp
+++ b/xbmc/pvr/windows/GUIEPGGridContainer.cpp
@@ -405,7 +405,7 @@ void CGUIEPGGridContainer::ProcessItem(float posX, float posY, const CFileItemPt
   CServiceBroker::GetWinSystem()->GetGfxContext().RestoreOrigin();
 }
 
-void CGUIEPGGridContainer::RenderItem(float posX, float posY, CGUIListItem *item, bool focused)
+void CGUIEPGGridContainer::RenderItem(float posX, float posY, CGUIListItem* item, bool focused)
 {
   // set the origin
   CServiceBroker::GetWinSystem()->GetGfxContext().SetOrigin(posX, posY);
@@ -701,11 +701,11 @@ void CGUIEPGGridContainer::UpdateItems()
     }
     else // "gap" tag selected
     {
-      const GridItem *currItem(GetItem(m_channelCursor));
+      const GridItem* currItem(GetItem(m_channelCursor));
       if (currItem)
         channelUid = currItem->item->GetEPGInfoTag()->UniqueChannelID();
 
-      const GridItem *prevItem(GetPrevItem(m_channelCursor));
+      const GridItem* prevItem(GetPrevItem(m_channelCursor));
       if (prevItem)
       {
         const std::shared_ptr<CPVREpgInfoTag> tag(prevItem->item->GetEPGInfoTag());
@@ -1113,7 +1113,7 @@ void CGUIEPGGridContainer::SetBlock(int block, bool bUpdateBlockTravelAxis /* =
   MarkDirtyRegion();
 }
 
-CGUIListItemLayout *CGUIEPGGridContainer::GetFocusedLayout() const
+CGUIListItemLayout* CGUIEPGGridContainer::GetFocusedLayout() const
 {
   CGUIListItemPtr item = GetListItem(0);
 
@@ -1267,7 +1267,7 @@ bool CGUIEPGGridContainer::OnClick(int actionID)
   if (actionID == ACTION_SELECT_ITEM || actionID == ACTION_MOUSE_LEFT_CLICK)
   {
     // grab the currently focused subitem (if applicable)
-    CGUIListItemLayout *focusedLayout = GetFocusedLayout();
+    CGUIListItemLayout* focusedLayout = GetFocusedLayout();
 
     if (focusedLayout)
       subItem = focusedLayout->GetFocusedItem();
@@ -1403,7 +1403,7 @@ int CGUIEPGGridContainer::GetRealBlock(const CGUIListItemPtr& item, int channel)
   return block;
 }
 
-GridItem *CGUIEPGGridContainer::GetNextItem(int channel)
+GridItem* CGUIEPGGridContainer::GetNextItem(int channel)
 {
   const int channelIndex = channel + m_channelOffset;
   const int blockIndex = m_blockCursor + m_blockOffset;
@@ -1420,7 +1420,7 @@ GridItem *CGUIEPGGridContainer::GetNextItem(int channel)
   return m_gridModel->GetGridItemPtr(channelIndex, i + m_blockOffset);
 }
 
-GridItem *CGUIEPGGridContainer::GetPrevItem(int channel)
+GridItem* CGUIEPGGridContainer::GetPrevItem(int channel)
 {
   int channelIndex = channel + m_channelOffset;
   int blockIndex = m_blockCursor + m_blockOffset;
@@ -1435,7 +1435,7 @@ GridItem *CGUIEPGGridContainer::GetPrevItem(int channel)
   return m_gridModel->GetGridItemPtr(channelIndex, i + m_blockOffset);
 }
 
-GridItem *CGUIEPGGridContainer::GetItem(int channel)
+GridItem* CGUIEPGGridContainer::GetItem(int channel)
 {
   int channelIndex = channel + m_channelOffset;
   int blockIndex = m_blockCursor + m_blockOffset;
@@ -1546,10 +1546,10 @@ void CGUIEPGGridContainer::ValidateOffset()
   }
 }
 
-void CGUIEPGGridContainer::LoadLayout(TiXmlElement *layout)
+void CGUIEPGGridContainer::LoadLayout(TiXmlElement* layout)
 {
   /* layouts for the channel column */
-  TiXmlElement *itemElement = layout->FirstChildElement("channellayout");
+  TiXmlElement* itemElement = layout->FirstChildElement("channellayout");
   while (itemElement)
   {
     m_channelLayouts.emplace_back();
@@ -1780,12 +1780,12 @@ void CGUIEPGGridContainer::GoToBlock(int blockIndex)
 
 void CGUIEPGGridContainer::UpdateLayout()
 {
-  CGUIListItemLayout *oldFocusedChannelLayout   = m_focusedChannelLayout;
-  CGUIListItemLayout *oldChannelLayout          = m_channelLayout;
-  CGUIListItemLayout *oldFocusedProgrammeLayout = m_focusedProgrammeLayout;
-  CGUIListItemLayout *oldProgrammeLayout        = m_programmeLayout;
-  CGUIListItemLayout *oldRulerLayout            = m_rulerLayout;
-  CGUIListItemLayout *oldRulerDateLayout        = m_rulerDateLayout;
+  CGUIListItemLayout* oldFocusedChannelLayout   = m_focusedChannelLayout;
+  CGUIListItemLayout* oldChannelLayout          = m_channelLayout;
+  CGUIListItemLayout* oldFocusedProgrammeLayout = m_focusedProgrammeLayout;
+  CGUIListItemLayout* oldProgrammeLayout        = m_programmeLayout;
+  CGUIListItemLayout* oldRulerLayout            = m_rulerLayout;
+  CGUIListItemLayout* oldRulerDateLayout        = m_rulerDateLayout;
 
   GetCurrentLayouts();
 
diff --git a/xbmc/pvr/windows/GUIEPGGridContainer.h b/xbmc/pvr/windows/GUIEPGGridContainer.h
index 4af89860c850..ffe67b56f662 100644
--- a/xbmc/pvr/windows/GUIEPGGridContainer.h
+++ b/xbmc/pvr/windows/GUIEPGGridContainer.h
@@ -41,7 +41,7 @@ namespace PVR
                          int rulerUnit, const CTextureInfo& progressIndicatorTexture);
     CGUIEPGGridContainer(const CGUIEPGGridContainer& other);
 
-    CGUIEPGGridContainer *Clone() const override { return new CGUIEPGGridContainer(*this); }
+    CGUIEPGGridContainer* Clone() const override { return new CGUIEPGGridContainer(*this); }
 
     /*!
      * @brief Check whether the control currently holds data.
@@ -73,7 +73,7 @@ namespace PVR
     std::shared_ptr<CPVRChannel> GetSelectedChannel() const;
     CDateTime GetSelectedDate() const;
 
-    void LoadLayout(TiXmlElement *layout);
+    void LoadLayout(TiXmlElement* layout);
     void SetPageControl(int id);
 
     /*! \brief Set the offset of the first item in the container from the container's position
@@ -118,15 +118,15 @@ namespace PVR
     void ValidateOffset();
     void UpdateLayout();
 
-    GridItem *GetItem(int channel);
-    GridItem *GetNextItem(int channel);
-    GridItem *GetPrevItem(int channel);
+    GridItem* GetItem(int channel);
+    GridItem* GetNextItem(int channel);
+    GridItem* GetPrevItem(int channel);
 
     int GetBlock(const CGUIListItemPtr& item, int channel);
     int GetRealBlock(const CGUIListItemPtr& item, int channel);
     void MoveToRow(int row);
 
-    CGUIListItemLayout *GetFocusedLayout() const;
+    CGUIListItemLayout* GetFocusedLayout() const;
 
     void ScrollToBlockOffset(int offset);
     void ScrollToChannelOffset(int offset);
@@ -134,7 +134,7 @@ namespace PVR
     void GoToChannel(int channelIndex);
     void UpdateScrollOffset(unsigned int currentTime);
     void ProcessItem(float posX, float posY, const std::shared_ptr<CFileItem>& item, std::shared_ptr<CFileItem>& lastitem, bool focused, CGUIListItemLayout* normallayout, CGUIListItemLayout* focusedlayout, unsigned int currentTime, CDirtyRegionList& dirtyregions, float resize = -1.0f);
-    void RenderItem(float posX, float posY, CGUIListItem *item, bool focused);
+    void RenderItem(float posX, float posY, CGUIListItem* item, bool focused);
     void GetCurrentLayouts();
 
     void ProcessChannels(unsigned int currentTime, CDirtyRegionList& dirtyregions);
@@ -159,12 +159,12 @@ namespace PVR
     std::vector<CGUIListItemLayout> m_rulerLayouts;
     std::vector<CGUIListItemLayout> m_rulerDateLayouts;
 
-    CGUIListItemLayout *m_channelLayout;
-    CGUIListItemLayout *m_focusedChannelLayout;
-    CGUIListItemLayout *m_programmeLayout;
-    CGUIListItemLayout *m_focusedProgrammeLayout;
-    CGUIListItemLayout *m_rulerLayout;
-    CGUIListItemLayout *m_rulerDateLayout;
+    CGUIListItemLayout* m_channelLayout;
+    CGUIListItemLayout* m_focusedChannelLayout;
+    CGUIListItemLayout* m_programmeLayout;
+    CGUIListItemLayout* m_focusedProgrammeLayout;
+    CGUIListItemLayout* m_rulerLayout;
+    CGUIListItemLayout* m_rulerDateLayout;
 
     int m_pageControl;
 
@@ -238,6 +238,6 @@ namespace PVR
     std::unique_ptr<CGUIEPGGridContainerModel> m_gridModel;
     std::unique_ptr<CGUIEPGGridContainerModel> m_updatedGridModel;
 
-    GridItem *m_item;
+    GridItem* m_item;
   };
 }
diff --git a/xbmc/pvr/windows/GUIEPGGridContainerModel.h b/xbmc/pvr/windows/GUIEPGGridContainerModel.h
index ff3bcdd4b8dd..b2823f051958 100644
--- a/xbmc/pvr/windows/GUIEPGGridContainerModel.h
+++ b/xbmc/pvr/windows/GUIEPGGridContainerModel.h
@@ -60,7 +60,7 @@ namespace PVR
 
     int GetBlockCount() const { return m_blocks; }
     bool HasGridItems() const { return !m_gridIndex.empty(); }
-    GridItem *GetGridItemPtr(int iChannel, int iBlock) { return& m_gridIndex[iChannel][iBlock]; }
+    GridItem* GetGridItemPtr(int iChannel, int iBlock) { return& m_gridIndex[iChannel][iBlock]; }
     std::shared_ptr<CFileItem> GetGridItem(int iChannel, int iBlock) const { return m_gridIndex[iChannel][iBlock].item; }
     float GetGridItemWidth(int iChannel, int iBlock) const { return m_gridIndex[iChannel][iBlock].width; }
     float GetGridItemOriginWidth(int iChannel, int iBlock) const { return m_gridIndex[iChannel][iBlock].originWidth; }
diff --git a/xbmc/pvr/windows/GUIWindowPVRBase.cpp b/xbmc/pvr/windows/GUIWindowPVRBase.cpp
index 55382b9868f5..9d4dfeea1dce 100644
--- a/xbmc/pvr/windows/GUIWindowPVRBase.cpp
+++ b/xbmc/pvr/windows/GUIWindowPVRBase.cpp
@@ -57,7 +57,7 @@ class CGUIPVRChannelGroupsSelector
   bool SelectChannelGroup(const std::shared_ptr<CPVRChannelGroup>& newGroup);
 
 private:
-  CGUIControl *m_control = nullptr;
+  CGUIControl* m_control = nullptr;
   std::vector<std::shared_ptr<CPVRChannelGroup>> m_channelGroups;
 };
 
@@ -367,7 +367,7 @@ bool CGUIWindowPVRBase::CanBeActivated() const
 
 bool CGUIWindowPVRBase::OpenChannelGroupSelectionDialog(void)
 {
-  CGUIDialogSelect *dialog = CServiceBroker::GetGUI()->GetWindowManager().GetWindow<CGUIDialogSelect>(WINDOW_DIALOG_SELECT);
+  CGUIDialogSelect* dialog = CServiceBroker::GetGUI()->GetWindowManager().GetWindow<CGUIDialogSelect>(WINDOW_DIALOG_SELECT);
   if (!dialog)
     return false;
 
@@ -517,7 +517,7 @@ void CGUIWindowPVRBase::ShowProgressDialog(const std::string& strText, int iProg
 {
   if (!m_progressHandle)
   {
-    CGUIDialogExtendedProgressBar *loadingProgressDialog = CServiceBroker::GetGUI()->GetWindowManager().GetWindow<CGUIDialogExtendedProgressBar>(WINDOW_DIALOG_EXT_PROGRESS);
+    CGUIDialogExtendedProgressBar* loadingProgressDialog = CServiceBroker::GetGUI()->GetWindowManager().GetWindow<CGUIDialogExtendedProgressBar>(WINDOW_DIALOG_EXT_PROGRESS);
     if (!loadingProgressDialog)
     {
       CLog::LogF(LOGERROR, "Unable to get WINDOW_DIALOG_EXT_PROGRESS!");
diff --git a/xbmc/pvr/windows/GUIWindowPVRBase.h b/xbmc/pvr/windows/GUIWindowPVRBase.h
index 47363f95e865..12063567a4da 100644
--- a/xbmc/pvr/windows/GUIWindowPVRBase.h
+++ b/xbmc/pvr/windows/GUIWindowPVRBase.h
@@ -133,6 +133,6 @@ namespace PVR
     std::unique_ptr<CGUIPVRChannelGroupsSelector> m_channelGroupsSelector;
     std::shared_ptr<CPVRChannelGroup> m_channelGroup;
     XbmcThreads::EndTime m_refreshTimeout;
-    CGUIDialogProgressBarHandle *m_progressHandle; /*!< progress dialog that is displayed while the pvr manager is loading */
+    CGUIDialogProgressBarHandle* m_progressHandle; /*!< progress dialog that is displayed while the pvr manager is loading */
   };
 }
diff --git a/xbmc/pvr/windows/GUIWindowPVRChannels.cpp b/xbmc/pvr/windows/GUIWindowPVRChannels.cpp
index 0211536357e2..755b51a03d2c 100644
--- a/xbmc/pvr/windows/GUIWindowPVRChannels.cpp
+++ b/xbmc/pvr/windows/GUIWindowPVRChannels.cpp
@@ -90,7 +90,7 @@ bool CGUIWindowPVRChannelsBase::Update(const std::string& strDirectory, bool upd
 
 void CGUIWindowPVRChannelsBase::UpdateButtons(void)
 {
-  CGUIRadioButtonControl *btnShowHidden = static_cast<CGUIRadioButtonControl*>(GetControl(CONTROL_BTNSHOWHIDDEN));
+  CGUIRadioButtonControl* btnShowHidden = static_cast<CGUIRadioButtonControl*>(GetControl(CONTROL_BTNSHOWHIDDEN));
   if (btnShowHidden)
   {
     btnShowHidden->SetVisible(CServiceBroker::GetPVRManager().ChannelGroups()->GetGroupAll(m_bRadio)->GetNumHiddenChannels() > 0);
@@ -179,7 +179,7 @@ bool CGUIWindowPVRChannelsBase::OnMessage(CGUIMessage& message)
       }
       else if (message.GetSenderId() == CONTROL_BTNSHOWHIDDEN)
       {
-        CGUIRadioButtonControl *radioButton = static_cast<CGUIRadioButtonControl*>(GetControl(CONTROL_BTNSHOWHIDDEN));
+        CGUIRadioButtonControl* radioButton = static_cast<CGUIRadioButtonControl*>(GetControl(CONTROL_BTNSHOWHIDDEN));
         if (radioButton)
         {
           m_bShowHiddenChannels = radioButton->IsSelected();
@@ -303,7 +303,7 @@ void CGUIWindowPVRChannelsBase::UpdateEpg(const CFileItemPtr& item)
 
 void CGUIWindowPVRChannelsBase::ShowChannelManager()
 {
-  CGUIDialogPVRChannelManager *dialog = CServiceBroker::GetGUI()->GetWindowManager().GetWindow<CGUIDialogPVRChannelManager>(WINDOW_DIALOG_PVR_CHANNEL_MANAGER);
+  CGUIDialogPVRChannelManager* dialog = CServiceBroker::GetGUI()->GetWindowManager().GetWindow<CGUIDialogPVRChannelManager>(WINDOW_DIALOG_PVR_CHANNEL_MANAGER);
   if (dialog)
     dialog->Open();
 }
diff --git a/xbmc/pvr/windows/GUIWindowPVRGuide.cpp b/xbmc/pvr/windows/GUIWindowPVRGuide.cpp
index 0bde6c7df3a3..a6ed0ad0ace2 100644
--- a/xbmc/pvr/windows/GUIWindowPVRGuide.cpp
+++ b/xbmc/pvr/windows/GUIWindowPVRGuide.cpp
@@ -69,7 +69,7 @@ CGUIEPGGridContainer* CGUIWindowPVRGuideBase::GetGridControl()
 
 void CGUIWindowPVRGuideBase::InitEpgGridControl()
 {
-  CGUIEPGGridContainer *epgGridContainer = GetGridControl();
+  CGUIEPGGridContainer* epgGridContainer = GetGridControl();
   if (epgGridContainer)
   {
     m_bChannelSelectionRestored = epgGridContainer->SetChannel(CServiceBroker::GetPVRManager().GUIActions()->GetSelectedItemPath(m_bRadio));
@@ -162,7 +162,7 @@ void CGUIWindowPVRGuideBase::NotifyEvent(const PVREvent& event)
 
 void CGUIWindowPVRGuideBase::SetInvalid()
 {
-  CGUIEPGGridContainer *epgGridContainer = GetGridControl();
+  CGUIEPGGridContainer* epgGridContainer = GetGridControl();
   if (epgGridContainer)
     epgGridContainer->SetInvalid();
 
@@ -181,7 +181,7 @@ void CGUIWindowPVRGuideBase::GetContextButtons(int itemNumber, CContextButtons&
 
 void CGUIWindowPVRGuideBase::UpdateSelectedItemPath()
 {
-  CGUIEPGGridContainer *epgGridContainer = GetGridControl();
+  CGUIEPGGridContainer* epgGridContainer = GetGridControl();
   if (epgGridContainer)
   {
     std::shared_ptr<CPVRChannel> channel(epgGridContainer->GetSelectedChannel());
@@ -275,7 +275,7 @@ CFileItemPtr CGUIWindowPVRGuideBase::GetCurrentListItem(int offset /*= 0*/)
 
 bool CGUIWindowPVRGuideBase::ShouldNavigateToGridContainer(int iAction)
 {
-  CGUIEPGGridContainer *epgGridContainer = GetGridControl();
+  CGUIEPGGridContainer* epgGridContainer = GetGridControl();
   CGUIControl* control = GetControl(CONTROL_LSTCHANNELGROUPS);
   if (epgGridContainer && control &&
       GetFocusedControlID() == control->GetID())
@@ -310,7 +310,7 @@ bool CGUIWindowPVRGuideBase::OnAction(const CAction& action)
       // Check whether grid container is configured as channel group selector's navigation target for the given action.
       if (ShouldNavigateToGridContainer(action.GetID()))
       {
-        CGUIEPGGridContainer *epgGridContainer = GetGridControl();
+        CGUIEPGGridContainer* epgGridContainer = GetGridControl();
         if (epgGridContainer)
         {
           CGUIWindowPVRBase::OnAction(action);
@@ -513,7 +513,7 @@ bool CGUIWindowPVRGuideBase::OnMessage(CGUIMessage& message)
             case ACTION_PLAYER_PLAY:
             {
               // EPG "gap" selected => switch to associated channel.
-              CGUIEPGGridContainer *epgGridContainer = GetGridControl();
+              CGUIEPGGridContainer* epgGridContainer = GetGridControl();
               if (epgGridContainer)
               {
                 const CFileItemPtr item(epgGridContainer->GetSelectedGridItem());
@@ -766,7 +766,7 @@ void CGUIWindowPVRGuideBase::GetChannelNumbers(std::vector<std::string>& channel
     group->GetChannelNumbers(channelNumbers);
 }
 
-CPVRRefreshTimelineItemsThread::CPVRRefreshTimelineItemsThread(CGUIWindowPVRGuideBase *pGuideWindow)
+CPVRRefreshTimelineItemsThread::CPVRRefreshTimelineItemsThread(CGUIWindowPVRGuideBase* pGuideWindow)
 : CThread("epg-grid-refresh-timeline-items"),
   m_pGuideWindow(pGuideWindow),
   m_ready(true),
diff --git a/xbmc/pvr/windows/GUIWindowPVRGuide.h b/xbmc/pvr/windows/GUIWindowPVRGuide.h
index 124893afc2cf..d134d12fdf7c 100644
--- a/xbmc/pvr/windows/GUIWindowPVRGuide.h
+++ b/xbmc/pvr/windows/GUIWindowPVRGuide.h
@@ -103,7 +103,7 @@ namespace PVR
   class CPVRRefreshTimelineItemsThread : public CThread
   {
   public:
-    explicit CPVRRefreshTimelineItemsThread(CGUIWindowPVRGuideBase *pGuideWindow);
+    explicit CPVRRefreshTimelineItemsThread(CGUIWindowPVRGuideBase* pGuideWindow);
     ~CPVRRefreshTimelineItemsThread() override;
 
     void Process() override;
@@ -112,7 +112,7 @@ namespace PVR
     void Stop();
 
   private:
-    CGUIWindowPVRGuideBase *m_pGuideWindow;
+    CGUIWindowPVRGuideBase* m_pGuideWindow;
     CEvent m_ready;
     CEvent m_done;
   };
diff --git a/xbmc/pvr/windows/GUIWindowPVRRecordings.cpp b/xbmc/pvr/windows/GUIWindowPVRRecordings.cpp
index a4838ccf17bb..1e4f0733a181 100644
--- a/xbmc/pvr/windows/GUIWindowPVRRecordings.cpp
+++ b/xbmc/pvr/windows/GUIWindowPVRRecordings.cpp
@@ -167,7 +167,7 @@ void CGUIWindowPVRRecordingsBase::UpdateButtons()
   bool bGroupRecordings = m_settings.GetBoolValue(CSettings::SETTING_PVRRECORD_GROUPRECORDINGS);
   SET_CONTROL_SELECTED(GetID(), CONTROL_BTNGROUPITEMS, bGroupRecordings);
 
-  CGUIRadioButtonControl *btnShowDeleted = static_cast<CGUIRadioButtonControl*>(GetControl(CONTROL_BTNSHOWDELETED));
+  CGUIRadioButtonControl* btnShowDeleted = static_cast<CGUIRadioButtonControl*>(GetControl(CONTROL_BTNSHOWDELETED));
   if (btnShowDeleted)
   {
     btnShowDeleted->SetVisible(m_bRadio ? CServiceBroker::GetPVRManager().Recordings()->HasDeletedRadioRecordings() : CServiceBroker::GetPVRManager().Recordings()->HasDeletedTVRecordings());
@@ -275,7 +275,7 @@ bool CGUIWindowPVRRecordingsBase::OnMessage(CGUIMessage& message)
       }
       else if (message.GetSenderId() == CONTROL_BTNSHOWDELETED)
       {
-        CGUIRadioButtonControl *radioButton = static_cast<CGUIRadioButtonControl*>(GetControl(CONTROL_BTNSHOWDELETED));
+        CGUIRadioButtonControl* radioButton = static_cast<CGUIRadioButtonControl*>(GetControl(CONTROL_BTNSHOWDELETED));
         if (radioButton)
         {
           m_bShowDeletedRecordings = radioButton->IsSelected();
@@ -319,7 +319,7 @@ bool CGUIWindowPVRRecordingsBase::OnMessage(CGUIMessage& message)
   return bReturn || CGUIWindowPVRBase::OnMessage(message);
 }
 
-bool CGUIWindowPVRRecordingsBase::OnContextButtonDeleteAll(CFileItem *item, CONTEXT_BUTTON button)
+bool CGUIWindowPVRRecordingsBase::OnContextButtonDeleteAll(CFileItem* item, CONTEXT_BUTTON button)
 {
   if (button == CONTEXT_BUTTON_DELETE_ALL)
   {
diff --git a/xbmc/pvr/windows/GUIWindowPVRRecordings.h b/xbmc/pvr/windows/GUIWindowPVRRecordings.h
index 4bc04723f8c1..fdb4657116f2 100644
--- a/xbmc/pvr/windows/GUIWindowPVRRecordings.h
+++ b/xbmc/pvr/windows/GUIWindowPVRRecordings.h
@@ -40,7 +40,7 @@ namespace PVR
     bool GetFilteredItems(const std::string& filter, CFileItemList& items) override;
 
   private:
-    bool OnContextButtonDeleteAll(CFileItem *item, CONTEXT_BUTTON button);
+    bool OnContextButtonDeleteAll(CFileItem* item, CONTEXT_BUTTON button);
 
     CVideoThumbLoader m_thumbLoader;
     CVideoDatabase m_database;
diff --git a/xbmc/pvr/windows/GUIWindowPVRSearch.cpp b/xbmc/pvr/windows/GUIWindowPVRSearch.cpp
index 2d05751a29f3..88366f2eae5e 100644
--- a/xbmc/pvr/windows/GUIWindowPVRSearch.cpp
+++ b/xbmc/pvr/windows/GUIWindowPVRSearch.cpp
@@ -202,7 +202,7 @@ bool CGUIWindowPVRSearchBase::OnMessage(CGUIMessage& message)
   return CGUIWindowPVRBase::OnMessage(message);
 }
 
-bool CGUIWindowPVRSearchBase::OnContextButtonClear(CFileItem *item, CONTEXT_BUTTON button)
+bool CGUIWindowPVRSearchBase::OnContextButtonClear(CFileItem* item, CONTEXT_BUTTON button)
 {
   bool bReturn = false;
 
diff --git a/xbmc/pvr/windows/GUIWindowPVRSearch.h b/xbmc/pvr/windows/GUIWindowPVRSearch.h
index deb67159cc18..a2759af3cf99 100644
--- a/xbmc/pvr/windows/GUIWindowPVRSearch.h
+++ b/xbmc/pvr/windows/GUIWindowPVRSearch.h
@@ -41,7 +41,7 @@ namespace PVR
     std::string GetDirectoryPath(void) override { return ""; }
 
   private:
-    bool OnContextButtonClear(CFileItem *item, CONTEXT_BUTTON button);
+    bool OnContextButtonClear(CFileItem* item, CONTEXT_BUTTON button);
 
     void OpenDialogSearch();
 
