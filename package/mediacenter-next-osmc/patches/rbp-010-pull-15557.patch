From 141621bf4e190a4975c869a8e99f7890e024beb6 Mon Sep 17 00:00:00 2001
From: DaveTBlake <oak99sky@yahoo.co.uk>
Date: Mon, 18 Feb 2019 12:56:33 +0000
Subject: [PATCH] Fix delay of playback on switching song in party mode
 regression.

Refactor party mode to be faster:
a) on start up  by using fewer reconnections to music db and doing random order in query.
b) on refilling playlist when switching song,  especially when more than 1 new song is needed (e.g. click on song lower in current playlist) by using song ID cache.

Fix party mode use with "mixed" smart playlists.

Obey "queue songs on selection" setting when new song selected during party mode playback and queue song next rather than play it immediately.
---
 xbmc/PartyModeManager.cpp                 | 374 +++++++---------------
 xbmc/PartyModeManager.h                   |  11 +-
 xbmc/music/MusicDatabase.cpp              |  54 +---
 xbmc/music/MusicDatabase.h                |  12 +-
 xbmc/music/windows/GUIWindowMusicBase.cpp |   2 +-
 xbmc/video/VideoDatabase.cpp              |  41 +--
 xbmc/video/VideoDatabase.h                |   8 +-
 7 files changed, 143 insertions(+), 359 deletions(-)

diff --git a/xbmc/PartyModeManager.cpp b/xbmc/PartyModeManager.cpp
index e44d2e869040..156f3d02a666 100644
--- a/xbmc/PartyModeManager.cpp
+++ b/xbmc/PartyModeManager.cpp
@@ -12,12 +12,14 @@
 
 #include "Application.h"
 #include "dialogs/GUIDialogProgress.h"
+#include "FileItem.h"
 #include "guilib/GUIComponent.h"
 #include "guilib/GUIWindowManager.h"
 #include "GUIUserMessages.h"
 #include "interfaces/AnnouncementManager.h"
 #include "messaging/helpers/DialogOKHelper.h"
 #include "music/MusicDatabase.h"
+#include "music/tags/MusicInfoTag.h"
 #include "PlayListPlayer.h"
 #include "playlists/PlayList.h"
 #include "playlists/SmartPlayList.h"
@@ -29,6 +31,7 @@
 #include "utils/StringUtils.h"
 #include "utils/Variant.h"
 #include "video/VideoDatabase.h"
+#include "video/VideoInfoTag.h"
 #include "ServiceBroker.h"
 
 using namespace KODI::MESSAGING;
@@ -40,8 +43,6 @@ CPartyModeManager::CPartyModeManager(void)
 {
   m_bIsVideo = false;
   m_bEnabled = false;
-  m_strCurrentFilterMusic.clear();
-  m_strCurrentFilterVideo.clear();
   ClearState();
 }
 
@@ -65,31 +66,21 @@ bool CPartyModeManager::Enable(PartyModeContext context /*= PARTYMODECONTEXT_MUS
 
   playlistLoaded=playlist.Load(partyModePath);
 
-  if ( playlistLoaded )
+  if (playlistLoaded)
   {
     m_type = playlist.GetType();
     if (context == PARTYMODECONTEXT_UNKNOWN)
     {
       //get it from the xsp file
       m_bIsVideo = (StringUtils::EqualsNoCase(m_type, "video") ||
-                    StringUtils::EqualsNoCase(m_type, "musicvideos") ||
-                    StringUtils::EqualsNoCase(m_type, "mixed"));
+        StringUtils::EqualsNoCase(m_type, "musicvideos") ||
+        StringUtils::EqualsNoCase(m_type, "mixed"));
     }
-
-    if (StringUtils::EqualsNoCase(m_type, "mixed"))
-      playlist.SetType("songs");
-
-    if (StringUtils::EqualsNoCase(m_type, "mixed"))
-      playlist.SetType("video");
-
-    playlist.SetType(m_type);
   }
+  else if (m_bIsVideo)
+    m_type = "musicvideos";
   else
-  {
-    m_strCurrentFilterMusic.clear();
-    m_strCurrentFilterVideo.clear();
-    m_type = m_bIsVideo ? "musicvideos" : "songs";
-  }
+    m_type = "songs";
 
   CGUIDialogProgress* pDialog = CServiceBroker::GetGUI()->GetWindowManager().GetWindow<CGUIDialogProgress>(WINDOW_DIALOG_PROGRESS);
   int iHeading = (m_bIsVideo ? 20250 : 20121);
@@ -101,8 +92,12 @@ bool CPartyModeManager::Enable(PartyModeContext context /*= PARTYMODECONTEXT_MUS
   pDialog->Open();
 
   ClearState();
+  std::string strCurrentFilterMusic;
+  std::string strCurrentFilterVideo;
+  unsigned int songcount = 0;
+  unsigned int videocount = 0;
   unsigned int time = XbmcThreads::SystemClockMillis();
-  std::vector< std::pair<int,int> > songIDs;
+  
   if (StringUtils::EqualsNoCase(m_type, "songs") ||
       StringUtils::EqualsNoCase(m_type, "mixed"))
   {
@@ -110,23 +105,27 @@ bool CPartyModeManager::Enable(PartyModeContext context /*= PARTYMODECONTEXT_MUS
     if (db.Open())
     {
       std::set<std::string> playlists;
-      if ( playlistLoaded )
-        m_strCurrentFilterMusic = playlist.GetWhereClause(db, playlists);
+      if (playlistLoaded)
+      {
+        playlist.SetType("songs");
+        strCurrentFilterMusic = playlist.GetWhereClause(db, playlists);
+      }
 
-      CLog::Log(LOGINFO, "PARTY MODE MANAGER: Registering filter:[%s]", m_strCurrentFilterMusic.c_str());
-      m_iMatchingSongs = (int)db.GetSongIDs(CDatabase::Filter(m_strCurrentFilterMusic), songIDs);
+      CLog::Log(LOGINFO, "PARTY MODE MANAGER: Registering filter:[%s]", strCurrentFilterMusic.c_str());
+      songcount = db.GetRandomSongIDs(CDatabase::Filter(strCurrentFilterMusic), m_songIDCache);
+      m_iMatchingSongs = static_cast<int>(songcount);
       if (m_iMatchingSongs < 1 && StringUtils::EqualsNoCase(m_type, "songs"))
       {
         pDialog->Close();
         db.Close();
-        OnError(16031, (std::string)"Party mode found no matching songs. Aborting.");
+        OnError(16031, "Party mode found no matching songs. Aborting.");
         return false;
       }
     }
     else
     {
       pDialog->Close();
-      OnError(16033, (std::string)"Party mode could not open database. Aborting.");
+      OnError(16033, "Party mode could not open database. Aborting.");
       return false;
     }
     db.Close();
@@ -140,38 +139,38 @@ bool CPartyModeManager::Enable(PartyModeContext context /*= PARTYMODECONTEXT_MUS
     if (db.Open())
     {
       std::set<std::string> playlists;
-      if ( playlistLoaded )
-        m_strCurrentFilterVideo = playlist.GetWhereClause(db, playlists);
+      if (playlistLoaded)
+      {
+        playlist.SetType("musicvideos");
+        strCurrentFilterVideo = playlist.GetWhereClause(db, playlists);
+      }
 
-      CLog::Log(LOGINFO, "PARTY MODE MANAGER: Registering filter:[%s]", m_strCurrentFilterVideo.c_str());
-      m_iMatchingSongs += (int)db.GetMusicVideoIDs(m_strCurrentFilterVideo, songIDs2);
+      CLog::Log(LOGINFO, "PARTY MODE MANAGER: Registering filter:[%s]", strCurrentFilterVideo.c_str());
+      videocount = db.GetRandomMusicVideoIDs(strCurrentFilterVideo, songIDs2);
+      m_iMatchingSongs += static_cast<int>(videocount);
       if (m_iMatchingSongs < 1)
       {
         pDialog->Close();
         db.Close();
-        OnError(16031, (std::string)"Party mode found no matching songs. Aborting.");
+        OnError(16031, "Party mode found no matching songs. Aborting.");
         return false;
       }
     }
     else
     {
       pDialog->Close();
-      OnError(16033, (std::string)"Party mode could not open database. Aborting.");
+      OnError(16033, "Party mode could not open database. Aborting.");
       return false;
     }
     db.Close();
-    songIDs.insert(songIDs.end(),songIDs2.begin(),songIDs2.end());
+    m_songIDCache.insert(m_songIDCache.end(), songIDs2.begin(), songIDs2.end());
   }
 
-  // calculate history size
-  if (m_iMatchingSongs < 50)
-    m_songsInHistory = 0;
-  else
-    m_songsInHistory = m_iMatchingSongs/2;
-  if (m_songsInHistory > 200)
-    m_songsInHistory = 200;
-
-  CLog::Log(LOGINFO,"PARTY MODE MANAGER: Matching songs = %i, History size = %i", m_iMatchingSongs, m_songsInHistory);
+  // Songs and music videos are random from query, but need mixing together when have both
+  if (songcount > 0 && videocount > 0 )
+    KODI::UTILS::RandomShuffle(m_songIDCache.begin(), m_songIDCache.end());
+ 
+  CLog::Log(LOGINFO,"PARTY MODE MANAGER: Matching songs = {0}", m_iMatchingSongs);
   CLog::Log(LOGINFO,"PARTY MODE MANAGER: Party mode enabled!");
 
   int iPlaylist = m_bIsVideo ? PLAYLIST_VIDEO : PLAYLIST_MUSIC;
@@ -183,7 +182,7 @@ bool CPartyModeManager::Enable(PartyModeContext context /*= PARTYMODECONTEXT_MUS
   pDialog->SetLine(0, CVariant{m_bIsVideo ? 20252 : 20124});
   pDialog->Progress();
   // add initial songs
-  if (!AddInitialSongs(songIDs))
+  if (!AddRandomSongs())
   {
     pDialog->Close();
     return false;
@@ -295,133 +294,107 @@ void CPartyModeManager::Process()
   SendUpdateMessage();
 }
 
-bool CPartyModeManager::AddRandomSongs(int iSongs /* = 0 */)
+bool CPartyModeManager::AddRandomSongs()
 {
+  // All songs have been picked, no more to add
+  if (static_cast<int>(m_songIDCache.size()) == m_iMatchingSongsPicked)
+    return false;
+
   int iPlaylist = PLAYLIST_MUSIC;
   if (m_bIsVideo)
     iPlaylist = PLAYLIST_VIDEO;
 
   CPlayList& playlist = CServiceBroker::GetPlaylistPlayer().GetPlaylist(iPlaylist);
   int iMissingSongs = QUEUE_DEPTH - playlist.size();
-  if (iSongs <= 0)
-    iSongs = iMissingSongs;
-  // distribute between types if mixed
-  int iSongsToAdd=iSongs;
-  int iVidsToAdd=iSongs;
-  if (StringUtils::EqualsNoCase(m_type, "mixed"))
-  {
-    if (iSongs == 1)
-    {
-      if (rand() % 10 < 7) // 70 % chance of grabbing a song
-        iVidsToAdd = 0;
-      else
-        iSongsToAdd = 0;
-    }
-    if (iSongs > 1) // grab 70 % songs, 30 % mvids
-    {
-      iSongsToAdd = (int).7f*iSongs;
-      iVidsToAdd = (int).3f*iSongs;
-      while (iSongsToAdd+iVidsToAdd < iSongs) // correct any rounding by adding songs
-        iSongsToAdd++;
-    }
-  }
 
-  // add songs to fill queue
-  if (StringUtils::EqualsNoCase(m_type, "songs") ||
-      StringUtils::EqualsNoCase(m_type, "mixed"))
+  if (iMissingSongs > 0)
   {
-    CMusicDatabase database;
-    if (database.Open())
+    // Limit songs fetched to remainder of songID cache
+    iMissingSongs = std::min(iMissingSongs, static_cast<int>(m_songIDCache.size()) - m_iMatchingSongsPicked);
+      
+    // Pick iMissingSongs from remaining songID cache
+    std::string sqlWhereMusic = "songview.idSong IN (";
+    std::string sqlWhereVideo = "idMVideo IN (";
+
+    bool bSongs = false;
+    bool bMusicVideos = false;
+    for (int i = m_iMatchingSongsPicked; i < m_iMatchingSongsPicked + iMissingSongs; i++)
     {
-      // Method:
-      // 1. Grab a random entry from the database using a where clause
-      // 2. Iterate on iSongs.
-
-      // Note: At present, this method is faster than the alternative, which is to grab
-      // all valid songids, then select a random number of them (as done in AddInitialSongs()).
-      // The reason for this is simply the number of songs we are requesting - we generally
-      // only want one here.  Any more than about 3 songs and it is more efficient
-      // to use the technique in AddInitialSongs.  As it's unlikely that we'll require
-      // more than 1 song at a time here, this method is faster.
-      bool error(false);
-      for (int i = 0; i < iSongsToAdd; i++)
+      std::string song = StringUtils::Format("%i,", m_songIDCache[i].second);
+      if (m_songIDCache[i].first == 1)
+      {
+        sqlWhereMusic += song;
+        bSongs = true;
+      }
+      else if (m_songIDCache[i].first == 2)
       {
-        std::pair<std::string,std::string> whereClause = GetWhereClauseWithHistory();
-        CFileItemPtr item(new CFileItem);
-        int songID;
-        if (database.GetRandomSong(item.get(), songID, CDatabase::Filter(whereClause.first)))
-        { // success
-          Add(item);
-          AddToHistory(1,songID);
-        }
-        else
-        {
-          error = true;
-          break;
-        }
+        sqlWhereVideo += song;
+        bMusicVideos = true;
       }
+    }
+    CFileItemList items;
 
-      if (error)
+    if (bSongs)
+    {
+      sqlWhereMusic.back() = ')'; // replace the last comma with closing bracket
+      // Apply random sort (and limit) at db query for efficiency
+      SortDescription SortDescription;
+      SortDescription.sortBy = SortByRandom;
+      SortDescription.limitEnd = QUEUE_DEPTH;
+      CMusicDatabase database;
+      if (database.Open())
       {
+        database.GetSongsFullByWhere("musicdb://songs/", CDatabase::Filter(sqlWhereMusic),
+          items, SortDescription, true);
+
+        // Get artist and album properties for songs
+        for (auto& item : items)
+          database.SetPropertiesForFileItem(*item);
         database.Close();
-        OnError(16034, (std::string)"Cannot get songs from database. Aborting.");
+      }
+      else
+      {
+        OnError(16033, "Party mode could not open database. Aborting.");
         return false;
       }
     }
-    else
-    {
-      OnError(16033, (std::string)"Party mode could not open database. Aborting.");
-      return false;
-    }
-    database.Close();
-  }
-  if (StringUtils::EqualsNoCase(m_type, "musicvideos") ||
-      StringUtils::EqualsNoCase(m_type, "mixed"))
-  {
-    CVideoDatabase database;
-    if (database.Open())
+    if (bMusicVideos)
     {
-      // Method:
-      // 1. Grab a random entry from the database using a where clause
-      // 2. Iterate on iSongs.
-
-      // Note: At present, this method is faster than the alternative, which is to grab
-      // all valid songids, then select a random number of them (as done in AddInitialSongs()).
-      // The reason for this is simply the number of songs we are requesting - we generally
-      // only want one here.  Any more than about 3 songs and it is more efficient
-      // to use the technique in AddInitialSongs.  As it's unlikely that we'll require
-      // more than 1 song at a time here, this method is faster.
-      bool error(false);
-      for (int i = 0; i < iVidsToAdd; i++)
+      sqlWhereVideo.back() = ')'; // replace the last comma with closing bracket
+      CVideoDatabase database;
+      if (database.Open())
       {
-        std::pair<std::string,std::string> whereClause = GetWhereClauseWithHistory();
-        CFileItemPtr item(new CFileItem);
-        int songID;
-        if (database.GetRandomMusicVideo(item.get(), songID, whereClause.second))
-        { // success
-          Add(item);
-          AddToHistory(2,songID);
-        }
-        else
-        {
-          error = true;
-          break;
-        }
+        database.GetMusicVideosByWhere("videodb://musicvideos/titles/",
+          CDatabase::Filter(sqlWhereVideo), items);
+        database.Close();
       }
-
-      if (error)
+      else
       {
-        database.Close();
-        OnError(16034, (std::string)"Cannot get songs from database. Aborting.");
+        OnError(16033, "Party mode could not open database. Aborting.");
         return false;
       }
     }
-    else
+
+    // Randomize if the list has music videos or they will be in db order
+    // Songs only are already random.
+    if (bMusicVideos)
+      items.Randomize();
+    for (const auto& item : items)
     {
-      OnError(16033, (std::string)"Party mode could not open database. Aborting.");
-      return false;
+      // Update songID cache with order items in playlist
+      if (item->HasMusicInfoTag())
+      {
+        m_songIDCache[m_iMatchingSongsPicked].first = 1;
+        m_songIDCache[m_iMatchingSongsPicked].second = item->GetMusicInfoTag()->GetDatabaseId();
+      }
+      else if (item->HasVideoInfoTag())
+      {
+        m_songIDCache[m_iMatchingSongsPicked].first = 2;
+        m_songIDCache[m_iMatchingSongsPicked].second = item->GetVideoInfoTag()->m_iDbId;
+      }
+      CFileItemPtr pItem(item);
+      Add(pItem); // inc m_iMatchingSongsPicked
     }
-    database.Close();
   }
   return true;
 }
@@ -429,12 +402,6 @@ bool CPartyModeManager::AddRandomSongs(int iSongs /* = 0 */)
 void CPartyModeManager::Add(CFileItemPtr &pItem)
 {
   int iPlaylist = m_bIsVideo ? PLAYLIST_VIDEO : PLAYLIST_MUSIC;
-  if (pItem->HasMusicInfoTag())
-  {
-    CMusicDatabase database;
-    database.Open();
-    database.SetPropertiesForFileItem(*pItem);
-  }
 
   CPlayList& playlist = CServiceBroker::GetPlaylistPlayer().GetPlaylist(iPlaylist);
   playlist.Add(pItem);
@@ -497,10 +464,10 @@ void CPartyModeManager::SendUpdateMessage()
 
 void CPartyModeManager::Play(int iPos)
 {
-  // move current song to the top if its not there
+  // Move current song to the top if its not there. Playlist filled up below by
+  // OnSongChange call from application GUI_MSG_PLAYBACK_STARTED processing
   CServiceBroker::GetPlaylistPlayer().Play(iPos, "");
   CLog::Log(LOGINFO,"PARTY MODE MANAGER: Playing song at %i", iPos);
-  Process();
 }
 
 void CPartyModeManager::OnError(int iError, const std::string&  strLogMessage)
@@ -575,8 +542,7 @@ void CPartyModeManager::ClearState()
   m_iRelaxedSongs = 0;
   m_iRandomSongs = 0;
 
-  m_songsInHistory = 0;
-  m_history.clear();
+  m_songIDCache.clear();
 }
 
 void CPartyModeManager::UpdateStats()
@@ -586,110 +552,6 @@ void CPartyModeManager::UpdateStats()
   m_iRelaxedSongs = 0;  // unsupported at this stage
 }
 
-bool CPartyModeManager::AddInitialSongs(std::vector< std::pair<int,int > > &songIDs)
-{
-  int iPlaylist = m_bIsVideo ? PLAYLIST_VIDEO : PLAYLIST_MUSIC;
-
-  CPlayList& playlist = CServiceBroker::GetPlaylistPlayer().GetPlaylist(iPlaylist);
-  int iMissingSongs = QUEUE_DEPTH - playlist.size();
-  if (iMissingSongs > 0)
-  {
-    // generate iMissingSongs random ids from songIDs
-    if (iMissingSongs > (int)songIDs.size())
-      return false; // can't do it if we have less songs than we need
-
-    std::vector<std::pair<int,int> > chosenSongIDs;
-    GetRandomSelection(songIDs, iMissingSongs, chosenSongIDs);
-    std::string sqlWhereMusic = "songview.idSong IN (";
-    std::string sqlWhereVideo = "idMVideo IN (";
-
-    for (std::vector< std::pair<int,int> >::iterator it = chosenSongIDs.begin(); it != chosenSongIDs.end(); ++it)
-    {
-      std::string song = StringUtils::Format("%i,", it->second);
-      if (it->first == 1)
-        sqlWhereMusic += song;
-      if (it->first == 2)
-        sqlWhereVideo += song;
-    }
-    // add songs to fill queue
-    CFileItemList items;
-
-    if (sqlWhereMusic.size() > 26)
-    {
-      sqlWhereMusic[sqlWhereMusic.size() - 1] = ')'; // replace the last comma with closing bracket
-      CMusicDatabase database;
-      database.Open();
-      database.GetSongsFullByWhere("musicdb://songs/", CDatabase::Filter(sqlWhereMusic),
-                                   items, SortDescription(), true);
-    }
-    if (sqlWhereVideo.size() > 19)
-    {
-      sqlWhereVideo[sqlWhereVideo.size() - 1] = ')'; // replace the last comma with closing bracket
-      CVideoDatabase database;
-      database.Open();
-      database.GetMusicVideosByWhere("videodb://musicvideos/titles/",
-                                     CDatabase::Filter(sqlWhereVideo), items);
-    }
-
-    m_history = chosenSongIDs;
-    items.Randomize(); //randomizing the initial list or they will be in database order
-    for (int i = 0; i < items.Size(); i++)
-    {
-      CFileItemPtr item(items[i]);
-      Add(item);
-      //! @todo Allow "relaxed restrictions" later?
-    }
-  }
-  return true;
-}
-
-std::pair<std::string,std::string> CPartyModeManager::GetWhereClauseWithHistory() const
-{
-  // now add this on to the normal where clause
-  std::vector<std::string> historyItemsMusic;
-  std::vector<std::string> historyItemsVideo;
-  for (unsigned int i = 0; i < m_history.size(); i++)
-  {
-    std::string number = StringUtils::Format("%i", m_history[i].second);
-    if (m_history[i].first == 1)
-      historyItemsMusic.push_back(number);
-    if (m_history[i].first == 2)
-      historyItemsVideo.push_back(number);
-  }
-
-  std::string historyWhereMusic;
-  if (!historyItemsMusic.empty())
-  {
-    if (!m_strCurrentFilterMusic.empty())
-      historyWhereMusic = m_strCurrentFilterMusic + " and ";
-    historyWhereMusic += "songview.idSong not in (" + StringUtils::Join(historyItemsMusic, ", ") + ")";
-  }
-
-  std::string historyWhereVideo;
-  if (!historyItemsVideo.empty())
-  {
-    if (!m_strCurrentFilterVideo.empty())
-      historyWhereVideo = m_strCurrentFilterVideo + " and ";
-    historyWhereVideo += "idMVideo not in (" + StringUtils::Join(historyItemsVideo, ", ") + ")";
-  }
-
-  return std::make_pair(historyWhereMusic, historyWhereVideo);
-}
-
-void CPartyModeManager::AddToHistory(int type, int songID)
-{
-  while (m_history.size() >= m_songsInHistory && m_songsInHistory)
-    m_history.erase(m_history.begin());
-  m_history.push_back(std::make_pair(type,songID));
-}
-
-void CPartyModeManager::GetRandomSelection(std::vector< std::pair<int,int> >& in, unsigned int number, std::vector< std::pair<int,int> >& out)
-{
-  number = std::min(number, (unsigned int)in.size());
-  KODI::UTILS::RandomShuffle(in.begin(), in.end());
-  out.assign(in.begin(), in.begin() + number);
-}
-
 bool CPartyModeManager::IsEnabled(PartyModeContext context /* = PARTYMODECONTEXT_UNKNOWN */) const
 {
   if (!m_bEnabled) return false;
diff --git a/xbmc/PartyModeManager.h b/xbmc/PartyModeManager.h
index 69340e823c1a..f0434c28f599 100644
--- a/xbmc/PartyModeManager.h
+++ b/xbmc/PartyModeManager.h
@@ -49,8 +49,7 @@ class CPartyModeManager final
 
 private:
   void Process();
-  bool AddRandomSongs(int iSongs = 0);
-  bool AddInitialSongs(std::vector< std::pair<int,int> > &songIDs);
+  bool AddRandomSongs();
   void Add(CFileItemPtr &pItem);
   bool ReapSongs();
   bool MovePlaying();
@@ -58,17 +57,12 @@ class CPartyModeManager final
   void OnError(int iError, const std::string& strLogMessage);
   void ClearState();
   void UpdateStats();
-  std::pair<std::string,std::string> GetWhereClauseWithHistory() const;
-  void AddToHistory(int type, int songID);
-  void GetRandomSelection(std::vector< std::pair<int,int> > &in, unsigned int number, std::vector< std::pair<int, int> > &out);
   void Announce();
 
   // state
   bool m_bEnabled;
   bool m_bIsVideo;
   int m_iLastUserSong;
-  std::string m_strCurrentFilterMusic;
-  std::string m_strCurrentFilterVideo;
   std::string m_type;
 
   // statistics
@@ -80,8 +74,7 @@ class CPartyModeManager final
   int m_iRandomSongs;
 
   // history
-  unsigned int m_songsInHistory;
-  std::vector< std::pair<int,int> > m_history;
+  std::vector<std::pair<int, int>> m_songIDCache;
 };
 
 extern CPartyModeManager g_partyModeManager;
diff --git a/xbmc/music/MusicDatabase.cpp b/xbmc/music/MusicDatabase.cpp
index 0ae692489666..fb5a6ecea133 100644
--- a/xbmc/music/MusicDatabase.cpp
+++ b/xbmc/music/MusicDatabase.cpp
@@ -7482,16 +7482,17 @@ void CMusicDatabase::SetLibraryLastUpdated()
 }
 
 
-unsigned int CMusicDatabase::GetSongIDs(const Filter &filter, std::vector<std::pair<int,int> > &songIDs)
+unsigned int CMusicDatabase::GetRandomSongIDs(const Filter &filter, std::vector<std::pair<int,int> > &songIDs)
 {
   try
   {
     if (NULL == m_pDB.get()) return 0;
     if (NULL == m_pDS.get()) return 0;
 
-    std::string strSQL = "select idSong from songview ";
+    std::string strSQL = "SELECT idSong FROM songview ";
     if (!CDatabase::BuildSQL(strSQL, filter, strSQL))
       return false;
+    strSQL += PrepareSQL(" ORDER BY RANDOM()");
 
     if (!m_pDS->query(strSQL)) return 0;
     songIDs.clear();
@@ -7503,7 +7504,7 @@ unsigned int CMusicDatabase::GetSongIDs(const Filter &filter, std::vector<std::p
     songIDs.reserve(m_pDS->num_rows());
     while (!m_pDS->eof())
     {
-      songIDs.push_back(std::make_pair<int,int>(1,m_pDS->fv(song_idSong).get_asInt()));
+      songIDs.push_back(std::make_pair<int,int>(1, m_pDS->fv(song_idSong).get_asInt()));
       m_pDS->next();
     }    // cleanup
     m_pDS->close();
@@ -8883,53 +8884,6 @@ bool CMusicDatabase::GetGenresJSON(CFileItemList& items, bool bSources)
   return false;
 }
 
-bool CMusicDatabase::GetRandomSong(CFileItem* item, int& idSong, const Filter &filter)
-{
-  try
-  {
-    idSong = -1;
-
-    if (NULL == m_pDB.get()) return false;
-    if (NULL == m_pDS.get()) return false;
-
-    // Get a random song that matches filter criteria (which may exclude some songs)
-    // We don't use PrepareSQL here, as the WHERE clause is already formatted but must
-    // use songview as that is what the WHERE clause has as reference table
-    std::string strSQL = "SELECT idSong FROM songview ";
-    Filter extFilter = filter;
-    extFilter.AppendOrder(PrepareSQL("RANDOM()"));
-    extFilter.limit = "1";
-    if (!CDatabase::BuildSQL(strSQL, extFilter, strSQL))
-      return false;
-    if (!m_pDS->query(strSQL))
-      return false;
-    int iRowsFound = m_pDS->num_rows();
-    if (iRowsFound != 1)
-    {
-      m_pDS->close();
-      return false;
-    }
-    idSong = m_pDS->fv("songview.idSong").get_asInt();
-    m_pDS->close();
-
-    // Fetch the full song details, including contributors
-    std::string baseDir = StringUtils::Format("musicdb://songs/?songid=%d", idSong);
-    CFileItemList items;
-    GetSongsFullByWhere(baseDir, Filter(), items, SortDescription(), true);
-    if (items.Size() > 0)
-    {
-      *item = *items[0];
-      return true;
-    }
-    return false;
-  }
-  catch(...)
-  {
-    CLog::Log(LOGERROR, "%s(%s) failed", __FUNCTION__, filter.where.c_str());
-  }
-  return false;
-}
-
 bool CMusicDatabase::GetCompilationAlbums(const std::string& strBaseDir, CFileItemList& items)
 {
   CMusicDbUrl musicUrl;
diff --git a/xbmc/music/MusicDatabase.h b/xbmc/music/MusicDatabase.h
index 0025838b46f7..20092b8a7bbb 100644
--- a/xbmc/music/MusicDatabase.h
+++ b/xbmc/music/MusicDatabase.h
@@ -450,11 +450,19 @@ class CMusicDatabase : public CDatabase
   bool GetSongsFullByWhere(const std::string &baseDir, const Filter &filter, CFileItemList& items, const SortDescription &sortDescription = SortDescription(), bool artistData = false);
   bool GetAlbumsByWhere(const std::string &baseDir, const Filter &filter, CFileItemList &items, const SortDescription &sortDescription = SortDescription(), bool countOnly = false);
   bool GetArtistsByWhere(const std::string& strBaseDir, const Filter &filter, CFileItemList& items, const SortDescription &sortDescription = SortDescription(), bool countOnly = false);
-  bool GetRandomSong(CFileItem* item, int& idSong, const Filter &filter);
   int GetSongsCount(const Filter &filter = Filter());
-  unsigned int GetSongIDs(const Filter &filter, std::vector<std::pair<int,int> > &songIDs);
   bool GetFilter(CDbUrl &musicUrl, Filter &filter, SortDescription &sorting) override;
 
+  /////////////////////////////////////////////////
+  // Party Mode
+  /////////////////////////////////////////////////
+  /*! \brief Gets song IDs in random order that match the filter criteria
+  \param filter the criteria to apply in the query
+  \param songIDs a vector of <1, id> pairs suited to party mode use
+  \return count of song ids found.
+  */
+  unsigned int GetRandomSongIDs(const Filter &filter, std::vector<std::pair<int, int> > &songIDs);
+
   /////////////////////////////////////////////////
   // JSON-RPC 
   /////////////////////////////////////////////////
diff --git a/xbmc/music/windows/GUIWindowMusicBase.cpp b/xbmc/music/windows/GUIWindowMusicBase.cpp
index a371e046c9d8..f7504ce985f0 100644
--- a/xbmc/music/windows/GUIWindowMusicBase.cpp
+++ b/xbmc/music/windows/GUIWindowMusicBase.cpp
@@ -829,7 +829,7 @@ bool CGUIWindowMusicBase::OnPlayMedia(int iItem, const std::string &player)
   {
     CPlayList playlistTemp;
     playlistTemp.Add(pItem);
-    g_partyModeManager.AddUserSongs(playlistTemp, true);
+    g_partyModeManager.AddUserSongs(playlistTemp, !CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_MUSICPLAYER_QUEUEBYDEFAULT));
     return true;
   }
   else if (!pItem->IsPlayList() && !pItem->IsInternetStream())
diff --git a/xbmc/video/VideoDatabase.cpp b/xbmc/video/VideoDatabase.cpp
index 28f88c5b8351..493bee4b3799 100644
--- a/xbmc/video/VideoDatabase.cpp
+++ b/xbmc/video/VideoDatabase.cpp
@@ -8145,7 +8145,7 @@ bool CVideoDatabase::GetMusicVideosByWhere(const std::string &baseDir, const Fil
   return false;
 }
 
-unsigned int CVideoDatabase::GetMusicVideoIDs(const std::string& strWhere, std::vector<std::pair<int,int> > &songIDs)
+unsigned int CVideoDatabase::GetRandomMusicVideoIDs(const std::string& strWhere, std::vector<std::pair<int,int> > &songIDs)
 {
   try
   {
@@ -8155,6 +8155,7 @@ unsigned int CVideoDatabase::GetMusicVideoIDs(const std::string& strWhere, std::
     std::string strSQL = "select distinct idMVideo from musicvideo_view";
     if (!strWhere.empty())
       strSQL += " where " + strWhere;
+    strSQL += PrepareSQL(" ORDER BY RANDOM()");
 
     if (!m_pDS->query(strSQL)) return 0;
     songIDs.clear();
@@ -8179,44 +8180,6 @@ unsigned int CVideoDatabase::GetMusicVideoIDs(const std::string& strWhere, std::
   return 0;
 }
 
-bool CVideoDatabase::GetRandomMusicVideo(CFileItem* item, int& idSong, const std::string& strWhere)
-{
-  try
-  {
-    idSong = -1;
-
-    if (NULL == m_pDB.get()) return false;
-    if (NULL == m_pDS.get()) return false;
-
-    std::string strSQL = "select * from musicvideo_view";
-    if (!strWhere.empty())
-      strSQL += " where " + strWhere;
-    strSQL += PrepareSQL(" order by RANDOM() limit 1");
-    CLog::Log(LOGDEBUG, LOGDATABASE, "%s query = %s", __FUNCTION__, strSQL.c_str());
-    // run query
-    if (!m_pDS->query(strSQL))
-      return false;
-    int iRowsFound = m_pDS->num_rows();
-    if (iRowsFound != 1)
-    {
-      m_pDS->close();
-      return false;
-    }
-    *item->GetVideoInfoTag() = GetDetailsForMusicVideo(m_pDS);
-    std::string path = StringUtils::Format("videodb://musicvideos/titles/%i",item->GetVideoInfoTag()->m_iDbId);
-    item->SetPath(path);
-    idSong = m_pDS->fv("idMVideo").get_asInt();
-    item->SetLabel(item->GetVideoInfoTag()->m_strTitle);
-    m_pDS->close();
-    return true;
-  }
-  catch(...)
-  {
-    CLog::Log(LOGERROR, "%s (%s) failed", __FUNCTION__, strWhere.c_str());
-  }
-  return false;
-}
-
 int CVideoDatabase::GetMatchingMusicVideo(const std::string& strArtist, const std::string& strAlbum, const std::string& strTitle)
 {
   try
diff --git a/xbmc/video/VideoDatabase.h b/xbmc/video/VideoDatabase.h
index b4d75424febe..5ed2303f45b0 100644
--- a/xbmc/video/VideoDatabase.h
+++ b/xbmc/video/VideoDatabase.h
@@ -808,8 +808,12 @@ class CVideoDatabase : public CDatabase
   std::string GetItemById(const std::string &itemType, int id);
 
   // partymode
-  unsigned int GetMusicVideoIDs(const std::string& strWhere, std::vector<std::pair<int, int> > &songIDs);
-  bool GetRandomMusicVideo(CFileItem* item, int& idSong, const std::string& strWhere);
+  /*! \brief Gets music video IDs in random order that match the where clause
+  \param strWhere the SQL where clause to apply in the query
+  \param songIDs a vector of <2, id> pairs suited to party mode use
+  \return count of music video IDs found.
+  */
+  unsigned int GetRandomMusicVideoIDs(const std::string& strWhere, std::vector<std::pair<int, int> > &songIDs);
 
   static void VideoContentTypeToString(VIDEODB_CONTENT_TYPE type, std::string& out)
   {
