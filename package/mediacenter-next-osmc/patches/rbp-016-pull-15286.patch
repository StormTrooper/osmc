From 917344bc9d20e45b75428a956d95dfa81597964c Mon Sep 17 00:00:00 2001
From: peak3d <pfau@peak3d.de>
Date: Wed, 23 Jan 2019 10:36:02 +0100
Subject: [PATCH 1/3] [GLES] memcpy intead multi glTexSubImage2D for planes
 with pitch

---
 .../VideoRenderers/LinuxRendererGLES.cpp      | 31 +++++++++++++------
 .../VideoRenderers/LinuxRendererGLES.h        |  1 +
 2 files changed, 23 insertions(+), 9 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.cpp
index ed15f8976e04..f2b6d6fea62f 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.cpp
@@ -46,6 +46,9 @@ CLinuxRendererGLES::~CLinuxRendererGLES()
   UnInit();
 
   ReleaseShaders();
+
+  free(m_planeBuffer);
+  m_planeBuffer = nullptr;
 }
 
 CBaseRenderer* CLinuxRendererGLES::Create(CVideoBuffer *buffer)
@@ -260,18 +263,26 @@ void CLinuxRendererGLES::LoadPlane(CYuvPlane& plane, int type,
   glBindTexture(m_textureTarget, plane.id);
 
   // OpenGL ES does not support strided texture input.
+  GLint pixelStore = -1;
   if (stride != static_cast<int>(width * bps))
   {
-    unsigned char* src = static_cast<unsigned char*>(data);
-    for (unsigned int y = 0; y < height; ++y, src += stride)
-    {
-      glTexSubImage2D(m_textureTarget, 0, 0, y, width, 1, type, GL_UNSIGNED_BYTE, src);
-    }
-  }
-  else
-  {
-    glTexSubImage2D(m_textureTarget, 0, 0, 0, width, height, type, GL_UNSIGNED_BYTE, pixelData);
+#if HAS_GLES >= 3
+    glGetIntegerv(GL_UNPACK_ROW_LENGTH, &pixelStore);
+    glPixelStorei(GL_UNPACK_ROW_LENGTH, stride);
+#else
+    unsigned char *src(static_cast<unsigned char*>(data)),
+                  *dst(m_planeBuffer);
+
+    for (unsigned int y = 0; y < height; ++y, src += stride, dst += width * bpp)
+      memcpy(dst, src, width * bpp);
+
+    pixelData = m_planeBuffer;
+#endif
   }
+  glTexSubImage2D(m_textureTarget, 0, 0, 0, width, height, type, GL_UNSIGNED_BYTE, pixelData);
+
+  if (pixelStore >= 0)
+    glPixelStorei(GL_UNPACK_ROW_LENGTH, pixelStore);
 
   // check if we need to load any border pixels
   if (height < plane.texheight)
@@ -1262,6 +1273,8 @@ bool CLinuxRendererGLES::CreateYV12Texture(int index)
   im.planesize[1] = im.stride[1] * (im.height >> im.cshift_y);
   im.planesize[2] = im.stride[2] * (im.height >> im.cshift_y);
 
+  m_planeBuffer = static_cast<unsigned char*>(realloc(m_planeBuffer, m_sourceHeight * m_sourceWidth * im.bpp));
+
   for (int i = 0; i < 3; i++)
   {
     im.plane[i] = new uint8_t[im.planesize[i]];
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.h b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.h
index 56c401aca144..f0a310ff931d 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.h
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.h
@@ -201,6 +201,7 @@ class CLinuxRendererGLES : public CBaseRenderer
   bool m_fullRange;
   AVColorPrimaries m_srcPrimaries;
   bool m_toneMap = false;
+  unsigned char* m_planeBuffer = nullptr;
 
   // clear colour for "black" bars
   float m_clearColour{0.0f};

From fe6d00a40dfffe220426418c887c4e4ab3681f7c Mon Sep 17 00:00:00 2001
From: peak3d <pfau@peak3d.de>
Date: Wed, 23 Jan 2019 13:53:04 +0100
Subject: [PATCH 2/3] check runtime gles version

---
 .../VideoRenderers/LinuxRendererGLES.cpp      | 26 ++++++++++++-------
 1 file changed, 17 insertions(+), 9 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.cpp
index f2b6d6fea62f..93c8b3a0b18b 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.cpp
@@ -267,17 +267,25 @@ void CLinuxRendererGLES::LoadPlane(CYuvPlane& plane, int type,
   if (stride != static_cast<int>(width * bps))
   {
 #if HAS_GLES >= 3
-    glGetIntegerv(GL_UNPACK_ROW_LENGTH, &pixelStore);
-    glPixelStorei(GL_UNPACK_ROW_LENGTH, stride);
-#else
-    unsigned char *src(static_cast<unsigned char*>(data)),
-                  *dst(m_planeBuffer);
+    unsigned int verMajor, verMinor;
+    m_renderSystem->GetRenderVersion(verMajor, verMinor);
 
-    for (unsigned int y = 0; y < height; ++y, src += stride, dst += width * bpp)
-      memcpy(dst, src, width * bpp);
-
-    pixelData = m_planeBuffer;
+    if (verMajor >= 3)
+    {
+      glGetIntegerv(GL_UNPACK_ROW_LENGTH, &pixelStore);
+      glPixelStorei(GL_UNPACK_ROW_LENGTH, stride);
+    }
+    else
 #endif
+    {
+      unsigned char *src(static_cast<unsigned char*>(data)),
+                    *dst(m_planeBuffer);
+
+      for (unsigned int y = 0; y < height; ++y, src += stride, dst += width * bpp)
+        memcpy(dst, src, width * bpp);
+
+      pixelData = m_planeBuffer;
+    }
   }
   glTexSubImage2D(m_textureTarget, 0, 0, 0, width, height, type, GL_UNSIGNED_BYTE, pixelData);
 

From 7ec3320808e6fa20561acd84fc604d7f34d03c11 Mon Sep 17 00:00:00 2001
From: peak3d <pfau@peak3d.de>
Date: Wed, 23 Jan 2019 14:22:09 +0100
Subject: [PATCH 3/3] check for GL_EXT_unpack_subimage

---
 .../VideoRenderers/LinuxRendererGLES.cpp            | 13 ++++++++++++-
 1 file changed, 12 insertions(+), 1 deletion(-)

diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.cpp
index 93c8b3a0b18b..dc81d333d70f 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.cpp
@@ -264,6 +264,8 @@ void CLinuxRendererGLES::LoadPlane(CYuvPlane& plane, int type,
 
   // OpenGL ES does not support strided texture input.
   GLint pixelStore = -1;
+  unsigned int pixelStoreKey = -1;
+
   if (stride != static_cast<int>(width * bps))
   {
 #if HAS_GLES >= 3
@@ -274,6 +276,15 @@ void CLinuxRendererGLES::LoadPlane(CYuvPlane& plane, int type,
     {
       glGetIntegerv(GL_UNPACK_ROW_LENGTH, &pixelStore);
       glPixelStorei(GL_UNPACK_ROW_LENGTH, stride);
+      pixelStoreKey = GL_UNPACK_ROW_LENGTH;
+    }
+    else
+#elif defined (GL_UNPACK_ROW_LENGTH_EXT)
+    if (m_pRenderSystem->IsExtSupported("GL_EXT_unpack_subimage"))
+    {
+      glGetIntegerv(GL_UNPACK_ROW_LENGTH_EXT, &pixelStore);
+      glPixelStorei(GL_UNPACK_ROW_LENGTH_EXT, stride);
+      pixelStoreKey = GL_UNPACK_ROW_LENGTH_EXT;
     }
     else
 #endif
@@ -290,7 +301,7 @@ void CLinuxRendererGLES::LoadPlane(CYuvPlane& plane, int type,
   glTexSubImage2D(m_textureTarget, 0, 0, 0, width, height, type, GL_UNSIGNED_BYTE, pixelData);
 
   if (pixelStore >= 0)
-    glPixelStorei(GL_UNPACK_ROW_LENGTH, pixelStore);
+    glPixelStorei(pixelStoreKey, pixelStore);
 
   // check if we need to load any border pixels
   if (height < plane.texheight)
