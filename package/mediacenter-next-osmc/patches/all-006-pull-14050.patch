From 71081d5bcda7f837f6f0e200e09e101ba96a5c2d Mon Sep 17 00:00:00 2001
From: GTechAlpha <31323818+GTechAlpha@users.noreply.github.com>
Date: Sun, 3 Jun 2018 20:23:05 -0500
Subject: [PATCH] [RetroPlayer] Set aml gpu to ignore alpha channel when
 appropriate

---
 xbmc/cores/RetroPlayer/process/RPProcessInfo.h     |  9 +++
 .../process/amlogic/RPProcessInfoAmlogic.cpp       | 21 +++++++
 .../process/amlogic/RPProcessInfoAmlogic.h         |  4 ++
 .../RetroPlayer/rendering/RPRenderManager.cpp      |  5 ++
 xbmc/utils/AMLUtils.cpp                            | 72 ++++++++++++++++++++++
 xbmc/utils/AMLUtils.h                              |  5 +-
 6 files changed, 115 insertions(+), 1 deletion(-)

diff --git a/xbmc/cores/RetroPlayer/process/RPProcessInfo.h b/xbmc/cores/RetroPlayer/process/RPProcessInfo.h
index 74c8f83e1ba4..6a3f99a7ca3a 100644
--- a/xbmc/cores/RetroPlayer/process/RPProcessInfo.h
+++ b/xbmc/cores/RetroPlayer/process/RPProcessInfo.h
@@ -150,6 +150,15 @@ namespace RETRO
      * \brief Get the default scaling method for this rendering system
      */
     SCALINGMETHOD GetDefaultScalingMethod() const { return m_defaultScalingMethod; }
+
+    /*!
+     * \brief Configure the render system
+     *
+     * \param format The pixel format of the video stream, or AV_PIX_FMT_NONE
+     *        if the stream has ended
+     */
+    virtual void ConfigureRenderSystem(AVPixelFormat format) { }
+
     ///}
 
     /// @name Player video info
diff --git a/xbmc/cores/RetroPlayer/process/amlogic/RPProcessInfoAmlogic.cpp b/xbmc/cores/RetroPlayer/process/amlogic/RPProcessInfoAmlogic.cpp
index 6960e4fcffb0..42a31f74e57c 100644
--- a/xbmc/cores/RetroPlayer/process/amlogic/RPProcessInfoAmlogic.cpp
+++ b/xbmc/cores/RetroPlayer/process/amlogic/RPProcessInfoAmlogic.cpp
@@ -19,6 +19,8 @@
  */
 
 #include "RPProcessInfoAmlogic.h"
+#include "utils/AMLUtils.h"
+#include "utils/log.h"
 
 using namespace KODI;
 using namespace RETRO;
@@ -37,3 +39,22 @@ void CRPProcessInfoAmlogic::Register()
 {
   CRPProcessInfo::RegisterProcessControl(CRPProcessInfoAmlogic::Create);
 }
+
+void CRPProcessInfoAmlogic::ConfigureRenderSystem(AVPixelFormat format)
+{
+  if (format == AV_PIX_FMT_0RGB32 || format == AV_PIX_FMT_0BGR32)
+  {
+    /*  Set the Amlogic chip to ignore the alpha channel.
+     *  The proprietary OpenGL lib does not (currently)
+     *  handle this, potentially resulting in a black screen.
+     *  This capability is only present in S905 chips and higher.
+     */
+    if (aml_set_reg_ignore_alpha())
+      CLog::Log(LOGDEBUG, "RetroPlayer[RENDER]: Amlogic set to ignore alpha");
+  }
+  else
+  {
+    if (aml_unset_reg_ignore_alpha())
+      CLog::Log(LOGDEBUG, "RetroPlayer[RENDER]: Amlogic unset to ignore alpha");
+  }
+}
diff --git a/xbmc/cores/RetroPlayer/process/amlogic/RPProcessInfoAmlogic.h b/xbmc/cores/RetroPlayer/process/amlogic/RPProcessInfoAmlogic.h
index 8f55487f10c9..379662ca82a6 100644
--- a/xbmc/cores/RetroPlayer/process/amlogic/RPProcessInfoAmlogic.h
+++ b/xbmc/cores/RetroPlayer/process/amlogic/RPProcessInfoAmlogic.h
@@ -33,6 +33,10 @@ namespace RETRO
 
     static CRPProcessInfo* Create();
     static void Register();
+
+    // Implementation of CRPProcessInfo
+    void ConfigureRenderSystem(AVPixelFormat format) override;
+
   };
 }
 }
diff --git a/xbmc/cores/RetroPlayer/rendering/RPRenderManager.cpp b/xbmc/cores/RetroPlayer/rendering/RPRenderManager.cpp
index 4be278e3bb51..fba66a036fd8 100644
--- a/xbmc/cores/RetroPlayer/rendering/RPRenderManager.cpp
+++ b/xbmc/cores/RetroPlayer/rendering/RPRenderManager.cpp
@@ -64,6 +64,9 @@ void CRPRenderManager::Deinitialize()
 {
   CLog::Log(LOGDEBUG, "RetroPlayer[RENDER]: Deinitializing render manager");
 
+  // Required to reset Amlogic chip to default state
+  m_processInfo.ConfigureRenderSystem(AV_PIX_FMT_NONE);
+
   for (auto &pixelScaler : m_scalers)
   {
     if (pixelScaler.second != nullptr)
@@ -174,6 +177,8 @@ void CRPRenderManager::FrameMove()
 
     if (m_state == RENDER_STATE::CONFIGURING)
     {
+      m_processInfo.ConfigureRenderSystem(m_format);
+
       MESSAGING::CApplicationMessenger::GetInstance().PostMsg(TMSG_SWITCHTOFULLSCREEN);
       m_state = RENDER_STATE::CONFIGURED;
 
diff --git a/xbmc/utils/AMLUtils.cpp b/xbmc/utils/AMLUtils.cpp
index beb4cbbb6679..8a000ef1dd25 100644
--- a/xbmc/utils/AMLUtils.cpp
+++ b/xbmc/utils/AMLUtils.cpp
@@ -700,3 +700,75 @@ void aml_set_framebuffer_resolution(int width, int height, std::string framebuff
     close(fd0);
   }
 }
+
+bool aml_read_reg(const std::string &reg, uint32_t &reg_val)
+{
+  std::string path = "/sys/kernel/debug/aml_reg/paddr";
+  if (SysfsUtils::Has(path))
+  {
+    if (SysfsUtils::SetString(path, reg) == 0)
+    {
+      std::string val;
+      if (SysfsUtils::GetString(path, val) == 0)
+      {
+        CRegExp regexp;
+        regexp.RegComp("\\[0x(?<reg>.+)\\][\\s]+=[\\s]+(?<val>.+)");
+        if (regexp.RegFind(val) == 0)
+        {
+          std::string match;
+          if (regexp.GetNamedSubPattern("reg", match))
+          {
+            if (match == reg)
+            {
+              if (regexp.GetNamedSubPattern("val", match))
+              {
+                try
+                {
+                  reg_val = std::stoul(match, 0, 16);
+                  return true;
+                }
+                catch (...) {}
+              }
+            }
+          }
+        }
+      }
+    }
+  }
+  return false;
+}
+
+bool aml_has_capability_ignore_alpha()
+{
+  // AML is at least GXBB
+  uint32_t reg_val;
+  if (aml_read_reg("c8100220", reg_val))
+  {
+    if ((reg_val >> 24) >= 0x1f)
+      return true;
+  }
+  return false;
+}
+
+bool aml_set_reg_ignore_alpha()
+{
+  if (aml_has_capability_ignore_alpha())
+  {
+    std::string path = "/sys/kernel/debug/aml_reg/paddr";
+    if (SysfsUtils::SetString(path, "d01068b4 0x7fc0") == 0)
+      return true;
+  }
+  return false;
+}
+
+bool aml_unset_reg_ignore_alpha()
+{
+  if (aml_has_capability_ignore_alpha())
+  {
+    std::string path = "/sys/kernel/debug/aml_reg/paddr";
+    if (SysfsUtils::SetString(path, "d01068b4 0x3fc0") == 0)
+      return true;
+  }
+  return false;
+}
+
diff --git a/xbmc/utils/AMLUtils.h b/xbmc/utils/AMLUtils.h
index 78955e02288b..106cead21b3c 100644
--- a/xbmc/utils/AMLUtils.h
+++ b/xbmc/utils/AMLUtils.h
@@ -77,4 +77,7 @@ void aml_enable_freeScale(const RESOLUTION_INFO &res);
 void aml_disable_freeScale();
 void aml_set_framebuffer_resolution(const RESOLUTION_INFO &res, std::string framebuffer_name);
 void aml_set_framebuffer_resolution(int width, int height, std::string framebuffer_name);
-
+bool aml_read_reg(const std::string &reg, uint32_t &reg_val);
+bool aml_has_capability_ignore_alpha();
+bool aml_set_reg_ignore_alpha();
+bool aml_unset_reg_ignore_alpha();
