From 7f44ab5b47c8dcce3d6c8085813de173831b0983 Mon Sep 17 00:00:00 2001
From: Kai Sommerfeld <kai.sommerfeld@gmx.com>
Date: Mon, 20 May 2019 12:48:35 +0200
Subject: [PATCH 1/2] [PVR] CPVRGUIFirectory: obey coding guidelines.

---
 xbmc/pvr/PVRGUIDirectory.cpp | 225 ++++++++++++++++++-----------------
 xbmc/pvr/PVRGUIDirectory.h   |   2 +-
 2 files changed, 115 insertions(+), 112 deletions(-)

diff --git a/xbmc/pvr/PVRGUIDirectory.cpp b/xbmc/pvr/PVRGUIDirectory.cpp
index 0d725330d7fb..d8d0acfd76ac 100644
--- a/xbmc/pvr/PVRGUIDirectory.cpp
+++ b/xbmc/pvr/PVRGUIDirectory.cpp
@@ -136,86 +136,88 @@ bool CPVRGUIDirectory::HasDeletedRadioRecordings()
 
 namespace
 {
-  std::string TrimSlashes(const std::string& strOrig)
-  {
-    std::string strReturn = strOrig;
-    while (strReturn[0] == '/')
-      strReturn.erase(0, 1);
 
-    URIUtils::RemoveSlashAtEnd(strReturn);
-    return strReturn;
-  }
+std::string TrimSlashes(const std::string& strOrig)
+{
+  std::string strReturn = strOrig;
+  while (strReturn[0] == '/')
+    strReturn.erase(0, 1);
 
-  bool IsDirectoryMember(const std::string& strDirectory,
-                         const std::string& strEntryDirectory,
-                         bool bGrouped)
-  {
-    const std::string strUseDirectory = TrimSlashes(strDirectory);
-    const std::string strUseEntryDirectory = TrimSlashes(strEntryDirectory);
+  URIUtils::RemoveSlashAtEnd(strReturn);
+  return strReturn;
+}
 
-    // Case-insensitive comparison since sub folders are created with case-insensitive matching (GetSubDirectories)
-    if (bGrouped)
-      return StringUtils::EqualsNoCase(strUseDirectory, strUseEntryDirectory);
-    else
-      return StringUtils::StartsWithNoCase(strUseEntryDirectory, strUseDirectory);
-  }
+bool IsDirectoryMember(const std::string& strDirectory,
+                       const std::string& strEntryDirectory,
+                       bool bGrouped)
+{
+  const std::string strUseDirectory = TrimSlashes(strDirectory);
+  const std::string strUseEntryDirectory = TrimSlashes(strEntryDirectory);
 
-  void GetSubDirectories(const CPVRRecordingsPath& recParentPath,
-                         CVideoDatabase& videoDB,
-                         const std::vector<std::shared_ptr<CPVRRecording>>& recordings,
-                         CFileItemList& results)
-  {
-    // Only active recordings are fetched to provide sub directories.
-    // Not applicable for deleted view which is supposed to be flattened.
-    std::set<std::shared_ptr<CFileItem>> unwatchedFolders;
-    bool bRadio = recParentPath.IsRadio();
+  // Case-insensitive comparison since sub folders are created with case-insensitive matching (GetSubDirectories)
+  if (bGrouped)
+    return StringUtils::EqualsNoCase(strUseDirectory, strUseEntryDirectory);
+  else
+    return StringUtils::StartsWithNoCase(strUseEntryDirectory, strUseDirectory);
+}
 
-    for (const auto& recording : recordings)
-    {
-      if (recording->IsDeleted())
-        continue;
+void GetSubDirectories(const CPVRRecordingsPath& recParentPath,
+                       CVideoDatabase& videoDB,
+                       const std::vector<std::shared_ptr<CPVRRecording>>& recordings,
+                       CFileItemList& results)
+{
+  // Only active recordings are fetched to provide sub directories.
+  // Not applicable for deleted view which is supposed to be flattened.
+  std::set<std::shared_ptr<CFileItem>> unwatchedFolders;
+  bool bRadio = recParentPath.IsRadio();
 
-      if (recording->IsRadio() != bRadio)
-        continue;
+  for (const auto& recording : recordings)
+  {
+    if (recording->IsDeleted())
+      continue;
 
-      const std::string strCurrent = recParentPath.GetUnescapedSubDirectoryPath(recording->m_strDirectory);
-      if (strCurrent.empty())
-        continue;
+    if (recording->IsRadio() != bRadio)
+      continue;
 
-      CPVRRecordingsPath recChildPath(recParentPath);
-      recChildPath.AppendSegment(strCurrent);
-      const std::string strFilePath = recChildPath;
+    const std::string strCurrent = recParentPath.GetUnescapedSubDirectoryPath(recording->m_strDirectory);
+    if (strCurrent.empty())
+      continue;
 
-      recording->UpdateMetadata(videoDB);
+    CPVRRecordingsPath recChildPath(recParentPath);
+    recChildPath.AppendSegment(strCurrent);
+    const std::string strFilePath = recChildPath;
 
-      std::shared_ptr<CFileItem> item;
-      if (!results.Contains(strFilePath))
-      {
-        item.reset(new CFileItem(strCurrent, true));
-        item->SetPath(strFilePath);
-        item->SetLabel(strCurrent);
-        item->SetLabelPreformatted(true);
-        item->m_dateTime = recording->RecordingTimeAsLocalTime();
+    recording->UpdateMetadata(videoDB);
 
-        // Assume all folders are watched, we'll change the overlay later
-        item->SetOverlayImage(CGUIListItem::ICON_OVERLAY_WATCHED, false);
-        results.Add(item);
-      }
-      else
-      {
-        item = results.Get(strFilePath);
-        if (item->m_dateTime < recording->RecordingTimeAsLocalTime())
-          item->m_dateTime = recording->RecordingTimeAsLocalTime();
-      }
+    std::shared_ptr<CFileItem> item;
+    if (!results.Contains(strFilePath))
+    {
+      item.reset(new CFileItem(strCurrent, true));
+      item->SetPath(strFilePath);
+      item->SetLabel(strCurrent);
+      item->SetLabelPreformatted(true);
+      item->m_dateTime = recording->RecordingTimeAsLocalTime();
 
-      if (recording->GetPlayCount() == 0)
-        unwatchedFolders.insert(item);
+      // Assume all folders are watched, we'll change the overlay later
+      item->SetOverlayImage(CGUIListItem::ICON_OVERLAY_WATCHED, false);
+      results.Add(item);
+    }
+    else
+    {
+      item = results.Get(strFilePath);
+      if (item->m_dateTime < recording->RecordingTimeAsLocalTime())
+        item->m_dateTime = recording->RecordingTimeAsLocalTime();
     }
 
-    // Change the watched overlay to unwatched for folders containing unwatched entries
-    for (auto& item : unwatchedFolders)
-      item->SetOverlayImage(CGUIListItem::ICON_OVERLAY_UNWATCHED, false);
+    if (recording->GetPlayCount() == 0)
+      unwatchedFolders.insert(item);
   }
+
+  // Change the watched overlay to unwatched for folders containing unwatched entries
+  for (auto& item : unwatchedFolders)
+    item->SetOverlayImage(CGUIListItem::ICON_OVERLAY_UNWATCHED, false);
+}
+
 } // unnamed namespace
 
 bool CPVRGUIDirectory::GetRecordingsDirectory(CFileItemList& results) const
@@ -419,65 +421,66 @@ bool CPVRGUIDirectory::GetChannelsDirectory(CFileItemList& results) const
 
 namespace
 {
-  bool GetTimersRootDirectory(const CPVRTimersPath& path,
-                              const std::vector<std::shared_ptr<CPVRTimerInfoTag>>& timers,
-                              CFileItemList& results)
-  {
-    std::shared_ptr<CFileItem> item(new CFileItem(CPVRTimersPath::PATH_ADDTIMER, false));
-    item->SetLabel(g_localizeStrings.Get(19026)); // "Add timer..."
-    item->SetLabelPreformatted(true);
-    item->SetSpecialSort(SortSpecialOnTop);
-    item->SetIconImage("DefaultTVShows.png");
-    results.Add(item);
 
-    bool bRadio = path.IsRadio();
-    bool bRules = path.IsRules();
+bool GetTimersRootDirectory(const CPVRTimersPath& path,
+                            const std::vector<std::shared_ptr<CPVRTimerInfoTag>>& timers,
+                            CFileItemList& results)
+{
+  std::shared_ptr<CFileItem> item(new CFileItem(CPVRTimersPath::PATH_ADDTIMER, false));
+  item->SetLabel(g_localizeStrings.Get(19026)); // "Add timer..."
+  item->SetLabelPreformatted(true);
+  item->SetSpecialSort(SortSpecialOnTop);
+  item->SetIconImage("DefaultTVShows.png");
+  results.Add(item);
+
+  bool bRadio = path.IsRadio();
+  bool bRules = path.IsRules();
 
-    bool bHideDisabled = CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_PVRTIMERS_HIDEDISABLEDTIMERS);
+  bool bHideDisabled = CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_PVRTIMERS_HIDEDISABLEDTIMERS);
 
-    for (const auto& timer : timers)
+  for (const auto& timer : timers)
+  {
+    if ((bRadio == timer->m_bIsRadio || (bRules && timer->m_iClientChannelUid == PVR_TIMER_ANY_CHANNEL)) &&
+        (bRules == timer->IsTimerRule()) &&
+        (!bHideDisabled || (timer->m_state != PVR_TIMER_STATE_DISABLED)))
     {
-      if ((bRadio == timer->m_bIsRadio || (bRules && timer->m_iClientChannelUid == PVR_TIMER_ANY_CHANNEL)) &&
-          (bRules == timer->IsTimerRule()) &&
-          (!bHideDisabled || (timer->m_state != PVR_TIMER_STATE_DISABLED)))
-      {
-        item.reset(new CFileItem(timer));
-        const CPVRTimersPath timersPath(path.GetPath(), timer->m_iClientId, timer->m_iClientIndex);
-        item->SetPath(timersPath.GetPath());
-        results.Add(item);
-      }
+      item.reset(new CFileItem(timer));
+      const CPVRTimersPath timersPath(path.GetPath(), timer->m_iClientId, timer->m_iClientIndex);
+      item->SetPath(timersPath.GetPath());
+      results.Add(item);
     }
-    return true;
   }
+  return true;
+}
 
-  bool GetTimersSubDirectory(const CPVRTimersPath& path,
-                             const std::vector<std::shared_ptr<CPVRTimerInfoTag>>& timers,
-                             CFileItemList& results)
-  {
-    bool bRadio = path.IsRadio();
-    int iParentId = path.GetParentId();
-    int iClientId = path.GetClientId();
+bool GetTimersSubDirectory(const CPVRTimersPath& path,
+                           const std::vector<std::shared_ptr<CPVRTimerInfoTag>>& timers,
+                           CFileItemList& results)
+{
+  bool bRadio = path.IsRadio();
+  int iParentId = path.GetParentId();
+  int iClientId = path.GetClientId();
 
-    bool bHideDisabled = CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_PVRTIMERS_HIDEDISABLEDTIMERS);
+  bool bHideDisabled = CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_PVRTIMERS_HIDEDISABLEDTIMERS);
 
-    std::shared_ptr<CFileItem> item;
+  std::shared_ptr<CFileItem> item;
 
-    for (const auto& timer : timers)
+  for (const auto& timer : timers)
+  {
+    if ((timer->m_bIsRadio == bRadio) &&
+        (timer->m_iParentClientIndex != PVR_TIMER_NO_PARENT) &&
+        (timer->m_iClientId == iClientId) &&
+        (timer->m_iParentClientIndex == iParentId) &&
+        (!bHideDisabled || (timer->m_state != PVR_TIMER_STATE_DISABLED)))
     {
-      if ((timer->m_bIsRadio == bRadio) &&
-          (timer->m_iParentClientIndex != PVR_TIMER_NO_PARENT) &&
-          (timer->m_iClientId == iClientId) &&
-          (timer->m_iParentClientIndex == iParentId) &&
-          (!bHideDisabled || (timer->m_state != PVR_TIMER_STATE_DISABLED)))
-      {
-        item.reset(new CFileItem(timer));
-        const CPVRTimersPath timersPath(path.GetPath(), timer->m_iClientId, timer->m_iClientIndex);
-        item->SetPath(timersPath.GetPath());
-        results.Add(item);
-      }
+      item.reset(new CFileItem(timer));
+      const CPVRTimersPath timersPath(path.GetPath(), timer->m_iClientId, timer->m_iClientIndex);
+      item->SetPath(timersPath.GetPath());
+      results.Add(item);
     }
-    return true;
   }
+  return true;
+}
 
 } // unnamed namespace
 
diff --git a/xbmc/pvr/PVRGUIDirectory.h b/xbmc/pvr/PVRGUIDirectory.h
index 210f8da9037d..86d83fea31fd 100644
--- a/xbmc/pvr/PVRGUIDirectory.h
+++ b/xbmc/pvr/PVRGUIDirectory.h
@@ -80,7 +80,7 @@ class CPVRGUIDirectory
 
 private:
 
-  bool FilterDirectory(CFileItemList &results) const;
+  bool FilterDirectory(CFileItemList& results) const;
 
   bool GetChannelGroupsDirectory(bool bRadio, CFileItemList& results) const;
   bool GetChannelsDirectory(CFileItemList& results) const;

From c8dd45d00a2413e833041b4290bbaaa128b2f030 Mon Sep 17 00:00:00 2001
From: Kai Sommerfeld <kai.sommerfeld@gmx.com>
Date: Mon, 20 May 2019 12:54:10 +0200
Subject: [PATCH 2/2] [PVR] Change CPVRTimersPath::m_iParentId type from
 'unsigned int' to 'int'.

---
 xbmc/pvr/timers/PVRTimersPath.cpp | 4 ++--
 xbmc/pvr/timers/PVRTimersPath.h   | 6 +++---
 2 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/xbmc/pvr/timers/PVRTimersPath.cpp b/xbmc/pvr/timers/PVRTimersPath.cpp
index 43c6ea03e7fe..460b0a5a1561 100644
--- a/xbmc/pvr/timers/PVRTimersPath.cpp
+++ b/xbmc/pvr/timers/PVRTimersPath.cpp
@@ -24,7 +24,7 @@ CPVRTimersPath::CPVRTimersPath(const std::string& strPath)
   Init(strPath);
 }
 
-CPVRTimersPath::CPVRTimersPath(const std::string& strPath, int iClientId, unsigned int iParentId)
+CPVRTimersPath::CPVRTimersPath(const std::string& strPath, int iClientId, int iParentId)
 {
   if (Init(strPath))
   {
@@ -76,7 +76,7 @@ bool CPVRTimersPath::Init(const std::string& strPath)
   else
   {
     m_iClientId = std::stoi(segments.at(4));
-    m_iParentId = std::stoul(segments.at(5));
+    m_iParentId = std::stoi(segments.at(5));
   }
 
   return m_bValid;
diff --git a/xbmc/pvr/timers/PVRTimersPath.h b/xbmc/pvr/timers/PVRTimersPath.h
index f3e6584f61e7..11a54fb17b2e 100644
--- a/xbmc/pvr/timers/PVRTimersPath.h
+++ b/xbmc/pvr/timers/PVRTimersPath.h
@@ -19,7 +19,7 @@ namespace PVR
     static const std::string PATH_NEW;
 
     explicit CPVRTimersPath(const std::string& strPath);
-    CPVRTimersPath(const std::string& strPath, int iClientId, unsigned int iParentId);
+    CPVRTimersPath(const std::string& strPath, int iClientId, int iParentId);
     CPVRTimersPath(bool bRadio, bool bTimerRules);
 
     bool IsValid() const { return m_bValid; }
@@ -30,7 +30,7 @@ namespace PVR
     bool IsRadio() const { return m_bRadio; }
     bool IsRules() const { return m_bTimerRules; }
     int GetClientId() const { return m_iClientId; }
-    unsigned int GetParentId() const { return m_iParentId; }
+    int GetParentId() const { return m_iParentId; }
 
   private:
     bool Init(const std::string &strPath);
@@ -41,6 +41,6 @@ namespace PVR
     bool m_bRadio = false;
     bool m_bTimerRules = false;
     int m_iClientId = -1;
-    unsigned int m_iParentId = 0;
+    int m_iParentId = 0;
   };
 }
