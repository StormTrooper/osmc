From 94afc9ac25316580858a29827187e00ef2e7f4dc Mon Sep 17 00:00:00 2001
From: djp952 <djp952@gmail.com>
Date: Tue, 7 Jan 2020 17:26:56 -0500
Subject: [PATCH] [PVR] Add support for firstAired tag via PVR Recordings

---
 .../include/kodi/xbmc_pvr_types.h                   |  2 ++
 xbmc/pvr/addons/PVRClient.cpp                       |  3 +++
 xbmc/pvr/guilib/guiinfo/PVRGUIInfo.cpp              | 13 +++++++++++++
 xbmc/pvr/recordings/PVRRecording.cpp                | 11 ++++++++++-
 xbmc/pvr/recordings/PVRRecording.h                  |  6 ++++++
 5 files changed, 34 insertions(+), 1 deletion(-)

diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h
index 6588dc3e5eed..eb3b9f69c09e 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h
@@ -59,6 +59,7 @@ struct DemuxPacket;
 #define PVR_ADDON_ATTRIBUTE_DESC_LENGTH       128
 #define PVR_ADDON_ATTRIBUTE_VALUES_ARRAY_SIZE 512
 #define PVR_ADDON_DESCRAMBLE_INFO_STRING_LENGTH 64
+#define PVR_ADDON_DATE_STRING_LENGTH          32
 
 #define XBMC_INVALID_CODEC_ID   0
 #define XBMC_INVALID_CODEC      { XBMC_CODEC_TYPE_UNKNOWN, XBMC_INVALID_CODEC_ID }
@@ -556,6 +557,7 @@ extern "C" {
     unsigned int iEpgEventId;                             /*!< @brief (optional) EPG event id associated with this recording. Valid ids must be greater than EPG_TAG_INVALID_UID. */
     int    iChannelUid;                                   /*!< @brief (optional) unique identifier of the channel for this recording. PVR_CHANNEL_INVALID_UID denotes that channel uid is not available. */
     PVR_RECORDING_CHANNEL_TYPE channelType;               /*!< @brief (optional) channel type. Set to PVR_RECORDING_CHANNEL_TYPE_UNKNOWN if the type cannot be determined. */
+    char   strFirstAired[PVR_ADDON_DATE_STRING_LENGTH];   /*!< @brief (optional) first aired date of this recording. Used only for display purposes. Specify in W3C date format "YYYY-MM-DD". */
   } ATTRIBUTE_PACKED PVR_RECORDING;
 
   /*!
diff --git a/xbmc/pvr/addons/PVRClient.cpp b/xbmc/pvr/addons/PVRClient.cpp
index e00534d8c17b..5eacb35c8563 100644
--- a/xbmc/pvr/addons/PVRClient.cpp
+++ b/xbmc/pvr/addons/PVRClient.cpp
@@ -301,6 +301,9 @@ void CPVRClient::WriteClientRecordingInfo(const CPVRRecording& xbmcRecording, PV
   addonRecording.bIsDeleted = xbmcRecording.IsDeleted();
   addonRecording.iChannelUid = xbmcRecording.ChannelUid();
   addonRecording.channelType = xbmcRecording.IsRadio() ? PVR_RECORDING_CHANNEL_TYPE_RADIO : PVR_RECORDING_CHANNEL_TYPE_TV;
+  if (xbmcRecording.FirstAired().IsValid())
+    strncpy(addonRecording.strFirstAired, xbmcRecording.FirstAired().GetAsW3CDate().c_str(),
+            sizeof(addonRecording.strFirstAired) - 1);
 }
 
 /*!
diff --git a/xbmc/pvr/guilib/guiinfo/PVRGUIInfo.cpp b/xbmc/pvr/guilib/guiinfo/PVRGUIInfo.cpp
index f41a073ff7f5..3ca96fe130b5 100644
--- a/xbmc/pvr/guilib/guiinfo/PVRGUIInfo.cpp
+++ b/xbmc/pvr/guilib/guiinfo/PVRGUIInfo.cpp
@@ -426,6 +426,19 @@ bool CPVRGUIInfo::GetListItemAndPlayerLabel(const CFileItem* item, const CGUIInf
         strValue = recording->IsRadio() ? m_strPlayingRadioGroup : m_strPlayingTVGroup;
         return true;
       }
+      case VIDEOPLAYER_PREMIERED:
+      case LISTITEM_PREMIERED:
+        if (recording->FirstAired().IsValid())
+        {
+          strValue = recording->FirstAired().GetAsLocalizedDate(true);
+          return true;
+        }
+        else if (recording->HasYear())
+        {
+          strValue = StringUtils::Format("%i", recording->GetYear());
+          return true;
+        }
+        return false;
     }
     return false;
   }
diff --git a/xbmc/pvr/recordings/PVRRecording.cpp b/xbmc/pvr/recordings/PVRRecording.cpp
index 22672cbd8748..e686bbb7b26f 100644
--- a/xbmc/pvr/recordings/PVRRecording.cpp
+++ b/xbmc/pvr/recordings/PVRRecording.cpp
@@ -94,6 +94,8 @@ CPVRRecording::CPVRRecording(const PVR_RECORDING& recording, unsigned int iClien
   m_bIsDeleted = recording.bIsDeleted;
   m_iEpgEventId = recording.iEpgEventId;
   m_iChannelUid = recording.iChannelUid;
+  if (strlen(recording.strFirstAired) > 0)
+    m_firstAired.SetFromW3CDateTime(recording.strFirstAired);
 
   SetGenre(recording.iGenreType, recording.iGenreSubType, recording.strGenreDescription);
   CVideoInfoTag::SetPlayCount(recording.iPlayCount);
@@ -159,7 +161,8 @@ bool CPVRRecording::operator ==(const CPVRRecording& right) const
        m_bRadio == right.m_bRadio &&
        m_genre == right.m_genre &&
        m_iGenreType == right.m_iGenreType &&
-       m_iGenreSubType == right.m_iGenreSubType);
+       m_iGenreSubType == right.m_iGenreSubType &&
+       m_firstAired == right.m_firstAired);
 }
 
 bool CPVRRecording::operator !=(const CPVRRecording& right) const
@@ -362,6 +365,7 @@ void CPVRRecording::Update(const CPVRRecording& tag)
   m_iEpgEventId = tag.m_iEpgEventId;
   m_iChannelUid = tag.m_iChannelUid;
   m_bRadio = tag.m_bRadio;
+  m_firstAired = tag.m_firstAired;
 
   CVideoInfoTag::SetPlayCount(tag.GetLocalPlayCount());
   CVideoInfoTag::SetResumePoint(tag.GetLocalResumePoint());
@@ -520,3 +524,8 @@ const std::string CPVRRecording::GetGenresLabel() const
 {
   return StringUtils::Join(m_genre, CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->m_videoItemSeparator);
 }
+
+CDateTime CPVRRecording::FirstAired() const
+{
+  return m_firstAired;
+}
diff --git a/xbmc/pvr/recordings/PVRRecording.h b/xbmc/pvr/recordings/PVRRecording.h
index a64ec1fed09e..2354f0636207 100644
--- a/xbmc/pvr/recordings/PVRRecording.h
+++ b/xbmc/pvr/recordings/PVRRecording.h
@@ -317,6 +317,12 @@ namespace PVR
      */
    const std::string GetGenresLabel() const;
 
+   /*!
+    * @brief Get the first air date of this event.
+    * @return The first air date.
+    */
+   CDateTime FirstAired() const;
+
   private:
     CDateTime m_recordingTime; /*!< start time of the recording */
     bool m_bGotMetaData;
