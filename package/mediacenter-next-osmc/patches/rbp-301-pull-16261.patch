From 68e062bfc5ceef2e905e006bbb4c574b57dee9f3 Mon Sep 17 00:00:00 2001
From: Lukas Rusak <lorusak@gmail.com>
Date: Fri, 31 May 2019 21:58:29 -0700
Subject: [PATCH] remove g_mediaManager global

---
 xbmc/Application.cpp                          | 13 ++++-----
 xbmc/Autorun.cpp                              | 23 ++++++++-------
 xbmc/ContextMenus.cpp                         |  5 ++--
 xbmc/ServiceBroker.cpp                        |  5 ++++
 xbmc/ServiceBroker.h                          |  2 ++
 xbmc/ServiceManager.cpp                       | 12 ++++++++
 xbmc/ServiceManager.h                         |  4 +++
 xbmc/Util.cpp                                 |  4 +--
 xbmc/addons/GUIWindowAddonBrowser.cpp         |  4 +--
 .../interfaces/GUI/dialogs/FileBrowser.cpp    |  6 ++--
 xbmc/cdrip/CDDARipJob.cpp                     |  2 +-
 xbmc/cdrip/CDDARipper.cpp                     |  2 +-
 .../DVDInputStreams/DVDFactoryInputStream.cpp |  2 +-
 xbmc/cores/VideoPlayer/VideoPlayer.cpp        |  2 +-
 xbmc/dialogs/GUIDialogContextMenu.cpp         |  7 +++--
 xbmc/dialogs/GUIDialogFileBrowser.cpp         | 18 ++++++------
 xbmc/dialogs/GUIDialogPlayEject.cpp           |  8 +++---
 xbmc/dialogs/GUIDialogSmartPlaylistRule.cpp   |  2 +-
 xbmc/favourites/GUIDialogFavourites.cpp       |  2 +-
 xbmc/filesystem/CDDADirectory.cpp             |  5 ++--
 xbmc/filesystem/CDDAFile.cpp                  | 11 +++++---
 xbmc/filesystem/SourcesDirectory.cpp          |  2 +-
 xbmc/filesystem/VirtualDirectory.cpp          | 11 ++++----
 xbmc/guilib/guiinfo/SystemGUIInfo.cpp         | 12 ++++----
 xbmc/interfaces/builtins/LibraryBuiltins.cpp  |  6 ++--
 xbmc/interfaces/builtins/OpticalBuiltins.cpp  |  4 ++-
 xbmc/interfaces/builtins/PlayerBuiltins.cpp   |  2 +-
 xbmc/interfaces/builtins/SkinBuiltins.cpp     |  8 +++---
 xbmc/interfaces/legacy/Dialog.cpp             | 12 ++++----
 xbmc/interfaces/legacy/ModuleXbmc.cpp         |  2 +-
 xbmc/music/MusicDatabase.cpp                  |  2 +-
 .../dialogs/GUIDialogInfoProviderSettings.cpp |  6 ++--
 xbmc/music/dialogs/GUIDialogMusicInfo.cpp     |  2 +-
 xbmc/music/dialogs/GUIDialogSongInfo.cpp      |  2 +-
 xbmc/music/tags/MusicInfoTagLoaderCDDA.cpp    |  2 +-
 xbmc/music/windows/GUIWindowMusicBase.cpp     | 20 ++++++-------
 xbmc/music/windows/GUIWindowMusicNav.cpp      |  4 +--
 .../win10/storage/Win10StorageProvider.cpp    |  3 +-
 xbmc/platform/win32/WIN32Util.cpp             | 28 +++++++++++--------
 .../win32/storage/Win32StorageProvider.cpp    | 13 +++++----
 .../dialogs/GUIDialogProfileSettings.cpp      |  2 +-
 .../dialogs/GUIDialogPVRChannelManager.cpp    |  2 +-
 xbmc/settings/DisplaySettings.cpp             |  4 +--
 xbmc/settings/MediaSettings.cpp               | 12 ++++----
 .../dialogs/GUIDialogLibExportSettings.cpp    |  6 ++--
 xbmc/settings/windows/GUIControlSettings.cpp  |  4 +--
 xbmc/storage/IoSupport.cpp                    |  4 ++-
 xbmc/storage/MediaManager.cpp                 | 16 +++++------
 xbmc/storage/MediaManager.h                   |  3 --
 xbmc/utils/FileUtils.cpp                      |  3 +-
 xbmc/video/VideoDatabase.cpp                  |  4 +--
 xbmc/video/dialogs/GUIDialogVideoInfo.cpp     |  8 +++---
 xbmc/video/windows/GUIWindowVideoBase.cpp     |  3 +-
 xbmc/windowing/windows/WinEventsWin32.cpp     |  2 +-
 xbmc/windows/GUIMediaWindow.cpp               |  4 +--
 xbmc/windows/GUIWindowFileManager.cpp         |  4 +--
 xbmc/windows/GUIWindowSystemInfo.cpp          |  2 +-
 57 files changed, 201 insertions(+), 162 deletions(-)

diff --git a/xbmc/Application.cpp b/xbmc/Application.cpp
index 8ab70356c9c3..3dbe288631a1 100644
--- a/xbmc/Application.cpp
+++ b/xbmc/Application.cpp
@@ -594,8 +594,6 @@ bool CApplication::Create(const CAppParamParser &params)
 
   CUtil::InitRandomSeed();
 
-  g_mediaManager.Initialize();
-
   m_lastRenderTime = XbmcThreads::SystemClockMillis();
   return true;
 }
@@ -2600,8 +2598,6 @@ void CApplication::Stop(int exitCode)
       XBMCHelper::GetInstance().Stop();
 #endif
 
-    g_mediaManager.Stop();
-
     // Stop services before unloading Python
     CServiceBroker::GetServiceAddons().Stop();
 
@@ -2760,7 +2756,7 @@ bool CApplication::PlayFile(CFileItem item, const std::string& player, bool bRes
   {
 #ifdef HAS_DVD_DRIVE
     // Display the Play Eject dialog if there is any optical disc drive
-    if (g_mediaManager.HasOpticalDrive())
+    if (CServiceBroker::GetMediaManager().HasOpticalDrive())
     {
       if (CGUIDialogPlayEject::ShowAndGetInput(item))
         // PlayDiscAskResume takes path to disc. No parameter means default DVD drive.
@@ -2998,7 +2994,10 @@ void CApplication::PlaybackCleanup()
   }
 
   // DVD ejected while playing in vis ?
-  if (!m_appPlayer.IsPlayingAudio() && (m_itemCurrentFile->IsCDDA() || m_itemCurrentFile->IsOnDVD()) && !g_mediaManager.IsDiscInDrive() && CServiceBroker::GetGUI()->GetWindowManager().GetActiveWindow() == WINDOW_VISUALISATION)
+  if (!m_appPlayer.IsPlayingAudio() &&
+      (m_itemCurrentFile->IsCDDA() || m_itemCurrentFile->IsOnDVD()) &&
+      !CServiceBroker::GetMediaManager().IsDiscInDrive() &&
+      CServiceBroker::GetGUI()->GetWindowManager().GetActiveWindow() == WINDOW_VISUALISATION)
   {
     // yes, disable vis
     CServiceBroker::GetSettingsComponent()->GetSettings()->Save();    // save vis settings
@@ -4168,7 +4167,7 @@ void CApplication::ProcessSlow()
   for (const auto& vfsAddon : CServiceBroker::GetVFSAddonCache().GetAddonInstances())
     vfsAddon->ClearOutIdle();
 
-  g_mediaManager.ProcessEvents();
+  CServiceBroker::GetMediaManager().ProcessEvents();
 
   // if we don't render the gui there's no reason to start the screensaver.
   // that way the screensaver won't kick in if we maximize the XBMC window
diff --git a/xbmc/Autorun.cpp b/xbmc/Autorun.cpp
index e3ad4e1e4f37..da081ac75dbf 100644
--- a/xbmc/Autorun.cpp
+++ b/xbmc/Autorun.cpp
@@ -71,7 +71,7 @@ void CAutorun::ExecuteAutorun(const std::string& path, bool bypassSettings, bool
   if (CServiceBroker::GetGUI()->GetWindowManager().GetActiveWindow() == WINDOW_LOGIN_SCREEN)
     return;
 
-  CCdInfo* pInfo = g_mediaManager.GetCdInfo(path);
+  CCdInfo* pInfo = CServiceBroker::GetMediaManager().GetCdInfo(path);
 
   if ( pInfo == NULL )
     return ;
@@ -101,7 +101,7 @@ bool CAutorun::PlayDisc(const std::string& path, bool bypassSettings, bool start
 
   std::string mediaPath;
 
-  CCdInfo* pInfo = g_mediaManager.GetCdInfo(path);
+  CCdInfo* pInfo = CServiceBroker::GetMediaManager().GetCdInfo(path);
   if (pInfo == NULL)
     return false;
 
@@ -115,7 +115,7 @@ bool CAutorun::PlayDisc(const std::string& path, bool bypassSettings, bool start
     mediaPath = path;
 
   if (mediaPath.empty() || mediaPath == "iso9660://")
-    mediaPath = g_mediaManager.GetDiscPath();
+    mediaPath = CServiceBroker::GetMediaManager().GetDiscPath();
 
   const CURL pathToUrl(mediaPath);
   std::unique_ptr<IDirectory> pDir ( CDirectoryFactory::Create( pathToUrl ));
@@ -187,8 +187,9 @@ bool CAutorun::RunDisc(IDirectory* pDir, const std::string& strDrive, int& nAdde
           if(!CFile::Exists(path))
             path = URIUtils::AddFileToFolder(pItem->GetPath(), "video_ts.ifo");
           CFileItemPtr item(new CFileItem(path, false));
-          item->SetLabel(g_mediaManager.GetDiskLabel(strDrive));
-          item->GetVideoInfoTag()->m_strFileNameAndPath = g_mediaManager.GetDiskUniqueId(strDrive);
+          item->SetLabel(CServiceBroker::GetMediaManager().GetDiskLabel(strDrive));
+          item->GetVideoInfoTag()->m_strFileNameAndPath =
+              CServiceBroker::GetMediaManager().GetDiskUniqueId(strDrive);
 
           if (!startFromBeginning && !item->GetVideoInfoTag()->m_strFileNameAndPath.empty())
             item->m_lStartOffset = STARTOFFSET_RESUME;
@@ -208,8 +209,9 @@ bool CAutorun::RunDisc(IDirectory* pDir, const std::string& strDrive, int& nAdde
         && (bypassSettings || bAutorunDVDs))
         {
           CFileItemPtr item(new CFileItem(URIUtils::AddFileToFolder(pItem->GetPath(), "index.bdmv"), false));
-          item->SetLabel(g_mediaManager.GetDiskLabel(strDrive));
-          item->GetVideoInfoTag()->m_strFileNameAndPath = g_mediaManager.GetDiskUniqueId(strDrive);
+          item->SetLabel(CServiceBroker::GetMediaManager().GetDiskLabel(strDrive));
+          item->GetVideoInfoTag()->m_strFileNameAndPath =
+              CServiceBroker::GetMediaManager().GetDiskUniqueId(strDrive);
 
           if (!startFromBeginning && !item->GetVideoInfoTag()->m_strFileNameAndPath.empty())
             item->m_lStartOffset = STARTOFFSET_RESUME;
@@ -300,8 +302,9 @@ bool CAutorun::RunDisc(IDirectory* pDir, const std::string& strDrive, int& nAdde
           if (hddvdname != "")
           {
             CFileItem item(URIUtils::AddFileToFolder(phddvdItem->GetPath(), hddvdname), false);
-            item.SetLabel(g_mediaManager.GetDiskLabel(strDrive));
-            item.GetVideoInfoTag()->m_strFileNameAndPath = g_mediaManager.GetDiskUniqueId(strDrive);
+            item.SetLabel(CServiceBroker::GetMediaManager().GetDiskLabel(strDrive));
+            item.GetVideoInfoTag()->m_strFileNameAndPath =
+                CServiceBroker::GetMediaManager().GetDiskUniqueId(strDrive);
 
             if (!startFromBeginning && !item.GetVideoInfoTag()->m_strFileNameAndPath.empty())
             item.m_lStartOffset = STARTOFFSET_RESUME;
@@ -506,7 +509,7 @@ bool CAutorun::PlayDiscAskResume(const std::string& path)
 
 bool CAutorun::CanResumePlayDVD(const std::string& path)
 {
-  std::string strUniqueId = g_mediaManager.GetDiskUniqueId(path);
+  std::string strUniqueId = CServiceBroker::GetMediaManager().GetDiskUniqueId(path);
   if (!strUniqueId.empty())
   {
     CVideoDatabase dbs;
diff --git a/xbmc/ContextMenus.cpp b/xbmc/ContextMenus.cpp
index c1e14621c635..ae459dcd1557 100644
--- a/xbmc/ContextMenus.cpp
+++ b/xbmc/ContextMenus.cpp
@@ -32,7 +32,8 @@ namespace CONTEXTMENU
   bool CEjectDisk::Execute(const CFileItemPtr& item) const
   {
 #ifdef HAS_DVD_DRIVE
-    g_mediaManager.ToggleTray(g_mediaManager.TranslateDevicePath(item->GetPath())[0]);
+    CServiceBroker::GetMediaManager().ToggleTray(
+        CServiceBroker::GetMediaManager().TranslateDevicePath(item->GetPath())[0]);
 #endif
     return true;
   }
@@ -45,7 +46,7 @@ namespace CONTEXTMENU
 
   bool CEjectDrive::Execute(const CFileItemPtr& item) const
   {
-    return g_mediaManager.Eject(item->GetPath());
+    return CServiceBroker::GetMediaManager().Eject(item->GetPath());
   }
 
 namespace
diff --git a/xbmc/ServiceBroker.cpp b/xbmc/ServiceBroker.cpp
index 988fc279985f..44601f3f2aa9 100644
--- a/xbmc/ServiceBroker.cpp
+++ b/xbmc/ServiceBroker.cpp
@@ -206,6 +206,11 @@ CEventLog& CServiceBroker::GetEventLog()
   return m_pSettingsComponent->GetProfileManager()->GetEventLog();
 }
 
+CMediaManager& CServiceBroker::GetMediaManager()
+{
+  return g_application.m_ServiceManager->GetMediaManager();
+}
+
 CGUIComponent* CServiceBroker::m_pGUI = nullptr;
 
 CGUIComponent* CServiceBroker::GetGUI()
diff --git a/xbmc/ServiceBroker.h b/xbmc/ServiceBroker.h
index 66a3b7eec9cd..2b89f4ad68d5 100644
--- a/xbmc/ServiceBroker.h
+++ b/xbmc/ServiceBroker.h
@@ -53,6 +53,7 @@ class CGUIComponent;
 class CAppInboundProtocol;
 class CSettingsComponent;
 class CDecoderFilterManager;
+class CMediaManager;
 
 namespace KODI
 {
@@ -106,6 +107,7 @@ class CServiceBroker
   static CPlayerCoreFactory &GetPlayerCoreFactory();
   static CDatabaseManager &GetDatabaseManager();
   static CEventLog &GetEventLog();
+  static CMediaManager& GetMediaManager();
 
   static CGUIComponent* GetGUI();
   static void RegisterGUI(CGUIComponent *gui);
diff --git a/xbmc/ServiceManager.cpp b/xbmc/ServiceManager.cpp
index 5e40e6f92acf..25c9f4190398 100644
--- a/xbmc/ServiceManager.cpp
+++ b/xbmc/ServiceManager.cpp
@@ -29,6 +29,7 @@
 #include "powermanagement/PowerManager.h"
 #include "profiles/ProfileManager.h"
 #include "pvr/PVRManager.h"
+#include "storage/MediaManager.h"
 #include "utils/FileExtensionProvider.h"
 #include "utils/log.h"
 #include "weather/WeatherManager.h"
@@ -157,6 +158,9 @@ bool CServiceManager::InitStageTwo(const CAppParamParser &params, const std::str
 
   m_weatherManager.reset(new CWeatherManager());
 
+  m_mediaManager.reset(new CMediaManager());
+  m_mediaManager->Initialize();
+
   init_level = 2;
   return true;
 }
@@ -215,6 +219,9 @@ void CServiceManager::DeinitStageTwo()
   m_addonMgr.reset();
   m_Platform.reset();
   m_databaseManager.reset();
+
+  m_mediaManager->Stop();
+  m_mediaManager.reset();
 }
 
 void CServiceManager::DeinitStageOne()
@@ -366,3 +373,8 @@ CDatabaseManager &CServiceManager::GetDatabaseManager()
 {
   return *m_databaseManager;
 }
+
+CMediaManager& CServiceManager::GetMediaManager()
+{
+  return *m_mediaManager;
+}
diff --git a/xbmc/ServiceManager.h b/xbmc/ServiceManager.h
index ee5925ee9bf2..823cd23544c4 100644
--- a/xbmc/ServiceManager.h
+++ b/xbmc/ServiceManager.h
@@ -70,6 +70,7 @@ class CPlayerCoreFactory;
 class CDatabaseManager;
 class CProfileManager;
 class CEventLog;
+class CMediaManager;
 
 class CServiceManager
 {
@@ -122,6 +123,8 @@ class CServiceManager
 
   CDatabaseManager &GetDatabaseManager();
 
+  CMediaManager& GetMediaManager();
+
 protected:
   struct delete_dataCacheCore
   {
@@ -164,4 +167,5 @@ class CServiceManager
   std::unique_ptr<CWeatherManager> m_weatherManager;
   std::unique_ptr<CPlayerCoreFactory> m_playerCoreFactory;
   std::unique_ptr<CDatabaseManager> m_databaseManager;
+  std::unique_ptr<CMediaManager> m_mediaManager;
 };
diff --git a/xbmc/Util.cpp b/xbmc/Util.cpp
index d524fea763f7..342e01b560e9 100644
--- a/xbmc/Util.cpp
+++ b/xbmc/Util.cpp
@@ -602,7 +602,7 @@ bool CUtil::GetDirectoryName(const std::string& strFileName, std::string& strDes
 
 void CUtil::GetDVDDriveIcon(const std::string& strPath, std::string& strIcon)
 {
-  if (!g_mediaManager.IsDiscInDrive(strPath))
+  if (!CServiceBroker::GetMediaManager().IsDiscInDrive(strPath))
   {
     strIcon = "DefaultDVDEmpty.png";
     return ;
@@ -625,7 +625,7 @@ void CUtil::GetDVDDriveIcon(const std::string& strPath, std::string& strIcon)
   if ( URIUtils::IsISO9660(strPath) )
   {
 #ifdef HAS_DVD_DRIVE
-    CCdInfo* pInfo = g_mediaManager.GetCdInfo();
+    CCdInfo* pInfo = CServiceBroker::GetMediaManager().GetCdInfo();
     if ( pInfo != NULL && pInfo->IsVideoCd( 1 ) )
     {
       strIcon = "DefaultVCD.png";
diff --git a/xbmc/addons/GUIWindowAddonBrowser.cpp b/xbmc/addons/GUIWindowAddonBrowser.cpp
index 82b7f9602ee9..fdd1615502ec 100644
--- a/xbmc/addons/GUIWindowAddonBrowser.cpp
+++ b/xbmc/addons/GUIWindowAddonBrowser.cpp
@@ -185,8 +185,8 @@ void CGUIWindowAddonBrowser::InstallFromZip()
   {
     // pop up filebrowser to grab an installed folder
     VECSOURCES shares = *CMediaSourceSettings::GetInstance().GetSources("files");
-    g_mediaManager.GetLocalDrives(shares);
-    g_mediaManager.GetNetworkLocations(shares);
+    CServiceBroker::GetMediaManager().GetLocalDrives(shares);
+    CServiceBroker::GetMediaManager().GetNetworkLocations(shares);
     std::string path;
     if (CGUIDialogFileBrowser::ShowAndGetFile(shares, "*.zip", g_localizeStrings.Get(24041), path))
     {
diff --git a/xbmc/addons/interfaces/GUI/dialogs/FileBrowser.cpp b/xbmc/addons/interfaces/GUI/dialogs/FileBrowser.cpp
index 7e29b75e5092..55c026ef60fd 100644
--- a/xbmc/addons/interfaces/GUI/dialogs/FileBrowser.cpp
+++ b/xbmc/addons/interfaces/GUI/dialogs/FileBrowser.cpp
@@ -296,13 +296,13 @@ void Interface_GUIDialogFileBrowser::GetVECShares(VECSOURCES& vecShares, const s
   std::size_t found;
   found = strShares.find("local");
   if (found!=std::string::npos)
-    g_mediaManager.GetLocalDrives(vecShares);
+    CServiceBroker::GetMediaManager().GetLocalDrives(vecShares);
   found = strShares.find("network");
   if (found!=std::string::npos)
-    g_mediaManager.GetNetworkLocations(vecShares);
+    CServiceBroker::GetMediaManager().GetNetworkLocations(vecShares);
   found = strShares.find("removable");
   if (found!=std::string::npos)
-    g_mediaManager.GetRemovableDrives(vecShares);
+    CServiceBroker::GetMediaManager().GetRemovableDrives(vecShares);
   found = strShares.find("programs");
   if (found!=std::string::npos)
   {
diff --git a/xbmc/cdrip/CDDARipJob.cpp b/xbmc/cdrip/CDDARipJob.cpp
index 4044553b5433..6c915dba4c14 100644
--- a/xbmc/cdrip/CDDARipJob.cpp
+++ b/xbmc/cdrip/CDDARipJob.cpp
@@ -136,7 +136,7 @@ bool CCDDARipJob::DoWork()
     if (m_eject)
     {
       CLog::Log(LOGINFO, "Ejecting CD");
-      g_mediaManager.EjectTray();
+      CServiceBroker::GetMediaManager().EjectTray();
     }
   }
 
diff --git a/xbmc/cdrip/CDDARipper.cpp b/xbmc/cdrip/CDDARipper.cpp
index 4511e9b810a2..30df47405f06 100644
--- a/xbmc/cdrip/CDDARipper.cpp
+++ b/xbmc/cdrip/CDDARipper.cpp
@@ -81,7 +81,7 @@ bool CCDDARipper::RipTrack(CFileItem* pItem)
 bool CCDDARipper::RipCD()
 {
   // return here if cd is not a CDDA disc
-  MEDIA_DETECT::CCdInfo* pInfo = g_mediaManager.GetCdInfo();
+  MEDIA_DETECT::CCdInfo* pInfo = CServiceBroker::GetMediaManager().GetCdInfo();
   if (pInfo == NULL || !pInfo->IsAudio(1))
   {
     CLog::Log(LOGDEBUG, "cddaripper: CD is not an audio cd");
diff --git a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDFactoryInputStream.cpp b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDFactoryInputStream.cpp
index 53ae88bfa9bc..801c561db55d 100644
--- a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDFactoryInputStream.cpp
+++ b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDFactoryInputStream.cpp
@@ -75,7 +75,7 @@ std::shared_ptr<CDVDInputStream> CDVDFactoryInputStream::CreateInputStream(IVide
   }
 
 #ifdef HAS_DVD_DRIVE
-  if(file.compare(g_mediaManager.TranslateDevicePath("")) == 0)
+  if (file.compare(CServiceBroker::GetMediaManager().TranslateDevicePath("")) == 0)
   {
 #ifdef HAVE_LIBBLURAY
     if(XFILE::CFile::Exists(URIUtils::AddFileToFolder(file, "BDMV", "index.bdmv"))
diff --git a/xbmc/cores/VideoPlayer/VideoPlayer.cpp b/xbmc/cores/VideoPlayer/VideoPlayer.cpp
index c6661b633c37..f7571be37f14 100644
--- a/xbmc/cores/VideoPlayer/VideoPlayer.cpp
+++ b/xbmc/cores/VideoPlayer/VideoPlayer.cpp
@@ -756,7 +756,7 @@ bool CVideoPlayer::OpenInputStream()
   if (URIUtils::IsProtocol(filename, "dvd") ||
       StringUtils::EqualsNoCase(filename, "iso9660://video_ts/video_ts.ifo"))
   {
-    m_item.SetPath(g_mediaManager.TranslateDevicePath(""));
+    m_item.SetPath(CServiceBroker::GetMediaManager().TranslateDevicePath(""));
   }
 
   m_pInputStream = CDVDFactoryInputStream::CreateInputStream(this, m_item, true);
diff --git a/xbmc/dialogs/GUIDialogContextMenu.cpp b/xbmc/dialogs/GUIDialogContextMenu.cpp
index 13b8656702d9..26587c4d7ae0 100644
--- a/xbmc/dialogs/GUIDialogContextMenu.cpp
+++ b/xbmc/dialogs/GUIDialogContextMenu.cpp
@@ -280,10 +280,11 @@ bool CGUIDialogContextMenu::OnContextButton(const std::string &type, const CFile
   switch (button)
   {
     case CONTEXT_BUTTON_EJECT_DRIVE:
-      return g_mediaManager.Eject(item->GetPath());
+      return CServiceBroker::GetMediaManager().Eject(item->GetPath());
 #ifdef HAS_DVD_DRIVE
     case CONTEXT_BUTTON_EJECT_DISC:
-      g_mediaManager.ToggleTray(g_mediaManager.TranslateDevicePath(item->GetPath())[0]);
+      CServiceBroker::GetMediaManager().ToggleTray(
+          CServiceBroker::GetMediaManager().TranslateDevicePath(item->GetPath())[0]);
 #endif
       return true;
     default:
@@ -397,7 +398,7 @@ bool CGUIDialogContextMenu::OnContextButton(const std::string &type, const CFile
 
       std::string strThumb;
       VECSOURCES shares;
-      g_mediaManager.GetLocalDrives(shares);
+      CServiceBroker::GetMediaManager().GetLocalDrives(shares);
       if (!CGUIDialogFileBrowser::ShowAndGetImage(items, shares, g_localizeStrings.Get(1030), strThumb))
         return false;
 
diff --git a/xbmc/dialogs/GUIDialogFileBrowser.cpp b/xbmc/dialogs/GUIDialogFileBrowser.cpp
index 139656c688f3..a2b1915340e5 100644
--- a/xbmc/dialogs/GUIDialogFileBrowser.cpp
+++ b/xbmc/dialogs/GUIDialogFileBrowser.cpp
@@ -88,7 +88,7 @@ bool CGUIDialogFileBrowser::OnAction(const CAction &action)
     int iItem = m_viewControl.GetSelectedItem();
     if ((!m_addSourceType.empty() && iItem != m_vecItems->Size()-1))
       return OnPopupMenu(iItem);
-    if (m_addNetworkShareEnabled && g_mediaManager.HasLocation(m_selectedPath))
+    if (m_addNetworkShareEnabled && CServiceBroker::GetMediaManager().HasLocation(m_selectedPath))
     {
       // need to make sure this source is not an auto added location
       // as users locations might have the same paths
@@ -558,7 +558,7 @@ bool CGUIDialogFileBrowser::HaveDiscOrConnection( int iDriveType )
 {
   if ( iDriveType == CMediaSource::SOURCE_TYPE_DVD )
   {
-    if ( !g_mediaManager.IsDiscInDrive() )
+    if (!CServiceBroker::GetMediaManager().IsDiscInDrive())
     {
       HELPERS::ShowOKDialogText(CVariant{218}, CVariant{219});
       return false;
@@ -763,7 +763,7 @@ bool CGUIDialogFileBrowser::ShowAndGetFile(const std::string &directory, const s
     CServiceBroker::GetGUI()->GetWindowManager().Remove(browser->GetID());
     delete browser;
     VECSOURCES shares;
-    g_mediaManager.GetLocalDrives(shares);
+    CServiceBroker::GetMediaManager().GetLocalDrives(shares);
 
     return ShowAndGetFile(shares, mask, heading, path, useThumbs,useFileDirectories);
   }
@@ -841,7 +841,7 @@ bool CGUIDialogFileBrowser::ShowAndGetSource(std::string &path, bool allowNetwor
   {
     browser->SetHeading(g_localizeStrings.Get(1023));
 
-    g_mediaManager.GetLocalDrives(shares);
+    CServiceBroker::GetMediaManager().GetLocalDrives(shares);
 
     // Now the additional share if appropriate
     if (additionalShare)
@@ -852,7 +852,7 @@ bool CGUIDialogFileBrowser::ShowAndGetSource(std::string &path, bool allowNetwor
     // Now add the network shares...
     if (allowNetworkShares)
     {
-      g_mediaManager.GetNetworkLocations(shares);
+      CServiceBroker::GetMediaManager().GetNetworkLocations(shares);
     }
   }
 
@@ -876,7 +876,7 @@ void CGUIDialogFileBrowser::SetSources(const VECSOURCES &shares)
 {
   m_shares = shares;
   if (!m_shares.size() && m_addSourceType.empty())
-    g_mediaManager.GetLocalDrives(m_shares);
+    CServiceBroker::GetMediaManager().GetLocalDrives(m_shares);
   m_rootDir.SetSources(m_shares);
 }
 
@@ -897,7 +897,7 @@ void CGUIDialogFileBrowser::OnAddNetworkLocation()
       URIUtils::RemoveSlashAtEnd(share.strName);
       m_shares.push_back(share);
       // add to our location manager...
-      g_mediaManager.AddNetworkLocation(path);
+      CServiceBroker::GetMediaManager().AddNetworkLocation(path);
     }
   }
   m_rootDir.SetSources(m_shares);
@@ -937,7 +937,7 @@ bool CGUIDialogFileBrowser::OnPopupMenu(int iItem)
       VECSOURCES shares=m_shares;
       if (CGUIDialogNetworkSetup::ShowAndGetNetworkAddress(newPath))
       {
-        g_mediaManager.SetLocationPath(strOldPath,newPath);
+        CServiceBroker::GetMediaManager().SetLocationPath(strOldPath, newPath);
         CURL url(newPath);
         for (unsigned int i=0;i<shares.size();++i)
         {
@@ -969,7 +969,7 @@ bool CGUIDialogFileBrowser::OnPopupMenu(int iItem)
   {
     if (m_addNetworkShareEnabled)
     {
-      g_mediaManager.RemoveLocation(m_selectedPath);
+      CServiceBroker::GetMediaManager().RemoveLocation(m_selectedPath);
 
       for (unsigned int i=0;i<m_shares.size();++i)
       {
diff --git a/xbmc/dialogs/GUIDialogPlayEject.cpp b/xbmc/dialogs/GUIDialogPlayEject.cpp
index 3f5f03b169d0..162d93070e36 100644
--- a/xbmc/dialogs/GUIDialogPlayEject.cpp
+++ b/xbmc/dialogs/GUIDialogPlayEject.cpp
@@ -35,7 +35,7 @@ bool CGUIDialogPlayEject::OnMessage(CGUIMessage& message)
     int iControl = message.GetSenderId();
     if (iControl == ID_BUTTON_PLAY)
     {
-      if (g_mediaManager.IsDiscInDrive())
+      if (CServiceBroker::GetMediaManager().IsDiscInDrive())
       {
         m_bConfirmed = true;
         Close();
@@ -45,7 +45,7 @@ bool CGUIDialogPlayEject::OnMessage(CGUIMessage& message)
     }
     if (iControl == ID_BUTTON_EJECT)
     {
-      g_mediaManager.ToggleTray();
+      CServiceBroker::GetMediaManager().ToggleTray();
       return true;
     }
   }
@@ -55,14 +55,14 @@ bool CGUIDialogPlayEject::OnMessage(CGUIMessage& message)
 
 void CGUIDialogPlayEject::FrameMove()
 {
-  CONTROL_ENABLE_ON_CONDITION(ID_BUTTON_PLAY, g_mediaManager.IsDiscInDrive());
+  CONTROL_ENABLE_ON_CONDITION(ID_BUTTON_PLAY, CServiceBroker::GetMediaManager().IsDiscInDrive());
 
   CGUIDialogYesNo::FrameMove();
 }
 
 void CGUIDialogPlayEject::OnInitWindow()
 {
-  if (g_mediaManager.IsDiscInDrive())
+  if (CServiceBroker::GetMediaManager().IsDiscInDrive())
   {
     m_defaultControl = ID_BUTTON_PLAY;
   }
diff --git a/xbmc/dialogs/GUIDialogSmartPlaylistRule.cpp b/xbmc/dialogs/GUIDialogSmartPlaylistRule.cpp
index 17ea2c2815ee..963d6d89e917 100644
--- a/xbmc/dialogs/GUIDialogSmartPlaylistRule.cpp
+++ b/xbmc/dialogs/GUIDialogSmartPlaylistRule.cpp
@@ -311,7 +311,7 @@ void CGUIDialogSmartPlaylistRule::OnBrowse()
       VECSOURCES sources2 = *CMediaSourceSettings::GetInstance().GetSources("video");
       sources.insert(sources.end(),sources2.begin(),sources2.end());
     }
-    g_mediaManager.GetLocalDrives(sources);
+    CServiceBroker::GetMediaManager().GetLocalDrives(sources);
 
     std::string path = m_rule.GetParameter();
     CGUIDialogFileBrowser::ShowAndGetDirectory(sources, g_localizeStrings.Get(657), path, false);
diff --git a/xbmc/favourites/GUIDialogFavourites.cpp b/xbmc/favourites/GUIDialogFavourites.cpp
index 7a21fcaa5277..6783a29dfde8 100644
--- a/xbmc/favourites/GUIDialogFavourites.cpp
+++ b/xbmc/favourites/GUIDialogFavourites.cpp
@@ -247,7 +247,7 @@ bool CGUIDialogFavourites::ChooseAndSetNewThumbnail(const CFileItemPtr &item)
 
   std::string thumb;
   VECSOURCES sources;
-  g_mediaManager.GetLocalDrives(sources);
+  CServiceBroker::GetMediaManager().GetLocalDrives(sources);
   if (CGUIDialogFileBrowser::ShowAndGetImage(prefilledItems, sources, g_localizeStrings.Get(1030), thumb)) // Browse for image
   {
     item->SetArt("thumb", thumb);
diff --git a/xbmc/filesystem/CDDADirectory.cpp b/xbmc/filesystem/CDDADirectory.cpp
index e012b9b8cc75..7f07e46de2f2 100644
--- a/xbmc/filesystem/CDDADirectory.cpp
+++ b/xbmc/filesystem/CDDADirectory.cpp
@@ -10,6 +10,7 @@
 
 #include "File.h"
 #include "FileItem.h"
+#include "ServiceBroker.h"
 #include "music/MusicDatabase.h"
 #include "storage/MediaManager.h"
 #include "utils/StringUtils.h"
@@ -27,11 +28,11 @@ bool CCDDADirectory::GetDirectory(const CURL& url, CFileItemList &items)
   // Reads the tracks from an audio cd
   std::string strPath = url.Get();
 
-  if (!g_mediaManager.IsDiscInDrive(strPath))
+  if (!CServiceBroker::GetMediaManager().IsDiscInDrive(strPath))
     return false;
 
   // Get information for the inserted disc
-  CCdInfo* pCdInfo = g_mediaManager.GetCdInfo(strPath);
+  CCdInfo* pCdInfo = CServiceBroker::GetMediaManager().GetCdInfo(strPath);
   if (pCdInfo == NULL)
     return false;
 
diff --git a/xbmc/filesystem/CDDAFile.cpp b/xbmc/filesystem/CDDAFile.cpp
index 7fbb301c7606..83a87847e811 100644
--- a/xbmc/filesystem/CDDAFile.cpp
+++ b/xbmc/filesystem/CDDAFile.cpp
@@ -8,6 +8,7 @@
 
 #include "CDDAFile.h"
 
+#include "ServiceBroker.h"
 #include "URL.h"
 #include "storage/MediaManager.h"
 #include "utils/URIUtils.h"
@@ -39,14 +40,16 @@ bool CFileCDDA::Open(const CURL& url)
 {
   std::string strURL = url.GetWithoutFilename();
 
-  if (!g_mediaManager.IsDiscInDrive(strURL) || !IsValidFile(url))
+  if (!CServiceBroker::GetMediaManager().IsDiscInDrive(strURL) || !IsValidFile(url))
     return false;
 
   // Open the dvd drive
 #ifdef TARGET_POSIX
-  m_pCdIo = m_cdio->cdio_open(g_mediaManager.TranslateDevicePath(strURL).c_str(), DRIVER_UNKNOWN);
+  m_pCdIo = m_cdio->cdio_open(CServiceBroker::GetMediaManager().TranslateDevicePath(strURL).c_str(),
+                              DRIVER_UNKNOWN);
 #elif defined(TARGET_WINDOWS)
-  m_pCdIo = m_cdio->cdio_open_win32(g_mediaManager.TranslateDevicePath(strURL, true).c_str());
+  m_pCdIo = m_cdio->cdio_open_win32(
+      CServiceBroker::GetMediaManager().TranslateDevicePath(strURL, true).c_str());
 #endif
   if (!m_pCdIo)
   {
@@ -103,7 +106,7 @@ int CFileCDDA::Stat(const CURL& url, struct __stat64* buffer)
 
 ssize_t CFileCDDA::Read(void* lpBuf, size_t uiBufSize)
 {
-  if (!m_pCdIo || !g_mediaManager.IsDiscInDrive())
+  if (!m_pCdIo || !CServiceBroker::GetMediaManager().IsDiscInDrive())
     return -1;
 
   if (uiBufSize > SSIZE_MAX)
diff --git a/xbmc/filesystem/SourcesDirectory.cpp b/xbmc/filesystem/SourcesDirectory.cpp
index bb33943a8b28..5147aa1cde61 100644
--- a/xbmc/filesystem/SourcesDirectory.cpp
+++ b/xbmc/filesystem/SourcesDirectory.cpp
@@ -38,7 +38,7 @@ bool CSourcesDirectory::GetDirectory(const CURL& url, CFileItemList &items)
     return false;
 
   sources = *sourcesFromType;
-  g_mediaManager.GetRemovableDrives(sources);
+  CServiceBroker::GetMediaManager().GetRemovableDrives(sources);
 
   return GetDirectory(sources, items);
 }
diff --git a/xbmc/filesystem/VirtualDirectory.cpp b/xbmc/filesystem/VirtualDirectory.cpp
index 38665a6190b0..7134eba0d2c7 100644
--- a/xbmc/filesystem/VirtualDirectory.cpp
+++ b/xbmc/filesystem/VirtualDirectory.cpp
@@ -11,6 +11,7 @@
 #include "Directory.h"
 #include "DirectoryFactory.h"
 #include "FileItem.h"
+#include "ServiceBroker.h"
 #include "SourcesDirectory.h"
 #include "URL.h"
 #include "Util.h"
@@ -167,7 +168,7 @@ void CVirtualDirectory::GetSources(VECSOURCES &shares) const
   // add our plug n play shares
 
   if (m_allowNonLocalSources)
-    g_mediaManager.GetRemovableDrives(shares);
+    CServiceBroker::GetMediaManager().GetRemovableDrives(shares);
 
 #ifdef HAS_DVD_DRIVE
   // and update our dvd share
@@ -176,7 +177,7 @@ void CVirtualDirectory::GetSources(VECSOURCES &shares) const
     CMediaSource& share = shares[i];
     if (share.m_iDriveType == CMediaSource::SOURCE_TYPE_DVD)
     {
-      if(g_mediaManager.IsAudio(share.strPath))
+      if (CServiceBroker::GetMediaManager().IsAudio(share.strPath))
       {
         share.strStatus = "Audio-CD";
         share.strPath = "cdda://local/";
@@ -184,11 +185,11 @@ void CVirtualDirectory::GetSources(VECSOURCES &shares) const
       }
       else
       {
-        share.strStatus = g_mediaManager.GetDiskLabel(share.strPath);
-        share.strDiskUniqueId = g_mediaManager.GetDiskUniqueId(share.strPath);
+        share.strStatus = CServiceBroker::GetMediaManager().GetDiskLabel(share.strPath);
+        share.strDiskUniqueId = CServiceBroker::GetMediaManager().GetDiskUniqueId(share.strPath);
         if (!share.strPath.length()) // unmounted CD
         {
-          if (g_mediaManager.GetDiscPath() == "iso9660://")
+          if (CServiceBroker::GetMediaManager().GetDiscPath() == "iso9660://")
             share.strPath = "iso9660://";
           else
             // share is unmounted and not iso9660, discard it
diff --git a/xbmc/guilib/guiinfo/SystemGUIInfo.cpp b/xbmc/guilib/guiinfo/SystemGUIInfo.cpp
index 4252911827a8..299b004a4bcf 100644
--- a/xbmc/guilib/guiinfo/SystemGUIInfo.cpp
+++ b/xbmc/guilib/guiinfo/SystemGUIInfo.cpp
@@ -232,7 +232,7 @@ bool CSystemGUIInfo::GetLabel(std::string& value, const CFileItem *item, int con
       return true;
 #ifdef HAS_DVD_DRIVE
     case SYSTEM_DVD_LABEL:
-      value = g_mediaManager.GetDiskLabel();
+      value = CServiceBroker::GetMediaManager().GetDiskLabel();
       return true;
 #endif
     case SYSTEM_ALARM_POS:
@@ -482,13 +482,13 @@ bool CSystemGUIInfo::GetBool(bool& value, const CGUIListItem *gitem, int context
 #endif
       return true;
     case SYSTEM_MEDIA_DVD:
-      value = g_mediaManager.IsDiscInDrive();
+      value = CServiceBroker::GetMediaManager().IsDiscInDrive();
       return true;
     case SYSTEM_MEDIA_AUDIO_CD:
     #ifdef HAS_DVD_DRIVE
-      if (g_mediaManager.IsDiscInDrive())
+      if (CServiceBroker::GetMediaManager().IsDiscInDrive())
       {
-        MEDIA_DETECT::CCdInfo *pCdInfo = g_mediaManager.GetCdInfo();
+        MEDIA_DETECT::CCdInfo* pCdInfo = CServiceBroker::GetMediaManager().GetCdInfo();
         value = pCdInfo && (pCdInfo->IsAudio(1) || pCdInfo->IsCDExtra(1) || pCdInfo->IsMixedMode(1));
       }
       else
@@ -499,10 +499,10 @@ bool CSystemGUIInfo::GetBool(bool& value, const CGUIListItem *gitem, int context
       return true;
 #ifdef HAS_DVD_DRIVE
     case SYSTEM_DVDREADY:
-      value = g_mediaManager.GetDriveStatus() != DRIVE_NOT_READY;
+      value = CServiceBroker::GetMediaManager().GetDriveStatus() != DRIVE_NOT_READY;
       return true;
     case SYSTEM_TRAYOPEN:
-      value = g_mediaManager.GetDriveStatus() == DRIVE_OPEN;
+      value = CServiceBroker::GetMediaManager().GetDriveStatus() == DRIVE_OPEN;
       return true;
 #endif
     case SYSTEM_CAN_POWERDOWN:
diff --git a/xbmc/interfaces/builtins/LibraryBuiltins.cpp b/xbmc/interfaces/builtins/LibraryBuiltins.cpp
index 15f2cfbf4d7b..ed0008b47b8f 100644
--- a/xbmc/interfaces/builtins/LibraryBuiltins.cpp
+++ b/xbmc/interfaces/builtins/LibraryBuiltins.cpp
@@ -77,9 +77,9 @@ static int ExportLibrary(const std::vector<std::string>& params)
     iHeading = 20196;
   std::string path;
   VECSOURCES shares;
-  g_mediaManager.GetLocalDrives(shares);
-  g_mediaManager.GetNetworkLocations(shares);
-  g_mediaManager.GetRemovableDrives(shares);
+  CServiceBroker::GetMediaManager().GetLocalDrives(shares);
+  CServiceBroker::GetMediaManager().GetNetworkLocations(shares);
+  CServiceBroker::GetMediaManager().GetRemovableDrives(shares);
   bool singleFile;
   bool thumbs=false;
   bool actorThumbs=false;
diff --git a/xbmc/interfaces/builtins/OpticalBuiltins.cpp b/xbmc/interfaces/builtins/OpticalBuiltins.cpp
index 25bfc77f3a8c..d9af61a7f026 100644
--- a/xbmc/interfaces/builtins/OpticalBuiltins.cpp
+++ b/xbmc/interfaces/builtins/OpticalBuiltins.cpp
@@ -8,6 +8,8 @@
 
 #include "OpticalBuiltins.h"
 
+#include "ServiceBroker.h"
+
 #ifdef HAS_DVD_DRIVE
 #include "storage/MediaManager.h"
 #endif
@@ -22,7 +24,7 @@
 static int Eject(const std::vector<std::string>& params)
 {
 #ifdef HAS_DVD_DRIVE
-  g_mediaManager.ToggleTray();
+  CServiceBroker::GetMediaManager().ToggleTray();
 #endif
 
   return 0;
diff --git a/xbmc/interfaces/builtins/PlayerBuiltins.cpp b/xbmc/interfaces/builtins/PlayerBuiltins.cpp
index bd1b054945e4..cce8c4a0f1b7 100644
--- a/xbmc/interfaces/builtins/PlayerBuiltins.cpp
+++ b/xbmc/interfaces/builtins/PlayerBuiltins.cpp
@@ -363,7 +363,7 @@ static int PlayDVD(const std::vector<std::string>& params)
   bool restart = false;
   if (!params.empty() && StringUtils::EqualsNoCase(params[0], "restart"))
     restart = true;
-  MEDIA_DETECT::CAutorun::PlayDisc(g_mediaManager.GetDiscPath(), true, restart);
+  MEDIA_DETECT::CAutorun::PlayDisc(CServiceBroker::GetMediaManager().GetDiscPath(), true, restart);
 #endif
 
   return 0;
diff --git a/xbmc/interfaces/builtins/SkinBuiltins.cpp b/xbmc/interfaces/builtins/SkinBuiltins.cpp
index 4c9dec74cdc2..e45a7b1803e3 100644
--- a/xbmc/interfaces/builtins/SkinBuiltins.cpp
+++ b/xbmc/interfaces/builtins/SkinBuiltins.cpp
@@ -181,8 +181,8 @@ static int SetPath(const std::vector<std::string>& params)
   int string = CSkinSettings::GetInstance().TranslateString(params[0]);
   std::string value = CSkinSettings::GetInstance().GetString(string);
   VECSOURCES localShares;
-  g_mediaManager.GetLocalDrives(localShares);
-  g_mediaManager.GetNetworkLocations(localShares);
+  CServiceBroker::GetMediaManager().GetLocalDrives(localShares);
+  CServiceBroker::GetMediaManager().GetNetworkLocations(localShares);
   if (params.size() > 1)
   {
     value = params[1];
@@ -217,7 +217,7 @@ static int SetFile(const std::vector<std::string>& params)
   int string = CSkinSettings::GetInstance().TranslateString(params[0]);
   std::string value = CSkinSettings::GetInstance().GetString(string);
   VECSOURCES localShares;
-  g_mediaManager.GetLocalDrives(localShares);
+  CServiceBroker::GetMediaManager().GetLocalDrives(localShares);
 
   // Note. can only browse one addon type from here
   // if browsing for addons, required param[1] is addontype string, with optional param[2]
@@ -279,7 +279,7 @@ static int SetImage(const std::vector<std::string>& params)
   int string = CSkinSettings::GetInstance().TranslateString(params[0]);
   std::string value = CSkinSettings::GetInstance().GetString(string);
   VECSOURCES localShares;
-  g_mediaManager.GetLocalDrives(localShares);
+  CServiceBroker::GetMediaManager().GetLocalDrives(localShares);
   if (params.size() > 1)
   {
     value = params[1];
diff --git a/xbmc/interfaces/legacy/Dialog.cpp b/xbmc/interfaces/legacy/Dialog.cpp
index 8345af79cecd..6198d8d17721 100644
--- a/xbmc/interfaces/legacy/Dialog.cpp
+++ b/xbmc/interfaces/legacy/Dialog.cpp
@@ -221,14 +221,14 @@ namespace XBMCAddon
       VECSOURCES localShares;
       if (!shares)
       {
-        g_mediaManager.GetLocalDrives(localShares);
+        CServiceBroker::GetMediaManager().GetLocalDrives(localShares);
         if (strcmpi(s_shares.c_str(), "local") != 0)
-          g_mediaManager.GetNetworkLocations(localShares);
+          CServiceBroker::GetMediaManager().GetNetworkLocations(localShares);
       }
       else // always append local drives
       {
         localShares = *shares;
-        g_mediaManager.GetLocalDrives(localShares);
+        CServiceBroker::GetMediaManager().GetLocalDrives(localShares);
       }
 
       if (useFileDirectories && !maskparam.empty())
@@ -256,14 +256,14 @@ namespace XBMCAddon
       VECSOURCES localShares;
       if (!shares)
       {
-        g_mediaManager.GetLocalDrives(localShares);
+        CServiceBroker::GetMediaManager().GetLocalDrives(localShares);
         if (strcmpi(s_shares.c_str(), "local") != 0)
-          g_mediaManager.GetNetworkLocations(localShares);
+          CServiceBroker::GetMediaManager().GetNetworkLocations(localShares);
       }
       else // always append local drives
       {
         localShares = *shares;
-        g_mediaManager.GetLocalDrives(localShares);
+        CServiceBroker::GetMediaManager().GetLocalDrives(localShares);
       }
 
       if (useFileDirectories && !lmask.empty())
diff --git a/xbmc/interfaces/legacy/ModuleXbmc.cpp b/xbmc/interfaces/legacy/ModuleXbmc.cpp
index 41d2d237a970..91fb7f7ba2d0 100644
--- a/xbmc/interfaces/legacy/ModuleXbmc.cpp
+++ b/xbmc/interfaces/legacy/ModuleXbmc.cpp
@@ -242,7 +242,7 @@ namespace XBMCAddon
     long getDVDState()
     {
       XBMC_TRACE;
-      return g_mediaManager.GetDriveStatus();
+      return CServiceBroker::GetMediaManager().GetDriveStatus();
     }
 
     long getFreeMem()
diff --git a/xbmc/music/MusicDatabase.cpp b/xbmc/music/MusicDatabase.cpp
index f0de0fa477ca..ff7cbe244d45 100644
--- a/xbmc/music/MusicDatabase.cpp
+++ b/xbmc/music/MusicDatabase.cpp
@@ -3581,7 +3581,7 @@ bool CMusicDatabase::LookupCDDBInfo(bool bRequery/*=false*/)
     return false;
 
   // Get information for the inserted disc
-  CCdInfo* pCdInfo = g_mediaManager.GetCdInfo();
+  CCdInfo* pCdInfo = CServiceBroker::GetMediaManager().GetCdInfo();
   if (pCdInfo == NULL)
     return false;
 
diff --git a/xbmc/music/dialogs/GUIDialogInfoProviderSettings.cpp b/xbmc/music/dialogs/GUIDialogInfoProviderSettings.cpp
index 53dc73a189e7..7ff5f2f7a31c 100644
--- a/xbmc/music/dialogs/GUIDialogInfoProviderSettings.cpp
+++ b/xbmc/music/dialogs/GUIDialogInfoProviderSettings.cpp
@@ -208,9 +208,9 @@ void CGUIDialogInfoProviderSettings::OnSettingAction(std::shared_ptr<const CSett
   else if (settingId == CSettings::SETTING_MUSICLIBRARY_ARTISTSFOLDER)
   {
     VECSOURCES shares;
-    g_mediaManager.GetLocalDrives(shares);
-    g_mediaManager.GetNetworkLocations(shares);
-    g_mediaManager.GetRemovableDrives(shares);
+    CServiceBroker::GetMediaManager().GetLocalDrives(shares);
+    CServiceBroker::GetMediaManager().GetNetworkLocations(shares);
+    CServiceBroker::GetMediaManager().GetRemovableDrives(shares);
     std::string strDirectory = m_strArtistInfoPath;
     if (!strDirectory.empty())
     {
diff --git a/xbmc/music/dialogs/GUIDialogMusicInfo.cpp b/xbmc/music/dialogs/GUIDialogMusicInfo.cpp
index 643a60f3f522..171ef73a4b8a 100644
--- a/xbmc/music/dialogs/GUIDialogMusicInfo.cpp
+++ b/xbmc/music/dialogs/GUIDialogMusicInfo.cpp
@@ -899,7 +899,7 @@ void CGUIDialogMusicInfo::OnGetArt()
   std::string result;
   VECSOURCES sources(*CMediaSourceSettings::GetInstance().GetSources("music"));
   CGUIDialogMusicInfo::AddItemPathToFileBrowserSources(sources, *m_item);
-  g_mediaManager.GetLocalDrives(sources);
+  CServiceBroker::GetMediaManager().GetLocalDrives(sources);
   if (CGUIDialogFileBrowser::ShowAndGetImage(items, sources, g_localizeStrings.Get(13511), result) &&
     result != "thumb://Current")
   {
diff --git a/xbmc/music/dialogs/GUIDialogSongInfo.cpp b/xbmc/music/dialogs/GUIDialogSongInfo.cpp
index 5c2ab7fbec26..f95ed85e8667 100644
--- a/xbmc/music/dialogs/GUIDialogSongInfo.cpp
+++ b/xbmc/music/dialogs/GUIDialogSongInfo.cpp
@@ -417,7 +417,7 @@ void CGUIDialogSongInfo::OnGetArt()
   }
   else  // Add parent folder of song
     CGUIDialogMusicInfo::AddItemPathToFileBrowserSources(sources, *m_song);
-  g_mediaManager.GetLocalDrives(sources);
+  CServiceBroker::GetMediaManager().GetLocalDrives(sources);
   if (CGUIDialogFileBrowser::ShowAndGetImage(items, sources, g_localizeStrings.Get(13511), result) &&
     result != "thumb://Current")
   {
diff --git a/xbmc/music/tags/MusicInfoTagLoaderCDDA.cpp b/xbmc/music/tags/MusicInfoTagLoaderCDDA.cpp
index 563a7135755d..729a0d68a514 100644
--- a/xbmc/music/tags/MusicInfoTagLoaderCDDA.cpp
+++ b/xbmc/music/tags/MusicInfoTagLoaderCDDA.cpp
@@ -43,7 +43,7 @@ bool CMusicInfoTagLoaderCDDA::Load(const std::string& strFileName, CMusicInfoTag
     bool bResult = false;
 
     // Get information for the inserted disc
-    CCdInfo* pCdInfo = g_mediaManager.GetCdInfo();
+    CCdInfo* pCdInfo = CServiceBroker::GetMediaManager().GetCdInfo();
     if (pCdInfo == NULL)
       return bResult;
 
diff --git a/xbmc/music/windows/GUIWindowMusicBase.cpp b/xbmc/music/windows/GUIWindowMusicBase.cpp
index cd66b199059f..d234e5a8aa10 100644
--- a/xbmc/music/windows/GUIWindowMusicBase.cpp
+++ b/xbmc/music/windows/GUIWindowMusicBase.cpp
@@ -500,7 +500,7 @@ void CGUIWindowMusicBase::AddItemToPlayList(const CFileItemPtr &pItem, CFileItem
 
 void CGUIWindowMusicBase::UpdateButtons()
 {
-  CONTROL_ENABLE_ON_CONDITION(CONTROL_BTNRIP, g_mediaManager.IsAudio());
+  CONTROL_ENABLE_ON_CONDITION(CONTROL_BTNRIP, CServiceBroker::GetMediaManager().IsAudio());
 
   CONTROL_ENABLE_ON_CONDITION(CONTROL_BTNSCAN,
                               !(m_vecItems->IsVirtualDirectoryRoot() ||
@@ -568,10 +568,10 @@ void CGUIWindowMusicBase::GetContextButtons(int itemNumber, CContextButtons &but
       }
 #ifdef HAS_DVD_DRIVE
       // enable Rip CD Audio or Track button if we have an audio disc
-      if (g_mediaManager.IsDiscInDrive() && m_vecItems->IsCDDA())
+      if (CServiceBroker::GetMediaManager().IsDiscInDrive() && m_vecItems->IsCDDA())
       {
         // those cds can also include Audio Tracks: CDExtra and MixedMode!
-        MEDIA_DETECT::CCdInfo *pCdInfo = g_mediaManager.GetCdInfo();
+        MEDIA_DETECT::CCdInfo* pCdInfo = CServiceBroker::GetMediaManager().GetCdInfo();
         if (pCdInfo->IsAudio(1) || pCdInfo->IsCDExtra(1) || pCdInfo->IsMixedMode(1))
           buttons.Add(CONTEXT_BUTTON_RIP_TRACK, 610);
       }
@@ -579,8 +579,8 @@ void CGUIWindowMusicBase::GetContextButtons(int itemNumber, CContextButtons &but
     }
 
     // enable CDDB lookup if the current dir is CDDA
-    if (g_mediaManager.IsDiscInDrive() && m_vecItems->IsCDDA() &&
-       (profileManager->GetCurrentProfile().canWriteDatabases() || g_passwordManager.bMasterUser))
+    if (CServiceBroker::GetMediaManager().IsDiscInDrive() && m_vecItems->IsCDDA() &&
+        (profileManager->GetCurrentProfile().canWriteDatabases() || g_passwordManager.bMasterUser))
     {
       buttons.Add(CONTEXT_BUTTON_CDDB, 16002);
     }
@@ -699,7 +699,7 @@ bool CGUIWindowMusicBase::OnAddMediaSource()
 
 void CGUIWindowMusicBase::OnRipCD()
 {
-  if(g_mediaManager.IsAudio())
+  if (CServiceBroker::GetMediaManager().IsAudio())
   {
     if (!g_application.CurrentFileItem().IsCDDA())
     {
@@ -714,7 +714,7 @@ void CGUIWindowMusicBase::OnRipCD()
 
 void CGUIWindowMusicBase::OnRipTrack(int iItem)
 {
-  if(g_mediaManager.IsAudio())
+  if (CServiceBroker::GetMediaManager().IsAudio())
   {
     if (!g_application.CurrentFileItem().IsCDDA())
     {
@@ -1128,16 +1128,16 @@ void CGUIWindowMusicBase::DoScan(const std::string &strPath, bool bRescan /*= fa
 
 void CGUIWindowMusicBase::OnRemoveSource(int iItem)
 {
-  
+
   //Remove music source from library, even when leaving songs
   CMusicDatabase database;
   database.Open();
   database.RemoveSource(m_vecItems->Get(iItem)->GetLabel());
-  
+
   bool bCanceled;
   if (CGUIDialogYesNo::ShowAndGetInput(CVariant{522}, CVariant{20340}, bCanceled, CVariant{""}, CVariant{""}, CGUIDialogYesNo::NO_TIMEOUT))
   {
-    MAPSONGS songs;    
+    MAPSONGS songs;
     database.RemoveSongsFromPath(m_vecItems->Get(iItem)->GetPath(), songs, false);
     database.CleanupOrphanedItems();
     CServiceBroker::GetGUI()->GetInfoManager().GetInfoProviders().GetLibraryInfoProvider().ResetLibraryBools();
diff --git a/xbmc/music/windows/GUIWindowMusicNav.cpp b/xbmc/music/windows/GUIWindowMusicNav.cpp
index c5adfd89319f..dafcab56dc23 100644
--- a/xbmc/music/windows/GUIWindowMusicNav.cpp
+++ b/xbmc/music/windows/GUIWindowMusicNav.cpp
@@ -547,10 +547,10 @@ void CGUIWindowMusicNav::GetContextButtons(int itemNumber, CContextButtons &butt
       CGUIDialogContextMenu::GetContextButtons("music", item, buttons);
 #ifdef HAS_DVD_DRIVE
       // enable Rip CD an audio disc
-      if (g_mediaManager.IsDiscInDrive() && item->IsCDDA())
+      if (CServiceBroker::GetMediaManager().IsDiscInDrive() && item->IsCDDA())
       {
         // those cds can also include Audio Tracks: CDExtra and MixedMode!
-        MEDIA_DETECT::CCdInfo *pCdInfo = g_mediaManager.GetCdInfo();
+        MEDIA_DETECT::CCdInfo* pCdInfo = CServiceBroker::GetMediaManager().GetCdInfo();
         if (pCdInfo->IsAudio(1) || pCdInfo->IsCDExtra(1) || pCdInfo->IsMixedMode(1))
         {
           if (CJobManager::GetInstance().IsProcessing("cdrip"))
diff --git a/xbmc/platform/win10/storage/Win10StorageProvider.cpp b/xbmc/platform/win10/storage/Win10StorageProvider.cpp
index 16be65fb5945..26c311c1221a 100644
--- a/xbmc/platform/win10/storage/Win10StorageProvider.cpp
+++ b/xbmc/platform/win10/storage/Win10StorageProvider.cpp
@@ -7,6 +7,7 @@
  */
 #include "Win10StorageProvider.h"
 
+#include "ServiceBroker.h"
 #include "filesystem/SpecialProtocol.h"
 #include "guilib/LocalizeStrings.h"
 #include "storage/MediaManager.h"
@@ -47,7 +48,7 @@ void CStorageProvider::Initialize()
   VECSOURCES vShare;
   GetDrivesByType(vShare, DVD_DRIVES);
   if (!vShare.empty())
-    g_mediaManager.SetHasOpticalDrive(true);
+    CServiceBroker::GetMediaManager().SetHasOpticalDrive(true);
   else
     CLog::Log(LOGDEBUG, "%s: No optical drive found.", __FUNCTION__);
 
diff --git a/xbmc/platform/win32/WIN32Util.cpp b/xbmc/platform/win32/WIN32Util.cpp
index c3445302732e..cc4e5b66673e 100644
--- a/xbmc/platform/win32/WIN32Util.cpp
+++ b/xbmc/platform/win32/WIN32Util.cpp
@@ -7,22 +7,26 @@
  */
 
 #include "WIN32Util.h"
+
+#include "Application.h"
+#include "CompileInfo.h"
+#include "ServiceBroker.h"
 #include "Util.h"
-#include "utils/URIUtils.h"
-#include "storage/cdioSupport.h"
-#include <PowrProf.h>
 #include "WindowHelper.h"
-#include "Application.h"
+#include "guilib/LocalizeStrings.h"
 #include "my_ntddscsi.h"
 #include "storage/MediaManager.h"
-#include "guilib/LocalizeStrings.h"
+#include "storage/cdioSupport.h"
 #include "utils/CharsetConverter.h"
-#include "utils/log.h"
-#include "utils/SystemInfo.h"
 #include "utils/StringUtils.h"
-#include "CompileInfo.h"
+#include "utils/SystemInfo.h"
+#include "utils/URIUtils.h"
+#include "utils/log.h"
+
 #include "platform/win32/CharsetConverter.h"
 
+#include <PowrProf.h>
+
 #ifdef TARGET_WINDOWS_DESKTOP
 #include <cassert>
 #endif
@@ -502,7 +506,7 @@ HRESULT CWIN32Util::ToggleTray(const char cDriveLetter)
   char cDL = cDriveLetter;
   if( !cDL )
   {
-    std::string dvdDevice = g_mediaManager.TranslateDevicePath("");
+    std::string dvdDevice = CServiceBroker::GetMediaManager().TranslateDevicePath("");
     if(dvdDevice == "")
       return S_FALSE;
     cDL = dvdDevice[0];
@@ -526,7 +530,7 @@ HRESULT CWIN32Util::ToggleTray(const char cDriveLetter)
     CMediaSource share;
     share.strPath = StringUtils::Format("%c:", cDL);
     share.strName = share.strPath;
-    g_mediaManager.RemoveAutoSource(share);
+    CServiceBroker::GetMediaManager().RemoveAutoSource(share);
   }
   CloseHandle(hDrive);
   return bRet? S_OK : S_FALSE;
@@ -538,7 +542,7 @@ HRESULT CWIN32Util::EjectTray(const char cDriveLetter)
   char cDL = cDriveLetter;
   if( !cDL )
   {
-    std::string dvdDevice = g_mediaManager.TranslateDevicePath("");
+    std::string dvdDevice = CServiceBroker::GetMediaManager().TranslateDevicePath("");
     if(dvdDevice.empty())
       return S_FALSE;
     cDL = dvdDevice[0];
@@ -557,7 +561,7 @@ HRESULT CWIN32Util::CloseTray(const char cDriveLetter)
   char cDL = cDriveLetter;
   if( !cDL )
   {
-    std::string dvdDevice = g_mediaManager.TranslateDevicePath("");
+    std::string dvdDevice = CServiceBroker::GetMediaManager().TranslateDevicePath("");
     if(dvdDevice.empty())
       return S_FALSE;
     cDL = dvdDevice[0];
diff --git a/xbmc/platform/win32/storage/Win32StorageProvider.cpp b/xbmc/platform/win32/storage/Win32StorageProvider.cpp
index 353d08ebdc3d..bf9f08e3bfb2 100644
--- a/xbmc/platform/win32/storage/Win32StorageProvider.cpp
+++ b/xbmc/platform/win32/storage/Win32StorageProvider.cpp
@@ -7,6 +7,7 @@
  */
 #include "Win32StorageProvider.h"
 
+#include "ServiceBroker.h"
 #include "filesystem/SpecialProtocol.h"
 #include "guilib/LocalizeStrings.h"
 #include "storage/MediaManager.h"
@@ -33,14 +34,14 @@ void CWin32StorageProvider::Initialize()
   VECSOURCES vShare;
   GetDrivesByType(vShare, DVD_DRIVES);
   if(!vShare.empty())
-    g_mediaManager.SetHasOpticalDrive(true);
+    CServiceBroker::GetMediaManager().SetHasOpticalDrive(true);
   else
     CLog::Log(LOGDEBUG, "%s: No optical drive found.", __FUNCTION__);
 
 #ifdef HAS_DVD_DRIVE
   // Can be removed once the StorageHandler supports optical media
   for (const auto& it : vShare)
-    if (g_mediaManager.GetDriveStatus(it.strPath) == DRIVE_CLOSED_MEDIA_PRESENT)
+    if (CServiceBroker::GetMediaManager().GetDriveStatus(it.strPath) == DRIVE_CLOSED_MEDIA_PRESENT)
       CJobManager::GetInstance().AddJob(new CDetectDisc(it.strPath, false), NULL);
       // remove end
 #endif
@@ -363,16 +364,16 @@ bool CDetectDisc::DoWork()
   CLog::Log(LOGDEBUG, "%s: Optical media found in drive %s", __FUNCTION__, m_strPath.c_str());
   CMediaSource share;
   share.strPath = m_strPath;
-  share.strStatus = g_mediaManager.GetDiskLabel(share.strPath);
-  share.strDiskUniqueId = g_mediaManager.GetDiskUniqueId(share.strPath);
-  if(g_mediaManager.IsAudio(share.strPath))
+  share.strStatus = CServiceBroker::GetMediaManager().GetDiskLabel(share.strPath);
+  share.strDiskUniqueId = CServiceBroker::GetMediaManager().GetDiskUniqueId(share.strPath);
+  if (CServiceBroker::GetMediaManager().IsAudio(share.strPath))
     share.strStatus = "Audio-CD";
   else if(share.strStatus == "")
     share.strStatus = g_localizeStrings.Get(446);
   share.strName = share.strPath;
   share.m_ignore = true;
   share.m_iDriveType = CMediaSource::SOURCE_TYPE_DVD;
-  g_mediaManager.AddAutoSource(share, m_bautorun);
+  CServiceBroker::GetMediaManager().AddAutoSource(share, m_bautorun);
 #endif
   return true;
 }
diff --git a/xbmc/profiles/dialogs/GUIDialogProfileSettings.cpp b/xbmc/profiles/dialogs/GUIDialogProfileSettings.cpp
index 446fcdb9eeb0..1303d894478c 100644
--- a/xbmc/profiles/dialogs/GUIDialogProfileSettings.cpp
+++ b/xbmc/profiles/dialogs/GUIDialogProfileSettings.cpp
@@ -224,7 +224,7 @@ void CGUIDialogProfileSettings::OnSettingAction(std::shared_ptr<const CSetting>
   if (settingId == SETTING_PROFILE_IMAGE)
   {
     VECSOURCES shares;
-    g_mediaManager.GetLocalDrives(shares);
+    CServiceBroker::GetMediaManager().GetLocalDrives(shares);
 
     CFileItemList items;
     if (!m_thumb.empty())
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.cpp b/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.cpp
index 932492baa927..2bf84d380967 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.cpp
@@ -370,7 +370,7 @@ bool CGUIDialogPVRChannelManager::OnClickButtonChannelLogo(CGUIMessage& message)
     share1.strName = g_localizeStrings.Get(19066);
     shares.push_back(share1);
   }
-  g_mediaManager.GetLocalDrives(shares);
+  CServiceBroker::GetMediaManager().GetLocalDrives(shares);
   if (!CGUIDialogFileBrowser::ShowAndGetImage(items, shares, g_localizeStrings.Get(19285), strThumb, NULL, 19285))
     return false;
 
diff --git a/xbmc/settings/DisplaySettings.cpp b/xbmc/settings/DisplaySettings.cpp
index 67f1d4469b4b..8c35e7e4ae48 100644
--- a/xbmc/settings/DisplaySettings.cpp
+++ b/xbmc/settings/DisplaySettings.cpp
@@ -237,7 +237,7 @@ void CDisplaySettings::OnSettingAction(std::shared_ptr<const CSetting> setting)
   {
     std::string path = std::static_pointer_cast<const CSettingString>(setting)->GetValue();
     VECSOURCES shares;
-    g_mediaManager.GetLocalDrives(shares);
+    CServiceBroker::GetMediaManager().GetLocalDrives(shares);
     if (CGUIDialogFileBrowser::ShowAndGetFile(shares, ".3dlut", g_localizeStrings.Get(36580), path))
     {
       std::static_pointer_cast<CSettingString>(std::const_pointer_cast<CSetting>(setting))->SetValue(path);
@@ -247,7 +247,7 @@ void CDisplaySettings::OnSettingAction(std::shared_ptr<const CSetting> setting)
   {
     std::string path = std::static_pointer_cast<const CSettingString>(setting)->GetValue();
     VECSOURCES shares;
-    g_mediaManager.GetLocalDrives(shares);
+    CServiceBroker::GetMediaManager().GetLocalDrives(shares);
     if (CGUIDialogFileBrowser::ShowAndGetFile(shares, ".icc|.icm", g_localizeStrings.Get(36581), path))
     {
       std::static_pointer_cast<CSettingString>(std::const_pointer_cast<CSetting>(setting))->SetValue(path);
diff --git a/xbmc/settings/MediaSettings.cpp b/xbmc/settings/MediaSettings.cpp
index 8717bc142b9d..868ba66e25e8 100644
--- a/xbmc/settings/MediaSettings.cpp
+++ b/xbmc/settings/MediaSettings.cpp
@@ -308,9 +308,9 @@ void CMediaSettings::OnSettingAction(std::shared_ptr<const CSetting> setting)
   {
     std::string path;
     VECSOURCES shares;
-    g_mediaManager.GetLocalDrives(shares);
-    g_mediaManager.GetNetworkLocations(shares);
-    g_mediaManager.GetRemovableDrives(shares);
+    CServiceBroker::GetMediaManager().GetLocalDrives(shares);
+    CServiceBroker::GetMediaManager().GetNetworkLocations(shares);
+    CServiceBroker::GetMediaManager().GetRemovableDrives(shares);
 
     if (CGUIDialogFileBrowser::ShowAndGetFile(shares, "musicdb.xml", g_localizeStrings.Get(651) , path))
     {
@@ -329,9 +329,9 @@ void CMediaSettings::OnSettingAction(std::shared_ptr<const CSetting> setting)
   {
     std::string path;
     VECSOURCES shares;
-    g_mediaManager.GetLocalDrives(shares);
-    g_mediaManager.GetNetworkLocations(shares);
-    g_mediaManager.GetRemovableDrives(shares);
+    CServiceBroker::GetMediaManager().GetLocalDrives(shares);
+    CServiceBroker::GetMediaManager().GetNetworkLocations(shares);
+    CServiceBroker::GetMediaManager().GetRemovableDrives(shares);
 
     if (CGUIDialogFileBrowser::ShowAndGetDirectory(shares, g_localizeStrings.Get(651) , path))
     {
diff --git a/xbmc/settings/dialogs/GUIDialogLibExportSettings.cpp b/xbmc/settings/dialogs/GUIDialogLibExportSettings.cpp
index 1c0c982f906e..f296526204ef 100644
--- a/xbmc/settings/dialogs/GUIDialogLibExportSettings.cpp
+++ b/xbmc/settings/dialogs/GUIDialogLibExportSettings.cpp
@@ -149,9 +149,9 @@ void CGUIDialogLibExportSettings::OnSettingAction(std::shared_ptr<const CSetting
       !m_settings.IsToLibFolders() && !m_settings.IsArtistFoldersOnly())
   {
     VECSOURCES shares;
-    g_mediaManager.GetLocalDrives(shares);
-    g_mediaManager.GetNetworkLocations(shares);
-    g_mediaManager.GetRemovableDrives(shares);
+    CServiceBroker::GetMediaManager().GetLocalDrives(shares);
+    CServiceBroker::GetMediaManager().GetNetworkLocations(shares);
+    CServiceBroker::GetMediaManager().GetRemovableDrives(shares);
     std::string strDirectory = m_settings.m_strPath;
     if (!strDirectory.empty())
     {
diff --git a/xbmc/settings/windows/GUIControlSettings.cpp b/xbmc/settings/windows/GUIControlSettings.cpp
index da6a141b6d39..1e62e1301757 100644
--- a/xbmc/settings/windows/GUIControlSettings.cpp
+++ b/xbmc/settings/windows/GUIControlSettings.cpp
@@ -875,9 +875,9 @@ bool CGUIControlButtonSetting::GetPath(std::shared_ptr<CSettingPath> pathSetting
     }
   }
 
-  g_mediaManager.GetLocalDrives(shares);
+  CServiceBroker::GetMediaManager().GetLocalDrives(shares);
   if (!localSharesOnly)
-    g_mediaManager.GetNetworkLocations(shares);
+    CServiceBroker::GetMediaManager().GetNetworkLocations(shares);
 
   bool result = false;
   std::shared_ptr<const CSettingControlButton> control = std::static_pointer_cast<const CSettingControlButton>(pathSetting->GetControl());
diff --git a/xbmc/storage/IoSupport.cpp b/xbmc/storage/IoSupport.cpp
index f5e684747c68..a627c72bd263 100644
--- a/xbmc/storage/IoSupport.cpp
+++ b/xbmc/storage/IoSupport.cpp
@@ -51,6 +51,7 @@
 #include "platform/posix/XHandle.h"
 #include "platform/posix/XFileUtils.h"
 #endif
+#include "ServiceBroker.h"
 
 #ifdef HAS_DVD_DRIVE
 using namespace MEDIA_DETECT;
@@ -69,7 +70,8 @@ HANDLE CIoSupport::OpenCDROM()
   hDevice->fd = fd;
   hDevice->m_bCDROM = true;
 #elif defined(TARGET_WINDOWS)
-  auto filename = KODI::PLATFORM::WINDOWS::ToW(g_mediaManager.TranslateDevicePath("", true));
+  auto filename =
+      KODI::PLATFORM::WINDOWS::ToW(CServiceBroker::GetMediaManager().TranslateDevicePath("", true));
   hDevice = CreateFile(filename.c_str(), GENERIC_READ, FILE_SHARE_READ,
                        nullptr, OPEN_EXISTING,
                        FILE_FLAG_RANDOM_ACCESS, nullptr );
diff --git a/xbmc/storage/MediaManager.cpp b/xbmc/storage/MediaManager.cpp
index ace02a17c9fb..243107c2e084 100644
--- a/xbmc/storage/MediaManager.cpp
+++ b/xbmc/storage/MediaManager.cpp
@@ -62,8 +62,6 @@ using namespace MEDIA_DETECT;
 
 const char MEDIA_SOURCES_XML[] = { "special://profile/mediasources.xml" };
 
-class CMediaManager g_mediaManager;
-
 CMediaManager::CMediaManager()
 {
   m_bhasoptical = false;
@@ -489,15 +487,15 @@ std::string CMediaManager::GetDiskLabel(const std::string& devicePath)
   if(!m_bhasoptical)
     return "";
 
-  std::string mediaPath = g_mediaManager.TranslateDevicePath(devicePath);
+  std::string mediaPath = CServiceBroker::GetMediaManager().TranslateDevicePath(devicePath);
 
   auto cached = m_mapDiscInfo.find(mediaPath);
   if (cached != m_mapDiscInfo.end())
     return cached->second.name;
 
   // try to minimize the chance of a "device not ready" dialog
-  std::string drivePath = g_mediaManager.TranslateDevicePath(devicePath, true);
-  if (g_mediaManager.GetDriveStatus(drivePath) != DRIVE_CLOSED_MEDIA_PRESENT)
+  std::string drivePath = CServiceBroker::GetMediaManager().TranslateDevicePath(devicePath, true);
+  if (CServiceBroker::GetMediaManager().GetDriveStatus(drivePath) != DRIVE_CLOSED_MEDIA_PRESENT)
     return "";
 
   DiscInfo info;
@@ -531,7 +529,7 @@ std::string CMediaManager::GetDiskUniqueId(const std::string& devicePath)
 {
   std::string mediaPath;
 
-  CCdInfo* pInfo = g_mediaManager.GetCdInfo(devicePath);
+  CCdInfo* pInfo = CServiceBroker::GetMediaManager().GetCdInfo(devicePath);
   if (pInfo == NULL)
     return "";
 
@@ -547,7 +545,7 @@ std::string CMediaManager::GetDiskUniqueId(const std::string& devicePath)
 #ifdef TARGET_WINDOWS
   if (mediaPath.empty() || mediaPath == "iso9660://")
   {
-    mediaPath = g_mediaManager.TranslateDevicePath(devicePath);
+    mediaPath = CServiceBroker::GetMediaManager().TranslateDevicePath(devicePath);
   }
 #endif
 
@@ -567,7 +565,7 @@ std::string CMediaManager::GetDiskUniqueId(const std::string& devicePath)
 std::string CMediaManager::GetDiscPath()
 {
 #ifdef TARGET_WINDOWS
-  return g_mediaManager.TranslateDevicePath("");
+  return CServiceBroker::GetMediaManager().TranslateDevicePath("");
 #else
 
   CSingleLock lock(m_CritSecStorageProvider);
@@ -724,7 +722,7 @@ CMediaManager::DiscInfo CMediaManager::GetDiscInfo(const std::string& mediaPath)
     // correct the filename if needed
     if (StringUtils::StartsWith(pathVideoTS, "dvd://") ||
       StringUtils::StartsWith(pathVideoTS, "iso9660://"))
-      pathVideoTS = g_mediaManager.TranslateDevicePath("");
+      pathVideoTS = CServiceBroker::GetMediaManager().TranslateDevicePath("");
 
 
     CFileItem item(pathVideoTS, false);
diff --git a/xbmc/storage/MediaManager.h b/xbmc/storage/MediaManager.h
index 9e427f599236..47336782b5aa 100644
--- a/xbmc/storage/MediaManager.h
+++ b/xbmc/storage/MediaManager.h
@@ -116,6 +116,3 @@ class CMediaManager : public IStorageEventsCallback, public IJobCallback
   void RemoveDiscInfo(const std::string& devicePath);
   std::map<std::string, DiscInfo> m_mapDiscInfo;
 };
-
-extern class CMediaManager g_mediaManager;
-
diff --git a/xbmc/utils/FileUtils.cpp b/xbmc/utils/FileUtils.cpp
index 9f19808b4e9d..a1431f634334 100644
--- a/xbmc/utils/FileUtils.cpp
+++ b/xbmc/utils/FileUtils.cpp
@@ -149,7 +149,8 @@ bool CFileUtils::RemoteAccessAllowed(const std::string &strPath)
   }  
   // Check auto-mounted sources
   VECSOURCES sources;
-  g_mediaManager.GetRemovableDrives(sources);   // Sources returned allways have m_allowsharing = true
+  CServiceBroker::GetMediaManager().GetRemovableDrives(
+      sources); // Sources returned allways have m_allowsharing = true
   //! @todo Make sharing of auto-mounted sources user configurable
   int sourceIndex = CUtil::GetMatchingSource(realPath, sources, isSource);
   if (sourceIndex >= 0 && sourceIndex < static_cast<int>(sources.size()) && 
diff --git a/xbmc/video/VideoDatabase.cpp b/xbmc/video/VideoDatabase.cpp
index 8b0fe7293646..9b5cc01fb8a1 100644
--- a/xbmc/video/VideoDatabase.cpp
+++ b/xbmc/video/VideoDatabase.cpp
@@ -8968,7 +8968,7 @@ void CVideoDatabase::CleanDatabase(CGUIDialogProgressBarHandle* handle, const st
 
     std::string filesToTestForDelete;
     VECSOURCES videoSources(*CMediaSourceSettings::GetInstance().GetSources("video"));
-    g_mediaManager.GetRemovableDrives(videoSources);
+    CServiceBroker::GetMediaManager().GetRemovableDrives(videoSources);
 
     int total = m_pDS2->num_rows();
     int current = 0;
@@ -9310,7 +9310,7 @@ std::vector<int> CVideoDatabase::CleanMediaType(const std::string &mediaType, co
                     table.c_str(), cleanableFileIDs.c_str());
 
   VECSOURCES videoSources(*CMediaSourceSettings::GetInstance().GetSources("video"));
-  g_mediaManager.GetRemovableDrives(videoSources);
+  CServiceBroker::GetMediaManager().GetRemovableDrives(videoSources);
 
   // map of parent path ID to boolean pair (if not exists and user choice)
   std::map<int, std::pair<bool, bool> > sourcePathsDeleteDecisions;
diff --git a/xbmc/video/dialogs/GUIDialogVideoInfo.cpp b/xbmc/video/dialogs/GUIDialogVideoInfo.cpp
index 6243385728d8..62ffd46c3cd5 100644
--- a/xbmc/video/dialogs/GUIDialogVideoInfo.cpp
+++ b/xbmc/video/dialogs/GUIDialogVideoInfo.cpp
@@ -862,7 +862,7 @@ void CGUIDialogVideoInfo::OnGetArt()
     std::string result;
     VECSOURCES sources(*CMediaSourceSettings::GetInstance().GetSources("video"));
     AddItemPathToFileBrowserSources(sources, *m_movieItem);
-    g_mediaManager.GetLocalDrives(sources);
+    CServiceBroker::GetMediaManager().GetLocalDrives(sources);
     if (CGUIDialogFileBrowser::ShowAndGetImage(items, sources, g_localizeStrings.Get(13511), result) &&
         result != "thumb://Current") // user didn't choose the one they have
     {
@@ -986,7 +986,7 @@ void CGUIDialogVideoInfo::OnGetFanart()
   std::string result;
   VECSOURCES sources(*CMediaSourceSettings::GetInstance().GetSources("video"));
   AddItemPathToFileBrowserSources(sources, item);
-  g_mediaManager.GetLocalDrives(sources);
+  CServiceBroker::GetMediaManager().GetLocalDrives(sources);
   bool flip=false;
   if (!CGUIDialogFileBrowser::ShowAndGetImage(items, sources, g_localizeStrings.Get(20437), result, &flip, 20445) ||
     StringUtils::EqualsNoCase(result, "fanart://Current"))
@@ -2002,7 +2002,7 @@ bool CGUIDialogVideoInfo::ManageVideoItemArtwork(const CFileItemPtr &item, const
 
   std::string result;
   VECSOURCES sources=*CMediaSourceSettings::GetInstance().GetSources("video");
-  g_mediaManager.GetLocalDrives(sources);
+  CServiceBroker::GetMediaManager().GetLocalDrives(sources);
   AddItemPathToFileBrowserSources(sources, *item);
   if (!CGUIDialogFileBrowser::ShowAndGetImage(items, sources, g_localizeStrings.Get(13511), result))
     return false;   // user cancelled
@@ -2230,7 +2230,7 @@ bool CGUIDialogVideoInfo::OnGetFanart(const CFileItemPtr &videoItem)
 
   std::string result;
   VECSOURCES sources(*CMediaSourceSettings::GetInstance().GetSources("video"));
-  g_mediaManager.GetLocalDrives(sources);
+  CServiceBroker::GetMediaManager().GetLocalDrives(sources);
   AddItemPathToFileBrowserSources(sources, item);
   bool flip = false;
   if (!CGUIDialogFileBrowser::ShowAndGetImage(items, sources, g_localizeStrings.Get(20437), result, &flip, 20445) ||
diff --git a/xbmc/video/windows/GUIWindowVideoBase.cpp b/xbmc/video/windows/GUIWindowVideoBase.cpp
index 1afa9eea8fc8..f9761319e4ae 100644
--- a/xbmc/video/windows/GUIWindowVideoBase.cpp
+++ b/xbmc/video/windows/GUIWindowVideoBase.cpp
@@ -125,7 +125,8 @@ bool CGUIWindowVideoBase::OnMessage(CGUIMessage& message)
       if (iControl == CONTROL_PLAY_DVD)
       {
         // play movie...
-        MEDIA_DETECT::CAutorun::PlayDiscAskResume(g_mediaManager.TranslateDevicePath(""));
+        MEDIA_DETECT::CAutorun::PlayDiscAskResume(
+            CServiceBroker::GetMediaManager().TranslateDevicePath(""));
       }
       else
 #endif
diff --git a/xbmc/windowing/windows/WinEventsWin32.cpp b/xbmc/windowing/windows/WinEventsWin32.cpp
index 11c088314bb0..350b45d87af8 100644
--- a/xbmc/windowing/windows/WinEventsWin32.cpp
+++ b/xbmc/windowing/windows/WinEventsWin32.cpp
@@ -773,7 +773,7 @@ LRESULT CALLBACK CWinEventsWin32::WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, L
                   CMediaSource share;
                   share.strPath = strdrive;
                   share.strName = share.strPath;
-                  g_mediaManager.RemoveAutoSource(share);
+                  CServiceBroker::GetMediaManager().RemoveAutoSource(share);
                 }
               }
               else
diff --git a/xbmc/windows/GUIMediaWindow.cpp b/xbmc/windows/GUIMediaWindow.cpp
index 4fd115e5349c..143e7425b960 100644
--- a/xbmc/windows/GUIMediaWindow.cpp
+++ b/xbmc/windows/GUIMediaWindow.cpp
@@ -840,7 +840,7 @@ bool CGUIMediaWindow::Update(const std::string &strDirectory, bool updateFilterP
   {
     // Removable sources
     VECSOURCES removables;
-    g_mediaManager.GetRemovableDrives(removables);
+    CServiceBroker::GetMediaManager().GetRemovableDrives(removables);
     for (auto s : removables)
     {
       if (URIUtils::CompareWithoutSlashAtEnd(s.strPath, m_vecItems->GetPath()))
@@ -1178,7 +1178,7 @@ bool CGUIMediaWindow::HaveDiscOrConnection(const std::string& strPath, int iDriv
 {
   if (iDriveType==CMediaSource::SOURCE_TYPE_DVD)
   {
-    if (!g_mediaManager.IsDiscInDrive(strPath))
+    if (!CServiceBroker::GetMediaManager().IsDiscInDrive(strPath))
     {
       HELPERS::ShowOKDialogText(CVariant{218}, CVariant{219});
       return false;
diff --git a/xbmc/windows/GUIWindowFileManager.cpp b/xbmc/windows/GUIWindowFileManager.cpp
index b55dc4efcbbe..9f81f84743a4 100644
--- a/xbmc/windows/GUIWindowFileManager.cpp
+++ b/xbmc/windows/GUIWindowFileManager.cpp
@@ -362,7 +362,7 @@ void CGUIWindowFileManager::OnSort(int iList)
           pItem->SetFileSizeLabel();
         }
       }
-      else if (pItem->IsDVD() && g_mediaManager.IsDiscInDrive())
+      else if (pItem->IsDVD() && CServiceBroker::GetMediaManager().IsDiscInDrive())
       {
         std::error_code ec;
         auto freeSpace = space(pItem->GetPath(), ec);
@@ -686,7 +686,7 @@ bool CGUIWindowFileManager::HaveDiscOrConnection( std::string& strPath, int iDri
 {
   if ( iDriveType == CMediaSource::SOURCE_TYPE_DVD )
   {
-    if ( !g_mediaManager.IsDiscInDrive(strPath) )
+    if (!CServiceBroker::GetMediaManager().IsDiscInDrive(strPath))
     {
       HELPERS::ShowOKDialogText(CVariant{218}, CVariant{219});
       int iList = GetFocusedList();
diff --git a/xbmc/windows/GUIWindowSystemInfo.cpp b/xbmc/windows/GUIWindowSystemInfo.cpp
index 9687b085e372..0f22ff5878fd 100644
--- a/xbmc/windows/GUIWindowSystemInfo.cpp
+++ b/xbmc/windows/GUIWindowSystemInfo.cpp
@@ -105,7 +105,7 @@ void CGUIWindowSystemInfo::FrameMove()
   {
     SET_CONTROL_LABEL(40, g_localizeStrings.Get(20155));
     if (m_diskUsage.empty())
-      m_diskUsage = g_mediaManager.GetDiskUsage();
+      m_diskUsage = CServiceBroker::GetMediaManager().GetDiskUsage();
 
     for (size_t d = 0; d < m_diskUsage.size(); d++)
     {
