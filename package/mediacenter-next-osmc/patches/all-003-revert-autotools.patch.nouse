From 01abb60cd097f74390dbab206d581ad401c0e5f3 Mon Sep 17 00:00:00 2001
From: Greg McCarthy <greg@gjmccarthy.co.uk>
Date: Mon, 19 Dec 2016 09:59:34 +0000
Subject: [PATCH] Revert autotools

---
 .dummy.am                                          |    2 +
 Makefile.in                                        |  638 ++++++
 Makefile.include.in                                |  147 ++
 addons/skin.estouchy/media/Makefile.in             |   14 +
 addons/skin.estuary/media/Makefile.in              |   23 +
 bootstrap                                          |    3 +
 bootstrap.mk                                       |   20 +
 build-aux/.dummy                                   |    1 +
 codegenerator.mk                                   |   71 +
 configure.ac                                       | 2408 ++++++++++++++++++++
 gitrev.sh                                          |   15 +
 lib/UnrarXLib/Makefile                             |   49 +
 lib/libUPnP/Makefile.in                            |  108 +
 lib/libexif/Makefile.in                            |   21 +
 m4/ax_cxx_compile_stdcxx_11.m4                     |  146 ++
 m4/ax_prog_cc_for_build.m4                         |  125 +
 m4/ax_prog_cxx_for_build.m4                        |  110 +
 m4/ax_python_devel.m4                              |  325 +++
 m4/xbmc_arch.m4                                    |   83 +
 tools/EventClients/Clients/OSXRemote/Makefile.in   |   18 +
 tools/EventClients/Makefile.in                     |   28 +
 tools/buildsteps/rbpi/prepare-xbmc                 |    1 +
 tools/depends/configure.ac                         |    4 +-
 tools/depends/m4/ax_cxx_compile_stdcxx_11.m4       |  146 --
 tools/depends/m4/xbmc_arch.m4                      |   83 -
 xbmc/Makefile.in                                   |   58 +
 xbmc/addons/Makefile                               |   39 +
 xbmc/addons/interfaces/Addon/Makefile              |    7 +
 xbmc/addons/interfaces/AudioDSP/Makefile           |    7 +
 xbmc/addons/interfaces/AudioEngine/Makefile        |    6 +
 xbmc/addons/interfaces/Codec/Makefile              |    7 +
 xbmc/addons/interfaces/GUI/Makefile                |    9 +
 xbmc/addons/interfaces/Game/Makefile               |    7 +
 xbmc/addons/interfaces/InputStream/Makefile        |    7 +
 xbmc/addons/interfaces/Makefile.in                 |    6 +
 xbmc/addons/interfaces/PVR/Makefile                |    6 +
 xbmc/addons/interfaces/Peripheral/Makefile         |    7 +
 xbmc/addons/test/Makefile                          |   12 +
 xbmc/cdrip/Makefile.in                             |    9 +
 xbmc/commons/Makefile                              |    8 +
 xbmc/contrib/kissfft/Makefile                      |    6 +
 xbmc/cores/AudioEngine/Makefile.in                 |   88 +
 xbmc/cores/AudioEngine/Sinks/test/Makefile         |    9 +
 xbmc/cores/AudioEngine/Utils/AEUtil.cpp            |    4 +
 xbmc/cores/DllLoader/Makefile.in                   |   23 +
 xbmc/cores/DllLoader/exports/Makefile.in           |   23 +
 xbmc/cores/DllLoader/exports/util/Makefile         |    6 +
 xbmc/cores/ExternalPlayer/Makefile                 |    6 +
 xbmc/cores/Makefile.in                             |    7 +
 xbmc/cores/RetroPlayer/Makefile.in                 |   13 +
 xbmc/cores/VideoPlayer/DVDAudio.h                  |    3 +
 .../VideoPlayer/DVDCodecs/Audio/DVDAudioCodec.h    |    4 +
 xbmc/cores/VideoPlayer/DVDCodecs/Audio/Makefile.in |   12 +
 xbmc/cores/VideoPlayer/DVDCodecs/DVDCodecs.h       |    4 +
 xbmc/cores/VideoPlayer/DVDCodecs/Makefile.in       |   10 +
 .../VideoPlayer/DVDCodecs/Overlay/Makefile.in      |   15 +
 .../DVDCodecs/Video/DVDVideoCodecFFmpeg.cpp        |    3 +
 .../DVDCodecs/Video/DVDVideoCodecOpenMax.cpp       |    4 +-
 .../VideoPlayer/DVDCodecs/Video/MMALCodec.cpp      |    4 +-
 xbmc/cores/VideoPlayer/DVDCodecs/Video/Makefile.in |   41 +
 xbmc/cores/VideoPlayer/DVDCodecs/Video/OpenMax.cpp |    4 +-
 .../VideoPlayer/DVDCodecs/Video/OpenMaxVideo.cpp   |    4 +-
 xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemux.h      |    4 +
 xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxBXA.h   |    4 +
 xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxCDDA.h  |    4 +
 .../VideoPlayer/DVDDemuxers/DVDDemuxUtils.cpp      |    3 +
 xbmc/cores/VideoPlayer/DVDDemuxers/Makefile.in     |   18 +
 .../DVDInputStreams/DVDStateSerializer.cpp         |    3 +
 xbmc/cores/VideoPlayer/DVDInputStreams/Makefile    |   21 +
 xbmc/cores/VideoPlayer/DVDStreamInfo.h             |    4 +
 xbmc/cores/VideoPlayer/DVDSubtitles/DllLibass.h    |    3 +
 xbmc/cores/VideoPlayer/DVDSubtitles/Makefile.in    |   20 +
 xbmc/cores/VideoPlayer/Makefile.in                 |   24 +
 xbmc/cores/VideoPlayer/Process/Makefile.in         |   18 +
 xbmc/cores/VideoPlayer/VideoPlayerSubtitle.cpp     |    3 +
 .../VideoRenderers/HwDecRender/Makefile.in         |   32 +
 .../VideoPlayer/VideoRenderers/LinuxRendererGL.cpp |    3 +
 .../VideoRenderers/LinuxRendererGLES.cpp           |    3 +
 xbmc/cores/VideoPlayer/VideoRenderers/Makefile.in  |   30 +
 .../VideoRenderers/VideoShaders/Makefile           |    6 +
 xbmc/cores/omxplayer/Makefile.in                   |   18 +
 xbmc/cores/omxplayer/OMXAudio.cpp                  |    4 +-
 xbmc/cores/omxplayer/OMXAudioCodec.h               |    3 +
 xbmc/cores/omxplayer/OMXImage.cpp                  |    4 +-
 xbmc/cores/omxplayer/OMXPlayerAudio.cpp            |    4 +-
 xbmc/cores/omxplayer/OMXPlayerVideo.cpp            |    4 +-
 xbmc/cores/omxplayer/OMXVideo.cpp                  |    4 +-
 xbmc/cores/paplayer/Makefile.in                    |   18 +
 xbmc/cores/playercorefactory/Makefile.in           |    8 +
 xbmc/dbwrappers/Makefile                           |   11 +
 xbmc/dialogs/Makefile                              |   35 +
 xbmc/epg/Makefile                                  |   14 +
 xbmc/events/Makefile                               |   13 +
 xbmc/filesystem/DirectoryFactory.cpp               |    3 +
 xbmc/filesystem/FTPParse.cpp                       |    4 +
 xbmc/filesystem/FileFactory.cpp                    |    3 +
 xbmc/filesystem/Makefile.in                        |  120 +
 xbmc/filesystem/MusicDatabaseDirectory/Makefile    |   26 +
 xbmc/filesystem/VideoDatabaseDirectory/Makefile    |   22 +
 xbmc/filesystem/posix/PosixFile.cpp                |    5 +
 xbmc/filesystem/test/Makefile                      |   14 +
 xbmc/freebsd/Makefile.in                           |    8 +
 xbmc/games/Makefile                                |    7 +
 xbmc/games/addons/Makefile                         |   12 +
 xbmc/games/addons/playback/Makefile                |    7 +
 xbmc/games/addons/savestates/Makefile              |   14 +
 xbmc/games/controllers/Makefile                    |    9 +
 xbmc/games/controllers/dialogs/Makefile            |    6 +
 xbmc/games/controllers/guicontrols/Makefile        |   11 +
 xbmc/games/controllers/windows/Makefile            |    9 +
 xbmc/games/dialogs/Makefile                        |    6 +
 xbmc/games/ports/Makefile                          |    7 +
 xbmc/games/tags/Makefile                           |    6 +
 xbmc/games/windows/Makefile                        |    7 +
 xbmc/guilib/Makefile.in                            |   97 +
 xbmc/input/Makefile                                |   18 +
 xbmc/input/joysticks/Makefile                      |   13 +
 xbmc/input/joysticks/dialogs/Makefile              |    6 +
 xbmc/input/joysticks/generic/Makefile              |    9 +
 xbmc/input/keyboard/Makefile                       |    6 +
 xbmc/input/keyboard/generic/Makefile               |    6 +
 xbmc/input/linux/Makefile.in                       |    7 +
 xbmc/input/mouse/Makefile                          |    6 +
 xbmc/input/mouse/generic/Makefile                  |    6 +
 xbmc/input/touch/Makefile                          |    6 +
 xbmc/input/touch/generic/Makefile                  |   10 +
 xbmc/interfaces/Makefile.in                        |    6 +
 xbmc/interfaces/builtins/Makefile.in               |   25 +
 xbmc/interfaces/generic/Makefile                   |    8 +
 xbmc/interfaces/info/Makefile                      |    8 +
 xbmc/interfaces/json-rpc/Makefile                  |   47 +
 xbmc/interfaces/legacy/AddonString.h               |    3 +
 xbmc/interfaces/legacy/Makefile                    |   37 +
 xbmc/interfaces/legacy/ModuleXbmc.cpp              |    3 +
 xbmc/interfaces/legacy/wsgi/Makefile               |   12 +
 xbmc/interfaces/python/AddonPythonInvoker.cpp      |    4 +
 xbmc/interfaces/python/ContextItemAddonInvoker.cpp |    4 +
 xbmc/interfaces/python/LanguageHook.h              |    4 +
 xbmc/interfaces/python/Makefile.in                 |   29 +
 xbmc/interfaces/python/PythonInvoker.cpp           |    4 +
 xbmc/interfaces/python/XBPython.cpp                |    4 +
 xbmc/interfaces/python/preamble.h                  |    4 +
 xbmc/interfaces/python/test/Makefile.in            |   10 +
 xbmc/linux/DllBCM.h                                |    3 +
 xbmc/linux/DllOMX.h                                |    3 +
 xbmc/linux/Makefile.in                             |   28 +
 xbmc/linux/OMXClock.cpp                            |    4 +-
 xbmc/linux/OMXCore.cpp                             |    4 +-
 xbmc/linux/RBP.h                                   |    3 +-
 xbmc/linux/sse4/Makefile.in                        |   20 +
 xbmc/listproviders/Makefile                        |    8 +
 xbmc/media/Makefile                                |    6 +
 xbmc/messaging/Makefile.in                         |    7 +
 xbmc/messaging/helpers/Makefile.in                 |    6 +
 xbmc/music/Makefile                                |   15 +
 xbmc/music/dialogs/Makefile                        |    9 +
 xbmc/music/infoscanner/Makefile                    |    9 +
 xbmc/music/tags/Makefile                           |   15 +
 xbmc/music/tags/test/Makefile                      |    9 +
 xbmc/music/windows/Makefile                        |   11 +
 xbmc/network/Makefile.in                           |   29 +
 xbmc/network/WebServer.cpp                         |    4 +
 xbmc/network/dacp/Makefile                         |    6 +
 xbmc/network/httprequesthandler/Makefile           |   15 +
 xbmc/network/httprequesthandler/python/Makefile.in |    9 +
 xbmc/network/linux/Makefile                        |    8 +
 xbmc/network/mdns/Makefile                         |    7 +
 xbmc/network/osx/Makefile                          |    7 +
 xbmc/network/test/Makefile                         |    9 +
 xbmc/network/upnp/Makefile.in                      |   25 +
 xbmc/network/websocket/Makefile                    |    9 +
 xbmc/peripherals/Makefile                          |    8 +
 xbmc/peripherals/addons/Makefile.in                |   10 +
 xbmc/peripherals/bus/Makefile.in                   |   29 +
 xbmc/peripherals/devices/Makefile.in               |   19 +
 xbmc/peripherals/dialogs/Makefile                  |    6 +
 xbmc/pictures/Makefile                             |   15 +
 xbmc/pictures/Picture.cpp                          |    3 +
 xbmc/platform/Makefile.in                          |   31 +
 xbmc/platform/android/activity/DllGraphicBuffer.h  |    3 +
 xbmc/platform/android/activity/Makefile.in         |   35 +
 xbmc/platform/android/bionic_supplement/Makefile   |    6 +
 xbmc/platform/android/jni/Makefile.in              |   91 +
 xbmc/platform/android/loader/Makefile.in           |    5 +
 xbmc/platform/darwin/OSXGNUReplacements.c          |    3 +
 xbmc/platform/darwin/osx/Makefile.in               |    8 +
 xbmc/platform/posix/Makefile.in                    |    8 +
 xbmc/platform/win32/strverscmp.cpp                 |    3 +
 xbmc/playlists/Makefile                            |   15 +
 xbmc/powermanagement/Makefile                      |    8 +
 xbmc/powermanagement/android/Makefile              |    6 +
 xbmc/powermanagement/linux/Makefile                |    9 +
 xbmc/powermanagement/osx/Makefile                  |    6 +
 xbmc/profiles/Makefile                             |    7 +
 xbmc/profiles/dialogs/Makefile                     |    7 +
 xbmc/profiles/windows/Makefile                     |    6 +
 xbmc/programs/Makefile                             |    7 +
 xbmc/pvr/Makefile                                  |   13 +
 xbmc/pvr/addons/Makefile                           |    6 +
 xbmc/pvr/channels/Makefile                         |   11 +
 xbmc/pvr/dialogs/Makefile                          |   14 +
 xbmc/pvr/recordings/Makefile                       |    8 +
 xbmc/pvr/timers/Makefile                           |    8 +
 xbmc/pvr/windows/Makefile                          |   14 +
 xbmc/rendering/Makefile                            |    6 +
 xbmc/rendering/gl/Makefile                         |    7 +
 xbmc/rendering/gles/Makefile                       |    6 +
 xbmc/settings/Makefile                             |   19 +
 xbmc/settings/dialogs/Makefile                     |   11 +
 xbmc/settings/lib/Makefile                         |   15 +
 xbmc/settings/windows/Makefile                     |   10 +
 xbmc/storage/Makefile                              |   10 +
 xbmc/storage/android/Makefile                      |    6 +
 xbmc/storage/linux/Makefile                        |    8 +
 xbmc/storage/osx/Makefile                          |    6 +
 xbmc/system.h                                      |    4 +
 xbmc/test/Makefile                                 |   15 +
 xbmc/threads/Makefile                              |   11 +
 xbmc/threads/platform/pthreads/ThreadImpl.cpp      |    3 +
 xbmc/threads/test/Makefile                         |   12 +
 xbmc/utils/CharsetConverter.cpp                    |    4 +
 xbmc/utils/CryptThreading.cpp                      |    4 +
 xbmc/utils/EndianSwap.h                            |    5 +
 xbmc/utils/Makefile.in                             |   93 +
 xbmc/utils/TimeUtils.cpp                           |    4 +
 xbmc/utils/Weather.cpp                             |    4 +
 xbmc/utils/XBMCTinyXML.h                           |    3 +
 xbmc/utils/md5.cpp                                 |    3 +
 xbmc/utils/test/Makefile                           |   56 +
 xbmc/utils/uXstrings.h                             |    3 +
 xbmc/video/Makefile                                |   19 +
 xbmc/video/VideoDatabase.cpp                       |    4 +
 xbmc/video/dialogs/GUIDialogCMSSettings.cpp        |    3 +
 xbmc/video/dialogs/Makefile                        |   14 +
 xbmc/video/jobs/Makefile                           |   11 +
 xbmc/video/test/Makefile                           |    9 +
 xbmc/video/videosync/Makefile                      |   12 +
 xbmc/video/windows/Makefile                        |   10 +
 xbmc/view/Makefile                                 |    9 +
 xbmc/windowing/Makefile.in                         |   10 +
 xbmc/windowing/X11/Makefile                        |   12 +
 xbmc/windowing/android/Makefile                    |    7 +
 xbmc/windowing/egl/Makefile.in                     |   19 +
 xbmc/windowing/osx/Makefile                        |   10 +
 xbmc/windows/Makefile                              |   17 +
 245 files changed, 7095 insertions(+), 243 deletions(-)
 create mode 100644 .dummy.am
 create mode 100644 Makefile.in
 create mode 100644 Makefile.include.in
 create mode 100644 addons/skin.estouchy/media/Makefile.in
 create mode 100644 addons/skin.estuary/media/Makefile.in
 create mode 100755 bootstrap
 create mode 100644 bootstrap.mk
 create mode 100644 build-aux/.dummy
 create mode 100644 codegenerator.mk
 create mode 100644 configure.ac
 create mode 100755 gitrev.sh
 create mode 100644 lib/UnrarXLib/Makefile
 create mode 100644 lib/libUPnP/Makefile.in
 create mode 100644 lib/libexif/Makefile.in
 create mode 100644 m4/ax_cxx_compile_stdcxx_11.m4
 create mode 100644 m4/ax_prog_cc_for_build.m4
 create mode 100644 m4/ax_prog_cxx_for_build.m4
 create mode 100644 m4/ax_python_devel.m4
 create mode 100644 m4/xbmc_arch.m4
 create mode 100644 tools/EventClients/Clients/OSXRemote/Makefile.in
 create mode 100644 tools/EventClients/Makefile.in
 delete mode 100644 tools/depends/m4/ax_cxx_compile_stdcxx_11.m4
 delete mode 100644 tools/depends/m4/xbmc_arch.m4
 create mode 100644 xbmc/Makefile.in
 create mode 100644 xbmc/addons/Makefile
 create mode 100644 xbmc/addons/interfaces/Addon/Makefile
 create mode 100644 xbmc/addons/interfaces/AudioDSP/Makefile
 create mode 100644 xbmc/addons/interfaces/AudioEngine/Makefile
 create mode 100644 xbmc/addons/interfaces/Codec/Makefile
 create mode 100644 xbmc/addons/interfaces/GUI/Makefile
 create mode 100644 xbmc/addons/interfaces/Game/Makefile
 create mode 100644 xbmc/addons/interfaces/InputStream/Makefile
 create mode 100644 xbmc/addons/interfaces/Makefile.in
 create mode 100644 xbmc/addons/interfaces/PVR/Makefile
 create mode 100644 xbmc/addons/interfaces/Peripheral/Makefile
 create mode 100644 xbmc/addons/test/Makefile
 create mode 100644 xbmc/cdrip/Makefile.in
 create mode 100644 xbmc/commons/Makefile
 create mode 100644 xbmc/contrib/kissfft/Makefile
 create mode 100644 xbmc/cores/AudioEngine/Makefile.in
 create mode 100644 xbmc/cores/AudioEngine/Sinks/test/Makefile
 create mode 100644 xbmc/cores/DllLoader/Makefile.in
 create mode 100644 xbmc/cores/DllLoader/exports/Makefile.in
 create mode 100644 xbmc/cores/DllLoader/exports/util/Makefile
 create mode 100644 xbmc/cores/ExternalPlayer/Makefile
 create mode 100644 xbmc/cores/Makefile.in
 create mode 100644 xbmc/cores/RetroPlayer/Makefile.in
 create mode 100644 xbmc/cores/VideoPlayer/DVDCodecs/Audio/Makefile.in
 create mode 100644 xbmc/cores/VideoPlayer/DVDCodecs/Makefile.in
 create mode 100644 xbmc/cores/VideoPlayer/DVDCodecs/Overlay/Makefile.in
 create mode 100644 xbmc/cores/VideoPlayer/DVDCodecs/Video/Makefile.in
 create mode 100644 xbmc/cores/VideoPlayer/DVDDemuxers/Makefile.in
 create mode 100644 xbmc/cores/VideoPlayer/DVDInputStreams/Makefile
 create mode 100644 xbmc/cores/VideoPlayer/DVDSubtitles/Makefile.in
 create mode 100644 xbmc/cores/VideoPlayer/Makefile.in
 create mode 100644 xbmc/cores/VideoPlayer/Process/Makefile.in
 create mode 100644 xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/Makefile.in
 create mode 100644 xbmc/cores/VideoPlayer/VideoRenderers/Makefile.in
 create mode 100644 xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/Makefile
 create mode 100644 xbmc/cores/omxplayer/Makefile.in
 create mode 100644 xbmc/cores/paplayer/Makefile.in
 create mode 100644 xbmc/cores/playercorefactory/Makefile.in
 create mode 100644 xbmc/dbwrappers/Makefile
 create mode 100644 xbmc/dialogs/Makefile
 create mode 100644 xbmc/epg/Makefile
 create mode 100644 xbmc/events/Makefile
 create mode 100644 xbmc/filesystem/Makefile.in
 create mode 100644 xbmc/filesystem/MusicDatabaseDirectory/Makefile
 create mode 100644 xbmc/filesystem/VideoDatabaseDirectory/Makefile
 create mode 100644 xbmc/filesystem/test/Makefile
 create mode 100644 xbmc/freebsd/Makefile.in
 create mode 100644 xbmc/games/Makefile
 create mode 100644 xbmc/games/addons/Makefile
 create mode 100644 xbmc/games/addons/playback/Makefile
 create mode 100644 xbmc/games/addons/savestates/Makefile
 create mode 100644 xbmc/games/controllers/Makefile
 create mode 100644 xbmc/games/controllers/dialogs/Makefile
 create mode 100644 xbmc/games/controllers/guicontrols/Makefile
 create mode 100644 xbmc/games/controllers/windows/Makefile
 create mode 100644 xbmc/games/dialogs/Makefile
 create mode 100644 xbmc/games/ports/Makefile
 create mode 100644 xbmc/games/tags/Makefile
 create mode 100644 xbmc/games/windows/Makefile
 create mode 100644 xbmc/guilib/Makefile.in
 create mode 100644 xbmc/input/Makefile
 create mode 100644 xbmc/input/joysticks/Makefile
 create mode 100644 xbmc/input/joysticks/dialogs/Makefile
 create mode 100644 xbmc/input/joysticks/generic/Makefile
 create mode 100644 xbmc/input/keyboard/Makefile
 create mode 100644 xbmc/input/keyboard/generic/Makefile
 create mode 100644 xbmc/input/linux/Makefile.in
 create mode 100644 xbmc/input/mouse/Makefile
 create mode 100644 xbmc/input/mouse/generic/Makefile
 create mode 100644 xbmc/input/touch/Makefile
 create mode 100644 xbmc/input/touch/generic/Makefile
 create mode 100644 xbmc/interfaces/Makefile.in
 create mode 100644 xbmc/interfaces/builtins/Makefile.in
 create mode 100644 xbmc/interfaces/generic/Makefile
 create mode 100644 xbmc/interfaces/info/Makefile
 create mode 100644 xbmc/interfaces/json-rpc/Makefile
 create mode 100644 xbmc/interfaces/legacy/Makefile
 create mode 100644 xbmc/interfaces/legacy/wsgi/Makefile
 create mode 100644 xbmc/interfaces/python/Makefile.in
 create mode 100644 xbmc/interfaces/python/test/Makefile.in
 create mode 100644 xbmc/linux/Makefile.in
 create mode 100644 xbmc/linux/sse4/Makefile.in
 create mode 100644 xbmc/listproviders/Makefile
 create mode 100644 xbmc/media/Makefile
 create mode 100644 xbmc/messaging/Makefile.in
 create mode 100644 xbmc/messaging/helpers/Makefile.in
 create mode 100644 xbmc/music/Makefile
 create mode 100644 xbmc/music/dialogs/Makefile
 create mode 100644 xbmc/music/infoscanner/Makefile
 create mode 100644 xbmc/music/tags/Makefile
 create mode 100644 xbmc/music/tags/test/Makefile
 create mode 100644 xbmc/music/windows/Makefile
 create mode 100644 xbmc/network/Makefile.in
 create mode 100644 xbmc/network/dacp/Makefile
 create mode 100644 xbmc/network/httprequesthandler/Makefile
 create mode 100644 xbmc/network/httprequesthandler/python/Makefile.in
 create mode 100644 xbmc/network/linux/Makefile
 create mode 100644 xbmc/network/mdns/Makefile
 create mode 100644 xbmc/network/osx/Makefile
 create mode 100644 xbmc/network/test/Makefile
 create mode 100644 xbmc/network/upnp/Makefile.in
 create mode 100644 xbmc/network/websocket/Makefile
 create mode 100644 xbmc/peripherals/Makefile
 create mode 100644 xbmc/peripherals/addons/Makefile.in
 create mode 100644 xbmc/peripherals/bus/Makefile.in
 create mode 100644 xbmc/peripherals/devices/Makefile.in
 create mode 100644 xbmc/peripherals/dialogs/Makefile
 create mode 100644 xbmc/pictures/Makefile
 create mode 100644 xbmc/platform/Makefile.in
 create mode 100644 xbmc/platform/android/activity/Makefile.in
 create mode 100644 xbmc/platform/android/bionic_supplement/Makefile
 create mode 100644 xbmc/platform/android/jni/Makefile.in
 create mode 100644 xbmc/platform/android/loader/Makefile.in
 create mode 100644 xbmc/platform/darwin/osx/Makefile.in
 create mode 100644 xbmc/platform/posix/Makefile.in
 create mode 100644 xbmc/playlists/Makefile
 create mode 100644 xbmc/powermanagement/Makefile
 create mode 100644 xbmc/powermanagement/android/Makefile
 create mode 100644 xbmc/powermanagement/linux/Makefile
 create mode 100644 xbmc/powermanagement/osx/Makefile
 create mode 100644 xbmc/profiles/Makefile
 create mode 100644 xbmc/profiles/dialogs/Makefile
 create mode 100644 xbmc/profiles/windows/Makefile
 create mode 100644 xbmc/programs/Makefile
 create mode 100644 xbmc/pvr/Makefile
 create mode 100644 xbmc/pvr/addons/Makefile
 create mode 100644 xbmc/pvr/channels/Makefile
 create mode 100644 xbmc/pvr/dialogs/Makefile
 create mode 100644 xbmc/pvr/recordings/Makefile
 create mode 100644 xbmc/pvr/timers/Makefile
 create mode 100644 xbmc/pvr/windows/Makefile
 create mode 100644 xbmc/rendering/Makefile
 create mode 100644 xbmc/rendering/gl/Makefile
 create mode 100644 xbmc/rendering/gles/Makefile
 create mode 100644 xbmc/settings/Makefile
 create mode 100644 xbmc/settings/dialogs/Makefile
 create mode 100644 xbmc/settings/lib/Makefile
 create mode 100644 xbmc/settings/windows/Makefile
 create mode 100644 xbmc/storage/Makefile
 create mode 100644 xbmc/storage/android/Makefile
 create mode 100644 xbmc/storage/linux/Makefile
 create mode 100644 xbmc/storage/osx/Makefile
 create mode 100644 xbmc/test/Makefile
 create mode 100644 xbmc/threads/Makefile
 create mode 100644 xbmc/threads/test/Makefile
 create mode 100644 xbmc/utils/Makefile.in
 create mode 100644 xbmc/utils/test/Makefile
 create mode 100644 xbmc/video/Makefile
 create mode 100644 xbmc/video/dialogs/Makefile
 create mode 100644 xbmc/video/jobs/Makefile
 create mode 100644 xbmc/video/test/Makefile
 create mode 100644 xbmc/video/videosync/Makefile
 create mode 100644 xbmc/video/windows/Makefile
 create mode 100644 xbmc/view/Makefile
 create mode 100644 xbmc/windowing/Makefile.in
 create mode 100644 xbmc/windowing/X11/Makefile
 create mode 100644 xbmc/windowing/android/Makefile
 create mode 100644 xbmc/windowing/egl/Makefile.in
 create mode 100644 xbmc/windowing/osx/Makefile
 create mode 100644 xbmc/windows/Makefile

diff --git a/.dummy.am b/.dummy.am
new file mode 100644
index 0000000..a1cb390
--- /dev/null
+++ b/.dummy.am
@@ -0,0 +1,2 @@
+# Does nothing intentionally.
+# This exists solely so we can use AM_INIT_AUTOMAKE in configure.in
diff --git a/Makefile.in b/Makefile.in
new file mode 100644
index 0000000..d969646
--- /dev/null
+++ b/Makefile.in
@@ -0,0 +1,638 @@
+include bootstrap.mk
+
+null :=
+space := ${null} ${null}
+${space} := ${space}
+
+AUTOGENERATED_MAKEFILES=@OUTPUT_FILES@
+
+EC_DIRS= \
+	tools/EventClients
+
+DVDPCODECS_DIRS= \
+	lib \
+	lib/libdvd
+
+VideoPlayer_ARCHIVES=xbmc/cores/VideoPlayer/VideoPlayer.a \
+                   xbmc/cores/VideoPlayer/DVDCodecs/DVDCodecs.a \
+                   xbmc/cores/VideoPlayer/DVDCodecs/Audio/Audio.a \
+                   xbmc/cores/VideoPlayer/DVDCodecs/Overlay/Overlay.a \
+                   xbmc/cores/VideoPlayer/DVDCodecs/Video/Video.a \
+                   xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxers.a \
+                   xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreams.a \
+                   xbmc/cores/VideoPlayer/DVDSubtitles/DVDSubtitles.a \
+                   xbmc/cores/VideoPlayer/Process/Process.a
+
+DIRECTORY_ARCHIVES=$(VideoPlayer_ARCHIVES) \
+                   xbmc/addons/addons.a \
+                   xbmc/addons/interfaces/addon-interfaces.a \
+                   xbmc/addons/interfaces/Addon/addon-callbacks-addon.a \
+                   xbmc/addons/interfaces/AudioDSP/addon-callbacks-audiodsp.a \
+                   xbmc/addons/interfaces/AudioEngine/addon-callbacks-audioengine.a \
+                   xbmc/addons/interfaces/Codec/addon-callbacks-codec.a \
+                   xbmc/addons/interfaces/Game/addon-callbacks-game.a \
+                   xbmc/addons/interfaces/GUI/addon-callbacks-gui.a \
+                   xbmc/addons/interfaces/InputStream/addon-callbacks-inputstream.a \
+                   xbmc/addons/interfaces/Peripheral/addon-callbacks-peripheral.a \
+                   xbmc/addons/interfaces/PVR/addon-callbacks-pvr.a \
+                   xbmc/contrib/kissfft/kissfft.a \
+                   xbmc/cores/AudioEngine/audioengine.a \
+                   xbmc/cores/DllLoader/dllloader.a \
+                   xbmc/cores/DllLoader/exports/exports.a \
+                   xbmc/cores/DllLoader/exports/util/exports_utils.a \
+                   xbmc/cores/ExternalPlayer/ExternalPlayer.a \
+                   xbmc/cores/RetroPlayer/retroplayer.a \
+                   xbmc/cores/VideoPlayer/VideoRenderers/VideoRenderer.a \
+                   xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/VideoShaders.a \
+                   xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/HwDecRender.a \
+                   xbmc/cores/cores.a \
+                   xbmc/cores/paplayer/paplayer.a \
+                   xbmc/cores/playercorefactory/playercorefactory.a \
+                   xbmc/dbwrappers/dbwrappers.a \
+                   xbmc/dialogs/dialogs.a \
+                   xbmc/epg/epg.a \
+                   xbmc/events/events.a \
+                   xbmc/filesystem/MusicDatabaseDirectory/musicdatabasedirectory.a \
+                   xbmc/filesystem/VideoDatabaseDirectory/videodatabasedirectory.a \
+                   xbmc/filesystem/filesystem.a \
+                   xbmc/games/addons/gameaddons.a \
+                   xbmc/games/addons/playback/gameaddonplayback.a \
+                   xbmc/games/addons/savestates/gamesavestates.a \
+                   xbmc/games/controllers/controllers.a \
+                   xbmc/games/controllers/dialogs/controllerdialogs.a \
+                   xbmc/games/controllers/guicontrols/controllerguicontrols.a \
+                   xbmc/games/controllers/windows/controllerwindows.a \
+                   xbmc/games/dialogs/gamedialogs.a \
+                   xbmc/games/games.a \
+                   xbmc/games/ports/gameports.a \
+                   xbmc/games/tags/gameinfotags.a \
+                   xbmc/games/windows/gamewindows.a \
+                   xbmc/guilib/guilib.a \
+                   xbmc/input/input.a \
+                   xbmc/interfaces/builtins/builtins.a \
+                   xbmc/interfaces/generic/interfaces-generic.a \
+                   xbmc/interfaces/info/info.a \
+                   xbmc/interfaces/interfaces.a \
+                   xbmc/interfaces/json-rpc/json-rpc.a \
+                   xbmc/interfaces/legacy/legacy.a \
+                   xbmc/interfaces/python/python_binding.a \
+                   xbmc/linux/linux.a \
+                   xbmc/listproviders/listproviders.a \
+                   xbmc/platform/platform.a \
+                   xbmc/media/media.a \
+                   xbmc/messaging/messaging.a \
+                   xbmc/messaging/helpers/messagingHelpers.a \
+                   xbmc/music/dialogs/musicdialogs.a \
+                   xbmc/music/infoscanner/musicscanner.a \
+                   xbmc/music/music.a \
+                   xbmc/music/tags/musictags.a \
+                   xbmc/music/windows/musicwindows.a \
+                   xbmc/network/dacp/dacp.a \
+                   xbmc/network/websocket/websocket.a \
+                   xbmc/network/network.a \
+                   xbmc/peripherals/addons/peripheral-addons.a \
+                   xbmc/peripherals/bus/peripheral-bus.a \
+                   xbmc/peripherals/devices/peripheral-devices.a \
+                   xbmc/peripherals/dialogs/peripheral-dialogs.a \
+                   xbmc/peripherals/peripherals.a \
+                   xbmc/pictures/pictures.a \
+                   xbmc/playlists/playlists.a \
+                   xbmc/powermanagement/powermanagement.a \
+                   xbmc/profiles/profiles.a \
+                   xbmc/profiles/dialogs/profiles_dialogs.a \
+                   xbmc/profiles/windows/profiles_windows.a \
+                   xbmc/programs/programs.a \
+                   xbmc/pvr/addons/pvraddons.a \
+                   xbmc/pvr/channels/pvrchannels.a \
+                   xbmc/pvr/dialogs/pvrdialogs.a \
+                   xbmc/pvr/pvr.a \
+                   xbmc/pvr/recordings/pvrrecordings.a \
+                   xbmc/pvr/timers/pvrtimers.a \
+                   xbmc/pvr/windows/pvrwindows.a \
+                   xbmc/rendering/rendering.a \
+                   xbmc/settings/settings.a \
+                   xbmc/settings/dialogs/settings_dialogs.a \
+                   xbmc/settings/lib/settings_lib.a \
+                   xbmc/settings/windows/settings_windows.a \
+                   xbmc/storage/storage.a \
+                   xbmc/utils/utils.a \
+                   xbmc/video/dialogs/videodialogs.a \
+                   xbmc/video/jobs/video-jobs.a \
+                   xbmc/video/videosync/videosync.a \
+                   xbmc/video/video.a \
+                   xbmc/video/windows/videowindows.a \
+                   xbmc/view/view.a \
+                   xbmc/windowing/windowing.a \
+                   xbmc/windows/windows.a \
+                   xbmc/xbmc.a \
+
+NWAOBJSXBMC=	xbmc/threads/threads.a \
+		xbmc/commons/commons.a
+
+ifeq (@USE_OPTICAL_DRIVE@,1)
+DIRECTORY_ARCHIVES += xbmc/cdrip/cdrip.a 
+endif
+
+ifeq (@USE_WEB_SERVER@,1)
+DIRECTORY_ARCHIVES += xbmc/interfaces/legacy/wsgi/legacy-wsgi.a
+DIRECTORY_ARCHIVES += xbmc/network/httprequesthandler/httprequesthandlers.a
+DIRECTORY_ARCHIVES += xbmc/network/httprequesthandler/python/httprequesthandlers-python.a
+endif
+
+ifeq (@USE_OPENGL@,1)
+DIRECTORY_ARCHIVES += xbmc/rendering/gl/rendering_gl.a
+endif
+
+ifeq (@USE_OPENGLES@,1)
+DIRECTORY_ARCHIVES += xbmc/rendering/gles/rendering_gles.a
+DIRECTORY_ARCHIVES += xbmc/windowing/egl/windowing_egl.a
+endif
+
+ifeq (@USE_UPNP@,1)
+DIRECTORY_ARCHIVES += lib/libUPnP/libupnp.a \
+                      xbmc/network/upnp/upnp.a
+endif
+
+ifeq (@USE_MDNSEMBEDDED@,1)
+DIRECTORY_ARCHIVES += xbmc/network/mdns/mdns.a
+endif
+
+ifeq ($(findstring osx,@ARCH@),osx)
+DIRECTORY_ARCHIVES += xbmc/input/joysticks/input_joysticks.a
+DIRECTORY_ARCHIVES += xbmc/input/joysticks/dialogs/input_joystick_dialogs.a
+DIRECTORY_ARCHIVES += xbmc/input/joysticks/generic/input_joysticks_generic.a
+DIRECTORY_ARCHIVES += xbmc/input/keyboard/input_keyboard.a
+DIRECTORY_ARCHIVES += xbmc/input/keyboard/generic/input_keyboard_generic.a
+DIRECTORY_ARCHIVES += xbmc/input/mouse/input_mouse.a
+DIRECTORY_ARCHIVES += xbmc/input/mouse/generic/input_mouse_generic.a
+DIRECTORY_ARCHIVES += xbmc/network/osx/network.a
+DIRECTORY_ARCHIVES += xbmc/network/linux/network_linux.a
+DIRECTORY_ARCHIVES += xbmc/powermanagement/osx/powermanagement.a
+DIRECTORY_ARCHIVES += xbmc/storage/osx/storage.a
+DIRECTORY_ARCHIVES += xbmc/windowing/osx/windowing_osx.a
+INSTALL_FILTER += .*repository\.pvr-android\.xbmc\.org.*
+INSTALL_FILTER += .*repository\.pvr-ios\.xbmc\.org.*
+INSTALL_FILTER += .*repository\.pvr-win32\.xbmc\.org.*
+else
+INSTALL_FILTER += .*repository\.pvr-ios\.xbmc\.org.*
+INSTALL_FILTER += .*repository\.pvr-win32\.xbmc\.org.*
+INSTALL_FILTER += .*repository\.pvr-osx.*\.xbmc\.org.*
+ifeq (@USE_ANDROID@,1)
+DIRECTORY_ARCHIVES += xbmc/input/joysticks/input_joysticks.a
+DIRECTORY_ARCHIVES += xbmc/input/joysticks/dialogs/input_joystick_dialogs.a
+DIRECTORY_ARCHIVES += xbmc/input/joysticks/generic/input_joysticks_generic.a
+DIRECTORY_ARCHIVES += xbmc/input/keyboard/input_keyboard.a
+DIRECTORY_ARCHIVES += xbmc/input/keyboard/generic/input_keyboard_generic.a
+DIRECTORY_ARCHIVES += xbmc/input/linux/input_linux.a
+DIRECTORY_ARCHIVES += xbmc/input/mouse/input_mouse.a
+DIRECTORY_ARCHIVES += xbmc/input/mouse/generic/input_mouse_generic.a
+DIRECTORY_ARCHIVES += xbmc/input/touch/input_touch.a
+DIRECTORY_ARCHIVES += xbmc/input/touch/generic/input_touch_generic.a
+DIRECTORY_ARCHIVES += xbmc/network/linux/network_linux.a
+DIRECTORY_ARCHIVES += xbmc/powermanagement/android/powermanagement_android.a
+DIRECTORY_ARCHIVES += xbmc/storage/android/storage_android.a
+DIRECTORY_ARCHIVES += xbmc/windowing/X11/windowing_X11.a
+else
+DIRECTORY_ARCHIVES += xbmc/input/joysticks/input_joysticks.a
+DIRECTORY_ARCHIVES += xbmc/input/joysticks/dialogs/input_joystick_dialogs.a
+DIRECTORY_ARCHIVES += xbmc/input/joysticks/generic/input_joysticks_generic.a
+DIRECTORY_ARCHIVES += xbmc/input/keyboard/input_keyboard.a
+DIRECTORY_ARCHIVES += xbmc/input/keyboard/generic/input_keyboard_generic.a
+DIRECTORY_ARCHIVES += xbmc/input/linux/input_linux.a
+DIRECTORY_ARCHIVES += xbmc/input/mouse/input_mouse.a
+DIRECTORY_ARCHIVES += xbmc/input/mouse/generic/input_mouse_generic.a
+DIRECTORY_ARCHIVES += xbmc/input/touch/input_touch.a
+DIRECTORY_ARCHIVES += xbmc/input/touch/generic/input_touch_generic.a
+DIRECTORY_ARCHIVES += xbmc/network/linux/network_linux.a
+DIRECTORY_ARCHIVES += xbmc/powermanagement/linux/powermanagement_linux.a
+DIRECTORY_ARCHIVES += xbmc/storage/linux/storage_linux.a
+DIRECTORY_ARCHIVES += xbmc/windowing/X11/windowing_X11.a
+INSTALL_FILTER += .*repository\.pvr-android\.xbmc\.org.*
+endif
+endif
+
+ifeq ($(findstring freebsd,@ARCH@),freebsd)
+DIRECTORY_ARCHIVES += xbmc/freebsd/freebsd.a
+endif
+
+ifeq (@HAVE_XBMC_NONFREE@,1)
+DIRECTORY_ARCHIVES += lib/UnrarXLib/UnrarXLib.a
+endif
+
+ifeq (@USE_ANDROID@,1)
+DIRECTORY_ARCHIVES += xbmc/platform/android/loader/AndroidDyload.a
+DIRECTORY_ARCHIVES += xbmc/windowing/android/windowing_android.a
+DIRECTORY_ARCHIVES += xbmc/platform/android/bionic_supplement/bionic_supplement.a
+DIRECTORY_ARCHIVES += xbmc/platform/android/jni/jni.a
+endif
+
+ifeq (@USE_OMXPLAYER@,1)
+DIRECTORY_ARCHIVES += xbmc/cores/omxplayer/omxplayer.a
+endif
+
+LIB_DIRS=\
+	lib/libexif \
+	lib/cpluff \
+	lib/xbmc-dll-symbols
+
+ESTUARY_MEDIA=addons/skin.estuary/media
+SKIN_DIRS=$(ESTUARY_MEDIA)
+
+ESTOUCHY_MEDIA=addons/skin.estouchy/media
+SKIN_DIRS+=$(ESTOUCHY_MEDIA)
+
+LIBS=@LIBS@
+CFLAGS=@CFLAGS@
+CXXFLAGS=@CXXFLAGS@
+LDFLAGS=@LDFLAGS@
+INCLUDES=$(sort @INCLUDES@)
+
+CLEAN_FILES=@APP_NAME_LC@.bin @APP_NAME_LC@-xrandr lib@APP_NAME_LC@.so
+
+DISTCLEAN_FILES=config.h config.log config.status tools/Linux/kodi.sh \
+        tools/Linux/kodi-standalone.sh autom4te.cache config.h.in~ \
+        system/libcpluff-@ARCH@.so
+
+ifeq (@USE_LIBXBMC@,1)
+FINAL_TARGETS+=lib@APP_NAME_LC@.so
+ifeq (@USE_ANDROID@,1)
+FINAL_TARGETS+=skins
+endif
+else
+FINAL_TARGETS=@APP_NAME_LC@.bin skins @APP_NAME_LC@-xrandr
+endif
+FINAL_TARGETS+=Makefile externals
+
+GTEST_DIR = lib/gtest
+GTEST_INCLUDES = -I$(GTEST_DIR)/include
+GTEST_LIBS = $(GTEST_DIR)/lib/.libs/libgtest.a
+
+CHECK_DIRS = xbmc/addons/test \
+             xbmc/filesystem/test \
+             xbmc/music/tags/test \
+             xbmc/network/test \
+             xbmc/utils/test \
+             xbmc/video/test \
+             xbmc/threads/test \
+             xbmc/interfaces/python/test \
+             xbmc/cores/AudioEngine/Sinks/test \
+             xbmc/test
+CHECK_LIBS = xbmc/addons/test/addonsTest.a \
+             xbmc/filesystem/test/filesystemTest.a \
+             xbmc/music/tags/test/tagsTest.a \
+             xbmc/network/test/networkTest.a \
+             xbmc/utils/test/utilsTest.a \
+             xbmc/video/test/videoTest.a \
+             xbmc/threads/test/threadTest.a \
+             xbmc/interfaces/python/test/pythonSwigTest.a \
+             xbmc/cores/AudioEngine/Sinks/test/AESinkTest.a \
+             xbmc/test/xbmc-test.a
+
+ifeq (@HAVE_SSE4@,1)
+LIBSSE4+=sse4
+sse4 : force
+	$(MAKE) -C xbmc/linux/sse4
+endif
+
+CHECK_PROGRAMS = @APP_NAME_LC@-test
+
+CLEAN_FILES += $(CHECK_PROGRAMS) $(CHECK_EXTENSIONS)
+
+all : $(FINAL_TARGETS)
+	@echo '-----------------------'
+	@echo '@APP_NAME@ built successfully'
+	@echo '-----------------------'
+
+include Makefile.include
+
+.PHONY : dllloader exports eventclients \
+	dvdpcodecs dvdpextcodecs codecs externals force skins check \
+	testframework testsuite
+
+# hack targets to keep build system up to date
+Makefile : config.status $(addsuffix .in, $(AUTOGENERATED_MAKEFILES))
+	@echo "Regenerating Makefiles..."
+	@./config.status &> /dev/null
+	@echo "done"
+
+config.status: configure
+
+# skin textures
+ifeq (@USE_TEXTUREPACKER@,1)
+skins: @TEXTUREPACKER@
+	 $(MAKE) -C $(ESTUARY_MEDIA)
+	 $(MAKE) -C $(ESTOUCHY_MEDIA)
+else
+skins:
+endif
+
+# Setup some dependencies for subdir makes
+xbmc/cores/paplayer/paplayer.a:
+$(VideoPlayer_ARCHIVES)         : dvdpcodecs
+
+lib/cpluff/libcpluff/.libs/libcpluff.a: force
+	$(MAKE) -C lib/cpluff/libcpluff
+system/libcpluff-@ARCH@.so: lib/cpluff/libcpluff/.libs/libcpluff.a exports
+ifeq ($(findstring osx,@ARCH@), osx)
+  ifeq (@ARCH@, arm-osx)
+	$(CXX) $(LDFLAGS) -all_load -bundle -flat_namespace -undefined dynamic_lookup -read_only_relocs suppress -o $@ $<
+  else
+	$(CXX) $(LDFLAGS) -all_load -bundle -flat_namespace -undefined dynamic_lookup -lexpat $(BUNDLE1_O) -o $@ $<
+  endif
+else
+	$(CXX) $(LDFLAGS) -shared -o $@ -Wl,--whole-archive $< \
+		-Wl,--no-whole-archive  \
+		`cat xbmc/cores/DllLoader/exports/wrapper.def` xbmc/cores/DllLoader/exports/wrapper.o -lexpat
+endif
+
+exports: xbmc/cores/DllLoader/exports/exports.a xbmc/cores/DllLoader/exports/util/exports_utils.a
+	$(MAKE) -C xbmc/cores/DllLoader/exports wrapper.def
+dllloader: exports xbmc/cores/DllLoader/dllloader.a
+
+dvdpcodecs: dllloader
+	$(MAKE) -C lib/libdvd
+
+dvdpextcodecs:
+
+eventclients:
+ifeq ($(findstring osx,@ARCH@), osx)
+ifneq ($(findstring arm,@ARCH@), arm)
+	$(MAKE) -C tools/EventClients/Clients/OSXRemote
+endif
+else
+	$(MAKE) -C tools/EventClients
+endif
+
+certs:
+ifeq ($(findstring osx,@ARCH@), osx)
+	mkdir -p system/certs
+	cp tools/depends/target/openssl/cacert.pem system/certs
+endif
+
+
+libexif: dllloader
+	$(MAKE) -C lib/libexif
+
+codecs: dvdpcodecs dvdpextcodecs
+
+libs: $(LIBSSE4) libexif system/libcpluff-@ARCH@.so
+
+externals: codecs libs
+
+xcode_depends: \
+	codecs libs eventclients skins certs
+
+DYNOBJSXBMC= \
+	xbmc/linux/linux.a \
+	xbmc/network/network.a \
+	xbmc/video/windows/videowindows.a \
+	xbmc/utils/utils.a \
+	xbmc/cores/DllLoader/exports/util/exports_utils.a \
+	xbmc/cores/DllLoader/exports/exports.a \
+	xbmc/settings/settings.a \
+	xbmc/video/video.a \
+	xbmc/pvr/addons/pvraddons.a \
+	xbmc/pvr/windows/pvrwindows.a \
+	xbmc/guilib/guilib.a # must be dynamic to avoid linker errors
+
+ifeq ($(findstring freebsd,@ARCH@),freebsd)
+DYNOBJSXBMC+= xbmc/freebsd/freebsd.a
+endif
+
+ifeq (@USE_STATIC_FFMPEG@,1)
+FFMPEGOBJS = @FFMPEG_LIBDIR@/libavcodec.a \
+             @FFMPEG_LIBDIR@/libavfilter.a \
+             @FFMPEG_LIBDIR@/libswresample.a \
+             @FFMPEG_LIBDIR@/libavformat.a \
+             @FFMPEG_LIBDIR@/libavutil.a \
+             @FFMPEG_LIBDIR@/libpostproc.a \
+             @FFMPEG_LIBDIR@/libswscale.a
+DYNOBJSXBMC+= $(FFMPEGOBJS)
+LIBS+= @GNUTLS_ALL_LIBS@
+
+$(FFMPEGOBJS): dvdpcodecs
+endif
+
+ifeq (@USE_ANDROID@,1)
+MAINOBJS+=xbmc/platform/android/activity/activity.a
+else
+MAINOBJS+=xbmc/platform/posix/posix.a
+ifeq ($(findstring osx,@ARCH@), osx)
+MAINOBJS+=xbmc/platform/darwin/osx/sdlmain.a
+endif
+endif # USE_ANDROID
+
+
+OBJSXBMC =$(DIRECTORY_ARCHIVES)
+OBJSXBMC:=$(filter-out $(DYNOBJSXBMC), $(OBJSXBMC))
+
+BIN_DIRS = $(dir $(DIRECTORY_ARCHIVES)) $(dir $(NWAOBJSXBMC)) $(dir $(MAINOBJS))
+
+DIRS= $(BIN_DIRS) $(EC_DIRS) $(DVDPCODECS_DIRS) \
+	$(LIB_DIRS) $(SKIN_DIRS) xbmc/platform xbmc/platform/darwin/osx
+
+$(NWAOBJSXBMC) $(DIRECTORY_ARCHIVES) $(MAINOBJS): force
+	@$(MAKE) $(if $(V),,-s) -C $(@D)
+
+# Binary Addon bindings
+include xbmc/addons/addon-bindings.mk
+
+lib@APP_NAME_LC@.so: $(OBJSXBMC) $(DYNOBJSXBMC) $(NWAOBJSXBMC) $(MAINOBJS)
+ifeq ($(findstring osx,@ARCH@), osx)
+	$(SILENT_LD) $(CXX) $(LDFLAGS) -bundle -o $@ $(MAINOBJS) -Wl,-all_load,-ObjC $(MAINOBJS) $(DYNOBJSXBMC) $(NWAOBJSXBMC) $(OBJSXBMC) $(LIBS) -read_only_relocs suppress
+else
+	$(SILENT_LD) $(CXX) $(CXXFLAGS) $(LDFLAGS) -shared -o $@ -Wl,--whole-archive $(MAINOBJS) -Wl,--no-whole-archive,--start-group $(MAINOBJS) $(DYNOBJSXBMC) $(OBJSXBMC) -Wl,--end-group -Wl,--no-undefined $(NWAOBJSXBMC) $(LIBS) -Wl,-Bsymbolic
+endif
+
+@APP_NAME_LC@.bin: $(OBJSXBMC) $(DYNOBJSXBMC) $(NWAOBJSXBMC) $(MAINOBJS)
+
+ifeq ($(findstring osx,@ARCH@), osx)
+	$(SILENT_LD) $(CXX) $(LDFLAGS) -o @APP_NAME_LC@.bin $(MAINOBJS) -Wl,-all_load,-ObjC $(MAINOBJS) $(DYNOBJSXBMC) $(NWAOBJSXBMC) $(OBJSXBMC) $(LIBS) -rdynamic
+else
+	$(SILENT_LD) $(CXX) $(CXXFLAGS) $(LDFLAGS) -o @APP_NAME_LC@.bin $(MAINOBJS) -Wl,--start-group $(MAINOBJS) $(DYNOBJSXBMC) $(OBJSXBMC) -Wl,--end-group $(NWAOBJSXBMC) $(LIBS) -rdynamic
+endif
+
+@APP_NAME_LC@-xrandr: xbmc-xrandr.c
+ifneq (1,@USE_X11@)
+	# xbmc-xrandr.c gets picked up by the default make rules
+	@echo "excluding @APP_NAME_LC@-xrandr"
+else
+	$(SILENT_LD) $(CC) $(CFLAGS) $(LDFLAGS) -o @APP_NAME_LC@-xrandr xbmc-xrandr.c -lXrandr -lX11 -lm
+endif
+
+
+install-bin: @APP_NAME_LC@.bin # developement convenience target
+	sudo install -d $(DESTDIR)$(libdir)
+	sudo install @APP_NAME_LC@.bin $(DESTDIR)$(libdir)/@APP_NAME_LC@
+
+ifeq ($(findstring osx,@ARCH@), osx)
+	# TODO: add osx install
+else
+install: install-binaries install-arch install-datas
+
+apk obb apk-unsigned apk-obb apk-obb-unsigned apk-noobb: install
+	make -C tools/android/packaging $@
+
+apk-clean apk-sign:
+	make -C tools/android/packaging $@
+
+install-binaries: install-scripts
+	@echo "Copying @APP_NAME_LC@ binary to $(DESTDIR)$(libdir)/@APP_NAME_LC@/"
+	@install -d $(DESTDIR)$(libdir)/@APP_NAME_LC@
+	@cd $(DESTDIR)$(libdir); [ -L xbmc ] || [ -d xbmc ] || ln -s @APP_NAME_LC@ xbmc
+ifeq (1,@USE_X11@)
+	@install @APP_NAME_LC@-xrandr $(DESTDIR)$(libdir)/@APP_NAME_LC@/@APP_NAME_LC@-xrandr
+endif
+ifeq (@USE_LIBXBMC@,1)
+	@install lib@APP_NAME_LC@.so $(DESTDIR)$(libdir)/@APP_NAME_LC@/lib@APP_NAME_LC@.so
+else
+	@install @APP_NAME_LC@.bin $(DESTDIR)$(libdir)/@APP_NAME_LC@/@APP_NAME_LC@.bin
+	@echo "You can run @APP_NAME_LC@ with the command '@APP_NAME_LC@'"
+endif
+endif
+
+install-arch:
+	@# Arch dependent files
+ifeq ($(findstring freebsd,@ARCH@), freebsd)
+	@find -E system addons -type f -not -iregex ".*\.git.*" \
+		-iregex ".*@ARCH@.*|.*\.vis|.*\.xbs" \
+		-exec sh -c "install -d \"$(DESTDIR)$(libdir)/@APP_NAME_LC@/\`dirname '{}'\`\"" \; \
+		-and \
+		-exec install "{}" $(DESTDIR)$(libdir)/@APP_NAME_LC@/"{}" \; \
+		-exec printf " -- %-75.75s\r" "{}" \;
+else
+ifeq ($(findstring Darwin,$(shell uname -s)),Darwin)
+	@find -E system addons -type f -not -iregex ".*\.git.*" \
+		-iregex ".*@ARCH@.*|.*\.vis|.*\.xbs" \
+		-exec sh -c "install -d \"$(DESTDIR)$(libdir)/@APP_NAME_LC@/\`dirname '{}'\`\"" \; \
+		-and \
+		-exec install "{}" $(DESTDIR)$(libdir)/xbmc/"{}" \; \
+		-exec printf " -- %-75.75s\r" "{}" \;
+else
+	@find system addons -regextype posix-extended -type f -not -iregex ".*\.git.*" -iregex ".*\.so|.*\.so\.[0-9].*|.*\.vis|.*\.xbs" -exec install -D "{}" $(DESTDIR)$(libdir)/@APP_NAME_LC@/"{}" \; -printf " -- %-75.75f\r"
+	@find -L addons -regextype posix-extended -type f -not -iregex ".*\.git.*" -iregex ".*\.so|.*\.so\.[0-9].*" -exec cp -d "{}" $(DESTDIR)$(libdir)/@APP_NAME_LC@/"{}" \; -printf " -- %-75.75f\r"
+endif
+endif
+
+install-scripts:
+	@install -d $(DESTDIR)$(bindir)
+	@install tools/Linux/kodi.sh $(DESTDIR)$(bindir)/@APP_NAME_LC@
+	@cd $(DESTDIR)$(bindir); [ -L xbmc ] || [ -f xbmc ] || ln -s @APP_NAME_LC@ xbmc
+	@install tools/Linux/kodi-standalone.sh $(DESTDIR)$(bindir)/@APP_NAME_LC@-standalone
+	@cd $(DESTDIR)$(bindir); [ -L xbmc-standalone ] || [ -f xbmc-standalone ] ||  ln -s @APP_NAME_LC@-standalone xbmc-standalone
+	@install -d $(DESTDIR)$(datarootdir)/@APP_NAME_LC@
+	@cd $(DESTDIR)$(datarootdir); [ -L xbmc ] || [ -d xbmc ] || ln -s @APP_NAME_LC@ xbmc
+	@install -d $(DESTDIR)$(datarootdir)/xsessions
+	@install -m 0644 tools/Linux/kodi-xsession.desktop $(DESTDIR)$(datarootdir)/xsessions/@APP_NAME_LC@.desktop
+	@cd $(DESTDIR)$(datarootdir)/xsessions; [ -L xbmc.desktop ] || [ -f xbmc.desktop ] || ln -s @APP_NAME_LC@.desktop xbmc.desktop
+
+install-datas: install-scripts
+	@echo "Copying support and legal files..."
+	@install -d $(DESTDIR)$(docdir)
+	@install -m 0644 docs/README.linux LICENSE.GPL copying.txt version.txt $(DESTDIR)$(docdir)
+	@install -d $(DESTDIR)/$(datarootdir)/@APP_NAME_LC@
+	@install -m 0644 privacy-policy.txt $(DESTDIR)$(datarootdir)/@APP_NAME_LC@
+	@echo "Done!"
+	@echo "Copying system files to $(DESTDIR)$(datarootdir)/@APP_NAME_LC@"
+	@install -d $(DESTDIR)$(datarootdir)/@APP_NAME_LC@
+	@# Arch independent files
+ifeq ($(findstring bsd,@ARCH@), bsd)
+	@find -E addons media userdata system -type f \
+		-not -iregex ".*-@ARCH@.*|.*\.vis|.*\.xbs|.*\.git.*|.*\.so|.*\.so\.[0-9].*|.*\.dll|$(subst ${space},|,$(INSTALL_FILTER))" \
+		-exec sh -c "install -d \"$(DESTDIR)$(datarootdir)/@APP_NAME_LC@/\`dirname '{}'\`\"" \; \
+		-and \
+		-exec install -m 0644 "{}" $(DESTDIR)$(datarootdir)/@APP_NAME_LC@/"{}" \; \
+		-exec printf " -- %-75.75s\r" "{}" \;
+else
+ifeq ($(findstring Darwin,$(shell uname -s)),Darwin)
+	@find -E addons media userdata system -type f \
+		-not -iregex ".*-@ARCH@.*|.*\.vis|.*\.xbs|.*\.git.*|.*\.so|.*\.so\.[0-9].*|.*\.dll|$(subst ${space},|,$(INSTALL_FILTER))" \
+		-exec sh -c "install -d \"$(DESTDIR)$(datarootdir)/xbmc/\`dirname '{}'\`\"" \; \
+		-and \
+		-exec install -m 0644 "{}" $(DESTDIR)$(datarootdir)/xbmc/"{}" \; \
+		-exec printf " -- %-75.75s\r" "{}" \;
+else
+	@find addons media userdata system -regextype posix-extended -type f -not -iregex ".*-@ARCH@.*|.*\.vis|.*\.xbs|.*\.git.*|.*\.so|.*\.so\.[0-9].*|.*\.dll|$(subst ${space},|,$(INSTALL_FILTER))" -exec install -D -m 0644 "{}" $(DESTDIR)$(datarootdir)/@APP_NAME_LC@/"{}" \; -printf " -- %-75.75f\r"
+endif
+endif
+	@# Icons and links
+	@install -d $(DESTDIR)$(datarootdir)/applications
+	@install -m 0644 tools/Linux/kodi.desktop $(DESTDIR)$(datarootdir)/applications/@APP_NAME_LC@.desktop
+
+	@install -d $(DESTDIR)$(datadir)/icons/hicolor/16x16/apps
+	@install -m 0644 tools/Linux/packaging/media/icon16x16.png $(DESTDIR)$(datadir)/icons/hicolor/16x16/apps/@APP_NAME_LC@.png
+	@install -d $(DESTDIR)$(datadir)/icons/hicolor/22x22/apps
+	@install -m 0644 tools/Linux/packaging/media/icon22x22.png $(DESTDIR)$(datadir)/icons/hicolor/22x22/apps/@APP_NAME_LC@.png
+	@install -d $(DESTDIR)$(datadir)/icons/hicolor/24x24/apps
+	@install -m 0644 tools/Linux/packaging/media/icon24x24.png $(DESTDIR)$(datadir)/icons/hicolor/24x24/apps/@APP_NAME_LC@.png
+	@install -d $(DESTDIR)$(datadir)/icons/hicolor/32x32/apps
+	@install -m 0644 tools/Linux/packaging/media/icon32x32.png $(DESTDIR)$(datadir)/icons/hicolor/32x32/apps/@APP_NAME_LC@.png
+	@install -d $(DESTDIR)$(datadir)/icons/hicolor/48x48/apps
+	@install -m 0644 tools/Linux/packaging/media/icon48x48.png $(DESTDIR)$(datadir)/icons/hicolor/48x48/apps/@APP_NAME_LC@.png
+	@install -d $(DESTDIR)$(datadir)/icons/hicolor/64x64/apps
+	@install -m 0644 tools/Linux/packaging/media/icon64x64.png $(DESTDIR)$(datadir)/icons/hicolor/64x64/apps/@APP_NAME_LC@.png
+	@install -d $(DESTDIR)$(datadir)/icons/hicolor/128x128/apps
+	@install -m 0644 tools/Linux/packaging/media/icon128x128.png $(DESTDIR)$(datadir)/icons/hicolor/128x128/apps/@APP_NAME_LC@.png
+	@install -d $(DESTDIR)$(datadir)/icons/hicolor/256x256/apps
+	@install -m 0644 tools/Linux/packaging/media/icon256x256.png $(DESTDIR)$(datadir)/icons/hicolor/256x256/apps/@APP_NAME_LC@.png
+
+	@test -z "$(DESTDIR)" && gtk-update-icon-cache -f -q -t $(datadir)/icons/hicolor || :
+
+	@echo "Copying bindings to $(DESTDIR)$(includedir)/@APP_NAME_LC@"
+	@install -d $(DESTDIR)$(includedir)/@APP_NAME_LC@
+	@install -m 0644 $(BINDINGS) $(DESTDIR)$(includedir)/@APP_NAME_LC@
+	@install -d $(DESTDIR)$(libdir)/@APP_NAME_LC@
+	@install -m 0644 project/cmake/*.cmake project/cmake/scripts/common/*.cmake $(DESTDIR)$(libdir)/@APP_NAME_LC@
+	@cd $(DESTDIR)$(includedir); [ -L xbmc ] || [ -d xbmc ] || ln -s @APP_NAME_LC@ xbmc
+
+uninstall:
+	@echo "Removing @APP_NAME@..."
+	@rm -rf $(DESTDIR)$(libdir)/@APP_NAME_LC@
+	@rm -rf $(DESTDIR)$(datarootdir)/@APP_NAME_LC@ $(DESTDIR)$(bindir)/@APP_NAME_LC@
+	@rm -rf $(DESTDIR)$(bindir)/@APP_NAME_LC@-standalone
+	@rm -rf $(DESTDIR)$(datarootdir)/xsessions/@APP_NAME_LC@.desktop
+	@rm -rf $(libdir)/lib@APP_NAME_LC@_*
+	@rm -rf $(prefix)/include/@APP_NAME_LC@
+	@echo "Done!"
+
+clean-@APP_NAME_LC@.bin:
+	rm -f @APP_NAME_LC@.bin
+	for d in $(BIN_DIRS); do if test -f $$d/Makefile; then $(MAKE) -C $$d clean; fi; done
+clean-eventclients:
+	for d in $(EC_DIRS); do if test -f $$d/Makefile; then $(MAKE) -C $$d clean; fi; done
+clean-dvdpcodecs:
+	for d in $(DVDPCODECS_DIRS); do if test -f $$d/Makefile; then $(MAKE) -C $$d clean; fi; done
+clean-libs:
+	for d in $(LIB_DIRS); do if test -f $$d/Makefile; then $(MAKE) -C $$d clean; fi; done
+
+clean-codecs: clean-dvdpcodecs
+
+clean-externals: clean-codecs clean-eventclients clean-libs
+
+ifeq (1,@GTEST_CONFIGURED@)
+check: testsuite
+	for check_program in $(CHECK_PROGRAMS); do $(CURDIR)/$$check_program; done
+
+testsuite: $(CHECK_EXTENSIONS) $(CHECK_PROGRAMS)
+
+testframework: $(GTEST_LIBS)
+
+$(GTEST_LIBS): $(GTEST_DIR)/Makefile
+
+$(GTEST_DIR)/Makefile: force
+	$(MAKE) CXXFLAGS="$(CXXFLAGS) -DGTEST_USE_OWN_TR1_TUPLE=1" -C $(GTEST_DIR)
+
+$(CHECK_LIBS): force
+	@$(MAKE) CXXFLAGS="$(CXXFLAGS) -DGTEST_USE_OWN_TR1_TUPLE=1" $(if $(V),,-s) -C $(@D)
+
+@APP_NAME_LC@-test: $(CHECK_LIBS) $(OBJSXBMC) $(DYNOBJSXBMC) $(NWAOBJSXBMC) $(GTEST_LIBS)
+ifeq ($(findstring osx,@ARCH@), osx)
+	$(SILENT_LD) $(CXX) $(CXXFLAGS) $(LDFLAGS) $(GTEST_INCLUDES) -o $@ -Wl,-all_load,-ObjC $(DYNOBJSXBMC) $(NWAOBJSXBMC) $(OBJSXBMC) $(GTEST_LIBS) $(CHECK_LIBS) $(LIBS) $(CHECK_LIBADD) -rdynamic
+else
+	$(SILENT_LD) $(CXX) $(CXXFLAGS) $(LDFLAGS) $(GTEST_INCLUDES) -o $@ -Wl,--whole-archive $(DYNOBJSXBMC) $(OBJSXBMC) $(GTEST_LIBS) $(CHECK_LIBS) -Wl,--no-whole-archive $(NWAOBJSXBMC) $(LIBS) $(CHECK_LIBADD) -rdynamic
+endif
+else
+# Give a message that the framework is not configured, but don't fail.
+check testsuite testframework:
+	@echo "Google Test Framework not configured, skipping testsuite check."
+endif
diff --git a/Makefile.include.in b/Makefile.include.in
new file mode 100644
index 0000000..aa91100
--- /dev/null
+++ b/Makefile.include.in
@@ -0,0 +1,147 @@
+AR=@AR@
+ARFLAGS=crs
+RM=rm -rf
+SHELL=@SHELL@
+ARCH=@ARCH@
+abs_top_srcdir=@abs_top_srcdir@
+rel_top_srcdir=$(subst $(abspath $(abs_top_srcdir))/,,$(abspath $(CURDIR))/)
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+bindir=@bindir@
+sbindir=@sbindir@
+libexecdir=@libexecdir@
+sysconfdir=@sysconfdir@
+sharedstatedir=@sharedstatedir@
+localstatedir=@localstatedir@
+libdir=@libdir@
+includedir=@includedir@
+oldincludedir=@oldincludedir@
+datarootdir=@datarootdir@
+datadir=@datadir@
+infodir=@infodir@
+localedir=@localedir@
+mandir=@mandir@
+PACKAGE_TARNAME=@PACKAGE_TARNAME@
+docdir=@docdir@
+htmldir=@htmldir@
+dvidir=@dvidir@
+pdfdir=@pdfdir@
+psdir=@psdir@
+CXX=@CXX@
+CXX_FOR_BUILD=@CXX_FOR_BUILD@
+CC=@CC@
+CC_FOR_BUILD=@CC_FOR_BUILD@
+CXXFLAGS+=@CXXFLAGS@
+CXXFLAGS_FOR_BUILD+=@CXXFLAGS_FOR_BUILD@
+CFLAGS+=@CFLAGS@
+CFLAGS_FOR_BUILD+=@CFLAGS_FOR_BUILD@
+LDFLAGS+=@LDFLAGS@
+LDFLAGS_FOR_BUILD+=@LDFLAGS_FOR_BUILD@
+INCLUDES+=-I@abs_top_srcdir@
+INCLUDES+=-I@abs_top_srcdir@/lib
+INCLUDES+=-I@abs_top_srcdir@/xbmc
+INCLUDES+=-I@abs_top_srcdir@/xbmc/addons/kodi-addon-dev-kit/include
+INCLUDES+=$(sort @INCLUDES@)
+INCLUDES+=-I@abs_top_srcdir@/xbmc/linux
+INCLUDES+=-I@abs_top_srcdir@/xbmc/cores/VideoPlayer
+DEFINES+= \
+	@ARCH_DEFINES@ \
+	-D_FILE_DEFINED \
+	-D__STDC_CONSTANT_MACROS \
+	-DBIN_INSTALL_PATH="\"$(libdir)/@APP_NAME_LC@\"" \
+	-DINSTALL_PATH="\"$(datarootdir)/@APP_NAME_LC@\"" \
+	@SDL_DEFINES@ \
+	@UPNP_DEFINES@ \
+	@DEFS@ \
+
+ifeq ($(findstring osx,$(ARCH)), osx)
+	INCLUDES+=-I@abs_top_srcdir@/xbmc/osx
+endif
+
+ifeq ($(ARCH), powerpc-osx)
+	BUNDLE1_O=-lbundle1.o
+endif
+
+ifneq ($(V), 1)
+	SILENT_CPP=@echo "CPP     $(rel_top_srcdir)$@";
+	SILENT_CC =@echo "CC      $(rel_top_srcdir)$@";
+	SILENT_S  =@echo "S       $(rel_top_srcdir)$@";
+	SILENT_GCH=@echo "GCH     $(rel_top_srcdir)$@";
+	SILENT_MM =@echo "MM      $(rel_top_srcdir)$@";
+	SILENT_AR =@echo "AR      $(rel_top_srcdir)$@";
+	SILENT_LD =@echo "LD      $(rel_top_srcdir)$@";
+endif
+
+OBJS+=$(filter %.o,$(SRCS:.cpp=.o))
+OBJS+=$(filter %.o,$(SRCS:.c=.o))
+OBJS+=$(filter %.o,$(SRCS:.S=.o))
+OBJS+=$(filter %.o,$(SRCS:.mm=.o))
+OBJS+=$(filter %.o,$(SRCS:.m=.o))
+
+DEPS+=$(filter %.P,$(OBJS:.o=.P))
+
+GEN_DEPS=\
+  cp $*.d $*.P \
+  && sed -e 's/\#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
+         -e '/^$$/ d' -e 's/$$/ :/' < $*.d >> $*.P \
+  && rm -f $*.d \
+  || ( rm -f $*.P $@ && exit 1 )
+
+%.o: %.cpp
+	@rm -f $@
+	$(SILENT_CPP) $(CXX) -MF $*.d -MD -c $(CXXFLAGS) $(DEFINES) $(INCLUDES) $(CPPFLAGS) $< -o $@ \
+	&& $(GEN_DEPS)
+
+%.o: %.cc
+	@rm -f $@
+	$(SILENT_CPP) $(CXX) -MF $*.d -MD -c $(CXXFLAGS) $(DEFINES) $(INCLUDES) $(CPPFLAGS) $< -o $@ \
+	&& $(GEN_DEPS)
+
+%.o: %.c
+	@rm -f $@
+	$(SILENT_CC) $(CC) -MF $*.d -MD -c $(CFLAGS) $(DEFINES) $(INCLUDES) $(CPPFLAGS) $< -o $@ \
+	&& $(GEN_DEPS)
+
+%.o: %.C
+	@rm -f $@
+	$(SILENT_CPP) $(CXX) -MF $*.d -MD -c $(CFLAGS) $(DEFINES) $(INCLUDES) $(CPPFLAGS) $< -o $@ \
+	&& $(GEN_DEPS)
+
+%.o: %.S
+	@rm -f $@
+	$(SILENT_CC) $(CC) -c $(CFLAGS) $(DEFINES) $(INCLUDES) $< -o $@
+
+
+%.h.gch : %.h
+	$(SILENT_GCH) $(CXX) -c $(CFLAGS) $(DEFINES) $(INCLUDES) $< -o $@
+
+%.o: %.m
+	@rm -f $@
+	$(SILENT_MM) $(CC) -MF $*.d -MD -c $(CFLAGS) $(DEFINES) $(INCLUDES) $< -o $@ \
+	&& $(GEN_DEPS)
+
+%.o: %.mm
+	@rm -f $@
+	$(SILENT_MM) $(CXX) -MF $*.d -MD -c $(CXXFLAGS) $(DEFINES) $(INCLUDES) $< -o $@ \
+	&& $(GEN_DEPS)
+
+
+.PHONY : lib pch clean distclean distclean_evil check testsuite
+
+$(LIB): $(OBJS)
+	$(SILENT_AR) $(AR) $(ARFLAGS) $(LIB) $(OBJS)
+
+pch: $(PCH:.h=.h.gch)
+	for d in $(DIRS); do (cd "$$d"; $(MAKE) pch ); done
+
+clean: 
+	$(RM) $(OBJS) *.o $(LIB) $(SLIB) $(CLEAN_FILES) $(PCH:.h=.h.gch) $(DEPS)
+	for d in $(DIRS); do (if test -f "$$d/Makefile"; then ($(MAKE) -C "$$d" clean); fi ); done
+	for d in $(CHECK_DIRS) $(GTEST_DIR); do if test -f $$d/Makefile; then $(MAKE) -C $$d $@; fi; done
+
+distclean:
+	$(RM) $(OBJS) *.o $(LIB) $(SLIB) $(STATICLIB) $(CLEAN_FILES) $(DISTCLEAN_FILES) $(PCH:.h=.h.gch) $(DEPS)
+	for d in $(DIRS); do (if test -f "$$d/Makefile"; then ($(MAKE) -C "$$d" distclean || $(MAKE) -C "$$d" clean); fi ); done
+	for d in $(CHECK_DIRS) $(GTEST_DIR); do (if test -f "$$d/Makefile"; then ($(MAKE) -C "$$d" $@ || $(MAKE) -C "$$d" clean); fi ); done
+	if [ "$(shell pwd -P)" = "$(abs_top_srcdir)" ] || \
+	   [ "$(shell pwd)" = "$(abs_top_srcdir)" ]; then rm -f $(AUTOGENERATED_MAKEFILES) Makefile.include Makefile; fi
diff --git a/addons/skin.estouchy/media/Makefile.in b/addons/skin.estouchy/media/Makefile.in
new file mode 100644
index 0000000..4b5e8ef
--- /dev/null
+++ b/addons/skin.estouchy/media/Makefile.in
@@ -0,0 +1,14 @@
+TARGET=Textures.xbt
+
+all: $(TARGET)
+
+.PHONY: force
+
+$(TARGET):
+	@TEXTUREPACKER@ -dupecheck -input . -output $(TARGET)
+
+clean:
+	rm -f $(TARGET)
+
+distclean: clean
+
diff --git a/addons/skin.estuary/media/Makefile.in b/addons/skin.estuary/media/Makefile.in
new file mode 100644
index 0000000..baf691e
--- /dev/null
+++ b/addons/skin.estuary/media/Makefile.in
@@ -0,0 +1,23 @@
+TARGET=Textures.xbt
+TARGET_CURIAL=curial.xbt
+TARGET_FLAT=flat.xbt
+
+all: $(TARGET) $(TARGET_CURIAL) $(TARGET_FLAT)
+
+.PHONY: force
+
+$(TARGET):
+	@TEXTUREPACKER@ -dupecheck -input . -output $(TARGET)
+
+$(TARGET_CURIAL):
+	@TEXTUREPACKER@ -dupecheck -input ../themes/curial -output $(TARGET_CURIAL)
+
+$(TARGET_FLAT):
+	@TEXTUREPACKER@ -dupecheck -input ../themes/flat -output $(TARGET_FLAT)
+
+clean:
+	rm -f $(TARGET)
+	rm -f $(TARGET_CURIAL)
+	rm -f $(TARGET_FLAT)
+
+distclean: clean
diff --git a/bootstrap b/bootstrap
new file mode 100755
index 0000000..e634ea7
--- /dev/null
+++ b/bootstrap
@@ -0,0 +1,3 @@
+#!/bin/sh
+BOOTSTRAP_STANDALONE=1 make -f bootstrap.mk &&
+BOOTSTRAP_STANDALONE=1 make -f codegenerator.mk
diff --git a/bootstrap.mk b/bootstrap.mk
new file mode 100644
index 0000000..6b93e7e
--- /dev/null
+++ b/bootstrap.mk
@@ -0,0 +1,20 @@
+BOOTSTRAP_SUBDIRS += configure.ac
+BOOTSTRAP_SUBDIRS += lib/cpluff/configure.ac
+BOOTSTRAP_SUBDIRS += lib/gtest/configure.ac
+
+BOOTSTRAP_TARGETS=$(basename $(BOOTSTRAP_SUBDIRS))
+all: $(BOOTSTRAP_TARGETS)
+
+%: %.ac
+	autoreconf -vif $(@D)
+	-@rm -rf $(@D)/autom4te.cache
+
+%: %.in
+	autoreconf -vif $(@D)
+	-@rm -rf $(@D)/autom4te.cache
+
+configure: configure.ac
+	autoreconf -vif $(@D)
+	-@rm -rf $(@D)/autom4te.cache
+	@test -n "$$BOOTSTRAP_STANDALONE" || ( echo "Configuration is stale. You should almost certainly reconfigure" && false )
+
diff --git a/build-aux/.dummy b/build-aux/.dummy
new file mode 100644
index 0000000..22708ab
--- /dev/null
+++ b/build-aux/.dummy
@@ -0,0 +1 @@
+Dummy file used so that this directory shows up in git.
diff --git a/codegenerator.mk b/codegenerator.mk
new file mode 100644
index 0000000..5f8bdd9
--- /dev/null
+++ b/codegenerator.mk
@@ -0,0 +1,71 @@
+TOPDIR ?= .
+INTERFACES_DIR ?= xbmc/interfaces
+
+JAVA ?= $(shell which java)
+ifeq ($(JAVA),)
+JAVA = java-not-found
+endif
+
+SWIG ?= $(shell which swig)
+ifeq ($(SWIG),)
+SWIG = swig-not-found
+endif
+
+GENERATED_JSON = $(INTERFACES_DIR)/json-rpc/ServiceDescription.h addons/xbmc.json/addon.xml
+ifeq ($(wildcard $(JSON_BUILDER)),)
+  JSON_BUILDER = $(shell which JsonSchemaBuilder)
+ifeq ($(JSON_BUILDER),)
+  JSON_BUILDER = tools/depends/native/JsonSchemaBuilder/bin/JsonSchemaBuilder
+endif
+endif
+
+GENDIR = $(INTERFACES_DIR)/python/generated
+GROOVY_DIR = $(TOPDIR)/tools/codegenerator/groovy
+
+GENERATED =  $(GENDIR)/AddonModuleXbmc.cpp
+GENERATED += $(GENDIR)/AddonModuleXbmcgui.cpp
+GENERATED += $(GENDIR)/AddonModuleXbmcplugin.cpp
+GENERATED += $(GENDIR)/AddonModuleXbmcaddon.cpp
+GENERATED += $(GENDIR)/AddonModuleXbmcvfs.cpp
+GENERATED += $(GENDIR)/AddonModuleXbmcwsgi.cpp
+
+GENERATE_DEPS += $(TOPDIR)/xbmc/interfaces/legacy/*.h $(TOPDIR)/xbmc/interfaces/python/typemaps/*.intm $(TOPDIR)/xbmc/interfaces/python/typemaps/*.outtm
+
+vpath %.i $(INTERFACES_DIR)/swig
+
+$(GENDIR)/%.cpp: $(GENDIR)/%.xml $(JAVA) $(SWIG)
+	# Work around potential groovy bug reported at: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=733234
+	$(JAVA) -cp "$(GROOVY_DIR)/groovy-all-2.4.4.jar:$(GROOVY_DIR)/commons-lang-2.6.jar:$(TOPDIR)/tools/codegenerator:$(INTERFACES_DIR)/python" \
+          org.codehaus.groovy.tools.FileSystemCompiler -d $(TOPDIR)/tools/codegenerator $(TOPDIR)/tools/codegenerator/Helper.groovy  $(TOPDIR)/tools/codegenerator/SwigTypeParser.groovy $(INTERFACES_DIR)/python/MethodType.groovy $(INTERFACES_DIR)/python/PythonTools.groovy
+	$(JAVA) -cp "$(GROOVY_DIR)/groovy-all-2.4.4.jar:$(GROOVY_DIR)/commons-lang-2.6.jar:$(TOPDIR)/tools/codegenerator:$(INTERFACES_DIR)/python" \
+          groovy.ui.GroovyMain $(TOPDIR)/tools/codegenerator/Generator.groovy $< $(INTERFACES_DIR)/python/PythonSwig.cpp.template $@
+	rm $<
+
+$(GENDIR)/%.xml: %.i $(SWIG) $(JAVA) $(GENERATE_DEPS)
+	mkdir -p $(GENDIR)
+	$(SWIG) -w401 -c++ -o $@ -xml -I$(TOPDIR)/xbmc -xmllang python $<
+
+codegenerated: $(SWIG) $(JAVA) $(GENERATED) $(GENERATED_JSON) $(GENERATED_ADDON_JSON)
+
+$(JAVA):
+	@echo Java not found, it will be used if found after configure.
+	@echo This is not necessarily an error.
+	@false
+
+$(SWIG):
+	@echo Swig not found, it will be used if found after configure.
+	@echo This is not necessarily an error.
+	@false
+
+$(GENERATED_JSON): $(JSON_BUILDER)
+	@echo Jsonbuilder: $(JSON_BUILDER)
+	$(MAKE) -C $(INTERFACES_DIR)/json-rpc $(@F)
+
+$(JSON_BUILDER):
+ifeq ($(BOOTSTRAP_FROM_DEPENDS), yes)
+	@echo JsonSchemaBuilder not found. You didn\'t build depends. Check docs/README.\<yourplatform\>
+	@false
+else
+#build json builder - ".." because makefile is in the parent dir of "bin"
+	$(MAKE) -C $(abspath $(@D)/..)
+endif
diff --git a/configure.ac b/configure.ac
new file mode 100644
index 0000000..f4b90ea
--- /dev/null
+++ b/configure.ac
@@ -0,0 +1,2408 @@
+#                                               -*- Autoconf -*-
+# Process this file with autoconf to produce a configure script.
+
+AC_PREREQ(2.59)
+AC_INIT([kodi], [17.9.701], [http://trac.kodi.tv])
+AC_CONFIG_HEADERS([xbmc/config.h])
+AH_TOP([#pragma once])
+m4_include([m4/ax_prog_cc_for_build.m4])
+m4_include([m4/ax_prog_cxx_for_build.m4])
+m4_include([m4/ax_cxx_compile_stdcxx_11.m4])
+m4_include([m4/ax_python_devel.m4])
+m4_include([m4/xbmc_arch.m4])
+
+AC_CONFIG_AUX_DIR([build-aux])
+AM_INIT_AUTOMAKE([foreign])
+AC_CANONICAL_HOST
+
+tolower(){
+  echo "$@" | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz
+}
+
+# workaround for autotools that don't set this
+abs_top_srcdir=${abs_top_srcdir=$(cd $srcdir; pwd)}
+
+# check for enabling additional players
+AC_DEFUN([XB_ADD_PLAYER],
+[
+  AC_MSG_CHECKING([for $2])
+  case $add_players in
+    *$2*)
+      AC_SUBST([USE_$1], 1)
+      AC_DEFINE([HAS_$1], 1, [using $2])
+      AC_MSG_RESULT([enabling $2])
+      ;;
+    *)
+      AC_MSG_RESULT([$2 is not enabled])
+  esac
+])
+
+# check for enabling additional codecs
+AC_DEFUN([XB_ADD_CODEC],
+[
+  AC_MSG_CHECKING([for $2])
+  case $3 in
+    *$2*)
+      use_codec_$2="yes"
+      AC_SUBST([USE_$1], 1)
+      AC_DEFINE([HAS_$1], 1, [using $2])
+      AC_MSG_RESULT([enabling $2])
+      ;;
+    *)
+      AC_MSG_RESULT([$2 is not enabled])
+  esac
+])
+
+# check for library basenames
+AC_DEFUN([XB_FIND_SONAME],
+[
+  if echo "$host" | grep -q freebsd ; then
+    AC_MSG_CHECKING([for lib$2 soname])
+    $1_SONAME=[`ldconfig -r | sed -n "s;.* \(/.*lib$2\.so.*\)$;\1;p" | head -n 1`]
+    if test x$$1_SONAME != x ; then
+      $1_SONAME=[`basename $$1_SONAME`]
+    fi
+  elif [[ "$host_vendor" != "apple" ]]; then
+    AC_MSG_CHECKING([for lib$2 soname])
+    $1_FILENAME=$($CC -nostdlib -o /dev/null $CFLAGS $LDFLAGS $4 -l$2 -Wl,-M 2>/dev/null | grep "^LOAD.*$2" | awk '{V=2; print $V}')
+    if [[ -z $$1_FILENAME ]]; then
+      #try gold linker syntax
+      $1_FILENAME=$($CC -nostdlib -o /dev/null $CFLAGS $LDFLAGS $4 -l$2 -Wl,-t 3>&1 1>&2 2>&3 | grep "lib$2")
+    fi
+    if [[ ! -z $$1_FILENAME ]]; then
+      $1_SONAME=$($OBJDUMP -p $$1_FILENAME | grep "SONAME.*$2" | awk '{V=2; print $V}')
+    fi
+  else
+    AC_MSG_CHECKING([for lib$2 dylib])
+    gcc_lib_path=[`$CC -print-search-dirs 2>/dev/null | fgrep libraries: | sed 's/[^=]*=\(.*\)/\1/' | sed 's/:/ /g'`]
+    env_lib_path=[`echo $LDFLAGS | sed 's/-L[ ]*//g'`]
+    if test "$cross_compiling" = yes; then
+      host_lib_path=""
+    else
+      host_lib_path="/usr/lib /usr/local/lib"
+    fi
+    for path in $gcc_lib_path $env_lib_path $host_lib_path; do
+      lib=[`ls -- $path/lib$2.dylib 2>/dev/null`]
+      if test x$lib != x; then
+        # we want the path/name that is embedded in the dylib
+        $1_FILENAME=[`otool -L $lib | grep -v lib$2.dylib | grep lib$2 | awk '{V=1; print $V}'`]
+        $1_SONAME=[`basename $$1_FILENAME`]
+      fi
+    done
+  fi
+  if [[ -z "$$1_SONAME" ]]; then
+    AC_MSG_RESULT([no])
+    if test -z "$3" || test "x${$3}" = "xyes"; then
+      AC_MSG_ERROR([Unable to determine soname of lib$2 library])
+    else
+      AC_MSG_WARN([Unable to determine soname of lib$2 library])
+      $3=no
+      AC_MSG_WARN([lib$2 support disabled])
+    fi
+  else
+    AC_MSG_RESULT([$$1_SONAME])
+    AC_SUBST($1_SONAME)
+  fi
+])
+
+# Function to push and pop libs and includes for a command
+AC_DEFUN([XB_PUSH_FLAGS], [
+  SAVE_LIBS="$LIBS"
+  SAVE_INCLUDES="$INCLUDES"
+  LIBS="[$2]"
+  INCLUDES="[$1]"
+  [$3]
+  LIBS="$SAVE_LIBS"
+  INCLUDES="$SAVE_INCLUDES"
+])
+
+# version can be overridden by setting the following as ENV vars when running configure
+APP_NAME=${APP_NAME-$(${AWK} '/APP_NAME/ {print $2}' version.txt)}
+APP_NAME_LC=$(echo $APP_NAME | ${AWK} '{print tolower($0)}')
+APP_NAME_UC=$(echo $APP_NAME | ${AWK} '{print toupper($0)}')
+APP_VERSION_MAJOR=${APP_VERSION_MAJOR-$(${AWK} '/VERSION_MAJOR/ {print $2}' version.txt)}
+APP_VERSION_MINOR=${APP_VERSION_MINOR-$(${AWK} '/VERSION_MINOR/ {print $2}' version.txt)}
+APP_VERSION_TAG=${APP_VERSION_TAG-$(${AWK} '/VERSION_TAG/ {print $2}' version.txt)}
+APP_VERSION_TAG_LC=$(echo $APP_VERSION_TAG | ${AWK} '{print tolower($0)}')
+APP_VERSION_CODE=${APP_VERSION_CODE-$(${AWK} '/VERSION_CODE/ {print $2}' version.txt)}
+APP_ADDON_API=${APP_ADDON_API-$(${AWK} '/ADDON_API/ {print $2}' version.txt)}
+if test "$APP_NAME" != "" && test "$APP_VERSION_MAJOR" != "" && test "$APP_VERSION_MINOR" != "" \
+&& test "$APP_VERSION_CODE" != "" && test "$APP_ADDON_API" != ""; then
+  APP_VERSION=${APP_VERSION_MAJOR}.${APP_VERSION_MINOR}
+  if test "$APP_VERSION_TAG" != ""; then
+    APP_VERSION=${APP_VERSION}-${APP_VERSION_TAG}
+  fi
+
+  AC_SUBST(APP_NAME)
+  AC_SUBST(APP_NAME_LC)
+  AC_SUBST(APP_NAME_UC)
+  AC_SUBST(APP_VERSION)
+  AC_SUBST(APP_VERSION_MAJOR)
+  AC_SUBST(APP_VERSION_MINOR)
+  AC_SUBST(APP_VERSION_TAG)
+  AC_SUBST(APP_VERSION_TAG_LC)
+  AC_SUBST(APP_VERSION_CODE)
+  AC_SUBST(APP_ADDON_API)
+
+  dashes="------------------------"
+  final_message="\n  ${APP_NAME} Configuration:"
+  final_message="\n$dashes$final_message\n$dashes"
+  final_message="$final_message\n  ${APP_NAME} Version:\t${APP_VERSION}"
+else
+  AC_MSG_ERROR(could not detect application Version, make sure version.txt is complete)
+fi
+
+# check for GIT_REV
+AC_CHECK_PROG(HAVE_GIT,git,"yes","no",)
+if test "$GIT_REV" = ""; then
+  if test -f VERSION ; then
+    GIT_REV=$(awk 'END{print substr($1,1,16)}' VERSION)
+  elif test "$HAVE_GIT" = "yes" -a -d ${abs_top_srcdir}/.git; then
+    GIT_REV=$(git --no-pager log --abbrev=7 -n 1 --pretty=format:"%h %ci" HEAD | awk '{gsub("-", "");print $2"-"$1}')
+  else
+    GIT_REV="Unknown"
+  fi
+fi
+final_message="$final_message\n  git Rev.:\t${GIT_REV}"
+
+# General message strings
+configure_debug="ERROR: this is a configure debug statement"
+missing_library="Could not find a required library. Please see the README for your platform."
+missing_headers="Could not find some required headers. Please see the README for your platform."
+missing_program="Could not find a required program. Please see the README for your platform."
+alsa_disabled="== ALSA support disabled. =="
+dbus_disabled="== DBUS support disabled. =="
+x11_enabled="== X11 enabled. =="
+x11_disabled="== X11 disabled. =="
+pulse_not_found="== Could not find libpulse. PulseAudio support disabled. =="
+pulse_disabled="== PulseAudio support disabled. =="
+avahi_not_found="== Could not find libavahi-common or libavahi-client. Avahi support disabled. =="
+avahi_disabled="== Avahi support disabled. =="
+mdnsembedded_not_found="== Could not find mDNSEmbedded. Might prevent zeroconf support. =="
+mdnsembedded_disabled="== mDNSEmbedded support disabled. =="
+vdpau_not_found="== Could not find libvdpau. VDPAU support disabled. =="
+vdpau_disabled="== VDPAU support manually disabled. =="
+vaapi_not_found="== Could not find libva. VAAPI support disabled. =="
+vaapi_disabled="== VAAPI support manually disabled. =="
+openmax_disabled="== OpenMax support manually disabled. =="
+openmax_not_found="== Could not find OpenMax headers. OpenMax support disabled. =="
+libnfs_not_found="== Could not find libnfs. NFS client support disabled. =="
+libnfs_disabled="== NFS support disabled. =="
+libshairplay_not_found="== Could not find libshairplay. =="
+samba_disabled="== SAMBA support disabled. =="
+libplist_not_found="== Could not find libplist. AirPlay support disabled. =="
+libplist_disabled="== AirPlay support disabled. =="
+alsa_not_found="== Could not find ALSA. ALSA support disabled. =="
+dbus_not_found="== Could not find DBUS. DBUS support disabled. =="
+libcap_disabled="== Capabilities detection support disabled. =="
+libcap_not_found="== Could not find libcap. Capabilities detection support disabled. =="
+gtest_enabled="== Google Test Framework will be configured. =="
+gtest_disabled="== Google Test Framework will not be configured. =="
+
+libudev_not_found="== Could not find libudev. Will use polling to check for device changes. =="
+libudev_disabled="== udev support disabled. Will use polling to check for device changes. =="
+libusb_not_found="== Could not find libusb. Plug and play USB device support will not be available. =="
+libusb_disabled="== libusb disabled. Plug and play USB device support will not be available. =="
+libusb_disabled_udev_found="== libusb disabled. =="
+libcec_enabled="== libcec enabled. =="
+libcec_disabled="== libcec disabled. CEC adapter support will not be available. =="
+lcms2_enabled="== lcms2 enabled. =="
+lcms2_not_found="== Could not find lcms2. ICC profile support will not be available. =="
+lcms2_disabled="== lcms2 disabled. ICC profile support will not be available. =="
+libbluetooth_not_found="== Could not find libbluetooth. Bluetooth support will not be available =="
+libbluetooth_enabled="== libbluetooth enabled. =="
+libbluetooth_disabled="== libbluetooth disabled. Bluetooth support will not be available. =="
+
+
+AC_ARG_WITH([ffmpeg],
+  [AS_HELP_STRING([--with-ffmpeg],
+  [ffmpeg options: auto (search pkg-config or auto build), force (always build ffmpeg), shared (link dynamically), path_to_ffmpeg [default=force]])],
+  [ffmpeg_dir=$with_ffmpeg],
+  [with_ffmpeg=force])
+
+AC_ARG_ENABLE([shared-lib],
+  [AS_HELP_STRING([--enable-shared-lib],
+  [build lib${APP_NAME_LC}. helpful for tests (default is no)])],
+  [build_shared_lib=$enableval],
+  [build_shared_lib=no])
+
+AC_ARG_ENABLE([debug],
+  [AS_HELP_STRING([--enable-debug],
+  [enable debugging information (default is yes)])],
+  [use_debug=$enableval],
+  [use_debug=yes])
+
+AC_ARG_WITH([platform],
+  [AS_HELP_STRING([--with-platform],
+  [use a pre-configured config for common arm boards])],
+  [use_platform=$withval],
+  [use_platform=none])
+
+AC_ARG_ENABLE([optimizations],
+  [AS_HELP_STRING([--enable-optimizations],
+  [enable passing -O2 to CFLAGS (default is yes)])],
+  [use_optimizations=$enableval],
+  [use_optimizations=yes])
+
+AC_ARG_ENABLE([gl],
+  [AS_HELP_STRING([--enable-gl],
+  [enable OpenGL rendering (default is yes)])],
+  [use_gl=$enableval],
+  [use_gl=yes])
+
+AC_ARG_ENABLE([gles],
+  [AS_HELP_STRING([--enable-gles],
+  [enable OpenGLES rendering (default is no)])],
+  [use_gles=$enableval],
+  [use_gles=no])
+
+AC_ARG_ENABLE([vdpau],
+  [AS_HELP_STRING([--enable-vdpau],
+  [enable VDPAU decoding (default is auto)])],
+  [use_vdpau=$enableval],
+  [use_vdpau=auto])
+
+AC_ARG_ENABLE([vaapi],
+  [AS_HELP_STRING([--enable-vaapi],
+  [enable VAAPI decoding (default is auto)])],
+  [use_vaapi=$enableval],
+  [use_vaapi=auto])
+
+AC_ARG_ENABLE([openmax],
+  [AS_HELP_STRING([--enable-openmax],
+  [enable OpenMax decoding (default is auto, requires OpenGLES)])],
+  [use_openmax=$enableval],
+  [use_openmax=auto])
+
+AC_ARG_ENABLE([tegra],
+  [AS_HELP_STRING([--enable-tegra],
+  [enable Tegra2 arm (default is no)])],
+  [use_tegra=$enableval],
+  [use_tegra=no])
+
+AC_ARG_ENABLE([profiling],
+  [AS_HELP_STRING([--enable-profiling],
+  [enable gprof profiling (default is no)])],
+  [use_profiling=$enableval],
+  [use_profiling=no])
+
+AC_ARG_ENABLE([x11],
+  [AS_HELP_STRING([--enable-x11],
+  [enable x11 (default is yes) 'Linux Only'])],
+  [use_x11=$enableval],
+  [use_x11=yes])
+
+AC_ARG_ENABLE([ccache],
+  [AS_HELP_STRING([--enable-ccache],
+  [enable building with ccache feature (default is auto)])],
+  [use_ccache=$enableval],
+  [use_ccache=auto])
+
+AC_ARG_ENABLE([alsa],
+  [AS_HELP_STRING([--disable-alsa],
+  [disable ALSA support (only for linux/freebsd)])],
+  [use_alsa=$enableval],
+  [use_alsa=yes])
+
+AC_ARG_ENABLE([dbus],
+  [AS_HELP_STRING([--disable-dbus],
+  [disable DBUS support])],
+  [use_dbus=$enableval],
+  [use_dbus=yes])
+
+AC_ARG_ENABLE([pulse],
+  [AS_HELP_STRING([--enable-pulse],
+  [enable PulseAudio support (default is auto)])],
+  [use_pulse=$enableval],
+  [use_pulse=auto])
+
+AC_ARG_ENABLE([ssh],
+  [AS_HELP_STRING([--disable-ssh],
+  [disable SSH SFTP support (default is enabled)])],
+  [use_ssh=$enableval],
+  [use_ssh=yes])
+
+AC_ARG_ENABLE([samba],
+  [AS_HELP_STRING([--disable-samba],
+  [disable SAMBA support (default is enabled)])],
+  [use_samba=$enableval],
+  [use_samba=yes])
+
+AC_ARG_ENABLE([nfs],
+  [AS_HELP_STRING([--enable-nfs],
+  [enable NFS support via libnfs (default is auto)])],
+  [use_libnfs=$enableval],
+  [use_libnfs=auto])
+
+AC_ARG_ENABLE([airplay],
+  [AS_HELP_STRING([--enable-airplay],
+  [enable AirPlay support(default is auto)])],
+  [use_airplay=$enableval],
+  [use_airplay=auto])
+
+AC_ARG_ENABLE([airtunes],
+  [AS_HELP_STRING([--enable-airtunes],
+  [enable AirTunes support(default is auto)])],
+  [use_airtunes=$enableval],
+  [use_airtunes=auto])
+
+AC_ARG_ENABLE([upnp],
+  [AS_HELP_STRING([--disable-upnp],
+  [disable UPnP support (default is enabled)])],
+  [use_upnp=$enableval],
+  [use_upnp=yes])
+
+AC_ARG_ENABLE([mid],
+  [AS_HELP_STRING([--enable-mid],
+  [enable MID support (default is no)])],
+  [use_mid=$enableval],
+  [use_mid=no])
+
+AC_ARG_ENABLE([avahi],
+  [AS_HELP_STRING([--disable-avahi],
+  [disable Avahi support (default is enabled if libavahi-common and libavahi-client is found)])],
+  [use_avahi=$enableval],
+  [use_avahi=yes])
+
+  AC_ARG_ENABLE([mdnsembedded],
+  [AS_HELP_STRING([--disable-mdnsembedded],
+  [disable mDNSEmbedded support (default is auto)])],
+  [use_mdnsembedded=$enableval],
+  [use_mdnsembedded=auto])
+
+AC_ARG_ENABLE([non-free],
+  [AS_HELP_STRING([--disable-non-free],
+  [disable components with non-compliant licenses])],
+  [use_nonfree=$enableval],
+  [use_nonfree=yes])
+
+AC_ARG_ENABLE([mysql],
+  [AS_HELP_STRING([--disable-mysql],
+  [disable mysql])],
+  [use_mysql=$enableval],
+  [use_mysql=yes])
+
+AC_ARG_ENABLE([webserver],
+  [AS_HELP_STRING([--disable-webserver],
+  [disable webserver])],
+  [use_webserver=$enableval],
+  [use_webserver=yes])
+
+AC_ARG_ENABLE([optical-drive],
+  [AS_HELP_STRING([--disable-optical-drive],
+  [disable optical drive])],
+  [use_optical_drive=$enableval],
+  [use_optical_drive=yes])
+
+AC_ARG_ENABLE([libbluray],
+  [AS_HELP_STRING([--enable-libbluray],
+  [enable libbluray support])],
+  [use_libbluray=$enableval],
+  [use_libbluray=auto])
+
+AC_ARG_ENABLE([libxslt],
+  [AS_HELP_STRING([--disable-libxslt],
+  [enable libxslt (XSLT scrapers) support (default is enabled)])],
+  [use_libxslt=$enableval],
+  [use_libxslt=yes])
+
+AC_ARG_ENABLE([texturepacker],
+  [AS_HELP_STRING([--enable-texturepacker],
+  [enable texturepacker support (default is auto)])],
+  [use_texturepacker=$enableval],
+  [use_texturepacker=auto])
+
+AC_ARG_ENABLE([lirc],
+  [AS_HELP_STRING([--disable-lirc],
+  [disable lirc support (default is enabled)])],
+  [AC_MSG_RESULT("Lirc disabled")],
+  [AC_DEFINE([HAVE_LIRC], [1], ["Lirc enabled"])])
+
+AC_ARG_WITH([lirc-device],
+  [AS_HELP_STRING([--with-lirc-device=file],
+  [specify the default LIRC device (default is /dev/lircd)])],
+  [lirc_device=$withval],
+  [lirc_device=/dev/lircd])
+AC_DEFINE_UNQUOTED([LIRC_DEVICE], ["$lirc_device"], [Default LIRC device])
+
+AC_ARG_ENABLE([udev],
+  [AS_HELP_STRING([--enable-udev],
+  [enable udev support (default is auto)])],
+  [use_libudev=$enableval],
+  [use_libudev=auto])
+
+AC_ARG_ENABLE([libusb],
+  [AS_HELP_STRING([--enable-libusb],
+  [enable libusb support (default is auto)])],
+  [use_libusb=$enableval],
+  [use_libusb=auto])
+
+AC_ARG_ENABLE([libcec],
+  [AS_HELP_STRING([--enable-libcec],
+  [enable libcec support (default is auto)])],
+  [use_libcec=$enableval],
+  [use_libcec=auto])
+
+AC_ARG_ENABLE([lcms2],
+  [AS_HELP_STRING([--enable-lcms2],
+  [enable lcms2 support (default is auto)])],
+  [use_lcms2=$enableval],
+  [use_lcms2=auto])
+
+AC_ARG_ENABLE([libbluetooth],
+  [AS_HELP_STRING([--enable-libbluetooth],
+  [enable libbluetooth support (default is auto)])],
+  [use_libbluetooth=$enableval],
+  [use_libbluetooth=auto])
+
+AC_ARG_ENABLE([libcap],
+  [AS_HELP_STRING([--enable-libcap],
+  [enable libcap support (default is auto)])],
+  [use_libcap=$enableval],
+  [use_libcap=auto])
+
+AC_ARG_ENABLE([player],
+  [AS_HELP_STRING([--enable-player],
+  [enable additional players from a list of comma separated names, (default is none, choices are omxplayer)])],
+  [add_players=$enableval],
+  [add_players=no])
+
+AC_ARG_ENABLE([gtest],
+  [AS_HELP_STRING([--enable-gtest],
+  [configure Google Test Framework (default is yes)])],
+  [configure_gtest=$enableval],
+  [configure_gtest=yes])
+
+AC_ARG_ENABLE([codec],
+  [AS_HELP_STRING([--enable-codec],
+  [enable additional codecs from a list of comma separated names, (default is none, choices are amcodec and imxvpu)])],
+  [add_codecs=$enableval],
+  [add_codecs=no])
+
+AC_ARG_ENABLE([libav-compat],
+  [AS_HELP_STRING([--enable-libav-compat],
+  [build a wrapper around libav to provide the functions needed by ${APP_NAME}. This is
+   *not* supported by ${APP_NAME} developers and is provided only for convenience. (default is no) 'Linux only'])],
+  [use_libav_hacks=$enableval],
+  [use_libav_hacks=no])
+
+### End of external library options
+
+if test "x$host_vendor" != "xapple"; then
+  DEFAULT_COMPILE_FLAGS="-fPIC -DPIC -D_REENTRANT"
+  DEFAULT_COMPILE_FLAGS="$DEFAULT_COMPILE_FLAGS -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64"
+fi
+
+# Checks for programs.
+PASSED_CFLAGS=$CFLAGS # Hack to override autoconf default values
+AC_PROG_CC
+AX_PROG_CC_FOR_BUILD
+CFLAGS="$PASSED_CFLAGS $DEFAULT_COMPILE_FLAGS"
+PASSED_CXXFLAGS=$CXXFLAGS # Hack to override autoconf default values
+AC_PROG_CXX
+AX_PROG_CXX_FOR_BUILD
+CXXFLAGS="$PASSED_CXXFLAGS $DEFAULT_COMPILE_FLAGS"
+AX_CXX_COMPILE_STDCXX_11(,[optional])
+AC_PROG_LIBTOOL
+AC_PROG_AWK
+AC_PROG_LN_S
+AC_PROG_MAKE_SET
+PKG_PROG_PKG_CONFIG
+MAKE="${MAKE:-make}"
+OBJDUMP="${OBJDUMP:-objdump}"
+READELF="${READELF:-readelf}"
+NM="${NM:-nm}"
+
+# host detection and setup
+case $host in
+  i*86*-linux-android*)
+     target_platform=target_android
+     CORE_SYSTEM_NAME=android
+     ARCH="i486-linux"
+     use_arch="x86"
+     use_cpu="i686"
+     use_gles=yes
+     use_optical_drive=no
+     use_x11=no
+     build_shared_lib=yes
+     ;;
+  i*86*-linux-gnu*|i*86*-*-linux-uclibc*)
+     target_platform=target_linux
+     CORE_SYSTEM_NAME=linux
+     ARCH="i486-linux"
+     if test "$use_cpu" = "no" -a "$cross_compiling" = "yes";  then
+        use_arch="x86"
+        use_cpu="i686"
+     fi
+     USE_STATIC_FFMPEG=1
+     # Workaround a build issue on i386 with gcc 4.9:
+     # including <algorithm> pulls in SSE intrinsics.
+     # possible GCC bug? ideas welcome
+     if test "$GCC_CXX" = "yes"; then
+       GCC_VERSION=$($CXX -dumpversion)
+       GCC_MAJOR_VER=$(echo $GCC_VERSION | awk -F"." '{print $1}')
+       GCC_MINOR_VER=$(echo $GCC_VERSION | awk -F"." '{print $2}')
+
+       if (test "$GCC_MAJOR_VER" -eq "4" && test "$GCC_MINOR_VER" -ge "9") || (test "$GCC_MAJOR_VER" -gt "4"); then
+         CXXFLAGS="$CXXFLAGS -msse"
+         AC_MSG_NOTICE("detected gcc version $GCC_VERSION - enabling SSE")
+       fi
+     fi
+     ;;
+  x86_64-*-linux-gnu*|x86_64-*-linux-uclibc*)
+     target_platform=target_linux
+     CORE_SYSTEM_NAME=linux
+     ARCH="x86_64-linux"
+     if test "$use_cpu" = "no" -a "$cross_compiling" = "yes";  then
+        use_arch="x86_64"
+        use_cpu="x86_64"
+     fi
+     USE_STATIC_FFMPEG=1
+     ;;
+  i386-*-freebsd*)
+     target_platform=target_linux
+     CORE_SYSTEM_NAME=linux
+     ARCH="x86-freebsd"
+     MAKE="gmake"
+     ;;
+  amd64-*-freebsd*)
+     target_platform=target_linux
+     CORE_SYSTEM_NAME=linux
+     ARCH="x86_64-freebsd"
+     MAKE="gmake"
+     ;;
+  arm-apple-darwin*)
+     CORE_SYSTEM_NAME=ios
+     use_neon=yes
+     use_libcec=no
+     use_optical_drive=no
+     use_gles=yes
+     use_cpu=cortex-a8
+     ARCH="arm-osx"
+     use_arch="arm"
+     PYTHON_VERSION="2.7"
+     PYTHON_LDFLAGS="-L${prefix}/lib -lpython2.7"
+     PYTHON_CPPFLAGS="-I${prefix}/include/python2.7"
+     PYTHON_SITE_PKG="${prefix}/lib/python2.7/site-packages"
+     PYTHON_NOVERSIONCHECK="no-check"
+     DEPENDS_ROOT_FOR_XCODE=$(echo ${prefix%/*})
+     AC_SUBST([DEPENDS_ROOT_FOR_XCODE])
+     ;;
+  *86*-apple-darwin*)
+     CORE_SYSTEM_NAME=osx
+     ARCH="x86-osx"
+     DEPENDS_ROOT_FOR_XCODE=$(echo ${prefix%/*})
+     AC_SUBST([DEPENDS_ROOT_FOR_XCODE])
+     ;;
+  powerpc-apple-darwin*)
+     CORE_SYSTEM_NAME=osx
+     ARCH="powerpc-osx"
+     use_arch="ppc"
+     DEPENDS_ROOT_FOR_XCODE=$(echo ${prefix%/*})
+     AC_SUBST([DEPENDS_ROOT_FOR_XCODE])
+     ;;
+  powerpc-*-linux-gnu*|powerpc-*-linux-uclibc*)
+     target_platform=target_linux
+     CORE_SYSTEM_NAME=linux
+     ARCH="powerpc-linux"
+     ;;
+  powerpc64*-*-linux-gnu*|powerpc64*-*-linux-uclibc*)
+     target_platform=target_linux
+     CORE_SYSTEM_NAME=linux
+     ARCH="powerpc64-linux"
+     ;;
+  arm*-*-linux-gnu*|arm*-*-linux-uclibc*)
+     target_platform=target_linux
+     CORE_SYSTEM_NAME=linux
+     ARCH="arm"
+     use_arch="arm"
+     use_neon=yes
+     use_gles=yes
+     use_gl=no
+     USE_STATIC_FFMPEG=1
+     ;;
+  aarch64*-*-linux-gnu*|aarch64*-*-linux-uclibc*)
+     target_platform=target_linux
+     ARCH="aarch64"
+     use_arch="aarch64"
+     use_neon=yes
+     # Check whether --enable-gl was given.
+     if test "${enable_gl+set}" = set; then :
+       enableval=$enable_gl; use_gl=$enableval
+     else
+       use_gl=no
+       use_gles=yes
+     fi
+     USE_STATIC_FFMPEG=1
+     ;;
+  arm*-*linux-android*)
+     target_platform=target_android
+     CORE_SYSTEM_NAME=android
+     use_arch="arm"
+     use_cpu=cortex-a9
+     ARCH="arm"
+     use_neon=yes
+     use_gles=yes
+     use_optical_drive=no
+     use_x11=no
+     build_shared_lib=yes
+     ;;
+  mips*-*-linux-gnu*)
+     target_platform=target_linux
+     CORE_SYSTEM_NAME=linux
+     ARCH="mips"
+     use_arch="mips"
+     use_gles=no
+     use_gl=yes
+     use_sdl=yes
+     USE_STATIC_FFMPEG=1
+     ;;
+  *)
+     AC_MSG_ERROR(unsupported host ($host))
+esac
+AC_SUBST([ARCH])
+
+if test "$target_platform" = "target_android" ; then
+  USE_ANDROID=1
+  webserver_checkdepends=yes
+  CFLAGS="$CFLAGS -Wno-psabi"
+  CXXFLAGS="$CXXFLAGS -Wno-psabi"
+  AC_DEFINE(HAS_EGLGLES, [1], [Define if supporting EGL based GLES Framebuffer])
+fi
+
+case $use_platform in
+  raspberry-pi)
+     target_platform=target_raspberry_pi
+     use_neon=no
+     use_cpu=arm1176jzf-s
+     ;;
+  raspberry-pi2)
+     target_platform=target_raspberry_pi
+     use_neon=yes
+     use_cpu=cortex-a7
+     ;;
+esac
+
+if test "$target_platform" = "target_raspberry_pi" ; then
+     use_arch="arm"
+     use_hardcoded_tables="yes"
+     use_openmax=no
+     CORE_SYSTEM_NAME=rbpi
+     ARCH="arm"
+     AC_DEFINE(HAS_EGLGLES, [1], [Define if supporting EGL based GLES Framebuffer])
+     USE_OMXLIB=1; AC_DEFINE([HAVE_OMXLIB],[1],["Define to 1 if OMX libs is enabled"])
+     USE_MMAL=1; AC_DEFINE([HAS_MMAL],[1],["Define to 1 if MMAL libs is enabled"])
+     CFLAGS="$CFLAGS"
+     CXXFLAGS="$CXXFLAGS"
+fi
+
+if test "$host_vendor" = "apple"; then
+  use_avahi=no
+  use_alsa=no
+  use_openmax=no
+  use_libudev=no
+  use_libusb=no
+  use_x11=no
+fi
+
+XBMC_SETUP_ARCH_DEFINES()
+
+# detect soname version
+
+if test "$host_vendor" = "apple"; then
+  echo "#define GIT_REV \"$GIT_REV\"" > git_revision.h
+else
+  SDL_DEFINES="$SDL_DEFINES -D'GIT_REV=\"$GIT_REV\"'"
+fi
+
+if test "$build_shared_lib" = "yes"; then
+  final_message="$final_message\n Shared lib\tYes"
+  AC_SUBST(USE_LIBXBMC,1)
+fi
+
+
+# platform debug flags
+if test "$use_debug" = "yes"; then
+  CMAKE_BUILD_TYPE="Debug"
+  final_message="$final_message\n  Debugging:\tYes"
+  if test "$use_profiling" = "yes"; then
+    final_message="$final_message\n  Profiling:\tYes"
+    DEBUG_FLAGS="-g -pg -D_DEBUG -Wall"
+  else
+    final_message="$final_message\n  Profiling:\tNo"
+    DEBUG_FLAGS="-g -D_DEBUG -Wall"
+  fi
+else
+  CMAKE_BUILD_TYPE="Release"
+  final_message="$final_message\n  Debugging:\tNo"
+  if test "$use_profiling" = "yes"; then
+    final_message="$final_message\n  Profiling:\tYes"
+    DEBUG_FLAGS="-pg -DNDEBUG=1"
+  else
+    final_message="$final_message\n  Profiling:\tNo"
+    DEBUG_FLAGS="-DNDEBUG=1"
+  fi
+fi
+CFLAGS="$DEBUG_FLAGS $CFLAGS"
+CXXFLAGS="$DEBUG_FLAGS $CXXFLAGS"
+
+
+if test "$use_optimizations" = "yes"; then
+  final_message="$final_message\n  Optimization:\tYes"
+  CXXFLAGS="-O2 $CXXFLAGS"
+  CFLAGS="-O2 $CFLAGS"
+else
+  final_message="$final_message\n  Optimization:\tNo"
+fi
+
+
+# platform specific flags
+if echo "$ARCH" | grep -q "freebsd" ; then
+  LOCALBASE="${LOCALBASE:-/usr/local}"
+  CFLAGS="$CFLAGS -I$LOCALBASE/include"
+  CXXFLAGS="$CXXFLAGS -I$LOCALBASE/include"
+  CPPFLAGS="$CPPFLAGS -I$LOCALBASE/include"
+  LDFLAGS="$LDFLAGS -L$LOCALBASE/lib"
+fi
+if test "$host_vendor" = "apple" ; then
+  # standard application paths
+  INCLUDES="$INCLUDES -I\$(abs_top_srcdir)/xbmc/osx"
+  if test "$use_arch" != "arm"; then
+    SAVE_CFLAGS="$CFLAGS"
+    CFLAGS="-msse -msse2"
+    AC_COMPILE_IFELSE(
+      [AC_LANG_SOURCE([int foo;])],
+      [ HAVE_SSE=1
+        HAVE_SSE2=1
+        AC_DEFINE([HAVE_SSE],[1],[sse enabled])
+        AC_DEFINE([HAVE_SSE2],[1],[sse2 enabled])],
+      [ HAVE_SSE=0
+        HAVE_SSE2=0
+        AC_DEFINE([HAVE_SSE],[0],[sse enabled])
+        AC_DEFINE([HAVE_SSE2],[0],[sse2 enabled])
+      ])
+    CFLAGS="$SAVE_CFLAGS"
+
+    LIBS="$LIBS -framework ApplicationServices"
+    LIBS="$LIBS -framework AudioUnit"
+    LIBS="$LIBS -framework AudioToolbox"
+    LIBS="$LIBS -framework Cocoa"
+    LIBS="$LIBS -framework CoreAudio"
+    LIBS="$LIBS -framework CoreVideo"
+    LIBS="$LIBS -framework CoreServices"
+    LIBS="$LIBS -framework CoreFoundation"
+    LIBS="$LIBS -framework DiskArbitration"
+    LIBS="$LIBS -framework IOKit"
+    LIBS="$LIBS -framework IOSurface"
+    LIBS="$LIBS -framework QuartzCore"
+    LIBS="$LIBS -framework SystemConfiguration"
+    LIBS="$LIBS -framework VideoDecodeAcceleration"
+  else
+    #arm/ios
+    LIBS="$LIBS -framework CoreFoundation"
+  fi
+elif test "$target_platform" = "target_raspberry_pi"; then
+  ARCH="arm"
+  use_arch="arm"
+elif test "$use_arch" = "arm"; then
+  CFLAGS="$CFLAGS -mno-apcs-stack-check"
+  CXXFLAGS="$CXXFLAGS -mno-apcs-stack-check"
+  if test "$use_tegra" = "yes"; then
+    # Compile for ARMv7a architecture, need to test gcc for vfpv3-d16 support
+    SAVE_CFLAGS="$CFLAGS"
+    CFLAGS="-mfpu=vfpv3-d16"
+    AC_COMPILE_IFELSE(
+      [AC_LANG_SOURCE([int foo;])],
+      [ CFLAGS="$SAVE_CFLAGS -Wno-psabi -Wa,-march=armv7a -mtune=cortex-a9 -mfpu=vfpv3-d16 -mthumb-interwork"
+        CXXFLAGS="$CXXFLAGS -Wno-psabi -Wa,-march=armv7a -mtune=cortex-a9 -mfpu=vfpv3-d16 -mthumb-interwork"
+        use_cpu=cortex-a9],
+      [ CFLAGS="$SAVE_CFLAGS -Wa,-march=armv6 -mtune=cortex-a8 -mthumb-interwork"
+        CXXFLAGS="$CXXFLAGS -Wa,-march=armv6 -mtune=cortex-a8 -mthumb-interwork"
+        use_cpu=cortex-a8])
+  else
+    if test "$use_neon" = "yes"; then
+      CFLAGS="$CFLAGS -mfpu=neon -mvectorize-with-neon-quad"
+      CXXFLAGS="$CXXFLAGS -mfpu=neon -mvectorize-with-neon-quad"
+    fi
+  fi
+fi
+
+use_sse4=no
+if test "$ARCH" = "x86_64-linux" || test "$ARCH" = "i486-linux"; then
+  SAVE_CFLAGS="$CFLAGS"
+  CFLAGS="-msse -msse2 -msse4.1"
+  AC_COMPILE_IFELSE(
+    [AC_LANG_SOURCE([int foo;])],
+    [ use_sse4=yes
+      HAVE_SSE=1
+      HAVE_SSE2=1
+      HAVE_SSE4=1
+      AC_DEFINE([HAVE_SSE],[1],[sse enabled])
+      AC_DEFINE([HAVE_SSE2],[1],[sse2 enabled])
+      AC_DEFINE([HAVE_SSE4],[1],[sse4.1 enabled])],
+    [ use_sse4=no
+      HAVE_SSE=0
+      HAVE_SSE2=0
+      HAVE_SSE4=0
+      AC_DEFINE([HAVE_SSE],[0],[sse enabled])
+      AC_DEFINE([HAVE_SSE2],[0],[sse2 enabled])
+      AC_DEFINE([HAVE_SSE4],[0],[sse4.1 enabled])
+    ])
+  CFLAGS="$SAVE_CFLAGS"
+fi
+
+# Checks for library functions.
+AC_FUNC_ALLOCA
+AC_FUNC_CHOWN
+AC_FUNC_CLOSEDIR_VOID
+AC_FUNC_ERROR_AT_LINE
+AC_FUNC_FSEEKO
+AC_PROG_GCC_TRADITIONAL
+AC_FUNC_LSTAT
+AC_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK
+AC_FUNC_MEMCMP
+AC_FUNC_MKTIME
+AC_FUNC_MMAP
+# Boxee is apparently having compile problems
+# if HAVE_REALLOC is defined.  Sort this later.
+#AC_FUNC_REALLOC
+AC_FUNC_SELECT_ARGTYPES
+AC_FUNC_SETVBUF_REVERSED
+AC_TYPE_SIGNAL
+AC_FUNC_STAT
+AC_FUNC_STRCOLL
+AC_FUNC_STRFTIME
+AC_FUNC_STRTOD
+AC_FUNC_UTIME_NULL
+AC_FUNC_VPRINTF
+AC_CHECK_FUNCS([atexit dup2 fdatasync floor fs_stat_dev ftime ftruncate getcwd gethostbyaddr gethostbyname gethostname getpagesize getpass gettimeofday inet_ntoa lchown localeconv memchr memmove memset mkdir modf munmap pow rmdir select setenv setlocale socket sqrt strcasecmp strchr strcspn strdup strerror strncasecmp strpbrk strrchr strspn strstr strtol strtoul sysinfo tzset utime posix_fadvise localtime_r])
+
+# Check for various sizes
+AC_CHECK_SIZEOF([int])
+AC_CHECK_SIZEOF([size_t])
+
+# Check for intrinsics
+AC_MSG_CHECKING([for __sync_add_and_fetch(temp, 1)])
+AC_TRY_LINK([],[long* temp=0; long ret=__sync_add_and_fetch(temp, 1);],
+                [have_builtin_sync_add_and_fetch=yes],
+                [have_builtin_sync_add_and_fetch=no])
+AC_MSG_RESULT($have_builtin_sync_add_and_fetch)
+if test "x$have_builtin_sync_add_and_fetch" = "xyes"; then
+    AC_DEFINE(HAS_BUILTIN_SYNC_ADD_AND_FETCH, 1,
+        [Define to 1 if your compiler supports the __sync_add_and_fetch() intrinsic.])
+fi
+
+AC_MSG_CHECKING([for __sync_sub_and_fetch(temp, 1)])
+AC_TRY_LINK([],[long* temp=0; long ret=__sync_sub_and_fetch(temp, 1);],
+                [have_builtin_sync_sub_and_fetch=yes],
+                [have_builtin_sync_sub_and_fetch=no])
+AC_MSG_RESULT($have_builtin_sync_sub_and_fetch)
+if test "x$have_builtin_sync_sub_and_fetch" = "xyes"; then
+    AC_DEFINE(HAS_BUILTIN_SYNC_SUB_AND_FETCH, 1,
+        [Define to 1 if your compiler supports the __sync_sub_and_fetch() intrinsic.])
+fi
+
+AC_MSG_CHECKING([for __sync_val_compare_and_swap(temp, 1, 1)])
+AC_TRY_LINK([],[long *temp = 0; long ret=__sync_val_compare_and_swap(temp, 1, 1);],
+                [have_builtin_sync_val_compare_and_swap=yes],
+                [have_builtin_sync_val_compare_and_swap=no])
+AC_MSG_RESULT($have_builtin_sync_val_compare_and_swap)
+if test "x$have_builtin_sync_val_compare_and_swap" = "xyes"; then
+    AC_DEFINE(HAS_BUILTIN_SYNC_VAL_COMPARE_AND_SWAP, 1,
+        [Define to 1 if your compiler supports the __sync_val_compare_and_swap() intrinsic.])
+fi
+
+# Check for u16string/u32string declarations
+AC_LANG_PUSH([C++])
+AC_CHECK_TYPES([std::u16string, std::u32string], [], [], [[#include <string>]])
+AC_CHECK_TYPES([char16_t, char32_t])
+AC_CHECK_SIZEOF([wchar_t])
+AC_LANG_POP([C++])
+
+# Check inotify availability
+AC_CHECK_HEADER([sys/inotify.h], AC_DEFINE([HAVE_INOTIFY],[1],[Define if we have inotify]),)
+
+# Python
+if test -z "$PYTHON_NOVERSIONCHECK"; then
+  AX_PYTHON_DEVEL([>= '2.6'])
+  AX_PYTHON_DEVEL([< '3.0'])
+  PYTHON_VERSION=$ac_python_version
+fi
+
+if test -z "$PYTHON_VERSION"; then
+  AC_MSG_ERROR([Can't find a Python version.])
+else
+  LIBS="$LIBS $PYTHON_LDFLAGS"
+  AC_MSG_NOTICE([Using Python $PYTHON_VERSION])
+fi
+
+# Checks for platforms libraries.
+if test "$use_gles" = "yes"; then
+  use_gl="no"
+  # GLES overwrites GL if both set to yes.
+  if test "$host_vendor" = "apple" ; then
+    AC_DEFINE([HAVE_LIBEGL],[1],["Define to 1 if you have the `EGL' library (-lEGL)."])
+    AC_DEFINE([HAVE_LIBGLESV2],[1],["Define to 1 if you have the `GLESv2' library (-lGLESv2)."])
+    AC_MSG_RESULT(== WARNING: OpenGLES support is assumed.)
+  else
+    if test "$target_platform" = "target_raspberry_pi"; then
+      AC_DEFINE([HAVE_LIBEGL],[1],["Define to 1 if you have the `EGL' library (-lEGL)."])
+      AC_DEFINE([HAVE_LIBGLESV2],[1],["Define to 1 if you have the `GLESv2' library (-lGLESv2)."])
+      AC_MSG_RESULT(== WARNING: OpenGLES support is assumed.)
+      LIBS="$LIBS -lEGL -lGLESv2 -lbcm_host -lvcos -lvchiq_arm -lmmal -lmmal_core -lmmal_util -lvcsm"
+    else
+      AC_CHECK_LIB([EGL],   [main],, AC_MSG_ERROR($missing_library))
+      AC_CHECK_LIB([GLESv2],[main],, AC_MSG_ERROR($missing_library))
+    fi
+  fi
+else
+  if test "$use_gl" = "yes"; then
+    if test "$host_vendor" = "apple" ; then
+      # linking to OpenGL.framework instead of libGL, libGLU so AC_CHECK_LIB will fail
+      LIBS="$LIBS -framework OpenGL"
+      AC_DEFINE([HAVE_LIBGL],[1],["Define to 1 if you have the `GL' library (-lGL)."])
+      AC_MSG_RESULT(== WARNING: OpenGL support is assumed.)
+      AC_DEFINE([HAVE_LIBGLU],[1],["Define to 1 if you have the `GLU' library (-lGLU)."])
+      AC_MSG_RESULT(== WARNING: OpenGLU support is assumed.)
+    else
+      AC_CHECK_LIB([GL],  [main],, AC_MSG_ERROR($missing_library))
+      AC_CHECK_LIB([GLU], [main],, AC_MSG_ERROR($missing_library))
+    fi
+  else
+    AC_MSG_RESULT(== WARNING: OpenGL support is disabled. ${APP_NAME} will run VERY slow. ==)
+    AC_CHECK_LIB([SDL2_gfx],[main])
+  fi
+fi
+
+# platform common libraries
+if test "$use_mysql" = "yes"; then
+  AC_PATH_PROG(MYSQL_CONFIG, mysql_config,"no")
+  if test "x$MYSQL_CONFIG" != "xno"; then
+    AC_DEFINE([HAVE_MYSQL],[1],["Define to 1 if you have the `mysql' library (-lmysqlclient)."])
+    INCLUDES="$INCLUDES `$MYSQL_CONFIG --include`"
+    MYSQL_LIBS=`$MYSQL_CONFIG --libs`
+    LIBS="$LIBS $MYSQL_LIBS"
+    AC_SUBST(MYSQL_LIBS)
+  else
+    AC_MSG_ERROR($missing_program)
+  fi
+fi
+AC_CHECK_HEADER([ass/ass.h],, AC_MSG_ERROR($missing_library))
+
+PKG_CHECK_MODULES([LIBCURL], [libcurl],, AC_MSG_ERROR([libcurl not found]))
+XB_FIND_SONAME([CURL], [curl])
+AC_MSG_CHECKING([for CRYPTO_set_locking_callback(0) in $CURL_SONAME])
+if test "$host_vendor" = "apple" ; then
+  libchecker="$NM"
+  searchpattern="T [_]?CRYPTO_set_locking_call"
+else
+  libchecker="$READELF -s"
+  searchpattern="CRYPTO_set_locking_call"
+fi
+if test $($libchecker $CURL_FILENAME  | grep -Eq "${searchpattern}" ; echo $?) -eq 0 ; then
+  AC_MSG_RESULT(yes)
+  AC_DEFINE([HAS_CURL_STATIC], [1], [Whether OpenSSL inside libcurl is static.])
+else
+  AC_MSG_RESULT(no)
+fi
+
+PKG_CHECK_MODULES([OPENSSL], [openssl],
+  [INCLUDES="$INCLUDES $OPENSSL_CFLAGS"; LIBS="$LIBS $OPENSSL_LIBS"; AC_DEFINE([HAVE_OPENSSL],[1],[Define if we have openssl])],)
+AC_CHECK_HEADER([gcrypt.h], gcrypt_headers_available=yes,gcrypt_headers_available=no)
+if test "$gcrypt_headers_available" = "yes"; then
+   # if we have the headers then we must have the lib
+   AC_CHECK_LIB([gpg-error],[main],, AC_MSG_ERROR($missing_library))
+   AC_CHECK_LIB([gcrypt],[gcry_control],, AC_MSG_ERROR($missing_library))
+   AC_DEFINE([HAVE_GCRYPT],[1],[Define if we have gcrypt])
+fi
+PKG_CHECK_MODULES([GNUTLS], [gnutls], [have_gnutls=yes];AC_DEFINE([HAVE_GNUTLS], [1], [Define if we have gnutls]), AC_MSG_WARN("gnutls not found"))
+
+AC_CHECK_LIB([bz2],         [main],, AC_MSG_ERROR($missing_library))
+if echo "$ARCH" | grep -q freebsd; then
+AC_CHECK_LIB([pthread],     [main],LIBS="-pthread $LIBS", AC_MSG_ERROR($missing_library))
+AC_CHECK_LIB([pthread],     [pthread_set_name_np],
+  AC_DEFINE([HAVE_PTHREAD_SET_NAME_NP],[1],["Define to 1 if pthread has pthread_set_name_np"]),
+  AC_MSG_RESULT([Could not find pthread_set_name_np in pthread]))
+else
+if test "$target_platform" != "target_android" ; then
+  AC_CHECK_LIB([pthread],     [main],, AC_MSG_ERROR($missing_library))
+  AC_CHECK_LIB([pthread],     [pthread_setname_np],
+    AC_DEFINE([HAVE_PTHREAD_SETNAME_NP],[1],["Define to 1 if pthread has pthread_setname_np"]),
+    AC_MSG_RESULT([Could not find pthread_setname_np in pthread]))
+fi
+fi
+AC_CHECK_LIB([lzo2],        [main],, AC_MSG_ERROR($missing_library))
+AC_CHECK_LIB([z],           [main],, AC_MSG_ERROR($missing_library))
+AC_CHECK_LIB([crypto],      [main],, AC_MSG_ERROR($missing_library))
+AC_CHECK_LIB([ssl],         [main],, AC_MSG_ERROR($missing_library))
+if test "$use_mysql" = "yes"; then
+  AC_CHECK_LIB([mysqlclient], [main],, AC_MSG_ERROR($missing_library))
+fi
+
+
+AC_LANG_PUSH([C++])
+PKG_CHECK_MODULES([TINYXML], [tinyxml >= 2.6.2],
+  [INCLUDES="$INCLUDES $TINYXML_CFLAGS"; LIBS="$LIBS $TINYXML_LIBS"],
+  [AC_RUN_IFELSE(
+   [AC_LANG_SOURCE([[
+#include <stdlib.h>
+#include <tinyxml.h>
+
+int main() {
+  if (TIXML_MAJOR_VERSION < 2) exit(1);
+  if (TIXML_MAJOR_VERSION == 2 && ( TIXML_MINOR_VERSION < 6 || ( TIXML_MINOR_VERSION == 6 && TIXML_PATCH_VERSION < 2 ))) exit(1);
+}
+    ]])],[AC_CHECK_LIB([tinyxml], [main],, AC_MSG_ERROR("tinyxml >= 2.6.2 not found"))], [AC_MSG_ERROR([tinyxml >= 2.6.2 not found])]
+  )])
+AC_LANG_POP([C++])
+
+if test "${target_platform}" = "target_linux" || test "${target_platform}" = "target_raspberry_pi" || test "${target_platform}" = "target_android"; then
+  PKG_CHECK_MODULES([UUID], [uuid],, AC_MSG_ERROR(libuuid not found))
+fi
+
+AC_MSG_CHECKING("for libcrossguid")
+AC_LANG_PUSH([C++])
+SAVED_LIBS="$LIBS"
+LIBS="$LIBS -lcrossguid $UUID_LIBS"
+AC_LINK_IFELSE(
+  [AC_LANG_PROGRAM(
+    [#include <guid.h>],
+    [Guid dummy])],
+  [AC_MSG_RESULT(yes); SAVED_LIBS="$SAVED_LIBS $LDFLAGS -lcrossguid $UUID_LIBS"],
+  [AC_MSG_ERROR(crossguid not found)])
+LIBS="$SAVED_LIBS"
+AC_LANG_POP([C++])
+
+PKG_CHECK_MODULES([YAJL], [yajl >= 2],
+  [INCLUDES="$INCLUDES $YAJL_CFLAGS"; LIBS="$LIBS $YAJL_LIBS"; YAJL_FOUND="true"],
+  [AC_COMPILE_IFELSE(
+    [AC_LANG_SOURCE([[
+#include <yajl/yajl_version.h>
+#if !defined YAJL_MAJOR || YAJL_MAJOR < 2
+#error yajl version < 2;
+#endif
+    ]])],, [AC_MSG_ERROR([libyajl >= 2.0.0 not found])]
+  )])
+
+if test "$YAJL_FOUND" != "true"; then
+  AC_CHECK_LIB([yajl], [main],, [AC_MSG_ERROR("libyajl >= 2.0.0 not found")])
+  AC_CHECK_HEADERS([yajl/yajl_common.h], [AC_MSG_NOTICE(libyajl2 found)], [AC_MSG_ERROR("yajl/yajl_common.h not found")])
+fi
+
+if test "$target_platform" = "target_android" ; then
+  AC_CHECK_LIB([android],     [main],, AC_MSG_ERROR($missing_library))
+  AC_CHECK_LIB([log],         [__android_log_vprint],, AC_MSG_ERROR($missing_library))
+  AC_CHECK_LIB([jnigraphics],     [main],, AC_MSG_ERROR($missing_library))
+fi
+
+# check for libbxslt
+AS_CASE([x$use_libxslt],
+  [xyes],[
+    PKG_CHECK_MODULES([LIBXML], [libxml-2.0],
+      [INCLUDES="$INCLUDES $LIBXML_CFLAGS"; LIBS="$LIBS $LIBXML_LIBS"],
+      AC_MSG_ERROR($missing_library))
+    PKG_CHECK_MODULES([LIBXSLT], [libxslt],
+      [INCLUDES="$INCLUDES $LIBXSLT_CFLAGS"; LIBS="$LIBS $LIBXSLT_LIBS"],
+      AC_MSG_ERROR($missing_library))
+    AC_DEFINE([HAVE_LIBXSLT], 1, [System has libxslt library])
+    AC_SUBST([HAVE_LIBXSLT], 1)
+  ],[
+    AC_SUBST([HAVE_LIBXSLT], 0)
+  ]
+)
+PKG_CHECK_MODULES([FRIBIDI],    [fribidi],
+  [INCLUDES="$INCLUDES $FRIBIDI_CFLAGS"; LIBS="$LIBS $FRIBIDI_LIBS"],
+  AC_MSG_ERROR($missing_library))
+PKG_CHECK_MODULES([SQLITE3],    [sqlite3],
+  [INCLUDES="$INCLUDES $SQLITE3_CFLAGS"; LIBS="$LIBS $SQLITE3_LIBS"],
+  AC_MSG_ERROR($missing_library))
+PKG_CHECK_MODULES([PCRECPP],    [libpcrecpp],
+  [INCLUDES="$INCLUDES $PCRECPP_CFLAGS"; LIBS="$LIBS $PCRECPP_LIBS"]; \
+  AC_DEFINE([HAVE_LIBPCRECPP],[1],["Define to 1 if libpcrecpp is installed"]),
+  AC_MSG_ERROR($missing_library))
+PKG_CHECK_MODULES([PCRE],       [libpcre],
+  [INCLUDES="$INCLUDES $PCRE_CFLAGS"; LIBS="$LIBS $PCRE_LIBS"]; \
+  AC_DEFINE([HAVE_LIBPCRE],[1],["Define to 1 if libpcre is installed"]),
+  AC_MSG_ERROR($missing_library))
+PKG_CHECK_MODULES([FREETYPE2],  [freetype2],
+  [INCLUDES="$INCLUDES $FREETYPE2_CFLAGS"; LIBS="$LIBS $FREETYPE2_LIBS"],
+  AC_MSG_ERROR($missing_library))
+PKG_CHECK_MODULES([TAGLIB],  [taglib >= 1.9],
+  [INCLUDES="$INCLUDES $TAGLIB_CFLAGS"; LIBS="$LIBS $TAGLIB_LIBS"],
+  AC_MSG_ERROR($missing_library))
+
+if test "$use_optical_drive" = "yes"; then
+  PKG_CHECK_MODULES([CDIO],       [libcdio],
+    [INCLUDES="$INCLUDES $CDIO_CFLAGS"; LIBS="$LIBS $CDIO_LIBS"],
+    AC_MSG_ERROR($missing_library))
+fi
+
+if test "$target_platform" = "target_android" ; then
+PKG_CHECK_MODULES([ZIP],       [libzip],
+  [INCLUDES="$INCLUDES $ZIP_CFLAGS"; LIBS="$LIBS $ZIP_LIBS"],
+  AC_MSG_ERROR($missing_library))
+fi
+
+# check for libbluray
+AS_CASE([x$use_libbluray],
+  [xyes],[
+    PKG_CHECK_MODULES([LIBBLURAY],[libbluray >= 0.7.0],[use_libbluray="yes"], AC_MSG_ERROR($missing_library))
+  ],
+  [xauto],[
+    PKG_CHECK_MODULES([LIBBLURAY],[libbluray >= 0.7.0],[use_libbluray="yes"], [use_libbluray="no"])
+  ])
+
+AS_CASE([x$use_libbluray],
+  [xyes],[
+    INCLUDES="$INCLUDES $LIBBLURAY_CFLAGS";
+    LIBBLURAY_LIB_BASENAME=`$PKG_CONFIG --libs-only-L "libbluray >= 0.7.0"`;
+    XB_FIND_SONAME([BLURAY], [bluray], [use_libbluray], [$LIBBLURAY_LIB_BASENAME])
+    AC_DEFINE([HAVE_LIBBLURAY], 1, [System has libbluray library])
+    AC_SUBST([HAVE_LIBBLURAY], 1)
+    AC_CHECK_LIB([bluray], [bd_register_argb_overlay_proc],
+      AC_CHECK_DECL([BD_EVENT_IDLE],
+        AC_DEFINE([HAVE_LIBBLURAY_BDJ], 1, [System has libbluray library with bdj support]),,
+        [[#include <libbluray/bluray.h>]]))
+  ],[
+    AC_SUBST([HAVE_LIBBLURAY], 0)
+  ]
+)
+
+#Check to see if libs are needed for functions that are often built-in to libc
+AC_SEARCH_LIBS([iconv_open],iconv,,AC_SEARCH_LIBS([libiconv_open],iconv,,AC_MSG_ERROR($missing_library)))
+AC_SEARCH_LIBS([dlopen],dl)
+AC_SEARCH_LIBS([clock_gettime],rt)
+AC_SEARCH_LIBS([dn_expand],  resolv)
+AC_SEARCH_LIBS([_dn_expand], resolv)
+AC_SEARCH_LIBS([__dn_expand],resolv)
+
+# platform dependent libraries
+if test "$host_vendor" = "apple" ; then
+  if test "$use_arch" != "arm"; then
+    AC_CHECK_LIB([SDL],      [main],, AC_MSG_ERROR($missing_library))
+    AC_DEFINE([HAVE_SDL],[1],["Define to 1 if using sdl"])
+    AC_DEFINE([HAVE_SDL_VERSION],[1],["SDL major version"])
+  fi
+else
+if test "x$use_alsa" != "xno"; then
+  PKG_CHECK_MODULES([ALSA],  [alsa],
+    [INCLUDES="$INCLUDES $ALSA_CFLAGS"; LIBS="$LIBS $ALSA_LIBS"; use_alsa=yes],
+    AC_MSG_NOTICE($alsa_not_found); use_alsa=no)
+fi
+if test "x$use_dbus" != "xno"; then
+  PKG_CHECK_MODULES([DBUS],    [dbus-1],
+    [INCLUDES="$INCLUDES $DBUS_CFLAGS"; LIBS="$LIBS $DBUS_LIBS"; use_dbus=yes]; \
+    AC_DEFINE([HAVE_DBUS],[1],["Define to 1 if dbus is installed"]),
+    AC_MSG_NOTICE($missing_library); use_dbus=no)
+else
+  AC_MSG_NOTICE($dbus_disabled)
+fi
+fi
+
+XB_FIND_SONAME([ASS],         [ass])
+
+# WebServer
+if test "$use_webserver" = "yes"; then
+  AC_CHECK_LIB([microhttpd],  [main],, AC_MSG_ERROR($missing_library))
+fi
+
+# Optical
+if test "$use_optical_drive" = "yes"; then
+  AC_DEFINE([HAS_DVD_DRIVE], [1], [Define to 1 to have optical drive support])
+  USE_OPTICAL_DRIVE=1
+else
+  USE_OPTICAL_DRIVE=0
+fi
+
+# Alsa
+if test "$use_alsa" = "yes"; then
+  PKG_CHECK_MODULES([ALSA],  [alsa],
+    [INCLUDES="$INCLUDES $ALSA_CFLAGS"; LIBS="$LIBS $ALSA_LIBS"],
+    AC_MSG_ERROR($missing_library))
+  AC_DEFINE([HAS_ALSA], [1], [Define to 0 to disable ALSA support])
+else
+  use_alsa="no"
+  AC_MSG_RESULT($alsa_disabled)
+fi
+
+# PulseAudio
+if test "x$use_pulse" != "xno"; then
+  if test "$host_vendor" = "apple" ; then
+    if test "x$use_pulse" = "xyes"; then
+      AC_MSG_ERROR($pulse_disabled)
+    else
+      use_pulse="no"
+      AC_MSG_RESULT($pulse_disabled)
+    fi
+    USE_PULSE=0
+  else
+    PKG_CHECK_MODULES([PULSE], [libpulse >= 1.0],
+      [INCLUDES="$INCLUDES $PULSE_CFLAGS"; LIBS="$LIBS $PULSE_LIBS"; USE_PULSE=1;
+        HAVE_LIBPULSE=1; AC_DEFINE([HAVE_LIBPULSE],[1],[Pulse audio enabled])],
+      [pulse_found="no"; USE_PULSE=0; HAVE_LIBPULSE=0])
+
+    if test "$pulse_found" = "no"; then
+      if test "x$use_pulse" = "xyes"; then
+        AC_MSG_ERROR($pulse_not_found)
+      else
+        use_pulse="no"
+        AC_MSG_RESULT($pulse_disabled)
+      fi
+    fi
+  fi
+else
+  AC_MSG_RESULT($pulse_disabled)
+  USE_PULSE=0
+fi
+
+# avahi
+if test "$use_avahi" = "yes"; then
+  AC_CHECK_LIB([avahi-common], [main],,
+    use_avahi=no;AC_MSG_RESULT($avahi_not_found))
+  if test "$use_avahi" = "yes"; then
+    #either both libs or none
+    AC_CHECK_LIB([avahi-client], [main],,
+      use_avahi=no;AC_MSG_RESULT($avahi_not_found))
+  fi
+else
+  AC_MSG_RESULT($avahi_disabled)
+fi
+
+# mdnsembedded
+if test "$use_mdnsembedded" != "no"; then
+  AC_CHECK_LIB([mDNSEmbedded], [embedded_mDNSInit],,
+    [if test "$use_mdnsembedded" = "yes"; then
+      AC_MSG_ERROR($mdnsembedded_not_found)
+      USE_MDNSEMBEDDED=0
+    elif test "$use_mdnsembedded" != "no"; then
+      AC_MSG_NOTICE($mdnsembedded_not_found)
+      use_mdnsembedded="no"
+      USE_MDNSEMBEDDED=0
+    fi
+   ])
+  if test $use_mdnsembedded != "no"; then
+    USE_MDNSEMBEDDED=1
+  fi
+else
+  AC_MSG_RESULT($mdnsembedded_disabled)
+  USE_MDNSEMBEDDED=0
+fi
+AC_SUBST(USE_MDNSEMBEDDED)
+
+# X11
+if test "$use_x11" = "yes"; then
+  AC_MSG_NOTICE($x11_enabled)
+  PKG_CHECK_MODULES([X11],    [x11],
+    [INCLUDES="$INCLUDES $X11_CFLAGS"; LIBS="$LIBS $X11_LIBS"],
+    AC_MSG_ERROR($missing_library))
+  PKG_CHECK_MODULES([XEXT],  [xext],
+    [INCLUDES="$INCLUDES $XEXT_CFLAGS"; LIBS="$LIBS $XEXT_LIBS"],
+    AC_MSG_ERROR($missing_library))
+  PKG_CHECK_MODULES([XRANDR], [xrandr],
+    [INCLUDES="$INCLUDES $XRANDR_CFLAGS"; LIBS="$LIBS $XRANDR_LIBS"],
+    AC_MSG_ERROR($missing_library))
+  PKG_CHECK_MODULES([DRM],  [libdrm],
+    [INCLUDES="$INCLUDES $DRM_CFLAGS"; LIBS="$LIBS $DRM_LIBS"],
+    AC_MSG_ERROR($missing_library))
+  PKG_CHECK_MODULES([EGL], [egl],
+    [INCLUDES="$INCLUDES $EGL_CFLAGS"; LIBS="$LIBS $EGL_LIBS"],
+    AC_MSG_ERROR($missing_library))
+  AC_DEFINE([HAVE_X11], [1], [Define to 1 if you have X11 libs installed.])
+else
+  AC_MSG_RESULT($x11_disabled)
+fi
+
+# libssh
+if test "x$use_ssh" = "xno"; then
+  AC_MSG_NOTICE(ssh support disabled by user)
+  use_libssh="no"
+else
+  PKG_CHECK_MODULES([LIBSSH], [libssh],
+    [INCLUDES="$INCLUDES $LIBSSH_CFLAGS"; LIBS="$LIBS $LIBSSH_LIBS"; AC_DEFINE([HAVE_LIBSSH], [1], [Whether to use libSSH library.])],
+    AC_MSG_ERROR(libssh not found))
+fi
+
+# samba
+if test "x$use_samba" != "xno"; then
+  PKG_CHECK_MODULES([SAMBA], [smbclient],
+    [INCLUDES="$INCLUDES $SAMBA_CFLAGS"; LIBS="$LIBS $SAMBA_LIBS"],
+    [AC_CHECK_LIB([smbclient], [main],,
+      use_samba=no;AC_MSG_ERROR($missing_library))
+      USE_LIBSMBCLIENT=0
+    ])
+else
+  AC_MSG_RESULT($samba_disabled)
+  USE_LIBSMBCLIENT=0
+fi
+
+if test "x$use_samba" != "xno"; then
+  AC_DEFINE([HAVE_LIBSMBCLIENT], [1], [Define to 1 if you have Samba installed])
+  USE_LIBSMBCLIENT=1
+fi
+
+# libnfs
+if test "$use_libnfs" != "no"; then
+  AC_CHECK_HEADERS([nfsc/libnfs.h],,
+   [if test "$use_libnfs" = "yes"; then
+      AC_MSG_ERROR($libnfs_not_found)
+      USE_LIBNFS=0
+    elif test "$use_libnfs" != "no"; then
+      AC_MSG_NOTICE($libnfs_not_found)
+      use_libnfs="no"
+      USE_LIBNFS=0
+    fi
+   ])
+  if test "$use_libnfs" != "no"; then
+    XB_FIND_SONAME([NFS], [nfs], [use_libnfs])
+  fi
+  if test "$use_libnfs" != "no"; then
+    AC_DEFINE([HAVE_LIBNFS], [1], [Whether to use libnfs library.])
+    USE_LIBNFS=1
+  fi
+else
+  USE_LIBNFS=0
+  AC_MSG_NOTICE($libnfs_disabled)
+fi
+
+# libplist for airplay feature
+USE_AIRPLAY=0
+if test "$use_airplay" != "no"; then
+  AC_CHECK_HEADER([plist/plist.h],,
+   [if test "$use_airplay" = "yes"; then
+      AC_MSG_ERROR($libplist_not_found)
+    elif test "$use_airplay" != "no"; then
+      AC_MSG_NOTICE($libplist_not_found)
+      use_airplay="no"
+    fi
+   ])
+
+  if test "$use_airplay" != "no"; then
+    XB_FIND_SONAME([PLIST], [plist], [use_airplay])
+    USE_AIRPLAY=1
+    AC_DEFINE([HAVE_LIBPLIST],[1],["Define to 1 if you have libplist."])
+  fi
+fi
+
+# libshairplay for AirTunes
+USE_AIRTUNES=0
+if test "x$use_airtunes" != "xno"; then
+  AC_CHECK_HEADERS([shairplay/raop.h],USE_AIRTUNES=1,
+   [AC_MSG_NOTICE($libshairplay_not_found)
+   ])
+
+  if test "x$USE_AIRTUNES" != "x0"; then
+    XB_FIND_SONAME([SHAIRPLAY], [shairplay], [USE_AIRTUNES])
+    AC_CHECK_MEMBERS([struct raop_callbacks_s.audio_remote_control_id],
+                     AC_DEFINE([HAVE_LIBSHAIRPLAY],[1],["Define to 1 if you have libshairplay."]),
+                     USE_AIRTUNES=0,
+                     [[#include <shairplay/raop.h>]])
+  fi
+
+  if test "x$USE_AIRTUNES" == "x0"; then
+    if test "x$use_airtunes" == "xyes"; then
+      AC_MSG_ERROR("No airtunes library could be found. (libshairplay)")
+    fi
+    use_airtunes="no"
+  fi
+fi
+
+# libudev
+USE_LIBUDEV=0
+if test "$use_libudev" = "auto"; then
+  PKG_CHECK_MODULES([UDEV],[libudev],,[use_libudev="no";AC_MSG_RESULT($libudev_not_found)])
+elif test "$use_libudev" = "yes" ; then
+  PKG_CHECK_MODULES([UDEV],[libudev],,[use_libudev="no";AC_MSG_ERROR($libudev_not_found)])
+else
+  AC_MSG_NOTICE($libudev_disabled)
+fi
+
+if test "x$use_libudev" != "xno"; then
+  USE_LIBUDEV=1;INCLUDES="$INCLUDES $UDEV_CFLAGS";LIBS="$LIBS $UDEV_LIBS"
+  AC_DEFINE([HAVE_LIBUDEV],[1],["Define to 1 if libudev is installed"])
+fi
+
+# libusb
+USE_LIBUSB=0
+
+# if libudev is available, we don't need libusb
+if test "x$use_libudev" != "xno"; then
+  use_libusb="no"
+  AC_MSG_NOTICE($libusb_disabled_udev_found)
+else
+  if echo "$ARCH" | grep -q freebsd ; then
+    AC_CHECK_LIB([usb],[main],
+	  	[use_libusb="yes";USB_LIBS="-lusb"],
+		[use_libusb="no";AC_MSG_RESULT($libusb_not_found)])
+  elif test "$use_libusb" = "auto"; then
+    PKG_CHECK_MODULES([USB],[libusb],,[use_libusb="no";AC_MSG_RESULT($libusb_not_found)])
+  elif test "$use_libusb" = "yes"; then
+    PKG_CHECK_MODULES([USB],[libusb],,[use_libusb="no";AC_MSG_ERROR($libusb_not_found)])
+  else
+    AC_MSG_NOTICE($libusb_disabled)
+  fi
+
+  if test "x$use_libusb" != "xno"; then
+    USE_LIBUSB=1;INCLUDES="$INCLUDES $USB_CFLAGS";LIBS="$LIBS $USB_LIBS"
+    AC_DEFINE([HAVE_LIBUSB],[1],["Define to 1 if libusb is installed"])
+  fi
+fi
+
+# libcec
+USE_LIBCEC=0
+if test "x$use_libcec" != "xno"; then
+  # libcec is dyloaded, so we need to check for its headers and link any depends.
+  if test "x$use_libcec" != "xno"; then
+    if test "x$use_libcec" != "xauto"; then
+      PKG_CHECK_MODULES([CEC],[libcec >= 4.0.0],,[use_libcec="no";AC_MSG_ERROR($libcec_disabled)])
+    else
+      PKG_CHECK_MODULES([CEC],[libcec >= 4.0.0],,[use_libcec="no";AC_MSG_RESULT($libcec_disabled)])
+    fi
+
+    if test "x$use_libcec" != "xno"; then
+      INCLUDES="$INCLUDES $CEC_CFLAGS"
+      USE_LIBCEC=1;AC_DEFINE([HAVE_LIBCEC],[1],["Define to 1 if libcec is installed"])
+      XB_FIND_SONAME([LIBCEC],[cec],[use_libcec])
+      AC_MSG_NOTICE($libcec_enabled)
+    else
+      use_libcec="no"
+      AC_MSG_NOTICE($libcec_disabled)
+    fi
+  fi
+else
+  use_libcec="no"
+  AC_MSG_NOTICE($libcec_disabled)
+fi
+
+# lcms2
+if test "$use_lcms2" = "auto"; then
+  PKG_CHECK_MODULES([LCMS2],[lcms2],,[use_lcms2="no";AC_MSG_RESULT($lcms2_not_found)])
+elif test "$use_lcms2" = "yes" ; then
+  PKG_CHECK_MODULES([LCMS2],[lcms2],,[use_lcms2="no";AC_MSG_ERROR($lcms2_not_found)])
+else
+  AC_MSG_NOTICE($lcms2_disabled)
+fi
+
+if test "x$use_lcms2" != "xno"; then
+  USE_LCMS2=1;INCLUDES="$INCLUDES $LCMS2_CFLAGS";LIBS="$LIBS $LCMS2_LIBS"
+  AC_DEFINE([HAVE_LCMS2],[1],["Define to 1 if lcms2 is installed"])
+  AC_MSG_NOTICE($lcms2_enabled)
+fi
+
+# libbluetooth
+USE_LIBBLUETOOTH=0
+if test "$use_libbluetooth" = "auto"; then
+  PKG_CHECK_MODULES([BLUETOOTH],[bluez],,[use_libbluetooth="no";AC_MSG_RESULT($libbluetooth_not_found)])
+elif test "$use_libbluetooth" = "yes"; then
+  PKG_CHECK_MODULES([BLUETOOTH],[bluez],,[use_libbluetooth="no";AC_MSG_ERROR($libbluetooth_not_found)])
+else
+  AC_MSG_NOTICE($libbluetooth_disabled)
+fi
+
+if test "x$use_libbluetooth" != "xno"; then
+  USE_LIBBLUETOOTH=1;INCLUDES="$INCLUDES $BLUETOOTH_CFLAGS";LIBS="$LIBS $BLUETOOTH_LIBS"
+  AC_DEFINE([HAVE_LIBBLUETOOTH],[1],["Define to 1 if libbluetooth is installed"])
+  AC_MSG_NOTICE($libbluetooth_enabled)
+fi
+
+# libcap
+if test "$use_libcap" != "no"; then
+  AC_CHECK_HEADERS([sys/capability.h],,
+   [if test "$use_libcap" = "yes"; then
+      AC_MSG_ERROR($libcap_not_found)
+    elif test "$use_libcap" != "no"; then
+      AC_MSG_NOTICE($libcap_not_found)
+      use_libcap="no"
+    fi
+   ])
+  if test "$use_libcap" != "no"; then
+    AC_CHECK_LIB([cap], main, LIBS="$LIBS -lcap", use_libcap=no)
+  fi
+  if test "$use_libcap" != "no"; then
+    AC_DEFINE([HAVE_LIBCAP], [1], [Whether to use libcap library.])
+  fi
+else
+  AC_MSG_NOTICE($libcap_disabled)
+fi
+
+# FFmpeg
+FFMPEG_LIBNAMES="libavcodec >= 56.26.100
+                 libavfilter >= 5.11.102
+                 libavformat >= 56.25.101
+                 libavutil >= 54.20.100
+                 libpostproc >= 53.3.100
+                 libswscale >= 3.1.101
+                 libswresample >= 1.1.100"
+
+ffmpeg_build="${abs_top_srcdir}/tools/depends/target/ffmpeg"
+FFMPEG_VER_SHA=$(grep "VERSION=" ${ffmpeg_build}/FFMPEG-VERSION | sed 's/VERSION=//g')
+AC_DEFINE_UNQUOTED([FFMPEG_VER_SHA], ["$FFMPEG_VER_SHA"], [FFmpeg version hash])
+
+if test "$with_ffmpeg" = "shared"; then
+  # allow linking against shared ffmpeg libs
+  # a proper version must be installed, we won't build ffmpeg
+  USE_STATIC_FFMPEG=0
+  AC_DEFINE([USE_STATIC_FFMPEG], [0], [FFmpeg linked dynamically])
+fi
+if test "${USE_STATIC_FFMPEG}" = "1"; then
+  AC_DEFINE([USE_STATIC_FFMPEG], [1], [FFmpeg linked statically])
+  ff_libs=$(${ECHO} ${FFMPEG_LIBNAMES} | ${AWK} '/lib/{print $1}' ORS=' ')
+  if test -n "${PKG_CONFIG_SYSROOT_DIR}"; then
+    # workaround for cross compiling with buildroot on different buildsystem
+    # Rpi buildroots pkg-config returns static libs with
+    # PKG_CONFIG_SYSROOT_DIR prefixed, OEs does not
+    # so lets make sure we always prefix in case PKG_CONFIG_SYSROOT_DIR is defined
+    pkg_cfg_prefix="${PKG_CONFIG_SYSROOT_DIR}"
+  elif test "${target_platform}" = "target_raspberry_pi" && test "${USE_BUILDROOT}" = "1"; then
+      pkg_cfg_prefix=${SYSROOT}
+  fi
+
+  if test "$cross_compiling" != "yes"; then
+    if test "$use_debug" != "yes"; then
+      FFMPEG_OPTS="-r"
+    fi
+    if test "$use_optimizations" != "yes"; then
+      FFMPEG_OPTS="${FFMPEG_OPTS} --disable-optimizations"
+    fi
+
+    if test "$with_ffmpeg" = "auto" || test "$with_ffmpeg" = "yes"; then
+      SAVE_INCLUDES="$INCLUDES"
+      SAVE_LIBS="$LIBS"
+      # check for system installed ffmpeg. We require minimum versions.
+      PKG_CHECK_MODULES([FFMPEG], [$FFMPEG_LIBNAMES],
+        [INCLUDES="$INCLUDES $FFMPEG_CFLAGS"; LIBS="$LIBS $FFMPEG_LIBS"; FFMPEG_FOUND="true"],
+        [FFMPEG_FOUND="false"])
+
+      if test "${USE_STATIC_FFMPEG}" = "1" && test "$FFMPEG_FOUND" = "true"; then
+        # we need to check if static libs are available
+        FFMPEG_LIBDIR=$(${PKG_CONFIG} --static --variable=libdir libavcodec)
+        for ff_lib in ${ff_libs}; do
+          if test -f ${FFMPEG_LIBDIR}/${ff_lib}.a; then :; else
+            AC_MSG_NOTICE("${FFMPEG_LIBDIR}/${ff_lib}.a not found")
+            FFMPEG_FOUND="false"
+            # restore includes and libs, the ones we found are invalid
+            INCLUDES="$SAVE_INCLUDES"
+            LIBS="$SAVE_LIBS"
+            unset FFMPEG_LIBS FFMPEG_CFLAGS FFMPEG_LIBDIR
+          fi
+        done
+      fi
+      if test "$with_ffmpeg" = "yes" || test "$FFMPEG_FOUND" = "false"; then
+        # ffmpeg not found with pkg-config, lets install it
+        AC_MSG_NOTICE("Installing FFmpeg")
+        CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" ${ffmpeg_build}/autobuild.sh ${FFMPEG_OPTS}
+        export PKG_CONFIG_PATH="${ffmpeg_build}/ffmpeg-install/lib/pkgconfig:$PKG_CONFIG_PATH"
+      fi
+
+    elif test "$with_ffmpeg" = "force"; then
+      # always build our ffmpeg
+      AC_MSG_NOTICE("FFmpeg installation forced by user - installing our version")
+      CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" ${ffmpeg_build}/autobuild.sh ${FFMPEG_OPTS}
+      export PKG_CONFIG_PATH="${ffmpeg_build}/ffmpeg-install/lib/pkgconfig:$PKG_CONFIG_PATH"
+
+    elif test "$with_ffmpeg" != "no"; then
+      # user passed --with-ffmpeg=/some/path, lets use it
+      AC_MSG_NOTICE("using ffmpeg: ${with_ffmpeg}")
+      export PKG_CONFIG_PATH="${with_ffmpeg}/lib/pkgconfig:$PKG_CONFIG_PATH"
+    fi
+  fi
+fi
+
+if test "$FFMPEG_FOUND" != "true"; then
+  PKG_CHECK_MODULES([FFMPEG], [$FFMPEG_LIBNAMES],
+    [INCLUDES="$INCLUDES $FFMPEG_CFLAGS"; LIBS="$LIBS $FFMPEG_LIBS"; FFMPEG_FOUND="true"],
+    [AC_MSG_ERROR("ffmpeg not found")])
+fi
+
+if test "${USE_STATIC_FFMPEG}" = "1"; then
+  # get the libdir for static linking
+  FFMPEG_LIBDIR=${pkg_cfg_prefix}$(PKG_CONFIG_SYSROOT_DIR="" ${PKG_CONFIG} --static --variable=libdir libavcodec)
+  GNUTLS_ALL_LIBS=$(${PKG_CONFIG} --static --libs-only-l --silence-errors gnutls)
+
+  # check if static libs are available
+  for ff_lib in ${ff_libs}; do
+    if test -f ${FFMPEG_LIBDIR}/${ff_lib}.a; then :; else
+      AC_MSG_ERROR("${FFMPEG_LIBDIR}/${ff_lib}.a not found")
+    fi
+    # filter out libs we link statically
+    filter=$(${ECHO} ${ff_lib} | ${SED} 's/lib/-l/g')
+    LIBS=$(${ECHO} ${LIBS} | ${SED} "s/${filter}//g")
+  done
+  LIBS=$(${ECHO} ${LIBS} | ${SED} ':a;N;$!ba;s/\n/ /g')
+fi
+
+echo "Checking for SWIG installation"
+AC_PATH_PROG(SWIG_EXE, swig, "none")
+if test "$SWIG_EXE" = "none"; then
+  AC_PATH_PROG(SWIG20_EXE, swig2.0, "none")
+  if test "$SWIG20_EXE" != "none" ; then
+    SWIG_EXE=$SWIG20_EXE
+  fi
+fi
+if test "$SWIG_EXE" = "none"; then
+  AC_MSG_ERROR($missing_program)
+fi
+final_message="$final_message\n  SWIG Available:\tYes"
+
+echo "Checking for a jre installation"
+AC_PATH_PROG(JAVA_EXE, java, "none")
+if test "$JAVA_EXE" = "none"; then
+  AC_MSG_ERROR($missing_program)
+fi
+final_message="$final_message\n  JRE Available:\tYes"
+
+echo "Checking for doxygen installation"
+AC_PATH_PROG(DOXYGEN_EXE, doxygen, "none")
+if test "$DOXYGEN_EXE" = "none"; then
+  AC_MSG_WARN([Unable to find doxygen installation. Will not be able to make docstrings for the python api])
+  final_message="$final_message\n  Doxygen Available:\tNo"
+  USE_DOXYGEN=0
+else
+  final_message="$final_message\n  Doxygen Available:\tYes"
+  USE_DOXYGEN=1
+fi
+
+# VDPAU
+if test "x$use_vdpau" != "xno"; then
+  if test "$host_vendor" = "apple" ; then
+    if test "x$use_vdpau" = "xyes"; then
+      AC_MSG_ERROR([VDPAU not supported on this platform])
+    else
+      use_vdpau="no"
+      AC_MSG_NOTICE($vdpau_disabled)
+    fi
+    USE_VDPAU=0
+  else
+    USE_VDPAU=1
+    AC_CHECK_HEADER([vdpau/vdpau.h],AC_DEFINE([HAVE_LIBVDPAU], [],
+      [Define to 1 if you have the 'vdpau' library (-lvdpau).]),
+    [if test "x$use_vdpau" = "xyes"; then
+      USE_VDPAU=0
+      AC_MSG_ERROR([$vdpau_not_found])
+    else
+      use_vdpau="no"
+      USE_VDPAU=0
+      AC_MSG_RESULT($vdpau_not_found)
+    fi])
+  fi
+else
+  USE_VDPAU=0
+  AC_MSG_NOTICE($vdpau_disabled)
+fi
+
+# VAAPI
+if test "x$use_vaapi" != "xno"; then
+  if test "$host_vendor" = "apple" ; then
+    if test "x$use_vaapi" = "xyes"; then
+      AC_MSG_ERROR([VAAPI not supported on this platform])
+    else
+      use_vaapi="no"
+      AC_MSG_NOTICE($vaapi_disabled)
+    fi
+    USE_VAAPI=0
+  else
+    initial_val=$use_vaapi
+    if test "x$use_vaapi" != "xno"; then
+      PKG_CHECK_MODULES([LIBVA], [libva >= 0.38 libva-x11 >= 0.38],
+        [INCLUDES="$INCLUDES $LIBVA_CFLAGS"; LIBS="$LIBS $LIBVA_LIBS"; USE_VAAPI=1;
+         AC_DEFINE([HAVE_LIBVA], [1], [Define to 1 if you have the 'vaapi' libraries])],
+        [use_vaapi="no"; USE_VAAPI=0; AC_MSG_RESULT($vaapi_not_found)])
+    else
+      if test "x$initial_val" = "xyes"; then
+        AC_MSG_ERROR($vaapi_not_found)
+      fi
+    fi
+  fi
+else
+  AC_MSG_NOTICE($vaapi_disabled)
+  USE_VAAPI=0
+fi
+
+# OpenMax
+if test "$use_gles" = "yes" && test "$use_openmax" = "auto"; then
+
+  AC_CHECK_HEADERS([OMX_Core.h],
+                    USE_OPENMAX=1;[INCLUDES="$INCLUDES $OPENMAX_CFLAGS"; LIBS="$LIBS $OPENMAX_LIBS";AC_DEFINE([HAVE_LIBOPENMAX], [1], [Define to 1 if you have the OpenMax library.])],
+                    use_openmax=no;USE_OPENMAX=0;AC_MSG_RESULT($openmax_not_found))
+elif test "$use_gles" = "yes" && test "$use_openmax" = "yes"; then
+  AC_CHECK_HEADERS([OMX_Core.h],
+                    USE_OPENMAX=1;[INCLUDES="$INCLUDES $OPENMAX_CFLAGS"; LIBS="$LIBS $OPENMAX_LIBS";AC_DEFINE([HAVE_LIBOPENMAX], [1], [Define to 1 if you have the OpenMax library.])],
+                    AC_MSG_ERROR($openmax_not_found))
+else
+  AC_MSG_NOTICE($openmax_disabled)
+  use_openmax=no
+  USE_OPENMAX=0
+fi
+
+# additional internal players
+case $add_players in
+  *omxplayer*)
+      XB_ADD_PLAYER([OMXPLAYER], [omxplayer])
+      CORE_SYSTEM_VARIANT=omx
+      ;;
+esac
+
+# additional internal codecs
+# remember to convert commas to spaces
+for codecs in `echo $add_codecs | sed 's/,/ /g'`; do
+  case $codecs in
+    *amcodec*)
+      AC_CHECK_HEADER([amcodec/codec_error.h],, AC_MSG_ERROR($missing_headers))
+      XB_ADD_CODEC([LIBAMCODEC], [amcodec], [$codecs])
+      CORE_SYSTEM_VARIANT=aml
+      ;;
+    *imxvpu*)
+      AC_CHECK_HEADER([imx-mm/vpu/vpu_wrapper.h],, AC_MSG_ERROR($missing_headers))
+      AC_CHECK_LIB([vpu], main, LIBS="$LIBS -lfslvpuwrap -lvpu -lg2d", AC_MSG_ERROR($missing_library))
+      XB_ADD_CODEC([IMXVPU], [imxvpu], [$codecs])
+      CORE_SYSTEM_VARIANT=imx
+      CXXFLAGS="$CXXFLAGS -Wno-psabi -DLINUX "
+      CFLAGS="$CFLAGS -DLINUX"
+      if test "$use_x11" = "no"; then
+        CXXFLAGS="$CXXFLAGS -DEGL_API_FB"
+        CFLAGS="$CFLAGS -DEGL_API_FB"
+      fi
+      ;;
+    *)
+  esac
+done
+
+# platform specific bin utilities
+if test "$build_vendor" != "apple" ; then
+  AC_CHECK_PROG(HAVE_GAWK,gawk,"yes","no",)
+  if test "$HAVE_GAWK" = "no" ; then
+    AC_MSG_ERROR($missing_program)
+  fi
+fi
+
+AC_CHECK_PROG(HAVE_CMAKE,cmake,"yes","no",)
+if test "$HAVE_CMAKE" = "no" ; then
+  AC_MSG_ERROR("cmake not found")
+fi
+
+AC_CHECK_PROG(HAVE_GPERF,gperf,"yes","no",)
+if test "$HAVE_GPERF" = "no" ; then
+  AC_MSG_ERROR($missing_program)
+fi
+
+AC_CHECK_PROG(HAVE_UNZIP,unzip,"yes","no",)
+if test "$HAVE_UNZIP" = "no" ; then
+  AC_MSG_ERROR($missing_program)
+fi
+
+AC_CHECK_PROG(HAVE_ZIP,zip,"yes","no",)
+if test "$HAVE_ZIP" = "no" ; then
+  AC_MSG_ERROR($missing_program)
+fi
+
+if test "$ARCH" = "i486-linux" || test "$ARCH" = "x86-freebsd"; then
+  AC_CHECK_PROG(HAVE_NASM,nasm,"yes","no",)
+  if test "$HAVE_NASM" = "no" ; then
+    AC_MSG_ERROR($missing_program)
+  fi
+fi
+
+# Checks for header files.
+AC_HEADER_DIRENT
+AC_HEADER_STDC
+AC_HEADER_SYS_WAIT
+AC_CHECK_HEADERS([arpa/inet.h fcntl.h float.h inttypes.h limits.h locale.h \
+  malloc.h memory.h netdb.h netinet/in.h stddef.h stdint.h stdlib.h string.h \
+  strings.h sys/file.h sys/ioctl.h sys/mount.h sys/param.h sys/socket.h \
+  sys/time.h sys/timeb.h sys/vfs.h termios.h unistd.h utime.h wchar.h wctype.h])
+AC_CHECK_HEADERS([cdio/iso9660.h],,AC_MSG_ERROR([$missing_headers]))
+
+# Checks for typedefs, structures, and compiler characteristics.
+AC_HEADER_STAT
+AC_HEADER_STDBOOL
+AC_C_CONST
+AC_TYPE_UID_T
+AC_C_INLINE
+AC_TYPE_INT8_T
+AC_TYPE_INT16_T
+AC_TYPE_INT32_T
+AC_TYPE_INT64_T
+AC_TYPE_MODE_T
+AC_TYPE_OFF_T
+AC_TYPE_PID_T
+AC_C_RESTRICT
+AC_TYPE_SIZE_T
+AC_TYPE_SSIZE_T
+AC_CHECK_MEMBERS([struct stat.st_rdev])
+AC_HEADER_TIME
+AC_STRUCT_TM
+AC_TYPE_UINT8_T
+AC_TYPE_UINT16_T
+AC_TYPE_UINT32_T
+AC_TYPE_UINT64_T
+AC_C_BIGENDIAN
+
+if test "$cross_compiling" = "yes"; then
+  final_message="$final_message\n  Crosscomp.:\tYes"
+  CROSS_COMPILING=yes
+  if [[ -d "$NATIVE_ROOT" ]]; then
+    CFLAGS_FOR_BUILD="$CFLAGS_FOR_BUILD -I$NATIVE_ROOT/include"
+    CXXFLAGS_FOR_BUILD="$CXXFLAGS_FOR_BUILD -I$NATIVE_ROOT/include"
+    LDFLAGS_FOR_BUILD="$LDFLAGS_FOR_BUILD -L$NATIVE_ROOT/lib"
+    if test "$host_vendor" != "apple" ; then
+      LDFLAGS_FOR_BUILD="$LDFLAGS_FOR_BUILD -Wl,-rpath=$NATIVE_ROOT/lib"
+    fi
+    final_message="$final_message\n  Native Root:\t$NATIVE_ROOT"
+  fi
+else
+  final_message="$final_message\n  Crosscomp.:\tNo"
+fi
+
+final_message="$final_message\n  target ARCH:\t$use_arch"
+final_message="$final_message\n  target CPU:\t$use_cpu"
+
+if test "$use_gles" = "yes"; then
+  final_message="$final_message\n  OpenGLES:\tYes"
+  USE_OPENGLES=1
+  USE_OPENGL=0
+else
+  USE_OPENGLES=0
+  if test "$use_gl" = "yes"; then
+    final_message="$final_message\n  OpenGL:\tYes"
+    USE_OPENGL=1
+  else
+    final_message="$final_message\n  OpenGL:\tNo (Very Slow)"
+    SDL_DEFINES="$SDL_DEFINES -DHAS_SDL_2D"
+    USE_OPENGL=0
+  fi
+fi
+
+if test "$use_alsa" = "yes"; then
+  USE_ALSA=1
+  AC_DEFINE([USE_ALSA],[1],["Define to 1 if alsa is installed"])
+  final_message="$final_message\n  ALSA:\t\tYes"
+else
+  USE_ALSA=0
+  final_message="$final_message\n  ALSA:\t\tNo"
+fi
+
+if test "$use_dbus" = "yes"; then
+  final_message="$final_message\n  DBUS:\t\tYes"
+else
+  final_message="$final_message\n  DBUS:\t\tNo"
+fi
+
+if test "x$use_vdpau" != "xno"; then
+  final_message="$final_message\n  VDPAU:\tYes"
+else
+  final_message="$final_message\n  VDPAU:\tNo"
+fi
+
+if test "x$use_vaapi" != "xno"; then
+  final_message="$final_message\n  VAAPI:\tYes"
+else
+  final_message="$final_message\n  VAAPI:\tNo"
+fi
+
+if test "$use_openmax" != "no"; then
+  final_message="$final_message\n  OpenMax:\tYes"
+else
+  final_message="$final_message\n  OpenMax:\tNo"
+fi
+
+if test "$use_x11" = "yes"; then
+  USE_X11=1
+  final_message="$final_message\n  X11:\t\tYes"
+else
+  USE_X11=0
+  final_message="$final_message\n  X11:\t\tNo"
+fi
+
+if test "$use_libbluray" = "yes"; then
+  final_message="$final_message\n  Bluray:\tYes"
+else
+  final_message="$final_message\n  Bluray:\tNo"
+fi
+
+if test "$use_libxslt" = "yes"; then
+  final_message="$final_message\n  XSLT scrapers:\tYes"
+else
+  final_message="$final_message\n  XSLT scrapers:\tNo"
+fi
+
+if test "x$use_texturepacker" != "xno"; then
+  AC_PATH_PROG([TEXTUREPACKER], [TexturePacker], ["none"],
+    [$PATH$PATH_SEPARATOR${abs_top_srcdir}/tools/depends/native/TexturePacker/bin])
+  if test "$TEXTUREPACKER" = "none"; then
+    make -C ${abs_top_srcdir}/tools/depends/native/TexturePacker
+    TEXTUREPACKER="${abs_top_srcdir}/tools/depends/native/TexturePacker/bin/TexturePacker"
+  fi
+  if test -x "$TEXTUREPACKER"; then
+    final_message="$final_message\n  TexturePacker:Yes"
+    USE_TEXTUREPACKER=1
+  else
+    if test "x$use_texturepacker" = "xyes"; then
+      AC_MSG_ERROR("Texturepacker not found")
+    else
+      AC_MSG_NOTICE("Texturepacker not found")
+      USE_TEXTUREPACKER=0
+      final_message="$final_message\n  TexturePacker:No"
+    fi
+  fi
+else
+  final_message="$final_message\n  TexturePacker:No"
+  USE_TEXTUREPACKER=0
+fi
+
+if test "$use_mid" = "yes"; then
+  final_message="$final_message\n  MID Support:\tYes"
+  SDL_DEFINES="$SDL_DEFINES -DMID"
+else
+  final_message="$final_message\n  MID Support:\tNo"
+fi
+
+ORIGCC="$CC"
+ORIGCXX="$CXX"
+if test "x$use_ccache" != "xno"; then
+  AC_PATH_PROG(CCACHE,ccache,none)
+  if test "$ac_cv_path_CCACHE" = "none"; then
+    if test "x$use_ccache" = "xyes"; then
+      AC_MSG_ERROR([ccache not found.]);
+    else
+      AC_MSG_NOTICE([ccache not found. Falling back to default CC])
+      final_message="$final_message\n  ccache:\tNo"
+    fi
+  else
+    CC="$ac_cv_path_CCACHE $CC"
+    CXX="$ac_cv_path_CCACHE $CXX"
+    AC_MSG_NOTICE(enabling ccache)
+    final_message="$final_message\n  ccache:\tYes"
+  fi
+else
+  final_message="$final_message\n  ccache:\tNo"
+fi
+
+if test "$use_alsa" = "yes"; then
+  final_message="$final_message\n  ALSA Support:\tYes"
+else
+  final_message="$final_message\n  ALSA Support:\tNo"
+fi
+
+if test "x$use_pulse" != "xno"; then
+  XBMC_STANDALONE_SH_PULSE=tools/Linux/kodi-standalone.sh.pulse
+  final_message="$final_message\n  PulseAudio:\tYes"
+else
+  XBMC_STANDALONE_SH_PULSE=/dev/null
+  final_message="$final_message\n  PulseAudio:\tNo"
+fi
+
+# Google Test Framework
+if test "$configure_gtest" = "yes"; then
+  AC_MSG_NOTICE($gtest_enabled)
+  final_message="$final_message\n  Google Test Framework Configured:\tYes"
+  GTEST_CONFIGURED=1
+  SKIP_CONFIG_GTEST=0
+else
+  AC_MSG_NOTICE($gtest_disabled)
+  final_message="$final_message\n  Google Test Framework Configured:\tNo"
+  GTEST_CONFIGURED=0
+  SKIP_CONFIG_GTEST=1
+fi
+
+if test "$use_avahi" = "yes"; then
+  final_message="$final_message\n  Avahi:\tYes"
+else
+  final_message="$final_message\n  Avahi:\tNo"
+fi
+
+if test "$use_mdnsembedded" != "no"; then
+  final_message="$final_message\n  mDNSEmbedded:\tYes"
+else
+  final_message="$final_message\n  mDNSEmbedded:\tNo"
+fi
+
+if test "$use_nonfree" = "yes"; then
+  final_message="$final_message\n  Non-free:\tYes"
+  HAVE_XBMC_NONFREE=1
+  AC_DEFINE([HAVE_XBMC_NONFREE], [1], [Define to 1 to enable non-free components.])
+else
+  HAVE_XBMC_NONFREE=0
+  final_message="$final_message\n  Non-free:\tNo"
+fi
+
+if test "$use_mysql" = "yes"; then
+  final_message="$final_message\n  MySQL:\tYes"
+  USE_MYSQL=1
+else
+  final_message="$final_message\n  MySQL:\tNo"
+  USE_MYSQL=0
+fi
+if test "$use_webserver" = "yes"; then
+  final_message="$final_message\n  Webserver:\tYes"
+  USE_WEB_SERVER=1
+else
+  final_message="$final_message\n  Webserver:\tNo"
+  USE_WEB_SERVER=0
+fi
+
+if test "$use_libssh" != "no"; then
+  final_message="$final_message\n  libssh support:\tYes"
+else
+  final_message="$final_message\n  libssh support:\tNo"
+fi
+
+if test "x$use_samba" != "xno"; then
+  final_message="$final_message\n  libsmbclient support:\tYes"
+else
+  final_message="$final_message\n  libsmbclient support:\tNo"
+fi
+
+if test "$use_libnfs" != "no"; then
+  final_message="$final_message\n  libnfs client support:Yes"
+else
+  final_message="$final_message\n  libnfs client support:No"
+fi
+
+if test "$use_airplay" != "no"; then
+  final_message="$final_message\n  AirPlay support:\tYes"
+else
+  final_message="$final_message\n  AirPLay support:\tNo"
+fi
+
+if test "x$use_airtunes" != "xno"; then
+  final_message="$final_message\n  AirTunes support (libshairplay):\tYes"
+else
+  final_message="$final_message\n  AirTunes support:\tNo"
+fi
+
+if test "x$use_upnp" != "xno"; then
+  final_message="$final_message\n  UPnP support:\t\tYes"
+  USE_UPNP=1
+  UPNP_DEFINES='-DNPT_CONFIG_ENABLE_LOGGING -DPLT_HTTP_DEFAULT_USER_AGENT="\"UPnP/1.0 DLNADOC/1.50 Kodi\"" -DPLT_HTTP_DEFAULT_SERVER="\"UPnP/1.0 DLNADOC/1.50 Kodi\""'
+  AC_DEFINE([USE_UPNP], [1], [Define to 1 to enable UPnP support.])
+else
+  USE_UPNP=0
+  final_message="$final_message\n  UPnP support:\t\tNo"
+fi
+
+if test "$use_optical_drive" = "yes"; then
+  final_message="$final_message\n  Optical drive:\tYes"
+else
+  final_message="$final_message\n  Optical drive:\tNo"
+fi
+
+if test "x$use_libudev" != "xno"; then
+  final_message="$final_message\n  libudev support:\tYes"
+else
+  final_message="$final_message\n  libudev support:\tNo"
+fi
+
+if test "x$use_libusb" != "xno"; then
+  final_message="$final_message\n  libusb support:\tYes"
+else
+  final_message="$final_message\n  libusb support:\tNo"
+fi
+
+if test "x$use_libcec" != "xno"; then
+  final_message="$final_message\n  libcec support:\tYes"
+else
+  final_message="$final_message\n  libcec support:\tNo"
+fi
+
+if test "x$use_lcms2" != "xno"; then
+  final_message="$final_message\n  lcms2 support:\tYes"
+else
+  final_message="$final_message\n  lcms2 support:\tNo"
+fi
+
+if test "x$use_libbluetooth" != "xno"; then
+  final_message="$final_message\n  libbluetooth support:\tYes"
+else
+  final_message="$final_message\n  libbluetooth support:\tNo"
+fi
+
+if test "x$use_libcap" != "xno"; then
+  final_message="$final_message\n  libcap support:\tYes"
+else
+  final_message="$final_message\n  libcap support:\tNo"
+fi
+
+if test "x$add_players" != "xno"; then
+  final_message="$final_message\n  additional players:\tYes, $add_players"
+else
+  final_message="$final_message\n  additional players:\tNo"
+fi
+
+if test "x$add_codecs" != "xno"; then
+  final_message="$final_message\n  additional codecs:\tYes, $add_codecs"
+else
+  final_message="$final_message\n  additional codecs:\tNo"
+fi
+
+### External libraries messages
+
+if test "$host_vendor" = "apple" ; then
+  # built internal but referenced as external, we link directly to them.
+  # this MUST be the last thing before OUTPUT_FILES as they do not
+  # exist until after we build FFMpeg.
+  LIBS="$LIBS -L\$(abs_top_srcdir)/lib/ffmpeg/libavcodec -lavcodec"
+  LIBS="$LIBS -L\$(abs_top_srcdir)/lib/ffmpeg/libavfilter -lavfilter"
+  LIBS="$LIBS -L\$(abs_top_srcdir)/lib/ffmpeg/libswresample -lswresample"
+  LIBS="$LIBS -L\$(abs_top_srcdir)/lib/ffmpeg/libavformat -lavformat"
+  LIBS="$LIBS -L\$(abs_top_srcdir)/lib/ffmpeg/libavutil -lavutil"
+  LIBS="$LIBS -L\$(abs_top_srcdir)/lib/ffmpeg/libpostproc -lpostproc"
+  LIBS="$LIBS -L\$(abs_top_srcdir)/lib/ffmpeg/libswscale -lswscale"
+fi
+
+OUTPUT_FILES="Makefile \
+    Makefile.include \
+    addons/skin.estuary/media/Makefile \
+    addons/skin.estouchy/media/Makefile \
+    xbmc/Makefile \
+    xbmc/addons/interfaces/Makefile \
+    xbmc/cdrip/Makefile \
+    xbmc/cores/Makefile \
+    xbmc/cores/VideoPlayer/VideoRenderers/Makefile \
+    xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/Makefile \
+    xbmc/cores/VideoPlayer/Makefile \
+    lib/libdvd/Makefile \
+    xbmc/cores/DllLoader/Makefile \
+    xbmc/cores/DllLoader/exports/Makefile \
+    xbmc/cores/VideoPlayer/DVDCodecs/Makefile \
+    xbmc/cores/VideoPlayer/DVDCodecs/Audio/Makefile \
+    xbmc/cores/VideoPlayer/DVDCodecs/Overlay/Makefile \
+    xbmc/cores/VideoPlayer/DVDCodecs/Video/Makefile \
+    xbmc/cores/VideoPlayer/DVDDemuxers/Makefile \
+    xbmc/cores/VideoPlayer/DVDSubtitles/Makefile \
+    xbmc/cores/VideoPlayer/Process/Makefile \
+    xbmc/cores/AudioEngine/Makefile \
+    xbmc/cores/paplayer/Makefile \
+    xbmc/cores/omxplayer/Makefile \
+    xbmc/cores/playercorefactory/Makefile \
+    xbmc/cores/RetroPlayer/Makefile \
+    xbmc/messaging/Makefile \
+    xbmc/messaging/helpers/Makefile \
+    xbmc/guilib/Makefile \
+    xbmc/input/linux/Makefile \
+    xbmc/interfaces/Makefile \
+    xbmc/interfaces/builtins/Makefile \
+    xbmc/network/Makefile \
+    xbmc/network/upnp/Makefile \
+    lib/libexif/Makefile \
+    lib/libUPnP/Makefile \
+    xbmc/DllPaths_generated.h \
+    xbmc/DllPaths_generated_android.h \
+    xbmc/freebsd/Makefile \
+    xbmc/linux/Makefile \
+    xbmc/filesystem/Makefile \
+    xbmc/windowing/Makefile \
+    xbmc/windowing/egl/Makefile \
+    tools/Linux/kodi.sh \
+    tools/Linux/kodi-standalone.sh \
+    tools/Linux/kodi-xsession.desktop \
+    tools/EventClients/Makefile \
+    tools/EventClients/Clients/OSXRemote/Makefile \
+    xbmc/peripherals/addons/Makefile \
+    xbmc/peripherals/bus/Makefile \
+    xbmc/peripherals/devices/Makefile \
+    xbmc/platform/posix/Makefile \
+    xbmc/platform/darwin/osx/Makefile \
+    xbmc/platform/android/activity/Makefile \
+    xbmc/platform/android/loader/Makefile \
+    xbmc/platform/android/jni/Makefile \
+    xbmc/utils/Makefile \
+    xbmc/platform/Makefile \
+    tools/darwin/Configurations/App.xcconfig \
+    tools/darwin/Configurations/Common.xcconfig \
+    tools/darwin/packaging/ios/mkdeb-ios.sh \
+    tools/darwin/packaging/osx/mkdmg-osx.sh \
+    tools/darwin/packaging/migrate_to_kodi_ios.sh \
+    xbmc/platform/darwin/osx/Info.plist \
+    xbmc/platform/darwin/ios/Info.plist \
+    project/cmake/KodiConfig.cmake \
+    tools/android/packaging/xbmc/AndroidManifest.xml \
+    tools/android/packaging/Makefile \
+    tools/android/packaging/xbmc/src/org/xbmc/kodi/Splash.java \
+    tools/android/packaging/xbmc/src/org/xbmc/kodi/Main.java \
+    tools/android/packaging/xbmc/src/org/xbmc/kodi/XBMCBroadcastReceiver.java \
+    tools/android/packaging/xbmc/src/org/xbmc/kodi/XBMCInputDeviceListener.java \
+    tools/android/packaging/xbmc/src/org/xbmc/kodi/XBMCOnFrameAvailableListener.java \
+    tools/android/packaging/xbmc/src/org/xbmc/kodi/XBMCSettingsContentObserver.java \
+    tools/android/packaging/xbmc/src/org/xbmc/kodi/XBMCOnAudioFocusChangeListener.java \
+    tools/android/packaging/xbmc/src/org/xbmc/kodi/XBMCVideoView.java \
+    tools/android/packaging/xbmc/activity_main.xml \
+    tools/android/packaging/xbmc/strings.xml \
+    addons/xbmc.addon/addon.xml"
+
+if test "$use_webserver" = "yes"; then
+OUTPUT_FILES="$OUTPUT_FILES xbmc/network/httprequesthandler/python/Makefile"
+fi
+
+if test "$use_sse4" = "yes"; then
+OUTPUT_FILES="$OUTPUT_FILES xbmc/linux/sse4/Makefile"
+fi
+
+OUTPUT_FILES="$OUTPUT_FILES \
+  xbmc/interfaces/python/Makefile \
+  xbmc/interfaces/python/test/Makefile"
+
+# needed for KodiConfig.cmake
+if echo "$libdir" | grep -q '${exec_prefix}'; then
+  if test "${prefix}" = "NONE" || test "${prefix}" = ""; then
+    prefix="/usr/local"
+  fi
+  if test "${exec_prefix}" = "NONE" || test "${exec_prefix}" = ""; then
+    exec_prefix=${prefix}
+  fi
+fi
+eval "APP_PREFIX=${prefix}"
+eval "APP_LIB_DIR=${libdir}/${APP_NAME_LC}"
+eval "APP_INCLUDE_DIR=${includedir}/${APP_NAME_LC}"
+eval "APP_DATA_DIR=${datarootdir}/${APP_NAME_LC}"
+AC_SUBST(APP_PREFIX)
+AC_SUBST(APP_LIB_DIR)
+AC_SUBST(APP_INCLUDE_DIR)
+AC_SUBST(APP_DATA_DIR)
+
+# Line below is used so we can use AM_INIT_AUTOMAKE. The corresponding
+# .dummy.am does nothing.
+AC_CONFIG_FILES([.dummy])
+
+AC_CONFIG_FILES([${OUTPUT_FILES}])
+OUTPUT_FILES="$OUTPUT_FILES \
+  .dummy"
+AC_SUBST(CORE_SYSTEM_NAME)
+AC_SUBST(CORE_SYSTEM_VARIANT)
+AC_SUBST(CROSS_COMPILING)
+AC_SUBST(CMAKE_BUILD_TYPE)
+AC_SUBST(CFLAGS)
+AC_SUBST(CXXFLAGS)
+AC_SUBST(INCLUDES)
+AC_SUBST(LDFLAGS)
+AC_SUBST(CXX_FOR_BUILD)
+AC_SUBST(CC_FOR_BUILD)
+AC_SUBST(CFLAGS_FOR_BUILD)
+AC_SUBST(CXXFLAGS_FOR_BUILD)
+AC_SUBST(LDFLAGS_FOR_BUILD)
+AC_SUBST(SDL_DEFINES)
+AC_SUBST(FFMPEG_LIBDIR)
+AC_SUBST(USE_STATIC_FFMPEG)
+AC_SUBST(GNUTLS_ALL_LIBS)
+AC_SUBST(USE_LIBAV_HACKS)
+AC_SUBST(PYTHON_VERSION)
+AC_SUBST(OUTPUT_FILES)
+AC_SUBST(HAVE_XBMC_NONFREE)
+AC_SUBST(LIBCURL_BASENAME)
+AC_SUBST(LIBASS_BASENAME)
+AC_SUBST(LIBMEPG2_BASENAME)
+AC_SUBST_FILE(XBMC_STANDALONE_SH_PULSE)
+AC_SUBST(USE_OPENGL)
+AC_SUBST(USE_OPENGLES)
+AC_SUBST(USE_VDPAU)
+AC_SUBST(USE_VAAPI)
+AC_SUBST(USE_LIBSMBCLIENT)
+AC_SUBST(USE_LIBNFS)
+AC_SUBST(USE_AIRPLAY)
+AC_SUBST(USE_OPENMAX)
+AC_SUBST(USE_PULSE)
+AC_SUBST(HAVE_LIBPULSE)
+AC_SUBST(USE_ALSA)
+AC_SUBST(USE_TEXTUREPACKER)
+AC_SUBST(TEXTUREPACKER)
+AC_SUBST(USE_AIRTUNES)
+AC_SUBST(USE_LIBUDEV)
+AC_SUBST(USE_LIBUSB)
+AC_SUBST(USE_LIBCEC)
+AC_SUBST(USE_LIBBLUETOOTH)
+AC_SUBST(USE_MYSQL)
+AC_SUBST(USE_WEB_SERVER)
+AC_SUBST(USE_UPNP)
+AC_SUBST(USE_OMXLIB)
+AC_SUBST(USE_ANDROID)
+AC_SUBST(GTEST_CONFIGURED)
+AC_SUBST(USE_DOXYGEN)
+AC_SUBST(UPNP_DEFINES)
+AC_SUBST(HAVE_SSE)
+AC_SUBST(HAVE_SSE2)
+AC_SUBST(HAVE_SSE4)
+AC_SUBST(USE_MMAL)
+AC_SUBST(USE_X11)
+AC_SUBST(USE_OPTICAL_DRIVE)
+
+# pushd and popd are not available in other shells besides bash, so implement
+# our own pushd/popd functions
+XB_DIRSTACK="$PWD"
+xb_pushd()
+{
+  local dirname="$1"
+  if [[ -d "$dirname" ]] && [[ -x "$dirname" ]]; then
+    cd "$dirname"
+    XB_DIRSTACK="$dirname ${XB_DIRSTACK:-$PWD}"
+    return 0
+  else
+    AC_MSG_ERROR(xb_pushd: unable to change to $dirname)
+  fi
+}
+xb_popd()
+{
+  if [[ -n "$XB_DIRSTACK" ]]; then
+    XB_DIRSTACK="${XB_DIRSTACK#* }"
+    cd "${XB_DIRSTACK%% *}"
+    return 0
+  else
+    AC_MSG_ERROR(xb_popd: unable to go back to previous directory)
+  fi
+}
+
+# Function to run the configure scripts in our submodules
+# Consists of three paramaters, the path to the submodule, the configure command
+# with appropriate arguments, and a third parameter set to 1 if we are to skip
+# running the script, anything else if not.
+AC_DEFUN([XB_CONFIG_MODULE],[
+AC_CONFIG_COMMANDS_POST([
+if [[ $3 != "1" ]]; then
+    if [[ -d $1 ]]; then
+      xb_pushd $1
+      $2
+      if [[ $? -ne 0 ]]; then
+        xb_popd
+        AC_MSG_ERROR([[Submodule $1 failed to configure]])
+      else
+        xb_popd
+      fi
+    else
+      AC_MSG_ERROR([[Submodule $1 does not exist]])
+    fi
+else
+    AC_MSG_NOTICE([[Skipping configuration of submodule $1.]])
+fi
+])
+])
+
+XB_CONFIG_MODULE([lib/cpluff], [
+  ./configure --disable-nls \
+    --prefix="${prefix}" --includedir="${includedir}" --libdir="${libdir}" --datadir="${datadir}" \
+    --host=$host_alias \
+    --build=$build_alias \
+    --target=$target_alias CFLAGS="$CFLAGS" CC="$CC" CXX="$CXX" LDFLAGS="$LDFLAGS" LIBS=""
+    #LDFLAGS="$LDFLAGS -Wl,-read_only_relocs,suppress"
+], [0])
+
+XB_CONFIG_MODULE([lib/gtest], [
+  ./configure \
+    CC="$CC" \
+    CXX="$CXX" \
+    CFLAGS="$CFLAGS" \
+    CXXFLAGS="$CXXFLAGS" \
+    --prefix="${prefix}" --includedir="${includedir}" --libdir="${libdir}" --datadir="${datadir}" \
+    --host=$host_alias \
+    --build=$build_alias \
+    --target=$target_alias \
+    --disable-shared \
+    --enable-static \
+    --with-pthreads
+], [$SKIP_CONFIG_GTEST])
+
+AC_OUTPUT
+
+final_message="$final_message\n  prefix:\t$prefix\n$dashes"
+echo -e "$final_message\n"
+echo "#------------------------------------ WARNING ----------------------------------------#"
+echo "The autotools based build system is deprecated and will be removed in the next version!"
+echo "Please switch to cmake, see project/cmake/README.md"
+echo "#-------------------------------------------------------------------------------------#"
+echo -e "\n\n"
diff --git a/gitrev.sh b/gitrev.sh
new file mode 100755
index 0000000..996e384
--- /dev/null
+++ b/gitrev.sh
@@ -0,0 +1,15 @@
+#!/bin/sh
+N=0
+R=""
+MAX=50
+while [ $N -le $MAX ] && [ "x$R" = "x" ]
+do
+  R=$(git log -1 --pretty=format:%b HEAD~$N | awk '$2 ~ /@([0-9]+)$/ {sub(".*@", "", $2); print $2}')
+  N=$(($N+1))
+done
+if [ "x$R" != "x" ]; then
+  if [ $N -gt 1 ]; then
+    R=$R\+$((N-1))
+  fi
+  echo $R
+fi
diff --git a/lib/UnrarXLib/Makefile b/lib/UnrarXLib/Makefile
new file mode 100644
index 0000000..79a172a
--- /dev/null
+++ b/lib/UnrarXLib/Makefile
@@ -0,0 +1,49 @@
+CXXFLAGS+=-DSILENT
+
+SRCS=archive.cpp \
+     arcread.cpp \
+     cmddata.cpp \
+     consio.cpp \
+     crc.cpp \
+     crypt.cpp \
+     encname.cpp \
+     errhnd.cpp \
+     extinfo.cpp \
+     extract.cpp \
+     filcreat.cpp \
+     file.cpp \
+     filefn.cpp \
+     filestr.cpp \
+     find.cpp \
+     getbits.cpp \
+     global.cpp \
+     int64.cpp \
+     isnt.cpp \
+     log.cpp \
+     match.cpp \
+     options.cpp \
+     pathfn.cpp \
+     rar.cpp \
+     rarvm.cpp \
+     rawread.cpp \
+     rdwrfn.cpp \
+     recvol.cpp \
+     resource.cpp \
+     rijndael.cpp \
+     rs.cpp \
+     savepos.cpp \
+     scantree.cpp \
+     sha1.cpp \
+     strfn.cpp \
+     strlist.cpp \
+     system.cpp \
+     timefn.cpp \
+     ulinks.cpp \
+     unicode.cpp \
+     unpack.cpp \
+     volume.cpp \
+
+LIB=UnrarXLib.a
+
+include ../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/lib/libUPnP/Makefile.in b/lib/libUPnP/Makefile.in
new file mode 100644
index 0000000..efdc05a
--- /dev/null
+++ b/lib/libUPnP/Makefile.in
@@ -0,0 +1,108 @@
+ARCH=@ARCH@
+
+ifeq (@USE_UPNP@, 1)
+SRCS= Neptune/Source/Core/Neptune.cpp \
+      Neptune/Source/Core/NptAutomaticCleaner.cpp \
+      Neptune/Source/Core/NptBase64.cpp \
+      Neptune/Source/Core/NptBufferedStreams.cpp \
+      Neptune/Source/Core/NptCommon.cpp \
+      Neptune/Source/Core/NptConsole.cpp \
+      Neptune/Source/Core/NptCrypto.cpp \
+      Neptune/Source/Core/NptDataBuffer.cpp \
+      Neptune/Source/Core/NptDebug.cpp \
+      Neptune/Source/Core/NptDigest.cpp \
+      Neptune/Source/Core/NptDynamicLibraries.cpp \
+      Neptune/Source/Core/NptFile.cpp \
+      Neptune/Source/Core/NptHash.cpp \
+      Neptune/Source/Core/NptHttp.cpp \
+      Neptune/Source/Core/NptJson.cpp \
+      Neptune/Source/Core/NptList.cpp \
+      Neptune/Source/Core/NptLogging.cpp \
+      Neptune/Source/Core/NptMessaging.cpp \
+      Neptune/Source/Core/NptNetwork.cpp \
+      Neptune/Source/Core/NptQueue.cpp \
+      Neptune/Source/Core/NptResults.cpp \
+      Neptune/Source/Core/NptRingBuffer.cpp \
+      Neptune/Source/Core/NptSimpleMessageQueue.cpp \
+      Neptune/Source/Core/NptSockets.cpp \
+      Neptune/Source/Core/NptStreams.cpp \
+      Neptune/Source/Core/NptStrings.cpp \
+      Neptune/Source/Core/NptSystem.cpp \
+      Neptune/Source/Core/NptThreads.cpp \
+      Neptune/Source/Core/NptTime.cpp \
+      Neptune/Source/Core/NptTls.cpp \
+      Neptune/Source/Core/NptUri.cpp \
+      Neptune/Source/Core/NptUtils.cpp \
+      Neptune/Source/Core/NptXml.cpp \
+      Neptune/Source/Core/NptZip.cpp \
+      Neptune/Source/System/Bsd/NptBsdNetwork.cpp \
+      Neptune/Source/System/Bsd/NptBsdSockets.cpp \
+      Neptune/Source/System/Posix/NptPosixQueue.cpp \
+      Neptune/Source/System/Posix/NptPosixSystem.cpp \
+      Neptune/Source/System/Posix/NptPosixThreads.cpp \
+      Neptune/Source/System/Posix/NptPosixTime.cpp \
+      Neptune/Source/System/Posix/NptSelectableMessageQueue.cpp \
+      Neptune/Source/System/StdC/NptStdcDebug.cpp \
+      Neptune/Source/System/StdC/NptStdcEnvironment.cpp \
+      Platinum/Source/Core/PltAction.cpp \
+      Platinum/Source/Core/PltArgument.cpp \
+      Platinum/Source/Core/PltConstants.cpp \
+      Platinum/Source/Core/PltCtrlPoint.cpp \
+      Platinum/Source/Core/PltCtrlPointTask.cpp \
+      Platinum/Source/Core/PltDatagramStream.cpp \
+      Platinum/Source/Core/PltDeviceData.cpp \
+      Platinum/Source/Core/PltDeviceHost.cpp \
+      Platinum/Source/Core/PltEvent.cpp \
+      Platinum/Source/Core/PltHttp.cpp \
+      Platinum/Source/Core/PltHttpClientTask.cpp \
+      Platinum/Source/Core/PltHttpServer.cpp \
+      Platinum/Source/Core/PltHttpServerTask.cpp \
+      Platinum/Source/Core/PltIconsData.cpp \
+      Platinum/Source/Core/PltMimeType.cpp \
+      Platinum/Source/Core/PltProtocolInfo.cpp \
+      Platinum/Source/Core/PltService.cpp \
+      Platinum/Source/Core/PltSsdp.cpp \
+      Platinum/Source/Core/PltStateVariable.cpp \
+      Platinum/Source/Core/PltTaskManager.cpp \
+      Platinum/Source/Core/PltThreadTask.cpp \
+      Platinum/Source/Core/PltUPnP.cpp \
+      Platinum/Source/Devices/MediaConnect/X_MS_MediaReceiverRegistrarSCPD.cpp \
+      Platinum/Source/Devices/MediaConnect/PltMediaConnect.cpp \
+      Platinum/Source/Devices/MediaRenderer/AVTransportSCPD.cpp \
+      Platinum/Source/Devices/MediaRenderer/PltMediaController.cpp \
+      Platinum/Source/Devices/MediaRenderer/PltMediaRenderer.cpp \
+      Platinum/Source/Devices/MediaRenderer/RdrConnectionManagerSCPD.cpp \
+      Platinum/Source/Devices/MediaRenderer/RenderingControlSCPD.cpp \
+      Platinum/Source/Devices/MediaServer/ConnectionManagerSCPD.cpp \
+      Platinum/Source/Devices/MediaServer/ContentDirectorySCPD.cpp \
+      Platinum/Source/Devices/MediaServer/ContentDirectorywSearchSCPD.cpp \
+      Platinum/Source/Devices/MediaServer/PltDidl.cpp \
+      Platinum/Source/Devices/MediaServer/PltFileMediaServer.cpp \
+      Platinum/Source/Devices/MediaServer/PltMediaBrowser.cpp \
+      Platinum/Source/Devices/MediaServer/PltMediaCache.cpp \
+      Platinum/Source/Devices/MediaServer/PltMediaItem.cpp \
+      Platinum/Source/Devices/MediaServer/PltMediaServer.cpp \
+      Platinum/Source/Devices/MediaServer/PltSyncMediaBrowser.cpp \
+
+ifeq ($(findstring osx,$(ARCH)),osx)
+
+.SUFFIXES : .m .mm
+
+SRCS+= Neptune/Source/System/Apple/NptAppleAutoreleasePool.mm
+SRCS+= Neptune/Source/System/Apple/NptAppleLogConfig.mm
+SRCS+= Neptune/Source/System/Cocoa/NptCocoaEnviroment.mm
+
+else
+
+SRCS+= Neptune/Source/System/Posix/NptPosixEnvironment.cpp
+
+endif
+
+INCLUDES=-I./Neptune/Source/Core -I./Platinum/Source/Core -I./Platinum/Source/Platinum -I./Platinum/Source/Devices/MediaConnect -I./Platinum/Source/Devices/MediaRenderer -I./Platinum/Source/Devices/MediaServer -I./Neptune/Source/System/Posix -I./Platinum/Source/Extras
+
+LIB=libupnp.a
+
+include ../../Makefile.include
+-include $(filter %.P, $(OBJS:.o=.P))
+
+endif
diff --git a/lib/libexif/Makefile.in b/lib/libexif/Makefile.in
new file mode 100644
index 0000000..cab9560
--- /dev/null
+++ b/lib/libexif/Makefile.in
@@ -0,0 +1,21 @@
+ARCH=@ARCH@
+
+OBJS +=libexif.o ExifParse.o IptcParse.o JpegParse.o
+CFLAGS +=-D_LINUX -D_DLL -fPIC -O2
+CXXFLAGS +=-D_LINUX -D_DLL -fPIC -O2
+
+SYSDIR=@abs_top_srcdir@/system
+SO=libexif-$(ARCH).so
+SLIB=@abs_top_srcdir@/system/$(SO)
+
+$(SLIB): $(OBJS)
+ifeq ($(findstring osx,$(ARCH)), osx)
+	$(CXX) $(LDFLAGS) -Wl,-alias_list,@abs_top_srcdir@/xbmc/cores/DllLoader/exports/wrapper_mach_alias \
+		-bundle -undefined dynamic_lookup -read_only_relocs suppress -o $@ \
+		@abs_top_srcdir@/xbmc/cores/DllLoader/exports/wrapper.o $(OBJS)
+else
+	$(CXX) $(CXXFLAGS) $(LDFLAGS) -shared -o $@ $(OBJS) -Wl,--unresolved-symbols=ignore-all \
+		`cat @abs_top_srcdir@/xbmc/cores/DllLoader/exports/wrapper.def` @abs_top_srcdir@/xbmc/cores/DllLoader/exports/wrapper.o
+endif
+
+include @abs_top_srcdir@/Makefile.include
diff --git a/m4/ax_cxx_compile_stdcxx_11.m4 b/m4/ax_cxx_compile_stdcxx_11.m4
new file mode 100644
index 0000000..cee493a
--- /dev/null
+++ b/m4/ax_cxx_compile_stdcxx_11.m4
@@ -0,0 +1,146 @@
+# ============================================================================
+#  http://www.gnu.org/software/autoconf-archive/ax_cxx_compile_stdcxx_11.html
+# ============================================================================
+#
+# SYNOPSIS
+#
+#   AX_CXX_COMPILE_STDCXX_11([ext|noext],[mandatory|optional])
+#
+# DESCRIPTION
+#
+#   Check for baseline language coverage in the compiler for the C++11
+#   standard; if necessary, add switches to CXXFLAGS to enable support.
+#
+#   The first argument, if specified, indicates whether you insist on an
+#   extended mode (e.g. -std=gnu++11) or a strict conformance mode (e.g.
+#   -std=c++11).  If neither is specified, you get whatever works, with
+#   preference for an extended mode.
+#
+#   The second argument, if specified 'mandatory' or if left unspecified,
+#   indicates that baseline C++11 support is required and that the macro
+#   should error out if no mode with that support is found.  If specified
+#   'optional', then configuration proceeds regardless, after defining
+#   HAVE_CXX11 if and only if a supporting mode is found.
+#
+# LICENSE
+#
+#   Copyright (c) 2008 Benjamin Kosnik <bkoz@redhat.com>
+#   Copyright (c) 2012 Zack Weinberg <zackw@panix.com>
+#   Copyright (c) 2013 Roy Stogner <roystgnr@ices.utexas.edu>
+#   Copyright (c) 2014 Alexey Sokolov <sokolov@google.com>
+#
+#   Copying and distribution of this file, with or without modification, are
+#   permitted in any medium without royalty provided the copyright notice
+#   and this notice are preserved. This file is offered as-is, without any
+#   warranty.
+
+#serial 4
+
+m4_define([_AX_CXX_COMPILE_STDCXX_11_testbody], [[
+  template <typename T>
+    struct check
+    {
+      static_assert(sizeof(int) <= sizeof(T), "not big enough");
+    };
+
+    struct Base {
+    virtual void f() {}
+    };
+    struct Child : public Base {
+    virtual void f() {}
+    };
+
+    typedef check<check<bool>> right_angle_brackets;
+
+    int a;
+    decltype(a) b;
+
+    typedef check<int> check_type;
+    check_type c;
+    check_type&& cr = static_cast<check_type&&>(c);
+
+    auto d = a;
+    auto l = [](){};
+]])
+
+AC_DEFUN([AX_CXX_COMPILE_STDCXX_11], [dnl
+  m4_if([$1], [], [],
+        [$1], [ext], [],
+        [$1], [noext], [],
+        [m4_fatal([invalid argument `$1' to AX_CXX_COMPILE_STDCXX_11])])dnl
+  m4_if([$2], [], [ax_cxx_compile_cxx11_required=true],
+        [$2], [mandatory], [ax_cxx_compile_cxx11_required=true],
+        [$2], [optional], [ax_cxx_compile_cxx11_required=false],
+        [m4_fatal([invalid second argument `$2' to AX_CXX_COMPILE_STDCXX_11])])
+  AC_LANG_PUSH([C++])dnl
+  ac_success=no
+  AC_CACHE_CHECK(whether $CXX supports C++11 features by default,
+  ax_cv_cxx_compile_cxx11,
+  [AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_11_testbody])],
+    [ax_cv_cxx_compile_cxx11=yes],
+    [ax_cv_cxx_compile_cxx11=no])])
+  if test x$ax_cv_cxx_compile_cxx11 = xyes; then
+    ac_success=yes
+  fi
+
+  m4_if([$1], [noext], [], [dnl
+  if test x$ac_success = xno; then
+    for switch in -std=gnu++11 -std=gnu++0x; do
+      cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx11_$switch])
+      AC_CACHE_CHECK(whether $CXX supports C++11 features with $switch,
+                     $cachevar,
+        [ac_save_CXXFLAGS="$CXXFLAGS"
+         CXXFLAGS="$CXXFLAGS $switch"
+         AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_11_testbody])],
+          [eval $cachevar=yes],
+          [eval $cachevar=no])
+         CXXFLAGS="$ac_save_CXXFLAGS"])
+      if eval test x\$$cachevar = xyes; then
+        CXXFLAGS="$CXXFLAGS $switch"
+        CXX11_SWITCH="$switch"
+        AC_SUBST(CXX11_SWITCH)
+        ac_success=yes
+        break
+      fi
+    done
+  fi])
+
+  m4_if([$1], [ext], [], [dnl
+  if test x$ac_success = xno; then
+    for switch in -std=c++11 -std=c++0x; do
+      cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx11_$switch])
+      AC_CACHE_CHECK(whether $CXX supports C++11 features with $switch,
+                     $cachevar,
+        [ac_save_CXXFLAGS="$CXXFLAGS"
+         CXXFLAGS="$CXXFLAGS $switch"
+         AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_11_testbody])],
+          [eval $cachevar=yes],
+          [eval $cachevar=no])
+         CXXFLAGS="$ac_save_CXXFLAGS"])
+      if eval test x\$$cachevar = xyes; then
+        CXXFLAGS="$CXXFLAGS $switch"
+        CXX11_SWITCH="$switch"
+        AC_SUBST(CXX11_SWITCH)
+        ac_success=yes
+        break
+      fi
+    done
+  fi])
+  AC_LANG_POP([C++])
+  if test x$ax_cxx_compile_cxx11_required = xtrue; then
+    if test x$ac_success = xno; then
+      AC_MSG_ERROR([*** A compiler with support for C++11 language features is required.])
+    fi
+  else
+    if test x$ac_success = xno; then
+      HAVE_CXX11=0
+      AC_MSG_NOTICE([No compiler with C++11 support was found])
+    else
+      HAVE_CXX11=1
+      AC_DEFINE(HAVE_CXX11,1,
+                [define if the compiler supports basic C++11 syntax])
+    fi
+
+    AC_SUBST(HAVE_CXX11)
+  fi
+])
diff --git a/m4/ax_prog_cc_for_build.m4 b/m4/ax_prog_cc_for_build.m4
new file mode 100644
index 0000000..77fd346
--- /dev/null
+++ b/m4/ax_prog_cc_for_build.m4
@@ -0,0 +1,125 @@
+# ===========================================================================
+#   http://www.gnu.org/software/autoconf-archive/ax_prog_cc_for_build.html
+# ===========================================================================
+#
+# SYNOPSIS
+#
+#   AX_PROG_CC_FOR_BUILD
+#
+# DESCRIPTION
+#
+#   This macro searches for a C compiler that generates native executables,
+#   that is a C compiler that surely is not a cross-compiler. This can be
+#   useful if you have to generate source code at compile-time like for
+#   example GCC does.
+#
+#   The macro sets the CC_FOR_BUILD and CPP_FOR_BUILD macros to anything
+#   needed to compile or link (CC_FOR_BUILD) and preprocess (CPP_FOR_BUILD).
+#   The value of these variables can be overridden by the user by specifying
+#   a compiler with an environment variable (like you do for standard CC).
+#
+#   It also sets BUILD_EXEEXT and BUILD_OBJEXT to the executable and object
+#   file extensions for the build platform, and GCC_FOR_BUILD to `yes' if
+#   the compiler we found is GCC. All these variables but GCC_FOR_BUILD are
+#   substituted in the Makefile.
+#
+# LICENSE
+#
+#   Copyright (c) 2008 Paolo Bonzini <bonzini@gnu.org>
+#
+#   Copying and distribution of this file, with or without modification, are
+#   permitted in any medium without royalty provided the copyright notice
+#   and this notice are preserved. This file is offered as-is, without any
+#   warranty.
+
+#serial 8
+
+AU_ALIAS([AC_PROG_CC_FOR_BUILD], [AX_PROG_CC_FOR_BUILD])
+AC_DEFUN([AX_PROG_CC_FOR_BUILD], [dnl
+AC_REQUIRE([AC_PROG_CC])dnl
+AC_REQUIRE([AC_PROG_CPP])dnl
+AC_REQUIRE([AC_EXEEXT])dnl
+AC_REQUIRE([AC_CANONICAL_HOST])dnl
+
+dnl Use the standard macros, but make them use other variable names
+dnl
+pushdef([ac_cv_prog_CPP], ac_cv_build_prog_CPP)dnl
+pushdef([ac_cv_prog_gcc], ac_cv_build_prog_gcc)dnl
+pushdef([ac_cv_prog_cc_works], ac_cv_build_prog_cc_works)dnl
+pushdef([ac_cv_prog_cc_cross], ac_cv_build_prog_cc_cross)dnl
+pushdef([ac_cv_prog_cc_g], ac_cv_build_prog_cc_g)dnl
+pushdef([ac_cv_exeext], ac_cv_build_exeext)dnl
+pushdef([ac_cv_objext], ac_cv_build_objext)dnl
+pushdef([ac_exeext], ac_build_exeext)dnl
+pushdef([ac_objext], ac_build_objext)dnl
+pushdef([CC], CC_FOR_BUILD)dnl
+pushdef([CPP], CPP_FOR_BUILD)dnl
+pushdef([CFLAGS], CFLAGS_FOR_BUILD)dnl
+pushdef([CPPFLAGS], CPPFLAGS_FOR_BUILD)dnl
+pushdef([LDFLAGS], LDFLAGS_FOR_BUILD)dnl
+pushdef([host], build)dnl
+pushdef([host_alias], build_alias)dnl
+pushdef([host_cpu], build_cpu)dnl
+pushdef([host_vendor], build_vendor)dnl
+pushdef([host_os], build_os)dnl
+pushdef([ac_cv_host], ac_cv_build)dnl
+pushdef([ac_cv_host_alias], ac_cv_build_alias)dnl
+pushdef([ac_cv_host_cpu], ac_cv_build_cpu)dnl
+pushdef([ac_cv_host_vendor], ac_cv_build_vendor)dnl
+pushdef([ac_cv_host_os], ac_cv_build_os)dnl
+pushdef([ac_cpp], ac_build_cpp)dnl
+pushdef([ac_compile], ac_build_compile)dnl
+pushdef([ac_link], ac_build_link)dnl
+
+save_cross_compiling=$cross_compiling
+save_ac_tool_prefix=$ac_tool_prefix
+cross_compiling=no
+ac_tool_prefix=
+
+AC_PROG_CC
+AC_PROG_CPP
+AC_EXEEXT
+
+ac_tool_prefix=$save_ac_tool_prefix
+cross_compiling=$save_cross_compiling
+
+dnl Restore the old definitions
+dnl
+popdef([ac_link])dnl
+popdef([ac_compile])dnl
+popdef([ac_cpp])dnl
+popdef([ac_cv_host_os])dnl
+popdef([ac_cv_host_vendor])dnl
+popdef([ac_cv_host_cpu])dnl
+popdef([ac_cv_host_alias])dnl
+popdef([ac_cv_host])dnl
+popdef([host_os])dnl
+popdef([host_vendor])dnl
+popdef([host_cpu])dnl
+popdef([host_alias])dnl
+popdef([host])dnl
+popdef([LDFLAGS])dnl
+popdef([CPPFLAGS])dnl
+popdef([CFLAGS])dnl
+popdef([CPP])dnl
+popdef([CC])dnl
+popdef([ac_objext])dnl
+popdef([ac_exeext])dnl
+popdef([ac_cv_objext])dnl
+popdef([ac_cv_exeext])dnl
+popdef([ac_cv_prog_cc_g])dnl
+popdef([ac_cv_prog_cc_cross])dnl
+popdef([ac_cv_prog_cc_works])dnl
+popdef([ac_cv_prog_gcc])dnl
+popdef([ac_cv_prog_CPP])dnl
+
+dnl Finally, set Makefile variables
+dnl
+BUILD_EXEEXT=$ac_build_exeext
+BUILD_OBJEXT=$ac_build_objext
+AC_SUBST(BUILD_EXEEXT)dnl
+AC_SUBST(BUILD_OBJEXT)dnl
+AC_SUBST([CFLAGS_FOR_BUILD])dnl
+AC_SUBST([CPPFLAGS_FOR_BUILD])dnl
+AC_SUBST([LDFLAGS_FOR_BUILD])dnl
+])
diff --git a/m4/ax_prog_cxx_for_build.m4 b/m4/ax_prog_cxx_for_build.m4
new file mode 100644
index 0000000..8cc0f73
--- /dev/null
+++ b/m4/ax_prog_cxx_for_build.m4
@@ -0,0 +1,110 @@
+# ===========================================================================
+#   http://www.gnu.org/software/autoconf-archive/ax_prog_cxx_for_build.html
+# ===========================================================================
+#
+# SYNOPSIS
+#
+#   AX_PROG_CXX_FOR_BUILD
+#
+# DESCRIPTION
+#
+#   This macro searches for a C++ compiler that generates native
+#   executables, that is a C++ compiler that surely is not a cross-compiler.
+#   This can be useful if you have to generate source code at compile-time
+#   like for example GCC does.
+#
+#   The macro sets the CXX_FOR_BUILD and CXXCPP_FOR_BUILD macros to anything
+#   needed to compile or link (CXX_FOR_BUILD) and preprocess
+#   (CXXCPP_FOR_BUILD). The value of these variables can be overridden by
+#   the user by specifying a compiler with an environment variable (like you
+#   do for standard CXX).
+#
+# LICENSE
+#
+#   Copyright (c) 2008 Paolo Bonzini <bonzini@gnu.org>
+#   Copyright (c) 2012 Avionic Design GmbH
+#
+#   Based on the AX_PROG_CC_FOR_BUILD macro by Paolo Bonzini.
+#
+#   Copying and distribution of this file, with or without modification, are
+#   permitted in any medium without royalty provided the copyright notice
+#   and this notice are preserved. This file is offered as-is, without any
+#   warranty.
+
+#serial 2
+
+AU_ALIAS([AC_PROG_CXX_FOR_BUILD], [AX_PROG_CXX_FOR_BUILD])
+AC_DEFUN([AX_PROG_CXX_FOR_BUILD], [dnl
+AC_REQUIRE([AX_PROG_CC_FOR_BUILD])dnl
+AC_REQUIRE([AC_PROG_CXX])dnl
+AC_REQUIRE([AC_PROG_CXXCPP])dnl
+AC_REQUIRE([AC_CANONICAL_HOST])dnl
+
+dnl Use the standard macros, but make them use other variable names
+dnl
+pushdef([ac_cv_prog_CXXCPP], ac_cv_build_prog_CXXCPP)dnl
+pushdef([ac_cv_prog_gxx], ac_cv_build_prog_gxx)dnl
+pushdef([ac_cv_prog_cxx_works], ac_cv_build_prog_cxx_works)dnl
+pushdef([ac_cv_prog_cxx_cross], ac_cv_build_prog_cxx_cross)dnl
+pushdef([ac_cv_prog_cxx_g], ac_cv_build_prog_cxx_g)dnl
+pushdef([CXX], CXX_FOR_BUILD)dnl
+pushdef([CXXCPP], CXXCPP_FOR_BUILD)dnl
+pushdef([CXXFLAGS], CXXFLAGS_FOR_BUILD)dnl
+pushdef([CPPFLAGS], CPPFLAGS_FOR_BUILD)dnl
+pushdef([CXXCPPFLAGS], CXXCPPFLAGS_FOR_BUILD)dnl
+pushdef([host], build)dnl
+pushdef([host_alias], build_alias)dnl
+pushdef([host_cpu], build_cpu)dnl
+pushdef([host_vendor], build_vendor)dnl
+pushdef([host_os], build_os)dnl
+pushdef([ac_cv_host], ac_cv_build)dnl
+pushdef([ac_cv_host_alias], ac_cv_build_alias)dnl
+pushdef([ac_cv_host_cpu], ac_cv_build_cpu)dnl
+pushdef([ac_cv_host_vendor], ac_cv_build_vendor)dnl
+pushdef([ac_cv_host_os], ac_cv_build_os)dnl
+pushdef([ac_cxxcpp], ac_build_cxxcpp)dnl
+pushdef([ac_compile], ac_build_compile)dnl
+pushdef([ac_link], ac_build_link)dnl
+
+save_cross_compiling=$cross_compiling
+save_ac_tool_prefix=$ac_tool_prefix
+cross_compiling=no
+ac_tool_prefix=
+
+AC_PROG_CXX
+AC_PROG_CXXCPP
+
+ac_tool_prefix=$save_ac_tool_prefix
+cross_compiling=$save_cross_compiling
+
+dnl Restore the old definitions
+dnl
+popdef([ac_link])dnl
+popdef([ac_compile])dnl
+popdef([ac_cxxcpp])dnl
+popdef([ac_cv_host_os])dnl
+popdef([ac_cv_host_vendor])dnl
+popdef([ac_cv_host_cpu])dnl
+popdef([ac_cv_host_alias])dnl
+popdef([ac_cv_host])dnl
+popdef([host_os])dnl
+popdef([host_vendor])dnl
+popdef([host_cpu])dnl
+popdef([host_alias])dnl
+popdef([host])dnl
+popdef([CXXCPPFLAGS])dnl
+popdef([CPPFLAGS])dnl
+popdef([CXXFLAGS])dnl
+popdef([CXXCPP])dnl
+popdef([CXX])dnl
+popdef([ac_cv_prog_cxx_g])dnl
+popdef([ac_cv_prog_cxx_cross])dnl
+popdef([ac_cv_prog_cxx_works])dnl
+popdef([ac_cv_prog_gxx])dnl
+popdef([ac_cv_prog_CXXCPP])dnl
+
+dnl Finally, set Makefile variables
+dnl
+AC_SUBST([CXXFLAGS_FOR_BUILD])dnl
+AC_SUBST([CXXCPPFLAGS_FOR_BUILD])dnl
+])
diff --git a/m4/ax_python_devel.m4 b/m4/ax_python_devel.m4
new file mode 100644
index 0000000..0ab23b8
--- /dev/null
+++ b/m4/ax_python_devel.m4
@@ -0,0 +1,325 @@
+# ===========================================================================
+#      http://www.gnu.org/software/autoconf-archive/ax_python_devel.html
+# ===========================================================================
+#
+# SYNOPSIS
+#
+#   AX_PYTHON_DEVEL([version])
+#
+# DESCRIPTION
+#
+#   Note: Defines as a precious variable "PYTHON_VERSION". Don't override it
+#   in your configure.ac.
+#
+#   This macro checks for Python and tries to get the include path to
+#   'Python.h'. It provides the $(PYTHON_CPPFLAGS) and $(PYTHON_LDFLAGS)
+#   output variables. It also exports $(PYTHON_EXTRA_LIBS) and
+#   $(PYTHON_EXTRA_LDFLAGS) for embedding Python in your code.
+#
+#   You can search for some particular version of Python by passing a
+#   parameter to this macro, for example ">= '2.3.1'", or "== '2.4'". Please
+#   note that you *have* to pass also an operator along with the version to
+#   match, and pay special attention to the single quotes surrounding the
+#   version number. Don't use "PYTHON_VERSION" for this: that environment
+#   variable is declared as precious and thus reserved for the end-user.
+#
+#   This macro should work for all versions of Python >= 2.1.0. As an end
+#   user, you can disable the check for the python version by setting the
+#   PYTHON_NOVERSIONCHECK environment variable to something else than the
+#   empty string.
+#
+#   If you need to use this macro for an older Python version, please
+#   contact the authors. We're always open for feedback.
+#
+# LICENSE
+#
+#   Copyright (c) 2009 Sebastian Huber <sebastian-huber@web.de>
+#   Copyright (c) 2009 Alan W. Irwin
+#   Copyright (c) 2009 Rafael Laboissiere <rafael@laboissiere.net>
+#   Copyright (c) 2009 Andrew Collier
+#   Copyright (c) 2009 Matteo Settenvini <matteo@member.fsf.org>
+#   Copyright (c) 2009 Horst Knorr <hk_classes@knoda.org>
+#   Copyright (c) 2013 Daniel Mullner <muellner@math.stanford.edu>
+#
+#   This program is free software: you can redistribute it and/or modify it
+#   under the terms of the GNU General Public License as published by the
+#   Free Software Foundation, either version 3 of the License, or (at your
+#   option) any later version.
+#
+#   This program is distributed in the hope that it will be useful, but
+#   WITHOUT ANY WARRANTY; without even the implied warranty of
+#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
+#   Public License for more details.
+#
+#   You should have received a copy of the GNU General Public License along
+#   with this program. If not, see <http://www.gnu.org/licenses/>.
+#
+#   As a special exception, the respective Autoconf Macro's copyright owner
+#   gives unlimited permission to copy, distribute and modify the configure
+#   scripts that are the output of Autoconf when processing the Macro. You
+#   need not follow the terms of the GNU General Public License when using
+#   or distributing such scripts, even though portions of the text of the
+#   Macro appear in them. The GNU General Public License (GPL) does govern
+#   all other use of the material that constitutes the Autoconf Macro.
+#
+#   This special exception to the GPL applies to versions of the Autoconf
+#   Macro released by the Autoconf Archive. When you make and distribute a
+#   modified version of the Autoconf Macro, you may extend this special
+#   exception to the GPL to apply to your modified version as well.
+
+#serial 17  // this is a modified version
+
+AU_ALIAS([AC_PYTHON_DEVEL], [AX_PYTHON_DEVEL])
+AC_DEFUN([AX_PYTHON_DEVEL],[
+	#
+	# Allow the use of a (user set) custom python version
+	#
+	AC_ARG_VAR([PYTHON_VERSION],[The installed Python
+		version to use, for example '2.3'. This string
+		will be appended to the Python interpreter
+		canonical name.])
+
+	AC_PATH_PROG([PYTHON],[python[$PYTHON_VERSION]])
+	if test -z "$PYTHON"; then
+	   AC_MSG_ERROR([Cannot find python$PYTHON_VERSION in your system path])
+	   PYTHON_VERSION=""
+	fi
+
+	#
+	# Check for a version of Python >= 2.1.0
+	#
+	AC_MSG_CHECKING([for a version of Python >= '2.1.0'])
+	ac_supports_python_ver=`$PYTHON -c "import sys; \
+		ver = sys.version.split ()[[0]]; \
+		print (ver >= '2.1.0')"`
+	if test "$ac_supports_python_ver" != "True"; then
+		if test -z "$PYTHON_NOVERSIONCHECK"; then
+			AC_MSG_RESULT([no])
+			AC_MSG_FAILURE([
+This version of the AC@&t@_PYTHON_DEVEL macro
+doesn't work properly with versions of Python before
+2.1.0. You may need to re-run configure, setting the
+variables PYTHON_CPPFLAGS, PYTHON_LDFLAGS, PYTHON_SITE_PKG,
+PYTHON_EXTRA_LIBS and PYTHON_EXTRA_LDFLAGS by hand.
+Moreover, to disable this check, set PYTHON_NOVERSIONCHECK
+to something else than an empty string.
+])
+		else
+			AC_MSG_RESULT([skip at user request])
+		fi
+	else
+		AC_MSG_RESULT([yes])
+	fi
+
+	#
+	# if the macro parameter ``version'' is set, honour it
+	#
+	if test -n "$1"; then
+		AC_MSG_CHECKING([for a version of Python $1])
+		ac_supports_python_ver=`$PYTHON -c "import sys; \
+			ver = sys.version.split ()[[0]]; \
+			print (ver $1)"`
+		if test "$ac_supports_python_ver" = "True"; then
+		   AC_MSG_RESULT([yes])
+		else
+			AC_MSG_RESULT([no])
+			AC_MSG_ERROR([this package requires Python $1.
+If you have it installed, but it isn't the default Python
+interpreter in your system path, please pass the PYTHON_VERSION
+variable to configure. See ``configure --help'' for reference.
+])
+			PYTHON_VERSION=""
+		fi
+	fi
+
+	#
+	# Check if you have distutils, else fail
+	#
+	AC_MSG_CHECKING([for the distutils Python package])
+	ac_distutils_result=`$PYTHON -c "import distutils" 2>&1`
+	if test -z "$ac_distutils_result"; then
+		AC_MSG_RESULT([yes])
+	else
+		AC_MSG_RESULT([no])
+		AC_MSG_ERROR([cannot import Python module "distutils".
+Please check your Python installation. The error was:
+$ac_distutils_result])
+		PYTHON_VERSION=""
+	fi
+
+	#
+	# Check for Python include path
+	#
+	AC_MSG_CHECKING([for Python include path])
+	if test -z "$PYTHON_CPPFLAGS"; then
+		python_path=`$PYTHON -c "import distutils.sysconfig; \
+			print (distutils.sysconfig.get_python_inc ());"`
+		plat_python_path=`$PYTHON -c "import distutils.sysconfig; \
+			print (distutils.sysconfig.get_python_inc (plat_specific=1));"`
+		if test -n "${python_path}"; then
+			if test "${plat_python_path}" != "${python_path}"; then
+				python_path="-I$python_path -I$plat_python_path"
+			else
+				python_path="-I$python_path"
+			fi
+		fi
+		PYTHON_CPPFLAGS=$python_path
+	fi
+	AC_MSG_RESULT([$PYTHON_CPPFLAGS])
+	AC_SUBST([PYTHON_CPPFLAGS])
+
+	#
+	# Check for Python library path
+	#
+	AC_MSG_CHECKING([for Python library path])
+	if test -z "$PYTHON_LDFLAGS"; then
+		# (makes two attempts to ensure we've got a version number
+		# from the interpreter)
+		ac_python_version=`cat<<EOD | $PYTHON -
+
+# join all versioning strings, on some systems
+# major/minor numbers could be in different list elements
+from distutils.sysconfig import *
+e = get_config_var('VERSION')
+if e is not None:
+	print(e)
+EOD`
+
+		if test -z "$ac_python_version"; then
+			if test -n "$PYTHON_VERSION"; then
+				ac_python_version=$PYTHON_VERSION
+			else
+				ac_python_version=`$PYTHON -c "import sys; \
+					print (sys.version[[:3]])"`
+			fi
+		fi
+
+		# Make the versioning information available to the compiler
+		AC_DEFINE_UNQUOTED([HAVE_PYTHON], ["$ac_python_version"],
+                                   [If available, contains the Python version number currently in use.])
+
+		# First, the library directory:
+		ac_python_libdir=`cat<<EOD | $PYTHON -
+
+# There should be only one
+import distutils.sysconfig
+e = distutils.sysconfig.get_config_var('LIBDIR')
+if e is not None:
+	print (e)
+EOD`
+
+		# Now, for the library:
+		ac_python_library=`cat<<EOD | $PYTHON -
+
+import distutils.sysconfig
+c = distutils.sysconfig.get_config_vars()
+if 'LDVERSION' in c:
+	print ('python'+c[['LDVERSION']])
+else:
+	print ('python'+c[['VERSION']])
+EOD`
+
+		# This small piece shamelessly adapted from PostgreSQL python macro;
+		# credits goes to momjian, I think. I'd like to put the right name
+		# in the credits, if someone can point me in the right direction... ?
+		#
+		if test -n "$ac_python_libdir" -a -n "$ac_python_library"
+		then
+			# use the official shared library
+			ac_python_library=`echo "$ac_python_library" | sed "s/^lib//"`
+			PYTHON_LDFLAGS="-L$ac_python_libdir -l$ac_python_library"
+		else
+			# old way: use libpython from python_configdir
+			ac_python_libdir=`$PYTHON -c \
+			  "from distutils.sysconfig import get_python_lib as f; \
+			  import os; \
+			  print (os.path.join(f(plat_specific=1, standard_lib=1), 'config'));"`
+			PYTHON_LDFLAGS="-L$ac_python_libdir -lpython$ac_python_version"
+		fi
+
+		if test -z "$PYTHON_LDFLAGS"; then
+			AC_MSG_ERROR([
+  Cannot determine location of your Python DSO. Please check it was installed with
+  dynamic libraries enabled, or try setting PYTHON_LDFLAGS by hand.
+			])
+		fi
+	fi
+	AC_MSG_RESULT([$PYTHON_LDFLAGS])
+	AC_SUBST([PYTHON_LDFLAGS])
+
+	#
+	# Check for site packages
+	#
+	AC_MSG_CHECKING([for Python site-packages path])
+	if test -z "$PYTHON_SITE_PKG"; then
+		PYTHON_SITE_PKG=`$PYTHON -c "import distutils.sysconfig; \
+			print (distutils.sysconfig.get_python_lib(0,0));"`
+	fi
+	AC_MSG_RESULT([$PYTHON_SITE_PKG])
+	AC_SUBST([PYTHON_SITE_PKG])
+
+	#
+	# libraries which must be linked in when embedding
+	#
+	AC_MSG_CHECKING(python extra libraries)
+	if test -z "$PYTHON_EXTRA_LIBS"; then
+	   PYTHON_EXTRA_LIBS=`$PYTHON -c "import distutils.sysconfig; \
+                conf = distutils.sysconfig.get_config_var; \
+                print (conf('LIBS') + ' ' + conf('SYSLIBS'))"`
+	fi
+	AC_MSG_RESULT([$PYTHON_EXTRA_LIBS])
+	AC_SUBST(PYTHON_EXTRA_LIBS)
+
+	#
+	# linking flags needed when embedding
+	#
+	AC_MSG_CHECKING(python extra linking flags)
+	if test -z "$PYTHON_EXTRA_LDFLAGS"; then
+		PYTHON_EXTRA_LDFLAGS=`$PYTHON -c "import distutils.sysconfig; \
+			conf = distutils.sysconfig.get_config_var; \
+			print (conf('LINKFORSHARED'))"`
+	fi
+	AC_MSG_RESULT([$PYTHON_EXTRA_LDFLAGS])
+	AC_SUBST(PYTHON_EXTRA_LDFLAGS)
+
+	#
+	# final check to see if everything compiles alright
+	#
+	AC_MSG_CHECKING([consistency of all components of python development environment])
+	# save current global flags
+	ac_save_LIBS="$LIBS"
+	ac_save_CPPFLAGS="$CPPFLAGS"
+	LIBS="$ac_save_LIBS $PYTHON_LDFLAGS $PYTHON_EXTRA_LDFLAGS $PYTHON_EXTRA_LIBS"
+	CPPFLAGS="$ac_save_CPPFLAGS $PYTHON_CPPFLAGS"
+	AC_LANG_PUSH([C])
+	AC_LINK_IFELSE([
+		AC_LANG_PROGRAM([[#include <Python.h>]],
+				[[Py_Initialize();]])
+		],[pythonexists=yes],[pythonexists=no])
+	AC_LANG_POP([C])
+	# turn back to default flags
+	CPPFLAGS="$ac_save_CPPFLAGS"
+	LIBS="$ac_save_LIBS"
+
+	AC_MSG_RESULT([$pythonexists])
+
+        if test ! "x$pythonexists" = "xyes"; then
+	   AC_MSG_FAILURE([
+  Could not link test program to Python. Maybe the main Python library has been
+  installed in some non-standard library path. If so, pass it to configure,
+  via the LDFLAGS environment variable.
+  Example: ./configure LDFLAGS="-L/usr/non-standard-path/python/lib"
+  ============================================================================
+   ERROR!
+   You probably have to install the development version of the Python package
+   for your distribution.  The exact name of this package varies among them.
+  ============================================================================
+	   ])
+	  PYTHON_VERSION=""
+	fi
+
+	#
+	# all done!
+	#
+])
+
diff --git a/m4/xbmc_arch.m4 b/m4/xbmc_arch.m4
new file mode 100644
index 0000000..d28f263
--- /dev/null
+++ b/m4/xbmc_arch.m4
@@ -0,0 +1,83 @@
+AC_DEFUN([XBMC_SETUP_ARCH_DEFINES],[
+
+# build detection and setup - this is the native arch
+case $build in
+  i*86*-linux-gnu*|i*86*-*-linux-uclibc*)
+     AC_SUBST(NATIVE_ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX")
+     ;;
+  x86_64-*-linux-gnu*|x86_64-*-linux-uclibc*)
+     AC_SUBST(NATIVE_ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX")
+     ;;
+  i386-*-freebsd*)
+     AC_SUBST(NATIVE_ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_FREEBSD -D_LINUX")
+     ;;
+  amd64-*-freebsd*)
+     AC_SUBST(NATIVE_ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_FREEBSD -D_LINUX")
+     ;;
+  *86*-apple-darwin*)
+     AC_SUBST(NATIVE_ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_DARWIN -DTARGET_DARWIN_OSX -D_LINUX")
+     ;;
+  powerpc-*-linux-gnu*|powerpc-*-linux-uclibc*)
+     AC_SUBST(NATIVE_ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX -D_POWERPC")
+     ;;
+  powerpc64-*-linux-gnu*|powerpc64-*-linux-uclibc*)
+     AC_SUBST(NATIVE_ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX -D_POWERPC64")
+     ;;
+  arm*-*-linux-gnu*|arm*-*-linux-uclibc*)
+     AC_SUBST(NATIVE_ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX")
+     ;;
+  *)
+     AC_MSG_ERROR(unsupported native build platform: $build)
+esac
+
+
+# host detection and setup - this is the target arch
+case $host in
+  i*86*-linux-gnu*|i*86*-*-linux-uclibc*)
+     AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX")
+     ;;
+  x86_64-*-linux-gnu*|x86_64-*-linux-uclibc*)
+     AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX")
+     ;;
+  i386-*-freebsd*)
+     AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_FREEBSD -D_LINUX")
+     ;;
+  amd64-*-freebsd*)
+     AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_FREEBSD -D_LINUX")
+     ;;
+  arm-apple-darwin*)
+     AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_DARWIN -DTARGET_DARWIN_IOS -D_LINUX")
+     ;;
+  *86*-apple-darwin*)
+     AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_DARWIN -DTARGET_DARWIN_OSX -D_LINUX")
+     ;;
+  powerpc-apple-darwin*)
+     AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_DARWIN -DTARGET_DARWIN_OSX -D_LINUX")
+     ;;
+  powerpc-*-linux-gnu*|powerpc-*-linux-uclibc*)
+     AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX -D_POWERPC")
+     ;;
+  powerpc64*-*-linux-gnu*|powerpc64*-*-linux-uclibc*)
+     AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX -D_POWERPC64")
+     ;;
+  arm*-*-linux-gnu*|arm*-*-linux-uclibc*|aarch64*-*-linux-gnu*|aarch64*-*-linux-uclibc*)
+     AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX")
+     ;;
+  mips*-*-linux-gnu*|mips*-*-linux-uclibc*)
+     AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX")
+     ;;
+  *-*linux-android*)
+     AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX -DTARGET_ANDROID")
+     ;;
+  *)
+     AC_MSG_ERROR(unsupported build target: $host)
+esac
+
+if test "$target_platform" = "target_android" ; then
+  AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX -DTARGET_ANDROID")
+fi
+
+if test "$target_platform" = "target_raspberry_pi" ; then
+  AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX -D_ARMEL -DTARGET_RASPBERRY_PI")
+fi
+])
diff --git a/tools/EventClients/Clients/OSXRemote/Makefile.in b/tools/EventClients/Clients/OSXRemote/Makefile.in
new file mode 100644
index 0000000..1d08fb5
--- /dev/null
+++ b/tools/EventClients/Clients/OSXRemote/Makefile.in
@@ -0,0 +1,18 @@
+#convenience makefile to allow headless osx build
+
+DEBUG_FLAGS=@DEBUG_FLAGS@
+
+#check for debug build
+ifneq (,$(findstring _DEBUG, $(DEBUG_FLAGS)))
+  CONFIGURATION=Debug
+else
+  CONFIGURATION=Release
+endif
+
+all: 
+	xcodebuild -configuration $(CONFIGURATION)
+
+clean:
+	xcodebuild clean -configuration $(CONFIGURATION)
+
+.PHONY: all clean
diff --git a/tools/EventClients/Makefile.in b/tools/EventClients/Makefile.in
new file mode 100644
index 0000000..2cd5712
--- /dev/null
+++ b/tools/EventClients/Makefile.in
@@ -0,0 +1,28 @@
+WII_EXTRA_OPTS=
+CLEAN_FILES=Clients/WiiRemote/WiiRemote
+PYTHON_SITEDIR := $(shell python -c "from distutils.sysconfig import get_python_lib; print get_python_lib()")
+
+all: install
+
+wiimote: Clients/WiiRemote/WiiRemote
+
+Clients/WiiRemote/WiiRemote:
+	cd Clients/WiiRemote && \
+	$(CXX) $(CXXFLAGS) $(LDFLAGS) CWIID_WiiRemote.cpp -lcwiid -lbluetooth -DICON_PATH="\"$(datarootdir)/pixmaps/@APP_NAME_LC@/\"" $(WII_EXTRA_OPTS) -o WiiRemote
+
+install: Clients/WiiRemote/WiiRemote
+	mkdir -p $(DESTDIR)$(bindir)
+	cp -a Clients/WiiRemote/WiiRemote $(DESTDIR)$(bindir)/@APP_NAME_LC@-wiiremote
+	cp -a Clients/PS3\ BD\ Remote/ps3_remote.py $(DESTDIR)$(bindir)/@APP_NAME_LC@-ps3remote
+	cp -a Clients/PS3\ Sixaxis\ Controller/ps3d.py $(DESTDIR)$(bindir)/@APP_NAME_LC@-ps3d
+	cp -a Clients/Kodi\ Send/kodi-send.py $(DESTDIR)$(bindir)/@APP_NAME_LC@-send
+	mkdir -p $(DESTDIR)$(PYTHON_SITEDIR)/@APP_NAME_LC@
+	echo 'ICON_PATH="$(datarootdir)/pixmaps/@APP_NAME_LC@/"' > $(DESTDIR)$(PYTHON_SITEDIR)/@APP_NAME_LC@/defs.py
+	cp -a lib/python/* $(DESTDIR)$(PYTHON_SITEDIR)/@APP_NAME_LC@/
+	cp -a Clients/PS3\ BD\ Remote/ps3_remote.py $(DESTDIR)$(PYTHON_SITEDIR)/@APP_NAME_LC@/
+	mkdir -p $(DESTDIR)$(includedir)/@APP_NAME_LC@
+	cp -a lib/c++/* $(DESTDIR)$(includedir)/@APP_NAME_LC@/
+	mkdir -p $(DESTDIR)$(datarootdir)/pixmaps/@APP_NAME_LC@
+	cp -a icons/* $(DESTDIR)$(datarootdir)/pixmaps/@APP_NAME_LC@/
+
+include ../../Makefile.include
diff --git a/tools/buildsteps/rbpi/prepare-xbmc b/tools/buildsteps/rbpi/prepare-xbmc
index 65e7915..15bd095 100755
--- a/tools/buildsteps/rbpi/prepare-xbmc
+++ b/tools/buildsteps/rbpi/prepare-xbmc
@@ -3,6 +3,7 @@ XBMC_PLATFORM_DIR=rbpi
 . $WORKSPACE/tools/buildsteps/defaultenv
 
 cd $WORKSPACE
+JSON_BUILDER=$XBMC_DEPENDS_ROOT/i686-linux-gnu-native/bin/JsonSchemaBuilder ./bootstrap
 
 #build binary addons before building xbmc...
 #make sure that binary_addons don't clean the native tools
diff --git a/tools/depends/configure.ac b/tools/depends/configure.ac
index 267932d..100ff31 100644
--- a/tools/depends/configure.ac
+++ b/tools/depends/configure.ac
@@ -12,8 +12,8 @@ passed_cflags="$CFLAGS"
 passed_ldflags="$LDFLAGS"
 passed_cxxflags="$CXXFLAGS"
 
-m4_include([m4/xbmc_arch.m4])
-m4_include([m4/ax_cxx_compile_stdcxx_11.m4])
+m4_include([../../m4/xbmc_arch.m4])
+m4_include([../../m4/ax_cxx_compile_stdcxx_11.m4])
 AX_CXX_COMPILE_STDCXX_11(,[mandatory])
 c11_flags="$CFLAGS"
 cxx11_flags="$CXXFLAGS"
diff --git a/tools/depends/m4/ax_cxx_compile_stdcxx_11.m4 b/tools/depends/m4/ax_cxx_compile_stdcxx_11.m4
deleted file mode 100644
index cee493a..0000000
--- a/tools/depends/m4/ax_cxx_compile_stdcxx_11.m4
+++ /dev/null
@@ -1,146 +0,0 @@
-# ============================================================================
-#  http://www.gnu.org/software/autoconf-archive/ax_cxx_compile_stdcxx_11.html
-# ============================================================================
-#
-# SYNOPSIS
-#
-#   AX_CXX_COMPILE_STDCXX_11([ext|noext],[mandatory|optional])
-#
-# DESCRIPTION
-#
-#   Check for baseline language coverage in the compiler for the C++11
-#   standard; if necessary, add switches to CXXFLAGS to enable support.
-#
-#   The first argument, if specified, indicates whether you insist on an
-#   extended mode (e.g. -std=gnu++11) or a strict conformance mode (e.g.
-#   -std=c++11).  If neither is specified, you get whatever works, with
-#   preference for an extended mode.
-#
-#   The second argument, if specified 'mandatory' or if left unspecified,
-#   indicates that baseline C++11 support is required and that the macro
-#   should error out if no mode with that support is found.  If specified
-#   'optional', then configuration proceeds regardless, after defining
-#   HAVE_CXX11 if and only if a supporting mode is found.
-#
-# LICENSE
-#
-#   Copyright (c) 2008 Benjamin Kosnik <bkoz@redhat.com>
-#   Copyright (c) 2012 Zack Weinberg <zackw@panix.com>
-#   Copyright (c) 2013 Roy Stogner <roystgnr@ices.utexas.edu>
-#   Copyright (c) 2014 Alexey Sokolov <sokolov@google.com>
-#
-#   Copying and distribution of this file, with or without modification, are
-#   permitted in any medium without royalty provided the copyright notice
-#   and this notice are preserved. This file is offered as-is, without any
-#   warranty.
-
-#serial 4
-
-m4_define([_AX_CXX_COMPILE_STDCXX_11_testbody], [[
-  template <typename T>
-    struct check
-    {
-      static_assert(sizeof(int) <= sizeof(T), "not big enough");
-    };
-
-    struct Base {
-    virtual void f() {}
-    };
-    struct Child : public Base {
-    virtual void f() {}
-    };
-
-    typedef check<check<bool>> right_angle_brackets;
-
-    int a;
-    decltype(a) b;
-
-    typedef check<int> check_type;
-    check_type c;
-    check_type&& cr = static_cast<check_type&&>(c);
-
-    auto d = a;
-    auto l = [](){};
-]])
-
-AC_DEFUN([AX_CXX_COMPILE_STDCXX_11], [dnl
-  m4_if([$1], [], [],
-        [$1], [ext], [],
-        [$1], [noext], [],
-        [m4_fatal([invalid argument `$1' to AX_CXX_COMPILE_STDCXX_11])])dnl
-  m4_if([$2], [], [ax_cxx_compile_cxx11_required=true],
-        [$2], [mandatory], [ax_cxx_compile_cxx11_required=true],
-        [$2], [optional], [ax_cxx_compile_cxx11_required=false],
-        [m4_fatal([invalid second argument `$2' to AX_CXX_COMPILE_STDCXX_11])])
-  AC_LANG_PUSH([C++])dnl
-  ac_success=no
-  AC_CACHE_CHECK(whether $CXX supports C++11 features by default,
-  ax_cv_cxx_compile_cxx11,
-  [AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_11_testbody])],
-    [ax_cv_cxx_compile_cxx11=yes],
-    [ax_cv_cxx_compile_cxx11=no])])
-  if test x$ax_cv_cxx_compile_cxx11 = xyes; then
-    ac_success=yes
-  fi
-
-  m4_if([$1], [noext], [], [dnl
-  if test x$ac_success = xno; then
-    for switch in -std=gnu++11 -std=gnu++0x; do
-      cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx11_$switch])
-      AC_CACHE_CHECK(whether $CXX supports C++11 features with $switch,
-                     $cachevar,
-        [ac_save_CXXFLAGS="$CXXFLAGS"
-         CXXFLAGS="$CXXFLAGS $switch"
-         AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_11_testbody])],
-          [eval $cachevar=yes],
-          [eval $cachevar=no])
-         CXXFLAGS="$ac_save_CXXFLAGS"])
-      if eval test x\$$cachevar = xyes; then
-        CXXFLAGS="$CXXFLAGS $switch"
-        CXX11_SWITCH="$switch"
-        AC_SUBST(CXX11_SWITCH)
-        ac_success=yes
-        break
-      fi
-    done
-  fi])
-
-  m4_if([$1], [ext], [], [dnl
-  if test x$ac_success = xno; then
-    for switch in -std=c++11 -std=c++0x; do
-      cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx11_$switch])
-      AC_CACHE_CHECK(whether $CXX supports C++11 features with $switch,
-                     $cachevar,
-        [ac_save_CXXFLAGS="$CXXFLAGS"
-         CXXFLAGS="$CXXFLAGS $switch"
-         AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_11_testbody])],
-          [eval $cachevar=yes],
-          [eval $cachevar=no])
-         CXXFLAGS="$ac_save_CXXFLAGS"])
-      if eval test x\$$cachevar = xyes; then
-        CXXFLAGS="$CXXFLAGS $switch"
-        CXX11_SWITCH="$switch"
-        AC_SUBST(CXX11_SWITCH)
-        ac_success=yes
-        break
-      fi
-    done
-  fi])
-  AC_LANG_POP([C++])
-  if test x$ax_cxx_compile_cxx11_required = xtrue; then
-    if test x$ac_success = xno; then
-      AC_MSG_ERROR([*** A compiler with support for C++11 language features is required.])
-    fi
-  else
-    if test x$ac_success = xno; then
-      HAVE_CXX11=0
-      AC_MSG_NOTICE([No compiler with C++11 support was found])
-    else
-      HAVE_CXX11=1
-      AC_DEFINE(HAVE_CXX11,1,
-                [define if the compiler supports basic C++11 syntax])
-    fi
-
-    AC_SUBST(HAVE_CXX11)
-  fi
-])
diff --git a/tools/depends/m4/xbmc_arch.m4 b/tools/depends/m4/xbmc_arch.m4
deleted file mode 100644
index d28f263..0000000
--- a/tools/depends/m4/xbmc_arch.m4
+++ /dev/null
@@ -1,83 +0,0 @@
-AC_DEFUN([XBMC_SETUP_ARCH_DEFINES],[
-
-# build detection and setup - this is the native arch
-case $build in
-  i*86*-linux-gnu*|i*86*-*-linux-uclibc*)
-     AC_SUBST(NATIVE_ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX")
-     ;;
-  x86_64-*-linux-gnu*|x86_64-*-linux-uclibc*)
-     AC_SUBST(NATIVE_ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX")
-     ;;
-  i386-*-freebsd*)
-     AC_SUBST(NATIVE_ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_FREEBSD -D_LINUX")
-     ;;
-  amd64-*-freebsd*)
-     AC_SUBST(NATIVE_ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_FREEBSD -D_LINUX")
-     ;;
-  *86*-apple-darwin*)
-     AC_SUBST(NATIVE_ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_DARWIN -DTARGET_DARWIN_OSX -D_LINUX")
-     ;;
-  powerpc-*-linux-gnu*|powerpc-*-linux-uclibc*)
-     AC_SUBST(NATIVE_ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX -D_POWERPC")
-     ;;
-  powerpc64-*-linux-gnu*|powerpc64-*-linux-uclibc*)
-     AC_SUBST(NATIVE_ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX -D_POWERPC64")
-     ;;
-  arm*-*-linux-gnu*|arm*-*-linux-uclibc*)
-     AC_SUBST(NATIVE_ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX")
-     ;;
-  *)
-     AC_MSG_ERROR(unsupported native build platform: $build)
-esac
-
-
-# host detection and setup - this is the target arch
-case $host in
-  i*86*-linux-gnu*|i*86*-*-linux-uclibc*)
-     AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX")
-     ;;
-  x86_64-*-linux-gnu*|x86_64-*-linux-uclibc*)
-     AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX")
-     ;;
-  i386-*-freebsd*)
-     AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_FREEBSD -D_LINUX")
-     ;;
-  amd64-*-freebsd*)
-     AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_FREEBSD -D_LINUX")
-     ;;
-  arm-apple-darwin*)
-     AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_DARWIN -DTARGET_DARWIN_IOS -D_LINUX")
-     ;;
-  *86*-apple-darwin*)
-     AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_DARWIN -DTARGET_DARWIN_OSX -D_LINUX")
-     ;;
-  powerpc-apple-darwin*)
-     AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_DARWIN -DTARGET_DARWIN_OSX -D_LINUX")
-     ;;
-  powerpc-*-linux-gnu*|powerpc-*-linux-uclibc*)
-     AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX -D_POWERPC")
-     ;;
-  powerpc64*-*-linux-gnu*|powerpc64*-*-linux-uclibc*)
-     AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX -D_POWERPC64")
-     ;;
-  arm*-*-linux-gnu*|arm*-*-linux-uclibc*|aarch64*-*-linux-gnu*|aarch64*-*-linux-uclibc*)
-     AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX")
-     ;;
-  mips*-*-linux-gnu*|mips*-*-linux-uclibc*)
-     AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX")
-     ;;
-  *-*linux-android*)
-     AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX -DTARGET_ANDROID")
-     ;;
-  *)
-     AC_MSG_ERROR(unsupported build target: $host)
-esac
-
-if test "$target_platform" = "target_android" ; then
-  AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX -DTARGET_ANDROID")
-fi
-
-if test "$target_platform" = "target_raspberry_pi" ; then
-  AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX -D_ARMEL -DTARGET_RASPBERRY_PI")
-fi
-])
diff --git a/xbmc/Makefile.in b/xbmc/Makefile.in
new file mode 100644
index 0000000..21502b4
--- /dev/null
+++ b/xbmc/Makefile.in
@@ -0,0 +1,58 @@
+SRCS=Application.cpp \
+     ApplicationPlayer.cpp \
+     AppParamParser.cpp \
+     Autorun.cpp \
+     AutoSwitch.cpp \
+     BackgroundInfoLoader.cpp \
+     ContextMenuItem.cpp \
+     ContextMenuManager.cpp \
+     CompileInfo.cpp \
+     CueDocument.cpp \
+     DatabaseManager.cpp \
+     DbUrl.cpp \
+     DynamicDll.cpp \
+     FileItem.cpp \
+     FileItemListModification.cpp \
+     GitRevision \
+     GUIInfoManager.cpp \
+     GUILargeTextureManager.cpp \
+     GUIPassword.cpp \
+     InfoScanner.cpp \
+     LangInfo.cpp \
+     MediaSource.cpp \
+     NfoFile.cpp \
+     PasswordManager.cpp \
+     PlayListPlayer.cpp \
+     PartyModeManager.cpp \
+     SectionLoader.cpp \
+     ServiceBroker.cpp \
+     ServiceManager.cpp \
+     SystemGlobals.cpp \
+     TextureCache.cpp \
+     TextureCacheJob.cpp \
+     TextureDatabase.cpp \
+     ThumbLoader.cpp \
+     ThumbnailCache.cpp \
+     URL.cpp \
+     Util.cpp \
+     XBApplicationEx.cpp \
+     XBDateTime.cpp \
+
+LIB=xbmc.a
+
+DISTCLEAN_FILES=DllPaths_generated.h CompileInfo.cpp
+
+.PHONY: .GitRevision
+
+all: $(SRCS) $(LIB)
+
+CompileInfo.cpp: ../version.txt CompileInfo.cpp.in GitRevision
+	$(MAKE) -f gen-compileinfo.mk
+
+GitRevision:
+	$(MAKE) -f gen-compileinfo.mk GitRevision
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
+
+
diff --git a/xbmc/addons/Makefile b/xbmc/addons/Makefile
new file mode 100644
index 0000000..65d30ca
--- /dev/null
+++ b/xbmc/addons/Makefile
@@ -0,0 +1,39 @@
+SRCS=Addon.cpp \
+     AddonBuilder.cpp \
+     BinaryAddonCache.cpp \
+     AddonDatabase.cpp \
+     AddonInstaller.cpp \
+     AddonManager.cpp \
+     AddonStatusHandler.cpp \
+     AddonSystemSettings.cpp \
+     AddonVersion.cpp \
+     AudioEncoder.cpp \
+     ContextMenuAddon.cpp \
+     ContextMenus.cpp \
+     AudioDecoder.cpp \
+     FilesystemInstaller.cpp \
+     GameResource.cpp \
+     GUIDialogAddonInfo.cpp \
+     GUIDialogAddonSettings.cpp \
+     GUIViewStateAddonBrowser.cpp \
+     GUIWindowAddonBrowser.cpp \
+     ImageResource.cpp \
+     InputStream.cpp \
+     LanguageResource.cpp \
+     PluginSource.cpp \
+     PVRClient.cpp \
+     Repository.cpp \
+     RepositoryUpdater.cpp \
+     Scraper.cpp \
+     ScreenSaver.cpp \
+     Service.cpp \
+     Skin.cpp \
+     UISoundsResource.cpp \
+     Visualisation.cpp \
+     Webinterface.cpp \
+
+LIB=addons.a
+
+include ../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
+
diff --git a/xbmc/addons/interfaces/Addon/Makefile b/xbmc/addons/interfaces/Addon/Makefile
new file mode 100644
index 0000000..09ea40e
--- /dev/null
+++ b/xbmc/addons/interfaces/Addon/Makefile
@@ -0,0 +1,7 @@
+SRCS=AddonCallbacksAddon.cpp \
+
+LIB=addon-callbacks-addon.a
+
+include ../../../../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
+
diff --git a/xbmc/addons/interfaces/AudioDSP/Makefile b/xbmc/addons/interfaces/AudioDSP/Makefile
new file mode 100644
index 0000000..16d077b
--- /dev/null
+++ b/xbmc/addons/interfaces/AudioDSP/Makefile
@@ -0,0 +1,7 @@
+SRCS=AddonCallbacksAudioDSP.cpp \
+
+LIB=addon-callbacks-audiodsp.a
+
+include ../../../../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
+
diff --git a/xbmc/addons/interfaces/AudioEngine/Makefile b/xbmc/addons/interfaces/AudioEngine/Makefile
new file mode 100644
index 0000000..74bf8a9
--- /dev/null
+++ b/xbmc/addons/interfaces/AudioEngine/Makefile
@@ -0,0 +1,6 @@
+SRCS=AddonCallbacksAudioEngine.cpp \
+
+LIB=addon-callbacks-audioengine.a
+
+include ../../../../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/addons/interfaces/Codec/Makefile b/xbmc/addons/interfaces/Codec/Makefile
new file mode 100644
index 0000000..f2cba21
--- /dev/null
+++ b/xbmc/addons/interfaces/Codec/Makefile
@@ -0,0 +1,7 @@
+SRCS=AddonCallbacksCodec.cpp \
+
+LIB=addon-callbacks-codec.a
+
+include ../../../../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
+
diff --git a/xbmc/addons/interfaces/GUI/Makefile b/xbmc/addons/interfaces/GUI/Makefile
new file mode 100644
index 0000000..8832ee9
--- /dev/null
+++ b/xbmc/addons/interfaces/GUI/Makefile
@@ -0,0 +1,9 @@
+SRCS=AddonCallbacksGUI.cpp \
+     AddonGUIRenderingControl.cpp \
+     AddonGUIWindow.cpp \
+
+LIB=addon-callbacks-gui.a
+
+include ../../../../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
+
diff --git a/xbmc/addons/interfaces/Game/Makefile b/xbmc/addons/interfaces/Game/Makefile
new file mode 100644
index 0000000..460425b
--- /dev/null
+++ b/xbmc/addons/interfaces/Game/Makefile
@@ -0,0 +1,7 @@
+SRCS=AddonCallbacksGame.cpp \
+
+LIB=addon-callbacks-game.a
+
+include ../../../../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
+
diff --git a/xbmc/addons/interfaces/InputStream/Makefile b/xbmc/addons/interfaces/InputStream/Makefile
new file mode 100644
index 0000000..59a422a
--- /dev/null
+++ b/xbmc/addons/interfaces/InputStream/Makefile
@@ -0,0 +1,7 @@
+SRCS=AddonCallbacksInputStream.cpp \
+
+LIB=addon-callbacks-inputstream.a
+
+include ../../../../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
+
diff --git a/xbmc/addons/interfaces/Makefile.in b/xbmc/addons/interfaces/Makefile.in
new file mode 100644
index 0000000..4f5e9bb
--- /dev/null
+++ b/xbmc/addons/interfaces/Makefile.in
@@ -0,0 +1,6 @@
+SRCS=AddonInterfaces.cpp \
+
+LIB=addon-interfaces.a
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/addons/interfaces/PVR/Makefile b/xbmc/addons/interfaces/PVR/Makefile
new file mode 100644
index 0000000..a3dedd1
--- /dev/null
+++ b/xbmc/addons/interfaces/PVR/Makefile
@@ -0,0 +1,6 @@
+SRCS=AddonCallbacksPVR.cpp \
+
+LIB=addon-callbacks-pvr.a
+
+include ../../../../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/addons/interfaces/Peripheral/Makefile b/xbmc/addons/interfaces/Peripheral/Makefile
new file mode 100644
index 0000000..2f629d1
--- /dev/null
+++ b/xbmc/addons/interfaces/Peripheral/Makefile
@@ -0,0 +1,7 @@
+SRCS=AddonCallbacksPeripheral.cpp \
+
+LIB=addon-callbacks-peripheral.a
+
+include ../../../../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
+
diff --git a/xbmc/addons/test/Makefile b/xbmc/addons/test/Makefile
new file mode 100644
index 0000000..fc2a1e3
--- /dev/null
+++ b/xbmc/addons/test/Makefile
@@ -0,0 +1,12 @@
+SRCS=	\
+  TestAddonBuilder.cpp \
+  TestAddonDatabase.cpp \
+  TestAddonFactory.cpp \
+  TestAddonVersion.cpp
+
+LIB=addonsTest.a
+
+INCLUDES += -I../../../lib/gtest/include
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/cdrip/Makefile.in b/xbmc/cdrip/Makefile.in
new file mode 100644
index 0000000..e763cde
--- /dev/null
+++ b/xbmc/cdrip/Makefile.in
@@ -0,0 +1,9 @@
+SRCS  = CDDARipJob.cpp
+SRCS += CDDARipper.cpp
+SRCS += Encoder.cpp
+SRCS += EncoderFFmpeg.cpp
+
+LIB=cdrip.a
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/commons/Makefile b/xbmc/commons/Makefile
new file mode 100644
index 0000000..b6403f4
--- /dev/null
+++ b/xbmc/commons/Makefile
@@ -0,0 +1,8 @@
+SRCS= \
+	Exception.cpp \
+	ilog.cpp
+
+LIB=commons.a
+
+include ../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(patsubst %.S,,$(SRCS))))
diff --git a/xbmc/contrib/kissfft/Makefile b/xbmc/contrib/kissfft/Makefile
new file mode 100644
index 0000000..72672ee
--- /dev/null
+++ b/xbmc/contrib/kissfft/Makefile
@@ -0,0 +1,6 @@
+SRCS=kiss_fft.c kiss_fftr.c
+
+LIB=kissfft.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/cores/AudioEngine/Makefile.in b/xbmc/cores/AudioEngine/Makefile.in
new file mode 100644
index 0000000..9a4e998
--- /dev/null
+++ b/xbmc/cores/AudioEngine/Makefile.in
@@ -0,0 +1,88 @@
+ARCH=@ARCH@
+
+INCLUDES  = -I.
+INCLUDES += -I@abs_top_srcdir@/xbmc
+INCLUDES += -I@abs_top_srcdir@/xbmc/linux
+INCLUDES += -I@abs_top_srcdir@/xbmc/utils
+INCLUDES += -I@abs_top_srcdir@/xbmc/guilib
+INCLUDES += -I@abs_top_srcdir@/xbmc/cores
+INCLUDES += -I@abs_top_srcdir@/xbmc/cores/VideoPlayer
+INCLUDES += -I@abs_top_srcdir@/xbmc/cores/VideoPlayer/Codecs/ffmpeg
+
+OSSLIBDIR=0
+-include /etc/oss.conf
+ifneq (0,${OSSLIBDIR})
+  INCLUDES += -I$(OSSLIBDIR)/include
+  CXXFLAGS += -DOSS4
+endif
+
+CXXFLAGS += -D__STDC_LIMIT_MACROS
+ifeq (@HAVE_SSE@,1)
+  CXXFLAGS += -DHAVE_SSE -msse
+endif
+ifeq (@HAVE_SSE2@,1)
+  CXXFLAGS += -DHAVE_SSE2 -msse2
+endif
+
+
+SRCS  = AEFactory.cpp
+
+SRCS += AESinkFactory.cpp
+SRCS += Sinks/AESinkNULL.cpp
+
+SRCS += Sinks/AESinkPi.cpp
+
+SRCS += AEResampleFactory.cpp
+
+SRCS += Engines/ActiveAE/ActiveAE.cpp
+SRCS += Engines/ActiveAE/ActiveAESink.cpp
+SRCS += Engines/ActiveAE/ActiveAEStream.cpp
+SRCS += Engines/ActiveAE/ActiveAESound.cpp
+SRCS += Engines/ActiveAE/ActiveAEResampleFFMPEG.cpp
+SRCS += Engines/ActiveAE/ActiveAEResamplePi.cpp
+SRCS += Engines/ActiveAE/ActiveAEBuffer.cpp
+SRCS += Engines/ActiveAE/ActiveAEFilter.cpp
+
+ifeq (@USE_ANDROID@,1)
+SRCS += Sinks/AESinkAUDIOTRACK.cpp
+else ifeq ($(findstring ios,@ARCH@),ios)
+SRCS += Sinks/AESinkDARWINIOS.cpp
+else ifeq ($(findstring osx,@ARCH@),osx)
+SRCS += Sinks/AESinkDARWINOSX.cpp
+SRCS += Sinks/osx/AEDeviceEnumerationOSX.cpp
+SRCS += Sinks/osx/CoreAudioChannelLayout.cpp
+SRCS += Sinks/osx/CoreAudioDevice.cpp
+SRCS += Sinks/osx/CoreAudioHardware.cpp
+SRCS += Sinks/osx/CoreAudioHelpers.cpp
+SRCS += Sinks/osx/CoreAudioStream.cpp
+else
+SRCS += Sinks/AESinkALSA.cpp
+SRCS += Sinks/alsa/ALSADeviceMonitor.cpp
+SRCS += Sinks/alsa/ALSAHControlMonitor.cpp
+SRCS += Sinks/AESinkOSS.cpp
+ifeq (@USE_PULSE@,1)
+SRCS += Sinks/AESinkPULSE.cpp
+endif
+endif
+
+SRCS += Engines/ActiveAE/AudioDSPAddons/ActiveAEDSP.cpp
+SRCS += Engines/ActiveAE/AudioDSPAddons/ActiveAEDSPMode.cpp
+SRCS += Engines/ActiveAE/AudioDSPAddons/ActiveAEDSPAddon.cpp
+SRCS += Engines/ActiveAE/AudioDSPAddons/ActiveAEDSPDatabase.cpp
+SRCS += Engines/ActiveAE/AudioDSPAddons/ActiveAEDSPProcess.cpp
+
+SRCS += Utils/AEChannelInfo.cpp
+SRCS += Utils/AEUtil.cpp
+SRCS += Utils/AEStreamInfo.cpp
+SRCS += Utils/AEPackIEC61937.cpp
+SRCS += Utils/AEBitstreamPacker.cpp
+SRCS += Utils/AEELDParser.cpp
+SRCS += Utils/AEDeviceInfo.cpp
+SRCS += Utils/AELimiter.cpp
+
+SRCS += Encoders/AEEncoderFFmpeg.cpp
+
+LIB   = audioengine.a
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/cores/AudioEngine/Sinks/test/Makefile b/xbmc/cores/AudioEngine/Sinks/test/Makefile
new file mode 100644
index 0000000..b37c5f4
--- /dev/null
+++ b/xbmc/cores/AudioEngine/Sinks/test/Makefile
@@ -0,0 +1,9 @@
+SRCS=TestAESinkDARWINOSX.cpp
+
+#move this out of the if block if needed
+LIB=AESinkTest.a
+
+INCLUDES += -I../../../../../lib/gtest/include
+
+include ../../../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/cores/AudioEngine/Utils/AEUtil.cpp b/xbmc/cores/AudioEngine/Utils/AEUtil.cpp
index 463257a..3d8edba 100644
--- a/xbmc/cores/AudioEngine/Utils/AEUtil.cpp
+++ b/xbmc/cores/AudioEngine/Utils/AEUtil.cpp
@@ -21,6 +21,10 @@
   #define __STDC_LIMIT_MACROS
 #endif
 
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+#include "config.h"
+#endif
+
 #include "AEUtil.h"
 #include "utils/log.h"
 #include "utils/TimeUtils.h"
diff --git a/xbmc/cores/DllLoader/Makefile.in b/xbmc/cores/DllLoader/Makefile.in
new file mode 100644
index 0000000..66e6511
--- /dev/null
+++ b/xbmc/cores/DllLoader/Makefile.in
@@ -0,0 +1,23 @@
+CFLAGS   += -DAPI_DEBUG
+CXXFLAGS += -DAPI_DEBUG
+
+SRCS  = coff.cpp
+SRCS += dll.cpp
+SRCS += DllLoader.cpp
+SRCS += DllLoaderContainer.cpp
+SRCS += dll_tracker.cpp
+SRCS += dll_tracker_file.cpp
+SRCS += dll_tracker_library.cpp
+SRCS += dll_util.cpp
+SRCS += LibraryLoader.cpp
+SRCS += mmap_anon.c
+SRCS += SoLoader.cpp
+
+ifneq ($(findstring freebsd,@ARCH@),freebsd)
+SRCS += ldt_keeper.c
+endif
+
+LIB = dllloader.a
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/cores/DllLoader/exports/Makefile.in b/xbmc/cores/DllLoader/exports/Makefile.in
new file mode 100644
index 0000000..db31666
--- /dev/null
+++ b/xbmc/cores/DllLoader/exports/Makefile.in
@@ -0,0 +1,23 @@
+SRCS  = emu_dummy.cpp
+SRCS += emu_kernel32.cpp
+SRCS += emu_msvcrt.cpp
+SRCS += wrapper.c
+
+LIB = exports.a
+
+CLEAN_FILES = wrapper.def
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
+
+wrapper.o : wrapper.c
+	$(CC) $(CFLAGS) $(DEFINES) -c $(INCLUDES) $< -o $@
+
+exports_python_linux.o : exports_python_linux.cpp
+	$(CXX) $(CXXFLAGS) $(DEFINES) -c $(INCLUDES) $< -o $@
+
+wrapper.def : wrapper.o
+	nm wrapper.o | grep __wrap | awk '{printf("%s ", $$3);}' | sed "s/___wrap_/__wrap_/g" | sed "s/__wrap_/-Wl,-wrap,/g" > $@
+ifeq (@USE_ANDROID@,1)
+	echo "-L$(prefix)/lib/dummy-lib@APP_NAME_LC@/ -l@APP_NAME_LC@" >> $@
+endif
diff --git a/xbmc/cores/DllLoader/exports/util/Makefile b/xbmc/cores/DllLoader/exports/util/Makefile
new file mode 100644
index 0000000..0974148
--- /dev/null
+++ b/xbmc/cores/DllLoader/exports/util/Makefile
@@ -0,0 +1,6 @@
+SRCS=EmuFileWrapper.cpp
+
+LIB=exports_utils.a
+
+include ../../../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/cores/ExternalPlayer/Makefile b/xbmc/cores/ExternalPlayer/Makefile
new file mode 100644
index 0000000..bf4823a
--- /dev/null
+++ b/xbmc/cores/ExternalPlayer/Makefile
@@ -0,0 +1,6 @@
+SRCS=ExternalPlayer.cpp
+
+LIB=ExternalPlayer.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/cores/Makefile.in b/xbmc/cores/Makefile.in
new file mode 100644
index 0000000..17feee8
--- /dev/null
+++ b/xbmc/cores/Makefile.in
@@ -0,0 +1,7 @@
+SRCS = FFmpeg.cpp
+SRCS += DataCacheCore.cpp
+
+LIB = cores.a
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/cores/RetroPlayer/Makefile.in b/xbmc/cores/RetroPlayer/Makefile.in
new file mode 100644
index 0000000..976b7c7
--- /dev/null
+++ b/xbmc/cores/RetroPlayer/Makefile.in
@@ -0,0 +1,13 @@
+SRCS=PixelConverter.cpp \
+     RetroPlayer.cpp \
+     RetroPlayerAudio.cpp \
+     RetroPlayerVideo.cpp
+
+ifeq (@CORE_SYSTEM_NAME@,rbpi)
+  SRCS += PixelConverterRBP.cpp
+endif
+
+LIB=retroplayer.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/cores/VideoPlayer/DVDAudio.h b/xbmc/cores/VideoPlayer/DVDAudio.h
index ef0afb0..ed6974b 100644
--- a/xbmc/cores/VideoPlayer/DVDAudio.h
+++ b/xbmc/cores/VideoPlayer/DVDAudio.h
@@ -20,6 +20,9 @@
  *
  */
 
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#endif
 #include "threads/CriticalSection.h"
 #include "PlatformDefs.h"
 
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Audio/DVDAudioCodec.h b/xbmc/cores/VideoPlayer/DVDCodecs/Audio/DVDAudioCodec.h
index 9daa92e..bb698da 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Audio/DVDAudioCodec.h
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Audio/DVDAudioCodec.h
@@ -26,6 +26,10 @@
 #include "cores/VideoPlayer/Process/ProcessInfo.h"
 #include "DVDClock.h"
 
+
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#endif
 #include <vector>
 
 extern "C" {
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Audio/Makefile.in b/xbmc/cores/VideoPlayer/DVDCodecs/Audio/Makefile.in
new file mode 100644
index 0000000..903011e
--- /dev/null
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Audio/Makefile.in
@@ -0,0 +1,12 @@
+INCLUDES+=-I@abs_top_srcdir@/xbmc/cores/VideoPlayer
+
+CXXFLAGS+=-DHAVE_MMX
+
+SRCS  = DVDAudioCodecFFmpeg.cpp
+SRCS += DVDAudioCodecPassthrough.cpp
+
+LIB=Audio.a
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
+
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/DVDCodecs.h b/xbmc/cores/VideoPlayer/DVDCodecs/DVDCodecs.h
index 29a47d4..b8c4d4d 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/DVDCodecs.h
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/DVDCodecs.h
@@ -20,6 +20,10 @@
  *
  */
 
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#endif
+
 #include <string>
 #include <vector>
 #include "cores/VideoPlayer/VideoRenderers/RenderFormats.h"
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Makefile.in b/xbmc/cores/VideoPlayer/DVDCodecs/Makefile.in
new file mode 100644
index 0000000..2f61f56
--- /dev/null
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Makefile.in
@@ -0,0 +1,10 @@
+INCLUDES+=-I@abs_top_srcdir@/xbmc/cores/VideoPlayer
+
+SRCS  = DVDCodecUtils.cpp
+SRCS += DVDFactoryCodec.cpp
+
+LIB=	DVDCodecs.a
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
+
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Overlay/Makefile.in b/xbmc/cores/VideoPlayer/DVDCodecs/Overlay/Makefile.in
new file mode 100644
index 0000000..000f3ef
--- /dev/null
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Overlay/Makefile.in
@@ -0,0 +1,15 @@
+INCLUDES+=-I@abs_top_srcdir@/xbmc/cores/VideoPlayer
+
+SRCS  = DVDOverlayCodec.cpp
+SRCS += DVDOverlayCodecFFmpeg.cpp
+SRCS += DVDOverlayCodecSSA.cpp
+SRCS += DVDOverlayCodecText.cpp
+SRCS += DVDOverlayCodecTX3G.cpp
+SRCS += contrib/cc_decoder.c
+SRCS += contrib/cc_decoder708.cpp
+
+LIB = Overlay.a
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
+
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecFFmpeg.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecFFmpeg.cpp
index 0e85581..47939e3 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecFFmpeg.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecFFmpeg.cpp
@@ -19,6 +19,9 @@
  */
 
 #include "system.h"
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#endif
 #include "DVDVideoCodecFFmpeg.h"
 #include "DVDDemuxers/DVDDemux.h"
 #include "DVDStreamInfo.h"
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecOpenMax.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecOpenMax.cpp
index a0b76fe..a47a397 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecOpenMax.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecOpenMax.cpp
@@ -18,7 +18,9 @@
  *
  */
 
-#if defined(TARGET_WINDOWS)
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#elif defined(TARGET_WINDOWS)
 #include "system.h"
 #endif
 
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/MMALCodec.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/MMALCodec.cpp
index 303c629..b2b54fd 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/MMALCodec.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/MMALCodec.cpp
@@ -18,7 +18,9 @@
  *
  */
 
-#if defined(TARGET_WINDOWS)
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#elif defined(TARGET_WINDOWS)
 #include "system.h"
 #endif
 
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/Makefile.in b/xbmc/cores/VideoPlayer/DVDCodecs/Video/Makefile.in
new file mode 100644
index 0000000..62d44ce
--- /dev/null
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/Makefile.in
@@ -0,0 +1,41 @@
+INCLUDES+=-I@abs_top_srcdir@/xbmc/cores/VideoPlayer
+
+SRCS  = DVDVideoCodec.cpp
+SRCS += DVDVideoCodecFFmpeg.cpp
+SRCS += DVDVideoPPFFmpeg.cpp
+
+ifeq (@USE_VDPAU@,1)
+SRCS += VDPAU.cpp
+endif
+ifeq (@USE_VAAPI@,1)
+SRCS += VAAPI.cpp
+endif
+ifeq ($(findstring osx,@ARCH@),osx)
+SRCS += VTB.cpp
+endif
+ifeq (@USE_OPENMAX@,1)
+SRCS += OpenMax.cpp
+SRCS += OpenMaxVideo.cpp
+SRCS += DVDVideoCodecOpenMax.cpp
+endif
+ifeq (@USE_IMXVPU@,1)
+SRCS += DVDVideoCodecIMX.cpp
+endif
+ifeq (@USE_LIBAMCODEC@,1)
+SRCS += AMLCodec.cpp
+SRCS += DVDVideoCodecAmlogic.cpp
+endif
+
+ifeq (@USE_ANDROID@,1)
+SRCS += DVDVideoCodecAndroidMediaCodec.cpp
+endif
+
+ifeq (@USE_MMAL@,1)
+SRCS += MMALCodec.cpp MMALFFmpeg.cpp
+endif
+
+LIB=Video.a
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
+
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/OpenMax.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/OpenMax.cpp
index a48e60a..ade2990 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/OpenMax.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/OpenMax.cpp
@@ -18,7 +18,9 @@
  *
  */
 
-#if defined(TARGET_WINDOWS)
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#elif defined(TARGET_WINDOWS)
 #include "system.h"
 #endif
 
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/OpenMaxVideo.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/OpenMaxVideo.cpp
index 4b94f25..3d5744b 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/OpenMaxVideo.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/OpenMaxVideo.cpp
@@ -18,7 +18,9 @@
  *
  */
 
-#if defined(TARGET_WINDOWS)
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#elif defined(TARGET_WINDOWS)
 #include "system.h"
 #endif
 
diff --git a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemux.h b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemux.h
index 30d8c9d..24341dc 100644
--- a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemux.h
+++ b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemux.h
@@ -32,6 +32,10 @@ class CDVDInputStream;
 #pragma warning(disable:4244)
 #endif
 
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#endif
+
 extern "C" {
 #include "libavcodec/avcodec.h"
 }
diff --git a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxBXA.h b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxBXA.h
index ccf1720..6c1b272 100644
--- a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxBXA.h
+++ b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxBXA.h
@@ -21,6 +21,10 @@
 
 #include "DVDDemux.h"
 
+#if defined(HAVE_CONFIG_H)
+  #include "config.h"
+#endif
+
 #ifdef TARGET_WINDOWS
 #define __attribute__(dummy_val)
 #pragma pack(push)
diff --git a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxCDDA.h b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxCDDA.h
index f497376..6d443b3 100644
--- a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxCDDA.h
+++ b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxCDDA.h
@@ -26,6 +26,10 @@
 #define __attribute__(dummy_val)
 #endif
 
+#if defined(HAVE_CONFIG_H)
+  #include "config.h"
+#endif
+
 class CDemuxStreamAudioCDDA;
 
 class CDVDDemuxCDDA : public CDVDDemux
diff --git a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxUtils.cpp b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxUtils.cpp
index 66774e4..b4b591a 100644
--- a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxUtils.cpp
+++ b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxUtils.cpp
@@ -18,6 +18,9 @@
  *
  */
 
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#endif
 #include "DVDDemuxUtils.h"
 #include "DVDClock.h"
 #include "utils/log.h"
diff --git a/xbmc/cores/VideoPlayer/DVDDemuxers/Makefile.in b/xbmc/cores/VideoPlayer/DVDDemuxers/Makefile.in
new file mode 100644
index 0000000..e4f8aed
--- /dev/null
+++ b/xbmc/cores/VideoPlayer/DVDDemuxers/Makefile.in
@@ -0,0 +1,18 @@
+INCLUDES+=-I@abs_top_srcdir@/xbmc/cores/VideoPlayer
+
+SRCS  = DemuxMultiSource.cpp
+SRCS += DVDDemux.cpp
+SRCS += DVDDemuxBXA.cpp
+SRCS += DVDDemuxCDDA.cpp
+SRCS += DVDDemuxFFmpeg.cpp
+SRCS += DVDDemuxClient.cpp
+SRCS += DVDDemuxUtils.cpp
+SRCS += DVDDemuxVobsub.cpp
+SRCS += DVDDemuxCC.cpp
+SRCS += DVDFactoryDemuxer.cpp
+
+LIB = DVDDemuxers.a
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
+
diff --git a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDStateSerializer.cpp b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDStateSerializer.cpp
index a76daaa..70cf7af 100644
--- a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDStateSerializer.cpp
+++ b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDStateSerializer.cpp
@@ -18,6 +18,9 @@
  *
  */
 
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#endif
 #ifdef TARGET_WINDOWS
 #include "system.h"
 #endif
diff --git a/xbmc/cores/VideoPlayer/DVDInputStreams/Makefile b/xbmc/cores/VideoPlayer/DVDInputStreams/Makefile
new file mode 100644
index 0000000..2cd0f71
--- /dev/null
+++ b/xbmc/cores/VideoPlayer/DVDInputStreams/Makefile
@@ -0,0 +1,21 @@
+CXXFLAGS += -D__STDC_FORMAT_MACROS \
+          -DENABLE_DVDINPUTSTREAM_STACK \
+
+SRCS=	DVDFactoryInputStream.cpp \
+	DVDInputStream.cpp \
+	DVDInputStreamBluray.cpp \
+	DVDInputStreamFFmpeg.cpp \
+	DVDInputStreamFile.cpp \
+	DVDInputStreamMemory.cpp \
+	DVDInputStreamNavigator.cpp \
+	DVDInputStreamPVRManager.cpp \
+	DVDInputStreamStack.cpp \
+	InputStreamAddon.cpp \
+	InputStreamMultiSource.cpp\
+	DVDStateSerializer.cpp \
+
+LIB=	DVDInputStreams.a
+
+include ../../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
+
diff --git a/xbmc/cores/VideoPlayer/DVDStreamInfo.h b/xbmc/cores/VideoPlayer/DVDStreamInfo.h
index bd4fda7..85e402b 100644
--- a/xbmc/cores/VideoPlayer/DVDStreamInfo.h
+++ b/xbmc/cores/VideoPlayer/DVDStreamInfo.h
@@ -20,6 +20,10 @@
 
 #pragma once
 
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#endif
+
 #include "DVDDemuxers/DVDDemux.h"
 
 extern "C" {
diff --git a/xbmc/cores/VideoPlayer/DVDSubtitles/DllLibass.h b/xbmc/cores/VideoPlayer/DVDSubtitles/DllLibass.h
index 36bac34..b5303fd 100644
--- a/xbmc/cores/VideoPlayer/DVDSubtitles/DllLibass.h
+++ b/xbmc/cores/VideoPlayer/DVDSubtitles/DllLibass.h
@@ -20,6 +20,9 @@
  *
  */
 
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#endif
 extern "C" {
   #include <ass/ass.h>
 }
diff --git a/xbmc/cores/VideoPlayer/DVDSubtitles/Makefile.in b/xbmc/cores/VideoPlayer/DVDSubtitles/Makefile.in
new file mode 100644
index 0000000..9b27337
--- /dev/null
+++ b/xbmc/cores/VideoPlayer/DVDSubtitles/Makefile.in
@@ -0,0 +1,20 @@
+INCLUDES+=-I@abs_top_srcdir@/xbmc/cores/VideoPlayer
+
+SRCS  = DVDFactorySubtitle.cpp
+SRCS += DVDSubtitleLineCollection.cpp
+SRCS += DVDSubtitleParserMicroDVD.cpp
+SRCS += DVDSubtitleParserMPL2.cpp
+SRCS += DVDSubtitleParserSami.cpp
+SRCS += DVDSubtitleParserSSA.cpp
+SRCS += DVDSubtitleParserSubrip.cpp
+SRCS += DVDSubtitleParserVplayer.cpp
+SRCS += DVDSubtitleTagMicroDVD.cpp
+SRCS += DVDSubtitleTagSami.cpp
+SRCS += DVDSubtitlesLibass.cpp
+SRCS += DVDSubtitleStream.cpp
+
+LIB = DVDSubtitles.a
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
+
diff --git a/xbmc/cores/VideoPlayer/Makefile.in b/xbmc/cores/VideoPlayer/Makefile.in
new file mode 100644
index 0000000..1f454e4
--- /dev/null
+++ b/xbmc/cores/VideoPlayer/Makefile.in
@@ -0,0 +1,24 @@
+CXXFLAGS+=-D__STDC_FORMAT_MACROS
+
+SRCS  = DVDAudio.cpp
+SRCS += DVDClock.cpp
+SRCS += DVDDemuxSPU.cpp
+SRCS += DVDFileInfo.cpp
+SRCS += DVDMessage.cpp
+SRCS += DVDMessageQueue.cpp
+SRCS += DVDOverlayContainer.cpp
+SRCS += VideoPlayer.cpp
+SRCS += VideoPlayerAudio.cpp
+SRCS += VideoPlayerSubtitle.cpp
+SRCS += VideoPlayerTeletext.cpp
+SRCS += VideoPlayerVideo.cpp
+SRCS += VideoPlayerRadioRDS.cpp
+SRCS += DVDStreamInfo.cpp
+SRCS += DVDTSCorrection.cpp
+SRCS += Edl.cpp
+
+LIB = VideoPlayer.a
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
+
diff --git a/xbmc/cores/VideoPlayer/Process/Makefile.in b/xbmc/cores/VideoPlayer/Process/Makefile.in
new file mode 100644
index 0000000..6198257
--- /dev/null
+++ b/xbmc/cores/VideoPlayer/Process/Makefile.in
@@ -0,0 +1,18 @@
+#
+# To add new process overrides, add a new subdir corresponding to your platform in overrides/
+# see configure.ac for CORE_SYSTEM_NAME and CORE_SYSTEM_VARIANT for known platforms.
+# If needed add your new platform to configure.ac first.
+#
+
+INCLUDES += -I@abs_top_srcdir@/xbmc/cores/VideoPlayer
+
+OVERRIDES = $(wildcard overrides/@CORE_SYSTEM_NAME@/*.cpp) $(wildcard overrides/@CORE_SYSTEM_VARIANT@/*.cpp)
+ifneq ($(strip $(OVERRIDES)),)
+  CXXFLAGS += -DPLATFORM_OVERRIDE_VP_PROCESSINFO
+endif
+
+SRCS  = ProcessInfo.cpp $(OVERRIDES)
+LIB = Process.a
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/cores/VideoPlayer/VideoPlayerSubtitle.cpp b/xbmc/cores/VideoPlayer/VideoPlayerSubtitle.cpp
index 0fc20c6..7eb525b 100644
--- a/xbmc/cores/VideoPlayer/VideoPlayerSubtitle.cpp
+++ b/xbmc/cores/VideoPlayer/VideoPlayerSubtitle.cpp
@@ -28,6 +28,9 @@
 #include "DVDDemuxers/DVDDemuxPacket.h"
 #include "utils/log.h"
 #include "threads/SingleLock.h"
+#if defined(HAVE_CONFIG_H)
+  #include "config.h"
+#endif
 
 CVideoPlayerSubtitle::CVideoPlayerSubtitle(CDVDOverlayContainer* pOverlayContainer, CProcessInfo &processInfo)
 : IDVDStreamPlayer(processInfo)
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/Makefile.in b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/Makefile.in
new file mode 100644
index 0000000..2f916de
--- /dev/null
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/Makefile.in
@@ -0,0 +1,32 @@
+SRCS=
+
+ifeq (@USE_OPENGL@,1)
+SRCS += RendererVAAPI.cpp
+SRCS += RendererVDPAU.cpp
+SRCS += RendererMediaCodec.cpp
+endif
+
+ifeq (@USE_MMAL@,1)
+SRCS += MMALRenderer.cpp
+endif
+
+ifeq (@USE_OPENGLES@,1)
+SRCS += RendererVTBGLES.cpp
+SRCS += RendererIMX.cpp
+SRCS += RendererOpenMax.cpp
+SRCS += RendererMediaCodec.cpp
+SRCS += RendererMediaCodecSurface.cpp
+endif
+
+ifeq (@USE_LIBAMCODEC@,1)
+SRCS += RendererAML.cpp
+endif
+
+ifeq ($(findstring osx,@ARCH@),osx)
+SRCS += RendererVTBGL.cpp
+endif
+
+LIB=HwDecRender.a
+
+include ../../../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGL.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGL.cpp
index 0887764..1c62dc3 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGL.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGL.cpp
@@ -21,6 +21,9 @@
  *
  */
 #include "system.h"
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#endif
 
 #ifdef HAS_GL
 #include <locale.h>
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.cpp
index 94cac36..0eedc96 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.cpp
@@ -21,6 +21,9 @@
 //#define DEBUG_VERBOSE 1
 
 #include "system.h"
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#endif
 
 #if HAS_GLES == 2
 #include "system_gl.h"
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/Makefile.in b/xbmc/cores/VideoPlayer/VideoRenderers/Makefile.in
new file mode 100644
index 0000000..83547f6
--- /dev/null
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/Makefile.in
@@ -0,0 +1,30 @@
+SRCS  = BaseRenderer.cpp
+SRCS += ColorManager.cpp
+SRCS += OverlayRenderer.cpp
+SRCS += OverlayRendererUtil.cpp
+SRCS += OverlayRendererGUI.cpp
+SRCS += RenderCapture.cpp
+SRCS += RenderManager.cpp
+SRCS += RenderFlags.cpp
+SRCS += DebugRenderer.cpp
+
+ifeq ($(findstring arm,@ARCH@),arm)
+SRCS += yuv2rgb.neon.S
+endif
+
+ifeq (@USE_OPENGL@,1)
+SRCS += LinuxRendererGL.cpp
+SRCS += OverlayRendererGL.cpp
+SRCS += FrameBufferObject.cpp
+endif
+
+ifeq (@USE_OPENGLES@,1)
+SRCS += LinuxRendererGLES.cpp
+SRCS += OverlayRendererGL.cpp
+SRCS += FrameBufferObject.cpp
+endif
+
+LIB = VideoRenderer.a
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(patsubst %.S,,$(SRCS))))
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/Makefile b/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/Makefile
new file mode 100644
index 0000000..286f564
--- /dev/null
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/Makefile
@@ -0,0 +1,6 @@
+SRCS=YUV2RGBShader.cpp VideoFilterShader.cpp ConvolutionKernels.cpp GLSLOutput.cpp
+
+LIB=VideoShaders.a
+
+include ../../../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/cores/omxplayer/Makefile.in b/xbmc/cores/omxplayer/Makefile.in
new file mode 100644
index 0000000..5852cba
--- /dev/null
+++ b/xbmc/cores/omxplayer/Makefile.in
@@ -0,0 +1,18 @@
+CXXFLAGS += -D__STDC_FORMAT_MACROS
+
+SRCS  = OMXHelper.cpp
+SRCS += OMXAudio.cpp
+SRCS += OMXVideo.cpp
+SRCS += OMXAudioCodecOMX.cpp
+SRCS += OMXPlayerAudio.cpp
+SRCS += OMXPlayerVideo.cpp
+SRCS += OMXImage.cpp
+
+LIB = omxplayer.a
+
+@abs_top_srcdir@/system/advancedsettings.xml: $(LIB)
+	cp -f omxplayer_advancedsettings.xml $@
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
+
diff --git a/xbmc/cores/omxplayer/OMXAudio.cpp b/xbmc/cores/omxplayer/OMXAudio.cpp
index c3209ce..671cfb3 100644
--- a/xbmc/cores/omxplayer/OMXAudio.cpp
+++ b/xbmc/cores/omxplayer/OMXAudio.cpp
@@ -20,7 +20,9 @@
  *
  */
 
-#if defined(TARGET_WINDOWS)
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#elif defined(TARGET_WINDOWS)
 #include "system.h"
 #endif
 
diff --git a/xbmc/cores/omxplayer/OMXAudioCodec.h b/xbmc/cores/omxplayer/OMXAudioCodec.h
index fbf80d7..59727e6 100644
--- a/xbmc/cores/omxplayer/OMXAudioCodec.h
+++ b/xbmc/cores/omxplayer/OMXAudioCodec.h
@@ -22,6 +22,9 @@
 
 #include "system.h"
 
+#if (defined HAVE_CONFIG_H) && (!defined WIN32)
+  #include "config.h"
+#endif
 #include <vector>
 #include "libavcodec/avcodec.h"
 
diff --git a/xbmc/cores/omxplayer/OMXImage.cpp b/xbmc/cores/omxplayer/OMXImage.cpp
index adfe0f7..2f2764f 100644
--- a/xbmc/cores/omxplayer/OMXImage.cpp
+++ b/xbmc/cores/omxplayer/OMXImage.cpp
@@ -18,7 +18,9 @@
  *
  */
 
-#if defined(TARGET_WINDOWS)
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#elif defined(TARGET_WINDOWS)
 #include "system.h"
 #endif
 
diff --git a/xbmc/cores/omxplayer/OMXPlayerAudio.cpp b/xbmc/cores/omxplayer/OMXPlayerAudio.cpp
index c39bbb8..1e3c1b2 100644
--- a/xbmc/cores/omxplayer/OMXPlayerAudio.cpp
+++ b/xbmc/cores/omxplayer/OMXPlayerAudio.cpp
@@ -18,7 +18,9 @@
  *
  */
 
-#if defined(TARGET_WINDOWS)
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#elif defined(TARGET_WINDOWS)
 #include "system.h"
 #endif
 
diff --git a/xbmc/cores/omxplayer/OMXPlayerVideo.cpp b/xbmc/cores/omxplayer/OMXPlayerVideo.cpp
index dfa9961..740f2bb 100644
--- a/xbmc/cores/omxplayer/OMXPlayerVideo.cpp
+++ b/xbmc/cores/omxplayer/OMXPlayerVideo.cpp
@@ -18,7 +18,9 @@
  *
  */
 
-#if defined(TARGET_WINDOWS)
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#elif defined(TARGET_WINDOWS)
 #include "system.h"
 #endif
 
diff --git a/xbmc/cores/omxplayer/OMXVideo.cpp b/xbmc/cores/omxplayer/OMXVideo.cpp
index 8b60fc7..97d1b07 100644
--- a/xbmc/cores/omxplayer/OMXVideo.cpp
+++ b/xbmc/cores/omxplayer/OMXVideo.cpp
@@ -18,7 +18,9 @@
  *
  */
 
-#if defined(TARGET_WINDOWS)
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#elif defined(TARGET_WINDOWS)
 #include "system.h"
 #endif
 
diff --git a/xbmc/cores/paplayer/Makefile.in b/xbmc/cores/paplayer/Makefile.in
new file mode 100644
index 0000000..dc9277a
--- /dev/null
+++ b/xbmc/cores/paplayer/Makefile.in
@@ -0,0 +1,18 @@
+ARCH=@ARCH@
+
+.PHONY: compile
+
+ifneq ($(findstring osx,$(ARCH)), osx)
+CFLAGS += -DHAS_ALSA
+CXXFLAGS += -DHAS_ALSA
+endif
+
+SRCS  = AudioDecoder.cpp
+SRCS += CodecFactory.cpp
+SRCS += VideoPlayerCodec.cpp
+SRCS += PAPlayer.cpp
+
+LIB = paplayer.a
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/cores/playercorefactory/Makefile.in b/xbmc/cores/playercorefactory/Makefile.in
new file mode 100644
index 0000000..7e5d71e
--- /dev/null
+++ b/xbmc/cores/playercorefactory/Makefile.in
@@ -0,0 +1,8 @@
+SRCS  = PlayerCoreFactory.cpp
+SRCS += PlayerSelectionRule.cpp
+
+LIB = playercorefactory.a
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
+
diff --git a/xbmc/dbwrappers/Makefile b/xbmc/dbwrappers/Makefile
new file mode 100644
index 0000000..4558aec
--- /dev/null
+++ b/xbmc/dbwrappers/Makefile
@@ -0,0 +1,11 @@
+SRCS=Database.cpp \
+     DatabaseQuery.cpp \
+     dataset.cpp \
+     mysqldataset.cpp \
+     qry_dat.cpp \
+     sqlitedataset.cpp \
+
+LIB=dbwrappers.a
+
+include ../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/dialogs/Makefile b/xbmc/dialogs/Makefile
new file mode 100644
index 0000000..9175e37
--- /dev/null
+++ b/xbmc/dialogs/Makefile
@@ -0,0 +1,35 @@
+SRCS=GUIDialogBoxBase.cpp \
+     GUIDialogBusy.cpp \
+     GUIDialogButtonMenu.cpp \
+     GUIDialogCache.cpp \
+     GUIDialogContextMenu.cpp \
+     GUIDialogExtendedProgressBar.cpp \
+     GUIDialogFavourites.cpp \
+     GUIDialogFileBrowser.cpp \
+     GUIDialogGamepad.cpp \
+     GUIDialogKaiToast.cpp \
+     GUIDialogKeyboardGeneric.cpp \
+     GUIDialogKeyboardTouch.cpp \
+     GUIDialogMediaFilter.cpp \
+     GUIDialogMediaSource.cpp \
+     GUIDialogNumeric.cpp \
+     GUIDialogOK.cpp \
+     GUIDialogPlayEject.cpp \
+     GUIDialogPlayerControls.cpp \
+     GUIDialogPlayerProcessInfo.cpp \
+     GUIDialogProgress.cpp \
+     GUIDialogSeekBar.cpp \
+     GUIDialogSelect.cpp \
+     GUIDialogSimpleMenu.cpp \
+     GUIDialogSlider.cpp \
+     GUIDialogSmartPlaylistEditor.cpp \
+     GUIDialogSmartPlaylistRule.cpp \
+     GUIDialogSubMenu.cpp \
+     GUIDialogTextViewer.cpp \
+     GUIDialogVolumeBar.cpp \
+     GUIDialogYesNo.cpp \
+
+LIB=dialogs.a
+
+include ../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/epg/Makefile b/xbmc/epg/Makefile
new file mode 100644
index 0000000..2249964
--- /dev/null
+++ b/xbmc/epg/Makefile
@@ -0,0 +1,14 @@
+INCLUDES=-I. -I.. -I../../ -I../linux -I../cores -I../../guilib -I../posix -I../utils
+
+SRCS=EpgInfoTag.cpp \
+	EpgSearchFilter.cpp \
+	Epg.cpp \
+	EpgContainer.cpp \
+	EpgDatabase.cpp \
+	GUIEPGGridContainer.cpp \
+	GUIEPGGridContainerModel.cpp
+
+LIB=epg.a
+
+include ../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/events/Makefile b/xbmc/events/Makefile
new file mode 100644
index 0000000..535b312
--- /dev/null
+++ b/xbmc/events/Makefile
@@ -0,0 +1,13 @@
+SRCS=AddonEvent.cpp \
+     AddonManagementEvent.cpp \
+     BaseEvent.cpp \
+     EventLog.cpp \
+     MediaLibraryEvent.cpp \
+     windows/GUIViewStateEventLog.cpp \
+     windows/GUIWindowEventLog.cpp \
+
+LIB=events.a
+
+include ../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
+
diff --git a/xbmc/filesystem/DirectoryFactory.cpp b/xbmc/filesystem/DirectoryFactory.cpp
index 47d172f..662b63b 100644
--- a/xbmc/filesystem/DirectoryFactory.cpp
+++ b/xbmc/filesystem/DirectoryFactory.cpp
@@ -18,6 +18,9 @@
  *
  */
 
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#endif
 #include <stdlib.h>
 #include "network/Network.h"
 #include "system.h"
diff --git a/xbmc/filesystem/FTPParse.cpp b/xbmc/filesystem/FTPParse.cpp
index 8dd9633..cfcc7c6 100644
--- a/xbmc/filesystem/FTPParse.cpp
+++ b/xbmc/filesystem/FTPParse.cpp
@@ -18,6 +18,10 @@
  *
  */
 
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#endif
+
 #include <pcrecpp.h>
 #include <cmath>
 #include "FTPParse.h"
diff --git a/xbmc/filesystem/FileFactory.cpp b/xbmc/filesystem/FileFactory.cpp
index e9d8740..c7760bf 100644
--- a/xbmc/filesystem/FileFactory.cpp
+++ b/xbmc/filesystem/FileFactory.cpp
@@ -18,6 +18,9 @@
  *
  */
 
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#endif
 #include "network/Network.h"
 #include "system.h"
 #include "FileFactory.h"
diff --git a/xbmc/filesystem/Makefile.in b/xbmc/filesystem/Makefile.in
new file mode 100644
index 0000000..14fb7b7
--- /dev/null
+++ b/xbmc/filesystem/Makefile.in
@@ -0,0 +1,120 @@
+CXXFLAGS += -D__STDC_FORMAT_MACROS
+
+SRCS  = AddonsDirectory.cpp
+SRCS += CacheStrategy.cpp
+SRCS += CircularCache.cpp
+SRCS += CDDADirectory.cpp
+SRCS += CDDAFile.cpp
+SRCS += CurlFile.cpp
+SRCS += DAVCommon.cpp
+SRCS += DAVDirectory.cpp
+SRCS += DAVFile.cpp
+SRCS += Directory.cpp
+SRCS += DirectoryCache.cpp
+SRCS += DirectoryFactory.cpp
+SRCS += DirectoryHistory.cpp
+SRCS += DllLibCurl.cpp
+SRCS += EventsDirectory.cpp
+SRCS += FavouritesDirectory.cpp
+SRCS += File.cpp
+SRCS += FileCache.cpp
+SRCS += FileDirectoryFactory.cpp
+SRCS += FileFactory.cpp
+SRCS += FTPDirectory.cpp
+SRCS += FTPParse.cpp
+SRCS += HTTPDirectory.cpp
+SRCS += IDirectory.cpp
+SRCS += IFile.cpp
+SRCS += ImageFile.cpp
+SRCS += iso9660.cpp
+SRCS += ISO9660Directory.cpp
+SRCS += ISOFile.cpp
+SRCS += LibraryDirectory.cpp
+SRCS += MultiPathDirectory.cpp
+SRCS += MultiPathFile.cpp
+SRCS += MusicDatabaseDirectory.cpp
+SRCS += MusicDatabaseFile.cpp
+SRCS += MusicFileDirectory.cpp
+SRCS += MusicSearchDirectory.cpp
+SRCS += OverrideDirectory.cpp
+SRCS += OverrideFile.cpp
+SRCS += PlaylistDirectory.cpp
+SRCS += PlaylistFileDirectory.cpp
+SRCS += PipeFile.cpp
+SRCS += PipesManager.cpp
+SRCS += PluginDirectory.cpp
+SRCS += posix/PosixDirectory.cpp
+SRCS += posix/PosixFile.cpp
+SRCS += PVRDirectory.cpp
+SRCS += ResourceDirectory.cpp
+SRCS += ResourceFile.cpp
+SRCS += RSSDirectory.cpp
+SRCS += SFTPDirectory.cpp
+SRCS += SFTPFile.cpp
+SRCS += ShoutcastFile.cpp
+SRCS += SmartPlaylistDirectory.cpp
+SRCS += SourcesDirectory.cpp
+SRCS += SpecialProtocol.cpp
+SRCS += SpecialProtocolDirectory.cpp
+SRCS += SpecialProtocolFile.cpp
+SRCS += StackDirectory.cpp
+SRCS += udf25.cpp
+SRCS += UDFDirectory.cpp
+SRCS += UDFFile.cpp
+SRCS += VideoDatabaseDirectory.cpp
+SRCS += VirtualDirectory.cpp
+SRCS += XbtDirectory.cpp
+SRCS += XbtFile.cpp
+SRCS += XbtManager.cpp
+SRCS += ZeroconfDirectory.cpp
+SRCS += ZipDirectory.cpp
+SRCS += ZipFile.cpp
+SRCS += ZipManager.cpp
+
+ifeq (@USE_ANDROID@,1)
+SRCS += APKDirectory.cpp
+SRCS += APKFile.cpp
+SRCS += AndroidAppFile.cpp
+SRCS += AndroidAppDirectory.cpp
+endif
+
+ifeq (@HAVE_XBMC_NONFREE@,1)
+SRCS += RarFile.cpp
+SRCS += RarDirectory.cpp
+SRCS += RarManager.cpp
+endif
+
+ifeq (@USE_LIBSMBCLIENT@,1)
+SRCS += SMBFile.cpp
+SRCS += SMBDirectory.cpp
+endif
+
+ifeq (@USE_LIBNFS@,1)
+SRCS += NFSFile.cpp
+SRCS += NFSDirectory.cpp
+endif
+
+ifeq (@HAVE_LIBBLURAY@,1)
+SRCS += BlurayDirectory.cpp
+SRCS += BlurayFile.cpp
+endif
+
+ifeq (@USE_UPNP@,1)
+INCLUDES+=-I@abs_top_srcdir@/lib/libUPnP
+INCLUDES+=-I@abs_top_srcdir@/lib/libUPnP/Platinum/Source/Core
+INCLUDES+=-I@abs_top_srcdir@/lib/libUPnP/Platinum/Source/Platinum
+INCLUDES+=-I@abs_top_srcdir@/lib/libUPnP/Platinum/Source/Devices/MediaConnect
+INCLUDES+=-I@abs_top_srcdir@/lib/libUPnP/Platinum/Source/Devices/MediaRenderer
+INCLUDES+=-I@abs_top_srcdir@/lib/libUPnP/Platinum/Source/Devices/MediaServer
+INCLUDES+=-I@abs_top_srcdir@/lib/libUPnP/Platinum/Source/Extras
+INCLUDES+=-I@abs_top_srcdir@/lib/libUPnP/Neptune/Source/System/Posix
+INCLUDES+=-I@abs_top_srcdir@/lib/libUPnP/Neptune/Source/Core
+SRCS += NptXbmcFile.cpp
+SRCS += UPnPDirectory.cpp
+SRCS += UPnPFile.cpp
+endif
+
+LIB = filesystem.a
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/filesystem/MusicDatabaseDirectory/Makefile b/xbmc/filesystem/MusicDatabaseDirectory/Makefile
new file mode 100644
index 0000000..98d9253
--- /dev/null
+++ b/xbmc/filesystem/MusicDatabaseDirectory/Makefile
@@ -0,0 +1,26 @@
+SRCS=DirectoryNode.cpp \
+     DirectoryNodeAlbum.cpp \
+     DirectoryNodeAlbumCompilations.cpp \
+     DirectoryNodeAlbumCompilationsSongs.cpp \
+     DirectoryNodeAlbumRecentlyAdded.cpp \
+     DirectoryNodeAlbumRecentlyAddedSong.cpp \
+     DirectoryNodeAlbumRecentlyPlayed.cpp \
+     DirectoryNodeAlbumRecentlyPlayedSong.cpp \
+     DirectoryNodeAlbumTop100.cpp \
+     DirectoryNodeAlbumTop100Song.cpp \
+     DirectoryNodeArtist.cpp \
+     DirectoryNodeGrouped.cpp \
+     DirectoryNodeOverview.cpp \
+     DirectoryNodeRoot.cpp \
+     DirectoryNodeSingles.cpp \
+     DirectoryNodeSong.cpp \
+     DirectoryNodeSongTop100.cpp \
+     DirectoryNodeTop100.cpp \
+     DirectoryNodeYearAlbum.cpp \
+     DirectoryNodeYearSong.cpp \
+     QueryParams.cpp \
+
+LIB=musicdatabasedirectory.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/filesystem/VideoDatabaseDirectory/Makefile b/xbmc/filesystem/VideoDatabaseDirectory/Makefile
new file mode 100644
index 0000000..fc2f803
--- /dev/null
+++ b/xbmc/filesystem/VideoDatabaseDirectory/Makefile
@@ -0,0 +1,22 @@
+SRCS=DirectoryNode.cpp \
+     DirectoryNodeEpisodes.cpp \
+     DirectoryNodeGrouped.cpp \
+     DirectoryNodeInProgressTvShows.cpp \
+     DirectoryNodeMoviesOverview.cpp \
+     DirectoryNodeMusicVideosOverview.cpp \
+     DirectoryNodeOverview.cpp \
+     DirectoryNodeRecentlyAddedEpisodes.cpp \
+     DirectoryNodeRecentlyAddedMovies.cpp \
+     DirectoryNodeRecentlyAddedMusicVideos.cpp \
+     DirectoryNodeRoot.cpp \
+     DirectoryNodeSeasons.cpp \
+     DirectoryNodeTitleMovies.cpp \
+     DirectoryNodeTitleMusicVideos.cpp \
+     DirectoryNodeTitleTvShows.cpp \
+     DirectoryNodeTvShowsOverview.cpp \
+     QueryParams.cpp \
+
+LIB=videodatabasedirectory.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/filesystem/posix/PosixFile.cpp b/xbmc/filesystem/posix/PosixFile.cpp
index 5af052b..a7fbe76 100644
--- a/xbmc/filesystem/posix/PosixFile.cpp
+++ b/xbmc/filesystem/posix/PosixFile.cpp
@@ -25,6 +25,11 @@
 #include "URL.h"
 #include "utils/log.h"
 #include "filesystem/File.h"
+
+#ifdef HAVE_CONFIG_H
+#include "config.h" // for HAVE_POSIX_FADVISE
+#endif // HAVE_CONFIG_H
+
 #include <sys/stat.h>
 #include <fcntl.h>
 #include <unistd.h>
diff --git a/xbmc/filesystem/test/Makefile b/xbmc/filesystem/test/Makefile
new file mode 100644
index 0000000..6589d71
--- /dev/null
+++ b/xbmc/filesystem/test/Makefile
@@ -0,0 +1,14 @@
+SRCS= \
+  TestDirectory.cpp \
+  TestFile.cpp \
+  TestFileFactory.cpp \
+  TestNfsFile.cpp \
+  TestRarFile.cpp \
+  TestZipFile.cpp
+
+LIB=filesystemTest.a
+
+INCLUDES += -I../../../lib/gtest/include
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/freebsd/Makefile.in b/xbmc/freebsd/Makefile.in
new file mode 100644
index 0000000..d070cdd
--- /dev/null
+++ b/xbmc/freebsd/Makefile.in
@@ -0,0 +1,8 @@
+CXXFLAGS += -fPIC
+
+SRCS  = FreeBSDGNUReplacements.c
+
+LIB = freebsd.a
+
+include @abs_top_srcdir@/Makefile.include
+
diff --git a/xbmc/games/Makefile b/xbmc/games/Makefile
new file mode 100644
index 0000000..2aad479
--- /dev/null
+++ b/xbmc/games/Makefile
@@ -0,0 +1,7 @@
+SRCS=GameSettings.cpp \
+     GameUtils.cpp \
+
+LIB=games.a
+
+include ../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/games/addons/Makefile b/xbmc/games/addons/Makefile
new file mode 100644
index 0000000..6dd4b03
--- /dev/null
+++ b/xbmc/games/addons/Makefile
@@ -0,0 +1,12 @@
+SRCS=GameClient.cpp \
+     GameClientInput.cpp \
+     GameClientKeyboard.cpp \
+     GameClientMouse.cpp \
+     GameClientProperties.cpp \
+     GameClientTiming.cpp \
+     GameClientTranslator.cpp \
+
+LIB=gameaddons.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/games/addons/playback/Makefile b/xbmc/games/addons/playback/Makefile
new file mode 100644
index 0000000..3a92133
--- /dev/null
+++ b/xbmc/games/addons/playback/Makefile
@@ -0,0 +1,7 @@
+SRCS=GameClientReversiblePlayback.cpp \
+     GameLoop.cpp \
+
+LIB=gameaddonplayback.a
+
+include ../../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/games/addons/savestates/Makefile b/xbmc/games/addons/savestates/Makefile
new file mode 100644
index 0000000..178e6db
--- /dev/null
+++ b/xbmc/games/addons/savestates/Makefile
@@ -0,0 +1,14 @@
+SRCS=BasicMemoryStream.cpp \
+     DeltaPairMemoryStream.cpp \
+     LinearMemoryStream.cpp \
+     Savestate.cpp \
+     SavestateDatabase.cpp \
+     SavestateReader.cpp \
+     SavestateTranslator.cpp \
+     SavestateUtils.cpp \
+     SavestateWriter.cpp \
+
+LIB=gamesavestates.a
+
+include ../../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/games/controllers/Makefile b/xbmc/games/controllers/Makefile
new file mode 100644
index 0000000..52cd56d
--- /dev/null
+++ b/xbmc/games/controllers/Makefile
@@ -0,0 +1,9 @@
+SRCS=Controller.cpp \
+     ControllerFeature.cpp \
+     ControllerLayout.cpp \
+     ControllerTranslator.cpp \
+
+LIB=controllers.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
\ No newline at end of file
diff --git a/xbmc/games/controllers/dialogs/Makefile b/xbmc/games/controllers/dialogs/Makefile
new file mode 100644
index 0000000..18739a2
--- /dev/null
+++ b/xbmc/games/controllers/dialogs/Makefile
@@ -0,0 +1,6 @@
+SRCS=GUIDialogButtonCapture.cpp \
+
+LIB=controllerdialogs.a
+
+include ../../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/games/controllers/guicontrols/Makefile b/xbmc/games/controllers/guicontrols/Makefile
new file mode 100644
index 0000000..c00d858
--- /dev/null
+++ b/xbmc/games/controllers/guicontrols/Makefile
@@ -0,0 +1,11 @@
+SRCS=GUIAnalogStickButton.cpp \
+     GUIControllerButton.cpp \
+     GUIFeatureButton.cpp \
+     GUIFeatureControls.cpp \
+     GUIGameController.cpp \
+     GUIScalarFeatureButton.cpp \
+
+LIB=controllerguicontrols.a
+
+include ../../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/games/controllers/windows/Makefile b/xbmc/games/controllers/windows/Makefile
new file mode 100644
index 0000000..432fae5
--- /dev/null
+++ b/xbmc/games/controllers/windows/Makefile
@@ -0,0 +1,9 @@
+SRCS=GUIConfigurationWizard.cpp \
+     GUIControllerList.cpp \
+     GUIControllerWindow.cpp \
+     GUIFeatureList.cpp \
+
+LIB=controllerwindows.a
+
+include ../../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/games/dialogs/Makefile b/xbmc/games/dialogs/Makefile
new file mode 100644
index 0000000..b544a0e
--- /dev/null
+++ b/xbmc/games/dialogs/Makefile
@@ -0,0 +1,6 @@
+SRCS=GUIDialogSelectGameClient.cpp \
+
+LIB=gamedialogs.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/games/ports/Makefile b/xbmc/games/ports/Makefile
new file mode 100644
index 0000000..4f1829e
--- /dev/null
+++ b/xbmc/games/ports/Makefile
@@ -0,0 +1,7 @@
+SRCS=PortManager.cpp \
+     PortMapper.cpp \
+
+LIB=gameports.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/games/tags/Makefile b/xbmc/games/tags/Makefile
new file mode 100644
index 0000000..7c47526
--- /dev/null
+++ b/xbmc/games/tags/Makefile
@@ -0,0 +1,6 @@
+SRCS=GameInfoTag.cpp \
+
+LIB=gameinfotags.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/games/windows/Makefile b/xbmc/games/windows/Makefile
new file mode 100644
index 0000000..f800574
--- /dev/null
+++ b/xbmc/games/windows/Makefile
@@ -0,0 +1,7 @@
+SRCS=GUIViewStateWindowGames.cpp \
+     GUIWindowGames.cpp \
+
+LIB=gamewindows.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/guilib/Makefile.in b/xbmc/guilib/Makefile.in
new file mode 100644
index 0000000..f4e0189
--- /dev/null
+++ b/xbmc/guilib/Makefile.in
@@ -0,0 +1,97 @@
+SRCS = DDSImage.cpp
+SRCS += DirectXGraphics.cpp
+SRCS += DirtyRegionSolvers.cpp
+SRCS += DirtyRegionTracker.cpp
+SRCS += FFmpegImage.cpp
+SRCS += GraphicContext.cpp
+SRCS += GUIAction.cpp
+SRCS += GUIAudioManager.cpp
+SRCS += GUIBaseContainer.cpp
+SRCS += GUIBorderedImage.cpp
+SRCS += GUIButtonControl.cpp
+SRCS += GUIColorManager.cpp
+SRCS += GUIControl.cpp
+SRCS += GUIControlFactory.cpp
+SRCS += GUIControlGroup.cpp
+SRCS += GUIControlGroupList.cpp
+SRCS += GUIControlProfiler.cpp
+SRCS += GUIDialog.cpp
+SRCS += GUIEditControl.cpp
+SRCS += GUIFadeLabelControl.cpp
+SRCS += GUIFixedListContainer.cpp
+SRCS += GUIFont.cpp
+SRCS += GUIFontCache.cpp
+SRCS += GUIFontManager.cpp
+SRCS += GUIFontTTF.cpp
+SRCS += GUIImage.cpp
+SRCS += GUIIncludes.cpp
+SRCS += GUIInfoTypes.cpp
+SRCS += GUIKeyboardFactory.cpp
+SRCS += GUILabel.cpp
+SRCS += GUILabelControl.cpp
+SRCS += GUIListContainer.cpp
+SRCS += GUIListGroup.cpp
+SRCS += GUIListItem.cpp
+SRCS += GUIListItemLayout.cpp
+SRCS += GUIListLabel.cpp
+SRCS += GUIMessage.cpp
+SRCS += GUIMoverControl.cpp
+SRCS += GUIMultiImage.cpp
+SRCS += GUIPanelContainer.cpp
+SRCS += GUIProgressControl.cpp
+SRCS += GUIRadioButtonControl.cpp
+SRCS += GUIResizeControl.cpp
+SRCS += GUIRenderingControl.cpp
+SRCS += GUIRSSControl.cpp
+SRCS += GUIScrollBarControl.cpp
+SRCS += GUISettingsSliderControl.cpp
+SRCS += GUISliderControl.cpp
+SRCS += GUISpinControl.cpp
+SRCS += GUISpinControlEx.cpp
+SRCS += GUIStaticItem.cpp
+SRCS += GUITextBox.cpp
+SRCS += GUITextLayout.cpp
+SRCS += GUITexture.cpp
+SRCS += GUIToggleButtonControl.cpp
+SRCS += GUIVideoControl.cpp
+SRCS += GUIVisualisationControl.cpp
+SRCS += GUIWindow.cpp
+SRCS += GUIWindowManager.cpp
+SRCS += GUIWrappingListContainer.cpp
+SRCS += imagefactory.cpp
+SRCS += IWindowManagerCallback.cpp
+SRCS += LocalizeStrings.cpp
+SRCS += Resolution.cpp
+SRCS += Shader.cpp
+SRCS += StereoscopicsManager.cpp
+SRCS += Texture.cpp
+SRCS += TextureBundleXBT.cpp
+SRCS += TextureBundle.cpp
+SRCS += TextureManager.cpp
+SRCS += VisibleEffect.cpp
+SRCS += XBTF.cpp
+SRCS += XBTFReader.cpp
+
+ifeq (@USE_OPENGL@,1)
+SRCS += TextureGL.cpp
+SRCS += GUIFontTTFGL.cpp
+SRCS += GUITextureGL.cpp
+SRCS += MatrixGLES.cpp
+endif
+
+ifeq (@USE_OPENGLES@,1)
+SRCS += TextureGL.cpp
+SRCS += TexturePi.cpp
+SRCS += GUIFontTTFGL.cpp
+SRCS += GUITextureGLES.cpp
+SRCS += MatrixGLES.cpp
+SRCS += GUIShader.cpp
+endif
+
+LIB = guilib.a
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
+
+try : try.o TextureBundle.o DirectXGraphics.o GUIFontTTF.o
+	g++ -o try try.o TextureBundle.o DirectXGraphics.o GraphicContext.o GUIIncludes.o ../utils/CriticalSection.o ../XBVideoConfig.o SkinInfo.o ../linux/CriticalSection.o GUIFontTTF.o GUIFontBase.o GUIFontManager.o GUIFont.o ../utils/XMLUtils.o GUIImage.o GUIControl.o TextureManager.o GUIMessage.o ../utils/SingleLock.o VisibleEffect.o GUIWindowManager.o -llzo -lfreetype
diff --git a/xbmc/input/Makefile b/xbmc/input/Makefile
new file mode 100644
index 0000000..3712273
--- /dev/null
+++ b/xbmc/input/Makefile
@@ -0,0 +1,18 @@
+SRCS=ButtonTranslator.cpp \
+     InertialScrollingHandler.cpp \
+     InputCodingTableBaiduPY.cpp \
+     InputCodingTableBasePY.cpp \
+     InputCodingTableFactory.cpp \
+     InputCodingTableKorean.cpp \
+     KeyboardLayout.cpp \
+     KeyboardLayoutManager.cpp \
+     KeyboardStat.cpp \
+     MouseStat.cpp \
+     XBMC_keytable.cpp \
+     InputManager.cpp \
+     Key.cpp
+     
+LIB=input.a
+
+include ../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/input/joysticks/Makefile b/xbmc/input/joysticks/Makefile
new file mode 100644
index 0000000..c7e3a75
--- /dev/null
+++ b/xbmc/input/joysticks/Makefile
@@ -0,0 +1,13 @@
+SRCS=DeadzoneFilter.cpp \
+     DefaultJoystick.cpp \
+     DriverPrimitive.cpp \
+     JoystickEasterEgg.cpp \
+     JoystickMonitor.cpp \
+     JoystickTranslator.cpp \
+     KeymapHandler.cpp \
+     RumbleGenerator.cpp \
+
+LIB=input_joysticks.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/input/joysticks/dialogs/Makefile b/xbmc/input/joysticks/dialogs/Makefile
new file mode 100644
index 0000000..a757754
--- /dev/null
+++ b/xbmc/input/joysticks/dialogs/Makefile
@@ -0,0 +1,6 @@
+SRCS=GUIDialogNewJoystick.cpp \
+
+LIB=input_joystick_dialogs.a
+
+include ../../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/input/joysticks/generic/Makefile b/xbmc/input/joysticks/generic/Makefile
new file mode 100644
index 0000000..189df85
--- /dev/null
+++ b/xbmc/input/joysticks/generic/Makefile
@@ -0,0 +1,9 @@
+SRCS=ButtonMapping.cpp \
+     DriverReceiving.cpp \
+     FeatureHandling.cpp \
+     InputHandling.cpp \
+
+LIB=input_joysticks_generic.a
+
+include ../../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/input/keyboard/Makefile b/xbmc/input/keyboard/Makefile
new file mode 100644
index 0000000..939a34e
--- /dev/null
+++ b/xbmc/input/keyboard/Makefile
@@ -0,0 +1,6 @@
+SRCS=KeyboardEasterEgg.cpp \
+
+LIB=input_keyboard.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/input/keyboard/generic/Makefile b/xbmc/input/keyboard/generic/Makefile
new file mode 100644
index 0000000..3094f26
--- /dev/null
+++ b/xbmc/input/keyboard/generic/Makefile
@@ -0,0 +1,6 @@
+SRCS=JoystickEmulation.cpp \
+
+LIB=input_keyboard_generic.a
+
+include ../../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/input/linux/Makefile.in b/xbmc/input/linux/Makefile.in
new file mode 100644
index 0000000..33885a5
--- /dev/null
+++ b/xbmc/input/linux/Makefile.in
@@ -0,0 +1,7 @@
+SRCS=LIRC.cpp \
+  LinuxInputDevices.cpp
+
+LIB=input_linux.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/input/mouse/Makefile b/xbmc/input/mouse/Makefile
new file mode 100644
index 0000000..62f682d
--- /dev/null
+++ b/xbmc/input/mouse/Makefile
@@ -0,0 +1,6 @@
+SRCS=MouseWindowingButtonMap.cpp \
+
+LIB=input_mouse.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/input/mouse/generic/Makefile b/xbmc/input/mouse/generic/Makefile
new file mode 100644
index 0000000..0170855
--- /dev/null
+++ b/xbmc/input/mouse/generic/Makefile
@@ -0,0 +1,6 @@
+SRCS=MouseInputHandling.cpp \
+
+LIB=input_mouse_generic.a
+
+include ../../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/input/touch/Makefile b/xbmc/input/touch/Makefile
new file mode 100644
index 0000000..6672614
--- /dev/null
+++ b/xbmc/input/touch/Makefile
@@ -0,0 +1,6 @@
+SRCS=ITouchInputHandling.cpp \
+
+LIB=input_touch.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/input/touch/generic/Makefile b/xbmc/input/touch/generic/Makefile
new file mode 100644
index 0000000..5c3d89f
--- /dev/null
+++ b/xbmc/input/touch/generic/Makefile
@@ -0,0 +1,10 @@
+SRCS=GenericTouchActionHandler.cpp \
+     GenericTouchInputHandler.cpp \
+     GenericTouchPinchDetector.cpp \
+     GenericTouchRotateDetector.cpp \
+     GenericTouchSwipeDetector.cpp \
+
+LIB=input_touch_generic.a
+
+include ../../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/interfaces/Makefile.in b/xbmc/interfaces/Makefile.in
new file mode 100644
index 0000000..bde01b1
--- /dev/null
+++ b/xbmc/interfaces/Makefile.in
@@ -0,0 +1,6 @@
+SRCS  = AnnouncementManager.cpp
+
+LIB = interfaces.a
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/interfaces/builtins/Makefile.in b/xbmc/interfaces/builtins/Makefile.in
new file mode 100644
index 0000000..ae0b40c
--- /dev/null
+++ b/xbmc/interfaces/builtins/Makefile.in
@@ -0,0 +1,25 @@
+SRCS  = AddonBuiltins.cpp
+SRCS += ApplicationBuiltins.cpp
+SRCS += Builtins.cpp
+SRCS += CECBuiltins.cpp
+SRCS += GUIBuiltins.cpp
+SRCS += GUIContainerBuiltins.cpp
+SRCS += GUIControlBuiltins.cpp
+SRCS += LibraryBuiltins.cpp
+SRCS += OpticalBuiltins.cpp
+SRCS += PictureBuiltins.cpp
+SRCS += PlayerBuiltins.cpp
+SRCS += ProfileBuiltins.cpp
+SRCS += PVRBuiltins.cpp
+SRCS += SkinBuiltins.cpp
+SRCS += SystemBuiltins.cpp
+SRCS += WeatherBuiltins.cpp
+
+ifeq (@USE_ANDROID@,1)
+SRCS += AndroidBuiltins.cpp
+endif
+
+LIB=builtins.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/interfaces/generic/Makefile b/xbmc/interfaces/generic/Makefile
new file mode 100644
index 0000000..cf04235
--- /dev/null
+++ b/xbmc/interfaces/generic/Makefile
@@ -0,0 +1,8 @@
+SRCS=ILanguageInvoker.cpp \
+     LanguageInvokerThread.cpp \
+     ScriptInvocationManager.cpp \
+
+LIB=interfaces-generic.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/interfaces/info/Makefile b/xbmc/interfaces/info/Makefile
new file mode 100644
index 0000000..ba719c5
--- /dev/null
+++ b/xbmc/interfaces/info/Makefile
@@ -0,0 +1,8 @@
+SRCS=InfoBool.cpp \
+     InfoExpression.cpp \
+     SkinVariable.cpp \
+     
+LIB=info.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/interfaces/json-rpc/Makefile b/xbmc/interfaces/json-rpc/Makefile
new file mode 100644
index 0000000..70746d7
--- /dev/null
+++ b/xbmc/interfaces/json-rpc/Makefile
@@ -0,0 +1,47 @@
+SRCS=AddonsOperations.cpp \
+     ApplicationOperations.cpp \
+     AudioLibrary.cpp \
+     FavouritesOperations.cpp \
+     FileItemHandler.cpp \
+     FileOperations.cpp \
+     GUIOperations.cpp \
+     InputOperations.cpp \
+     JSONRPC.cpp \
+     JSONServiceDescription.cpp \
+     PlayerOperations.cpp \
+     PlaylistOperations.cpp \
+     ProfilesOperations.cpp \
+     PVROperations.cpp \
+     SettingsOperations.cpp \
+     SystemOperations.cpp \
+     TextureOperations.cpp \
+     VideoLibrary.cpp \
+     XBMCOperations.cpp \
+
+LIB=json-rpc.a
+
+GENERATED_JSON = ServiceDescription.h
+GENERATED_ADDON_JSON = ../../../addons/xbmc.json/addon.xml
+JSON_VERSION_SRC = schema/version.txt
+JSON_SRC =  $(JSON_VERSION_SRC) schema/license.txt schema/methods.json schema/types.json schema/notifications.json
+
+all: $(GENERATED_JSON) $(GENERATED_ADDON_JSON) $(LIB)
+
+-include ../../../Makefile.include
+ifeq ($(wildcard $(JSON_BUILDER)),)
+  JSON_BUILDER = $(shell which JsonSchemaBuilder)
+ifeq ($(JSON_BUILDER),)
+  JSON_BUILDER = ../../../tools/depends/native/JsonSchemaBuilder/bin/JsonSchemaBuilder
+endif
+endif
+
+$(GENERATED_JSON): $(JSON_SRC)
+	$(JSON_BUILDER) $(JSON_SRC)
+
+.PHONY: $(notdir $(GENERATED_ADDON_JSON))
+$(notdir $(GENERATED_ADDON_JSON)): $(GENERATED_ADDON_JSON)
+
+$(GENERATED_ADDON_JSON): $(JSON_VERSION_SRC)
+	sed s/@jsonrpc_version@/`cat $(JSON_VERSION_SRC)`/g $@.in > $@
+
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/interfaces/legacy/AddonString.h b/xbmc/interfaces/legacy/AddonString.h
index 35850b1..4150504 100644
--- a/xbmc/interfaces/legacy/AddonString.h
+++ b/xbmc/interfaces/legacy/AddonString.h
@@ -21,6 +21,9 @@
 #pragma once
 
 #include <string>
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
 
 namespace XBMCAddon
 {
diff --git a/xbmc/interfaces/legacy/Makefile b/xbmc/interfaces/legacy/Makefile
new file mode 100644
index 0000000..6f2717f
--- /dev/null
+++ b/xbmc/interfaces/legacy/Makefile
@@ -0,0 +1,37 @@
+INCLUDES=-I../../.. -I. -I../../ -I../../linux -I../../../guilib -I.
+SRCS=	\
+	Addon.cpp \
+	AddonCallback.cpp \
+	AddonClass.cpp \
+	AddonUtils.cpp \
+	CallbackFunction.cpp \
+	CallbackHandler.cpp \
+	Control.cpp \
+	Dialog.cpp \
+	File.cpp \
+	InfoTagMusic.cpp \
+	InfoTagRadioRDS.cpp \
+	InfoTagVideo.cpp \
+	Keyboard.cpp \
+	LanguageHook.cpp \
+	ListItem.cpp \
+	ModuleXbmc.cpp \
+	ModuleXbmcgui.cpp \
+	ModuleXbmcplugin.cpp \
+	ModuleXbmcvfs.cpp \
+	Monitor.cpp \
+	Player.cpp \
+	PlayList.cpp \
+	String.cpp \
+	Window.cpp \
+	WindowDialog.cpp \
+	WindowDialogMixin.cpp \
+	WindowXML.cpp \
+
+LIB=legacy.a
+
+CXXFLAGS+= -DSWIGRUNTIME_DEBUG -DSTATIC_LINKED
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
+
diff --git a/xbmc/interfaces/legacy/ModuleXbmc.cpp b/xbmc/interfaces/legacy/ModuleXbmc.cpp
index a9c6d06..29d7353 100644
--- a/xbmc/interfaces/legacy/ModuleXbmc.cpp
+++ b/xbmc/interfaces/legacy/ModuleXbmc.cpp
@@ -20,6 +20,9 @@
 
 //! @todo Need a uniform way of returning an error status
 
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#endif
 #include "network/Network.h"
 
 #include "ModuleXbmc.h"
diff --git a/xbmc/interfaces/legacy/wsgi/Makefile b/xbmc/interfaces/legacy/wsgi/Makefile
new file mode 100644
index 0000000..999a9fa
--- /dev/null
+++ b/xbmc/interfaces/legacy/wsgi/Makefile
@@ -0,0 +1,12 @@
+SRCS = WsgiErrorStream.cpp \
+       WsgiInputStream.cpp \
+       WsgiResponse.cpp \
+       WsgiResponseBody.cpp \
+
+LIB=legacy-wsgi.a
+
+CXXFLAGS+= -DSWIGRUNTIME_DEBUG -DSTATIC_LINKED
+
+include ../../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
+
diff --git a/xbmc/interfaces/python/AddonPythonInvoker.cpp b/xbmc/interfaces/python/AddonPythonInvoker.cpp
index 669fc98..9f96ce5 100644
--- a/xbmc/interfaces/python/AddonPythonInvoker.cpp
+++ b/xbmc/interfaces/python/AddonPythonInvoker.cpp
@@ -18,6 +18,10 @@
  *
  */
 
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#endif
+
 // python.h should always be included first before any other includes
 #include <Python.h>
 #include <osdefs.h>
diff --git a/xbmc/interfaces/python/ContextItemAddonInvoker.cpp b/xbmc/interfaces/python/ContextItemAddonInvoker.cpp
index a8c3034..e8984e3 100644
--- a/xbmc/interfaces/python/ContextItemAddonInvoker.cpp
+++ b/xbmc/interfaces/python/ContextItemAddonInvoker.cpp
@@ -18,6 +18,10 @@
  *
  */
 
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#endif
+
 // python.h should always be included first before any other includes
 #include <Python.h>
 #include <osdefs.h>
diff --git a/xbmc/interfaces/python/LanguageHook.h b/xbmc/interfaces/python/LanguageHook.h
index f450dc1..263b90e 100644
--- a/xbmc/interfaces/python/LanguageHook.h
+++ b/xbmc/interfaces/python/LanguageHook.h
@@ -20,6 +20,10 @@
 
 #pragma once
 
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#endif
+
 #include <Python.h>
 
 #include "interfaces/legacy/LanguageHook.h"
diff --git a/xbmc/interfaces/python/Makefile.in b/xbmc/interfaces/python/Makefile.in
new file mode 100644
index 0000000..92ddd25
--- /dev/null
+++ b/xbmc/interfaces/python/Makefile.in
@@ -0,0 +1,29 @@
+ifeq (@USE_DOXYGEN@,1)
+DOXYGEN=@DOXYGEN_EXE@
+endif
+
+TOPDIR = @abs_top_srcdir@
+INTERFACES_DIR = @abs_top_srcdir@/xbmc/interfaces
+JAVA=@JAVA_EXE@
+SWIG=@SWIG_EXE@
+LIB=python_binding.a
+all: $(LIB)
+
+include ../../../codegenerator.mk
+
+SRCS =	AddonPythonInvoker.cpp \
+	CallbackHandler.cpp \
+	ContextItemAddonInvoker.cpp \
+	LanguageHook.cpp \
+	PythonInvoker.cpp \
+	XBPython.cpp \
+	swig.cpp \
+	PyContext.cpp \
+	$(GENERATED)
+
+INCLUDES += @PYTHON_CPPFLAGS@
+.SECONDARY: $(GENERATED)
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
+
diff --git a/xbmc/interfaces/python/PythonInvoker.cpp b/xbmc/interfaces/python/PythonInvoker.cpp
index b07ed79..68fcfc2 100644
--- a/xbmc/interfaces/python/PythonInvoker.cpp
+++ b/xbmc/interfaces/python/PythonInvoker.cpp
@@ -18,6 +18,10 @@
  *
  */
 
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#endif
+
 // python.h should always be included first before any other includes
 #include <Python.h>
 #include <osdefs.h>
diff --git a/xbmc/interfaces/python/XBPython.cpp b/xbmc/interfaces/python/XBPython.cpp
index e55e336..ff4ed7d 100644
--- a/xbmc/interfaces/python/XBPython.cpp
+++ b/xbmc/interfaces/python/XBPython.cpp
@@ -18,6 +18,10 @@
  *
  */
 
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#endif
+
 // python.h should always be included first before any other includes
 #include <Python.h>
 
diff --git a/xbmc/interfaces/python/preamble.h b/xbmc/interfaces/python/preamble.h
index 4d5597d..cb91274 100644
--- a/xbmc/interfaces/python/preamble.h
+++ b/xbmc/interfaces/python/preamble.h
@@ -20,6 +20,10 @@
 
 #pragma once
 
+#if (defined HAVE_CONFIG_H) && (!defined WIN32)
+  #include "config.h"
+#endif
+
 #ifdef SWIGPYTHON
 
 #include <Python.h>
diff --git a/xbmc/interfaces/python/test/Makefile.in b/xbmc/interfaces/python/test/Makefile.in
new file mode 100644
index 0000000..f86e7da
--- /dev/null
+++ b/xbmc/interfaces/python/test/Makefile.in
@@ -0,0 +1,10 @@
+SRCS=	\
+	TestSwig.cpp
+
+LIB=pythonSwigTest.a
+
+INCLUDES += -I../../../../lib/gtest/include
+INCLUDES += @PYTHON_CPPFLAGS@
+
+include ../../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/linux/DllBCM.h b/xbmc/linux/DllBCM.h
index d3d47de..9c7e293 100644
--- a/xbmc/linux/DllBCM.h
+++ b/xbmc/linux/DllBCM.h
@@ -21,6 +21,9 @@
 
 #if defined(TARGET_RASPBERRY_PI)
 
+#if (defined HAVE_CONFIG_H) && (!defined WIN32)
+  #include "config.h"
+#endif
 #ifndef __GNUC__
 #pragma warning(push)
 #pragma warning(disable:4244)
diff --git a/xbmc/linux/DllOMX.h b/xbmc/linux/DllOMX.h
index bcecb3d..03796c1 100644
--- a/xbmc/linux/DllOMX.h
+++ b/xbmc/linux/DllOMX.h
@@ -21,6 +21,9 @@
 
 #if defined(HAVE_OMXLIB)
 
+#if (defined HAVE_CONFIG_H) && (!defined WIN32)
+  #include "config.h"
+#endif
 #ifndef __GNUC__
 #pragma warning(push)
 #pragma warning(disable:4244)
diff --git a/xbmc/linux/Makefile.in b/xbmc/linux/Makefile.in
new file mode 100644
index 0000000..0cf90d1
--- /dev/null
+++ b/xbmc/linux/Makefile.in
@@ -0,0 +1,28 @@
+CXXFLAGS += -fPIC
+
+SRCS  = ConvUtils.cpp
+SRCS += DBusUtil.cpp
+SRCS += DBusMessage.cpp
+SRCS += DBusReserve.cpp
+SRCS += FDEventMonitor.cpp
+SRCS += LinuxResourceCounter.cpp
+SRCS += LinuxTimezone.cpp
+SRCS += PosixMountProvider.cpp
+SRCS += XFileUtils.cpp
+SRCS += XHandle.cpp
+SRCS += XMemUtils.cpp
+SRCS += XTimeUtils.cpp
+
+SRCS += RBP.cpp
+
+SRCS += $(wildcard @CORE_SYSTEM_VARIANT@/*.cpp)
+
+ifeq (@USE_OMXLIB@,1)
+SRCS += OMXClock.cpp
+SRCS += OMXCore.cpp
+endif
+
+LIB = linux.a
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/linux/OMXClock.cpp b/xbmc/linux/OMXClock.cpp
index 0b6dfc3..c4b3e58 100644
--- a/xbmc/linux/OMXClock.cpp
+++ b/xbmc/linux/OMXClock.cpp
@@ -18,7 +18,9 @@
  *
  */
 
-#if defined(TARGET_WINDOWS)
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#elif defined(TARGET_WINDOWS)
 #include "system.h"
 #endif
 
diff --git a/xbmc/linux/OMXCore.cpp b/xbmc/linux/OMXCore.cpp
index 90f246b..0e1f4df 100644
--- a/xbmc/linux/OMXCore.cpp
+++ b/xbmc/linux/OMXCore.cpp
@@ -18,7 +18,9 @@
  *
  */
 
-#if defined(TARGET_WINDOWS)
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#elif defined(TARGET_WINDOWS)
 #include "system.h"
 #endif
 
diff --git a/xbmc/linux/RBP.h b/xbmc/linux/RBP.h
index 983003b..1ea20aa 100644
--- a/xbmc/linux/RBP.h
+++ b/xbmc/linux/RBP.h
@@ -29,7 +29,8 @@
 #define HAVE_VMCS_CONFIG
 #endif
 
-#if !defined(TARGET_WINDOWS)
+#if defined(HAVE_CONFIG_H) && !defined(TARGET_WINDOWS)
+#include "config.h"
 #define DECLARE_UNUSED(a,b) a __attribute__((unused)) b;
 #endif
 
diff --git a/xbmc/linux/sse4/Makefile.in b/xbmc/linux/sse4/Makefile.in
new file mode 100644
index 0000000..fdf95ed
--- /dev/null
+++ b/xbmc/linux/sse4/Makefile.in
@@ -0,0 +1,20 @@
+ARCH=@ARCH@
+DEFINES+=
+CXXFLAGS=-fPIC -msse4.1
+LIBNAME=libsse4
+OBJS=CopyFrame.o
+
+LIB_SHARED=@abs_top_srcdir@/system/$(LIBNAME)-$(ARCH).so
+
+all: $(LIB_SHARED)
+
+$(LIB_SHARED): $(OBJS)
+	$(CXX) $(CXXFLAGS) $(LDFLAGS) -shared -o $(LIB_SHARED) $(OBJS)
+
+CLEAN_FILES = \
+	$(LIB_SHARED) \
+
+DISTCLEAN_FILES= \
+	Makefile \
+
+include ../../../Makefile.include
diff --git a/xbmc/listproviders/Makefile b/xbmc/listproviders/Makefile
new file mode 100644
index 0000000..f0f66a2
--- /dev/null
+++ b/xbmc/listproviders/Makefile
@@ -0,0 +1,8 @@
+SRCS  = DirectoryProvider.cpp
+SRCS += IListProvider.cpp
+SRCS += StaticProvider.cpp
+     
+LIB=listproviders.a
+
+include ../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/media/Makefile b/xbmc/media/Makefile
new file mode 100644
index 0000000..e00345f
--- /dev/null
+++ b/xbmc/media/Makefile
@@ -0,0 +1,6 @@
+SRCS=MediaType.cpp \
+
+LIB=media.a
+
+include ../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/messaging/Makefile.in b/xbmc/messaging/Makefile.in
new file mode 100644
index 0000000..0d369c4
--- /dev/null
+++ b/xbmc/messaging/Makefile.in
@@ -0,0 +1,7 @@
+SRCS = ApplicationMessenger.cpp
+
+LIB = messaging.a
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %c,%.P,$(patsubst %.S,,$(SRCS))))
+
diff --git a/xbmc/messaging/helpers/Makefile.in b/xbmc/messaging/helpers/Makefile.in
new file mode 100644
index 0000000..e319402
--- /dev/null
+++ b/xbmc/messaging/helpers/Makefile.in
@@ -0,0 +1,6 @@
+SRCS = DialogHelper.cpp
+
+LIB = messagingHelpers.a
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %c,%.P,$(patsubst %.S,,$(SRCS))))
diff --git a/xbmc/music/Makefile b/xbmc/music/Makefile
new file mode 100644
index 0000000..aabca8d
--- /dev/null
+++ b/xbmc/music/Makefile
@@ -0,0 +1,15 @@
+SRCS=Album.cpp \
+     Artist.cpp \
+     ContextMenus.cpp \
+     GUIViewStateMusic.cpp \
+     MusicDatabase.cpp \
+     MusicDbUrl.cpp \
+     MusicInfoLoader.cpp \
+     MusicThumbLoader.cpp \
+     Song.cpp \
+     CueInfoLoader.cpp \
+
+LIB=music.a
+
+include ../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/music/dialogs/Makefile b/xbmc/music/dialogs/Makefile
new file mode 100644
index 0000000..ce91ca05
--- /dev/null
+++ b/xbmc/music/dialogs/Makefile
@@ -0,0 +1,9 @@
+SRCS=GUIDialogMusicInfo.cpp \
+     GUIDialogMusicOSD.cpp \
+     GUIDialogSongInfo.cpp \
+     GUIDialogVisualisationPresetList.cpp \
+
+LIB=musicdialogs.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/music/infoscanner/Makefile b/xbmc/music/infoscanner/Makefile
new file mode 100644
index 0000000..decb35c
--- /dev/null
+++ b/xbmc/music/infoscanner/Makefile
@@ -0,0 +1,9 @@
+SRCS=MusicAlbumInfo.cpp \
+     MusicArtistInfo.cpp \
+     MusicInfoScanner.cpp \
+     MusicInfoScraper.cpp \
+
+LIB=musicscanner.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/music/tags/Makefile b/xbmc/music/tags/Makefile
new file mode 100644
index 0000000..1c89a4b
--- /dev/null
+++ b/xbmc/music/tags/Makefile
@@ -0,0 +1,15 @@
+SRCS=\
+     MusicInfoTag.cpp \
+     MusicInfoTagLoaderCDDA.cpp \
+     MusicInfoTagLoaderDatabase.cpp \
+     MusicInfoTagLoaderFactory.cpp \
+     MusicInfoTagLoaderFFmpeg.cpp \
+     MusicInfoTagLoaderShn.cpp \
+     TagLoaderTagLib.cpp \
+     TagLibVFSStream.cpp \
+     ReplayGain.cpp \
+
+LIB=musictags.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/music/tags/test/Makefile b/xbmc/music/tags/test/Makefile
new file mode 100644
index 0000000..615b858
--- /dev/null
+++ b/xbmc/music/tags/test/Makefile
@@ -0,0 +1,9 @@
+SRCS= \
+  TestTagLoaderTagLib.cpp
+
+LIB=tagsTest.a
+
+INCLUDES += -I../../../../lib/gtest/include
+
+include ../../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/music/windows/Makefile b/xbmc/music/windows/Makefile
new file mode 100644
index 0000000..acdeea2
--- /dev/null
+++ b/xbmc/music/windows/Makefile
@@ -0,0 +1,11 @@
+SRCS=GUIWindowMusicBase.cpp \
+     GUIWindowMusicNav.cpp \
+     GUIWindowMusicPlaylist.cpp \
+     GUIWindowMusicPlaylistEditor.cpp \
+     GUIWindowVisualisation.cpp \
+     MusicFileItemListModifier.cpp \
+
+LIB=musicwindows.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/network/Makefile.in b/xbmc/network/Makefile.in
new file mode 100644
index 0000000..c80651c
--- /dev/null
+++ b/xbmc/network/Makefile.in
@@ -0,0 +1,29 @@
+SRCS  = cddb.cpp \
+        DNSNameCache.cpp \
+        EventClient.cpp \
+        EventPacket.cpp \
+        EventServer.cpp \
+        GUIDialogAccessPoints.cpp \
+        GUIDialogNetworkSetup.cpp \
+        Network.cpp \
+        NetworkServices.cpp \
+        Socket.cpp \
+        TCPServer.cpp \
+        UdpClient.cpp \
+        WakeOnAccess.cpp \
+        WebServer.cpp \
+        ZeroconfBrowser.cpp \
+        Zeroconf.cpp \
+
+ifeq (@USE_AIRPLAY@, 1)
+SRCS += AirPlayServer.cpp
+endif
+
+ifeq (@USE_AIRTUNES@, 1)
+SRCS += AirTunesServer.cpp
+endif
+
+LIB = network.a
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/network/WebServer.cpp b/xbmc/network/WebServer.cpp
index 6e70d3e..779ca70 100644
--- a/xbmc/network/WebServer.cpp
+++ b/xbmc/network/WebServer.cpp
@@ -18,6 +18,10 @@
  *
  */
 
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#endif
+
 #include "WebServer.h"
 
 #ifdef HAS_WEB_SERVER
diff --git a/xbmc/network/dacp/Makefile b/xbmc/network/dacp/Makefile
new file mode 100644
index 0000000..73f01ab
--- /dev/null
+++ b/xbmc/network/dacp/Makefile
@@ -0,0 +1,6 @@
+SRCS=dacp.cpp
+
+LIB=dacp.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/network/httprequesthandler/Makefile b/xbmc/network/httprequesthandler/Makefile
new file mode 100644
index 0000000..bcc57be
--- /dev/null
+++ b/xbmc/network/httprequesthandler/Makefile
@@ -0,0 +1,15 @@
+SRCS=HTTPFileHandler.cpp \
+     HTTPImageHandler.cpp \
+     HTTPImageTransformationHandler.cpp \
+     HTTPJsonRpcHandler.cpp \
+     HTTPPythonHandler.cpp \
+     HTTPRequestHandlerUtils.cpp \
+     HTTPVfsHandler.cpp \
+     HTTPWebinterfaceAddonsHandler.cpp \
+     HTTPWebinterfaceHandler.cpp \
+     IHTTPRequestHandler.cpp \
+
+LIB=httprequesthandlers.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/network/httprequesthandler/python/Makefile.in b/xbmc/network/httprequesthandler/python/Makefile.in
new file mode 100644
index 0000000..485a09f
--- /dev/null
+++ b/xbmc/network/httprequesthandler/python/Makefile.in
@@ -0,0 +1,9 @@
+SRCS  = HTTPPythonInvoker.cpp \
+        HTTPPythonWsgiInvoker.cpp \
+
+LIB = httprequesthandlers-python.a
+
+INCLUDES += @PYTHON_CPPFLAGS@
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/network/linux/Makefile b/xbmc/network/linux/Makefile
new file mode 100644
index 0000000..207ecda
--- /dev/null
+++ b/xbmc/network/linux/Makefile
@@ -0,0 +1,8 @@
+SRCS=NetworkLinux.cpp \
+     ZeroconfAvahi.cpp \
+     ZeroconfBrowserAvahi.cpp \
+
+LIB=network_linux.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/network/mdns/Makefile b/xbmc/network/mdns/Makefile
new file mode 100644
index 0000000..5ea37cb
--- /dev/null
+++ b/xbmc/network/mdns/Makefile
@@ -0,0 +1,7 @@
+SRCS=ZeroconfMDNS.cpp \
+     ZeroconfBrowserMDNS.cpp \
+
+LIB=mdns.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/network/osx/Makefile b/xbmc/network/osx/Makefile
new file mode 100644
index 0000000..88d71a6
--- /dev/null
+++ b/xbmc/network/osx/Makefile
@@ -0,0 +1,7 @@
+SRCS=ZeroconfBrowserOSX.cpp \
+     ZeroconfOSX.cpp
+
+LIB=network.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/network/test/Makefile b/xbmc/network/test/Makefile
new file mode 100644
index 0000000..446e7e5
--- /dev/null
+++ b/xbmc/network/test/Makefile
@@ -0,0 +1,9 @@
+SRCS= \
+  TestWebServer.cpp
+
+LIB=networkTest.a
+
+INCLUDES += -I../../../lib/gtest/include
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/network/upnp/Makefile.in b/xbmc/network/upnp/Makefile.in
new file mode 100644
index 0000000..0dda664
--- /dev/null
+++ b/xbmc/network/upnp/Makefile.in
@@ -0,0 +1,25 @@
+ifeq (@USE_UPNP@, 1)
+INCLUDES+=-I@abs_top_srcdir@/lib/libUPnP \
+          -I@abs_top_srcdir@/lib/libUPnP/Platinum/Source/Core \
+          -I@abs_top_srcdir@/lib/libUPnP/Platinum/Source/Platinum \
+          -I@abs_top_srcdir@/lib/libUPnP/Platinum/Source/Devices/MediaConnect \
+          -I@abs_top_srcdir@/lib/libUPnP/Platinum/Source/Devices/MediaRenderer \
+          -I@abs_top_srcdir@/lib/libUPnP/Platinum/Source/Devices/MediaServer \
+          -I@abs_top_srcdir@/lib/libUPnP/Platinum/Source/Extras \
+          -I@abs_top_srcdir@/lib/libUPnP/Neptune/Source/System/Posix \
+          -I@abs_top_srcdir@/lib/libUPnP/Neptune/Source/Core
+
+SRCS= UPnP.cpp \
+      UPnPInternal.cpp \
+      UPnPPlayer.cpp \
+      UPnPRenderer.cpp \
+      UPnPServer.cpp \
+      UPnPSettings.cpp \
+
+LIB=upnp.a
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
+
+endif
+
diff --git a/xbmc/network/websocket/Makefile b/xbmc/network/websocket/Makefile
new file mode 100644
index 0000000..f3d9d41
--- /dev/null
+++ b/xbmc/network/websocket/Makefile
@@ -0,0 +1,9 @@
+SRCS=WebSocket.cpp \
+     WebSocketManager.cpp \
+     WebSocketV8.cpp \
+     WebSocketV13.cpp \
+
+LIB=websocket.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/peripherals/Makefile b/xbmc/peripherals/Makefile
new file mode 100644
index 0000000..bb32603
--- /dev/null
+++ b/xbmc/peripherals/Makefile
@@ -0,0 +1,8 @@
+SRCS=EventScanner.cpp \
+     EventScanRate.cpp \
+     Peripherals.cpp \
+
+LIB=peripherals.a
+
+include ../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/peripherals/addons/Makefile.in b/xbmc/peripherals/addons/Makefile.in
new file mode 100644
index 0000000..c264ca4
--- /dev/null
+++ b/xbmc/peripherals/addons/Makefile.in
@@ -0,0 +1,10 @@
+SRCS  = AddonButtonMap.cpp
+SRCS += AddonButtonMapping.cpp
+SRCS += AddonInputHandling.cpp
+SRCS += PeripheralAddon.cpp
+SRCS += PeripheralAddonTranslator.cpp
+
+LIB = peripheral-addons.a
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/peripherals/bus/Makefile.in b/xbmc/peripherals/bus/Makefile.in
new file mode 100644
index 0000000..61a21c4
--- /dev/null
+++ b/xbmc/peripherals/bus/Makefile.in
@@ -0,0 +1,29 @@
+SRCS  = PeripheralBus.cpp
+SRCS += virtual/PeripheralBusAddon.cpp
+SRCS += virtual/PeripheralBusApplication.cpp
+
+ifeq (@USE_ANDROID@,1)
+SRCS += android/AndroidJoystickState.cpp
+SRCS += android/PeripheralBusAndroid.cpp
+endif
+
+ifeq (@USE_LIBUDEV@,1)
+SRCS += linux/PeripheralBusUSBLibUdev.cpp
+endif
+
+ifeq (@USE_LIBUSB@,1)
+SRCS += linux/PeripheralBusUSBLibUSB.cpp
+endif
+
+ifeq ($(findstring osx,@ARCH@),osx)
+SRCS += osx/PeripheralBusUSB.cpp
+endif
+
+ifeq (@USE_LIBCEC@,1)
+SRCS += virtual/PeripheralBusCEC.cpp
+endif
+
+LIB = peripheral-bus.a
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/peripherals/devices/Makefile.in b/xbmc/peripherals/devices/Makefile.in
new file mode 100644
index 0000000..a0b0f25
--- /dev/null
+++ b/xbmc/peripherals/devices/Makefile.in
@@ -0,0 +1,19 @@
+SRCS  = Peripheral.cpp
+SRCS += PeripheralBluetooth.cpp
+SRCS += PeripheralDisk.cpp
+SRCS += PeripheralHID.cpp
+SRCS += PeripheralImon.cpp
+SRCS += PeripheralJoystick.cpp
+SRCS += PeripheralJoystickEmulation.cpp
+SRCS += PeripheralNIC.cpp
+SRCS += PeripheralNyxboard.cpp
+SRCS += PeripheralTuner.cpp
+
+ifeq (@USE_LIBCEC@,1)
+SRCS += PeripheralCecAdapter.cpp
+endif
+
+LIB = peripheral-devices.a
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/peripherals/dialogs/Makefile b/xbmc/peripherals/dialogs/Makefile
new file mode 100644
index 0000000..91f9289
--- /dev/null
+++ b/xbmc/peripherals/dialogs/Makefile
@@ -0,0 +1,6 @@
+SRCS=GUIDialogPeripheralSettings.cpp
+
+LIB=peripheral-dialogs.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/pictures/Makefile b/xbmc/pictures/Makefile
new file mode 100644
index 0000000..9612753
--- /dev/null
+++ b/xbmc/pictures/Makefile
@@ -0,0 +1,15 @@
+SRCS=GUIDialogPictureInfo.cpp \
+     GUIViewStatePictures.cpp \
+     GUIWindowPictures.cpp \
+     GUIWindowSlideShow.cpp \
+     Picture.cpp \
+     PictureInfoLoader.cpp \
+     PictureInfoTag.cpp \
+     PictureScalingAlgorithm.cpp \
+     PictureThumbLoader.cpp \
+     SlideShowPicture.cpp \
+     
+LIB=pictures.a
+
+include ../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/pictures/Picture.cpp b/xbmc/pictures/Picture.cpp
index 2b02230..f8381dc 100644
--- a/xbmc/pictures/Picture.cpp
+++ b/xbmc/pictures/Picture.cpp
@@ -19,6 +19,9 @@
  */
 
 #include "system.h"
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#endif
 
 #include <algorithm>
 
diff --git a/xbmc/platform/Makefile.in b/xbmc/platform/Makefile.in
new file mode 100644
index 0000000..14ee006
--- /dev/null
+++ b/xbmc/platform/Makefile.in
@@ -0,0 +1,31 @@
+.SUFFIXES : .m .mm .cpp
+
+OVERRIDES = $(wildcard overrides/@CORE_SYSTEM_NAME@/*.cpp) $(wildcard overrides/@CORE_SYSTEM_VARIANT@/*.cpp)
+ifneq ($(strip $(OVERRIDES)),)
+  CXXFLAGS += -DPLATFORM_OVERRIDE
+endif
+  
+SRCS = posix/MessagePrinter.cpp
+SRCS += Platform.cpp
+SRCS += xbmc.cpp
+SRCS += XbmcContext.cpp
+SRCS += $(OVERRIDES)
+
+ifeq ($(findstring osx,@ARCH@), osx)
+SRCS += darwin/AutoPool.mm
+SRCS += darwin/DarwinUtils.mm
+SRCS += darwin/DictionaryUtils.mm
+SRCS += darwin/DarwinNSUserDefaults.mm
+SRCS += darwin/PlatformDarwin.cpp
+SRCS += darwin/osx/HotKeyController.m
+SRCS += darwin/OSXGNUReplacements.c
+SRCS += darwin/osx/OSXTextInputResponder.mm
+SRCS += darwin/osx/smc.c
+SRCS += darwin/osx/XBMCHelper.m
+SRCS += darwin/osx/CocoaInterface.mm
+endif
+
+LIB=platform.a
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.m,%.P,$(patsubst %.mm,%.P,$(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))))
diff --git a/xbmc/platform/android/activity/DllGraphicBuffer.h b/xbmc/platform/android/activity/DllGraphicBuffer.h
index a3dd50d..4e4d98a 100644
--- a/xbmc/platform/android/activity/DllGraphicBuffer.h
+++ b/xbmc/platform/android/activity/DllGraphicBuffer.h
@@ -20,6 +20,9 @@
  *
  */
 
+#if (defined HAVE_CONFIG_H) && (!defined WIN32)
+  #include "config.h"
+#endif
 #include "DynamicDll.h"
 #include "GraphicBuffer.h"
 class DllGraphicBufferInterface
diff --git a/xbmc/platform/android/activity/Makefile.in b/xbmc/platform/android/activity/Makefile.in
new file mode 100644
index 0000000..9c791ea
--- /dev/null
+++ b/xbmc/platform/android/activity/Makefile.in
@@ -0,0 +1,35 @@
+include @abs_top_srcdir@/tools/depends/Makefile.include
+
+GLUEPATH   = $(NDKROOT)/sources/android/native_app_glue
+APP_GLUE   = android_native_app_glue.o
+
+CPUPATH    = $(NDKROOT)/sources/android/cpufeatures
+CPU_OBJ    = cpu-features.o
+
+INCLUDES += -I$(GLUEPATH) -I$(CPUPATH)
+
+SRCS       = android_main.cpp
+SRCS      += AndroidFeatures.cpp
+SRCS      += AndroidKey.cpp
+SRCS      += AndroidTouch.cpp
+SRCS      += AndroidMouse.cpp
+SRCS      += AndroidJoyStick.cpp
+SRCS      += GraphicBuffer.cpp
+SRCS      += EventLoop.cpp
+SRCS      += XBMCApp.cpp
+SRCS      += JNIMainActivity.cpp
+
+OBJS      += $(APP_GLUE) $(CPU_OBJ)
+
+LIB        = activity.a
+
+$(LIB): $(OBJS)
+
+$(APP_GLUE):
+	$(CC) -c -I$(GLUEPATH) -o $@ $(GLUEPATH)/$(APP_GLUE:.o=.c)
+
+$(CPU_OBJ):
+	$(CC) -c -I$(CPUPATH) -o $@ $(CPUPATH)/$(CPU_OBJ:.o=.c)
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/platform/android/bionic_supplement/Makefile b/xbmc/platform/android/bionic_supplement/Makefile
new file mode 100644
index 0000000..d35fe22
--- /dev/null
+++ b/xbmc/platform/android/bionic_supplement/Makefile
@@ -0,0 +1,6 @@
+SRCS     = rand_r.c
+SRCS    += getdelim.c
+LIB      = bionic_supplement.a
+
+include ../../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/platform/android/jni/Makefile.in b/xbmc/platform/android/jni/Makefile.in
new file mode 100644
index 0000000..4aad335
--- /dev/null
+++ b/xbmc/platform/android/jni/Makefile.in
@@ -0,0 +1,91 @@
+SRCS      += JNIBase.cpp
+SRCS      += JNIThreading.cpp
+SRCS      += Context.cpp
+SRCS      += BroadcastReceiver.cpp
+SRCS      += Intent.cpp
+SRCS      += PackageManager.cpp
+SRCS      += AudioFormat.cpp
+SRCS      += AudioManager.cpp
+SRCS      += AudioTrack.cpp
+SRCS      += PowerManager.cpp
+SRCS      += WakeLock.cpp
+SRCS      += Environment.cpp
+SRCS      += File.cpp
+SRCS      += IntentFilter.cpp
+SRCS      += SystemClock.cpp
+SRCS      += jutils.cpp
+SRCS      += URI.cpp
+SRCS      += WifiInfo.cpp
+SRCS      += WifiManager.cpp
+SRCS      += WifiManagerMulticastLock.cpp
+SRCS      += ScanResult.cpp
+SRCS      += List.cpp
+SRCS      += DhcpInfo.cpp
+SRCS      += ConnectivityManager.cpp
+SRCS      += Enum.cpp
+SRCS      += NetworkInfo.cpp
+SRCS      += WifiConfiguration.cpp
+SRCS      += BitSet.cpp
+SRCS      += ClassLoader.cpp
+SRCS      += StatFs.cpp
+SRCS      += System.cpp
+SRCS      += StorageManager.cpp
+SRCS      += StorageVolume.cpp
+SRCS      += ApplicationInfo.cpp
+SRCS      += BitmapDrawable.cpp
+SRCS      += CharSequence.cpp
+SRCS      += ContentResolver.cpp
+SRCS      += Cursor.cpp
+SRCS      += Buffer.cpp
+SRCS      += ByteBuffer.cpp
+SRCS      += BaseColumns.cpp
+SRCS      += MediaStore.cpp
+SRCS      += Surface.cpp
+SRCS      += MediaCodec.cpp
+SRCS      += MediaCodecBufferInfo.cpp
+SRCS      += MediaCodecCryptoInfo.cpp
+SRCS      += MediaCodecInfo.cpp
+SRCS      += MediaCodecList.cpp
+SRCS      += MediaFormat.cpp
+SRCS      += SurfaceTexture.cpp
+SRCS      += View.cpp
+SRCS      += Window.cpp
+SRCS      += Build.cpp
+SRCS      += KeyCharacterMap.cpp
+SRCS      += Activity.cpp
+SRCS      += SystemProperties.cpp
+SRCS      += Display.cpp
+SRCS      += WindowManager.cpp
+SRCS      += Resources.cpp
+SRCS      += PackageItemInfo.cpp
+SRCS      += DisplayMetrics.cpp
+SRCS      += KeyEvent.cpp
+SRCS      += Notification.cpp
+SRCS      += Settings.cpp
+SRCS      += URIPermission.cpp
+SRCS      += DocumentsContract.cpp
+SRCS      += Document.cpp
+SRCS      += AudioTimestamp.cpp
+SRCS      += ArrayList.cpp
+SRCS      += RecognizerIntent.cpp
+SRCS      += AudioDeviceInfo.cpp
+SRCS      += InputManager.cpp
+SRCS      += Os.cpp
+SRCS      += PlaybackParams.cpp
+SRCS      += MediaTimestamp.cpp
+SRCS      += MediaSync.cpp
+SRCS      += AudioAttributes.cpp
+SRCS      += Image.cpp
+SRCS      += Network.cpp
+SRCS      += LinkProperties.cpp
+SRCS      += LinkAddress.cpp
+SRCS      += RouteInfo.cpp
+SRCS      += InetAddress.cpp
+SRCS      += NetworkInterface.cpp
+SRCS      += Rect.cpp
+
+LIB        = jni.a
+
+CXXFLAGS+=-std=gnu++0x -Wextra
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/platform/android/loader/Makefile.in b/xbmc/platform/android/loader/Makefile.in
new file mode 100644
index 0000000..d2cf65f
--- /dev/null
+++ b/xbmc/platform/android/loader/Makefile.in
@@ -0,0 +1,5 @@
+SRCS     = AndroidDyload.cpp
+LIB      = AndroidDyload.a
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
\ No newline at end of file
diff --git a/xbmc/platform/darwin/OSXGNUReplacements.c b/xbmc/platform/darwin/OSXGNUReplacements.c
index 6ebfd13..f90ae76 100644
--- a/xbmc/platform/darwin/OSXGNUReplacements.c
+++ b/xbmc/platform/darwin/OSXGNUReplacements.c
@@ -17,6 +17,9 @@
  *  <http://www.gnu.org/licenses/>.
  *
  */
+#if HAVE_CONFIG_H
+# include "config.h"
+#endif
 
 #if !defined(HAVE_GNUTLS)
 
diff --git a/xbmc/platform/darwin/osx/Makefile.in b/xbmc/platform/darwin/osx/Makefile.in
new file mode 100644
index 0000000..47873fe
--- /dev/null
+++ b/xbmc/platform/darwin/osx/Makefile.in
@@ -0,0 +1,8 @@
+.SUFFIXES : .mm
+
+SRCS = SDLMain.mm
+
+LIB=sdlmain.a
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.m,%.P,$(patsubst %.mm,%.P,$(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))))
diff --git a/xbmc/platform/posix/Makefile.in b/xbmc/platform/posix/Makefile.in
new file mode 100644
index 0000000..0e6d5e8
--- /dev/null
+++ b/xbmc/platform/posix/Makefile.in
@@ -0,0 +1,8 @@
+.SUFFIXES : .m .mm .cpp
+
+SRCS  = main.cpp
+
+LIB=posix.a
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.mm,%.P,$(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS))))
diff --git a/xbmc/platform/win32/strverscmp.cpp b/xbmc/platform/win32/strverscmp.cpp
index 0206db3..9ebbbb3 100644
--- a/xbmc/platform/win32/strverscmp.cpp
+++ b/xbmc/platform/win32/strverscmp.cpp
@@ -18,6 +18,9 @@ extern "C" {
    along with XBMC; see the file COPYING.  If not, see
    <http://www.gnu.org/licenses/>.
 
+#if HAVE_CONFIG_H
+# include <config.h>
+#endif
 
 #include <string.h>
 #include <ctype.h>
diff --git a/xbmc/playlists/Makefile b/xbmc/playlists/Makefile
new file mode 100644
index 0000000..afa879d
--- /dev/null
+++ b/xbmc/playlists/Makefile
@@ -0,0 +1,15 @@
+SRCS=PlayListB4S.cpp \
+     PlayList.cpp \
+     PlayListFactory.cpp \
+     PlayListM3U.cpp \
+     PlayListPLS.cpp \
+     PlayListURL.cpp \
+     PlayListWPL.cpp \
+     PlayListXML.cpp \
+     SmartPlayList.cpp \
+     SmartPlaylistFileItemListModifier.cpp
+
+LIB=playlists.a
+
+include ../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/powermanagement/Makefile b/xbmc/powermanagement/Makefile
new file mode 100644
index 0000000..a456272
--- /dev/null
+++ b/xbmc/powermanagement/Makefile
@@ -0,0 +1,8 @@
+SRCS=DPMSSupport.cpp \
+     PowerManager.cpp \
+     IPowerSyscall.cpp \
+
+LIB=powermanagement.a
+
+include ../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/powermanagement/android/Makefile b/xbmc/powermanagement/android/Makefile
new file mode 100644
index 0000000..64313a5
--- /dev/null
+++ b/xbmc/powermanagement/android/Makefile
@@ -0,0 +1,6 @@
+SRCS=AndroidPowerSyscall.cpp
+     
+LIB=powermanagement_android.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/powermanagement/linux/Makefile b/xbmc/powermanagement/linux/Makefile
new file mode 100644
index 0000000..e9d95fb
--- /dev/null
+++ b/xbmc/powermanagement/linux/Makefile
@@ -0,0 +1,9 @@
+SRCS=ConsoleDeviceKitPowerSyscall.cpp \
+     ConsoleUPowerSyscall.cpp \
+     UPowerSyscall.cpp \
+     LogindUPowerSyscall.cpp
+
+LIB=powermanagement_linux.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/powermanagement/osx/Makefile b/xbmc/powermanagement/osx/Makefile
new file mode 100644
index 0000000..b394f9c
--- /dev/null
+++ b/xbmc/powermanagement/osx/Makefile
@@ -0,0 +1,6 @@
+SRCS=CocoaPowerSyscall.cpp
+     
+LIB=powermanagement.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/profiles/Makefile b/xbmc/profiles/Makefile
new file mode 100644
index 0000000..27bd070
--- /dev/null
+++ b/xbmc/profiles/Makefile
@@ -0,0 +1,7 @@
+SRCS=Profile.cpp \
+     ProfilesManager.cpp \
+
+LIB=profiles.a
+
+include ../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/profiles/dialogs/Makefile b/xbmc/profiles/dialogs/Makefile
new file mode 100644
index 0000000..ee7f0b9
--- /dev/null
+++ b/xbmc/profiles/dialogs/Makefile
@@ -0,0 +1,7 @@
+SRCS=GUIDialogLockSettings.cpp \
+     GUIDialogProfileSettings.cpp \
+
+LIB=profiles_dialogs.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/profiles/windows/Makefile b/xbmc/profiles/windows/Makefile
new file mode 100644
index 0000000..4b1ddef
--- /dev/null
+++ b/xbmc/profiles/windows/Makefile
@@ -0,0 +1,6 @@
+SRCS=GUIWindowSettingsProfile.cpp \
+
+LIB=profiles_windows.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/programs/Makefile b/xbmc/programs/Makefile
new file mode 100644
index 0000000..5ad35a3
--- /dev/null
+++ b/xbmc/programs/Makefile
@@ -0,0 +1,7 @@
+SRCS=GUIViewStatePrograms.cpp \
+     GUIWindowPrograms.cpp \
+     
+LIB=programs.a
+
+include ../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/pvr/Makefile b/xbmc/pvr/Makefile
new file mode 100644
index 0000000..22ae196
--- /dev/null
+++ b/xbmc/pvr/Makefile
@@ -0,0 +1,13 @@
+SRCS=PVRGUIInfo.cpp \
+     PVRManager.cpp \
+     PVRDatabase.cpp \
+     PVRActionListener.cpp \
+     PVRSettings.cpp \
+     PVRContextMenus.cpp \
+     PVRGUIActions.cpp \
+     PVRItem.cpp
+
+LIB=pvr.a
+
+include ../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/pvr/addons/Makefile b/xbmc/pvr/addons/Makefile
new file mode 100644
index 0000000..867f977
--- /dev/null
+++ b/xbmc/pvr/addons/Makefile
@@ -0,0 +1,6 @@
+SRCS=PVRClients.cpp
+
+LIB=pvraddons.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/pvr/channels/Makefile b/xbmc/pvr/channels/Makefile
new file mode 100644
index 0000000..06a035f
--- /dev/null
+++ b/xbmc/pvr/channels/Makefile
@@ -0,0 +1,11 @@
+SRCS=PVRChannel.cpp \
+     PVRChannelGroup.cpp \
+     PVRChannelGroupInternal.cpp \
+     PVRChannelGroups.cpp \
+     PVRChannelGroupsContainer.cpp \
+     PVRRadioRDSInfoTag.cpp
+
+LIB=pvrchannels.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/pvr/dialogs/Makefile b/xbmc/pvr/dialogs/Makefile
new file mode 100644
index 0000000..b9d33f9
--- /dev/null
+++ b/xbmc/pvr/dialogs/Makefile
@@ -0,0 +1,14 @@
+SRCS=GUIDialogPVRChannelManager.cpp \
+     GUIDialogPVRChannelsOSD.cpp \
+     GUIDialogPVRGroupManager.cpp \
+     GUIDialogPVRGuideInfo.cpp \
+     GUIDialogPVRGuideOSD.cpp \
+     GUIDialogPVRGuideSearch.cpp \
+     GUIDialogPVRRadioRDSInfo.cpp \
+     GUIDialogPVRRecordingInfo.cpp \
+     GUIDialogPVRTimerSettings.cpp
+
+LIB=pvrdialogs.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/pvr/recordings/Makefile b/xbmc/pvr/recordings/Makefile
new file mode 100644
index 0000000..37b51c1
--- /dev/null
+++ b/xbmc/pvr/recordings/Makefile
@@ -0,0 +1,8 @@
+SRCS=PVRRecording.cpp \
+     PVRRecordings.cpp \
+     PVRRecordingsPath.cpp
+
+LIB=pvrrecordings.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/pvr/timers/Makefile b/xbmc/pvr/timers/Makefile
new file mode 100644
index 0000000..6b5476d
--- /dev/null
+++ b/xbmc/pvr/timers/Makefile
@@ -0,0 +1,8 @@
+SRCS=PVRTimerInfoTag.cpp \
+     PVRTimerType.cpp \
+     PVRTimers.cpp
+
+LIB=pvrtimers.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/pvr/windows/Makefile b/xbmc/pvr/windows/Makefile
new file mode 100644
index 0000000..49a3537
--- /dev/null
+++ b/xbmc/pvr/windows/Makefile
@@ -0,0 +1,14 @@
+SRCS=GUIViewStatePVR.cpp \
+     GUIWindowPVRBase.cpp \
+     GUIWindowPVRChannels.cpp \
+     GUIWindowPVRGuide.cpp \
+     GUIWindowPVRRecordings.cpp \
+     GUIWindowPVRSearch.cpp \
+     GUIWindowPVRTimersBase.cpp \
+     GUIWindowPVRTimers.cpp \
+     GUIWindowPVRTimerRules.cpp
+
+LIB=pvrwindows.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/rendering/Makefile b/xbmc/rendering/Makefile
new file mode 100644
index 0000000..545dce7
--- /dev/null
+++ b/xbmc/rendering/Makefile
@@ -0,0 +1,6 @@
+SRCS=RenderSystem.cpp
+     
+LIB=rendering.a
+
+include ../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/rendering/gl/Makefile b/xbmc/rendering/gl/Makefile
new file mode 100644
index 0000000..165897c
--- /dev/null
+++ b/xbmc/rendering/gl/Makefile
@@ -0,0 +1,7 @@
+SRCS=GUIWindowTestPatternGL.cpp \
+     RenderSystemGL.cpp \
+     
+LIB=rendering_gl.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/rendering/gles/Makefile b/xbmc/rendering/gles/Makefile
new file mode 100644
index 0000000..c5bf44c
--- /dev/null
+++ b/xbmc/rendering/gles/Makefile
@@ -0,0 +1,6 @@
+SRCS=RenderSystemGLES.cpp \
+     
+LIB=rendering_gles.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/settings/Makefile b/xbmc/settings/Makefile
new file mode 100644
index 0000000..6722162
--- /dev/null
+++ b/xbmc/settings/Makefile
@@ -0,0 +1,19 @@
+SRCS=AdvancedSettings.cpp \
+     AudioDSPSettings.cpp \
+     DisplaySettings.cpp \
+     MediaSettings.cpp \
+     MediaSourceSettings.cpp \
+     SettingAddon.cpp \
+     SettingConditions.cpp \
+     SettingControl.cpp \
+     SettingCreator.cpp \
+     SettingPath.cpp \
+     Settings.cpp \
+     SettingUtils.cpp \
+     SkinSettings.cpp \
+     VideoSettings.cpp \
+
+LIB=settings.a
+
+include ../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/settings/dialogs/Makefile b/xbmc/settings/dialogs/Makefile
new file mode 100644
index 0000000..101682c
--- /dev/null
+++ b/xbmc/settings/dialogs/Makefile
@@ -0,0 +1,11 @@
+SRCS=GUIDialogAudioDSPManager.cpp \
+     GUIDialogAudioDSPSettings.cpp \
+     GUIDialogContentSettings.cpp \
+     GUIDialogSettingsBase.cpp \
+     GUIDialogSettingsManagerBase.cpp \
+     GUIDialogSettingsManualBase.cpp \
+
+LIB=settings_dialogs.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/settings/lib/Makefile b/xbmc/settings/lib/Makefile
new file mode 100644
index 0000000..c038f12
--- /dev/null
+++ b/xbmc/settings/lib/Makefile
@@ -0,0 +1,15 @@
+SRCS=ISetting.cpp \
+     ISettingControl.cpp \
+     Setting.cpp \
+     SettingCategoryAccess.cpp \
+     SettingConditions.cpp \
+     SettingDependency.cpp \
+     SettingSection.cpp \
+     SettingsManager.cpp \
+     SettingRequirement.cpp \
+     SettingUpdate.cpp \
+
+LIB=settings_lib.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/settings/windows/Makefile b/xbmc/settings/windows/Makefile
new file mode 100644
index 0000000..8f97616
--- /dev/null
+++ b/xbmc/settings/windows/Makefile
@@ -0,0 +1,10 @@
+SRCS=GUIControlSettings.cpp \
+     GUIWindowSettings.cpp \
+     GUIWindowSettingsCategory.cpp \
+     GUIWindowSettingsScreenCalibration.cpp \
+     GUIWindowTestPattern.cpp \
+
+LIB=settings_windows.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/storage/Makefile b/xbmc/storage/Makefile
new file mode 100644
index 0000000..84160c8
--- /dev/null
+++ b/xbmc/storage/Makefile
@@ -0,0 +1,10 @@
+SRCS=AutorunMediaJob.cpp \
+     cdioSupport.cpp \
+     DetectDVDType.cpp \
+     IoSupport.cpp \
+     MediaManager.cpp \
+     
+LIB=storage.a
+
+include ../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/storage/android/Makefile b/xbmc/storage/android/Makefile
new file mode 100644
index 0000000..3899cfc
--- /dev/null
+++ b/xbmc/storage/android/Makefile
@@ -0,0 +1,6 @@
+SRCS=AndroidStorageProvider.cpp
+     
+LIB=storage_android.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/storage/linux/Makefile b/xbmc/storage/linux/Makefile
new file mode 100644
index 0000000..f29763c
--- /dev/null
+++ b/xbmc/storage/linux/Makefile
@@ -0,0 +1,8 @@
+SRCS  = DeviceKitDisksProvider.cpp
+SRCS += UDisksProvider.cpp
+SRCS += UDevProvider.cpp
+     
+LIB = storage_linux.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/storage/osx/Makefile b/xbmc/storage/osx/Makefile
new file mode 100644
index 0000000..ad63d51
--- /dev/null
+++ b/xbmc/storage/osx/Makefile
@@ -0,0 +1,6 @@
+SRCS=DarwinStorageProvider.cpp
+     
+LIB=storage.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/system.h b/xbmc/system.h
index 4760dab..a7452bd 100644
--- a/xbmc/system.h
+++ b/xbmc/system.h
@@ -20,6 +20,10 @@
  *
  */
 
+#if defined(HAVE_CONFIG_H)
+#include "config.h"
+#endif
+
 #if !defined(TARGET_WINDOWS)
 #define DECLARE_UNUSED(a,b) a __attribute__((unused)) b;
 #endif
diff --git a/xbmc/test/Makefile b/xbmc/test/Makefile
new file mode 100644
index 0000000..cfcbef4
--- /dev/null
+++ b/xbmc/test/Makefile
@@ -0,0 +1,15 @@
+SRCS=	\
+	TestBasicEnvironment.cpp \
+	TestFileItem.cpp \
+	TestTextureUtils.cpp \
+	TestURL.cpp \
+	TestUtil.cpp \
+	TestUtils.cpp \
+	xbmc-test.cpp
+
+LIB=xbmc-test.a
+
+INCLUDES += -I../../lib/gtest/include
+
+include ../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/threads/Makefile b/xbmc/threads/Makefile
new file mode 100644
index 0000000..fc2c02d
--- /dev/null
+++ b/xbmc/threads/Makefile
@@ -0,0 +1,11 @@
+SRCS=Atomics.cpp \
+     Event.cpp \
+     Thread.cpp \
+     Timer.cpp \
+     SystemClock.cpp \
+     platform/Implementation.cpp
+
+LIB=threads.a
+
+include ../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/threads/platform/pthreads/ThreadImpl.cpp b/xbmc/threads/platform/pthreads/ThreadImpl.cpp
index 086c17f..99c3dbe 100644
--- a/xbmc/threads/platform/pthreads/ThreadImpl.cpp
+++ b/xbmc/threads/platform/pthreads/ThreadImpl.cpp
@@ -18,6 +18,9 @@
  *
  */
 
+#if defined(HAVE_CONFIG_H)
+  #include "config.h"
+#endif
 #include <limits.h>
 #if defined(TARGET_ANDROID)
 #include <unistd.h>
diff --git a/xbmc/threads/test/Makefile b/xbmc/threads/test/Makefile
new file mode 100644
index 0000000..d41a2ab
--- /dev/null
+++ b/xbmc/threads/test/Makefile
@@ -0,0 +1,12 @@
+SRCS=	\
+	TestEvent.cpp \
+	TestSharedSection.cpp \
+	TestAtomics.cpp \
+	TestThreadLocal.cpp
+
+LIB=threadTest.a
+
+INCLUDES += -I../../../lib/gtest/include
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/utils/CharsetConverter.cpp b/xbmc/utils/CharsetConverter.cpp
index 2989048..8c91276 100644
--- a/xbmc/utils/CharsetConverter.cpp
+++ b/xbmc/utils/CharsetConverter.cpp
@@ -36,6 +36,10 @@
 #include "utils/StringUtils.h"
 #include "utils/Utf8Utils.h"
 
+#if !defined(TARGET_WINDOWS) && defined(HAVE_CONFIG_H)
+  #include "config.h"
+#endif
+
 #ifdef WORDS_BIGENDIAN
   #define ENDIAN_SUFFIX "BE"
 #else
diff --git a/xbmc/utils/CryptThreading.cpp b/xbmc/utils/CryptThreading.cpp
index 6a97124..745c885 100644
--- a/xbmc/utils/CryptThreading.cpp
+++ b/xbmc/utils/CryptThreading.cpp
@@ -26,9 +26,13 @@
 #include "threads/Thread.h"
 #include "utils/log.h"
 
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#else
 #ifndef HAVE_OPENSSL
 #define HAVE_OPENSSL
 #endif
+#endif
 
 #ifdef HAVE_OPENSSL
 #include <openssl/crypto.h>
diff --git a/xbmc/utils/EndianSwap.h b/xbmc/utils/EndianSwap.h
index 547a049..db704d9 100644
--- a/xbmc/utils/EndianSwap.h
+++ b/xbmc/utils/EndianSwap.h
@@ -22,6 +22,11 @@
 
  /* Endian_SwapXX functions taken from SDL (SDL_endian.h) */
 
+/* Include config.h to define (or not) WORDS_BIGENDIAN
+   File created by configure */
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+#include "config.h"
+#endif
 #ifdef TARGET_POSIX
 #include <inttypes.h>
 #elif TARGET_WINDOWS
diff --git a/xbmc/utils/Makefile.in b/xbmc/utils/Makefile.in
new file mode 100644
index 0000000..7ec1b21
--- /dev/null
+++ b/xbmc/utils/Makefile.in
@@ -0,0 +1,93 @@
+SRCS += AlarmClock.cpp
+SRCS += AliasShortcutUtils.cpp
+SRCS += Archive.cpp
+SRCS += auto_buffer.cpp
+SRCS += Base64.cpp
+SRCS += BitstreamConverter.cpp
+SRCS += BitstreamStats.cpp
+SRCS += BooleanLogic.cpp
+SRCS += CharsetConverter.cpp
+SRCS += CharsetDetection.cpp
+SRCS += CPUInfo.cpp
+SRCS += Crc32.cpp
+SRCS += CryptThreading.cpp
+SRCS += DatabaseUtils.cpp
+SRCS += EndianSwap.cpp
+SRCS += Environment.cpp
+SRCS += Fanart.cpp
+SRCS += FileOperationJob.cpp
+SRCS += FileUtils.cpp
+SRCS += fstrcmp.c
+SRCS += GLUtils.cpp
+SRCS += GroupUtils.cpp
+SRCS += HTMLUtil.cpp
+SRCS += HttpHeader.cpp
+SRCS += HttpParser.cpp
+SRCS += HttpRangeUtils.cpp
+SRCS += HttpResponse.cpp
+SRCS += InfoLoader.cpp
+SRCS += JobManager.cpp
+SRCS += JSONVariantParser.cpp
+SRCS += JSONVariantWriter.cpp
+SRCS += LabelFormatter.cpp
+SRCS += LangCodeExpander.cpp
+SRCS += LegacyPathTranslation.cpp
+SRCS += Locale.cpp
+SRCS += log.cpp
+SRCS += md5.cpp
+SRCS += Mime.cpp
+SRCS += Observer.cpp
+SRCS += PerformanceSample.cpp
+SRCS += PerformanceStats.cpp
+SRCS += posix/PosixInterfaceForCLog.cpp
+SRCS += POUtils.cpp
+SRCS += ProgressJob.cpp
+SRCS += RecentlyAddedJob.cpp
+SRCS += RegExp.cpp
+SRCS += rfft.cpp
+SRCS += RingBuffer.cpp
+SRCS += RssManager.cpp
+SRCS += RssReader.cpp
+SRCS += SaveFileStateJob.cpp
+SRCS += ScraperParser.cpp
+SRCS += ScraperUrl.cpp
+SRCS += Screenshot.cpp
+SRCS += SeekHandler.cpp
+SRCS += SortUtils.cpp
+SRCS += Speed.cpp
+SRCS += Splash.cpp
+SRCS += Stopwatch.cpp
+SRCS += StreamDetails.cpp
+SRCS += StreamUtils.cpp
+SRCS += StringUtils.cpp
+SRCS += StringValidation.cpp
+SRCS += SystemInfo.cpp
+SRCS += Temperature.cpp
+SRCS += TextSearch.cpp
+SRCS += TimeUtils.cpp
+SRCS += URIUtils.cpp
+SRCS += UrlOptions.cpp
+SRCS += Variant.cpp
+SRCS += Vector.cpp
+SRCS += Weather.cpp
+SRCS += XBMCTinyXML.cpp
+SRCS += XMLUtils.cpp
+SRCS += Utf8Utils.cpp
+ifeq (@HAVE_LIBXSLT@,1)
+SRCS += XSLTUtils.cpp
+endif
+SRCS += ActorProtocol.cpp 
+SRCS += SysfsUtils.cpp
+
+ifeq (@USE_OPENGLES@,1)
+SRCS += AMLUtils.cpp
+endif
+
+ifeq (@USE_LIBAMCODEC@,1)
+SRCS += ScreenshotAML.cpp
+endif
+
+LIB   = utils.a
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(patsubst %.S,,$(SRCS))))
diff --git a/xbmc/utils/TimeUtils.cpp b/xbmc/utils/TimeUtils.cpp
index f1a0b84..ec3dea1 100644
--- a/xbmc/utils/TimeUtils.cpp
+++ b/xbmc/utils/TimeUtils.cpp
@@ -23,6 +23,10 @@
 #include "threads/SystemClock.h"
 #include "guilib/GraphicContext.h"
 
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#endif
+
 #if   defined(TARGET_DARWIN)
 #include <mach/mach_time.h>
 #include <CoreVideo/CVHostTime.h>
diff --git a/xbmc/utils/Weather.cpp b/xbmc/utils/Weather.cpp
index 35dd0d2..67b86f1 100644
--- a/xbmc/utils/Weather.cpp
+++ b/xbmc/utils/Weather.cpp
@@ -18,6 +18,10 @@
  *
  */
 
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#endif
+
 #include "Weather.h"
 
 #include <utility>
diff --git a/xbmc/utils/XBMCTinyXML.h b/xbmc/utils/XBMCTinyXML.h
index 1e66624..f2b528f 100644
--- a/xbmc/utils/XBMCTinyXML.h
+++ b/xbmc/utils/XBMCTinyXML.h
@@ -20,6 +20,9 @@
  *
  */
 
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#endif
 #ifndef TARGET_WINDOWS
 //compile fix for TinyXml < 2.6.0
 #define DOCUMENT    TINYXML_DOCUMENT
diff --git a/xbmc/utils/md5.cpp b/xbmc/utils/md5.cpp
index 9eedd83..5582dd3 100644
--- a/xbmc/utils/md5.cpp
+++ b/xbmc/utils/md5.cpp
@@ -99,6 +99,9 @@ std::string XBMC::XBMC_MD5::GetMD5(const std::string &text)
 
 #include <sys/types.h>		/* for stupid systems */
 #include <string.h>		/* for memcpy() */
+#if defined(HAVE_CONFIG_H) && !defined(TARGET_WINDOWS)
+#include "../config.h"
+#endif
 
 #ifdef WORDS_BIGENDIAN
 void
diff --git a/xbmc/utils/test/Makefile b/xbmc/utils/test/Makefile
new file mode 100644
index 0000000..496a8fb
--- /dev/null
+++ b/xbmc/utils/test/Makefile
@@ -0,0 +1,56 @@
+SRCS=	\
+	TestAlarmClock.cpp \
+	TestAliasShortcutUtils.cpp \
+	TestArchive.cpp \
+	TestBase64.cpp \
+	TestBitstreamStats.cpp \
+	TestCharsetConverter.cpp \
+	TestCPUInfo.cpp \
+	TestCrc32.cpp \
+	TestCryptThreading.cpp \
+	TestDatabaseUtils.cpp \
+	TestEndianSwap.cpp \
+	TestFileOperationJob.cpp \
+	TestFileUtils.cpp \
+	Testfstrcmp.cpp \
+	TestGlobalsHandling.cpp \
+	TestHTMLUtil.cpp \
+	TestHttpHeader.cpp \
+	TestHttpParser.cpp \
+	TestHttpRangeUtils.cpp \
+	TestHttpResponse.cpp \
+	TestJobManager.cpp \
+	TestJSONVariantParser.cpp \
+	TestJSONVariantWriter.cpp \
+	TestLabelFormatter.cpp \
+	TestLangCodeExpander.cpp \
+	TestLocale.cpp \
+	Testlog.cpp \
+	TestMathUtils.cpp \
+	Testmd5.cpp \
+	TestMime.cpp \
+	TestPerformanceSample.cpp \
+	TestPOUtils.cpp \
+	TestRegExp.cpp \
+        Testrfft.cpp \
+	TestRingBuffer.cpp \
+	TestScraperParser.cpp \
+	TestScraperUrl.cpp \
+	TestSortUtils.cpp \
+	TestStopwatch.cpp \
+	TestStreamDetails.cpp \
+	TestStreamUtils.cpp \
+	TestStringUtils.cpp \
+	TestSystemInfo.cpp \
+	TestURIUtils.cpp \
+	TestUrlOptions.cpp \
+	TestVariant.cpp \
+	TestXBMCTinyXML.cpp \
+	TestXMLUtils.cpp
+
+LIB=utilsTest.a
+
+INCLUDES += -I../../../lib/gtest/include
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/utils/uXstrings.h b/xbmc/utils/uXstrings.h
index 95e0702..0b2e12c 100644
--- a/xbmc/utils/uXstrings.h
+++ b/xbmc/utils/uXstrings.h
@@ -26,6 +26,9 @@
 #include <string>
 
 #ifndef TARGET_WINDOWS
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif // HAVE_CONFIG_H
 
 #if !defined(HAVE_STD__U16STRING) || !defined(HAVE_STD__U32STRING) 
 #if defined(HAVE_STDINT_H)
diff --git a/xbmc/video/Makefile b/xbmc/video/Makefile
new file mode 100644
index 0000000..c2b31c6
--- /dev/null
+++ b/xbmc/video/Makefile
@@ -0,0 +1,19 @@
+SRCS=Bookmark.cpp \
+     ContextMenus.cpp \
+     GUIViewStateVideo.cpp \
+     PlayerController.cpp \
+     Teletext.cpp \
+     VideoDatabase.cpp \
+     VideoDbUrl.cpp \
+     VideoInfoDownloader.cpp \
+     VideoInfoScanner.cpp \
+     VideoInfoTag.cpp \
+     VideoLibraryQueue.cpp \
+     VideoReferenceClock.cpp \
+     VideoThumbLoader.cpp \
+     ViewModeSettings.cpp \
+     
+LIB=video.a
+
+include ../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/video/VideoDatabase.cpp b/xbmc/video/VideoDatabase.cpp
index 03f9f96..6f433dc 100644
--- a/xbmc/video/VideoDatabase.cpp
+++ b/xbmc/video/VideoDatabase.cpp
@@ -18,6 +18,10 @@
  *
  */
 
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#endif
+
 #include "VideoDatabase.h"
 
 #include <algorithm>
diff --git a/xbmc/video/dialogs/GUIDialogCMSSettings.cpp b/xbmc/video/dialogs/GUIDialogCMSSettings.cpp
index ae81f4a..8fb1014 100644
--- a/xbmc/video/dialogs/GUIDialogCMSSettings.cpp
+++ b/xbmc/video/dialogs/GUIDialogCMSSettings.cpp
@@ -19,6 +19,9 @@
  */
 
 #include "system.h"
+#if (defined HAVE_CONFIG_H) && (!defined TARGET_WINDOWS)
+  #include "config.h"
+#endif
 
 #ifdef HAS_GL
 
diff --git a/xbmc/video/dialogs/Makefile b/xbmc/video/dialogs/Makefile
new file mode 100644
index 0000000..fd27b66
--- /dev/null
+++ b/xbmc/video/dialogs/Makefile
@@ -0,0 +1,14 @@
+SRCS=GUIDialogAudioSubtitleSettings.cpp \
+     GUIDialogCMSSettings.cpp \
+     GUIDialogFullScreenInfo.cpp \
+     GUIDialogSubtitles.cpp \
+     GUIDialogTeletext.cpp \
+     GUIDialogVideoBookmarks.cpp \
+     GUIDialogVideoInfo.cpp \
+     GUIDialogVideoOSD.cpp \
+     GUIDialogVideoSettings.cpp \
+
+LIB=videodialogs.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/video/jobs/Makefile b/xbmc/video/jobs/Makefile
new file mode 100644
index 0000000..7aa42ee
--- /dev/null
+++ b/xbmc/video/jobs/Makefile
@@ -0,0 +1,11 @@
+SRCS=VideoLibraryCleaningJob.cpp \
+     VideoLibraryJob.cpp \
+     VideoLibraryMarkWatchedJob.cpp \
+     VideoLibraryProgressJob.cpp \
+     VideoLibraryRefreshingJob.cpp \
+     VideoLibraryScanningJob.cpp \
+     
+LIB=video-jobs.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/video/test/Makefile b/xbmc/video/test/Makefile
new file mode 100644
index 0000000..36c846f
--- /dev/null
+++ b/xbmc/video/test/Makefile
@@ -0,0 +1,9 @@
+SRCS= \
+  TestVideoInfoScanner.cpp
+
+LIB=videoTest.a
+
+INCLUDES += -I../../../lib/gtest/include
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/video/videosync/Makefile b/xbmc/video/videosync/Makefile
new file mode 100644
index 0000000..fda1c06
--- /dev/null
+++ b/xbmc/video/videosync/Makefile
@@ -0,0 +1,12 @@
+SRCS=VideoSyncGLX.cpp \
+     VideoSyncOsx.cpp \
+     VideoSyncIos.cpp \
+     VideoSyncDRM.cpp \
+     VideoSyncPi.cpp \
+     VideoSyncIMX.cpp \
+     VideoSyncAndroid.cpp \
+
+LIB=videosync.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/video/windows/Makefile b/xbmc/video/windows/Makefile
new file mode 100644
index 0000000..ff2afe6
--- /dev/null
+++ b/xbmc/video/windows/Makefile
@@ -0,0 +1,10 @@
+SRCS=GUIWindowFullScreen.cpp \
+     GUIWindowVideoBase.cpp \
+     GUIWindowVideoNav.cpp \
+     GUIWindowVideoPlaylist.cpp \
+     VideoFileItemListModifier.cpp \
+
+LIB=videowindows.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/view/Makefile b/xbmc/view/Makefile
new file mode 100644
index 0000000..3b35a25
--- /dev/null
+++ b/xbmc/view/Makefile
@@ -0,0 +1,9 @@
+SRCS=GUIViewControl.cpp \
+     GUIViewState.cpp \
+     ViewDatabase.cpp \
+     ViewStateSettings.cpp \
+
+LIB=view.a
+
+include ../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
\ No newline at end of file
diff --git a/xbmc/windowing/Makefile.in b/xbmc/windowing/Makefile.in
new file mode 100644
index 0000000..ce9854c
--- /dev/null
+++ b/xbmc/windowing/Makefile.in
@@ -0,0 +1,10 @@
+SRCS=WinEventsSDL.cpp \
+     WinEventsLinux.cpp \
+     WinEventsX11.cpp \
+     WinSystem.cpp \
+     WinEvents.cpp
+
+LIB=windowing.a
+
+include ../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/windowing/X11/Makefile b/xbmc/windowing/X11/Makefile
new file mode 100644
index 0000000..d293d5d
--- /dev/null
+++ b/xbmc/windowing/X11/Makefile
@@ -0,0 +1,12 @@
+SRCS=WinSystemX11.cpp \
+     WinSystemX11GLContext.cpp \
+     WinSystemX11GLESContext.cpp \
+     GLContext.cpp \
+     GLContextEGL.cpp \
+     GLContextGLX.cpp \
+     XRandR.cpp \
+     
+LIB=windowing_X11.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/windowing/android/Makefile b/xbmc/windowing/android/Makefile
new file mode 100644
index 0000000..48c73b1
--- /dev/null
+++ b/xbmc/windowing/android/Makefile
@@ -0,0 +1,7 @@
+SRCS= \
+      WinEventsAndroid.cpp \
+     
+LIB=windowing_android.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/windowing/egl/Makefile.in b/xbmc/windowing/egl/Makefile.in
new file mode 100644
index 0000000..17af4c4
--- /dev/null
+++ b/xbmc/windowing/egl/Makefile.in
@@ -0,0 +1,19 @@
+INCLUDES=-I.
+
+SRCS = WinSystemEGL.cpp
+SRCS+= EGLNativeTypeAmlogic.cpp
+ifeq (@USE_ANDROID@,1)
+SRCS+= EGLNativeTypeAndroid.cpp
+endif
+ifeq (@USE_MMAL@,1)
+SRCS+= EGLNativeTypeRaspberryPI.cpp
+endif
+ifeq (@USE_IMXVPU@,1)
+SRCS+= EGLNativeTypeIMX.cpp
+endif
+SRCS+= EGLWrapper.cpp
+
+LIB = windowing_egl.a
+
+include ../../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/windowing/osx/Makefile b/xbmc/windowing/osx/Makefile
new file mode 100644
index 0000000..41ef54e
--- /dev/null
+++ b/xbmc/windowing/osx/Makefile
@@ -0,0 +1,10 @@
+SRCS= \
+      WinEventsOSX.mm \
+      WinSystemOSX.mm \
+      WinSystemOSXGL.mm
+     
+.SUFFIXES : .m .mm
+LIB=windowing_osx.a
+
+include ../../../Makefile.include
+-include $(patsubst %.mm,%.P,$(SRCS))
diff --git a/xbmc/windows/Makefile b/xbmc/windows/Makefile
new file mode 100644
index 0000000..a328db2
--- /dev/null
+++ b/xbmc/windows/Makefile
@@ -0,0 +1,17 @@
+SRCS=GUIMediaWindow.cpp \
+     GUIWindowDebugInfo.cpp \
+     GUIWindowFileManager.cpp \
+     GUIWindowHome.cpp \
+     GUIWindowLoginScreen.cpp \
+     GUIWindowPointer.cpp \
+     GUIWindowScreensaver.cpp \
+     GUIWindowScreensaverDim.cpp \
+     GUIWindowSplash.cpp \
+     GUIWindowStartup.cpp \
+     GUIWindowSystemInfo.cpp \
+     GUIWindowWeather.cpp \
+
+LIB=windows.a
+
+include ../../Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
-- 
2.1.4

