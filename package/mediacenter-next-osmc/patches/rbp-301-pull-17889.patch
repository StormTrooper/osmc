From 366b0bb7f62596b5fe8ee0eb38179135d154d93d Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Tue, 19 May 2020 02:13:32 +0200
Subject: [PATCH 1/4] [addons][tools] update dll helper to support Android

This was already before on the addons where needed, as long it was not
fixed about Android in Kodi itself.

This add the there needed copy of Dll to anotther place so that it can be
used.
---
 .../include/kodi/tools/DllHelper.h            | 61 ++++++++++++++++---
 1 file changed, 51 insertions(+), 10 deletions(-)

diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/tools/DllHelper.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/tools/DllHelper.h
index 1ae1a0e2f555..e8427e90f783 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/tools/DllHelper.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/tools/DllHelper.h
@@ -9,13 +9,10 @@
 #pragma once
 
 #include <string>
-#include <kodi/AddonBase.h>
 
-#ifdef _WIN32                   // windows
-#include <p8-platform/windows/dlfcn-win32.h>
-#else
-#include <dlfcn.h>              // linux+osx
-#endif
+#include <dlfcn.h>
+#include <kodi/AddonBase.h>
+#include <kodi/Filesystem.h>
 
 #define REGISTER_DLL_SYMBOL(functionPtr) \
   CDllHelper::RegisterSymbol(functionPtr, #functionPtr)
@@ -25,7 +22,8 @@
 /// You can add them as parent to your class and to help with load of shared
 /// library functions.
 ///
-/// @note To use on Windows must you also include p8-platform on your addon!
+/// @note To use on Windows must you also include [dlfcn-win32](https://github.com/dlfcn-win32/dlfcn-win32) on your addon!\n\n
+/// Furthermore, this allows the use of Android where the required library is copied to an EXE useable folder.
 ///
 ///
 /// ----------------------------------------------------------------------------
@@ -73,7 +71,7 @@
 class CDllHelper
 {
 public:
-  CDllHelper() : m_dll(nullptr) { }
+  CDllHelper() = default;
   virtual ~CDllHelper()
   {
     if (m_dll)
@@ -85,8 +83,51 @@ class CDllHelper
   /// @param[in] path         The path with filename of shared library to load
   /// @return                 true if load was successful done
   ///
-  bool LoadDll(const std::string& path)
+  bool LoadDll(std::string path)
   {
+#if defined(TARGET_ANDROID)
+    if (kodi::vfs::FileExists(path))
+    {
+      // Check already defined for "xbmcaltbinaddons", if yes no copy necassary.
+      std::string xbmcaltbinaddons =
+          kodi::vfs::TranslateSpecialProtocol("special://xbmcaltbinaddons/");
+      if (path.compare(0, xbmcaltbinaddons.length(), xbmcaltbinaddons) != 0)
+      {
+        bool doCopy = true;
+        std::string dstfile = xbmcaltbinaddons + kodi::vfs::GetFileName(path);
+
+        kodi::vfs::FileStatus dstFileStat;
+        if (kodi::vfs::StatFile(dstfile, dstFileStat))
+        {
+          kodi::vfs::FileStatus srcFileStat;
+          if (kodi::vfs::StatFile(path, srcFileStat))
+          {
+            if (dstFileStat.GetSize() == srcFileStat.GetSize() &&
+                dstFileStat.GetModificationTime() > srcFileStat.GetModificationTime())
+              doCopy = false;
+          }
+        }
+
+        if (doCopy)
+        {
+          kodi::Log(ADDON_LOG_DEBUG, "Caching '%s' to '%s'", path.c_str(), dstfile.c_str());
+          if (!kodi::vfs::CopyFile(path, dstfile))
+          {
+            kodi::Log(ADDON_LOG_ERROR, "Failed to cache '%s' to '%s'", path.c_str(),
+                      dstfile.c_str());
+            return false;
+          }
+        }
+
+        path = dstfile;
+      }
+    }
+    else
+    {
+      return false;
+    }
+#endif
+
     m_dll = dlopen(path.c_str(), RTLD_LAZY);
     if (m_dll == nullptr)
     {
@@ -114,5 +155,5 @@ class CDllHelper
   }
 
 private:
-  void* m_dll;
+  void* m_dll = nullptr;
 };

From 0e2e89af3e7b7901f8fa5482bb51b5fa3fbb8c6f Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Tue, 19 May 2020 01:23:24 +0200
Subject: [PATCH 2/4] [addons][tools] bring parts of CDllHelper in namespace
 kodi::tools

This to have more safe if something else have this name too.
---
 .../include/kodi/tools/DllHelper.h            | 24 +++++++++++++++----
 1 file changed, 19 insertions(+), 5 deletions(-)

diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/tools/DllHelper.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/tools/DllHelper.h
index e8427e90f783..edbdd6c3858a 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/tools/DllHelper.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/tools/DllHelper.h
@@ -8,6 +8,8 @@
 
 #pragma once
 
+#ifdef __cplusplus
+
 #include <string>
 
 #include <dlfcn.h>
@@ -17,13 +19,20 @@
 #define REGISTER_DLL_SYMBOL(functionPtr) \
   CDllHelper::RegisterSymbol(functionPtr, #functionPtr)
 
+namespace kodi
+{
+namespace tools
+{
+
 /// @brief Class to help with load of shared library functions
 ///
 /// You can add them as parent to your class and to help with load of shared
 /// library functions.
 ///
-/// @note To use on Windows must you also include [dlfcn-win32](https://github.com/dlfcn-win32/dlfcn-win32) on your addon!\n\n
-/// Furthermore, this allows the use of Android where the required library is copied to an EXE useable folder.
+/// @note To use on Windows must you also include [dlfcn-win32](https://github.com/dlfcn-win32/dlfcn-win32)
+/// on your addon!\n\n
+/// Furthermore, this allows the use of Android where the required library is
+/// copied to an EXE useable folder.
 ///
 ///
 /// ----------------------------------------------------------------------------
@@ -38,7 +47,7 @@
 ///                     private CDllHelper
 /// {
 /// public:
-///   CMyInstance(KODI_HANDLE instance);
+///   CMyInstance(KODI_HANDLE instance, const std::string& kodiVersion);
 ///   bool Start();
 ///
 ///   ...
@@ -49,8 +58,8 @@
 ///   int (*GetLength)();
 /// };
 ///
-/// CMyInstance::CMyInstance(KODI_HANDLE instance)
-///   : CInstanceAudioDecoder(instance)
+/// CMyInstance::CMyInstance(KODI_HANDLE instance, const std::string& kodiVersion)
+///   : CInstanceAudioDecoder(instance, kodiVersion)
 /// {
 /// }
 ///
@@ -157,3 +166,8 @@ class CDllHelper
 private:
   void* m_dll = nullptr;
 };
+
+} /* namespace tools */
+} /* namespace kodi */
+
+#endif /* __cplusplus */

From aa80d4e06aad4efdb646821c3048c3b9671e8b00 Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Tue, 19 May 2020 02:21:04 +0200
Subject: [PATCH 3/4] [addons][tools] update documentation of CDllHelper

There become sthe needed documentation updated and cleaned up to have
usable and shown inside dev-kit doxygen.

Also is there a group about "tools" added where this is included.
---
 .../doxygen/Modules/modules_cpp.dox           |  6 ++
 .../include/kodi/tools/DllHelper.h            | 60 +++++++++++++++----
 2 files changed, 55 insertions(+), 11 deletions(-)

diff --git a/xbmc/addons/kodi-addon-dev-kit/doxygen/Modules/modules_cpp.dox b/xbmc/addons/kodi-addon-dev-kit/doxygen/Modules/modules_cpp.dox
index 4af69b5afb9f..67688424784c 100644
--- a/xbmc/addons/kodi-addon-dev-kit/doxygen/Modules/modules_cpp.dox
+++ b/xbmc/addons/kodi-addon-dev-kit/doxygen/Modules/modules_cpp.dox
@@ -84,3 +84,9 @@
 \ingroup cpp
 \brief **Graphical functions for Windows and Dialogs to show**
 */
+/*!
+\defgroup cpp_kodi_tools Interface - kodi::tools
+\ingroup cpp
+\brief **Helper tools and functions**\n
+This group includes things that only work indirectly with Kodi.
+*/
diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/tools/DllHelper.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/tools/DllHelper.h
index edbdd6c3858a..4b95fe059ed6 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/tools/DllHelper.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/tools/DllHelper.h
@@ -16,16 +16,27 @@
 #include <kodi/AddonBase.h>
 #include <kodi/Filesystem.h>
 
+//==============================================================================
+/// @ingroup cpp_kodi_tools_CDllHelper
+/// @brief Macro to translate the given pointer value name of functions to
+/// requested function name.
+///
+/// @note This should always be used and does the work of
+/// @ref kodi::tools::CDllHelper::RegisterSymbol().
+///
 #define REGISTER_DLL_SYMBOL(functionPtr) \
-  CDllHelper::RegisterSymbol(functionPtr, #functionPtr)
+  kodi::tools::CDllHelper::RegisterSymbol(functionPtr, #functionPtr)
+//------------------------------------------------------------------------------
 
 namespace kodi
 {
 namespace tools
 {
 
-/// @brief Class to help with load of shared library functions
-///
+//==============================================================================
+/// @defgroup cpp_kodi_tools_CDllHelper class CDllHelper
+/// @ingroup cpp_kodi_tools
+/// @brief **Class to help with load of shared library functions**\n
 /// You can add them as parent to your class and to help with load of shared
 /// library functions.
 ///
@@ -44,7 +55,7 @@ namespace tools
 ///
 /// ...
 /// class CMyInstance : public kodi::addon::CInstanceAudioDecoder,
-///                     private CDllHelper
+///                     private kodi::tools::CDllHelper
 /// {
 /// public:
 ///   CMyInstance(KODI_HANDLE instance, const std::string& kodiVersion);
@@ -52,7 +63,7 @@ namespace tools
 ///
 ///   ...
 ///
-///   /* The pointers for on shared library exported functions */
+///   // The pointers for on shared library exported functions
 ///   int (*Init)();
 ///   void (*Cleanup)();
 ///   int (*GetLength)();
@@ -77,20 +88,34 @@ namespace tools
 /// ...
 /// ~~~~~~~~~~~~~
 ///
+///@{
 class CDllHelper
 {
 public:
+  //============================================================================
+  /// @ingroup cpp_kodi_tools_CDllHelper
+  /// @brief Class constructor.
+  ///
   CDllHelper() = default;
+  //----------------------------------------------------------------------------
+
+  //============================================================================
+  /// @ingroup cpp_kodi_tools_CDllHelper
+  /// @brief Class destructor.
+  ///
   virtual ~CDllHelper()
   {
     if (m_dll)
       dlclose(m_dll);
   }
+  //----------------------------------------------------------------------------
 
-  /// @brief Function to load requested library
+  //============================================================================
+  /// @ingroup cpp_kodi_tools_CDllHelper
+  /// @brief Function to load requested library.
   ///
-  /// @param[in] path         The path with filename of shared library to load
-  /// @return                 true if load was successful done
+  /// @param[in] path The path with filename of shared library to load
+  /// @return true if load was successful done
   ///
   bool LoadDll(std::string path)
   {
@@ -145,11 +170,21 @@ class CDllHelper
     }
     return true;
   }
+  //----------------------------------------------------------------------------
 
-  /// @brief Function to register requested library symbol
+  //============================================================================
+  /// @ingroup cpp_kodi_tools_CDllHelper
+  /// @brief Function to register requested library symbol.
+  ///
+  /// @warning This function should not be used, use instead the macro
+  /// @ref REGISTER_DLL_SYMBOL to register the symbol pointer.
+  ///
   ///
-  /// @note This function should not be used, use instead the macro
-  /// REGISTER_DLL_SYMBOL to register the symbol pointer.
+  /// Use this always via Macro, e.g.:
+  /// ~~~~~~~~~~~~~{.cpp}
+  /// if (!REGISTER_DLL_SYMBOL(Init))
+  ///   return false;
+  /// ~~~~~~~~~~~~~
   ///
   template <typename T>
   bool RegisterSymbol(T& functionPtr, const char* strFunctionPtr)
@@ -162,10 +197,13 @@ class CDllHelper
     }
     return true;
   }
+  //----------------------------------------------------------------------------
 
 private:
   void* m_dll = nullptr;
 };
+///@}
+//------------------------------------------------------------------------------
 
 } /* namespace tools */
 } /* namespace kodi */

From b525f098bf7d68b1a1f9c65c570fe3f0869326a4 Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Wed, 20 May 2020 20:02:51 +0200
Subject: [PATCH 4/4] [addons][tools] add helper as ADDON_GLOBAL_TOOLS to
 versions.h

This to allow versions check about, before was them not included in
check where makes it dangerous by changes.
---
 .gitignore                                    |  1 +
 addons/kodi.binary.global.tools/addon.xml.in  |  7 ++++++
 system/addon-manifest.xml                     |  1 +
 .../include/kodi/versions.h                   | 23 +++++++++++++++++--
 4 files changed, 30 insertions(+), 2 deletions(-)
 create mode 100644 addons/kodi.binary.global.tools/addon.xml.in

diff --git a/.gitignore b/.gitignore
index 63eb7712f16f..99c0354eaf59 100644
--- a/.gitignore
+++ b/.gitignore
@@ -118,6 +118,7 @@ cmake_install.cmake
 /addons/kodi.binary.global.gui/addon.xml
 /addons/kodi.binary.global.main/addon.xml
 /addons/kodi.binary.global.network/addon.xml
+/addons/kodi.binary.global.tools/addon.xml
 /addons/kodi.binary.instance.audiodecoder/addon.xml
 /addons/kodi.binary.instance.audioencoder/addon.xml
 /addons/kodi.binary.instance.game/addon.xml
diff --git a/addons/kodi.binary.global.tools/addon.xml.in b/addons/kodi.binary.global.tools/addon.xml.in
new file mode 100644
index 000000000000..f96576aff28d
--- /dev/null
+++ b/addons/kodi.binary.global.tools/addon.xml.in
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<addon id="kodi.binary.global.tools" version="@ADDON_GLOBAL_VERSION_TOOLS@" provider-name="Team Kodi">
+  <backwards-compatibility abi="@ADDON_GLOBAL_VERSION_TOOLS_MIN@"/>
+  <requires>
+    <import addon="xbmc.core" version="0.1.0"/>
+  </requires>
+</addon>
diff --git a/system/addon-manifest.xml b/system/addon-manifest.xml
index aeb0cc682077..abeb5ec60cfb 100644
--- a/system/addon-manifest.xml
+++ b/system/addon-manifest.xml
@@ -9,6 +9,7 @@
   <addon>kodi.binary.global.network</addon>
   <addon>kodi.binary.global.gui</addon>
   <addon>kodi.binary.global.filesystem</addon>
+  <addon>kodi.binary.global.tools</addon>
   <addon>kodi.binary.instance.audiodecoder</addon>
   <addon>kodi.binary.instance.audioencoder</addon>
   <addon>kodi.binary.instance.game</addon>
diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h
index fcb0b0438549..6386e79120f8 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h
@@ -65,7 +65,8 @@
 #define ADDON_GLOBAL_VERSION_FILESYSTEM_XML_ID        "kodi.binary.global.filesystem"
 #define ADDON_GLOBAL_VERSION_FILESYSTEM_DEPENDS       "Filesystem.h" \
                                                       "c-api/filesystem.h" \
-                                                      "gui/gl/Shader.h"
+                                                      "gui/gl/Shader.h" \
+                                                      "tools/DllHelper.h"
 
 #define ADDON_GLOBAL_VERSION_NETWORK                  "1.0.2"
 #define ADDON_GLOBAL_VERSION_NETWORK_MIN              "1.0.0"
@@ -73,6 +74,11 @@
 #define ADDON_GLOBAL_VERSION_NETWORK_DEPENDS          "Network.h" \
                                                       "c-api/network.h"
 
+#define ADDON_GLOBAL_VERSION_TOOLS                    "1.0.0"
+#define ADDON_GLOBAL_VERSION_TOOLS_MIN                "1.0.0"
+#define ADDON_GLOBAL_VERSION_TOOLS_XML_ID             "kodi.binary.global.tools"
+#define ADDON_GLOBAL_VERSION_TOOLS_DEPENDS            "tools/DllHelper.h"
+
 #define ADDON_INSTANCE_VERSION_AUDIODECODER           "2.0.1"
 #define ADDON_INSTANCE_VERSION_AUDIODECODER_MIN       "2.0.1"
 #define ADDON_INSTANCE_VERSION_AUDIODECODER_XML_ID    "kodi.binary.instance.audiodecoder"
@@ -153,7 +159,10 @@ typedef enum ADDON_TYPE
   ADDON_GLOBAL_GENERAL = 3,
   ADDON_GLOBAL_NETWORK = 4,
   ADDON_GLOBAL_FILESYSTEM = 5,
-  ADDON_GLOBAL_MAX = 5, // Last used global id, used in loops to check versions. Need to change if new global type becomes added.
+  ADDON_GLOBAL_TOOLS = 6,
+  // Last used global id, used in loops to check versions.
+  // Need to change if new global type becomes added!
+  ADDON_GLOBAL_MAX = 6,
 
   /* addon type instances */
 
@@ -236,6 +245,10 @@ inline const char* GetTypeVersion(int type)
     case ADDON_GLOBAL_NETWORK:
       return ADDON_GLOBAL_VERSION_NETWORK;
 #endif
+#if !defined(BUILD_KODI_ADDON) || defined(ADDON_GLOBAL_VERSION_TOOLS_USED)
+    case ADDON_GLOBAL_TOOLS:
+      return ADDON_GLOBAL_VERSION_TOOLS;
+#endif
 
     /* addon type instances */
 #if !defined(BUILD_KODI_ADDON) || defined(ADDON_INSTANCE_VERSION_AUDIODECODER_USED)
@@ -311,6 +324,8 @@ inline const char* GetTypeMinVersion(int type)
       return ADDON_GLOBAL_VERSION_FILESYSTEM_MIN;
     case ADDON_GLOBAL_NETWORK:
       return ADDON_GLOBAL_VERSION_NETWORK_MIN;
+    case ADDON_GLOBAL_TOOLS:
+      return ADDON_GLOBAL_VERSION_TOOLS_MIN;
 
     /* addon type instances */
     case ADDON_INSTANCE_AUDIODECODER:
@@ -363,6 +378,8 @@ inline const char* GetTypeName(int type)
       return "Filesystem";
     case ADDON_GLOBAL_NETWORK:
       return "Network";
+    case ADDON_GLOBAL_TOOLS:
+      return "Tools";
 
     /* addon type instances */
     case ADDON_INSTANCE_AUDIODECODER:
@@ -414,6 +431,8 @@ inline int GetTypeId(const char* name)
       return ADDON_GLOBAL_FILESYSTEM;
     else if (strcmp(name, "network") == 0)
       return ADDON_GLOBAL_NETWORK;
+    else if (strcmp(name, "tools") == 0)
+      return ADDON_GLOBAL_TOOLS;
     else if (strcmp(name, "audiodecoder") == 0)
       return ADDON_INSTANCE_AUDIODECODER;
     else if (strcmp(name, "audioencoder") == 0)
