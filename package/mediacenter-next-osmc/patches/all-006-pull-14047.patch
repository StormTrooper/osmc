From ff5e6c17925680c8c1427b21e99f7567f592a160 Mon Sep 17 00:00:00 2001
From: Max Kellermann <max.kellermann@gmail.com>
Date: Thu, 14 Jun 2018 16:40:51 +0200
Subject: [PATCH 1/9] utils/ActorProtocol: forward-declare class CEvent

---
 xbmc/utils/ActorProtocol.cpp | 1 +
 xbmc/utils/ActorProtocol.h   | 4 +++-
 2 files changed, 4 insertions(+), 1 deletion(-)

diff --git a/xbmc/utils/ActorProtocol.cpp b/xbmc/utils/ActorProtocol.cpp
index 1786ebfc3892..8ad8d1aab1f4 100644
--- a/xbmc/utils/ActorProtocol.cpp
+++ b/xbmc/utils/ActorProtocol.cpp
@@ -19,6 +19,7 @@
  */
 
 #include "ActorProtocol.h"
+#include "threads/Event.h"
 
 #include <cstring>
 
diff --git a/xbmc/utils/ActorProtocol.h b/xbmc/utils/ActorProtocol.h
index 1209ca6ec437..bdac7dc91489 100644
--- a/xbmc/utils/ActorProtocol.h
+++ b/xbmc/utils/ActorProtocol.h
@@ -21,13 +21,15 @@
 #pragma once
 
 #include "threads/CriticalSection.h"
-#include "threads/Event.h"
+
 #include <queue>
 #include <memory>
 #include <string>
 
 #define MSG_INTERNAL_BUFFER_SIZE 32
 
+class CEvent;
+
 namespace Actor
 {
 

From 249b896b315a66ff64a7ac51e24344f2329a0244 Mon Sep 17 00:00:00 2001
From: Max Kellermann <max.kellermann@gmail.com>
Date: Thu, 14 Jun 2018 16:27:01 +0200
Subject: [PATCH 2/9] utils/ActorProtocol: use C++11 initializers

---
 xbmc/utils/ActorProtocol.h | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/xbmc/utils/ActorProtocol.h b/xbmc/utils/ActorProtocol.h
index bdac7dc91489..25787bd744a3 100644
--- a/xbmc/utils/ActorProtocol.h
+++ b/xbmc/utils/ActorProtocol.h
@@ -58,7 +58,7 @@ class Message
   friend class Protocol;
 public:
   int signal;
-  bool isSync;
+  bool isSync = false;
   bool isSyncFini;
   bool isOut;
   bool isSyncTimeout;
@@ -68,20 +68,20 @@ class Message
   std::unique_ptr<CPayloadWrapBase> payloadObj;
   Message *replyMessage = nullptr;
   Protocol *origin = nullptr;
-  CEvent *event;
+  CEvent *event = nullptr;
 
   void Release();
   bool Reply(int sig, void *data = nullptr, int size = 0);
 
 private:
-  Message() {isSync = false; data = nullptr; event = nullptr; replyMessage = nullptr;};
+  Message() = default;
 };
 
 class Protocol
 {
 public:
   Protocol(std::string name, CEvent* inEvent, CEvent *outEvent)
-    : portName(name), inDefered(false), outDefered(false) {containerInEvent = inEvent; containerOutEvent = outEvent;};
+    :portName(name), containerInEvent(inEvent), containerOutEvent(outEvent) {}
   Protocol(std::string name)
     : Protocol(name, nullptr, nullptr) {}
   ~Protocol();
@@ -110,7 +110,7 @@ class Protocol
   std::queue<Message*> outMessages;
   std::queue<Message*> inMessages;
   std::queue<Message*> freeMessageQueue;
-  bool inDefered, outDefered;
+  bool inDefered = false, outDefered = false;
 };
 
 }

From f408399be18da8dd351f93bc2347efc40a0992c9 Mon Sep 17 00:00:00 2001
From: Max Kellermann <max.kellermann@gmail.com>
Date: Thu, 14 Jun 2018 18:10:46 +0200
Subject: [PATCH 3/9] utils/ActorProtocol: use `size_t` instead of `int` for
 the buffer size

---
 xbmc/utils/ActorProtocol.cpp |  8 ++++----
 xbmc/utils/ActorProtocol.h   | 11 ++++++-----
 2 files changed, 10 insertions(+), 9 deletions(-)

diff --git a/xbmc/utils/ActorProtocol.cpp b/xbmc/utils/ActorProtocol.cpp
index 8ad8d1aab1f4..cd5375dd23bb 100644
--- a/xbmc/utils/ActorProtocol.cpp
+++ b/xbmc/utils/ActorProtocol.cpp
@@ -49,7 +49,7 @@ void Message::Release()
   origin->ReturnMessage(this);
 }
 
-bool Message::Reply(int sig, void *data /* = NULL*/, int size /* = 0 */)
+bool Message::Reply(int sig, void *data /* = NULL*/, size_t size /* = 0 */)
 {
   if (!isSync)
   {
@@ -130,7 +130,7 @@ void Protocol::ReturnMessage(Message *msg)
   freeMessageQueue.push(msg);
 }
 
-bool Protocol::SendOutMessage(int signal, void *data /* = NULL */, int size /* = 0 */, Message *outMsg /* = NULL */)
+bool Protocol::SendOutMessage(int signal, void *data /* = NULL */, size_t size /* = 0 */, Message *outMsg /* = NULL */)
 {
   Message *msg;
   if (outMsg)
@@ -181,7 +181,7 @@ bool Protocol::SendOutMessage(int signal, CPayloadWrapBase *payload, Message *ou
   return true;
 }
 
-bool Protocol::SendInMessage(int signal, void *data /* = NULL */, int size /* = 0 */, Message *outMsg /* = NULL */)
+bool Protocol::SendInMessage(int signal, void *data /* = NULL */, size_t size /* = 0 */, Message *outMsg /* = NULL */)
 {
   Message *msg;
   if (outMsg)
@@ -232,7 +232,7 @@ bool Protocol::SendInMessage(int signal, CPayloadWrapBase *payload, Message *out
   return true;
 }
 
-bool Protocol::SendOutMessageSync(int signal, Message **retMsg, int timeout, void *data /* = NULL */, int size /* = 0 */)
+bool Protocol::SendOutMessageSync(int signal, Message **retMsg, int timeout, void *data /* = NULL */, size_t size /* = 0 */)
 {
   Message *msg = GetMessage();
   msg->isOut = true;
diff --git a/xbmc/utils/ActorProtocol.h b/xbmc/utils/ActorProtocol.h
index 25787bd744a3..fe9235612d5b 100644
--- a/xbmc/utils/ActorProtocol.h
+++ b/xbmc/utils/ActorProtocol.h
@@ -22,6 +22,7 @@
 
 #include "threads/CriticalSection.h"
 
+#include <cstddef>
 #include <queue>
 #include <memory>
 #include <string>
@@ -62,7 +63,7 @@ class Message
   bool isSyncFini;
   bool isOut;
   bool isSyncTimeout;
-  int payloadSize;
+  size_t payloadSize;
   uint8_t buffer[MSG_INTERNAL_BUFFER_SIZE];
   uint8_t *data = nullptr;
   std::unique_ptr<CPayloadWrapBase> payloadObj;
@@ -71,7 +72,7 @@ class Message
   CEvent *event = nullptr;
 
   void Release();
-  bool Reply(int sig, void *data = nullptr, int size = 0);
+  bool Reply(int sig, void *data = nullptr, size_t size = 0);
 
 private:
   Message() = default;
@@ -87,11 +88,11 @@ class Protocol
   ~Protocol();
   Message *GetMessage();
   void ReturnMessage(Message *msg);
-  bool SendOutMessage(int signal, void *data = nullptr, int size = 0, Message *outMsg = nullptr);
+  bool SendOutMessage(int signal, void *data = nullptr, size_t size = 0, Message *outMsg = nullptr);
   bool SendOutMessage(int signal, CPayloadWrapBase *payload, Message *outMsg = nullptr);
-  bool SendInMessage(int signal, void *data = nullptr, int size = 0, Message *outMsg = nullptr);
+  bool SendInMessage(int signal, void *data = nullptr, size_t size = 0, Message *outMsg = nullptr);
   bool SendInMessage(int signal, CPayloadWrapBase *payload, Message *outMsg = nullptr);
-  bool SendOutMessageSync(int signal, Message **retMsg, int timeout, void *data = nullptr, int size = 0);
+  bool SendOutMessageSync(int signal, Message **retMsg, int timeout, void *data = nullptr, size_t size = 0);
   bool SendOutMessageSync(int signal, Message **retMsg, int timeout, CPayloadWrapBase *payload);
   bool ReceiveOutMessage(Message **msg);
   bool ReceiveInMessage(Message **msg);

From 7a1dd5862b8128453be8ed139984f28710775dd6 Mon Sep 17 00:00:00 2001
From: Max Kellermann <max.kellermann@gmail.com>
Date: Thu, 14 Jun 2018 16:31:17 +0200
Subject: [PATCH 4/9] utils/ActorProtocol: pass origin to Message constructor

---
 xbmc/utils/ActorProtocol.cpp | 3 +--
 xbmc/utils/ActorProtocol.h   | 5 +++--
 2 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/xbmc/utils/ActorProtocol.cpp b/xbmc/utils/ActorProtocol.cpp
index cd5375dd23bb..6a4d9a4d9d6b 100644
--- a/xbmc/utils/ActorProtocol.cpp
+++ b/xbmc/utils/ActorProtocol.cpp
@@ -109,7 +109,7 @@ Message *Protocol::GetMessage()
     freeMessageQueue.pop();
   }
   else
-    msg = new Message();
+    msg = new Message(*this);
 
   msg->isSync = false;
   msg->isSyncFini = false;
@@ -118,7 +118,6 @@ Message *Protocol::GetMessage()
   msg->data = NULL;
   msg->payloadSize = 0;
   msg->replyMessage = NULL;
-  msg->origin = this;
 
   return msg;
 }
diff --git a/xbmc/utils/ActorProtocol.h b/xbmc/utils/ActorProtocol.h
index fe9235612d5b..d72f6fd49860 100644
--- a/xbmc/utils/ActorProtocol.h
+++ b/xbmc/utils/ActorProtocol.h
@@ -68,14 +68,15 @@ class Message
   uint8_t *data = nullptr;
   std::unique_ptr<CPayloadWrapBase> payloadObj;
   Message *replyMessage = nullptr;
-  Protocol *origin = nullptr;
+  Protocol *const origin;
   CEvent *event = nullptr;
 
   void Release();
   bool Reply(int sig, void *data = nullptr, size_t size = 0);
 
 private:
-  Message() = default;
+  explicit Message(Protocol &_origin) noexcept
+    :origin(&_origin) {}
 };
 
 class Protocol

From 089bea11f502413c375fa3155c1fab7194b931d2 Mon Sep 17 00:00:00 2001
From: Max Kellermann <max.kellermann@gmail.com>
Date: Thu, 14 Jun 2018 16:34:26 +0200
Subject: [PATCH 5/9] utils/ActorProtocol: convert pointer to reference

---
 xbmc/utils/ActorProtocol.cpp | 24 ++++++++++++------------
 xbmc/utils/ActorProtocol.h   |  4 ++--
 2 files changed, 14 insertions(+), 14 deletions(-)

diff --git a/xbmc/utils/ActorProtocol.cpp b/xbmc/utils/ActorProtocol.cpp
index 6a4d9a4d9d6b..3cccb9060ee5 100644
--- a/xbmc/utils/ActorProtocol.cpp
+++ b/xbmc/utils/ActorProtocol.cpp
@@ -28,10 +28,10 @@ using namespace Actor;
 void Message::Release()
 {
   bool skip;
-  origin->Lock();
+  origin.Lock();
   skip = isSync ? !isSyncFini : false;
   isSyncFini = true;
-  origin->Unlock();
+  origin.Unlock();
 
   if (skip)
     return;
@@ -46,7 +46,7 @@ void Message::Release()
   if (event)
     delete event;
 
-  origin->ReturnMessage(this);
+  origin.ReturnMessage(this);
 }
 
 bool Message::Reply(int sig, void *data /* = NULL*/, size_t size /* = 0 */)
@@ -54,16 +54,16 @@ bool Message::Reply(int sig, void *data /* = NULL*/, size_t size /* = 0 */)
   if (!isSync)
   {
     if (isOut)
-      return origin->SendInMessage(sig, data, size);
+      return origin.SendInMessage(sig, data, size);
     else
-      return origin->SendOutMessage(sig, data, size);
+      return origin.SendOutMessage(sig, data, size);
   }
 
-  origin->Lock();
+  origin.Lock();
 
   if (!isSyncTimeout)
   {
-    Message *msg = origin->GetMessage();
+    Message *msg = origin.GetMessage();
     msg->signal = sig;
     msg->isOut = !isOut;
     replyMessage = msg;
@@ -77,7 +77,7 @@ bool Message::Reply(int sig, void *data /* = NULL*/, size_t size /* = 0 */)
     }
   }
 
-  origin->Unlock();
+  origin.Unlock();
 
   if (event)
     event->Set();
@@ -242,7 +242,7 @@ bool Protocol::SendOutMessageSync(int signal, Message **retMsg, int timeout, voi
 
   if (!msg->event->WaitMSec(timeout))
   {
-    msg->origin->Lock();
+    msg->origin.Lock();
     if (msg->replyMessage)
       *retMsg = msg->replyMessage;
     else
@@ -250,7 +250,7 @@ bool Protocol::SendOutMessageSync(int signal, Message **retMsg, int timeout, voi
       *retMsg = NULL;
       msg->isSyncTimeout = true;
     }
-    msg->origin->Unlock();
+    msg->origin.Unlock();
   }
   else
     *retMsg = msg->replyMessage;
@@ -274,7 +274,7 @@ bool Protocol::SendOutMessageSync(int signal, Message **retMsg, int timeout, CPa
 
   if (!msg->event->WaitMSec(timeout))
   {
-    msg->origin->Lock();
+    msg->origin.Lock();
     if (msg->replyMessage)
       *retMsg = msg->replyMessage;
     else
@@ -282,7 +282,7 @@ bool Protocol::SendOutMessageSync(int signal, Message **retMsg, int timeout, CPa
       *retMsg = NULL;
       msg->isSyncTimeout = true;
     }
-    msg->origin->Unlock();
+    msg->origin.Unlock();
   }
   else
     *retMsg = msg->replyMessage;
diff --git a/xbmc/utils/ActorProtocol.h b/xbmc/utils/ActorProtocol.h
index d72f6fd49860..0823ab24056b 100644
--- a/xbmc/utils/ActorProtocol.h
+++ b/xbmc/utils/ActorProtocol.h
@@ -68,7 +68,7 @@ class Message
   uint8_t *data = nullptr;
   std::unique_ptr<CPayloadWrapBase> payloadObj;
   Message *replyMessage = nullptr;
-  Protocol *const origin;
+  Protocol &origin;
   CEvent *event = nullptr;
 
   void Release();
@@ -76,7 +76,7 @@ class Message
 
 private:
   explicit Message(Protocol &_origin) noexcept
-    :origin(&_origin) {}
+    :origin(_origin) {}
 };
 
 class Protocol

From 2ee6a6cb8ee06b8a9dd7ca0cc45a8d8c8e992f94 Mon Sep 17 00:00:00 2001
From: Max Kellermann <max.kellermann@gmail.com>
Date: Thu, 14 Jun 2018 16:32:02 +0200
Subject: [PATCH 6/9] utils/ActorProtocol: remove unnecessary nullptr check

---
 xbmc/utils/ActorProtocol.cpp | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/xbmc/utils/ActorProtocol.cpp b/xbmc/utils/ActorProtocol.cpp
index 3cccb9060ee5..78b2a2f73533 100644
--- a/xbmc/utils/ActorProtocol.cpp
+++ b/xbmc/utils/ActorProtocol.cpp
@@ -43,8 +43,7 @@ void Message::Release()
   payloadObj.release();
 
   // delete event in case of sync message
-  if (event)
-    delete event;
+  delete event;
 
   origin.ReturnMessage(this);
 }

From 2e00a02eb9c529cd8a7215c54cccbbe75baf93f7 Mon Sep 17 00:00:00 2001
From: Max Kellermann <max.kellermann@gmail.com>
Date: Thu, 14 Jun 2018 16:37:01 +0200
Subject: [PATCH 7/9] utils/ActorProtocol: use sizeof(buffer) instead of
 MSG_INTERNAL_BUFFER_SIZE

---
 xbmc/utils/ActorProtocol.cpp | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/xbmc/utils/ActorProtocol.cpp b/xbmc/utils/ActorProtocol.cpp
index 78b2a2f73533..649c773dc417 100644
--- a/xbmc/utils/ActorProtocol.cpp
+++ b/xbmc/utils/ActorProtocol.cpp
@@ -68,7 +68,7 @@ bool Message::Reply(int sig, void *data /* = NULL*/, size_t size /* = 0 */)
     replyMessage = msg;
     if (data)
     {
-      if (size > MSG_INTERNAL_BUFFER_SIZE)
+      if (size > sizeof(msg->buffer))
         msg->data = new uint8_t[size];
       else
         msg->data = msg->buffer;
@@ -141,7 +141,7 @@ bool Protocol::SendOutMessage(int signal, void *data /* = NULL */, size_t size /
 
   if (data)
   {
-    if (size > MSG_INTERNAL_BUFFER_SIZE)
+    if (size > sizeof(msg->buffer))
       msg->data = new uint8_t[size];
     else
       msg->data = msg->buffer;
@@ -192,7 +192,7 @@ bool Protocol::SendInMessage(int signal, void *data /* = NULL */, size_t size /*
 
   if (data)
   {
-    if (size > MSG_INTERNAL_BUFFER_SIZE)
+    if (size > sizeof(msg->data))
       msg->data = new uint8_t[size];
     else
       msg->data = msg->buffer;

From a5805583fab47fb7898e10321d4e67c4602aa6fb Mon Sep 17 00:00:00 2001
From: Max Kellermann <max.kellermann@gmail.com>
Date: Thu, 14 Jun 2018 16:36:04 +0200
Subject: [PATCH 8/9] utils/ActorProtocol: convert MSG_INTERNAL_BUFFER_SIZE to
 constexpr

Don't poison the global namespace with a CPP macro.
---
 xbmc/utils/ActorProtocol.h | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/xbmc/utils/ActorProtocol.h b/xbmc/utils/ActorProtocol.h
index 0823ab24056b..13d434d887bd 100644
--- a/xbmc/utils/ActorProtocol.h
+++ b/xbmc/utils/ActorProtocol.h
@@ -27,8 +27,6 @@
 #include <memory>
 #include <string>
 
-#define MSG_INTERNAL_BUFFER_SIZE 32
-
 class CEvent;
 
 namespace Actor
@@ -57,6 +55,9 @@ class Protocol;
 class Message
 {
   friend class Protocol;
+
+  static constexpr size_t MSG_INTERNAL_BUFFER_SIZE = 32;
+
 public:
   int signal;
   bool isSync = false;

From 9c9dd20a9a3435218452fcdb62e86c428963fc4f Mon Sep 17 00:00:00 2001
From: Max Kellermann <max.kellermann@gmail.com>
Date: Thu, 14 Jun 2018 16:52:30 +0200
Subject: [PATCH 9/9] utils/ActorProtocol: use CSingleLock in
 Protocol::SendOutMessageSync()

---
 xbmc/utils/ActorProtocol.cpp | 6 ++----
 1 file changed, 2 insertions(+), 4 deletions(-)

diff --git a/xbmc/utils/ActorProtocol.cpp b/xbmc/utils/ActorProtocol.cpp
index 649c773dc417..d6a820a39751 100644
--- a/xbmc/utils/ActorProtocol.cpp
+++ b/xbmc/utils/ActorProtocol.cpp
@@ -241,7 +241,7 @@ bool Protocol::SendOutMessageSync(int signal, Message **retMsg, int timeout, voi
 
   if (!msg->event->WaitMSec(timeout))
   {
-    msg->origin.Lock();
+    const CSingleLock lock(criticalSection);
     if (msg->replyMessage)
       *retMsg = msg->replyMessage;
     else
@@ -249,7 +249,6 @@ bool Protocol::SendOutMessageSync(int signal, Message **retMsg, int timeout, voi
       *retMsg = NULL;
       msg->isSyncTimeout = true;
     }
-    msg->origin.Unlock();
   }
   else
     *retMsg = msg->replyMessage;
@@ -273,7 +272,7 @@ bool Protocol::SendOutMessageSync(int signal, Message **retMsg, int timeout, CPa
 
   if (!msg->event->WaitMSec(timeout))
   {
-    msg->origin.Lock();
+    const CSingleLock lock(criticalSection);
     if (msg->replyMessage)
       *retMsg = msg->replyMessage;
     else
@@ -281,7 +280,6 @@ bool Protocol::SendOutMessageSync(int signal, Message **retMsg, int timeout, CPa
       *retMsg = NULL;
       msg->isSyncTimeout = true;
     }
-    msg->origin.Unlock();
   }
   else
     *retMsg = msg->replyMessage;
