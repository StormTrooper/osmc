From 240e2ef3b35987685a52fddd3db9eac0c8e3d313 Mon Sep 17 00:00:00 2001
From: phunkyfish <phunkyfish@gmail.com>
Date: Fri, 18 Oct 2019 17:43:24 +0100
Subject: [PATCH 1/2] [pvr] remove unrequired (void) fron function declarations

---
 xbmc/pvr/PVRDatabase.cpp                      |  6 +-
 xbmc/pvr/PVRDatabase.h                        | 10 +--
 xbmc/pvr/PVRManager.cpp                       | 36 +++++-----
 xbmc/pvr/PVRManager.h                         | 60 ++++++++--------
 xbmc/pvr/addons/PVRClient.cpp                 | 36 +++++-----
 xbmc/pvr/addons/PVRClient.h                   | 34 +++++-----
 xbmc/pvr/addons/PVRClients.cpp                | 16 ++---
 xbmc/pvr/addons/PVRClients.h                  | 16 ++---
 xbmc/pvr/channels/PVRChannel.cpp              | 48 ++++++-------
 xbmc/pvr/channels/PVRChannel.h                | 54 +++++++--------
 xbmc/pvr/channels/PVRChannelGroup.cpp         | 44 ++++++------
 xbmc/pvr/channels/PVRChannelGroup.h           | 48 ++++++-------
 xbmc/pvr/channels/PVRChannelGroupInternal.cpp |  8 +--
 xbmc/pvr/channels/PVRChannelGroupInternal.h   | 10 +--
 xbmc/pvr/channels/PVRChannelGroups.cpp        | 20 +++---
 xbmc/pvr/channels/PVRChannelGroups.h          | 28 ++++----
 .../channels/PVRChannelGroupsContainer.cpp    | 14 ++--
 xbmc/pvr/channels/PVRChannelGroupsContainer.h | 22 +++---
 xbmc/pvr/channels/PVRRadioRDSInfoTag.cpp      |  2 +-
 xbmc/pvr/channels/PVRRadioRDSInfoTag.h        |  2 +-
 xbmc/pvr/dialogs/GUIDialogPVRChannelGuide.h   |  4 +-
 .../dialogs/GUIDialogPVRChannelManager.cpp    | 16 ++---
 xbmc/pvr/dialogs/GUIDialogPVRChannelManager.h | 18 ++---
 xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.h    |  4 +-
 xbmc/pvr/dialogs/GUIDialogPVRGroupManager.cpp |  2 +-
 xbmc/pvr/dialogs/GUIDialogPVRGroupManager.h   |  6 +-
 xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.cpp    |  4 +-
 xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.h      |  4 +-
 xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.cpp  | 10 +--
 xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.h    | 12 ++--
 xbmc/pvr/dialogs/GUIDialogPVRRadioRDSInfo.cpp |  2 +-
 xbmc/pvr/dialogs/GUIDialogPVRRadioRDSInfo.h   |  4 +-
 .../pvr/dialogs/GUIDialogPVRRecordingInfo.cpp |  2 +-
 xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.h  |  4 +-
 xbmc/pvr/epg/Epg.cpp                          | 28 ++++----
 xbmc/pvr/epg/Epg.h                            | 28 ++++----
 xbmc/pvr/epg/EpgContainer.cpp                 | 28 ++++----
 xbmc/pvr/epg/EpgContainer.h                   | 26 +++----
 xbmc/pvr/epg/EpgDatabase.cpp                  |  6 +-
 xbmc/pvr/epg/EpgDatabase.h                    | 12 ++--
 xbmc/pvr/epg/EpgInfoTag.cpp                   | 68 +++++++++----------
 xbmc/pvr/epg/EpgInfoTag.h                     | 60 ++++++++--------
 xbmc/pvr/guilib/PVRGUIActions.cpp             |  2 +-
 xbmc/pvr/guilib/PVRGUIActions.h               |  2 +-
 xbmc/pvr/guilib/guiinfo/PVRGUIInfo.cpp        | 27 ++++----
 xbmc/pvr/guilib/guiinfo/PVRGUIInfo.h          | 26 +++----
 xbmc/pvr/guilib/guiinfo/PVRGUITimerInfo.cpp   |  2 +-
 xbmc/pvr/recordings/PVRRecording.cpp          | 16 ++---
 xbmc/pvr/recordings/PVRRecording.h            | 30 ++++----
 xbmc/pvr/recordings/PVRRecordings.cpp         |  6 +-
 xbmc/pvr/recordings/PVRRecordings.h           |  6 +-
 xbmc/pvr/timers/PVRTimerInfoTag.cpp           | 24 +++----
 xbmc/pvr/timers/PVRTimerInfoTag.h             | 46 ++++++-------
 xbmc/pvr/timers/PVRTimers.cpp                 | 30 ++++----
 xbmc/pvr/timers/PVRTimers.h                   | 32 ++++-----
 xbmc/pvr/windows/GUIViewStatePVR.cpp          | 14 ++--
 xbmc/pvr/windows/GUIViewStatePVR.h            |  6 +-
 xbmc/pvr/windows/GUIWindowPVRBase.cpp         | 16 ++---
 xbmc/pvr/windows/GUIWindowPVRBase.h           | 20 +++---
 xbmc/pvr/windows/GUIWindowPVRChannels.cpp     |  4 +-
 xbmc/pvr/windows/GUIWindowPVRChannels.h       |  2 +-
 xbmc/pvr/windows/GUIWindowPVRGuide.cpp        |  2 +-
 xbmc/pvr/windows/GUIWindowPVRGuide.h          |  4 +-
 xbmc/pvr/windows/GUIWindowPVRRecordings.h     |  2 +-
 xbmc/pvr/windows/GUIWindowPVRSearch.h         |  2 +-
 xbmc/pvr/windows/GUIWindowPVRTimersBase.cpp   |  2 +-
 xbmc/pvr/windows/GUIWindowPVRTimersBase.h     |  4 +-
 67 files changed, 594 insertions(+), 595 deletions(-)

diff --git a/xbmc/pvr/PVRDatabase.cpp b/xbmc/pvr/PVRDatabase.cpp
index 48347bb01b39..70a28fb52eb6 100644
--- a/xbmc/pvr/PVRDatabase.cpp
+++ b/xbmc/pvr/PVRDatabase.cpp
@@ -280,7 +280,7 @@ int CPVRDatabase::GetPriority(const CPVRClient& client)
 
 /********** Channel methods **********/
 
-bool CPVRDatabase::DeleteChannels(void)
+bool CPVRDatabase::DeleteChannels()
 {
   CLog::LogFC(LOGDEBUG, LOGPVR, "Deleting all channels from the database");
 
@@ -536,7 +536,7 @@ bool CPVRDatabase::RemoveStaleChannelsFromGroup(const CPVRChannelGroup& group)
   return bDelete;
 }
 
-bool CPVRDatabase::DeleteChannelGroups(void)
+bool CPVRDatabase::DeleteChannelGroups()
 {
   CLog::LogFC(LOGDEBUG, LOGPVR, "Deleting all channel groups from the database");
 
@@ -766,7 +766,7 @@ bool CPVRDatabase::PersistGroupMembers(const CPVRChannelGroup& group)
 
 /********** Client methods **********/
 
-bool CPVRDatabase::ResetEPG(void)
+bool CPVRDatabase::ResetEPG()
 {
   CSingleLock lock(m_critSection);
   const std::string strQuery = PrepareSQL("UPDATE channels SET idEpg = 0");
diff --git a/xbmc/pvr/PVRDatabase.h b/xbmc/pvr/PVRDatabase.h
index 8ec0b86af1fc..3899c4a3d2fc 100644
--- a/xbmc/pvr/PVRDatabase.h
+++ b/xbmc/pvr/PVRDatabase.h
@@ -31,8 +31,8 @@ namespace PVR
     /*!
      * @brief Create a new instance of the PVR database.
      */
-    CPVRDatabase(void) = default;
-    ~CPVRDatabase(void) override = default;
+    CPVRDatabase() = default;
+    ~CPVRDatabase() override = default;
 
     /*!
      * @brief Open the database.
@@ -94,7 +94,7 @@ namespace PVR
      * @brief Remove all channels from the database.
      * @return True if all channels were removed, false otherwise.
      */
-    bool DeleteChannels(void);
+    bool DeleteChannels();
 
     /*!
      * @brief Add or update a channel entry in the database
@@ -128,7 +128,7 @@ namespace PVR
      * @brief Remove all channel groups from the database
      * @return True if all channel groups were removed.
      */
-    bool DeleteChannelGroups(void);
+    bool DeleteChannelGroups();
 
     /*!
      * @brief Delete a channel group from the database.
@@ -163,7 +163,7 @@ namespace PVR
      * @brief Reset all epg ids to 0
      * @return True when reset, false otherwise.
      */
-    bool ResetEPG(void);
+    bool ResetEPG();
 
     /*! @name Timer methods */
     //@{
diff --git a/xbmc/pvr/PVRManager.cpp b/xbmc/pvr/PVRManager.cpp
index 42b5f71bd575..966af839980d 100644
--- a/xbmc/pvr/PVRManager.cpp
+++ b/xbmc/pvr/PVRManager.cpp
@@ -170,7 +170,7 @@ void CPVRManagerJobQueue::ExecutePendingJobs()
   }
 }
 
-CPVRManager::CPVRManager(void) :
+CPVRManager::CPVRManager() :
     CThread("PVRManager"),
     m_channelGroups(new CPVRChannelGroupsContainer),
     m_recordings(new CPVRRecordings),
@@ -195,7 +195,7 @@ CPVRManager::CPVRManager(void) :
   CLog::LogFC(LOGDEBUG, LOGPVR, "PVR Manager instance created");
 }
 
-CPVRManager::~CPVRManager(void)
+CPVRManager::~CPVRManager()
 {
   m_actionListener.Deinit(*this);
   CServiceBroker::GetAnnouncementManager()->RemoveAnnouncer(this);
@@ -217,7 +217,7 @@ void CPVRManager::Announce(ANNOUNCEMENT::AnnouncementFlag flag, const char* send
   }
 }
 
-std::shared_ptr<CPVRDatabase> CPVRManager::GetTVDatabase(void) const
+std::shared_ptr<CPVRDatabase> CPVRManager::GetTVDatabase() const
 {
   CSingleLock lock(m_critSection);
   if (!m_database || !m_database->IsOpen())
@@ -226,25 +226,25 @@ std::shared_ptr<CPVRDatabase> CPVRManager::GetTVDatabase(void) const
   return m_database;
 }
 
-std::shared_ptr<CPVRChannelGroupsContainer> CPVRManager::ChannelGroups(void) const
+std::shared_ptr<CPVRChannelGroupsContainer> CPVRManager::ChannelGroups() const
 {
   CSingleLock lock(m_critSection);
   return m_channelGroups;
 }
 
-std::shared_ptr<CPVRRecordings> CPVRManager::Recordings(void) const
+std::shared_ptr<CPVRRecordings> CPVRManager::Recordings() const
 {
   CSingleLock lock(m_critSection);
   return m_recordings;
 }
 
-std::shared_ptr<CPVRTimers> CPVRManager::Timers(void) const
+std::shared_ptr<CPVRTimers> CPVRManager::Timers() const
 {
   CSingleLock lock(m_critSection);
   return m_timers;
 }
 
-std::shared_ptr<CPVRClients> CPVRManager::Clients(void) const
+std::shared_ptr<CPVRClients> CPVRManager::Clients() const
 {
   // note: m_addons is const (only set/reset in ctor/dtor). no need for a lock here.
   return m_addons;
@@ -286,7 +286,7 @@ std::shared_ptr<CPVRClient> CPVRManager::GetClient(int iClientId) const
   return client;
 }
 
-std::shared_ptr<CPVRGUIActions> CPVRManager::GUIActions(void) const
+std::shared_ptr<CPVRGUIActions> CPVRManager::GUIActions() const
 {
   // note: m_guiActions is const (only set/reset in ctor/dtor). no need for a lock here.
   return m_guiActions;
@@ -304,7 +304,7 @@ CPVREpgContainer& CPVRManager::EpgContainer()
   return m_epgContainer;
 }
 
-void CPVRManager::Clear(void)
+void CPVRManager::Clear()
 {
   m_pendingUpdates->Clear();
   m_epgContainer.Clear();
@@ -322,7 +322,7 @@ void CPVRManager::Clear(void)
   m_bEpgsCreated = false;
 }
 
-void CPVRManager::ResetProperties(void)
+void CPVRManager::ResetProperties()
 {
   CSingleLock lock(m_critSection);
   Clear();
@@ -371,7 +371,7 @@ void CPVRManager::Start()
   SetPriority(-1);
 }
 
-void CPVRManager::Stop(void)
+void CPVRManager::Stop()
 {
   CSingleLock initLock(m_startStopMutex);
 
@@ -423,7 +423,7 @@ void CPVRManager::Deinit()
   m_addons.reset();
 }
 
-CPVRManager::ManagerState CPVRManager::GetState(void) const
+CPVRManager::ManagerState CPVRManager::GetState() const
 {
   CSingleLock lock(m_managerStateMutex);
   return m_managerState;
@@ -472,7 +472,7 @@ void CPVRManager::PublishEvent(PVREvent event)
   m_events.Publish(event);
 }
 
-void CPVRManager::Process(void)
+void CPVRManager::Process()
 {
   m_addons->Continue();
   m_database->Open();
@@ -549,7 +549,7 @@ void CPVRManager::Process(void)
   CLog::LogFC(LOGDEBUG, LOGPVR, "PVR Manager leaving main loop");
 }
 
-bool CPVRManager::SetWakeupCommand(void)
+bool CPVRManager::SetWakeupCommand()
 {
 #if !defined(TARGET_DARWIN_EMBEDDED) && !defined(TARGET_WINDOWS_STORE)
   if (!m_settings.GetBoolValue(CSettings::SETTING_PVRPOWERMANAGEMENT_ENABLED))
@@ -648,7 +648,7 @@ void CPVRManager::UnloadComponents()
   m_channelGroups->Unload();
 }
 
-void CPVRManager::TriggerPlayChannelOnStartup(void)
+void CPVRManager::TriggerPlayChannelOnStartup()
 {
   if (IsStarted())
   {
@@ -724,7 +724,7 @@ void CPVRManager::OnPlaybackEnded(const CFileItemPtr item)
   OnPlaybackStopped(item);
 }
 
-void CPVRManager::LocalizationChanged(void)
+void CPVRManager::LocalizationChanged()
 {
   CSingleLock lock(m_critSection);
   if (IsStarted())
@@ -734,7 +734,7 @@ void CPVRManager::LocalizationChanged(void)
   }
 }
 
-bool CPVRManager::EpgsCreated(void) const
+bool CPVRManager::EpgsCreated() const
 {
   CSingleLock lock(m_critSection);
   return m_bEpgsCreated;
@@ -810,7 +810,7 @@ void CPVRManager::ConnectionStateChange(CPVRClient* client,
   });
 }
 
-bool CPVRManager::CreateChannelEpgs(void)
+bool CPVRManager::CreateChannelEpgs()
 {
   if (EpgsCreated())
     return true;
diff --git a/xbmc/pvr/PVRManager.h b/xbmc/pvr/PVRManager.h
index 2ad049f9c524..1ffc6dda728d 100644
--- a/xbmc/pvr/PVRManager.h
+++ b/xbmc/pvr/PVRManager.h
@@ -86,12 +86,12 @@ namespace PVR
     /*!
      * @brief Create a new CPVRManager instance, which handles all PVR related operations in XBMC.
      */
-    CPVRManager(void);
+    CPVRManager();
 
     /*!
      * @brief Stop the PVRManager and destroy all objects it created.
      */
-    ~CPVRManager(void) override;
+    ~CPVRManager() override;
 
     void Announce(ANNOUNCEMENT::AnnouncementFlag flag, const char* sender, const char* message, const CVariant& data) override;
 
@@ -99,25 +99,25 @@ namespace PVR
      * @brief Get the channel groups container.
      * @return The groups container.
      */
-    std::shared_ptr<CPVRChannelGroupsContainer> ChannelGroups(void) const;
+    std::shared_ptr<CPVRChannelGroupsContainer> ChannelGroups() const;
 
     /*!
      * @brief Get the recordings container.
      * @return The recordings container.
      */
-    std::shared_ptr<CPVRRecordings> Recordings(void) const;
+    std::shared_ptr<CPVRRecordings> Recordings() const;
 
     /*!
      * @brief Get the timers container.
      * @return The timers container.
      */
-    std::shared_ptr<CPVRTimers> Timers(void) const;
+    std::shared_ptr<CPVRTimers> Timers() const;
 
     /*!
      * @brief Get the timers container.
      * @return The timers container.
      */
-    std::shared_ptr<CPVRClients> Clients(void) const;
+    std::shared_ptr<CPVRClients> Clients() const;
 
     /*!
      * @brief Get the instance of a client that matches the given item.
@@ -137,7 +137,7 @@ namespace PVR
      * @brief Get access to the pvr gui actions.
      * @return The gui actions.
      */
-    std::shared_ptr<CPVRGUIActions> GUIActions(void) const;
+    std::shared_ptr<CPVRGUIActions> GUIActions() const;
 
     /*!
      * @brief Get access to the pvr playback state.
@@ -154,7 +154,7 @@ namespace PVR
     /*!
      * @brief Init PVRManager.
      */
-    void Init(void);
+    void Init();
 
     /*!
      * @brief Start the PVRManager, which loads all PVR data and starts some threads to update the PVR data.
@@ -164,7 +164,7 @@ namespace PVR
     /*!
      * @brief Stop PVRManager.
      */
-    void Stop(void);
+    void Stop();
 
     /*!
      * @brief Stop PVRManager, unload data.
@@ -190,12 +190,12 @@ namespace PVR
      * @brief Get the TV database.
      * @return The TV database.
      */
-    std::shared_ptr<CPVRDatabase> GetTVDatabase(void) const;
+    std::shared_ptr<CPVRDatabase> GetTVDatabase() const;
 
     /*!
      * @return True while the PVRManager is initialising.
      */
-    inline bool IsInitialising(void) const
+    inline bool IsInitialising() const
     {
       return GetState() == ManagerStateStarting;
     }
@@ -204,7 +204,7 @@ namespace PVR
      * @brief Check whether the PVRManager has fully started.
      * @return True if started, false otherwise.
      */
-    inline bool IsStarted(void) const
+    inline bool IsStarted() const
     {
       return GetState() == ManagerStateStarted;
     }
@@ -213,7 +213,7 @@ namespace PVR
      * @brief Check whether the PVRManager is stopping
      * @return True while the PVRManager is stopping.
      */
-    inline bool IsStopping(void) const
+    inline bool IsStopping() const
     {
       return GetState() == ManagerStateStopping;
     }
@@ -222,7 +222,7 @@ namespace PVR
      * @brief Check whether the PVRManager has been stopped.
      * @return True if stopped, false otherwise.
      */
-    inline bool IsStopped(void) const
+    inline bool IsStopped() const
     {
       return GetState() == ManagerStateStopped;
     }
@@ -231,7 +231,7 @@ namespace PVR
      * @brief Check whether EPG tags for channels have been created.
      * @return True if EPG tags have been created, false otherwise.
      */
-    bool EpgsCreated(void) const;
+    bool EpgsCreated() const;
 
     /*!
      * @brief Inform PVR manager that playback of an item just started.
@@ -255,37 +255,37 @@ namespace PVR
      * @brief Check whether there are active recordings.
      * @return True if there are active recordings, false otherwise.
      */
-    bool IsRecording(void) const;
+    bool IsRecording() const;
 
     /*!
      * @brief Let the background thread create epg tags for all channels.
      */
-    void TriggerEpgsCreate(void);
+    void TriggerEpgsCreate();
 
     /*!
      * @brief Let the background thread update the recordings list.
      */
-    void TriggerRecordingsUpdate(void);
+    void TriggerRecordingsUpdate();
 
     /*!
      * @brief Let the background thread update the timer list.
      */
-    void TriggerTimersUpdate(void);
+    void TriggerTimersUpdate();
 
     /*!
      * @brief Let the background thread update the channel list.
      */
-    void TriggerChannelsUpdate(void);
+    void TriggerChannelsUpdate();
 
     /*!
      * @brief Let the background thread update the channel groups list.
      */
-    void TriggerChannelGroupsUpdate(void);
+    void TriggerChannelGroupsUpdate();
 
     /*!
      * @brief Let the background thread search for all missing channel icons.
      */
-    void TriggerSearchMissingChannelIcons(void);
+    void TriggerSearchMissingChannelIcons();
 
     /*!
      * @brief Let the background thread search for missing channel icons for channels contained in the given group.
@@ -296,7 +296,7 @@ namespace PVR
     /*!
      * @brief Check whether names are still correct after the language settings changed.
      */
-    void LocalizationChanged(void);
+    void LocalizationChanged();
 
     /*!
      * @brief Check if parental lock is overridden at the given moment.
@@ -321,7 +321,7 @@ namespace PVR
      * @brief Create EPG tags for all channels in internal channel groups
      * @return True if EPG tags where created successfully, false otherwise
      */
-    bool CreateChannelEpgs(void);
+    bool CreateChannelEpgs();
 
     /*!
      * @brief Signal a connection change of a client
@@ -346,13 +346,13 @@ namespace PVR
     /*!
      * @brief PVR update and control thread.
      */
-    void Process(void) override;
+    void Process() override;
 
   private:
     /*!
      * @brief Executes "pvrpowermanagement.setwakeupcmd"
      */
-    bool SetWakeupCommand(void);
+    bool SetWakeupCommand();
 
     /*!
      * @brief Load at least one client and load all other PVR data (channelgroups, timers, recordings) after loading the client.
@@ -369,17 +369,17 @@ namespace PVR
     /*!
      * @brief Reset all properties.
      */
-    void ResetProperties(void);
+    void ResetProperties();
 
     /*!
      * @brief Destroy PVRManager's objects.
      */
-    void Clear(void);
+    void Clear();
 
     /*!
      * @brief Continue playback on the last played channel.
      */
-    void TriggerPlayChannelOnStartup(void);
+    void TriggerPlayChannelOnStartup();
 
     enum ManagerState
     {
@@ -395,7 +395,7 @@ namespace PVR
      * @brief Get the current state of the PVR manager.
      * @return the state.
      */
-    ManagerState GetState(void) const;
+    ManagerState GetState() const;
 
     /*!
      * @brief Set the current state of the PVR manager.
diff --git a/xbmc/pvr/addons/PVRClient.cpp b/xbmc/pvr/addons/PVRClient.cpp
index 02fb7cf35426..e00534d8c17b 100644
--- a/xbmc/pvr/addons/PVRClient.cpp
+++ b/xbmc/pvr/addons/PVRClient.cpp
@@ -61,7 +61,7 @@ CPVRClient::CPVRClient(const AddonInfoPtr& addonInfo)
   ResetProperties();
 }
 
-CPVRClient::~CPVRClient(void)
+CPVRClient::~CPVRClient()
 {
   Destroy();
 }
@@ -166,12 +166,12 @@ ADDON_STATUS CPVRClient::Create(int iClientId)
   return status;
 }
 
-bool CPVRClient::DllLoaded(void) const
+bool CPVRClient::DllLoaded() const
 {
   return CAddonDll::DllLoaded();
 }
 
-void CPVRClient::Destroy(void)
+void CPVRClient::Destroy()
 {
   if (!m_bReadyToUse)
     return;
@@ -202,7 +202,7 @@ void CPVRClient::Continue()
   m_bBlockAddonCalls = false;
 }
 
-void CPVRClient::ReCreate(void)
+void CPVRClient::ReCreate()
 {
   int iClientID(m_iClientId);
   Destroy();
@@ -211,12 +211,12 @@ void CPVRClient::ReCreate(void)
   Create(iClientID);
 }
 
-bool CPVRClient::ReadyToUse(void) const
+bool CPVRClient::ReadyToUse() const
 {
   return m_bReadyToUse;
 }
 
-PVR_CONNECTION_STATE CPVRClient::GetConnectionState(void) const
+PVR_CONNECTION_STATE CPVRClient::GetConnectionState() const
 {
   CSingleLock lock(m_critSection);
   return m_connectionState;
@@ -236,19 +236,19 @@ void CPVRClient::SetConnectionState(PVR_CONNECTION_STATE state)
     m_ignoreClient = true;
 }
 
-PVR_CONNECTION_STATE CPVRClient::GetPreviousConnectionState(void) const
+PVR_CONNECTION_STATE CPVRClient::GetPreviousConnectionState() const
 {
   CSingleLock lock(m_critSection);
   return m_prevConnectionState;
 }
 
-bool CPVRClient::IgnoreClient(void) const
+bool CPVRClient::IgnoreClient() const
 {
   CSingleLock lock(m_critSection);
   return m_ignoreClient;
 }
 
-int CPVRClient::GetID(void) const
+int CPVRClient::GetID() const
 {
   return m_iClientId;
 }
@@ -367,7 +367,7 @@ void CPVRClient::WriteClientChannelInfo(const std::shared_ptr<CPVRChannel>& xbmc
   strncpy(addonChannel.strInputFormat, xbmcChannel->InputFormat().c_str(), sizeof(addonChannel.strInputFormat) - 1);
 }
 
-bool CPVRClient::GetAddonProperties(void)
+bool CPVRClient::GetAddonProperties()
 {
   std::string strBackendName, strConnectionString, strFriendlyName, strBackendVersion, strBackendHostname;
   PVR_ADDON_CAPABILITIES addonCapabilities = {};
@@ -509,27 +509,27 @@ bool CPVRClient::GetAddonProperties(void)
   return retVal == PVR_ERROR_NO_ERROR;
 }
 
-const std::string& CPVRClient::GetBackendName(void) const
+const std::string& CPVRClient::GetBackendName() const
 {
   return m_strBackendName;
 }
 
-const std::string& CPVRClient::GetBackendVersion(void) const
+const std::string& CPVRClient::GetBackendVersion() const
 {
   return m_strBackendVersion;
 }
 
-const std::string& CPVRClient::GetBackendHostname(void) const
+const std::string& CPVRClient::GetBackendHostname() const
 {
   return m_strBackendHostname;
 }
 
-const std::string& CPVRClient::GetConnectionString(void) const
+const std::string& CPVRClient::GetConnectionString() const
 {
   return m_strConnectionString;
 }
 
-const std::string& CPVRClient::GetFriendlyName(void) const
+const std::string& CPVRClient::GetFriendlyName() const
 {
   return m_strFriendlyName;
 }
@@ -553,7 +553,7 @@ PVR_ERROR CPVRClient::GetDriveSpace(long long& iTotal, long long& iUsed)
   });
 }
 
-PVR_ERROR CPVRClient::StartChannelScan(void)
+PVR_ERROR CPVRClient::StartChannelScan()
 {
   return DoAddonCall(__FUNCTION__, [](const AddonInstance* addon) {
     return addon->OpenDialogChannelScan();
@@ -1707,7 +1707,7 @@ void CPVRClient::cb_epg_event_state_change(void* kodiInstance, EPG_TAG* tag, EPG
 class CCodecIds
 {
 public:
-  virtual ~CCodecIds(void) = default;
+  virtual ~CCodecIds() = default;
 
   static CCodecIds& GetInstance()
   {
@@ -1732,7 +1732,7 @@ class CCodecIds
   }
 
 private:
-  CCodecIds(void)
+  CCodecIds()
   {
     // get ids and names
     const AVCodec* codec = nullptr;
diff --git a/xbmc/pvr/addons/PVRClient.h b/xbmc/pvr/addons/PVRClient.h
index ad879e79e4d0..e3c89d40e0f8 100644
--- a/xbmc/pvr/addons/PVRClient.h
+++ b/xbmc/pvr/addons/PVRClient.h
@@ -215,7 +215,7 @@ namespace PVR
   {
   public:
     explicit CPVRClient(const ADDON::AddonInfoPtr& addonInfo);
-    ~CPVRClient(void) override;
+    ~CPVRClient() override;
 
     void OnPreInstall() override;
     void OnPreUnInstall() override;
@@ -233,7 +233,7 @@ namespace PVR
     /*!
      * @return True when the dll for this add-on was loaded, false otherwise (e.g. unresolved symbols)
      */
-    bool DllLoaded(void) const;
+    bool DllLoaded() const;
 
     /*!
      * @brief Stop this add-on instance. No more client add-on access after this call.
@@ -248,23 +248,23 @@ namespace PVR
     /*!
      * @brief Destroy the instance of this add-on.
      */
-    void Destroy(void);
+    void Destroy();
 
     /*!
      * @brief Destroy and recreate this add-on.
      */
-    void ReCreate(void);
+    void ReCreate();
 
     /*!
      * @return True if this instance is initialised (ADDON_Create returned true), false otherwise.
      */
-    bool ReadyToUse(void) const;
+    bool ReadyToUse() const;
 
     /*!
      * @brief Gets the backend connection state.
      * @return the backend connection state.
      */
-    PVR_CONNECTION_STATE GetConnectionState(void) const;
+    PVR_CONNECTION_STATE GetConnectionState() const;
 
     /*!
      * @brief Sets the backend connection state.
@@ -276,18 +276,18 @@ namespace PVR
      * @brief Gets the backend's previous connection state.
      * @return the backend's previous connection state.
      */
-    PVR_CONNECTION_STATE GetPreviousConnectionState(void) const;
+    PVR_CONNECTION_STATE GetPreviousConnectionState() const;
 
     /*!
      * @brief signal to PVRManager this client should be ignored
      * @return true if this client should be ignored
      */
-    bool IgnoreClient(void) const;
+    bool IgnoreClient() const;
 
     /*!
      * @return The ID of this instance.
      */
-    int GetID(void) const;
+    int GetID() const;
 
     //@}
     /** @name PVR server methods */
@@ -297,7 +297,7 @@ namespace PVR
      * @brief Query this add-on's capabilities.
      * @return The add-on's capabilities.
      */
-    const CPVRClientCapabilities& GetClientCapabilities(void) const { return m_clientCapabilities; }
+    const CPVRClientCapabilities& GetClientCapabilities() const { return m_clientCapabilities; }
 
     /*!
      * @brief Get the stream properties of the stream that's currently being read.
@@ -309,27 +309,27 @@ namespace PVR
     /*!
      * @return The name reported by the backend.
      */
-    const std::string& GetBackendName(void) const;
+    const std::string& GetBackendName() const;
 
     /*!
      * @return The version string reported by the backend.
      */
-    const std::string& GetBackendVersion(void) const;
+    const std::string& GetBackendVersion() const;
 
     /*!
      * @brief the ip address or alias of the pvr backend server
      */
-    const std::string& GetBackendHostname(void) const;
+    const std::string& GetBackendHostname() const;
 
     /*!
      * @return The connection string reported by the backend.
      */
-    const std::string& GetConnectionString(void) const;
+    const std::string& GetConnectionString() const;
 
     /*!
      * @return A friendly name for this add-on that can be used in log messages.
      */
-    const std::string& GetFriendlyName(void) const;
+    const std::string& GetFriendlyName() const;
 
     /*!
      * @brief Get the disk space reported by the server.
@@ -343,7 +343,7 @@ namespace PVR
      * @brief Start a channel scan on the server.
      * @return PVR_ERROR_NO_ERROR if the channel scan has been started successfully.
      */
-    PVR_ERROR StartChannelScan(void);
+    PVR_ERROR StartChannelScan();
 
     /*!
      * @brief Request the client to open dialog about given channel to add
@@ -815,7 +815,7 @@ namespace PVR
      * @brief reads the client's properties.
      * @return True on success, false otherwise.
      */
-    bool GetAddonProperties(void);
+    bool GetAddonProperties();
 
     /*!
      * @brief Get the client's menu hooks.
diff --git a/xbmc/pvr/addons/PVRClients.cpp b/xbmc/pvr/addons/PVRClients.cpp
index 6d19cf0f1967..6c1a1d104253 100644
--- a/xbmc/pvr/addons/PVRClients.cpp
+++ b/xbmc/pvr/addons/PVRClients.cpp
@@ -43,13 +43,13 @@ namespace
 
 } // unnamed namespace
 
-CPVRClients::CPVRClients(void)
+CPVRClients::CPVRClients()
 {
   CServiceBroker::GetAddonMgr().RegisterAddonMgrCallback(ADDON_PVRDLL, this);
   CServiceBroker::GetAddonMgr().Events().Subscribe(this, &CPVRClients::OnAddonEvent);
 }
 
-CPVRClients::~CPVRClients(void)
+CPVRClients::~CPVRClients()
 {
   CServiceBroker::GetAddonMgr().Events().Unsubscribe(this);
   CServiceBroker::GetAddonMgr().UnregisterAddonMgrCallback(ADDON_PVRDLL);
@@ -60,7 +60,7 @@ CPVRClients::~CPVRClients(void)
   }
 }
 
-void CPVRClients::Start(void)
+void CPVRClients::Start()
 {
   UpdateAddons();
 }
@@ -299,7 +299,7 @@ int CPVRClients::GetClientId(const std::string& strId) const
   return -1;
 }
 
-int CPVRClients::CreatedClientAmount(void) const
+int CPVRClients::CreatedClientAmount() const
 {
   int iReturn = 0;
 
@@ -313,7 +313,7 @@ int CPVRClients::CreatedClientAmount(void) const
   return iReturn;
 }
 
-bool CPVRClients::HasCreatedClients(void) const
+bool CPVRClients::HasCreatedClients() const
 {
   CSingleLock lock(m_critSection);
   for (const auto& client : m_clientMap)
@@ -400,7 +400,7 @@ PVR_ERROR CPVRClients::GetCreatedClients(CPVRClientMap& clientsReady, std::vecto
   return clientsNotReady.empty() ? PVR_ERROR_NO_ERROR : PVR_ERROR_SERVER_ERROR;
 }
 
-int CPVRClients::GetFirstCreatedClientID(void)
+int CPVRClients::GetFirstCreatedClientID()
 {
   CSingleLock lock(m_critSection);
   for (const auto& client : m_clientMap)
@@ -412,7 +412,7 @@ int CPVRClients::GetFirstCreatedClientID(void)
   return -1;
 }
 
-int CPVRClients::EnabledClientAmount(void) const
+int CPVRClients::EnabledClientAmount() const
 {
   int iReturn = 0;
 
@@ -528,7 +528,7 @@ PVR_ERROR CPVRClients::GetChannelGroupMembers(CPVRChannelGroup* group, std::vect
   }, failedClients);
 }
 
-std::vector<std::shared_ptr<CPVRClient>> CPVRClients::GetClientsSupportingChannelScan(void) const
+std::vector<std::shared_ptr<CPVRClient>> CPVRClients::GetClientsSupportingChannelScan() const
 {
   std::vector<std::shared_ptr<CPVRClient>> possibleScanClients;
   ForCreatedClients(__FUNCTION__, [&possibleScanClients](const std::shared_ptr<CPVRClient>& client) {
diff --git a/xbmc/pvr/addons/PVRClients.h b/xbmc/pvr/addons/PVRClients.h
index 23256a169c19..ee6e386f3ea9 100644
--- a/xbmc/pvr/addons/PVRClients.h
+++ b/xbmc/pvr/addons/PVRClients.h
@@ -55,13 +55,13 @@ namespace PVR
   class CPVRClients : public ADDON::IAddonMgrCallback
   {
   public:
-    CPVRClients(void);
-    ~CPVRClients(void) override;
+    CPVRClients();
+    ~CPVRClients() override;
 
     /*!
      * @brief Start all clients.
      */
-    void Start(void);
+    void Start();
 
     /*!
      * @brief Stop all clients.
@@ -120,13 +120,13 @@ namespace PVR
      * @brief Get the number of created clients.
      * @return The amount of created clients.
      */
-    int CreatedClientAmount(void) const;
+    int CreatedClientAmount() const;
 
     /*!
      * @brief Check whether there are any created clients.
      * @return True if at least one client is created.
      */
-    bool HasCreatedClients(void) const;
+    bool HasCreatedClients() const;
 
     /*!
      * @brief Check whether a given client ID points to a created client.
@@ -154,13 +154,13 @@ namespace PVR
      * @brief Get the ID of the first created client.
      * @return the ID or -1 if no clients are created;
      */
-    int GetFirstCreatedClientID(void);
+    int GetFirstCreatedClientID();
 
     /*!
      * @brief Get the number of enabled clients.
      * @return The amount of enabled clients.
      */
-    int EnabledClientAmount(void) const;
+    int EnabledClientAmount() const;
 
     //@}
 
@@ -259,7 +259,7 @@ namespace PVR
      * @brief Get a list of clients providing a channel scan dialog.
      * @return All clients supporting channel scan.
      */
-    std::vector<std::shared_ptr<CPVRClient>> GetClientsSupportingChannelScan(void) const;
+    std::vector<std::shared_ptr<CPVRClient>> GetClientsSupportingChannelScan() const;
 
     /*!
      * @brief Get a list of clients providing a channel settings dialog.
diff --git a/xbmc/pvr/channels/PVRChannel.cpp b/xbmc/pvr/channels/PVRChannel.cpp
index 2211da131cd5..15f7fee967af 100644
--- a/xbmc/pvr/channels/PVRChannel.cpp
+++ b/xbmc/pvr/channels/PVRChannel.cpp
@@ -100,7 +100,7 @@ void CPVRChannel::Serialize(CVariant& value) const
 
 /********** XBMC related channel methods **********/
 
-bool CPVRChannel::Delete(void)
+bool CPVRChannel::Delete()
 {
   bool bReturn = false;
   const std::shared_ptr<CPVRDatabase> database = CServiceBroker::GetPVRManager().GetTVDatabase();
@@ -120,7 +120,7 @@ bool CPVRChannel::Delete(void)
   return bReturn;
 }
 
-std::shared_ptr<CPVREpg> CPVRChannel::GetEPG(void) const
+std::shared_ptr<CPVREpg> CPVRChannel::GetEPG() const
 {
   const_cast<CPVRChannel*>(this)->CreateEPG();
 
@@ -282,7 +282,7 @@ void CPVRChannel::SetRadioRDSInfoTag(const std::shared_ptr<CPVRRadioRDSInfoTag>&
   m_rdsTag = tag;
 }
 
-bool CPVRChannel::HasArchive(void) const
+bool CPVRChannel::HasArchive() const
 {
   CSingleLock lock(m_critSection);
   return m_bHasArchive;
@@ -498,7 +498,7 @@ std::string CPVRChannel::GetEncryptionName(int iCaid)
   return strName;
 }
 
-void CPVRChannel::UpdateEncryptionName(void)
+void CPVRChannel::UpdateEncryptionName()
 {
   CSingleLock lock(m_critSection);
   m_strClientEncryptionName = GetEncryptionName(m_iClientEncryptionSystem);
@@ -649,37 +649,37 @@ void CPVRChannel::ToSortable(SortItem& sortable, Field field) const
   }
 }
 
-int CPVRChannel::ChannelID(void) const
+int CPVRChannel::ChannelID() const
 {
   CSingleLock lock(m_critSection);
   return m_iChannelId;
 }
 
-bool CPVRChannel::IsNew(void) const
+bool CPVRChannel::IsNew() const
 {
   CSingleLock lock(m_critSection);
   return m_iChannelId <= 0;
 }
 
-bool CPVRChannel::IsHidden(void) const
+bool CPVRChannel::IsHidden() const
 {
   CSingleLock lock(m_critSection);
   return m_bIsHidden;
 }
 
-bool CPVRChannel::IsLocked(void) const
+bool CPVRChannel::IsLocked() const
 {
   CSingleLock lock(m_critSection);
   return m_bIsLocked;
 }
 
-std::string CPVRChannel::IconPath(void) const
+std::string CPVRChannel::IconPath() const
 {
   CSingleLock lock(m_critSection);
   return m_strIconPath;
 }
 
-bool CPVRChannel::IsUserSetIcon(void) const
+bool CPVRChannel::IsUserSetIcon() const
 {
   CSingleLock lock(m_critSection);
   return m_bIsUserSetIcon;
@@ -691,13 +691,13 @@ bool CPVRChannel::IsUserSetName() const
   return m_bIsUserSetName;
 }
 
-std::string CPVRChannel::ChannelName(void) const
+std::string CPVRChannel::ChannelName() const
 {
   CSingleLock lock(m_critSection);
   return m_strChannelName;
 }
 
-time_t CPVRChannel::LastWatched(void) const
+time_t CPVRChannel::LastWatched() const
 {
   CSingleLock lock(m_critSection);
   return m_iLastWatched;
@@ -715,12 +715,12 @@ void CPVRChannel::Persisted()
   m_bChanged = false;
 }
 
-int CPVRChannel::UniqueID(void) const
+int CPVRChannel::UniqueID() const
 {
   return m_iUniqueId;
 }
 
-int CPVRChannel::ClientID(void) const
+int CPVRChannel::ClientID() const
 {
   CSingleLock lock(m_critSection);
   return m_iClientId;
@@ -732,43 +732,43 @@ const CPVRChannelNumber& CPVRChannel::ClientChannelNumber() const
   return m_clientChannelNumber;
 }
 
-std::string CPVRChannel::ClientChannelName(void) const
+std::string CPVRChannel::ClientChannelName() const
 {
   CSingleLock lock(m_critSection);
   return m_strClientChannelName;
 }
 
-std::string CPVRChannel::InputFormat(void) const
+std::string CPVRChannel::InputFormat() const
 {
   CSingleLock lock(m_critSection);
   return m_strInputFormat;
 }
 
-std::string CPVRChannel::Path(void) const
+std::string CPVRChannel::Path() const
 {
   CSingleLock lock(m_critSection);
   return m_strFileNameAndPath;
 }
 
-bool CPVRChannel::IsEncrypted(void) const
+bool CPVRChannel::IsEncrypted() const
 {
   CSingleLock lock(m_critSection);
   return m_iClientEncryptionSystem > 0;
 }
 
-int CPVRChannel::EncryptionSystem(void) const
+int CPVRChannel::EncryptionSystem() const
 {
   CSingleLock lock(m_critSection);
   return m_iClientEncryptionSystem;
 }
 
-std::string CPVRChannel::EncryptionName(void) const
+std::string CPVRChannel::EncryptionName() const
 {
   CSingleLock lock(m_critSection);
   return m_strClientEncryptionName;
 }
 
-int CPVRChannel::EpgID(void) const
+int CPVRChannel::EpgID() const
 {
   CSingleLock lock(m_critSection);
   return m_iEpgId;
@@ -785,19 +785,19 @@ void CPVRChannel::SetEpgID(int iEpgId)
   }
 }
 
-bool CPVRChannel::EPGEnabled(void) const
+bool CPVRChannel::EPGEnabled() const
 {
   CSingleLock lock(m_critSection);
   return m_bEPGEnabled;
 }
 
-std::string CPVRChannel::EPGScraper(void) const
+std::string CPVRChannel::EPGScraper() const
 {
   CSingleLock lock(m_critSection);
   return m_strEPGScraper;
 }
 
-bool CPVRChannel::CanRecord(void) const
+bool CPVRChannel::CanRecord() const
 {
   const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
   return client && client->GetClientCapabilities().SupportsRecordings();
diff --git a/xbmc/pvr/channels/PVRChannel.h b/xbmc/pvr/channels/PVRChannel.h
index e29836742833..ef98b405c657 100644
--- a/xbmc/pvr/channels/PVRChannel.h
+++ b/xbmc/pvr/channels/PVRChannel.h
@@ -48,7 +48,7 @@ namespace PVR
      * @brief Delete this channel from the database and delete the corresponding EPG table if it exists.
      * @return True if it was deleted successfully, false otherwise.
      */
-    bool Delete(void);
+    bool Delete();
 
     /*!
      * @brief Update this channel tag with the data of the given channel tag.
@@ -66,12 +66,12 @@ namespace PVR
     /*!
      * @return The identifier given to this channel by the TV database.
      */
-    int ChannelID(void) const;
+    int ChannelID() const;
 
     /*!
      * @return True when not persisted yet, false otherwise.
      */
-    bool IsNew(void) const;
+    bool IsNew() const;
 
     /*!
      * @brief Set the identifier for this channel.
@@ -101,12 +101,12 @@ namespace PVR
     /*!
      * @return True if this channel is a radio channel, false if not.
      */
-    bool IsRadio(void) const { return m_bIsRadio; }
+    bool IsRadio() const { return m_bIsRadio; }
 
     /*!
      * @return True if this channel is hidden. False if not.
      */
-    bool IsHidden(void) const;
+    bool IsHidden() const;
 
     /*!
      * @brief Set to true to hide this channel. Set to false to unhide it.
@@ -121,7 +121,7 @@ namespace PVR
     /*!
      * @return True if this channel is locked. False if not.
      */
-    bool IsLocked(void) const;
+    bool IsLocked() const;
 
     /*!
      * @brief Set to true to lock this channel. Set to false to unlock it.
@@ -148,22 +148,22 @@ namespace PVR
     /*!
      * @return True if this channel has archive support, false otherwise
      */
-    bool HasArchive(void) const;
+    bool HasArchive() const;
 
     /*!
      * @return The path to the icon for this channel.
      */
-    std::string IconPath(void) const;
+    std::string IconPath() const;
 
     /*!
      * @return True if this user changed icon via GUI. False if not.
      */
-    bool IsUserSetIcon(void) const;
+    bool IsUserSetIcon() const;
 
     /*!
      * @return whether the user has changed the channel name through the GUI
      */
-    bool IsUserSetName(void) const;
+    bool IsUserSetName() const;
 
     /*!
      * @brief Set the path to the icon for this channel.
@@ -176,7 +176,7 @@ namespace PVR
     /*!
      * @return The name for this channel used by XBMC.
      */
-    std::string ChannelName(void) const;
+    std::string ChannelName() const;
 
     /*!
      * @brief Set the name for this channel used by XBMC.
@@ -224,12 +224,12 @@ namespace PVR
      *
      * @return The Unique ID.
      */
-    int UniqueID(void) const;
+    int UniqueID() const;
 
     /*!
      * @return The identifier of the client that serves this channel.
      */
-    int ClientID(void) const;
+    int ClientID() const;
 
     /*!
      * @brief Set the identifier of the client that serves this channel.
@@ -247,7 +247,7 @@ namespace PVR
     /*!
      * @return The name of this channel on the client.
      */
-    std::string ClientChannelName(void) const;
+    std::string ClientChannelName() const;
 
     /*!
      * @brief The stream input type
@@ -259,13 +259,13 @@ namespace PVR
      *
      * @return The stream input type
      */
-    std::string InputFormat(void) const;
+    std::string InputFormat() const;
 
     /*!
      * @brief The path in the XBMC VFS to be used by PVRManager to open and read the stream.
      * @return The path in the XBMC VFS to be used by PVRManager to open and read the stream.
      */
-    std::string Path(void) const;
+    std::string Path() const;
 
     // ISortable implementation
     void ToSortable(SortItem& sortable, Field field) const override;
@@ -279,7 +279,7 @@ namespace PVR
     /*!
      * @return Storage id for this channel in CPVRChannelGroup
      */
-    std::pair<int, int> StorageId(void) const { return std::make_pair(m_iClientId, m_iUniqueId); }
+    std::pair<int, int> StorageId() const { return std::make_pair(m_iClientId, m_iUniqueId); }
 
     /*!
      * @brief Return true if this channel is encrypted.
@@ -289,7 +289,7 @@ namespace PVR
      *
      * @return Return true if this channel is encrypted.
      */
-    bool IsEncrypted(void) const;
+    bool IsEncrypted() const;
 
     /*!
      * @brief Return the encryption system ID for this channel. 0 for FTA.
@@ -299,12 +299,12 @@ namespace PVR
      *
      * @return Return the encryption system ID for this channel.
      */
-    int EncryptionSystem(void) const;
+    int EncryptionSystem() const;
 
     /*!
      * @return A friendly name for the used encryption system.
      */
-    std::string EncryptionName(void) const;
+    std::string EncryptionName() const;
     //@}
 
     /*! @name EPG methods
@@ -314,7 +314,7 @@ namespace PVR
     /*!
      * @return The ID of the EPG table to use for this channel or -1 if it isn't set.
      */
-    int EpgID(void) const;
+    int EpgID() const;
 
     /*!
      * @brief Change the id of the epg that is linked to this channel
@@ -332,7 +332,7 @@ namespace PVR
      * @brief Get the EPG table for this channel.
      * @return The EPG for this channel.
      */
-    std::shared_ptr<CPVREpg> GetEPG(void) const;
+    std::shared_ptr<CPVREpg> GetEPG() const;
 
     /*!
      * @brief Get the EPG tags for this channel.
@@ -344,7 +344,7 @@ namespace PVR
      * @brief Clear the EPG for this channel.
      * @return True if it was cleared, false if not.
      */
-    bool ClearEPG(void) const;
+    bool ClearEPG() const;
 
     /*!
      * @brief Get the EPG tag that is now active on this channel.
@@ -379,7 +379,7 @@ namespace PVR
     /*!
      * @return Don't use an EPG for this channel if set to false.
      */
-    bool EPGEnabled(void) const;
+    bool EPGEnabled() const;
 
     /*!
      * @brief Set to true if an EPG should be used for this channel. Set to false otherwise.
@@ -396,7 +396,7 @@ namespace PVR
      *
      * @return The name of the scraper to be used for this channel.
      */
-    std::string EPGScraper(void) const;
+    std::string EPGScraper() const;
 
     /*!
      * @brief Set the name of the scraper to be used for this channel.
@@ -409,7 +409,7 @@ namespace PVR
      */
     bool SetEPGScraper(const std::string& strScraper);
 
-    bool CanRecord(void) const;
+    bool CanRecord() const;
 
     static std::string GetEncryptionName(int iCaid);
 
@@ -433,7 +433,7 @@ namespace PVR
     /*!
      * @brief Update the encryption name after SetEncryptionSystem() has been called.
      */
-    void UpdateEncryptionName(void);
+    void UpdateEncryptionName();
 
     /*! @name XBMC related channel data
      */
diff --git a/xbmc/pvr/channels/PVRChannelGroup.cpp b/xbmc/pvr/channels/PVRChannelGroup.cpp
index 5ab642de691f..ac082b820bd5 100644
--- a/xbmc/pvr/channels/PVRChannelGroup.cpp
+++ b/xbmc/pvr/channels/PVRChannelGroup.cpp
@@ -55,7 +55,7 @@ CPVRChannelGroup::CPVRChannelGroup(const PVR_CHANNEL_GROUP& group,
   OnInit();
 }
 
-CPVRChannelGroup::~CPVRChannelGroup(void)
+CPVRChannelGroup::~CPVRChannelGroup()
 {
   CServiceBroker::GetSettingsComponent()->GetSettings()->UnregisterCallback(this);
   Unload();
@@ -76,7 +76,7 @@ bool CPVRChannelGroup::operator!=(const CPVRChannelGroup& right) const
 
 std::shared_ptr<PVRChannelGroupMember> CPVRChannelGroup::EmptyMember = std::make_shared<PVRChannelGroupMember>();
 
-void CPVRChannelGroup::OnInit(void)
+void CPVRChannelGroup::OnInit()
 {
   CServiceBroker::GetSettingsComponent()->GetSettings()->RegisterCallback(this, {
     CSettings::SETTING_PVRMANAGER_BACKENDCHANNELORDER,
@@ -118,7 +118,7 @@ bool CPVRChannelGroup::Load(std::vector<std::shared_ptr<CPVRChannel>>& channelsT
   return true;
 }
 
-void CPVRChannelGroup::Unload(void)
+void CPVRChannelGroup::Unload()
 {
   CSingleLock lock(m_critSection);
   m_sortedMembers.clear();
@@ -212,7 +212,7 @@ void CPVRChannelGroup::Sort()
     SortByChannelNumber();
 }
 
-bool CPVRChannelGroup::SortAndRenumber(void)
+bool CPVRChannelGroup::SortAndRenumber()
 {
   if (PreventSortAndRenumber())
     return true;
@@ -224,14 +224,14 @@ bool CPVRChannelGroup::SortAndRenumber(void)
   return bReturn;
 }
 
-void CPVRChannelGroup::SortByClientChannelNumber(void)
+void CPVRChannelGroup::SortByClientChannelNumber()
 {
   CSingleLock lock(m_critSection);
   if (!PreventSortAndRenumber())
     sort(m_sortedMembers.begin(), m_sortedMembers.end(), sortByClientChannelNumber());
 }
 
-void CPVRChannelGroup::SortByChannelNumber(void)
+void CPVRChannelGroup::SortByChannelNumber()
 {
   CSingleLock lock(m_critSection);
   if (!PreventSortAndRenumber())
@@ -468,7 +468,7 @@ int CPVRChannelGroup::LoadFromDb(bool bCompress /* = false */)
   return Size() - iChannelCount;
 }
 
-bool CPVRChannelGroup::LoadFromClients(void)
+bool CPVRChannelGroup::LoadFromClients()
 {
   /* get the channels from the backends */
   return CServiceBroker::GetPVRManager().Clients()->GetChannelGroupMembers(this, m_failedClientsForChannelGroupMembers) == PVR_ERROR_NO_ERROR;
@@ -709,7 +709,7 @@ bool CPVRChannelGroup::IsGroupMember(int iChannelId) const
   return false;
 }
 
-bool CPVRChannelGroup::Persist(void)
+bool CPVRChannelGroup::Persist()
 {
   bool bReturn(true);
   const std::shared_ptr<CPVRDatabase> database(CServiceBroker::GetPVRManager().GetTVDatabase());
@@ -740,7 +740,7 @@ bool CPVRChannelGroup::Persist(void)
   return bReturn;
 }
 
-bool CPVRChannelGroup::Renumber(void)
+bool CPVRChannelGroup::Renumber()
 {
   if (PreventSortAndRenumber())
     return true;
@@ -800,7 +800,7 @@ bool CPVRChannelGroup::Renumber(void)
   return bReturn;
 }
 
-bool CPVRChannelGroup::HasChangedChannels(void) const
+bool CPVRChannelGroup::HasChangedChannels() const
 {
   CSingleLock lock(m_critSection);
 
@@ -813,7 +813,7 @@ bool CPVRChannelGroup::HasChangedChannels(void) const
   return false;
 }
 
-bool CPVRChannelGroup::HasNewChannels(void) const
+bool CPVRChannelGroup::HasNewChannels() const
 {
   CSingleLock lock(m_critSection);
 
@@ -826,7 +826,7 @@ bool CPVRChannelGroup::HasNewChannels(void) const
   return false;
 }
 
-bool CPVRChannelGroup::HasChanges(void) const
+bool CPVRChannelGroup::HasChanges() const
 {
   CSingleLock lock(m_critSection);
   return m_bChanged || HasNewChannels() || HasChangedChannels();
@@ -964,17 +964,17 @@ CDateTime CPVRChannelGroup::GetEPGDate(EpgDateType epgDateType) const
   return date;
 }
 
-CDateTime CPVRChannelGroup::GetFirstEPGDate(void) const
+CDateTime CPVRChannelGroup::GetFirstEPGDate() const
 {
   return GetEPGDate(EPG_FIRST_DATE);
 }
 
-CDateTime CPVRChannelGroup::GetLastEPGDate(void) const
+CDateTime CPVRChannelGroup::GetLastEPGDate() const
 {
   return GetEPGDate(EPG_LAST_DATE);
 }
 
-int CPVRChannelGroup::GroupID(void) const
+int CPVRChannelGroup::GroupID() const
 {
   return m_iGroupId;
 }
@@ -990,12 +990,12 @@ void CPVRChannelGroup::SetGroupType(int iGroupType)
   m_iGroupType = iGroupType;
 }
 
-int CPVRChannelGroup::GroupType(void) const
+int CPVRChannelGroup::GroupType() const
 {
   return m_iGroupType;
 }
 
-std::string CPVRChannelGroup::GroupName(void) const
+std::string CPVRChannelGroup::GroupName() const
 {
   CSingleLock lock(m_critSection);
   return m_path.GetGroupName();
@@ -1018,7 +1018,7 @@ bool CPVRChannelGroup::IsRadio() const
   return m_path.IsRadio();
 }
 
-time_t CPVRChannelGroup::LastWatched(void) const
+time_t CPVRChannelGroup::LastWatched() const
 {
   CSingleLock lock(m_critSection);
   return m_iLastWatched;
@@ -1042,7 +1042,7 @@ bool CPVRChannelGroup::SetLastWatched(time_t iLastWatched)
   return false;
 }
 
-bool CPVRChannelGroup::PreventSortAndRenumber(void) const
+bool CPVRChannelGroup::PreventSortAndRenumber() const
 {
   CSingleLock lock(m_critSection);
   return m_bPreventSortAndRenumber;
@@ -1098,7 +1098,7 @@ bool CPVRChannelGroup::UpdateChannel(const std::pair<int, int>& storageId,
   return true;
 }
 
-size_t CPVRChannelGroup::Size(void) const
+size_t CPVRChannelGroup::Size() const
 {
   CSingleLock lock(m_critSection);
   return m_members.size();
@@ -1127,13 +1127,13 @@ void CPVRChannelGroup::SetHidden(bool bHidden)
   }
 }
 
-bool CPVRChannelGroup::IsHidden(void) const
+bool CPVRChannelGroup::IsHidden() const
 {
   CSingleLock lock(m_critSection);
   return m_bHidden;
 }
 
-int CPVRChannelGroup::GetPosition(void) const
+int CPVRChannelGroup::GetPosition() const
 {
   CSingleLock lock(m_critSection);
   return m_iPosition;
diff --git a/xbmc/pvr/channels/PVRChannelGroup.h b/xbmc/pvr/channels/PVRChannelGroup.h
index bb0cf1432baa..9510b3311b8e 100644
--- a/xbmc/pvr/channels/PVRChannelGroup.h
+++ b/xbmc/pvr/channels/PVRChannelGroup.h
@@ -82,7 +82,7 @@ namespace PVR
      */
     CPVRChannelGroup(const PVR_CHANNEL_GROUP& group, const std::shared_ptr<CPVRChannelGroup>& allChannelsGroup);
 
-    ~CPVRChannelGroup(void) override;
+    ~CPVRChannelGroup() override;
 
     bool operator ==(const CPVRChannelGroup& right) const;
     bool operator !=(const CPVRChannelGroup& right) const;
@@ -107,7 +107,7 @@ namespace PVR
     /*!
      * @return The amount of group members
      */
-    size_t Size(void) const;
+    size_t Size() const;
 
     /*!
      * @brief Refresh the channel list from the clients.
@@ -162,7 +162,7 @@ namespace PVR
      * @brief Persist changed or new data.
      * @return True if the channel was persisted, false otherwise.
      */
-    bool Persist(void);
+    bool Persist();
 
     /*!
      * @brief Check whether a channel is in this container.
@@ -182,7 +182,7 @@ namespace PVR
      * @brief Check if this group is the internal group containing all channels.
      * @return True if it's the internal group, false otherwise.
      */
-    virtual bool IsInternalGroup(void) const { return m_iGroupType == PVR_GROUP_TYPE_INTERNAL; }
+    virtual bool IsInternalGroup() const { return m_iGroupType == PVR_GROUP_TYPE_INTERNAL; }
 
     /*!
      * @brief True if this group holds radio channels, false if it holds TV channels.
@@ -194,13 +194,13 @@ namespace PVR
      * @brief True if sorting should be prevented when adding/updating channels to the group.
      * @return True if sorting should be prevented when adding/updating channels to the group.
      */
-    bool PreventSortAndRenumber(void) const;
+    bool PreventSortAndRenumber() const;
 
     /*!
      * @brief The database ID of this group.
      * @return The database ID of this group.
      */
-    int GroupID(void) const;
+    int GroupID() const;
 
     /*!
      * @brief Set the database ID of this group.
@@ -217,7 +217,7 @@ namespace PVR
     /*!
      * @brief Return the type of this group.
      */
-    int GroupType(void) const;
+    int GroupType() const;
 
     /*!
      * @return Time group has been watched last.
@@ -241,7 +241,7 @@ namespace PVR
      * @brief The name of this group.
      * @return The name of this group.
      */
-    std::string GroupName(void) const;
+    std::string GroupName() const;
 
     /*! @name Sort methods
      */
@@ -256,13 +256,13 @@ namespace PVR
      * @brief Sort the group and fix up channel numbers.
      * @return True when numbering changed, false otherwise
      */
-    bool SortAndRenumber(void);
+    bool SortAndRenumber();
 
     /*!
      * @brief Remove invalid channels and updates the channel numbers.
      * @return True if something changed, false otherwise.
      */
-    bool Renumber(void);
+    bool Renumber();
 
     //@}
 
@@ -348,28 +348,28 @@ namespace PVR
      * @brief The amount of hidden channels in this container.
      * @return The amount of hidden channels in this container.
      */
-    virtual size_t GetNumHiddenChannels(void) const { return 0; }
+    virtual size_t GetNumHiddenChannels() const { return 0; }
 
     /*!
      * @brief Does this container holds channels.
      * @return True if there is at least one channel in this container, otherwise false.
      */
-    bool HasChannels(void) const;
+    bool HasChannels() const;
 
     /*!
      * @return True if there is at least one channel in this group with changes that haven't been persisted, false otherwise.
      */
-    bool HasChangedChannels(void) const;
+    bool HasChangedChannels() const;
 
     /*!
      * @return True if there is at least one new channel in this group that hasn't been persisted, false otherwise.
      */
-    bool HasNewChannels(void) const;
+    bool HasNewChannels() const;
 
     /*!
      * @return True if anything changed in this group that hasn't been persisted, false otherwise.
      */
-    bool HasChanges(void) const;
+    bool HasChanges() const;
 
     /*!
      * @brief Create an EPG table for each channel.
@@ -389,13 +389,13 @@ namespace PVR
      * @brief Get the start time of the first entry.
      * @return The start time.
      */
-    CDateTime GetFirstEPGDate(void) const;
+    CDateTime GetFirstEPGDate() const;
 
     /*!
      * @brief Get the end time of the last entry.
      * @return The end time.
      */
-    CDateTime GetLastEPGDate(void) const;
+    CDateTime GetLastEPGDate() const;
 
     /*!
      * @brief Update a channel group member with given data.
@@ -437,9 +437,9 @@ namespace PVR
     const std::shared_ptr<PVRChannelGroupMember>& GetByUniqueID(const std::pair<int, int>& id) const;
 
     void SetHidden(bool bHidden);
-    bool IsHidden(void) const;
+    bool IsHidden() const;
 
-    int GetPosition(void) const;
+    int GetPosition() const;
     void SetPosition(int iPosition);
 
     /*!
@@ -476,7 +476,7 @@ namespace PVR
     /*!
      * @brief Init class
      */
-    virtual void OnInit(void);
+    virtual void OnInit();
 
     /*!
      * @brief Load the channels stored in the database.
@@ -515,23 +515,23 @@ namespace PVR
     /*!
      * @brief Clear this channel list.
      */
-    virtual void Unload(void);
+    virtual void Unload();
 
     /*!
      * @brief Load the channels from the clients.
      * @return True when loaded successfully, false otherwise.
      */
-    virtual bool LoadFromClients(void);
+    virtual bool LoadFromClients();
 
     /*!
      * @brief Sort the current channel list by client channel number.
      */
-    void SortByClientChannelNumber(void);
+    void SortByClientChannelNumber();
 
     /*!
      * @brief Sort the current channel list by channel number.
      */
-    void SortByChannelNumber(void);
+    void SortByChannelNumber();
 
     /*!
      * @brief Update the priority for all members of all channel groups.
diff --git a/xbmc/pvr/channels/PVRChannelGroupInternal.cpp b/xbmc/pvr/channels/PVRChannelGroupInternal.cpp
index d72e0e87008f..01ef268caaba 100644
--- a/xbmc/pvr/channels/PVRChannelGroupInternal.cpp
+++ b/xbmc/pvr/channels/PVRChannelGroupInternal.cpp
@@ -34,7 +34,7 @@ CPVRChannelGroupInternal::CPVRChannelGroupInternal(bool bRadio)
   m_iGroupType = PVR_GROUP_TYPE_INTERNAL;
 }
 
-CPVRChannelGroupInternal::~CPVRChannelGroupInternal(void)
+CPVRChannelGroupInternal::~CPVRChannelGroupInternal()
 {
   Unload();
   CServiceBroker::GetPVRManager().Events().Unsubscribe(this);
@@ -53,7 +53,7 @@ bool CPVRChannelGroupInternal::Load(std::vector<std::shared_ptr<CPVRChannel>>& c
   return false;
 }
 
-void CPVRChannelGroupInternal::CheckGroupName(void)
+void CPVRChannelGroupInternal::CheckGroupName()
 {
   CSingleLock lock(m_critSection);
 
@@ -66,7 +66,7 @@ void CPVRChannelGroupInternal::CheckGroupName(void)
   }
 }
 
-void CPVRChannelGroupInternal::UpdateChannelPaths(void)
+void CPVRChannelGroupInternal::UpdateChannelPaths()
 {
   CSingleLock lock(m_critSection);
   m_iHiddenChannels = 0;
@@ -209,7 +209,7 @@ int CPVRChannelGroupInternal::LoadFromDb(bool bCompress /* = false */)
   return Size() - iChannelCount;
 }
 
-bool CPVRChannelGroupInternal::LoadFromClients(void)
+bool CPVRChannelGroupInternal::LoadFromClients()
 {
   /* get the channels from the backends */
   return CServiceBroker::GetPVRManager().Clients()->GetChannels(this, m_failedClientsForChannels) == PVR_ERROR_NO_ERROR;
diff --git a/xbmc/pvr/channels/PVRChannelGroupInternal.h b/xbmc/pvr/channels/PVRChannelGroupInternal.h
index 0f6e1b9f9b31..4e42017c2163 100644
--- a/xbmc/pvr/channels/PVRChannelGroupInternal.h
+++ b/xbmc/pvr/channels/PVRChannelGroupInternal.h
@@ -29,7 +29,7 @@ namespace PVR
      */
     explicit CPVRChannelGroupInternal(bool bRadio);
 
-    ~CPVRChannelGroupInternal(void) override;
+    ~CPVRChannelGroupInternal() override;
 
     /**
      * @brief The amount of channels in this container.
@@ -65,7 +65,7 @@ namespace PVR
     /*!
      * @brief Check whether the group name is still correct after the language setting changed.
      */
-    void CheckGroupName(void);
+    void CheckGroupName();
 
     /*!
      * @brief Create an EPG table for each channel.
@@ -86,13 +86,13 @@ namespace PVR
      * @brief Load all channels from the clients.
      * @return True when updated successfully, false otherwise.
      */
-    bool LoadFromClients(void) override;
+    bool LoadFromClients() override;
 
     /*!
      * @brief Check if this group is the internal group containing all channels.
      * @return True if it's the internal group, false otherwise.
      */
-    bool IsInternalGroup(void) const override { return true; }
+    bool IsInternalGroup() const override { return true; }
 
     /*!
      * @brief Update the current channel list with the given list.
@@ -141,7 +141,7 @@ namespace PVR
     /*!
      * @brief Update the vfs paths of all channels.
      */
-    void UpdateChannelPaths(void);
+    void UpdateChannelPaths();
 
     void CreateChannelEpg(const std::shared_ptr<CPVRChannel>& channel);
 
diff --git a/xbmc/pvr/channels/PVRChannelGroups.cpp b/xbmc/pvr/channels/PVRChannelGroups.cpp
index 4431581786a4..49e448e5cd79 100644
--- a/xbmc/pvr/channels/PVRChannelGroups.cpp
+++ b/xbmc/pvr/channels/PVRChannelGroups.cpp
@@ -33,19 +33,19 @@ CPVRChannelGroups::CPVRChannelGroups(bool bRadio) :
 {
 }
 
-CPVRChannelGroups::~CPVRChannelGroups(void)
+CPVRChannelGroups::~CPVRChannelGroups()
 {
   Clear();
 }
 
-void CPVRChannelGroups::Clear(void)
+void CPVRChannelGroups::Clear()
 {
   CSingleLock lock(m_critSection);
   m_groups.clear();
   m_failedClientsForChannelGroups.clear();
 }
 
-bool CPVRChannelGroups::GetGroupsFromClients(void)
+bool CPVRChannelGroups::GetGroupsFromClients()
 {
   if (! CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_PVRMANAGER_SYNCCHANNELGROUPS))
     return true;
@@ -249,7 +249,7 @@ bool CPVRChannelGroups::Update(bool bChannelsOnly /* = false */)
   return PersistAll() && bReturn;
 }
 
-bool CPVRChannelGroups::LoadUserDefinedChannelGroups(void)
+bool CPVRChannelGroups::LoadUserDefinedChannelGroups()
 {
   bool bSyncWithBackends = CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_PVRMANAGER_SYNCCHANNELGROUPS);
 
@@ -298,7 +298,7 @@ bool CPVRChannelGroups::LoadUserDefinedChannelGroups(void)
   return bSyncWithBackends ? PersistAll() : true;
 }
 
-bool CPVRChannelGroups::Load(void)
+bool CPVRChannelGroups::Load()
 {
   const std::shared_ptr<CPVRDatabase> database(CServiceBroker::GetPVRManager().GetTVDatabase());
   if (!database)
@@ -346,7 +346,7 @@ bool CPVRChannelGroups::Load(void)
   return m_groups.size() > 0;
 }
 
-bool CPVRChannelGroups::PersistAll(void)
+bool CPVRChannelGroups::PersistAll()
 {
   bool bReturn(true);
   CLog::LogFC(LOGDEBUG, LOGPVR, "Persisting all channel group changes");
@@ -358,7 +358,7 @@ bool CPVRChannelGroups::PersistAll(void)
   return bReturn;
 }
 
-std::shared_ptr<CPVRChannelGroup> CPVRChannelGroups::GetGroupAll(void) const
+std::shared_ptr<CPVRChannelGroup> CPVRChannelGroups::GetGroupAll() const
 {
   CSingleLock lock(m_critSection);
   if (!m_groups.empty())
@@ -367,7 +367,7 @@ std::shared_ptr<CPVRChannelGroup> CPVRChannelGroups::GetGroupAll(void) const
   return std::shared_ptr<CPVRChannelGroup>();
 }
 
-std::shared_ptr<CPVRChannelGroup> CPVRChannelGroups::GetLastGroup(void) const
+std::shared_ptr<CPVRChannelGroup> CPVRChannelGroups::GetLastGroup() const
 {
   CSingleLock lock(m_critSection);
   if (!m_groups.empty())
@@ -462,7 +462,7 @@ std::shared_ptr<CPVRChannelGroup> CPVRChannelGroups::GetNextGroup(const CPVRChan
   return GetFirstGroup();
 }
 
-std::shared_ptr<CPVRChannelGroup> CPVRChannelGroups::GetSelectedGroup(void) const
+std::shared_ptr<CPVRChannelGroup> CPVRChannelGroups::GetSelectedGroup() const
 {
   CSingleLock lock(m_critSection);
   return m_selectedGroup;
@@ -549,7 +549,7 @@ bool CPVRChannelGroups::DeleteGroup(const CPVRChannelGroup& group)
   return bFound;
 }
 
-bool CPVRChannelGroups::CreateChannelEpgs(void)
+bool CPVRChannelGroups::CreateChannelEpgs()
 {
   bool bReturn(false);
 
diff --git a/xbmc/pvr/channels/PVRChannelGroups.h b/xbmc/pvr/channels/PVRChannelGroups.h
index 7a04b540d6b6..7d80468465f7 100644
--- a/xbmc/pvr/channels/PVRChannelGroups.h
+++ b/xbmc/pvr/channels/PVRChannelGroups.h
@@ -30,23 +30,23 @@ namespace PVR
      * @param bRadio True if this is a container for radio channels, false if it is for tv channels.
      */
     explicit CPVRChannelGroups(bool bRadio);
-    virtual ~CPVRChannelGroups(void);
+    virtual ~CPVRChannelGroups();
 
     /*!
      * @brief Remove all channels from this group.
      */
-    void Clear(void);
+    void Clear();
 
     /*!
      * @brief Load this container's contents from the database or PVR clients.
      * @return True if it was loaded successfully, false if not.
      */
-    bool Load(void);
+    bool Load();
 
     /*!
      * @return Amount of groups in this container
      */
-    size_t Size(void) const { CSingleLock lock(m_critSection); return m_groups.size(); }
+    size_t Size() const { CSingleLock lock(m_critSection); return m_groups.size(); }
 
     /*!
      * @brief Update a group or add it if it's not in here yet.
@@ -103,17 +103,17 @@ namespace PVR
      * @brief Get the group that contains all channels.
      * @return The group that contains all channels.
      */
-    std::shared_ptr<CPVRChannelGroup> GetGroupAll(void) const;
+    std::shared_ptr<CPVRChannelGroup> GetGroupAll() const;
 
     /*!
      * @return The first group in this container, which always is the group with all channels.
      */
-    std::shared_ptr<CPVRChannelGroup> GetFirstGroup(void) const { return GetGroupAll(); }
+    std::shared_ptr<CPVRChannelGroup> GetFirstGroup() const { return GetGroupAll(); }
 
     /*!
      * @return The last group in this container.
      */
-    std::shared_ptr<CPVRChannelGroup> GetLastGroup(void) const;
+    std::shared_ptr<CPVRChannelGroup> GetLastGroup() const;
 
     /*!
      * @brief The group that was played last and optionally contains the given channel.
@@ -148,7 +148,7 @@ namespace PVR
      * @brief Get the group that is currently selected in the UI.
      * @return The selected group.
      */
-    std::shared_ptr<CPVRChannelGroup> GetSelectedGroup(void) const;
+    std::shared_ptr<CPVRChannelGroup> GetSelectedGroup() const;
 
     /*!
      * @brief Change the selected group.
@@ -174,18 +174,18 @@ namespace PVR
      * @brief Create EPG tags for all channels of the internal group.
      * @return True if EPG tags where created successfully, false if not.
      */
-    bool CreateChannelEpgs(void);
+    bool CreateChannelEpgs();
 
     /*!
      * @brief Persist all changes in channel groups.
      * @return True if everything was persisted, false otherwise.
      */
-    bool PersistAll(void);
+    bool PersistAll();
 
     /*!
      * @return True when this container contains radio groups, false otherwise
      */
-    bool IsRadio(void) const { return m_bRadio; }
+    bool IsRadio() const { return m_bRadio; }
 
     /*!
      * @brief Update the contents of the groups in this container.
@@ -195,9 +195,9 @@ namespace PVR
     bool Update(bool bChannelsOnly = false);
 
   private:
-    bool LoadUserDefinedChannelGroups(void);
-    bool GetGroupsFromClients(void);
-    void SortGroups(void);
+    bool LoadUserDefinedChannelGroups();
+    bool GetGroupsFromClients();
+    void SortGroups();
 
     /*!
      * @brief Remove the given channels from all non-system groups.
diff --git a/xbmc/pvr/channels/PVRChannelGroupsContainer.cpp b/xbmc/pvr/channels/PVRChannelGroupsContainer.cpp
index d50fa1f8fc6b..4e563c438159 100644
--- a/xbmc/pvr/channels/PVRChannelGroupsContainer.cpp
+++ b/xbmc/pvr/channels/PVRChannelGroupsContainer.cpp
@@ -18,13 +18,13 @@
 
 using namespace PVR;
 
-CPVRChannelGroupsContainer::CPVRChannelGroupsContainer(void) :
+CPVRChannelGroupsContainer::CPVRChannelGroupsContainer() :
     m_groupsRadio(new CPVRChannelGroups(true)),
     m_groupsTV(new CPVRChannelGroups(false))
 {
 }
 
-CPVRChannelGroupsContainer::~CPVRChannelGroupsContainer(void)
+CPVRChannelGroupsContainer::~CPVRChannelGroupsContainer()
 {
   delete m_groupsRadio;
   delete m_groupsTV;
@@ -49,19 +49,19 @@ bool CPVRChannelGroupsContainer::Update(bool bChannelsOnly /* = false */)
   return bReturn;
 }
 
-bool CPVRChannelGroupsContainer::Load(void)
+bool CPVRChannelGroupsContainer::Load()
 {
   Unload();
   m_bLoaded = m_groupsTV->Load() && m_groupsRadio->Load();
   return m_bLoaded;
 }
 
-bool CPVRChannelGroupsContainer::Loaded(void) const
+bool CPVRChannelGroupsContainer::Loaded() const
 {
   return m_bLoaded;
 }
 
-void CPVRChannelGroupsContainer::Unload(void)
+void CPVRChannelGroupsContainer::Unload()
 {
   m_groupsRadio->Clear();
   m_groupsTV->Clear();
@@ -165,12 +165,12 @@ std::shared_ptr<CPVRChannelGroup> CPVRChannelGroupsContainer::GetLastPlayedGroup
   return groupTV;
 }
 
-bool CPVRChannelGroupsContainer::CreateChannelEpgs(void)
+bool CPVRChannelGroupsContainer::CreateChannelEpgs()
 {
   return m_groupsTV->CreateChannelEpgs() && m_groupsRadio->CreateChannelEpgs();
 }
 
-std::shared_ptr<CPVRChannelGroup> CPVRChannelGroupsContainer::GetPreviousPlayedGroup(void)
+std::shared_ptr<CPVRChannelGroup> CPVRChannelGroupsContainer::GetPreviousPlayedGroup()
 {
   CSingleLock lock(m_critSection);
   return m_lastPlayedGroups[0];
diff --git a/xbmc/pvr/channels/PVRChannelGroupsContainer.h b/xbmc/pvr/channels/PVRChannelGroupsContainer.h
index f715c1dd0d5d..eea1cc2df342 100644
--- a/xbmc/pvr/channels/PVRChannelGroupsContainer.h
+++ b/xbmc/pvr/channels/PVRChannelGroupsContainer.h
@@ -25,29 +25,29 @@ namespace PVR
     /*!
      * @brief Create a new container for all channel groups
      */
-    CPVRChannelGroupsContainer(void);
+    CPVRChannelGroupsContainer();
 
     /*!
      * @brief Destroy this container.
      */
-    virtual ~CPVRChannelGroupsContainer(void);
+    virtual ~CPVRChannelGroupsContainer();
 
     /*!
      * @brief Load all channel groups and all channels in those channel groups.
      * @return True if all groups were loaded, false otherwise.
      */
-    bool Load(void);
+    bool Load();
 
     /*!
      * @brief Checks whether groups were already loaded.
      * @return True if groups were successfully loaded, false otherwise.
      */
-    bool Loaded(void) const;
+    bool Loaded() const;
 
     /*!
      * @brief Unload and destruct all channel groups and all channels in them.
      */
-    void Unload(void);
+    void Unload();
 
     /*!
      * @brief Update the contents of all the groups in this container.
@@ -60,13 +60,13 @@ namespace PVR
      * @brief Get the TV channel groups.
      * @return The TV channel groups.
      */
-    CPVRChannelGroups* GetTV(void) const { return Get(false); }
+    CPVRChannelGroups* GetTV() const { return Get(false); }
 
     /*!
      * @brief Get the radio channel groups.
      * @return The radio channel groups.
      */
-    CPVRChannelGroups* GetRadio(void) const { return Get(true); }
+    CPVRChannelGroups* GetRadio() const { return Get(true); }
 
     /*!
      * @brief Get the radio or TV channel groups.
@@ -79,13 +79,13 @@ namespace PVR
      * @brief Get the group containing all TV channels.
      * @return The group containing all TV channels.
      */
-    std::shared_ptr<CPVRChannelGroup> GetGroupAllTV(void) const { return GetGroupAll(false); }
+    std::shared_ptr<CPVRChannelGroup> GetGroupAllTV() const { return GetGroupAll(false); }
 
     /*!
      * @brief Get the group containing all radio channels.
      * @return The group containing all radio channels.
      */
-    std::shared_ptr<CPVRChannelGroup> GetGroupAllRadio(void) const { return GetGroupAll(true); }
+    std::shared_ptr<CPVRChannelGroup> GetGroupAllRadio() const { return GetGroupAll(true); }
 
     /*!
      * @brief Get the group containing all TV or radio channels.
@@ -161,13 +161,13 @@ namespace PVR
      * @brief Create EPG tags for channels in all internal channel groups.
      * @return True if EPG tags were created successfully.
      */
-    bool CreateChannelEpgs(void);
+    bool CreateChannelEpgs();
 
     /*!
      * @brief Return the group which was previous played.
      * @return The group which was previous played.
      */
-    std::shared_ptr<CPVRChannelGroup> GetPreviousPlayedGroup(void);
+    std::shared_ptr<CPVRChannelGroup> GetPreviousPlayedGroup();
 
     /*!
      * @brief Set the last played group.
diff --git a/xbmc/pvr/channels/PVRRadioRDSInfoTag.cpp b/xbmc/pvr/channels/PVRRadioRDSInfoTag.cpp
index c953c40dd87c..30334940624c 100644
--- a/xbmc/pvr/channels/PVRRadioRDSInfoTag.cpp
+++ b/xbmc/pvr/channels/PVRRadioRDSInfoTag.cpp
@@ -25,7 +25,7 @@
 
 using namespace PVR;
 
-CPVRRadioRDSInfoTag::CPVRRadioRDSInfoTag(void)
+CPVRRadioRDSInfoTag::CPVRRadioRDSInfoTag()
 {
   Clear();
 }
diff --git a/xbmc/pvr/channels/PVRRadioRDSInfoTag.h b/xbmc/pvr/channels/PVRRadioRDSInfoTag.h
index 80954354bc32..08fbaf7dffd4 100644
--- a/xbmc/pvr/channels/PVRRadioRDSInfoTag.h
+++ b/xbmc/pvr/channels/PVRRadioRDSInfoTag.h
@@ -21,7 +21,7 @@ namespace PVR
 class CPVRRadioRDSInfoTag final : public IArchivable, public ISerializable
 {
 public:
-  CPVRRadioRDSInfoTag(void);
+  CPVRRadioRDSInfoTag();
 
   bool operator ==(const CPVRRadioRDSInfoTag& right) const;
   bool operator !=(const CPVRRadioRDSInfoTag& right) const;
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRChannelGuide.h b/xbmc/pvr/dialogs/GUIDialogPVRChannelGuide.h
index f7a4830d8385..b348a9e699ee 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRChannelGuide.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRChannelGuide.h
@@ -19,8 +19,8 @@ namespace PVR
   class CGUIDialogPVRChannelGuide : public CGUIDialogPVRItemsViewBase
   {
   public:
-    CGUIDialogPVRChannelGuide(void);
-    ~CGUIDialogPVRChannelGuide(void) override = default;
+    CGUIDialogPVRChannelGuide();
+    ~CGUIDialogPVRChannelGuide() override = default;
 
     void Open(const std::shared_ptr<CPVRChannel>& channel);
 
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.cpp b/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.cpp
index 932492baa927..51b69c5832f4 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.cpp
@@ -61,13 +61,13 @@
 using namespace PVR;
 using namespace KODI::MESSAGING;
 
-CGUIDialogPVRChannelManager::CGUIDialogPVRChannelManager(void) :
+CGUIDialogPVRChannelManager::CGUIDialogPVRChannelManager() :
     CGUIDialog(WINDOW_DIALOG_PVR_CHANNEL_MANAGER, "DialogPVRChannelManager.xml"),
     m_channelItems(new CFileItemList)
 {
 }
 
-CGUIDialogPVRChannelManager::~CGUIDialogPVRChannelManager(void)
+CGUIDialogPVRChannelManager::~CGUIDialogPVRChannelManager()
 {
   delete m_channelItems;
 }
@@ -534,7 +534,7 @@ bool CGUIDialogPVRChannelManager::OnMessage(CGUIMessage& message)
   return CGUIDialog::OnMessage(message);
 }
 
-void CGUIDialogPVRChannelManager::OnWindowLoaded(void)
+void CGUIDialogPVRChannelManager::OnWindowLoaded()
 {
   CGUIDialog::OnWindowLoaded();
 
@@ -543,7 +543,7 @@ void CGUIDialogPVRChannelManager::OnWindowLoaded(void)
   m_viewControl.AddView(GetControl(CONTROL_LIST_CHANNELS));
 }
 
-void CGUIDialogPVRChannelManager::OnWindowUnload(void)
+void CGUIDialogPVRChannelManager::OnWindowUnload()
 {
   CGUIDialog::OnWindowUnload();
   m_viewControl.Reset();
@@ -729,7 +729,7 @@ void CGUIDialogPVRChannelManager::Update()
   m_viewControl.SetSelectedItem(m_iSelected);
 }
 
-void CGUIDialogPVRChannelManager::Clear(void)
+void CGUIDialogPVRChannelManager::Clear()
 {
   m_viewControl.Clear();
   m_channelItems->Clear();
@@ -765,7 +765,7 @@ bool CGUIDialogPVRChannelManager::PersistChannel(const CFileItemPtr& pItem, cons
                               pItem->GetProperty("UserSetIcon").asBoolean());
 }
 
-void CGUIDialogPVRChannelManager::SaveList(void)
+void CGUIDialogPVRChannelManager::SaveList()
 {
   if (!m_bContainsChanges)
    return;
@@ -808,7 +808,7 @@ void CGUIDialogPVRChannelManager::SaveList(void)
   pDlgProgress->Close();
 }
 
-void CGUIDialogPVRChannelManager::SetItemsUnchanged(void)
+void CGUIDialogPVRChannelManager::SetItemsUnchanged()
 {
   for (int iItemPtr = 0; iItemPtr < m_channelItems->Size(); ++iItemPtr)
   {
@@ -818,7 +818,7 @@ void CGUIDialogPVRChannelManager::SetItemsUnchanged(void)
   }
 }
 
-void CGUIDialogPVRChannelManager::Renumber(void)
+void CGUIDialogPVRChannelManager::Renumber()
 {
   int iNextChannelNumber(0);
   std::string strNumber;
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.h b/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.h
index bdd870cd7545..5aeee9a5de38 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.h
@@ -27,12 +27,12 @@ namespace PVR
   class CGUIDialogPVRChannelManager : public CGUIDialog
   {
   public:
-    CGUIDialogPVRChannelManager(void);
-    ~CGUIDialogPVRChannelManager(void) override;
+    CGUIDialogPVRChannelManager();
+    ~CGUIDialogPVRChannelManager() override;
     bool OnMessage(CGUIMessage& message) override;
     bool OnAction(const CAction& action) override;
-    void OnWindowLoaded(void) override;
-    void OnWindowUnload(void) override;
+    void OnWindowLoaded() override;
+    void OnWindowUnload() override;
     bool HasListItems() const override{ return true; }
     CFileItemPtr GetCurrentListItem(int offset = 0) override;
 
@@ -41,10 +41,10 @@ namespace PVR
     void OnDeinitWindow(int nextWindowID) override;
 
   private:
-    void Clear(void);
-    void Update(void);
-    void SaveList(void);
-    void Renumber(void);
+    void Clear();
+    void Update();
+    void SaveList();
+    void Renumber();
     void SetData(int iItem);
     void RenameChannel(const CFileItemPtr& pItem);
 
@@ -67,7 +67,7 @@ namespace PVR
     bool OnClickButtonNewChannel();
 
     bool PersistChannel(const CFileItemPtr& pItem, const std::shared_ptr<CPVRChannelGroup>& group, unsigned int* iChannelNumber);
-    void SetItemsUnchanged(void);
+    void SetItemsUnchanged();
 
     bool m_bIsRadio = false;
     bool m_bMovingMode = false;
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.h b/xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.h
index 8ec2280a7c8b..3b5da08d04a3 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.h
@@ -25,8 +25,8 @@ namespace PVR
   class CGUIDialogPVRChannelsOSD : public CGUIDialogPVRItemsViewBase, public CPVRChannelNumberInputHandler
   {
   public:
-    CGUIDialogPVRChannelsOSD(void);
-    ~CGUIDialogPVRChannelsOSD(void) override;
+    CGUIDialogPVRChannelsOSD();
+    ~CGUIDialogPVRChannelsOSD() override;
     bool OnMessage(CGUIMessage& message) override;
     bool OnAction(const CAction& action) override;
 
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.cpp b/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.cpp
index 2c052ebaf5ed..6f36f60b695c 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.cpp
@@ -73,7 +73,7 @@ void CGUIDialogPVRGroupManager::SetRadio(bool bIsRadio)
   SetProperty("IsRadio", m_bIsRadio ? "true" : "");
 }
 
-bool CGUIDialogPVRGroupManager::PersistChanges(void)
+bool CGUIDialogPVRGroupManager::PersistChanges()
 {
   return CServiceBroker::GetPVRManager().ChannelGroups()->Get(m_bIsRadio)->PersistAll();
 }
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.h b/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.h
index b18a478c5edb..97777d324ac4 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.h
@@ -24,8 +24,8 @@ namespace PVR
   class CGUIDialogPVRGroupManager : public CGUIDialog
   {
   public:
-    CGUIDialogPVRGroupManager(void);
-    ~CGUIDialogPVRGroupManager(void) override;
+    CGUIDialogPVRGroupManager();
+    ~CGUIDialogPVRGroupManager() override;
     bool OnMessage(CGUIMessage& message) override;
     bool OnAction(const CAction& action) override;
     void OnWindowLoaded() override;
@@ -41,7 +41,7 @@ namespace PVR
     void Clear();
     void ClearSelectedGroupsThumbnail();
     void Update();
-    bool PersistChanges(void);
+    bool PersistChanges();
     bool ActionButtonOk(CGUIMessage& message);
     bool ActionButtonNewGroup(CGUIMessage& message);
     bool ActionButtonDeleteGroup(CGUIMessage& message);
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.cpp b/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.cpp
index 0a47b3c649a2..1a4f1a66ad29 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.cpp
@@ -32,12 +32,12 @@ using namespace PVR;
 #define CONTROL_BTN_PLAY_EPGTAG        10
 #define CONTROL_BTN_SET_REMINDER       11
 
-CGUIDialogPVRGuideInfo::CGUIDialogPVRGuideInfo(void)
+CGUIDialogPVRGuideInfo::CGUIDialogPVRGuideInfo()
     : CGUIDialog(WINDOW_DIALOG_PVR_GUIDE_INFO, "DialogPVRInfo.xml")
 {
 }
 
-CGUIDialogPVRGuideInfo::~CGUIDialogPVRGuideInfo(void) = default;
+CGUIDialogPVRGuideInfo::~CGUIDialogPVRGuideInfo() = default;
 
 bool CGUIDialogPVRGuideInfo::OnClickButtonOK(CGUIMessage& message)
 {
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.h b/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.h
index 3a03cac01c6a..fe0de207c1ff 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.h
@@ -21,8 +21,8 @@ namespace PVR
   class CGUIDialogPVRGuideInfo : public CGUIDialog
   {
   public:
-    CGUIDialogPVRGuideInfo(void);
-    ~CGUIDialogPVRGuideInfo(void) override;
+    CGUIDialogPVRGuideInfo();
+    ~CGUIDialogPVRGuideInfo() override;
     bool OnMessage(CGUIMessage& message) override;
     bool OnInfo(int actionID) override;
     bool HasListItems() const override { return true; }
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.cpp b/xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.cpp
index a631e03b8696..7c393d288690 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.cpp
@@ -47,13 +47,13 @@ using namespace PVR;
 #define CONTROL_BTN_IGNORE_REC    27
 #define CONTROL_BTN_DEFAULTS      28
 
-CGUIDialogPVRGuideSearch::CGUIDialogPVRGuideSearch(void) :
+CGUIDialogPVRGuideSearch::CGUIDialogPVRGuideSearch() :
     CGUIDialog(WINDOW_DIALOG_PVR_GUIDE_SEARCH, "DialogPVRGuideSearch.xml"),
     m_searchFilter(NULL)
 {
 }
 
-void CGUIDialogPVRGuideSearch::UpdateChannelSpin(void)
+void CGUIDialogPVRGuideSearch::UpdateChannelSpin()
 {
   int iChannelGroup = GetSpinValue(CONTROL_SPIN_GROUPS);
 
@@ -90,7 +90,7 @@ void CGUIDialogPVRGuideSearch::UpdateChannelSpin(void)
   SET_CONTROL_LABELS(CONTROL_SPIN_CHANNELS, iSelectedChannel, &labels);
 }
 
-void CGUIDialogPVRGuideSearch::UpdateGroupsSpin(void)
+void CGUIDialogPVRGuideSearch::UpdateGroupsSpin()
 {
   std::vector< std::pair<std::string, int> > labels;
 
@@ -102,7 +102,7 @@ void CGUIDialogPVRGuideSearch::UpdateGroupsSpin(void)
   SET_CONTROL_LABELS(CONTROL_SPIN_GROUPS, m_searchFilter->GetChannelGroup(), &labels);
 }
 
-void CGUIDialogPVRGuideSearch::UpdateGenreSpin(void)
+void CGUIDialogPVRGuideSearch::UpdateGenreSpin()
 {
   std::vector< std::pair<std::string, int> > labels;
   labels.emplace_back(g_localizeStrings.Get(593), EPG_SEARCH_UNSET);
@@ -122,7 +122,7 @@ void CGUIDialogPVRGuideSearch::UpdateGenreSpin(void)
   SET_CONTROL_LABELS(CONTROL_SPIN_GENRE, m_searchFilter->GetGenreType(), &labels);
 }
 
-void CGUIDialogPVRGuideSearch::UpdateDurationSpin(void)
+void CGUIDialogPVRGuideSearch::UpdateDurationSpin()
 {
   /* minimum duration */
   std::vector< std::pair<std::string, int> > labels;
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.h b/xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.h
index aff4fcef34b2..df133ce805da 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.h
@@ -22,8 +22,8 @@ namespace PVR
   class CGUIDialogPVRGuideSearch : public CGUIDialog
   {
   public:
-    CGUIDialogPVRGuideSearch(void);
-    ~CGUIDialogPVRGuideSearch(void) override = default;
+    CGUIDialogPVRGuideSearch();
+    ~CGUIDialogPVRGuideSearch() override = default;
     bool OnMessage(CGUIMessage& message) override;
     void OnWindowLoaded() override;
 
@@ -36,10 +36,10 @@ namespace PVR
 
   private:
     void OnSearch();
-    void UpdateChannelSpin(void);
-    void UpdateGroupsSpin(void);
-    void UpdateGenreSpin(void);
-    void UpdateDurationSpin(void);
+    void UpdateChannelSpin();
+    void UpdateGroupsSpin();
+    void UpdateGenreSpin();
+    void UpdateDurationSpin();
     CDateTime ReadDateTime(const std::string& strDate, const std::string& strTime) const;
     void Update();
 
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRRadioRDSInfo.cpp b/xbmc/pvr/dialogs/GUIDialogPVRRadioRDSInfo.cpp
index 844804681ef1..ead92d25189d 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRRadioRDSInfo.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRRadioRDSInfo.cpp
@@ -37,7 +37,7 @@ using namespace PVR;
 #define INFO_CINEMA       8
 #define INFO_HOROSCOPE    9
 
-CGUIDialogPVRRadioRDSInfo::CGUIDialogPVRRadioRDSInfo(void)
+CGUIDialogPVRRadioRDSInfo::CGUIDialogPVRRadioRDSInfo()
   : CGUIDialog(WINDOW_DIALOG_PVR_RADIO_RDS_INFO, "DialogPVRRadioRDSInfo.xml")
   , m_InfoNews(29916, INFO_NEWS)
   , m_InfoNewsLocal(29917, INFO_NEWS_LOCAL)
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRRadioRDSInfo.h b/xbmc/pvr/dialogs/GUIDialogPVRRadioRDSInfo.h
index ed65c2814a81..4ae1b0b3d0e8 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRRadioRDSInfo.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRRadioRDSInfo.h
@@ -20,8 +20,8 @@ namespace PVR
   class CGUIDialogPVRRadioRDSInfo : public CGUIDialog
   {
   public:
-    CGUIDialogPVRRadioRDSInfo(void);
-    ~CGUIDialogPVRRadioRDSInfo(void) override = default;
+    CGUIDialogPVRRadioRDSInfo();
+    ~CGUIDialogPVRRadioRDSInfo() override = default;
     bool OnMessage(CGUIMessage& message) override;
 
   protected:
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.cpp b/xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.cpp
index 9a1065cca006..fa69c622eddb 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.cpp
@@ -20,7 +20,7 @@ using namespace PVR;
 #define CONTROL_BTN_OK  7
 #define CONTROL_BTN_PLAY_RECORDING  8
 
-CGUIDialogPVRRecordingInfo::CGUIDialogPVRRecordingInfo(void)
+CGUIDialogPVRRecordingInfo::CGUIDialogPVRRecordingInfo()
   : CGUIDialog(WINDOW_DIALOG_PVR_RECORDING_INFO, "DialogPVRInfo.xml")
   , m_recordItem(new CFileItem)
 {
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.h b/xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.h
index 4cc5c9a06665..99c11ceb7e95 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.h
@@ -18,8 +18,8 @@ namespace PVR
   class CGUIDialogPVRRecordingInfo : public CGUIDialog
   {
   public:
-    CGUIDialogPVRRecordingInfo(void);
-    ~CGUIDialogPVRRecordingInfo(void) override = default;
+    CGUIDialogPVRRecordingInfo();
+    ~CGUIDialogPVRRecordingInfo() override = default;
     bool OnMessage(CGUIMessage& message) override;
     bool OnInfo(int actionID) override;
     bool HasListItems() const override { return true; }
diff --git a/xbmc/pvr/epg/Epg.cpp b/xbmc/pvr/epg/Epg.cpp
index 20988683db85..09fea6a0bd7c 100644
--- a/xbmc/pvr/epg/Epg.cpp
+++ b/xbmc/pvr/epg/Epg.cpp
@@ -45,12 +45,12 @@ CPVREpg::CPVREpg(int iEpgID, const std::string& strName, const std::string& strS
 {
 }
 
-CPVREpg::~CPVREpg(void)
+CPVREpg::~CPVREpg()
 {
   Clear();
 }
 
-void CPVREpg::ForceUpdate(void)
+void CPVREpg::ForceUpdate()
 {
   {
     CSingleLock lock(m_critSection);
@@ -60,7 +60,7 @@ void CPVREpg::ForceUpdate(void)
   m_events.Publish(PVREvent::EpgUpdatePending);
 }
 
-bool CPVREpg::HasValidEntries(void) const
+bool CPVREpg::HasValidEntries() const
 {
   CSingleLock lock(m_critSection);
   return (m_iEpgID > 0 && /* valid EPG ID */
@@ -68,7 +68,7 @@ bool CPVREpg::HasValidEntries(void) const
           m_tags.rbegin()->second->EndAsUTC() >= CDateTime::GetCurrentDateTime().GetAsUTCDateTime()); /* the last end time hasn't passed yet */
 }
 
-void CPVREpg::Clear(void)
+void CPVREpg::Clear()
 {
   CSingleLock lock(m_critSection);
   m_tags.clear();
@@ -183,7 +183,7 @@ std::shared_ptr<CPVREpgInfoTag> CPVREpg::GetTagPrevious() const
   return std::shared_ptr<CPVREpgInfoTag>();
 }
 
-bool CPVREpg::CheckPlayingEvent(void)
+bool CPVREpg::CheckPlayingEvent()
 {
   const std::shared_ptr<CPVREpgInfoTag> previousTag = GetTagNow(false);
   const std::shared_ptr<CPVREpgInfoTag> newTag = GetTagNow(true);
@@ -524,7 +524,7 @@ bool CPVREpg::Persist(const std::shared_ptr<CPVREpgDatabase>& database)
   return bRet;
 }
 
-CDateTime CPVREpg::GetFirstDate(void) const
+CDateTime CPVREpg::GetFirstDate() const
 {
   CDateTime first;
 
@@ -535,7 +535,7 @@ CDateTime CPVREpg::GetFirstDate(void) const
   return first;
 }
 
-CDateTime CPVREpg::GetLastDate(void) const
+CDateTime CPVREpg::GetLastDate() const
 {
   CDateTime last;
 
@@ -713,43 +713,43 @@ void CPVREpg::SetChannelData(const std::shared_ptr<CPVREpgChannelData>& data)
     tag.second->SetChannelData(data);
 }
 
-int CPVREpg::ChannelID(void) const
+int CPVREpg::ChannelID() const
 {
   CSingleLock lock(m_critSection);
   return m_channelData->ChannelId();
 }
 
-const std::string& CPVREpg::ScraperName(void) const
+const std::string& CPVREpg::ScraperName() const
 {
   CSingleLock lock(m_critSection);
   return m_strScraperName;
 }
 
-const std::string& CPVREpg::Name(void) const
+const std::string& CPVREpg::Name() const
 {
   CSingleLock lock(m_critSection);
   return m_strName;
 }
 
-int CPVREpg::EpgID(void) const
+int CPVREpg::EpgID() const
 {
   CSingleLock lock(m_critSection);
   return m_iEpgID;
 }
 
-bool CPVREpg::UpdatePending(void) const
+bool CPVREpg::UpdatePending() const
 {
   CSingleLock lock(m_critSection);
   return m_bUpdatePending;
 }
 
-bool CPVREpg::NeedsSave(void) const
+bool CPVREpg::NeedsSave() const
 {
   CSingleLock lock(m_critSection);
   return !m_changedTags.empty() || !m_deletedTags.empty() || m_bChanged;
 }
 
-bool CPVREpg::IsValid(void) const
+bool CPVREpg::IsValid() const
 {
   CSingleLock lock(m_critSection);
   if (ScraperName() == "client")
diff --git a/xbmc/pvr/epg/Epg.h b/xbmc/pvr/epg/Epg.h
index c1dde8dfdbcc..a48e5687b908 100644
--- a/xbmc/pvr/epg/Epg.h
+++ b/xbmc/pvr/epg/Epg.h
@@ -76,42 +76,42 @@ namespace PVR
      * @brief The id of the channel associated with this EPG.
      * @return The channel id or -1 if no channel is associated
      */
-    int ChannelID(void) const;
+    int ChannelID() const;
 
     /*!
      * @brief Get the name of the scraper to use for this table.
      * @return The name of the scraper to use for this table.
      */
-    const std::string& ScraperName(void) const;
+    const std::string& ScraperName() const;
 
     /*!
      * @brief Returns if there is a manual update pending for this EPG
      * @return True if there is a manual update pending, false otherwise
      */
-    bool UpdatePending(void) const;
+    bool UpdatePending() const;
 
     /*!
      * @brief Clear the current tags and schedule manual update
      */
-    void ForceUpdate(void);
+    void ForceUpdate();
 
     /*!
      * @brief Get the name of this table.
      * @return The name of this table.
      */
-    const std::string& Name(void) const;
+    const std::string& Name() const;
 
     /*!
      * @brief Get the database ID of this table.
      * @return The database ID of this table.
      */
-    int EpgID(void) const;
+    int EpgID() const;
 
     /*!
      * @brief Check whether this EPG contains valid entries.
      * @return True if it has valid entries, false if not.
      */
-    bool HasValidEntries(void) const;
+    bool HasValidEntries() const;
 
     /*!
      * @brief Remove all entries from this EPG that finished before the given time.
@@ -122,7 +122,7 @@ namespace PVR
     /*!
      * @brief Remove all entries from this EPG.
      */
-    void Clear(void);
+    void Clear();
 
     /*!
      * @brief Get the event that is occurring now
@@ -212,19 +212,19 @@ namespace PVR
      * @brief Get the start time of the first entry in this table.
      * @return The first date in UTC.
      */
-    CDateTime GetFirstDate(void) const;
+    CDateTime GetFirstDate() const;
 
     /*!
      * @brief Get the end time of the last entry in this table.
      * @return The last date in UTC.
      */
-    CDateTime GetLastDate(void) const;
+    CDateTime GetLastDate() const;
 
     /*!
      * @brief Notify observers when the currently active tag changed.
      * @return True if the playing tag has changed, false otherwise.
      */
-    bool CheckPlayingEvent(void);
+    bool CheckPlayingEvent();
 
     /*!
      * @brief Convert a genre id and subid to a human readable name.
@@ -238,13 +238,13 @@ namespace PVR
      * @brief Check whether this EPG has unsaved data.
      * @return True if this EPG contains unsaved data, false otherwise.
      */
-    bool NeedsSave(void) const;
+    bool NeedsSave() const;
 
     /*!
      * @brief Check whether this EPG is valid.
      * @return True if this EPG is valid and can be updated, false otherwise.
      */
-    bool IsValid(void) const;
+    bool IsValid() const;
 
     /*!
      * @brief Query the events available for CEventStream
@@ -252,7 +252,7 @@ namespace PVR
     CEventStream<PVREvent>& Events() { return m_events; }
 
   private:
-    CPVREpg(void) = delete;
+    CPVREpg() = delete;
     CPVREpg(const CPVREpg&) = delete;
     CPVREpg& operator =(const CPVREpg&) = delete;
 
diff --git a/xbmc/pvr/epg/EpgContainer.cpp b/xbmc/pvr/epg/EpgContainer.cpp
index e1b8c376b0e7..3f1759785ed8 100644
--- a/xbmc/pvr/epg/EpgContainer.cpp
+++ b/xbmc/pvr/epg/EpgContainer.cpp
@@ -91,7 +91,7 @@ void CEpgTagStateChange::Deliver()
   epg->UpdateEntry(m_epgtag, m_state, epgContainer.UseDatabase());
 }
 
-CPVREpgContainer::CPVREpgContainer(void) :
+CPVREpgContainer::CPVREpgContainer() :
   CThread("EPGUpdater"),
   m_database(new CPVREpgDatabase),
   m_settings({
@@ -106,7 +106,7 @@ CPVREpgContainer::CPVREpgContainer(void) :
   m_updateEvent.Reset();
 }
 
-CPVREpgContainer::~CPVREpgContainer(void)
+CPVREpgContainer::~CPVREpgContainer()
 {
   Stop();
   Clear();
@@ -121,13 +121,13 @@ std::shared_ptr<CPVREpgDatabase> CPVREpgContainer::GetEpgDatabase() const
   return m_database;
 }
 
-bool CPVREpgContainer::IsStarted(void) const
+bool CPVREpgContainer::IsStarted() const
 {
   CSingleLock lock(m_critSection);
   return m_bStarted;
 }
 
-int CPVREpgContainer::NextEpgId(void)
+int CPVREpgContainer::NextEpgId()
 {
   CSingleLock lock(m_critSection);
   return ++m_iNextEpgId;
@@ -165,7 +165,7 @@ class CPVREpgContainerStartJob : public CJob
 {
 public:
   CPVREpgContainerStartJob() = default;
-  ~CPVREpgContainerStartJob(void) override = default;
+  ~CPVREpgContainerStartJob() override = default;
 
   bool DoWork() override
   {
@@ -222,7 +222,7 @@ void CPVREpgContainer::Start(bool bAsync)
   }
 }
 
-void CPVREpgContainer::Stop(void)
+void CPVREpgContainer::Stop()
 {
   StopThread();
 
@@ -250,7 +250,7 @@ void CPVREpgContainer::Notify(const PVREvent& event)
   m_events.Publish(event);
 }
 
-void CPVREpgContainer::LoadFromDB(void)
+void CPVREpgContainer::LoadFromDB()
 {
   CSingleLock lock(m_critSection);
 
@@ -289,7 +289,7 @@ void CPVREpgContainer::LoadFromDB(void)
   m_bLoaded = bLoaded;
 }
 
-bool CPVREpgContainer::PersistAll(void)
+bool CPVREpgContainer::PersistAll()
 {
   bool bReturn = !UseDatabase();
 
@@ -311,7 +311,7 @@ bool CPVREpgContainer::PersistAll(void)
   return bReturn;
 }
 
-void CPVREpgContainer::Process(void)
+void CPVREpgContainer::Process()
 {
   time_t iNow = 0;
   time_t iLastSave = 0;
@@ -558,7 +558,7 @@ std::shared_ptr<CPVREpg> CPVREpgContainer::CreateChannelEpg(int iEpgId, const st
   return epg;
 }
 
-bool CPVREpgContainer::RemoveOldEntries(void)
+bool CPVREpgContainer::RemoveOldEntries()
 {
   const CDateTime cleanupTime(CDateTime::GetUTCDateTime() - CDateTimeSpan(GetPastDaysToDisplay(), 0, 0, 0));
 
@@ -607,7 +607,7 @@ bool CPVREpgContainer::UseDatabase() const
   return m_settings.GetBoolValue(CSettings::SETTING_EPG_STOREEPGINDATABASE);
 }
 
-bool CPVREpgContainer::InterruptUpdate(void) const
+bool CPVREpgContainer::InterruptUpdate() const
 {
   CSingleLock lock(m_critSection);
   return m_bStop ||
@@ -729,7 +729,7 @@ bool CPVREpgContainer::UpdateEPG(bool bOnlyPending /* = false */)
   return !bInterrupted;
 }
 
-const CDateTime CPVREpgContainer::GetFirstEPGDate(void)
+const CDateTime CPVREpgContainer::GetFirstEPGDate()
 {
   CDateTime returnValue;
 
@@ -747,7 +747,7 @@ const CDateTime CPVREpgContainer::GetFirstEPGDate(void)
   return returnValue;
 }
 
-const CDateTime CPVREpgContainer::GetLastEPGDate(void)
+const CDateTime CPVREpgContainer::GetLastEPGDate()
 {
   CDateTime returnValue;
 
@@ -765,7 +765,7 @@ const CDateTime CPVREpgContainer::GetLastEPGDate(void)
   return returnValue;
 }
 
-bool CPVREpgContainer::CheckPlayingEvents(void)
+bool CPVREpgContainer::CheckPlayingEvents()
 {
   bool bReturn = false;
   bool bFoundChanges = false;
diff --git a/xbmc/pvr/epg/EpgContainer.h b/xbmc/pvr/epg/EpgContainer.h
index 22b1869eb003..09bd7ff39a4e 100644
--- a/xbmc/pvr/epg/EpgContainer.h
+++ b/xbmc/pvr/epg/EpgContainer.h
@@ -42,12 +42,12 @@ namespace PVR
     /*!
      * @brief Create a new EPG table container.
      */
-    CPVREpgContainer(void);
+    CPVREpgContainer();
 
     /*!
      * @brief Destroy this instance.
      */
-    ~CPVREpgContainer(void) override;
+    ~CPVREpgContainer() override;
 
     /*!
      * @brief Get a pointer to the database instance.
@@ -69,7 +69,7 @@ namespace PVR
     /*!
      * @brief Stop the EPG update thread.
      */
-    void Stop(void);
+    void Stop();
 
     /*!
      * @brief Clear all EPG entries.
@@ -80,7 +80,7 @@ namespace PVR
      * @brief Check whether the EpgContainer has fully started.
      * @return True if started, false otherwise.
      */
-    bool IsStarted(void) const;
+    bool IsStarted() const;
 
     /*!
      * @brief Delete an EPG table from this container.
@@ -109,13 +109,13 @@ namespace PVR
      * @brief Get the start time of the first entry.
      * @return The start time.
      */
-    const CDateTime GetFirstEPGDate(void);
+    const CDateTime GetFirstEPGDate();
 
     /*!
      * @brief Get the end time of the last entry.
      * @return The end time.
      */
-    const CDateTime GetLastEPGDate(void);
+    const CDateTime GetLastEPGDate();
 
     /*!
      * @brief Get all EPGs.
@@ -205,13 +205,13 @@ namespace PVR
      * @brief Notify EPG table observers when the currently active tag changed.
      * @return True if the check was done, false if it was not the right time to check
      */
-    bool CheckPlayingEvents(void);
+    bool CheckPlayingEvents();
 
     /*!
      * @brief The next EPG ID to be given to a table when the db isn't being used.
      * @return The next ID.
      */
-    int NextEpgId(void);
+    int NextEpgId();
 
     /*!
      * @brief Wait for an EPG update to finish.
@@ -222,13 +222,13 @@ namespace PVR
      * @brief Call Persist() on each table
      * @return True when they all were persisted, false otherwise.
      */
-    bool PersistAll(void);
+    bool PersistAll();
 
     /*!
      * @brief Remove old EPG entries.
      * @return True if the old entries were removed successfully, false otherwise.
      */
-    bool RemoveOldEntries(void);
+    bool RemoveOldEntries();
 
     /*!
      * @brief Load and update the EPG data.
@@ -241,17 +241,17 @@ namespace PVR
      * @brief Check whether a running update should be interrupted.
      * @return True if a running update should be interrupted, false otherwise.
      */
-    bool InterruptUpdate(void) const;
+    bool InterruptUpdate() const;
 
     /*!
      * @brief EPG update thread
      */
-    void Process(void) override;
+    void Process() override;
 
     /*!
      * @brief Load all tables from the database
      */
-    void LoadFromDB(void);
+    void LoadFromDB();
 
     /*!
      * @brief Insert data from database
diff --git a/xbmc/pvr/epg/EpgDatabase.cpp b/xbmc/pvr/epg/EpgDatabase.cpp
index e7011db7f4c2..2e6692ea45a2 100644
--- a/xbmc/pvr/epg/EpgDatabase.cpp
+++ b/xbmc/pvr/epg/EpgDatabase.cpp
@@ -47,7 +47,7 @@ void CPVREpgDatabase::Unlock()
   m_critSection.unlock();
 }
 
-void CPVREpgDatabase::CreateTables(void)
+void CPVREpgDatabase::CreateTables()
 {
   CLog::Log(LOGINFO, "Creating EPG database tables");
 
@@ -144,7 +144,7 @@ void CPVREpgDatabase::UpdateTables(int iVersion)
   }
 }
 
-bool CPVREpgDatabase::DeleteEpg(void)
+bool CPVREpgDatabase::DeleteEpg()
 {
   bool bReturn(false);
   CLog::LogFC(LOGDEBUG, LOGEPG, "Deleting all EPG data from the database");
@@ -430,7 +430,7 @@ int CPVREpgDatabase::Persist(const CPVREpgInfoTag& tag, bool bSingleUpdate /* =
   return iReturn;
 }
 
-int CPVREpgDatabase::GetLastEPGId(void)
+int CPVREpgDatabase::GetLastEPGId()
 {
   CSingleLock lock(m_critSection);
   std::string strQuery = PrepareSQL("SELECT MAX(idEpg) FROM epg");
diff --git a/xbmc/pvr/epg/EpgDatabase.h b/xbmc/pvr/epg/EpgDatabase.h
index 366e761a1158..c2d88b8d3b12 100644
--- a/xbmc/pvr/epg/EpgDatabase.h
+++ b/xbmc/pvr/epg/EpgDatabase.h
@@ -29,12 +29,12 @@ namespace PVR
     /*!
      * @brief Create a new instance of the EPG database.
      */
-    CPVREpgDatabase(void) = default;
+    CPVREpgDatabase() = default;
 
     /*!
      * @brief Destroy this instance.
      */
-    ~CPVREpgDatabase(void) override = default;
+    ~CPVREpgDatabase() override = default;
 
     /*!
      * @brief Open the database.
@@ -61,13 +61,13 @@ namespace PVR
      * @brief Get the minimal database version that is required to operate correctly.
      * @return The minimal database version.
      */
-    int GetSchemaVersion(void) const override { return 12; }
+    int GetSchemaVersion() const override { return 12; }
 
     /*!
      * @brief Get the default sqlite database filename.
      * @return The default filename.
      */
-    const char* GetBaseDBName(void) const override { return "Epg"; }
+    const char* GetBaseDBName() const override { return "Epg"; }
 
     /*! @name EPG methods */
     //@{
@@ -76,7 +76,7 @@ namespace PVR
      * @brief Remove all EPG information from the database
      * @return True if the EPG information was erased, false otherwise.
      */
-    bool DeleteEpg(void);
+    bool DeleteEpg();
 
     /*!
      * @brief Delete an EPG table.
@@ -148,7 +148,7 @@ namespace PVR
     /*!
      * @return Last EPG id in the database
      */
-    int GetLastEPGId(void);
+    int GetLastEPGId();
 
     //@}
 
diff --git a/xbmc/pvr/epg/EpgInfoTag.cpp b/xbmc/pvr/epg/EpgInfoTag.cpp
index 2992adfb9bc6..a92436573c7c 100644
--- a/xbmc/pvr/epg/EpgInfoTag.cpp
+++ b/xbmc/pvr/epg/EpgInfoTag.cpp
@@ -251,25 +251,25 @@ CDateTime CPVREpgInfoTag::GetCurrentPlayingTime() const
   return CDateTime::GetUTCDateTime();
 }
 
-bool CPVREpgInfoTag::IsActive(void) const
+bool CPVREpgInfoTag::IsActive() const
 {
   CDateTime now = GetCurrentPlayingTime();
   return (m_startTime <= now && m_endTime > now);
 }
 
-bool CPVREpgInfoTag::WasActive(void) const
+bool CPVREpgInfoTag::WasActive() const
 {
   CDateTime now = GetCurrentPlayingTime();
   return (m_endTime < now);
 }
 
-bool CPVREpgInfoTag::IsUpcoming(void) const
+bool CPVREpgInfoTag::IsUpcoming() const
 {
   CDateTime now = GetCurrentPlayingTime();
   return (m_startTime > now);
 }
 
-float CPVREpgInfoTag::ProgressPercentage(void) const
+float CPVREpgInfoTag::ProgressPercentage() const
 {
   float fReturn = 0.0f;
 
@@ -287,7 +287,7 @@ float CPVREpgInfoTag::ProgressPercentage(void) const
   return fReturn;
 }
 
-int CPVREpgInfoTag::Progress(void) const
+int CPVREpgInfoTag::Progress() const
 {
   time_t currentTime, startTime;
   CDateTime::GetCurrentDateTime().GetAsUTCDateTime().GetAsTime(currentTime);
@@ -305,40 +305,40 @@ void CPVREpgInfoTag::SetUniqueBroadcastID(unsigned int iUniqueBroadcastID)
   m_iUniqueBroadcastID = iUniqueBroadcastID;
 }
 
-unsigned int CPVREpgInfoTag::UniqueBroadcastID(void) const
+unsigned int CPVREpgInfoTag::UniqueBroadcastID() const
 {
   return m_iUniqueBroadcastID;
 }
 
-int CPVREpgInfoTag::DatabaseID(void) const
+int CPVREpgInfoTag::DatabaseID() const
 {
   return m_iDatabaseID;
 }
 
-int CPVREpgInfoTag::UniqueChannelID(void) const
+int CPVREpgInfoTag::UniqueChannelID() const
 {
   CSingleLock lock(m_critSection);
   return m_channelData->UniqueClientChannelId();
 }
 
-CDateTime CPVREpgInfoTag::StartAsUTC(void) const
+CDateTime CPVREpgInfoTag::StartAsUTC() const
 {
   return m_startTime;
 }
 
-CDateTime CPVREpgInfoTag::StartAsLocalTime(void) const
+CDateTime CPVREpgInfoTag::StartAsLocalTime() const
 {
   CDateTime retVal;
   retVal.SetFromUTCDateTime(m_startTime);
   return retVal;
 }
 
-CDateTime CPVREpgInfoTag::EndAsUTC(void) const
+CDateTime CPVREpgInfoTag::EndAsUTC() const
 {
   return m_endTime;
 }
 
-CDateTime CPVREpgInfoTag::EndAsLocalTime(void) const
+CDateTime CPVREpgInfoTag::EndAsLocalTime() const
 {
   CDateTime retVal;
   retVal.SetFromUTCDateTime(m_endTime);
@@ -350,7 +350,7 @@ void CPVREpgInfoTag::SetEndFromUTC(const CDateTime& end)
   m_endTime = end;
 }
 
-int CPVREpgInfoTag::GetDuration(void) const
+int CPVREpgInfoTag::GetDuration() const
 {
   time_t start, end;
   m_startTime.GetAsTime(start);
@@ -378,17 +378,17 @@ std::string CPVREpgInfoTag::OriginalTitle() const
   return m_strOriginalTitle;
 }
 
-const std::vector<std::string> CPVREpgInfoTag::Cast(void) const
+const std::vector<std::string> CPVREpgInfoTag::Cast() const
 {
   return m_cast;
 }
 
-const std::vector<std::string> CPVREpgInfoTag::Directors(void) const
+const std::vector<std::string> CPVREpgInfoTag::Directors() const
 {
   return m_directors;
 }
 
-const std::vector<std::string> CPVREpgInfoTag::Writers(void) const
+const std::vector<std::string> CPVREpgInfoTag::Writers() const
 {
   return m_writers;
 }
@@ -418,7 +418,7 @@ const std::string CPVREpgInfoTag::GetGenresLabel() const
   return StringUtils::Join(m_genre, CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->m_videoItemSeparator);
 }
 
-int CPVREpgInfoTag::Year(void) const
+int CPVREpgInfoTag::Year() const
 {
   return m_iYear;
 }
@@ -448,44 +448,44 @@ void CPVREpgInfoTag::SetGenre(int iGenreType, int iGenreSubType, const char* str
   }
 }
 
-int CPVREpgInfoTag::GenreType(void) const
+int CPVREpgInfoTag::GenreType() const
 {
   return m_iGenreType;
 }
 
-int CPVREpgInfoTag::GenreSubType(void) const
+int CPVREpgInfoTag::GenreSubType() const
 {
   return m_iGenreSubType;
 }
 
-const std::vector<std::string> CPVREpgInfoTag::Genre(void) const
+const std::vector<std::string> CPVREpgInfoTag::Genre() const
 {
   return m_genre;
 }
 
-CDateTime CPVREpgInfoTag::FirstAiredAsUTC(void) const
+CDateTime CPVREpgInfoTag::FirstAiredAsUTC() const
 {
   return m_firstAired;
 }
 
-CDateTime CPVREpgInfoTag::FirstAiredAsLocalTime(void) const
+CDateTime CPVREpgInfoTag::FirstAiredAsLocalTime() const
 {
   CDateTime retVal;
   retVal.SetFromUTCDateTime(m_firstAired);
   return retVal;
 }
 
-int CPVREpgInfoTag::ParentalRating(void) const
+int CPVREpgInfoTag::ParentalRating() const
 {
   return m_iParentalRating;
 }
 
-int CPVREpgInfoTag::StarRating(void) const
+int CPVREpgInfoTag::StarRating() const
 {
   return m_iStarRating;
 }
 
-int CPVREpgInfoTag::SeriesNumber(void) const
+int CPVREpgInfoTag::SeriesNumber() const
 {
   return m_iSeriesNumber;
 }
@@ -495,12 +495,12 @@ std::string CPVREpgInfoTag::SeriesLink() const
   return m_strSeriesLink;
 }
 
-int CPVREpgInfoTag::EpisodeNumber(void) const
+int CPVREpgInfoTag::EpisodeNumber() const
 {
   return m_iEpisodeNumber;
 }
 
-int CPVREpgInfoTag::EpisodePart(void) const
+int CPVREpgInfoTag::EpisodePart() const
 {
   return m_iEpisodePart;
 }
@@ -510,12 +510,12 @@ std::string CPVREpgInfoTag::EpisodeName() const
   return m_strEpisodeName;
 }
 
-std::string CPVREpgInfoTag::Icon(void) const
+std::string CPVREpgInfoTag::Icon() const
 {
   return m_strIconPath;
 }
 
-std::string CPVREpgInfoTag::Path(void) const
+std::string CPVREpgInfoTag::Path() const
 {
   return m_strFileNameAndPath;
 }
@@ -641,12 +641,12 @@ std::vector<PVR_EDL_ENTRY> CPVREpgInfoTag::GetEdl() const
   return edls;
 }
 
-void CPVREpgInfoTag::UpdatePath(void)
+void CPVREpgInfoTag::UpdatePath()
 {
   m_strFileNameAndPath = StringUtils::Format("pvr://guide/%04i/%s.epg", EpgID(), m_startTime.GetAsDBDateTime().c_str());
 }
 
-int CPVREpgInfoTag::EpgID(void) const
+int CPVREpgInfoTag::EpgID() const
 {
   return m_iEpgID;
 }
@@ -657,7 +657,7 @@ void CPVREpgInfoTag::SetEpgID(int iEpgID)
   UpdatePath(); // Note: path contains epg id.
 }
 
-bool CPVREpgInfoTag::IsRecordable(void) const
+bool CPVREpgInfoTag::IsRecordable() const
 {
   bool bIsRecordable = false;
 
@@ -671,7 +671,7 @@ bool CPVREpgInfoTag::IsRecordable(void) const
   return bIsRecordable;
 }
 
-bool CPVREpgInfoTag::IsPlayable(void) const
+bool CPVREpgInfoTag::IsPlayable() const
 {
   bool bIsPlayable = false;
 
@@ -685,7 +685,7 @@ bool CPVREpgInfoTag::IsPlayable(void) const
   return bIsPlayable;
 }
 
-bool CPVREpgInfoTag::IsSeries(void) const
+bool CPVREpgInfoTag::IsSeries() const
 {
   if ((m_iFlags & EPG_TAG_FLAG_IS_SERIES) > 0 || SeriesNumber() > 0 || EpisodeNumber() > 0 || EpisodePart() > 0)
     return true;
diff --git a/xbmc/pvr/epg/EpgInfoTag.h b/xbmc/pvr/epg/EpgInfoTag.h
index 99d20202be06..30b79915df2a 100644
--- a/xbmc/pvr/epg/EpgInfoTag.h
+++ b/xbmc/pvr/epg/EpgInfoTag.h
@@ -72,37 +72,37 @@ namespace PVR
      * @brief Check if this event is currently active.
      * @return True if it's active, false otherwise.
      */
-    bool IsActive(void) const;
+    bool IsActive() const;
 
     /*!
      * @brief Check if this event is in the past.
      * @return True when this event has already passed, false otherwise.
      */
-    bool WasActive(void) const;
+    bool WasActive() const;
 
     /*!
      * @brief Check if this event is in the future.
      * @return True when this event is an upcoming event, false otherwise.
      */
-    bool IsUpcoming(void) const;
+    bool IsUpcoming() const;
 
     /*!
      * @brief Get the progress of this tag in percent.
      * @return The current progress of this tag.
      */
-    float ProgressPercentage(void) const;
+    float ProgressPercentage() const;
 
     /*!
      * @brief Get the progress of this tag in seconds.
      * @return The current progress of this tag in seconds.
      */
-    int Progress(void) const;
+    int Progress() const;
 
     /*!
      * @brief Get EPG ID of this tag.
      * @return The epg ID.
      */
-    int EpgID(void) const;
+    int EpgID() const;
 
     /*!
      * @brief Sets the EPG id for this event.
@@ -120,43 +120,43 @@ namespace PVR
      * @brief Get the unique broadcast ID.
      * @return The unique broadcast ID.
      */
-    unsigned int UniqueBroadcastID(void) const;
+    unsigned int UniqueBroadcastID() const;
 
     /*!
      * @brief Get the event's database ID.
      * @return The database ID.
      */
-    int DatabaseID(void) const;
+    int DatabaseID() const;
 
     /*!
      * @brief Get the unique ID of the channel associated with this event.
      * @return The unique channel ID.
      */
-    int UniqueChannelID(void) const;
+    int UniqueChannelID() const;
 
     /*!
      * @brief Get the event's start time.
      * @return The start time in UTC.
      */
-    CDateTime StartAsUTC(void) const;
+    CDateTime StartAsUTC() const;
 
     /*!
      * @brief Get the event's start time.
      * @return The start time as local time.
      */
-    CDateTime StartAsLocalTime(void) const;
+    CDateTime StartAsLocalTime() const;
 
     /*!
      * @brief Get the event's end time.
      * @return The end time in UTC.
      */
-    CDateTime EndAsUTC(void) const;
+    CDateTime EndAsUTC() const;
 
     /*!
      * @brief Get the event's end time.
      * @return The end time as local time.
      */
-    CDateTime EndAsLocalTime(void) const;
+    CDateTime EndAsLocalTime() const;
 
     /*!
      * @brief Change the event's end time.
@@ -168,7 +168,7 @@ namespace PVR
      * @brief Get the duration of this event in seconds.
      * @return The duration.
      */
-    int GetDuration(void) const;
+    int GetDuration() const;
 
     /*!
      * @brief Get the title of this event.
@@ -252,49 +252,49 @@ namespace PVR
      * @brief Get the genre type ID of this event.
      * @return The genre type ID.
      */
-    int GenreType(void) const;
+    int GenreType() const;
 
     /*!
      * @brief Get the genre subtype ID of this event.
      * @return The genre subtype ID.
      */
-    int GenreSubType(void) const;
+    int GenreSubType() const;
 
     /*!
      * @brief Get the genre as human readable string.
      * @return The genre.
      */
-    const std::vector<std::string> Genre(void) const;
+    const std::vector<std::string> Genre() const;
 
     /*!
      * @brief Get the first air date of this event.
      * @return The first air date in UTC.
      */
-    CDateTime FirstAiredAsUTC(void) const;
+    CDateTime FirstAiredAsUTC() const;
 
     /*!
      * @brief Get the first air date of this event.
      * @return The first air date as local time.
      */
-    CDateTime FirstAiredAsLocalTime(void) const;
+    CDateTime FirstAiredAsLocalTime() const;
 
     /*!
      * @brief Get the parental rating of this event.
      * @return The parental rating.
      */
-    int ParentalRating(void) const;
+    int ParentalRating() const;
 
     /*!
      * @brief Get the star rating of this event.
      * @return The star rating.
      */
-    int StarRating(void) const;
+    int StarRating() const;
 
     /*!
      * @brief The series number of this event.
      * @return The series number.
      */
-    int SeriesNumber(void) const;
+    int SeriesNumber() const;
 
     /*!
      * @brief The series link for this event.
@@ -306,13 +306,13 @@ namespace PVR
      * @brief The episode number of this event.
      * @return The episode number.
      */
-    int EpisodeNumber(void) const;
+    int EpisodeNumber() const;
 
     /*!
      * @brief The episode part number of this event.
      * @return The episode part number.
      */
-    int EpisodePart(void) const;
+    int EpisodePart() const;
 
     /*!
      * @brief The episode name of this event.
@@ -324,25 +324,25 @@ namespace PVR
      * @brief Get the path to the icon for this event.
      * @return The path to the icon
      */
-    std::string Icon(void) const;
+    std::string Icon() const;
 
     /*!
      * @brief The path to this event.
      * @return The path.
      */
-    std::string Path(void) const;
+    std::string Path() const;
 
     /*!
      * @brief Check if this event can be recorded.
      * @return True if it can be recorded, false otherwise.
      */
-    bool IsRecordable(void) const;
+    bool IsRecordable() const;
 
     /*!
      * @brief Check if this event can be played.
      * @return True if it can be played, false otherwise.
      */
-    bool IsPlayable(void) const;
+    bool IsPlayable() const;
 
     /*!
      * @brief Persist this tag in the given database.
@@ -420,13 +420,13 @@ namespace PVR
     /*!
      * @brief Update the path of this tag.
      */
-    void UpdatePath(void);
+    void UpdatePath();
 
     /*!
      * @brief Get current time, taking timeshifting into account.
      * @return The playing time.
      */
-    CDateTime GetCurrentPlayingTime(void) const;
+    CDateTime GetCurrentPlayingTime() const;
 
     int m_iDatabaseID = -1; /*!< database ID */
     int m_iGenreType = 0; /*!< genre type */
diff --git a/xbmc/pvr/guilib/PVRGUIActions.cpp b/xbmc/pvr/guilib/PVRGUIActions.cpp
index 45de7d104243..0634ca1f6ced 100644
--- a/xbmc/pvr/guilib/PVRGUIActions.cpp
+++ b/xbmc/pvr/guilib/PVRGUIActions.cpp
@@ -1956,7 +1956,7 @@ namespace PVR
     }
   } // unnamed namespace
 
-  bool CPVRGUIActions::IsNextEventWithinBackendIdleTime(void) const
+  bool CPVRGUIActions::IsNextEventWithinBackendIdleTime() const
   {
     // timers going off soon?
     const CDateTime now(CDateTime::GetUTCDateTime());
diff --git a/xbmc/pvr/guilib/PVRGUIActions.h b/xbmc/pvr/guilib/PVRGUIActions.h
index c4de9f48d5bd..9977c52852e4 100644
--- a/xbmc/pvr/guilib/PVRGUIActions.h
+++ b/xbmc/pvr/guilib/PVRGUIActions.h
@@ -520,7 +520,7 @@ namespace PVR
 
     bool AllLocalBackendsIdle(std::shared_ptr<CPVRTimerInfoTag>& causingEvent) const;
     bool EventOccursOnLocalBackend(const std::shared_ptr<CFileItem>& item) const;
-    bool IsNextEventWithinBackendIdleTime(void) const;
+    bool IsNextEventWithinBackendIdleTime() const;
 
     /*!
      * @brief Announce and process a reminder timer.
diff --git a/xbmc/pvr/guilib/guiinfo/PVRGUIInfo.cpp b/xbmc/pvr/guilib/guiinfo/PVRGUIInfo.cpp
index c3fee6aa8365..f41a073ff7f5 100644
--- a/xbmc/pvr/guilib/guiinfo/PVRGUIInfo.cpp
+++ b/xbmc/pvr/guilib/guiinfo/PVRGUIInfo.cpp
@@ -46,13 +46,12 @@
 using namespace PVR;
 using namespace KODI::GUILIB::GUIINFO;
 
-CPVRGUIInfo::CPVRGUIInfo(void) :
-    CThread("PVRGUIInfo")
+CPVRGUIInfo::CPVRGUIInfo() : CThread("PVRGUIInfo")
 {
   ResetProperties();
 }
 
-void CPVRGUIInfo::ResetProperties(void)
+void CPVRGUIInfo::ResetProperties()
 {
   CSingleLock lock(m_critSection);
 
@@ -103,14 +102,14 @@ void CPVRGUIInfo::ClearDescrambleInfo(PVR_DESCRAMBLE_INFO& descrambleInfo)
   descrambleInfo = {0};
 }
 
-void CPVRGUIInfo::Start(void)
+void CPVRGUIInfo::Start()
 {
   ResetProperties();
   Create();
   SetPriority(-1);
 }
 
-void CPVRGUIInfo::Stop(void)
+void CPVRGUIInfo::Stop()
 {
   StopThread();
   CServiceBroker::GetPVRManager().Events().Unsubscribe(this);
@@ -129,7 +128,7 @@ void CPVRGUIInfo::Notify(const PVREvent& event)
     UpdateTimersCache();
 }
 
-void CPVRGUIInfo::Process(void)
+void CPVRGUIInfo::Process()
 {
   unsigned int iLoop = 0;
   int toggleInterval = CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->m_iPVRInfoToggleInterval / 1000;
@@ -189,7 +188,7 @@ void CPVRGUIInfo::Process(void)
   }
 }
 
-void CPVRGUIInfo::UpdateQualityData(void)
+void CPVRGUIInfo::UpdateQualityData()
 {
   PVR_SIGNAL_STATUS qualityInfo;
   ClearQualityInfo(qualityInfo);
@@ -209,7 +208,7 @@ void CPVRGUIInfo::UpdateQualityData(void)
   }
 }
 
-void CPVRGUIInfo::UpdateDescrambleData(void)
+void CPVRGUIInfo::UpdateDescrambleData()
 {
   PVR_DESCRAMBLE_INFO descrambleInfo;
   ClearDescrambleInfo(descrambleInfo);
@@ -226,7 +225,7 @@ void CPVRGUIInfo::UpdateDescrambleData(void)
   }
 }
 
-void CPVRGUIInfo::UpdateMisc(void)
+void CPVRGUIInfo::UpdateMisc()
 {
   CPVRManager& mgr = CServiceBroker::GetPVRManager();
   bool bStarted = mgr.IsStarted();
@@ -267,7 +266,7 @@ void CPVRGUIInfo::UpdateMisc(void)
   m_bIsPlayingActiveRecording = bIsPlayingActiveRecording;
 }
 
-void CPVRGUIInfo::UpdateTimeshiftData(void)
+void CPVRGUIInfo::UpdateTimeshiftData()
 {
   m_timesInfo.Update();
 }
@@ -1582,7 +1581,7 @@ void CPVRGUIInfo::CharInfoProvider(std::string& strValue) const
     strValue = m_qualityInfo.strProviderName;
 }
 
-void CPVRGUIInfo::UpdateBackendCache(void)
+void CPVRGUIInfo::UpdateBackendCache()
 {
   CSingleLock lock(m_critSection);
 
@@ -1641,21 +1640,21 @@ void CPVRGUIInfo::UpdateBackendCache(void)
     m_iCurrentActiveClient = 0;
 }
 
-void CPVRGUIInfo::UpdateTimersCache(void)
+void CPVRGUIInfo::UpdateTimersCache()
 {
   m_anyTimersInfo.UpdateTimersCache();
   m_tvTimersInfo.UpdateTimersCache();
   m_radioTimersInfo.UpdateTimersCache();
 }
 
-void CPVRGUIInfo::UpdateTimersToggle(void)
+void CPVRGUIInfo::UpdateTimersToggle()
 {
   m_anyTimersInfo.UpdateTimersToggle();
   m_tvTimersInfo.UpdateTimersToggle();
   m_radioTimersInfo.UpdateTimersToggle();
 }
 
-void CPVRGUIInfo::UpdateNextTimer(void)
+void CPVRGUIInfo::UpdateNextTimer()
 {
   m_anyTimersInfo.UpdateNextTimer();
   m_tvTimersInfo.UpdateNextTimer();
diff --git a/xbmc/pvr/guilib/guiinfo/PVRGUIInfo.h b/xbmc/pvr/guilib/guiinfo/PVRGUIInfo.h
index 3b97ee9ef237..0a073537ca9e 100644
--- a/xbmc/pvr/guilib/guiinfo/PVRGUIInfo.h
+++ b/xbmc/pvr/guilib/guiinfo/PVRGUIInfo.h
@@ -40,11 +40,11 @@ namespace PVR
   class CPVRGUIInfo : public KODI::GUILIB::GUIINFO::CGUIInfoProvider, private CThread
   {
   public:
-    CPVRGUIInfo(void);
+    CPVRGUIInfo();
     ~CPVRGUIInfo() override = default;
 
-    void Start(void);
-    void Stop(void);
+    void Start();
+    void Stop();
 
     /*!
      * @brief CEventStream callback for PVR events.
@@ -59,22 +59,22 @@ namespace PVR
     bool GetBool(bool& value, const CGUIListItem* item, int contextWindow, const KODI::GUILIB::GUIINFO::CGUIInfo& info) const override;
 
   private:
-    void ResetProperties(void);
+    void ResetProperties();
     void ClearQualityInfo(PVR_SIGNAL_STATUS& qualityInfo);
     void ClearDescrambleInfo(PVR_DESCRAMBLE_INFO& descrambleInfo);
 
-    void Process(void) override;
+    void Process() override;
 
-    void UpdateTimersCache(void);
-    void UpdateBackendCache(void);
-    void UpdateQualityData(void);
-    void UpdateDescrambleData(void);
-    void UpdateMisc(void);
-    void UpdateNextTimer(void);
-    void UpdateTimeshiftData(void);
+    void UpdateTimersCache();
+    void UpdateBackendCache();
+    void UpdateQualityData();
+    void UpdateDescrambleData();
+    void UpdateMisc();
+    void UpdateNextTimer();
+    void UpdateTimeshiftData();
     void UpdateTimeshiftProgressData();
 
-    void UpdateTimersToggle(void);
+    void UpdateTimersToggle();
 
     bool GetListItemAndPlayerLabel(const CFileItem* item, const KODI::GUILIB::GUIINFO::CGUIInfo& info, std::string& strValue) const;
     bool GetPVRLabel(const CFileItem* item, const KODI::GUILIB::GUIINFO::CGUIInfo& info, std::string& strValue) const;
diff --git a/xbmc/pvr/guilib/guiinfo/PVRGUITimerInfo.cpp b/xbmc/pvr/guilib/guiinfo/PVRGUITimerInfo.cpp
index 43cf52bd2c52..903e2324d8ab 100644
--- a/xbmc/pvr/guilib/guiinfo/PVRGUITimerInfo.cpp
+++ b/xbmc/pvr/guilib/guiinfo/PVRGUITimerInfo.cpp
@@ -107,7 +107,7 @@ void CPVRGUITimerInfo::UpdateTimersToggle()
   m_strActiveTimerTime = strActiveTimerTime;
 }
 
-void CPVRGUITimerInfo::UpdateTimersCache(void)
+void CPVRGUITimerInfo::UpdateTimersCache()
 {
   int iTimerAmount = AmountActiveTimers();
   int iRecordingTimerAmount = AmountActiveRecordings();
diff --git a/xbmc/pvr/recordings/PVRRecording.cpp b/xbmc/pvr/recordings/PVRRecording.cpp
index 8d9847d63a2c..22672cbd8748 100644
--- a/xbmc/pvr/recordings/PVRRecording.cpp
+++ b/xbmc/pvr/recordings/PVRRecording.cpp
@@ -192,7 +192,7 @@ void CPVRRecording::Serialize(CVariant& value) const
     value["art"]["fanart"] = m_strFanartPath;
 }
 
-void CPVRRecording::Reset(void)
+void CPVRRecording::Reset()
 {
   m_strRecordingId     .clear();
   m_iClientId = -1;
@@ -217,13 +217,13 @@ void CPVRRecording::Reset(void)
   CVideoInfoTag::Reset();
 }
 
-bool CPVRRecording::Delete(void)
+bool CPVRRecording::Delete()
 {
   std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
   return client && (client->DeleteRecording(*this) == PVR_ERROR_NO_ERROR);
 }
 
-bool CPVRRecording::Undelete(void)
+bool CPVRRecording::Undelete()
 {
   const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
   return client && (client->UndeleteRecording(*this) == PVR_ERROR_NO_ERROR);
@@ -398,13 +398,13 @@ void CPVRRecording::Update(const CPVRRecording& tag)
   UpdatePath();
 }
 
-void CPVRRecording::UpdatePath(void)
+void CPVRRecording::UpdatePath()
 {
   m_strFileNameAndPath = CPVRRecordingsPath(
     m_bIsDeleted, m_bRadio, m_strDirectory, m_strTitle, m_iSeason, m_iEpisode, GetYear(), m_strShowTitle, m_strChannelName, m_recordingTime, m_strRecordingId);
 }
 
-const CDateTime& CPVRRecording::RecordingTimeAsLocalTime(void) const
+const CDateTime& CPVRRecording::RecordingTimeAsLocalTime() const
 {
   static CDateTime tmp;
   tmp.SetFromUTCDateTime(m_recordingTime);
@@ -447,7 +447,7 @@ std::string CPVRRecording::GetTitleFromURL(const std::string& url)
   return CPVRRecordingsPath(url).GetTitle();
 }
 
-std::shared_ptr<CPVRChannel> CPVRRecording::Channel(void) const
+std::shared_ptr<CPVRChannel> CPVRRecording::Channel() const
 {
   if (m_iChannelUid != PVR_CHANNEL_INVALID_UID)
     return CServiceBroker::GetPVRManager().ChannelGroups()->GetByUniqueID(m_iChannelUid, m_iClientId);
@@ -455,12 +455,12 @@ std::shared_ptr<CPVRChannel> CPVRRecording::Channel(void) const
   return std::shared_ptr<CPVRChannel>();
 }
 
-int CPVRRecording::ChannelUid(void) const
+int CPVRRecording::ChannelUid() const
 {
   return m_iChannelUid;
 }
 
-int CPVRRecording::ClientID(void) const
+int CPVRRecording::ClientID() const
 {
   return m_iClientId;
 }
diff --git a/xbmc/pvr/recordings/PVRRecording.h b/xbmc/pvr/recordings/PVRRecording.h
index 9f77eb8b29ab..a64ec1fed09e 100644
--- a/xbmc/pvr/recordings/PVRRecording.h
+++ b/xbmc/pvr/recordings/PVRRecording.h
@@ -74,7 +74,7 @@ namespace PVR
     std::string m_strFanartPath; /*!< fanart path */
     unsigned m_iRecordingId; /*!< id that won't change while xbmc is running */
 
-    CPVRRecording(void);
+    CPVRRecording();
     CPVRRecording(const PVR_RECORDING& recording, unsigned int iClientId);
 
   private:
@@ -90,19 +90,19 @@ namespace PVR
     /*!
      * @brief Reset this tag to it's initial state.
      */
-    void Reset(void);
+    void Reset();
 
     /*!
      * @brief Delete this recording on the client (if supported).
      * @return True if it was deleted successfully, false otherwise.
      */
-    bool Delete(void);
+    bool Delete();
 
     /*!
      * @brief Undelete this recording on the client (if supported).
      * @return True if it was undeleted successfully, false otherwise.
      */
-    bool Undelete(void);
+    bool Undelete();
 
     /*!
      * @brief Rename this recording on the client (if supported).
@@ -187,13 +187,13 @@ namespace PVR
      * @brief Retrieve the recording start as UTC time
      * @return the recording start time
      */
-    const CDateTime& RecordingTimeAsUTC(void) const { return m_recordingTime; }
+    const CDateTime& RecordingTimeAsUTC() const { return m_recordingTime; }
 
     /*!
      * @brief Retrieve the recording start as local time
      * @return the recording start time
      */
-    const CDateTime& RecordingTimeAsLocalTime(void) const;
+    const CDateTime& RecordingTimeAsLocalTime() const;
 
     /*!
      * @brief Retrieve the recording end as UTC time
@@ -247,31 +247,31 @@ namespace PVR
     /*!
      * @return Broadcast id of the EPG event associated with this recording or EPG_TAG_INVALID_UID
      */
-    unsigned int BroadcastUid(void) const { return m_iEpgEventId; }
+    unsigned int BroadcastUid() const { return m_iEpgEventId; }
 
     /*!
      * @return Get the channel on which this recording is/was running
      * @note Only works if the recording has a channel uid provided by the add-on
      */
-    std::shared_ptr<CPVRChannel> Channel(void) const;
+    std::shared_ptr<CPVRChannel> Channel() const;
 
     /*!
      * @brief Get the uid of the channel on which this recording is/was running
      * @return the uid of the channel or PVR_CHANNEL_INVALID_UID
      */
-    int ChannelUid(void) const;
+    int ChannelUid() const;
 
     /*!
      * @brief the identifier of the client that serves this recording
      * @return the client identifier
      */
-    int ClientID(void) const;
+    int ClientID() const;
 
     /*!
      * @brief Retrieve the recording Episode Name
      * @note Returns an empty string if no Episode Name was provided by the PVR client
      */
-    std::string EpisodeName(void) const { return m_strShowTitle; }
+    std::string EpisodeName() const { return m_strShowTitle; }
 
     /*!
      * @brief check whether this recording is currently in progress
@@ -297,19 +297,19 @@ namespace PVR
      * @brief Get the genre type ID of this event.
      * @return The genre type ID.
      */
-    int GenreType(void) const { return m_iGenreType; }
+    int GenreType() const { return m_iGenreType; }
 
     /*!
      * @brief Get the genre subtype ID of this event.
      * @return The genre subtype ID.
      */
-    int GenreSubType(void) const { return m_iGenreSubType; }
+    int GenreSubType() const { return m_iGenreSubType; }
 
     /*!
      * @brief Get the genre as human readable string.
      * @return The genre.
      */
-    const std::vector<std::string> Genre(void) const { return m_genre; }
+    const std::vector<std::string> Genre() const { return m_genre; }
 
     /*!
      * @brief Get the genre(s) of this event as formatted string.
@@ -328,6 +328,6 @@ namespace PVR
     int m_iGenreSubType = 0; /*!< genre subtype */
     mutable XbmcThreads::EndTime m_resumePointRefetchTimeout;
 
-    void UpdatePath(void);
+    void UpdatePath();
   };
 }
diff --git a/xbmc/pvr/recordings/PVRRecordings.cpp b/xbmc/pvr/recordings/PVRRecordings.cpp
index 9552b41c1bfe..7f24eadc7435 100644
--- a/xbmc/pvr/recordings/PVRRecordings.cpp
+++ b/xbmc/pvr/recordings/PVRRecordings.cpp
@@ -33,7 +33,7 @@ CPVRRecordings::~CPVRRecordings()
     m_database->Close();
 }
 
-void CPVRRecordings::UpdateFromClients(void)
+void CPVRRecordings::UpdateFromClients()
 {
   CSingleLock lock(m_critSection);
   Unload();
@@ -41,7 +41,7 @@ void CPVRRecordings::UpdateFromClients(void)
   CServiceBroker::GetPVRManager().Clients()->GetRecordings(this, true);
 }
 
-int CPVRRecordings::Load(void)
+int CPVRRecordings::Load()
 {
   Unload();
   Update();
@@ -58,7 +58,7 @@ void CPVRRecordings::Unload()
   m_recordings.clear();
 }
 
-void CPVRRecordings::Update(void)
+void CPVRRecordings::Update()
 {
   CSingleLock lock(m_critSection);
   if (m_bIsUpdating)
diff --git a/xbmc/pvr/recordings/PVRRecordings.h b/xbmc/pvr/recordings/PVRRecordings.h
index 97342b7ef86b..086bdbfd5ae3 100644
--- a/xbmc/pvr/recordings/PVRRecordings.h
+++ b/xbmc/pvr/recordings/PVRRecordings.h
@@ -28,7 +28,7 @@ namespace PVR
   {
   public:
     CPVRRecordings();
-    virtual ~CPVRRecordings(void);
+    virtual ~CPVRRecordings();
 
     /*!
      * @brief (re)load the recordings from the clients.
@@ -46,7 +46,7 @@ namespace PVR
     /*!
      * @brief refresh the recordings list from the clients.
      */
-    void Update(void);
+    void Update();
 
     int GetNumTVRecordings() const;
     bool HasDeletedTVRecordings() const;
@@ -96,7 +96,7 @@ namespace PVR
     unsigned int m_iTVRecordings = 0;
     unsigned int m_iRadioRecordings = 0;
 
-    void UpdateFromClients(void);
+    void UpdateFromClients();
 
     /*!
      * @brief Get/Open the video database.
diff --git a/xbmc/pvr/timers/PVRTimerInfoTag.cpp b/xbmc/pvr/timers/PVRTimerInfoTag.cpp
index e2408b92c681..591ec803d160 100644
--- a/xbmc/pvr/timers/PVRTimerInfoTag.cpp
+++ b/xbmc/pvr/timers/PVRTimerInfoTag.cpp
@@ -305,7 +305,7 @@ void CPVRTimerInfoTag::Serialize(CVariant& value) const
   value["serieslink"]        = m_strSeriesLink;
 }
 
-void CPVRTimerInfoTag::UpdateSummary(void)
+void CPVRTimerInfoTag::UpdateSummary()
 {
   CSingleLock lock(m_critSection);
   m_strSummary.clear();
@@ -506,7 +506,7 @@ bool CPVRTimerInfoTag::IsOwnedByClient() const
   return m_timerType && m_timerType->GetClientId() > -1;
 }
 
-bool CPVRTimerInfoTag::AddToClient(void) const
+bool CPVRTimerInfoTag::AddToClient() const
 {
   const std::shared_ptr<CPVRClient> client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
   if (client)
@@ -1056,12 +1056,12 @@ CDateTime CPVRTimerInfoTag::ConvertLocalTimeToUTC(const CDateTime& local)
   return CDateTime(mktime(tms));
 }
 
-CDateTime CPVRTimerInfoTag::StartAsUTC(void) const
+CDateTime CPVRTimerInfoTag::StartAsUTC() const
 {
   return m_StartTime;
 }
 
-CDateTime CPVRTimerInfoTag::StartAsLocalTime(void) const
+CDateTime CPVRTimerInfoTag::StartAsLocalTime() const
 {
   return ConvertUTCToLocalTime(m_StartTime);
 }
@@ -1076,12 +1076,12 @@ void CPVRTimerInfoTag::SetStartFromLocalTime(const CDateTime& start)
   m_StartTime = ConvertLocalTimeToUTC(start);
 }
 
-CDateTime CPVRTimerInfoTag::EndAsUTC(void) const
+CDateTime CPVRTimerInfoTag::EndAsUTC() const
 {
   return m_StopTime;
 }
 
-CDateTime CPVRTimerInfoTag::EndAsLocalTime(void) const
+CDateTime CPVRTimerInfoTag::EndAsLocalTime() const
 {
   return ConvertUTCToLocalTime(m_StopTime);
 }
@@ -1104,12 +1104,12 @@ int CPVRTimerInfoTag::GetDuration() const
   return end - start > 0 ? end - start : 3600;
 }
 
-CDateTime CPVRTimerInfoTag::FirstDayAsUTC(void) const
+CDateTime CPVRTimerInfoTag::FirstDayAsUTC() const
 {
   return m_FirstDay;
 }
 
-CDateTime CPVRTimerInfoTag::FirstDayAsLocalTime(void) const
+CDateTime CPVRTimerInfoTag::FirstDayAsLocalTime() const
 {
   return ConvertUTCToLocalTime(m_FirstDay);
 }
@@ -1262,7 +1262,7 @@ std::shared_ptr<CPVRChannel> CPVRTimerInfoTag::Channel() const
   return m_channel;
 }
 
-std::shared_ptr<CPVRChannel> CPVRTimerInfoTag::UpdateChannel(void)
+std::shared_ptr<CPVRChannel> CPVRTimerInfoTag::UpdateChannel()
 {
   const std::shared_ptr<CPVRChannel> channel(CServiceBroker::GetPVRManager().ChannelGroups()->Get(m_bIsRadio)->GetGroupAll()->GetByUniqueID(m_iClientChannelUid, m_iClientId));
 
@@ -1271,17 +1271,17 @@ std::shared_ptr<CPVRChannel> CPVRTimerInfoTag::UpdateChannel(void)
   return m_channel;
 }
 
-const std::string& CPVRTimerInfoTag::Title(void) const
+const std::string& CPVRTimerInfoTag::Title() const
 {
   return m_strTitle;
 }
 
-const std::string& CPVRTimerInfoTag::Summary(void) const
+const std::string& CPVRTimerInfoTag::Summary() const
 {
   return m_strSummary;
 }
 
-const std::string& CPVRTimerInfoTag::Path(void) const
+const std::string& CPVRTimerInfoTag::Path() const
 {
   return m_strFileNameAndPath;
 }
diff --git a/xbmc/pvr/timers/PVRTimerInfoTag.h b/xbmc/pvr/timers/PVRTimerInfoTag.h
index c11b47faa19e..a8ffc4ac4001 100644
--- a/xbmc/pvr/timers/PVRTimerInfoTag.h
+++ b/xbmc/pvr/timers/PVRTimerInfoTag.h
@@ -42,7 +42,7 @@ namespace PVR
 
     void Serialize(CVariant& value) const override;
 
-    void UpdateSummary(void);
+    void UpdateSummary();
 
     std::string GetStatus(bool bRadio) const;
     std::string GetTypeAsString() const;
@@ -107,8 +107,8 @@ namespace PVR
      */
     std::shared_ptr<CPVREpgInfoTag> GetEpgInfoTag(bool bCreate = true) const;
 
-    std::string ChannelName(void) const;
-    std::string ChannelIcon(void) const;
+    std::string ChannelName() const;
+    std::string ChannelIcon() const;
 
     /*!
      * @brief Check whether this timer has an associated channel.
@@ -142,7 +142,7 @@ namespace PVR
      */
     void ResetChildState();
 
-    bool IsActive(void) const
+    bool IsActive() const
     {
       return m_state == PVR_TIMER_STATE_SCHEDULED
         || m_state == PVR_TIMER_STATE_RECORDING
@@ -154,7 +154,7 @@ namespace PVR
     /*!
      * @return True if this timer won't result in a recording because it is broken for some reason, false otherwise
      */
-    bool IsBroken(void) const
+    bool IsBroken() const
     {
       return m_state == PVR_TIMER_STATE_CONFLICT_NOK
         || m_state == PVR_TIMER_STATE_ERROR;
@@ -163,15 +163,15 @@ namespace PVR
     /*!
      * @return True if this timer won't result in a recording because it is in conflict with another timer or live stream, false otherwise
      */
-    bool HasConflict(void) const { return m_state == PVR_TIMER_STATE_CONFLICT_NOK; }
+    bool HasConflict() const { return m_state == PVR_TIMER_STATE_CONFLICT_NOK; }
 
-    bool IsRecording(void) const { return m_state == PVR_TIMER_STATE_RECORDING; }
+    bool IsRecording() const { return m_state == PVR_TIMER_STATE_RECORDING; }
 
     /*!
       * @brief Checks whether this timer has a timer type.
       * @return True if this timer has a timer type, false otherwise
       */
-    bool HasTimerType(void) const { return m_timerType.get() != NULL; }
+    bool HasTimerType() const { return m_timerType.get() != NULL; }
 
     /*!
       * @brief Gets the type of this timer.
@@ -189,7 +189,7 @@ namespace PVR
       * @brief Checks whether this is a timer rule (vs. one time timer).
       * @return True if this is a timer rule, false otherwise.
       */
-    bool IsTimerRule(void) const { return m_timerType && m_timerType->IsTimerRule(); }
+    bool IsTimerRule() const { return m_timerType && m_timerType->IsTimerRule(); }
 
     /*!
      * @brief Checks whether this is a reminder timer (vs. recording timer).
@@ -201,24 +201,24 @@ namespace PVR
       * @brief Checks whether this is a manual (vs. epg-based) timer.
       * @return True if this is a manual timer, false otherwise.
       */
-    bool IsManual(void) const { return m_timerType && m_timerType->IsManual(); }
+    bool IsManual() const { return m_timerType && m_timerType->IsManual(); }
 
     /*!
      * @brief Checks whether this is an epg-based (vs. manual) timer.
      * @return True if this is an epg-Based timer, false otherwise.
      */
-    bool IsEpgBased(void) const { return !IsManual(); }
+    bool IsEpgBased() const { return !IsManual(); }
 
     static CDateTime ConvertUTCToLocalTime(const CDateTime& utc);
     static CDateTime ConvertLocalTimeToUTC(const CDateTime& local);
 
-    CDateTime StartAsUTC(void) const;
-    CDateTime StartAsLocalTime(void) const;
+    CDateTime StartAsUTC() const;
+    CDateTime StartAsLocalTime() const;
     void SetStartFromUTC(const CDateTime& start);
     void SetStartFromLocalTime(const CDateTime& start);
 
-    CDateTime EndAsUTC(void) const;
-    CDateTime EndAsLocalTime(void) const;
+    CDateTime EndAsUTC() const;
+    CDateTime EndAsLocalTime() const;
     void SetEndFromUTC(const CDateTime& end);
     void SetEndFromLocalTime(const CDateTime& end);
 
@@ -228,12 +228,12 @@ namespace PVR
      */
     int GetDuration() const;
 
-    CDateTime FirstDayAsUTC(void) const;
-    CDateTime FirstDayAsLocalTime(void) const;
+    CDateTime FirstDayAsUTC() const;
+    CDateTime FirstDayAsLocalTime() const;
     void SetFirstDayFromUTC(const CDateTime& firstDay);
     void SetFirstDayFromLocalTime(const CDateTime& firstDay);
 
-    unsigned int MarginStart(void) const { return m_iMarginStart; }
+    unsigned int MarginStart() const { return m_iMarginStart; }
 
     /*!
      * @brief Get the text for the notification.
@@ -246,9 +246,9 @@ namespace PVR
     */
     std::string GetDeletedNotificationText() const;
 
-    const std::string& Title(void) const;
-    const std::string& Summary(void) const;
-    const std::string& Path(void) const;
+    const std::string& Title() const;
+    const std::string& Summary() const;
+    const std::string& Path() const;
 
     /*!
      * @brief The series link for this timer.
@@ -305,7 +305,7 @@ namespace PVR
      * @brief Update the channel associated with this timer.
      * @return the channel for the timer. Can be empty for epg based repeating timers (e.g. "match any channel" rules)
      */
-    std::shared_ptr<CPVRChannel> UpdateChannel(void);
+    std::shared_ptr<CPVRChannel> UpdateChannel();
 
     /*!
      * @brief Return string representation for any possible combination of weekdays.
@@ -359,7 +359,7 @@ namespace PVR
     CPVRTimerInfoTag& operator=(const CPVRTimerInfoTag& orig) = delete;
 
     std::string GetWeekdaysString() const;
-    void UpdateEpgInfoTag(void);
+    void UpdateEpgInfoTag();
 
     static std::shared_ptr<CPVRTimerInfoTag> CreateFromEpg(const std::shared_ptr<CPVREpgInfoTag>& tag, bool bCreateRule, bool bCreateReminder, bool bReadOnly);
     static std::shared_ptr<CPVRTimerInfoTag> CreateFromDate(const std::shared_ptr<CPVRChannel>& channel, const CDateTime& start, int iDuration, bool bCreateReminder, bool bReadOnly);
diff --git a/xbmc/pvr/timers/PVRTimers.cpp b/xbmc/pvr/timers/PVRTimers.cpp
index 855e90915109..625243e82f67 100644
--- a/xbmc/pvr/timers/PVRTimers.cpp
+++ b/xbmc/pvr/timers/PVRTimers.cpp
@@ -78,7 +78,7 @@ void CPVRTimersContainer::InsertEntry(const std::shared_ptr<CPVRTimerInfoTag>& n
   }
 }
 
-CPVRTimers::CPVRTimers(void)
+CPVRTimers::CPVRTimers()
 : CThread("PVRTimers"),
   m_settings({
     CSettings::SETTING_PVRPOWERMANAGEMENT_DAILYWAKEUP,
@@ -90,7 +90,7 @@ CPVRTimers::CPVRTimers(void)
 {
 }
 
-bool CPVRTimers::Load(void)
+bool CPVRTimers::Load()
 {
   // unload previous timers
   Unload();
@@ -116,7 +116,7 @@ void CPVRTimers::Unload()
   m_tags.clear();
 }
 
-bool CPVRTimers::Update(void)
+bool CPVRTimers::Update()
 {
   {
     CSingleLock lock(m_critSection);
@@ -164,7 +164,7 @@ void CPVRTimers::Process()
   }
 }
 
-bool CPVRTimers::IsRecording(void) const
+bool CPVRTimers::IsRecording() const
 {
   CSingleLock lock(m_critSection);
 
@@ -701,17 +701,17 @@ std::shared_ptr<CPVRTimerInfoTag> CPVRTimers::GetNextActiveTimer(bool bIgnoreRem
   return GetNextActiveTimer(TimerKindAny, bIgnoreReminders);
 }
 
-std::shared_ptr<CPVRTimerInfoTag> CPVRTimers::GetNextActiveTVTimer(void) const
+std::shared_ptr<CPVRTimerInfoTag> CPVRTimers::GetNextActiveTVTimer() const
 {
   return GetNextActiveTimer(TimerKindTV, true);
 }
 
-std::shared_ptr<CPVRTimerInfoTag> CPVRTimers::GetNextActiveRadioTimer(void) const
+std::shared_ptr<CPVRTimerInfoTag> CPVRTimers::GetNextActiveRadioTimer() const
 {
   return GetNextActiveTimer(TimerKindRadio, true);
 }
 
-std::vector<std::shared_ptr<CPVRTimerInfoTag>> CPVRTimers::GetActiveTimers(void) const
+std::vector<std::shared_ptr<CPVRTimerInfoTag>> CPVRTimers::GetActiveTimers() const
 {
   std::vector<std::shared_ptr<CPVRTimerInfoTag>> tags;
   CSingleLock lock(m_critSection);
@@ -755,17 +755,17 @@ int CPVRTimers::AmountActiveTimers(const TimerKind& eKind) const
   return iReturn;
 }
 
-int CPVRTimers::AmountActiveTimers(void) const
+int CPVRTimers::AmountActiveTimers() const
 {
   return AmountActiveTimers(TimerKindAny);
 }
 
-int CPVRTimers::AmountActiveTVTimers(void) const
+int CPVRTimers::AmountActiveTVTimers() const
 {
   return AmountActiveTimers(TimerKindTV);
 }
 
-int CPVRTimers::AmountActiveRadioTimers(void) const
+int CPVRTimers::AmountActiveRadioTimers() const
 {
   return AmountActiveTimers(TimerKindRadio);
 }
@@ -829,17 +829,17 @@ int CPVRTimers::AmountActiveRecordings(const TimerKind& eKind) const
   return iReturn;
 }
 
-int CPVRTimers::AmountActiveRecordings(void) const
+int CPVRTimers::AmountActiveRecordings() const
 {
   return AmountActiveRecordings(TimerKindAny);
 }
 
-int CPVRTimers::AmountActiveTVRecordings(void) const
+int CPVRTimers::AmountActiveTVRecordings() const
 {
   return AmountActiveRecordings(TimerKindTV);
 }
 
-int CPVRTimers::AmountActiveRadioRecordings(void) const
+int CPVRTimers::AmountActiveRadioRecordings() const
 {
   return AmountActiveRecordings(TimerKindRadio);
 }
@@ -1237,7 +1237,7 @@ void CPVRTimers::Notify(const PVREvent& event)
   }
 }
 
-CDateTime CPVRTimers::GetNextEventTime(void) const
+CDateTime CPVRTimers::GetNextEventTime() const
 {
   const bool dailywakup = m_settings.GetBoolValue(CSettings::SETTING_PVRPOWERMANAGEMENT_DAILYWAKEUP);
   const CDateTime now = CDateTime::GetUTCDateTime();
@@ -1282,7 +1282,7 @@ CDateTime CPVRTimers::GetNextEventTime(void) const
   return retVal;
 }
 
-void CPVRTimers::UpdateChannels(void)
+void CPVRTimers::UpdateChannels()
 {
   CSingleLock lock(m_critSection);
   for (MapTags::iterator it = m_tags.begin(); it != m_tags.end(); ++it)
diff --git a/xbmc/pvr/timers/PVRTimers.h b/xbmc/pvr/timers/PVRTimers.h
index 8e4a6a16aded..98e6792ea63d 100644
--- a/xbmc/pvr/timers/PVRTimers.h
+++ b/xbmc/pvr/timers/PVRTimers.h
@@ -65,14 +65,14 @@ namespace PVR
   class CPVRTimers : public CPVRTimersContainer, private CThread
   {
   public:
-    CPVRTimers(void);
+    CPVRTimers();
     ~CPVRTimers() override = default;
 
     /**
      * @brief (re)load the timers from the clients.
      * @return True if loaded successfully, false otherwise.
      */
-    bool Load(void);
+    bool Load();
 
     /**
      * @brief unload all timers.
@@ -82,13 +82,13 @@ namespace PVR
     /**
      * @brief refresh the timer list from the clients.
      */
-    bool Update(void);
+    bool Update();
 
     /**
      * @brief load the local timers from database.
      * @return True if loaded successfully, false otherwise.
      */
-    bool LoadFromDatabase(void);
+    bool LoadFromDatabase();
 
     /*!
      * @param bIgnoreReminders include or ignore reminders
@@ -99,17 +99,17 @@ namespace PVR
     /*!
      * @return The tv timer that will be active next (state scheduled), or nullptr if none.
      */
-    std::shared_ptr<CPVRTimerInfoTag> GetNextActiveTVTimer(void) const;
+    std::shared_ptr<CPVRTimerInfoTag> GetNextActiveTVTimer() const;
 
     /*!
      * @return The radio timer that will be active next (state scheduled), or nullptr if none.
      */
-    std::shared_ptr<CPVRTimerInfoTag> GetNextActiveRadioTimer(void) const;
+    std::shared_ptr<CPVRTimerInfoTag> GetNextActiveRadioTimer() const;
 
     /*!
      * @return All timers that are active (states scheduled or recording)
      */
-    std::vector<std::shared_ptr<CPVRTimerInfoTag>> GetActiveTimers(void) const;
+    std::vector<std::shared_ptr<CPVRTimerInfoTag>> GetActiveTimers() const;
 
     /*!
      * @return Next due reminder, if any. Removes it from the queue of due reminders.
@@ -125,17 +125,17 @@ namespace PVR
     /*!
      * @return The amount of tv and radio timers that are active (states scheduled or recording)
      */
-    int AmountActiveTimers(void) const;
+    int AmountActiveTimers() const;
 
     /*!
      * @return The amount of tv timers that are active (states scheduled or recording)
      */
-    int AmountActiveTVTimers(void) const;
+    int AmountActiveTVTimers() const;
 
     /*!
      * @return The amount of radio timers that are active (states scheduled or recording)
      */
-    int AmountActiveRadioTimers(void) const;
+    int AmountActiveRadioTimers() const;
 
     /*!
      * @return All tv and radio timers that are recording
@@ -155,7 +155,7 @@ namespace PVR
     /*!
      * @return True when recording, false otherwise.
      */
-    bool IsRecording(void) const;
+    bool IsRecording() const;
 
     /*!
      * @brief Check if a recording is running on the given channel.
@@ -174,17 +174,17 @@ namespace PVR
     /*!
      * @return The amount of tv and radio timers that are currently recording
      */
-    int AmountActiveRecordings(void) const;
+    int AmountActiveRecordings() const;
 
     /*!
      * @return The amount of tv timers that are currently recording
      */
-    int AmountActiveTVRecordings(void) const;
+    int AmountActiveTVRecordings() const;
 
     /*!
      * @return The amount of radio timers that are currently recording
      */
-    int AmountActiveRadioRecordings(void) const;
+    int AmountActiveRadioRecordings() const;
 
     /*!
      * @brief Delete all timers on a channel.
@@ -198,7 +198,7 @@ namespace PVR
     /*!
      * @return Next event time (timer or daily wake up)
      */
-    CDateTime GetNextEventTime(void) const;
+    CDateTime GetNextEventTime() const;
 
     /*!
      * @brief Add a timer to the client. Doesn't add the timer to the container. The backend will do this.
@@ -248,7 +248,7 @@ namespace PVR
     /*!
      * @brief Update the channel pointers.
      */
-    void UpdateChannels(void);
+    void UpdateChannels();
 
     /*!
      * @brief CEventStream callback for PVR events.
diff --git a/xbmc/pvr/windows/GUIViewStatePVR.cpp b/xbmc/pvr/windows/GUIViewStatePVR.cpp
index 10a5bf48d5fd..6fff308b570e 100644
--- a/xbmc/pvr/windows/GUIViewStatePVR.cpp
+++ b/xbmc/pvr/windows/GUIViewStatePVR.cpp
@@ -31,7 +31,7 @@ CGUIViewStateWindowPVRChannels::CGUIViewStateWindowPVRChannels(const int windowI
   LoadViewState("pvr://channels/", m_windowId);
 }
 
-void CGUIViewStateWindowPVRChannels::SaveViewState(void)
+void CGUIViewStateWindowPVRChannels::SaveViewState()
 {
   SaveViewToDb("pvr://channels/", m_windowId, CViewStateSettings::GetInstance().Get("pvrchannels"));
 }
@@ -52,12 +52,12 @@ CGUIViewStateWindowPVRRecordings::CGUIViewStateWindowPVRRecordings(const int win
   LoadViewState(items.GetPath(), m_windowId);
 }
 
-void CGUIViewStateWindowPVRRecordings::SaveViewState(void)
+void CGUIViewStateWindowPVRRecordings::SaveViewState()
 {
   SaveViewToDb(m_items.GetPath(), m_windowId, CViewStateSettings::GetInstance().Get("pvrrecordings"));
 }
 
-bool CGUIViewStateWindowPVRRecordings::HideParentDirItems(void)
+bool CGUIViewStateWindowPVRRecordings::HideParentDirItems()
 {
   return (CGUIViewState::HideParentDirItems() || CPVRRecordingsPath(m_items.GetPath()).IsRecordingsRoot());
 }
@@ -75,7 +75,7 @@ CGUIViewStateWindowPVRGuide::CGUIViewStateWindowPVRGuide(const int windowId, con
   LoadViewState("pvr://guide/", m_windowId);
 }
 
-void CGUIViewStateWindowPVRGuide::SaveViewState(void)
+void CGUIViewStateWindowPVRGuide::SaveViewState()
 {
   SaveViewToDb("pvr://guide/", m_windowId, CViewStateSettings::GetInstance().Get("pvrguide"));
 }
@@ -93,12 +93,12 @@ CGUIViewStateWindowPVRTimers::CGUIViewStateWindowPVRTimers(const int windowId, c
   LoadViewState("pvr://timers/", m_windowId);
 }
 
-void CGUIViewStateWindowPVRTimers::SaveViewState(void)
+void CGUIViewStateWindowPVRTimers::SaveViewState()
 {
   SaveViewToDb("pvr://timers/", m_windowId, CViewStateSettings::GetInstance().Get("pvrtimers"));
 }
 
-bool CGUIViewStateWindowPVRTimers::HideParentDirItems(void)
+bool CGUIViewStateWindowPVRTimers::HideParentDirItems()
 {
   return (CGUIViewState::HideParentDirItems() || CPVRTimersPath(m_items.GetPath()).IsTimersRoot());
 }
@@ -114,7 +114,7 @@ CGUIViewStateWindowPVRSearch::CGUIViewStateWindowPVRSearch(const int windowId, c
   LoadViewState("pvr://search/", m_windowId);
 }
 
-void CGUIViewStateWindowPVRSearch::SaveViewState(void)
+void CGUIViewStateWindowPVRSearch::SaveViewState()
 {
   SaveViewToDb("pvr://search/", m_windowId, CViewStateSettings::GetInstance().Get("pvrsearch"));
 }
diff --git a/xbmc/pvr/windows/GUIViewStatePVR.h b/xbmc/pvr/windows/GUIViewStatePVR.h
index 6b92ec0b2a49..fda999dbdf81 100644
--- a/xbmc/pvr/windows/GUIViewStatePVR.h
+++ b/xbmc/pvr/windows/GUIViewStatePVR.h
@@ -20,7 +20,7 @@ namespace PVR
     CGUIViewStatePVR(const int windowId, const CFileItemList& items) : CGUIViewState(items) { m_windowId = windowId; }
 
   protected:
-    bool HideParentDirItems(void) override { return true; }
+    bool HideParentDirItems() override { return true; }
 
     int m_windowId;
   };
@@ -41,7 +41,7 @@ namespace PVR
 
   protected:
     void SaveViewState() override;
-    bool HideParentDirItems(void) override;
+    bool HideParentDirItems() override;
   };
 
   class CGUIViewStateWindowPVRGuide : public CGUIViewStatePVR
@@ -60,7 +60,7 @@ namespace PVR
 
   protected:
     void SaveViewState() override;
-    bool HideParentDirItems(void) override;
+    bool HideParentDirItems() override;
   };
 
   class CGUIViewStateWindowPVRSearch : public CGUIViewStatePVR
diff --git a/xbmc/pvr/windows/GUIWindowPVRBase.cpp b/xbmc/pvr/windows/GUIWindowPVRBase.cpp
index 5800f9d2c3d2..2d6d819eafd6 100644
--- a/xbmc/pvr/windows/GUIWindowPVRBase.cpp
+++ b/xbmc/pvr/windows/GUIWindowPVRBase.cpp
@@ -134,7 +134,7 @@ CGUIWindowPVRBase::CGUIWindowPVRBase(bool bRadio, int id, const std::string& xml
   RegisterObservers();
 }
 
-CGUIWindowPVRBase::~CGUIWindowPVRBase(void)
+CGUIWindowPVRBase::~CGUIWindowPVRBase()
 {
   UnregisterObservers();
 }
@@ -144,7 +144,7 @@ void CGUIWindowPVRBase::UpdateSelectedItemPath()
   CServiceBroker::GetPVRManager().GUIActions()->SetSelectedItemPath(m_bRadio, m_viewControl.GetSelectedItemPath());
 }
 
-void CGUIWindowPVRBase::RegisterObservers(void)
+void CGUIWindowPVRBase::RegisterObservers()
 {
   CServiceBroker::GetPVRManager().Events().Subscribe(this, &CGUIWindowPVRBase::Notify);
 
@@ -153,7 +153,7 @@ void CGUIWindowPVRBase::RegisterObservers(void)
     m_channelGroup->Events().Subscribe(this, &CGUIWindowPVRBase::Notify);
 };
 
-void CGUIWindowPVRBase::UnregisterObservers(void)
+void CGUIWindowPVRBase::UnregisterObservers()
 {
   {
     CSingleLock lock(m_critSection);
@@ -260,7 +260,7 @@ void CGUIWindowPVRBase::ClearData()
   m_channelGroupsSelector.reset(new CGUIPVRChannelGroupsSelector);
 }
 
-void CGUIWindowPVRBase::OnInitWindow(void)
+void CGUIWindowPVRBase::OnInitWindow()
 {
   SetProperty("IsRadio", m_bRadio ? "true" : "");
 
@@ -392,7 +392,7 @@ bool CGUIWindowPVRBase::CanBeActivated() const
   return true;
 }
 
-bool CGUIWindowPVRBase::OpenChannelGroupSelectionDialog(void)
+bool CGUIWindowPVRBase::OpenChannelGroupSelectionDialog()
 {
   CGUIDialogSelect* dialog = CServiceBroker::GetGUI()->GetWindowManager().GetWindow<CGUIDialogSelect>(WINDOW_DIALOG_SELECT);
   if (!dialog)
@@ -454,7 +454,7 @@ bool CGUIWindowPVRBase::InitChannelGroup()
   return false;
 }
 
-std::shared_ptr<CPVRChannelGroup> CGUIWindowPVRBase::GetChannelGroup(void)
+std::shared_ptr<CPVRChannelGroup> CGUIWindowPVRBase::GetChannelGroup()
 {
   CSingleLock lock(m_critSection);
   return m_channelGroup;
@@ -527,7 +527,7 @@ bool CGUIWindowPVRBase::Update(const std::string& strDirectory, bool updateFilte
   return bReturn;
 }
 
-void CGUIWindowPVRBase::UpdateButtons(void)
+void CGUIWindowPVRBase::UpdateButtons()
 {
   CGUIMediaWindow::UpdateButtons();
 
@@ -557,7 +557,7 @@ void CGUIWindowPVRBase::ShowProgressDialog(const std::string& strText, int iProg
   m_progressHandle->SetText(strText);
 }
 
-void CGUIWindowPVRBase::HideProgressDialog(void)
+void CGUIWindowPVRBase::HideProgressDialog()
 {
   if (m_progressHandle)
   {
diff --git a/xbmc/pvr/windows/GUIWindowPVRBase.h b/xbmc/pvr/windows/GUIWindowPVRBase.h
index 122658aac7f8..ad7248592376 100644
--- a/xbmc/pvr/windows/GUIWindowPVRBase.h
+++ b/xbmc/pvr/windows/GUIWindowPVRBase.h
@@ -54,13 +54,13 @@ namespace PVR
   class CGUIWindowPVRBase : public CGUIMediaWindow
   {
   public:
-    ~CGUIWindowPVRBase(void) override;
+    ~CGUIWindowPVRBase() override;
 
-    void OnInitWindow(void) override;
+    void OnInitWindow() override;
     void OnDeinitWindow(int nextWindowID) override;
     bool OnMessage(CGUIMessage& message) override;
     bool Update(const std::string& strDirectory, bool updateFilterPath = true) override;
-    void UpdateButtons(void) override;
+    void UpdateButtons() override;
     bool OnAction(const CAction& action) override;
     bool OnBack(int actionID) override;
     void SetInvalid() override;
@@ -77,7 +77,7 @@ namespace PVR
      * @brief Refresh window content.
      * @return true, if refresh succeeded, false otherwise.
      */
-    bool DoRefresh(void) { return Refresh(true); }
+    bool DoRefresh() { return Refresh(true); }
 
     bool ActivatePreviousChannelGroup();
     bool ActivateNextChannelGroup();
@@ -86,7 +86,7 @@ namespace PVR
   protected:
     CGUIWindowPVRBase(bool bRadio, int id, const std::string& xmlFile);
 
-    virtual std::string GetDirectoryPath(void) = 0;
+    virtual std::string GetDirectoryPath() = 0;
 
     virtual void ClearData();
 
@@ -94,13 +94,13 @@ namespace PVR
      * @brief Init this window's channel group with the currently active (the "playing") channel group.
      * @return true if group could be set, false otherwise.
      */
-    bool InitChannelGroup(void);
+    bool InitChannelGroup();
 
     /*!
      * @brief Get the channel group for this window.
      * @return the group or null, if no group set.
      */
-   std::shared_ptr<CPVRChannelGroup> GetChannelGroup(void);
+   std::shared_ptr<CPVRChannelGroup> GetChannelGroup();
 
     /*!
      * @brief Set a new channel group, start listening to this group, optionally update window content.
@@ -111,8 +111,8 @@ namespace PVR
 
     virtual void UpdateSelectedItemPath();
 
-    void RegisterObservers(void);
-    void UnregisterObservers(void);
+    void RegisterObservers();
+    void UnregisterObservers();
 
     CCriticalSection m_critSection;
     std::string m_channelGroupPath;
@@ -130,7 +130,7 @@ namespace PVR
     /*!
      * @brief Hide the progress dialog if it's visible.
      */
-    void HideProgressDialog(void);
+    void HideProgressDialog();
 
     std::unique_ptr<CGUIPVRChannelGroupsSelector> m_channelGroupsSelector;
     std::shared_ptr<CPVRChannelGroup> m_channelGroup;
diff --git a/xbmc/pvr/windows/GUIWindowPVRChannels.cpp b/xbmc/pvr/windows/GUIWindowPVRChannels.cpp
index bb188117b682..873a84b97dfc 100644
--- a/xbmc/pvr/windows/GUIWindowPVRChannels.cpp
+++ b/xbmc/pvr/windows/GUIWindowPVRChannels.cpp
@@ -88,7 +88,7 @@ bool CGUIWindowPVRChannelsBase::Update(const std::string& strDirectory, bool upd
   return bReturn;
 }
 
-void CGUIWindowPVRChannelsBase::UpdateButtons(void)
+void CGUIWindowPVRChannelsBase::UpdateButtons()
 {
   CGUIRadioButtonControl* btnShowHidden = static_cast<CGUIRadioButtonControl*>(GetControl(CONTROL_BTNSHOWHIDDEN));
   if (btnShowHidden)
@@ -308,7 +308,7 @@ void CGUIWindowPVRChannelsBase::ShowChannelManager()
     dialog->Open();
 }
 
-void CGUIWindowPVRChannelsBase::ShowGroupManager(void)
+void CGUIWindowPVRChannelsBase::ShowGroupManager()
 {
   /* Load group manager dialog */
   CGUIDialogPVRGroupManager* pDlgInfo = CServiceBroker::GetGUI()->GetWindowManager().GetWindow<CGUIDialogPVRGroupManager>(WINDOW_DIALOG_PVR_GROUP_MANAGER);
diff --git a/xbmc/pvr/windows/GUIWindowPVRChannels.h b/xbmc/pvr/windows/GUIWindowPVRChannels.h
index 64b0be189f53..8e3ed804338e 100644
--- a/xbmc/pvr/windows/GUIWindowPVRChannels.h
+++ b/xbmc/pvr/windows/GUIWindowPVRChannels.h
@@ -26,7 +26,7 @@ namespace PVR
     void GetContextButtons(int itemNumber, CContextButtons& buttons) override;
     bool OnContextButton(int itemNumber, CONTEXT_BUTTON button) override;
     bool Update(const std::string& strDirectory, bool updateFilterPath = true) override;
-    void UpdateButtons(void) override;
+    void UpdateButtons() override;
     bool OnAction(const CAction& action) override;
 
     // CPVRChannelNumberInputHandler implementation
diff --git a/xbmc/pvr/windows/GUIWindowPVRGuide.cpp b/xbmc/pvr/windows/GUIWindowPVRGuide.cpp
index f0b51ea413ba..0bfdfcce74b9 100644
--- a/xbmc/pvr/windows/GUIWindowPVRGuide.cpp
+++ b/xbmc/pvr/windows/GUIWindowPVRGuide.cpp
@@ -197,7 +197,7 @@ void CGUIWindowPVRGuideBase::UpdateSelectedItemPath()
   }
 }
 
-void CGUIWindowPVRGuideBase::UpdateButtons(void)
+void CGUIWindowPVRGuideBase::UpdateButtons()
 {
   CGUIWindowPVRBase::UpdateButtons();
 
diff --git a/xbmc/pvr/windows/GUIWindowPVRGuide.h b/xbmc/pvr/windows/GUIWindowPVRGuide.h
index 8046d1c8e39d..532df6d9db3e 100644
--- a/xbmc/pvr/windows/GUIWindowPVRGuide.h
+++ b/xbmc/pvr/windows/GUIWindowPVRGuide.h
@@ -40,7 +40,7 @@ namespace PVR
     bool OnAction(const CAction& action) override;
     void GetContextButtons(int itemNumber, CContextButtons& buttons) override;
     bool OnContextButton(int itemNumber, CONTEXT_BUTTON button) override;
-    void UpdateButtons(void) override;
+    void UpdateButtons() override;
     void SetInvalid() override;
     bool Update(const std::string& strDirectory, bool updateFilterPath = true) override;
 
@@ -65,7 +65,7 @@ namespace PVR
 
   protected:
     void UpdateSelectedItemPath() override;
-    std::string GetDirectoryPath(void) override { return ""; }
+    std::string GetDirectoryPath() override { return ""; }
     bool GetDirectory(const std::string& strDirectory, CFileItemList& items) override;
     void FormatAndSort(CFileItemList& items) override;
     CFileItemPtr GetCurrentListItem(int offset = 0) override;
diff --git a/xbmc/pvr/windows/GUIWindowPVRRecordings.h b/xbmc/pvr/windows/GUIWindowPVRRecordings.h
index b432123acf24..30057dfd4a32 100644
--- a/xbmc/pvr/windows/GUIWindowPVRRecordings.h
+++ b/xbmc/pvr/windows/GUIWindowPVRRecordings.h
@@ -35,7 +35,7 @@ namespace PVR
     void UpdateButtons() override;
 
   protected:
-    std::string GetDirectoryPath(void) override;
+    std::string GetDirectoryPath() override;
     void OnPrepareFileItems(CFileItemList& items) override;
     bool GetFilteredItems(const std::string& filter, CFileItemList& items) override;
 
diff --git a/xbmc/pvr/windows/GUIWindowPVRSearch.h b/xbmc/pvr/windows/GUIWindowPVRSearch.h
index 532f7b5da90c..5ce6d75ca2f8 100644
--- a/xbmc/pvr/windows/GUIWindowPVRSearch.h
+++ b/xbmc/pvr/windows/GUIWindowPVRSearch.h
@@ -38,7 +38,7 @@ namespace PVR
 
   protected:
     void OnPrepareFileItems(CFileItemList& items) override;
-    std::string GetDirectoryPath(void) override { return ""; }
+    std::string GetDirectoryPath() override { return ""; }
 
   private:
     bool OnContextButtonClear(CFileItem* item, CONTEXT_BUTTON button);
diff --git a/xbmc/pvr/windows/GUIWindowPVRTimersBase.cpp b/xbmc/pvr/windows/GUIWindowPVRTimersBase.cpp
index c129316cbb33..15840e394e5e 100644
--- a/xbmc/pvr/windows/GUIWindowPVRTimersBase.cpp
+++ b/xbmc/pvr/windows/GUIWindowPVRTimersBase.cpp
@@ -72,7 +72,7 @@ bool CGUIWindowPVRTimersBase::Update(const std::string& strDirectory, bool updat
   return bReturn;
 }
 
-void CGUIWindowPVRTimersBase::UpdateButtons(void)
+void CGUIWindowPVRTimersBase::UpdateButtons()
 {
   SET_CONTROL_SELECTED(GetID(), CONTROL_BTNHIDEDISABLEDTIMERS, CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_PVRTIMERS_HIDEDISABLEDTIMERS));
 
diff --git a/xbmc/pvr/windows/GUIWindowPVRTimersBase.h b/xbmc/pvr/windows/GUIWindowPVRTimersBase.h
index acd3c1e3e605..75d18b6dec38 100644
--- a/xbmc/pvr/windows/GUIWindowPVRTimersBase.h
+++ b/xbmc/pvr/windows/GUIWindowPVRTimersBase.h
@@ -20,12 +20,12 @@ namespace PVR
   {
   public:
     CGUIWindowPVRTimersBase(bool bRadio, int id, const std::string& xmlFile);
-    ~CGUIWindowPVRTimersBase(void) override;
+    ~CGUIWindowPVRTimersBase() override;
 
     bool OnMessage(CGUIMessage& message) override;
     bool OnAction(const CAction& action) override;
     bool Update(const std::string& strDirectory, bool updateFilterPath = true) override;
-    void UpdateButtons(void) override;
+    void UpdateButtons() override;
 
   private:
     bool ActionShowTimer(const std::shared_ptr<CFileItem>& item);

From 6e7f68497a8b9d2c06df17fc6f777d4f1945bfd4 Mon Sep 17 00:00:00 2001
From: phunkyfish <phunkyfish@gmail.com>
Date: Fri, 18 Oct 2019 17:36:38 +0100
Subject: [PATCH 2/2] [pvr] Fix editing channels via channel manager

---
 xbmc/pvr/channels/PVRChannelGroup.cpp         | 38 +++++++++++++++++--
 xbmc/pvr/channels/PVRChannelGroup.h           | 16 +++++++-
 xbmc/pvr/channels/PVRChannelGroupInternal.cpp |  5 ++-
 xbmc/pvr/channels/PVRChannelGroups.cpp        | 13 +++++++
 xbmc/pvr/channels/PVRChannelGroups.h          |  6 +++
 .../dialogs/GUIDialogPVRChannelManager.cpp    |  3 ++
 6 files changed, 75 insertions(+), 6 deletions(-)

diff --git a/xbmc/pvr/channels/PVRChannelGroup.cpp b/xbmc/pvr/channels/PVRChannelGroup.cpp
index ac082b820bd5..20a45f1652cc 100644
--- a/xbmc/pvr/channels/PVRChannelGroup.cpp
+++ b/xbmc/pvr/channels/PVRChannelGroup.cpp
@@ -91,6 +91,7 @@ bool CPVRChannelGroup::Load(std::vector<std::shared_ptr<CPVRChannel>>& channelsT
   Unload();
 
   const std::shared_ptr<CSettings> settings = CServiceBroker::GetSettingsComponent()->GetSettings();
+  m_bSyncChannelGroups = settings->GetBool(CSettings::SETTING_PVRMANAGER_SYNCCHANNELGROUPS);
   m_bUsingBackendChannelOrder = settings->GetBool(CSettings::SETTING_PVRMANAGER_BACKENDCHANNELORDER);
   m_bUsingBackendChannelNumbers = settings->GetBool(CSettings::SETTING_PVRMANAGER_USEBACKENDCHANNELNUMBERS) &&
                                   CServiceBroker::GetPVRManager().Clients()->EnabledClientAmount() == 1;
@@ -558,6 +559,29 @@ void CPVRChannelGroup::UpdateChannelNumbers()
   }
 }
 
+bool CPVRChannelGroup::UpdateChannelNumbersFromAllChannelsGroup()
+{
+  CSingleLock lock(m_critSection);
+
+  bool bChanged = false;
+
+  if (!IsInternalGroup())
+  {
+    // If we don't sync channel groups make sure the channel numbers are set from
+    // the all channels group using the non default renumber call before sorting
+    if (Renumber(IGNORE_NUMBERING_FROM_ONE) || SortAndRenumber())
+    {
+      Persist();
+      bChanged = true;
+    }
+  }
+
+  m_events.Publish(IsInternalGroup() || bChanged ? PVREvent::ChannelGroupInvalidated
+                                                 : PVREvent::ChannelGroup);
+
+  return bChanged;
+}
+
 std::vector<std::shared_ptr<CPVRChannel>> CPVRChannelGroup::RemoveDeletedChannels(const CPVRChannelGroup& channels)
 {
   std::vector<std::shared_ptr<CPVRChannel>> removedChannels;
@@ -740,7 +764,7 @@ bool CPVRChannelGroup::Persist()
   return bReturn;
 }
 
-bool CPVRChannelGroup::Renumber()
+bool CPVRChannelGroup::Renumber(RenumberMode mode /* = NORMAL */)
 {
   if (PreventSortAndRenumber())
     return true;
@@ -772,7 +796,7 @@ bool CPVRChannelGroup::Renumber()
       }
       else
       {
-        if (bStartGroupChannelNumbersFromOne)
+        if (bStartGroupChannelNumbersFromOne && mode != IGNORE_NUMBERING_FROM_ONE)
           currentChannelNumber = CPVRChannelNumber(++iChannelNumber, 0);
         else
           currentChannelNumber = m_allChannelsGroup->GetChannelNumber(sortedMember->channel);
@@ -845,10 +869,13 @@ void CPVRChannelGroup::OnSettingChanged(std::shared_ptr<const CSetting> setting)
   }
 
   const std::string& settingId = setting->GetId();
-  if (settingId == CSettings::SETTING_PVRMANAGER_BACKENDCHANNELORDER || settingId == CSettings::SETTING_PVRMANAGER_USEBACKENDCHANNELNUMBERS ||
+  if (settingId == CSettings::SETTING_PVRMANAGER_SYNCCHANNELGROUPS ||
+      settingId == CSettings::SETTING_PVRMANAGER_BACKENDCHANNELORDER ||
+      settingId == CSettings::SETTING_PVRMANAGER_USEBACKENDCHANNELNUMBERS ||
       settingId == CSettings::SETTING_PVRMANAGER_STARTGROUPCHANNELNUMBERSFROMONE)
   {
     const std::shared_ptr<CSettings> settings = CServiceBroker::GetSettingsComponent()->GetSettings();
+    m_bSyncChannelGroups = settings->GetBool(CSettings::SETTING_PVRMANAGER_SYNCCHANNELGROUPS);
     bool bUsingBackendChannelOrder = settings->GetBool(CSettings::SETTING_PVRMANAGER_BACKENDCHANNELORDER);
     bool bUsingBackendChannelNumbers = settings->GetBool(CSettings::SETTING_PVRMANAGER_USEBACKENDCHANNELNUMBERS) &&
                                        CServiceBroker::GetPVRManager().Clients()->EnabledClientAmount() == 1;
@@ -873,6 +900,11 @@ void CPVRChannelGroup::OnSettingChanged(std::shared_ptr<const CSetting> setting)
       if (bChannelOrderChanged)
         UpdateClientPriorities();
 
+      // If we don't sync channel groups make sure the channel numbers are set from
+      // the all channels group using the non default renumber call before sorting
+      if (!m_bSyncChannelGroups)
+        Renumber(IGNORE_NUMBERING_FROM_ONE);
+
       bool bRenumbered = SortAndRenumber();
       Persist();
 
diff --git a/xbmc/pvr/channels/PVRChannelGroup.h b/xbmc/pvr/channels/PVRChannelGroup.h
index 9510b3311b8e..cb04ffaa660e 100644
--- a/xbmc/pvr/channels/PVRChannelGroup.h
+++ b/xbmc/pvr/channels/PVRChannelGroup.h
@@ -57,6 +57,12 @@ namespace PVR
     EPG_LAST_DATE = 1
   };
 
+  enum RenumberMode
+  {
+    NORMAL = 0,
+    IGNORE_NUMBERING_FROM_ONE = 1
+  };
+
   class CPVRChannelGroup : public ISettingCallback
   {
     friend class CPVRChannelGroupInternal;
@@ -260,9 +266,10 @@ namespace PVR
 
     /*!
      * @brief Remove invalid channels and updates the channel numbers.
+     * @param mode the numbering mode to use
      * @return True if something changed, false otherwise.
      */
-    bool Renumber();
+    bool Renumber(RenumberMode mode = NORMAL);
 
     //@}
 
@@ -472,6 +479,12 @@ namespace PVR
      */
     void SetSelectedGroup(bool isSelectedGroup) { m_bIsSelectedGroup = isSelectedGroup; }
 
+    /*!
+     * @brief Update the channel numbers according to the all channels group and publish event.
+     * @return True, if a channel number was changed, false otherwise.
+     */
+    bool UpdateChannelNumbersFromAllChannelsGroup();
+
   protected:
     /*!
      * @brief Init class
@@ -556,6 +569,7 @@ namespace PVR
     CEventSource<PVREvent> m_events;
     bool m_bIsSelectedGroup = false; /*!< Whether or not this group is currently selected */
     bool m_bStartGroupChannelNumbersFromOne = false; /*!< true if we start group channel numbers from one when not using backend channel numbers, false otherwise */
+    bool m_bSyncChannelGroups = false; /*!< true if channel groups should be synced with the backend, false otherwise */
 
   private:
     CDateTime GetEPGDate(EpgDateType epgDateType) const;
diff --git a/xbmc/pvr/channels/PVRChannelGroupInternal.cpp b/xbmc/pvr/channels/PVRChannelGroupInternal.cpp
index 01ef268caaba..640b63304c07 100644
--- a/xbmc/pvr/channels/PVRChannelGroupInternal.cpp
+++ b/xbmc/pvr/channels/PVRChannelGroupInternal.cpp
@@ -240,11 +240,12 @@ bool CPVRChannelGroupInternal::AddAndUpdateChannels(const CPVRChannelGroup& chan
         CLog::LogFC(LOGDEBUG, LOGPVR, "Updated {} channel '{}' from PVR client", IsRadio() ? "radio" : "TV", newMember->channel->ChannelName());
       }
 
-      if (existingMember->channelNumber != newMember->channelNumber ||
+      if ((existingMember->channelNumber != newMember->channelNumber && m_bSyncChannelGroups) ||
           existingMember->clientChannelNumber != newMember->clientChannelNumber ||
           existingMember->iOrder != newMember->iOrder)
       {
-        existingMember->channelNumber = newMember->channelNumber;
+        if (m_bSyncChannelGroups)
+          existingMember->channelNumber = newMember->channelNumber;
         existingMember->clientChannelNumber = newMember->clientChannelNumber;
         existingMember->iOrder = newMember->iOrder;
         bReturn = true;
diff --git a/xbmc/pvr/channels/PVRChannelGroups.cpp b/xbmc/pvr/channels/PVRChannelGroups.cpp
index 49e448e5cd79..ab7e84129e28 100644
--- a/xbmc/pvr/channels/PVRChannelGroups.cpp
+++ b/xbmc/pvr/channels/PVRChannelGroups.cpp
@@ -249,6 +249,19 @@ bool CPVRChannelGroups::Update(bool bChannelsOnly /* = false */)
   return PersistAll() && bReturn;
 }
 
+bool CPVRChannelGroups::PropagateChannelNumbersAndPersist()
+{
+  CSingleLock lock(m_critSection);
+
+  bool bChanged = false;
+  for (auto& group : m_groups)
+    bChanged = group->UpdateChannelNumbersFromAllChannelsGroup();
+
+  m_selectedGroup->UpdateChannelNumbers();
+
+  return bChanged;
+}
+
 bool CPVRChannelGroups::LoadUserDefinedChannelGroups()
 {
   bool bSyncWithBackends = CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_PVRMANAGER_SYNCCHANNELGROUPS);
diff --git a/xbmc/pvr/channels/PVRChannelGroups.h b/xbmc/pvr/channels/PVRChannelGroups.h
index 7d80468465f7..8134d08cad28 100644
--- a/xbmc/pvr/channels/PVRChannelGroups.h
+++ b/xbmc/pvr/channels/PVRChannelGroups.h
@@ -194,6 +194,12 @@ namespace PVR
      */
     bool Update(bool bChannelsOnly = false);
 
+    /*!
+     * @brief Update the channel numbers across the channel groups from the all channels group
+     * @return True if any channel number was changed, false otherwise.
+     */
+    bool PropagateChannelNumbersAndPersist();
+
   private:
     bool LoadUserDefinedChannelGroups();
     bool GetGroupsFromClients();
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.cpp b/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.cpp
index 51b69c5832f4..34b08052519c 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.cpp
@@ -29,6 +29,7 @@
 #include "pvr/addons/PVRClients.h"
 #include "pvr/channels/PVRChannel.h"
 #include "pvr/channels/PVRChannelGroup.h"
+#include "pvr/channels/PVRChannelGroups.h"
 #include "pvr/channels/PVRChannelGroupsContainer.h"
 #include "pvr/dialogs/GUIDialogPVRGroupManager.h"
 #include "pvr/guilib/PVRGUIActions.h"
@@ -805,6 +806,8 @@ void CGUIDialogPVRChannelManager::SaveList()
   group->Persist();
   m_bContainsChanges = false;
   SetItemsUnchanged();
+  auto channelGroups = CServiceBroker::GetPVRManager().ChannelGroups()->Get(m_bIsRadio);
+  channelGroups->PropagateChannelNumbersAndPersist();
   pDlgProgress->Close();
 }
 
