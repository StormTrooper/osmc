From 8862458a874094b23c75bc5cd106d46aeac3d77b Mon Sep 17 00:00:00 2001
From: Gerald Barker <gerald.barker@gmail.com>
Date: Mon, 25 Feb 2019 21:55:18 +0000
Subject: [PATCH] [BTPlayer] New Python Events on Next Item and Previous Item

---
 xbmc/Application.cpp                | 27 ++++++++++++++++++++++++++
 xbmc/Application.h                  |  2 ++
 xbmc/cores/IPlayerCallback.h        |  2 ++
 xbmc/interfaces/legacy/Player.cpp   | 23 ++++++++++++++++++++++
 xbmc/interfaces/legacy/Player.h     | 30 +++++++++++++++++++++++++++++
 xbmc/interfaces/python/XBPython.cpp | 22 +++++++++++++++++++++
 xbmc/interfaces/python/XBPython.h   |  3 ++-
 7 files changed, 108 insertions(+), 1 deletion(-)

diff --git a/xbmc/Application.cpp b/xbmc/Application.cpp
index 2dc0989ded0c..64e02677ddb6 100644
--- a/xbmc/Application.cpp
+++ b/xbmc/Application.cpp
@@ -1738,6 +1738,17 @@ bool CApplication::OnAction(const CAction &action)
     return true;
   }
 
+  // fire python events
+   if (action.GetID() == ACTION_PREV_ITEM)
+     {
+       OnPreviousItem();
+     }
+
+   if (action.GetID() == ACTION_NEXT_ITEM)
+     {
+       OnNextItem();
+     }
+
   // Now check with the playlist player if action can be handled.
   // In case of ACTION_PREV_ITEM, we only allow the playlist player to take it if we're less than ACTION_PREV_ITEM_THRESHOLD seconds into playback.
   if (!(action.GetID() == ACTION_PREV_ITEM && m_appPlayer.CanSeek() && GetTime() > ACTION_PREV_ITEM_THRESHOLD) )
@@ -3290,6 +3301,22 @@ void CApplication::StoreVideoSettings(const CFileItem &fileItem, CVideoSettings
   }
 }
 
+void CApplication::OnPreviousItem()
+{
+
+#ifdef HAS_PYTHON
+  g_pythonParser.OnPreviousItem();
+#endif
+}
+
+void CApplication::OnNextItem()
+{
+#ifdef HAS_PYTHON
+  g_pythonParser.OnNextItem();
+#endif
+}
+
+
 bool CApplication::IsPlayingFullScreenVideo() const
 {
   return m_appPlayer.IsPlayingVideo() && CServiceBroker::GetWinSystem()->GetGfxContext().IsFullScreenVideo();
diff --git a/xbmc/Application.h b/xbmc/Application.h
index 30cf6e7d3246..09eb115073e6 100644
--- a/xbmc/Application.h
+++ b/xbmc/Application.h
@@ -179,6 +179,8 @@ friend class CAppInboundProtocol;
   void OnPlayBackSeek(int64_t iTime, int64_t seekOffset) override;
   void OnPlayBackSeekChapter(int iChapter) override;
   void OnPlayBackSpeedChanged(int iSpeed) override;
+  void OnPreviousItem() override;
+  void OnNextItem() override;
   void OnAVChange() override;
   void OnAVStarted(const CFileItem &file) override;
   void RequestVideoSettings(const CFileItem &fileItem) override;
diff --git a/xbmc/cores/IPlayerCallback.h b/xbmc/cores/IPlayerCallback.h
index e3a0055fb63b..2e3542504980 100644
--- a/xbmc/cores/IPlayerCallback.h
+++ b/xbmc/cores/IPlayerCallback.h
@@ -33,4 +33,6 @@ class IPlayerCallback
   virtual void OnAVStarted(const CFileItem &file) {};
   virtual void RequestVideoSettings(const CFileItem &fileItem) {};
   virtual void StoreVideoSettings(const CFileItem &fileItem, CVideoSettings vs) {};
+  virtual void OnPreviousItem() {};
+  virtual void OnNextItem() {};
 };
diff --git a/xbmc/interfaces/legacy/Player.cpp b/xbmc/interfaces/legacy/Player.cpp
index b0288d77dea6..4da826435a23 100644
--- a/xbmc/interfaces/legacy/Player.cpp
+++ b/xbmc/interfaces/legacy/Player.cpp
@@ -185,6 +185,18 @@ namespace XBMCAddon
       invokeCallback(new CallbackFunction<Player>(this, &Player::onPlayBackStarted));
     }
 
+    void Player::OnPreviousItem()
+    { 
+      XBMC_TRACE;
+      invokeCallback(new CallbackFunction<Player>(this,&Player::onPreviousItem));
+    }
+
+    void Player::OnNextItem()
+    { 
+      XBMC_TRACE;
+      invokeCallback(new CallbackFunction<Player>(this,&Player::onNextItem));
+    }
+
     void Player::OnAVStarted(const CFileItem &file)
     {
       // We only have fileItem due to us having to
@@ -314,6 +326,17 @@ namespace XBMCAddon
       XBMC_TRACE;
     }
 
+    void Player::onPreviousItem()
+    { 
+      XBMC_TRACE;
+    }
+
+    void Player::onNextItem()
+    { 
+      XBMC_TRACE;
+    }
+
+
     bool Player::isPlaying()
     {
       XBMC_TRACE;
diff --git a/xbmc/interfaces/legacy/Player.h b/xbmc/interfaces/legacy/Player.h
index 387c2c3b3a34..a8a4b5f18c92 100644
--- a/xbmc/interfaces/legacy/Player.h
+++ b/xbmc/interfaces/legacy/Player.h
@@ -388,6 +388,34 @@ namespace XBMCAddon
 #else
       virtual void onPlayBackSeekChapter(int chapter);
 #endif
+
+#ifdef DOXYGEN_SHOULD_USE_THIS
+      ///
+      /// \ingroup python_PlayerCB
+      /// @brief \python_func{ onPreviousItem()() }
+      ///-----------------------------------------------------------------------
+      /// onPreviousItem method.
+      ///
+      /// Will be called when Kodi moves to the previous file.
+      ///
+      onPreviousItem();
+#else
+      virtual void onPreviousItem();
+#endif
+
+#ifdef DOXYGEN_SHOULD_USE_THIS
+      ///
+      /// \ingroup python_PlayerCB
+      /// @brief \python_func{ onNextItem()() }
+      ///-----------------------------------------------------------------------
+      /// onNextItem method.
+      ///
+      /// Will be called when Kodi moves to the next file.
+      ///
+      onNextItem();
+#else
+      virtual void onNextItem();
+#endif
       /// @}
 
 #ifdef DOXYGEN_SHOULD_USE_THIS
@@ -804,6 +832,8 @@ namespace XBMCAddon
       SWIGHIDDENVIRTUAL void OnPlayBackSpeedChanged(int iSpeed) override;
       SWIGHIDDENVIRTUAL void OnPlayBackSeek(int64_t iTime, int64_t seekOffset) override;
       SWIGHIDDENVIRTUAL void OnPlayBackSeekChapter(int iChapter) override;
+      SWIGHIDDENVIRTUAL void OnPreviousItem();
+      SWIGHIDDENVIRTUAL void OnNextItem();
 #endif
 
     protected:
diff --git a/xbmc/interfaces/python/XBPython.cpp b/xbmc/interfaces/python/XBPython.cpp
index 81e0d7c55e7d..e68748a306be 100644
--- a/xbmc/interfaces/python/XBPython.cpp
+++ b/xbmc/interfaces/python/XBPython.cpp
@@ -250,6 +250,28 @@ void XBPython::OnQueueNextItem()
   }
 }
 
+void XBPython::OnPreviousItem()
+{
+  XBMC_TRACE;
+  LOCK_AND_COPY(std::vector<void*>,tmp,m_vecPlayerCallbackList);
+  for (PlayerCallbackList::iterator it = tmp.begin(); (it != tmp.end()); ++it)
+  {
+    if (CHECK_FOR_ENTRY(m_vecPlayerCallbackList,(*it)))
+      ((IPlayerCallback*)(*it))->OnPreviousItem();
+  }
+}
+
+void XBPython::OnNextItem()
+{
+  XBMC_TRACE;
+  LOCK_AND_COPY(std::vector<void*>,tmp,m_vecPlayerCallbackList);
+  for (PlayerCallbackList::iterator it = tmp.begin(); (it != tmp.end()); ++it)
+  {
+    if (CHECK_FOR_ENTRY(m_vecPlayerCallbackList,(*it)))
+      ((IPlayerCallback*)(*it))->OnNextItem();
+  }
+}
+
 void XBPython::RegisterPythonPlayerCallBack(IPlayerCallback* pCallback)
 {
   XBMC_TRACE;
diff --git a/xbmc/interfaces/python/XBPython.h b/xbmc/interfaces/python/XBPython.h
index 0c922fb71181..a425e6d7e8f8 100644
--- a/xbmc/interfaces/python/XBPython.h
+++ b/xbmc/interfaces/python/XBPython.h
@@ -68,7 +68,8 @@ class XBPython :
   void OnPlayBackSeek(int64_t iTime, int64_t seekOffset) override;
   void OnPlayBackSeekChapter(int iChapter) override;
   void OnQueueNextItem() override;
-
+  void OnPreviousItem();
+  void OnNextItem();
   void Announce(ANNOUNCEMENT::AnnouncementFlag flag, const char *sender, const char *message, const CVariant &data) override;
   void RegisterPythonPlayerCallBack(IPlayerCallback* pCallback);
   void UnregisterPythonPlayerCallBack(IPlayerCallback* pCallback);
