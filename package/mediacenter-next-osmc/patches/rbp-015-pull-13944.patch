From c1e760e1ee60cc1c6bd27c141a9c2072402e5d59 Mon Sep 17 00:00:00 2001
From: Rechi <Rechi@users.noreply.github.com>
Date: Mon, 16 Jul 2018 13:00:00 +0200
Subject: [PATCH 1/2] move libbluray filesystem callbacks to seperate class

---
 lib/DllLibbluray.h                                 |  13 --
 .../DVDInputStreams/DVDInputStreamBluray.cpp       | 147 +-----------------
 xbmc/filesystem/BlurayCallback.cpp                 | 170 +++++++++++++++++++++
 xbmc/filesystem/BlurayCallback.h                   |  43 ++++++
 xbmc/filesystem/BlurayDirectory.cpp                |   6 +-
 xbmc/filesystem/CMakeLists.txt                     |   6 +-
 6 files changed, 224 insertions(+), 161 deletions(-)
 create mode 100644 xbmc/filesystem/BlurayCallback.cpp
 create mode 100644 xbmc/filesystem/BlurayCallback.h

diff --git a/lib/DllLibbluray.h b/lib/DllLibbluray.h
index 247aea2c111a..bfeee262523e 100644
--- a/lib/DllLibbluray.h
+++ b/lib/DllLibbluray.h
@@ -192,17 +192,4 @@ class DllLibbluray : public DllDynamic, DllLibblurayInterface
     RESOLVE_METHOD(bd_mouse_select)
     RESOLVE_METHOD(bd_get_sound_effect)
   END_METHOD_RESOLVE()
-
-public:
-  static void       file_close(BD_FILE_H *file);
-  static int64_t    file_seek(BD_FILE_H *file, int64_t offset, int32_t origin);
-  static int64_t    file_tell(BD_FILE_H *file);
-  static int        file_eof(BD_FILE_H *file);
-  static int64_t    file_read(BD_FILE_H *file, uint8_t *buf, int64_t size);
-  static int64_t    file_write(BD_FILE_H *file, const uint8_t *buf, int64_t size);
-  static void      dir_close(BD_DIR_H *dir);
-  static int       dir_read(BD_DIR_H *dir, BD_DIRENT *entry);
-  static BD_FILE_H *file_open(void * handle, const char * rel_path);
-  static BD_DIR_H *dir_open(void * handle, const char * rel_path);
-  static void      bluray_logger(const char* msg);
 };
diff --git a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamBluray.cpp b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamBluray.cpp
index 092d3f3dc8d3..3b94ba3bd096 100644
--- a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamBluray.cpp
+++ b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamBluray.cpp
@@ -21,6 +21,7 @@
 #include <functional>
 #include <limits>
 
+#include "filesystem/BlurayCallback.h"
 #include "DVDInputStreamBluray.h"
 #include "IVideoPlayer.h"
 #include "DVDCodecs/Overlay/DVDOverlay.h"
@@ -65,148 +66,6 @@ static int read_blocks(void* handle, void* buf, int lba, int num_blocks)
   return result;
 }
 
-void DllLibbluray::file_close(BD_FILE_H *file)
-{
-  if (file)
-  {
-    delete static_cast<CFile*>(file->internal);
-    delete file;
-  }
-}
-
-int64_t DllLibbluray::file_seek(BD_FILE_H *file, int64_t offset, int32_t origin)
-{
-  return static_cast<CFile*>(file->internal)->Seek(offset, origin);
-}
-
-int64_t DllLibbluray::file_tell(BD_FILE_H *file)
-{
-  return static_cast<CFile*>(file->internal)->GetPosition();
-}
-
-int DllLibbluray::file_eof(BD_FILE_H *file)
-{
-  if(static_cast<CFile*>(file->internal)->GetPosition() == static_cast<CFile*>(file->internal)->GetLength())
-    return 1;
-  else
-    return 0;
-}
-
-int64_t DllLibbluray::file_read(BD_FILE_H *file, uint8_t *buf, int64_t size)
-{
-  return static_cast<int64_t>(static_cast<CFile*>(file->internal)->Read(buf, static_cast<size_t>(size)));
-}
-
-int64_t DllLibbluray::file_write(BD_FILE_H *file, const uint8_t *buf, int64_t size)
-{
-  return static_cast<int64_t>(static_cast<CFile*>(file->internal)->Write(buf, static_cast<size_t>(size)));
-}
-
-struct SDirState
-{
-  CFileItemList list;
-  int           curr = 0;
-};
-
-void DllLibbluray::dir_close(BD_DIR_H *dir)
-{
-  if (dir)
-  {
-    CLog::Log(LOGDEBUG, "CDVDInputStreamBluray - Closed dir (%p)\n", static_cast<void*>(dir));
-    delete static_cast<SDirState*>(dir->internal);
-    delete dir;
-  }
-}
-
-int DllLibbluray::dir_read(BD_DIR_H *dir, BD_DIRENT *entry)
-{
-    SDirState* state = static_cast<SDirState*>(dir->internal);
-
-    if(state->curr >= state->list.Size())
-      return 1;
-
-    strncpy(entry->d_name, state->list[state->curr]->GetLabel().c_str(), sizeof(entry->d_name));
-    entry->d_name[sizeof(entry->d_name)-1] = 0;
-    state->curr++;
-
-    return 0;
-}
-
-BD_DIR_H* DllLibbluray::dir_open(void *handle, const char* rel_path)
-{
-  std::string strRelPath(rel_path);
-  std::string* strBasePath = reinterpret_cast<std::string*>(handle);
-  if (!strBasePath)
-  {
-    CLog::Log(LOGDEBUG, "CDVDInputStreamBluray - Error opening dir, null handle!");
-    return NULL;
-  }
-
-  std::string strDirname = URIUtils::AddFileToFolder(*strBasePath, strRelPath);
-  if (URIUtils::HasSlashAtEnd(strDirname))
-    URIUtils::RemoveSlashAtEnd(strDirname);
-
-  CLog::Log(LOGDEBUG, "CDVDInputStreamBluray - Opening dir %s\n", CURL::GetRedacted(strDirname).c_str());
-
-  SDirState *st = new SDirState();
-  if (!CDirectory::GetDirectory(strDirname, st->list, "", DIR_FLAG_DEFAULTS))
-  {
-    if (!CFile::Exists(strDirname))
-      CLog::Log(LOGDEBUG, "CDVDInputStreamBluray - Error opening dir! (%s)\n", CURL::GetRedacted(strDirname).c_str());
-    delete st;
-    return NULL;
-  }
-
-  BD_DIR_H *dir = new BD_DIR_H;
-  dir->close = DllLibbluray::dir_close;
-  dir->read = DllLibbluray::dir_read;
-  dir->internal = (void*)st;
-
-  return dir;
-}
-BD_FILE_H * DllLibbluray::file_open(void *handle, const char *rel_path)
-{
-
-  std::string strRelPath(rel_path);
-  std::string* strBasePath = reinterpret_cast<std::string*>(handle);
-  if (!strBasePath)
-  {
-    CLog::Log(LOGDEBUG, "CDVDInputStreamBluray - Error opening dir, null handle!");
-    return NULL;
-  }
-
-  std::string strFilename = URIUtils::AddFileToFolder(*strBasePath, strRelPath);
-
-  BD_FILE_H *file = new BD_FILE_H;
-
-  file->close = DllLibbluray::file_close;
-  file->seek = DllLibbluray::file_seek;
-  file->read = DllLibbluray::file_read;
-  file->write = DllLibbluray::file_write;
-  file->tell = DllLibbluray::file_tell;
-  file->eof = DllLibbluray::file_eof;
-
-  CFile* fp = new CFile();
-  if (fp->Open(strFilename))
-  {
-    file->internal = (void*)fp;
-    return file;
-  }
-
-  CLog::Log(LOGDEBUG, "CDVDInputStreamBluray - Error opening file! (%s)", CURL::GetRedacted(strFilename).c_str());
-
-  delete fp;
-  delete file;
-
-  return NULL;
-}
-
-void DllLibbluray::bluray_logger(const char* msg)
-{
-  CLog::Log(LOGDEBUG, "CDVDInputStreamBluray::Logger - %s", msg);
-}
-
-
 static void bluray_overlay_cb(void *this_gen, const BD_OVERLAY * ov)
 {
   static_cast<CDVDInputStreamBluray*>(this_gen)->OverlayCallback(ov);
@@ -364,7 +223,7 @@ bool CDVDInputStreamBluray::Open()
   if (!m_dll)
     return false;
 
-  m_dll->bd_set_debug_handler(DllLibbluray::bluray_logger);
+  m_dll->bd_set_debug_handler(CBlurayCallback::bluray_logger);
   m_dll->bd_set_debug_mask(DBG_CRIT | DBG_BLURAY | DBG_NAV);
 
   m_bd = m_dll->bd_init();
@@ -390,7 +249,7 @@ bool CDVDInputStreamBluray::Open()
   else
   {
     m_rootPath = root;
-    if (!m_dll->bd_open_files(m_bd, &m_rootPath, DllLibbluray::dir_open, DllLibbluray::file_open))
+    if (!m_dll->bd_open_files(m_bd, &m_rootPath, CBlurayCallback::dir_open, CBlurayCallback::file_open))
     {
       CLog::Log(LOGERROR, "CDVDInputStreamBluray::Open - failed to open %s", CURL::GetRedacted(root).c_str());
       return false;
diff --git a/xbmc/filesystem/BlurayCallback.cpp b/xbmc/filesystem/BlurayCallback.cpp
new file mode 100644
index 000000000000..d9e485cb85ee
--- /dev/null
+++ b/xbmc/filesystem/BlurayCallback.cpp
@@ -0,0 +1,170 @@
+/*
+ *      Copyright (C) 2005-2013 Team XBMC
+ *      http://kodi.tv
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "BlurayCallback.h"
+
+#include "FileItem.h"
+#include "filesystem/Directory.h"
+#include "filesystem/File.h"
+#include "utils/log.h"
+#include "utils/URIUtils.h"
+
+using namespace XFILE;
+
+struct SDirState
+{
+  CFileItemList list;
+  int curr = 0;
+};
+
+void CBlurayCallback::bluray_logger(const char* msg)
+{
+  CLog::Log(LOGDEBUG, "CDVDInputStreamBluray::Logger - %s", msg);
+}
+
+void CBlurayCallback::dir_close(BD_DIR_H *dir)
+{
+  if (dir)
+  {
+    CLog::Log(LOGDEBUG, "CDVDInputStreamBluray - Closed dir (%p)\n", static_cast<void*>(dir));
+    delete static_cast<SDirState*>(dir->internal);
+    delete dir;
+  }
+}
+
+BD_DIR_H* CBlurayCallback::dir_open(void *handle, const char* rel_path)
+{
+  std::string strRelPath(rel_path);
+  std::string* strBasePath = reinterpret_cast<std::string*>(handle);
+  if (!strBasePath)
+  {
+    CLog::Log(LOGDEBUG, "CDVDInputStreamBluray - Error opening dir, null handle!");
+    return NULL;
+  }
+
+  std::string strDirname = URIUtils::AddFileToFolder(*strBasePath, strRelPath);
+  if (URIUtils::HasSlashAtEnd(strDirname))
+    URIUtils::RemoveSlashAtEnd(strDirname);
+
+  CLog::Log(LOGDEBUG, "CDVDInputStreamBluray - Opening dir %s\n", CURL::GetRedacted(strDirname).c_str());
+
+  SDirState *st = new SDirState();
+  if (!CDirectory::GetDirectory(strDirname, st->list, "", DIR_FLAG_DEFAULTS))
+  {
+    if (!CFile::Exists(strDirname))
+      CLog::Log(LOGDEBUG, "CDVDInputStreamBluray - Error opening dir! (%s)\n", CURL::GetRedacted(strDirname).c_str());
+    delete st;
+    return NULL;
+  }
+
+  BD_DIR_H *dir = new BD_DIR_H;
+  dir->close = dir_close;
+  dir->read = dir_read;
+  dir->internal = (void*)st;
+
+  return dir;
+}
+
+int CBlurayCallback::dir_read(BD_DIR_H *dir, BD_DIRENT *entry)
+{
+  SDirState* state = static_cast<SDirState*>(dir->internal);
+
+  if (state->curr >= state->list.Size())
+    return 1;
+
+  strncpy(entry->d_name, state->list[state->curr]->GetLabel().c_str(), sizeof(entry->d_name));
+  entry->d_name[sizeof(entry->d_name) - 1] = 0;
+  state->curr++;
+
+  return 0;
+}
+
+void CBlurayCallback::file_close(BD_FILE_H *file)
+{
+  if (file)
+  {
+    delete static_cast<CFile*>(file->internal);
+    delete file;
+  }
+}
+
+int CBlurayCallback::file_eof(BD_FILE_H *file)
+{
+  if (static_cast<CFile*>(file->internal)->GetPosition() == static_cast<CFile*>(file->internal)->GetLength())
+    return 1;
+  else
+    return 0;
+}
+
+BD_FILE_H * CBlurayCallback::file_open(void *handle, const char *rel_path)
+{
+  std::string strRelPath(rel_path);
+  std::string* strBasePath = reinterpret_cast<std::string*>(handle);
+  if (!strBasePath)
+  {
+    CLog::Log(LOGDEBUG, "CDVDInputStreamBluray - Error opening dir, null handle!");
+    return NULL;
+  }
+
+  std::string strFilename = URIUtils::AddFileToFolder(*strBasePath, strRelPath);
+
+  BD_FILE_H *file = new BD_FILE_H;
+
+  file->close = file_close;
+  file->seek = file_seek;
+  file->read = file_read;
+  file->write = file_write;
+  file->tell = file_tell;
+  file->eof = file_eof;
+
+  CFile* fp = new CFile();
+  if (fp->Open(strFilename))
+  {
+    file->internal = (void*)fp;
+    return file;
+  }
+
+  CLog::Log(LOGDEBUG, "CDVDInputStreamBluray - Error opening file! (%s)", CURL::GetRedacted(strFilename).c_str());
+
+  delete fp;
+  delete file;
+
+  return NULL;
+}
+
+int64_t CBlurayCallback::file_seek(BD_FILE_H *file, int64_t offset, int32_t origin)
+{
+  return static_cast<CFile*>(file->internal)->Seek(offset, origin);
+}
+
+int64_t CBlurayCallback::file_tell(BD_FILE_H *file)
+{
+  return static_cast<CFile*>(file->internal)->GetPosition();
+}
+
+int64_t CBlurayCallback::file_read(BD_FILE_H *file, uint8_t *buf, int64_t size)
+{
+  return static_cast<int64_t>(static_cast<CFile*>(file->internal)->Read(buf, static_cast<size_t>(size)));
+}
+
+int64_t CBlurayCallback::file_write(BD_FILE_H *file, const uint8_t *buf, int64_t size)
+{
+  return static_cast<int64_t>(static_cast<CFile*>(file->internal)->Write(buf, static_cast<size_t>(size)));
+}
diff --git a/xbmc/filesystem/BlurayCallback.h b/xbmc/filesystem/BlurayCallback.h
new file mode 100644
index 000000000000..83d75f7e0996
--- /dev/null
+++ b/xbmc/filesystem/BlurayCallback.h
@@ -0,0 +1,43 @@
+/*
+ *      Copyright (C) 2005-2013 Team XBMC
+ *      http://kodi.tv
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#pragma once
+
+#include <libbluray/filesystem.h>
+
+class CBlurayCallback
+{
+public:
+  static void bluray_logger(const char* msg);
+  static void dir_close(BD_DIR_H* dir);
+  static BD_DIR_H* dir_open(void*  handle, const char*  rel_path);
+  static int dir_read(BD_DIR_H* dir, BD_DIRENT* entry);
+  static void file_close(BD_FILE_H* file);
+  static int file_eof(BD_FILE_H* file);
+  static BD_FILE_H* file_open(void*  handle, const char*  rel_path);
+  static int64_t file_read(BD_FILE_H* file, uint8_t* buf, int64_t size);
+  static int64_t file_seek(BD_FILE_H* file, int64_t offset, int32_t origin);
+  static int64_t file_tell(BD_FILE_H* file);
+  static int64_t file_write(BD_FILE_H* file, const uint8_t* buf, int64_t size);
+
+private:
+  CBlurayCallback() = default;
+  ~CBlurayCallback() = default;
+};
diff --git a/xbmc/filesystem/BlurayDirectory.cpp b/xbmc/filesystem/BlurayDirectory.cpp
index 66d9801d4ef3..09e0bc284706 100644
--- a/xbmc/filesystem/BlurayDirectory.cpp
+++ b/xbmc/filesystem/BlurayDirectory.cpp
@@ -18,6 +18,8 @@
  *
  */
 #include "BlurayDirectory.h"
+
+#include "filesystem/BlurayCallback.h"
 #include "utils/log.h"
 #include "utils/URIUtils.h"
 #include "utils/StringUtils.h"
@@ -262,7 +264,7 @@ bool CBlurayDirectory::InitializeBluray(const std::string &root)
     return false;
   }
 
-  m_dll->bd_set_debug_handler(DllLibbluray::bluray_logger);
+  m_dll->bd_set_debug_handler(CBlurayCallback::bluray_logger);
   m_dll->bd_set_debug_mask(DBG_CRIT | DBG_BLURAY | DBG_NAV);
 
   m_bd = m_dll->bd_init();
@@ -277,7 +279,7 @@ bool CBlurayDirectory::InitializeBluray(const std::string &root)
   g_LangCodeExpander.ConvertToISO6392T(g_langInfo.GetDVDMenuLanguage(), langCode);
   m_dll->bd_set_player_setting_str(m_bd, BLURAY_PLAYER_SETTING_MENU_LANG, langCode.c_str());
 
-  if (!m_dll->bd_open_files(m_bd, const_cast<std::string*>(&root), DllLibbluray::dir_open, DllLibbluray::file_open))
+  if (!m_dll->bd_open_files(m_bd, const_cast<std::string*>(&root), CBlurayCallback::dir_open, CBlurayCallback::file_open))
   {
     CLog::Log(LOGERROR, "CBlurayDirectory::InitializeBluray - failed to open %s", CURL::GetRedacted(root).c_str());
     return false;
diff --git a/xbmc/filesystem/CMakeLists.txt b/xbmc/filesystem/CMakeLists.txt
index 0575103166ba..90004a388e2d 100644
--- a/xbmc/filesystem/CMakeLists.txt
+++ b/xbmc/filesystem/CMakeLists.txt
@@ -134,9 +134,11 @@ set(HEADERS AddonsDirectory.h
             ZipManager.h)
 
 if(BLURAY_FOUND)
-  list(APPEND SOURCES BlurayDirectory.cpp
+  list(APPEND SOURCES BlurayCallback.cpp
+                      BlurayDirectory.cpp
                       BlurayFile.cpp)
-  list(APPEND HEADERS BlurayDirectory.h
+  list(APPEND HEADERS BlurayCallback.h
+                      BlurayDirectory.h
                       BlurayFile.h)
 endif()
 

From 740e800c2b3fe2b785450815f9d5bee84eeabf11 Mon Sep 17 00:00:00 2001
From: Rechi <Rechi@users.noreply.github.com>
Date: Mon, 16 Jul 2018 13:00:00 +0200
Subject: [PATCH 2/2] link with libbluray instead of loading it dynamic

---
 CMakeLists.txt                                     |   4 +-
 cmake/modules/FindBluray.cmake                     |  19 +-
 cmake/scripts/android/Install.cmake                |   1 +
 lib/DllLibbluray.h                                 | 195 ---------------------
 xbmc/DllPaths_generated.h.in                       |   3 -
 xbmc/DllPaths_generated_android.h.in               |   3 -
 xbmc/DllPaths_win32.h                              |   4 -
 .../DVDInputStreams/DVDInputStreamBluray.cpp       | 136 +++++++-------
 .../DVDInputStreams/DVDInputStreamBluray.h         |   2 -
 xbmc/filesystem/BlurayDirectory.cpp                |  42 ++---
 xbmc/filesystem/BlurayDirectory.h                  |   2 -
 xbmc/settings/DiscSettings.cpp                     |  26 +--
 xbmc/settings/DiscSettings.h                       |  11 +-
 13 files changed, 97 insertions(+), 351 deletions(-)
 delete mode 100644 lib/DllLibbluray.h

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 4350a82bd150..5a4f029a201f 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -145,6 +145,7 @@ endif()
 set(optional_deps Alsa
                   Avahi
                   Bluetooth
+                  Bluray
                   CAP
                   CCache
                   CEC
@@ -162,8 +163,7 @@ set(optional_deps Alsa
                   ${PLATFORM_OPTIONAL_DEPS})
 
 # Optional, dyloaded deps. Keep in alphabetical order please
-set(dyload_optional Bluray
-                    NFS
+set(dyload_optional NFS
                     Plist)
 
 # Required tools
diff --git a/cmake/modules/FindBluray.cmake b/cmake/modules/FindBluray.cmake
index 8e524fc75681..58a9a912cbe7 100644
--- a/cmake/modules/FindBluray.cmake
+++ b/cmake/modules/FindBluray.cmake
@@ -30,20 +30,13 @@ if(NOT BLURAY_VERSION AND EXISTS ${BLURAY_INCLUDE_DIR}/libbluray/bluray-version.
   unset(_bluray_version_str)
 endif()
 
-include(FindPackageHandleStandardArgs)
-if(NOT WIN32)
-  find_library(BLURAY_LIBRARY NAMES bluray
-                              PATHS ${PC_BLURAY_LIBDIR})
+find_library(BLURAY_LIBRARY NAMES bluray libbluray
+                            PATHS ${PC_BLURAY_LIBDIR})
 
-  find_package_handle_standard_args(Bluray
-                                    REQUIRED_VARS BLURAY_LIBRARY BLURAY_INCLUDE_DIR BLURAY_VERSION
-                                    VERSION_VAR BLURAY_VERSION)
-else()
-  # Dynamically loaded DLL
-  find_package_handle_standard_args(Bluray
-                                    REQUIRED_VARS BLURAY_INCLUDE_DIR
-                                    VERSION_VAR BLURAY_VERSION)
-endif()
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(Bluray
+                                  REQUIRED_VARS BLURAY_LIBRARY BLURAY_INCLUDE_DIR BLURAY_VERSION
+                                  VERSION_VAR BLURAY_VERSION)
 
 if(BLURAY_FOUND)
   set(BLURAY_LIBRARIES ${BLURAY_LIBRARY})
diff --git a/cmake/scripts/android/Install.cmake b/cmake/scripts/android/Install.cmake
index 0218f2533bcf..a0fa155a61db 100644
--- a/cmake/scripts/android/Install.cmake
+++ b/cmake/scripts/android/Install.cmake
@@ -152,6 +152,7 @@ foreach(lib IN LISTS required_dyload dyload_optional ITEMS Shairplay)
   endif()
 endforeach()
 add_bundle_file(${ASS_LIBRARY} ${libdir} "")
+add_bundle_file(${BLURAY_LIBRARY} ${libdir} "")
 add_bundle_file(${SMBCLIENT_LIBRARY} ${libdir} "")
 
 # Main targets from Makefile.in
diff --git a/lib/DllLibbluray.h b/lib/DllLibbluray.h
deleted file mode 100644
index bfeee262523e..000000000000
--- a/lib/DllLibbluray.h
+++ /dev/null
@@ -1,195 +0,0 @@
-/*
- *      Copyright (C) 2005-2013 Team XBMC
- *      http://kodi.tv
- *
- *  This Program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2, or (at your option)
- *  any later version.
- *
- *  This Program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- *  GNU General Public License for more details.
- *
- *  You should have received a copy of the GNU General Public License
- *  along with XBMC; see the file COPYING.  If not, see
- *  <http://www.gnu.org/licenses/>.
- *
- */
-
-#pragma once
-
-#include "DynamicDll.h"
-
-
-extern "C"
-{
-#include <libbluray/bluray.h>
-#include <libbluray/filesystem.h>
-#include <libbluray/log_control.h>
-#include <libbluray/keys.h>
-#include <libbluray/overlay.h>
-#include <libbluray/bluray-version.h>
-}
-
-typedef int(*read_blocks_f)(void *handle, void *buf, int lba, int num_blocks);
-typedef struct bd_dir_s *(*open_dir_f)(void *handle, const char *rel_path);
-typedef struct bd_file_s *(*open_file_f)(void *handle, const char *rel_path);
-
-class DllLibblurayInterface
-{
-public:
-  virtual ~DllLibblurayInterface() {};
-  virtual uint32_t bd_get_titles(BLURAY *bd, uint8_t flags, uint32_t min_title_length)=0;
-  virtual BLURAY_TITLE_INFO* bd_get_title_info(BLURAY *bd, uint32_t title_idx, unsigned angle)=0;
-  virtual BLURAY_TITLE_INFO* bd_get_playlist_info(BLURAY *bd, uint32_t playlist, unsigned angle)=0;
-  virtual void bd_free_title_info(BLURAY_TITLE_INFO *title_info)=0;
-  virtual BLURAY *bd_open(const char* device_path, const char* keyfile_path)=0;
-  virtual int bd_open_disc(BLURAY *bd, const char *device_path, const char *keyfile_path)=0;
-  virtual int bd_open_stream(BLURAY *bd, void *read_blocks_handle, read_blocks_f func) = 0;
-  virtual int bd_open_files(BLURAY *bd, void *handle, open_dir_f dir_func, open_file_f file_func) = 0;
-  virtual BLURAY *bd_init(void)= 0;
-  virtual void bd_close(BLURAY *bd)=0;
-  virtual int64_t bd_seek(BLURAY *bd, uint64_t pos)=0;
-  virtual int64_t bd_seek_time(BLURAY *bd, uint64_t tick)=0;
-  virtual int bd_read(BLURAY *bd, unsigned char *buf, int len)=0;
-  virtual int64_t bd_seek_chapter(BLURAY *bd, unsigned chapter)=0;
-  virtual int64_t bd_chapter_pos(BLURAY *bd, unsigned chapter)=0;
-  virtual uint32_t bd_get_current_chapter(BLURAY *bd)=0;
-  virtual int64_t bd_seek_mark(BLURAY *bd, unsigned mark)=0;
-  virtual int bd_select_playlist(BLURAY *bd, uint32_t playlist)=0;
-  virtual int bd_select_title(BLURAY *bd, uint32_t title)=0;
-  virtual int bd_select_angle(BLURAY *bd, unsigned angle)=0;
-  virtual void bd_seamless_angle_change(BLURAY *bd, unsigned angle)=0;
-  virtual uint64_t bd_get_title_size(BLURAY *bd)=0;
-  virtual uint32_t bd_get_current_title(BLURAY *bd)=0;
-  virtual unsigned bd_get_current_angle(BLURAY *bd)=0;
-  virtual uint64_t bd_tell(BLURAY *bd)=0;
-  virtual uint64_t bd_tell_time(BLURAY *bd)=0;
-  virtual BD_FILE_OPEN bd_register_file(BD_FILE_OPEN p)=0;
-  virtual BD_DIR_OPEN bd_register_dir(BD_DIR_OPEN p)=0;
-
-  virtual void     bd_set_debug_handler(BD_LOG_FUNC)=0;
-  virtual void     bd_set_debug_mask(uint32_t mask)=0;
-  virtual uint32_t bd_get_debug_mask(void)=0;
-  virtual const BLURAY_DISC_INFO *bd_get_disc_info(BLURAY *bd)=0;
-
-  virtual int      bd_get_event                 (BLURAY *bd, BD_EVENT *event)=0;
-  virtual int      bd_play                      (BLURAY *bd)=0;
-  virtual int      bd_read_ext                  (BLURAY *bd, unsigned char *buf, int len, BD_EVENT *event)=0;
-  virtual int      bd_read_skip_still           (BLURAY *bd)=0;
-  virtual int      bd_user_input                (BLURAY *bd, int64_t pts, uint32_t key)=0;
-  virtual int      bd_set_player_setting        (BLURAY *bd, uint32_t idx, uint32_t value)=0;
-  virtual int      bd_set_player_setting_str    (BLURAY *bd, uint32_t idx, const char *s)=0;
-  virtual void     bd_register_overlay_proc     (BLURAY *bd, void *handle, bd_overlay_proc_f func)=0;
-#ifdef HAVE_LIBBLURAY_BDJ
-  virtual void     bd_register_argb_overlay_proc(BLURAY *bd, void *handle, bd_argb_overlay_proc_f func, struct bd_argb_buffer_s *buf)=0;
-#endif
-  virtual int      bd_menu_call                 (BLURAY *bd, int64_t pts)=0;
-  virtual int      bd_mouse_select              (BLURAY *bd, int64_t pts, uint16_t x, uint16_t y)=0;
-  virtual int      bd_get_sound_effect          (BLURAY *bd, unsigned sound_id, struct bd_sound_effect *effect)=0;
-};
-
-class DllLibbluray : public DllDynamic, DllLibblurayInterface
-{
-  DECLARE_DLL_WRAPPER(DllLibbluray, DLL_PATH_LIBBLURAY)
-  DEFINE_METHOD3(uint32_t,            bd_get_titles,          (BLURAY *p1, uint8_t p2, uint32_t p3))
-  DEFINE_METHOD3(BLURAY_TITLE_INFO*,  bd_get_title_info,      (BLURAY *p1, uint32_t p2, unsigned p3))
-  DEFINE_METHOD3(BLURAY_TITLE_INFO*,  bd_get_playlist_info,   (BLURAY *p1, uint32_t p2, unsigned p3))
-  DEFINE_METHOD1(void,                bd_free_title_info,     (BLURAY_TITLE_INFO *p1))
-  DEFINE_METHOD2(BLURAY*,             bd_open,                (const char* p1, const char* p2))
-  DEFINE_METHOD3(int,                 bd_open_disc,           (BLURAY *p1, const char *p2, const char *p3))
-  DEFINE_METHOD3(int,                 bd_open_stream,         (BLURAY *p1, void *p2, read_blocks_f p3))
-  DEFINE_METHOD4(int,                 bd_open_files,          (BLURAY *p1, void *p2, open_dir_f p3, open_file_f p4))
-  DEFINE_METHOD0(BLURAY*,             bd_init)
-  DEFINE_METHOD1(void,                bd_close,               (BLURAY *p1))
-  DEFINE_METHOD2(int64_t,             bd_seek,                (BLURAY *p1, uint64_t p2))
-  DEFINE_METHOD2(int64_t,             bd_seek_time,           (BLURAY *p1, uint64_t p2))
-  DEFINE_METHOD3(int,                 bd_read,                (BLURAY *p1, unsigned char *p2, int p3))
-  DEFINE_METHOD2(int64_t,             bd_seek_chapter,        (BLURAY *p1, unsigned p2))
-  DEFINE_METHOD2(int64_t,             bd_chapter_pos,         (BLURAY *p1, unsigned p2))
-  DEFINE_METHOD1(uint32_t,            bd_get_current_chapter, (BLURAY *p1))
-  DEFINE_METHOD2(int64_t,             bd_seek_mark,           (BLURAY *p1, unsigned p2))
-  DEFINE_METHOD2(int,                 bd_select_playlist,     (BLURAY *p1, uint32_t p2))
-  DEFINE_METHOD2(int,                 bd_select_title,        (BLURAY *p1, uint32_t p2))
-  DEFINE_METHOD2(int,                 bd_select_angle,        (BLURAY *p1, unsigned p2))
-  DEFINE_METHOD2(void,                bd_seamless_angle_change,(BLURAY *p1, unsigned p2))
-  DEFINE_METHOD1(uint64_t,            bd_get_title_size,      (BLURAY *p1))
-  DEFINE_METHOD1(uint32_t,            bd_get_current_title,   (BLURAY *p1))
-  DEFINE_METHOD1(unsigned,            bd_get_current_angle,   (BLURAY *p1))
-  DEFINE_METHOD1(uint64_t,            bd_tell,                (BLURAY *p1))
-  DEFINE_METHOD1(uint64_t,            bd_tell_time,           (BLURAY *p1))
-  DEFINE_METHOD1(BD_FILE_OPEN,        bd_register_file,       (BD_FILE_OPEN p1))
-  DEFINE_METHOD1(BD_DIR_OPEN,         bd_register_dir,        (BD_DIR_OPEN p1))
-
-  DEFINE_METHOD1(void,                bd_set_debug_handler,   (BD_LOG_FUNC p1))
-  DEFINE_METHOD1(void,                bd_set_debug_mask,      (uint32_t p1))
-  DEFINE_METHOD0(uint32_t,            bd_get_debug_mask)
-  DEFINE_METHOD1(const BLURAY_DISC_INFO*, bd_get_disc_info,      (BLURAY *p1))
-
-  DEFINE_METHOD2(int,                 bd_get_event,              (BLURAY *p1, BD_EVENT *p2))
-  DEFINE_METHOD1(int,                 bd_play,                   (BLURAY *p1))
-  DEFINE_METHOD4(int,                 bd_read_ext,               (BLURAY *p1, unsigned char *p2, int p3, BD_EVENT *p4))
-  DEFINE_METHOD1(int,                 bd_read_skip_still,        (BLURAY *p1))
-  DEFINE_METHOD3(int,                 bd_user_input,             (BLURAY *p1, int64_t p2, uint32_t p3))
-  DEFINE_METHOD3(int,                 bd_set_player_setting,     (BLURAY *p1, uint32_t p2, uint32_t p3))
-  DEFINE_METHOD3(int,                 bd_set_player_setting_str, (BLURAY *p1, uint32_t p2, const char *p3))
-  DEFINE_METHOD3(void,                bd_register_overlay_proc,  (BLURAY *p1, void *p2, bd_overlay_proc_f p3))
-#ifdef HAVE_LIBBLURAY_BDJ
-  DEFINE_METHOD4(void,                bd_register_argb_overlay_proc, (BLURAY *p1, void *p2, bd_argb_overlay_proc_f p3, struct bd_argb_buffer_s *p4))
-#endif
-  DEFINE_METHOD2(int,                 bd_menu_call,              (BLURAY *p1, int64_t p2))
-  DEFINE_METHOD4(int,                 bd_mouse_select,           (BLURAY *p1, int64_t p2, uint16_t p3, uint16_t p4))
-  DEFINE_METHOD3(int,                 bd_get_sound_effect,       (BLURAY *p1, unsigned p2, struct bd_sound_effect* p3))
-
-  BEGIN_METHOD_RESOLVE()
-    RESOLVE_METHOD(bd_get_titles)
-    RESOLVE_METHOD(bd_get_title_info)
-    RESOLVE_METHOD(bd_get_playlist_info)
-    RESOLVE_METHOD_RENAME(bd_free_title_info,   bd_free_title_info)
-    RESOLVE_METHOD_RENAME(bd_open,              bd_open)
-    RESOLVE_METHOD(bd_open_disc)
-    RESOLVE_METHOD(bd_open_stream)
-    RESOLVE_METHOD(bd_open_files)
-    RESOLVE_METHOD(bd_init)
-    RESOLVE_METHOD_RENAME(bd_close,             bd_close)
-    RESOLVE_METHOD_RENAME(bd_seek,              bd_seek)
-    RESOLVE_METHOD_RENAME(bd_seek_time,         bd_seek_time)
-    RESOLVE_METHOD_RENAME(bd_read,              bd_read)
-    RESOLVE_METHOD_RENAME(bd_seek_chapter,      bd_seek_chapter)
-    RESOLVE_METHOD_RENAME(bd_chapter_pos,       bd_chapter_pos)
-    RESOLVE_METHOD_RENAME(bd_get_current_chapter, bd_get_current_chapter)
-    RESOLVE_METHOD_RENAME(bd_seek_mark,         bd_seek_mark)
-    RESOLVE_METHOD_RENAME(bd_select_playlist,   bd_select_playlist)
-    RESOLVE_METHOD_RENAME(bd_select_title,      bd_select_title)
-    RESOLVE_METHOD_RENAME(bd_select_angle,      bd_select_angle)
-    RESOLVE_METHOD_RENAME(bd_seamless_angle_change, bd_seamless_angle_change)
-    RESOLVE_METHOD_RENAME(bd_get_title_size,    bd_get_title_size)
-    RESOLVE_METHOD_RENAME(bd_get_current_title, bd_get_current_title)
-    RESOLVE_METHOD_RENAME(bd_get_current_angle, bd_get_current_angle)
-    RESOLVE_METHOD_RENAME(bd_tell,              bd_tell)
-    RESOLVE_METHOD_RENAME(bd_tell_time,         bd_tell_time)
-    RESOLVE_METHOD_RENAME(bd_register_file,     bd_register_file)
-    RESOLVE_METHOD_RENAME(bd_register_dir,      bd_register_dir)
-    RESOLVE_METHOD(bd_set_debug_handler)
-    RESOLVE_METHOD(bd_set_debug_mask)
-    RESOLVE_METHOD(bd_get_debug_mask)
-    RESOLVE_METHOD(bd_get_disc_info)
-
-    RESOLVE_METHOD(bd_get_event)
-    RESOLVE_METHOD(bd_play)
-    RESOLVE_METHOD(bd_read_ext)
-    RESOLVE_METHOD(bd_read_skip_still)
-    RESOLVE_METHOD(bd_user_input)
-    RESOLVE_METHOD(bd_set_player_setting)
-    RESOLVE_METHOD(bd_set_player_setting_str)
-    RESOLVE_METHOD(bd_register_overlay_proc)
-#ifdef HAVE_LIBBLURAY_BDJ
-    RESOLVE_METHOD(bd_register_argb_overlay_proc)
-#endif
-    RESOLVE_METHOD(bd_menu_call)
-    RESOLVE_METHOD(bd_mouse_select)
-    RESOLVE_METHOD(bd_get_sound_effect)
-  END_METHOD_RESOLVE()
-};
diff --git a/xbmc/DllPaths_generated.h.in b/xbmc/DllPaths_generated.h.in
index d5e96054742f..e4155d50a2d2 100644
--- a/xbmc/DllPaths_generated.h.in
+++ b/xbmc/DllPaths_generated.h.in
@@ -32,9 +32,6 @@
 /* VideoPlayer */
 #define DLL_PATH_LIBDVDNAV     "special://xbmcbin/system/players/VideoPlayer/libdvdnav-@ARCH@.so"
 
-/* libbluray */
-#define DLL_PATH_LIBBLURAY     "@BLURAY_SONAME@"
-
 /* sse4 */
 #define DLL_PATH_LIBSSE4      "special://xbmcbin/system/libsse4-@ARCH@.so"
 
diff --git a/xbmc/DllPaths_generated_android.h.in b/xbmc/DllPaths_generated_android.h.in
index 062613cd77b2..e818628a4a26 100644
--- a/xbmc/DllPaths_generated_android.h.in
+++ b/xbmc/DllPaths_generated_android.h.in
@@ -36,8 +36,5 @@
 /* VideoPlayer */
 #define DLL_PATH_LIBDVDNAV     "libdvdnav-@ARCH@.so"
 
-/* libbluray */
-#define DLL_PATH_LIBBLURAY     "@BLURAY_SONAME@"
-
 /* Android's libui for gralloc */
 #define DLL_PATH_LIBUI         "libui.so"
diff --git a/xbmc/DllPaths_win32.h b/xbmc/DllPaths_win32.h
index 5749c5eb4379..b6db0be57890 100644
--- a/xbmc/DllPaths_win32.h
+++ b/xbmc/DllPaths_win32.h
@@ -27,7 +27,3 @@
 
 /* VideoPlayer */
 #define DLL_PATH_LIBDVDNAV     "special://xbmcbin/libdvdnav.dll"
-
-/* libbluray */
-#define DLL_PATH_LIBBLURAY     "special://xbmcbin/libbluray.dll"
-
diff --git a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamBluray.cpp b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamBluray.cpp
index 3b94ba3bd096..0cb9a227d50b 100644
--- a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamBluray.cpp
+++ b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamBluray.cpp
@@ -33,7 +33,6 @@
 #include "utils/URIUtils.h"
 #include "filesystem/File.h"
 #include "filesystem/Directory.h"
-#include "DllLibbluray.h"
 #include "URL.h"
 #include "utils/Geometry.h"
 #include "guilib/LocalizeStrings.h"
@@ -46,6 +45,9 @@
 #include "platform/linux/XTimeUtils.h"
 #endif
 
+#include <libbluray/bluray.h>
+#include <libbluray/log_control.h>
+
 #define LIBBLURAY_BYTESEEK 0
 
 using namespace XFILE;
@@ -87,12 +89,6 @@ CDVDInputStreamBluray::CDVDInputStreamBluray(IVideoPlayer* player, const CFileIt
   m_playlist = (uint32_t)-1;
   m_menu  = false;
   m_bd    = NULL;
-  m_dll = new DllLibbluray;
-  if (!m_dll->Load())
-  {
-    delete m_dll;
-    m_dll = NULL;
-  }
   m_content = "video/x-mpegts";
   m_player  = player;
   m_navmode = false;
@@ -107,7 +103,6 @@ CDVDInputStreamBluray::CDVDInputStreamBluray(IVideoPlayer* player, const CFileIt
 CDVDInputStreamBluray::~CDVDInputStreamBluray()
 {
   Close();
-  delete m_dll;
 }
 
 void CDVDInputStreamBluray::Abort()
@@ -122,12 +117,12 @@ bool CDVDInputStreamBluray::IsEOF()
 
 BLURAY_TITLE_INFO* CDVDInputStreamBluray::GetTitleLongest()
 {
-  int titles = m_dll->bd_get_titles(m_bd, TITLES_RELEVANT, 0);
+  int titles = bd_get_titles(m_bd, TITLES_RELEVANT, 0);
 
   BLURAY_TITLE_INFO *s = NULL;
   for(int i=0; i < titles; i++)
   {
-    BLURAY_TITLE_INFO *t = m_dll->bd_get_title_info(m_bd, i, 0);
+    BLURAY_TITLE_INFO *t = bd_get_title_info(m_bd, i, 0);
     if(!t)
     {
       CLog::Log(LOGDEBUG, "get_main_title - unable to get title %d", i);
@@ -137,7 +132,7 @@ BLURAY_TITLE_INFO* CDVDInputStreamBluray::GetTitleLongest()
       std::swap(s, t);
 
     if(t)
-      m_dll->bd_free_title_info(t);
+      bd_free_title_info(t);
   }
   return s;
 }
@@ -151,7 +146,7 @@ BLURAY_TITLE_INFO* CDVDInputStreamBluray::GetTitleFile(const std::string& filena
     return NULL;
   }
 
-  return m_dll->bd_get_playlist_info(m_bd, playlist, 0);
+  return bd_get_playlist_info(m_bd, playlist, 0);
 }
 
 
@@ -220,13 +215,10 @@ bool CDVDInputStreamBluray::Open()
   // root should not have trailing slash
   URIUtils::RemoveSlashAtEnd(root);
 
-  if (!m_dll)
-    return false;
-
-  m_dll->bd_set_debug_handler(CBlurayCallback::bluray_logger);
-  m_dll->bd_set_debug_mask(DBG_CRIT | DBG_BLURAY | DBG_NAV);
+  bd_set_debug_handler(CBlurayCallback::bluray_logger);
+  bd_set_debug_mask(DBG_CRIT | DBG_BLURAY | DBG_NAV);
 
-  m_bd = m_dll->bd_init();
+  m_bd = bd_init();
 
   if (!m_bd)
   {
@@ -240,7 +232,7 @@ bool CDVDInputStreamBluray::Open()
 
   if (openStream)
   {
-    if (!m_dll->bd_open_stream(m_bd, m_pstream.get(), read_blocks))
+    if (!bd_open_stream(m_bd, m_pstream.get(), read_blocks))
     {
       CLog::Log(LOGERROR, "CDVDInputStreamBluray::Open - failed to open %s in stream mode", CURL::GetRedacted(root).c_str());
       return false;
@@ -249,16 +241,16 @@ bool CDVDInputStreamBluray::Open()
   else
   {
     m_rootPath = root;
-    if (!m_dll->bd_open_files(m_bd, &m_rootPath, CBlurayCallback::dir_open, CBlurayCallback::file_open))
+    if (!bd_open_files(m_bd, &m_rootPath, CBlurayCallback::dir_open, CBlurayCallback::file_open))
     {
       CLog::Log(LOGERROR, "CDVDInputStreamBluray::Open - failed to open %s", CURL::GetRedacted(root).c_str());
       return false;
     }
   }
 
-  m_dll->bd_get_event(m_bd, NULL);
+  bd_get_event(m_bd, NULL);
 
-  const BLURAY_DISC_INFO *disc_info = m_dll->bd_get_disc_info(m_bd);
+  const BLURAY_DISC_INFO *disc_info = bd_get_disc_info(m_bd);
 
   if (!disc_info)
   {
@@ -335,12 +327,12 @@ bool CDVDInputStreamBluray::Open()
   if (m_navmode)
   {
 
-    m_dll->bd_register_overlay_proc (m_bd, this, bluray_overlay_cb);
+    bd_register_overlay_proc (m_bd, this, bluray_overlay_cb);
 #ifdef HAVE_LIBBLURAY_BDJ
-    m_dll->bd_register_argb_overlay_proc (m_bd, this, bluray_overlay_argb_cb, NULL);
+    bd_register_argb_overlay_proc (m_bd, this, bluray_overlay_argb_cb, NULL);
 #endif
 
-    if(m_dll->bd_play(m_bd) <= 0)
+    if(bd_play(m_bd) <= 0)
     {
       CLog::Log(LOGERROR, "CDVDInputStreamBluray::Open - failed play disk %s", CURL::GetRedacted(strPath).c_str());
       return false;
@@ -355,7 +347,7 @@ bool CDVDInputStreamBluray::Open()
       return false;
     }
 
-    if(m_dll->bd_select_playlist(m_bd, m_title->playlist) == 0 )
+    if(bd_select_playlist(m_bd, m_title->playlist) == 0 )
     {
       CLog::Log(LOGERROR, "CDVDInputStreamBluray::Open - failed to select title %d", m_title->idx);
       return false;
@@ -364,7 +356,7 @@ bool CDVDInputStreamBluray::Open()
   }
 
   // Process any events that occurred during opening
-  while (m_dll->bd_get_event(m_bd, &m_event))
+  while (bd_get_event(m_bd, &m_event))
     ProcessEvent();
 
   return true;
@@ -373,14 +365,12 @@ bool CDVDInputStreamBluray::Open()
 // close file and reset everything
 void CDVDInputStreamBluray::Close()
 {
-  if (!m_dll)
-    return;
   if(m_title)
-    m_dll->bd_free_title_info(m_title);
+    bd_free_title_info(m_title);
   if(m_bd)
   {
-    m_dll->bd_register_overlay_proc(m_bd, NULL, NULL);
-    m_dll->bd_close(m_bd);
+    bd_register_overlay_proc(m_bd, NULL, NULL);
+    bd_close(m_bd);
   }
   m_bd = NULL;
   m_title = NULL;
@@ -435,7 +425,7 @@ void CDVDInputStreamBluray::ProcessEvent() {
   case BD_EVENT_SEEK:
     CLog::Log(LOGDEBUG, "CDVDInputStreamBluray - BD_EVENT_SEEK");
     //m_player->OnDVDNavResult(NULL, 1);
-    //m_dll->bd_read_skip_still(m_bd);
+    //bd_read_skip_still(m_bd);
     //m_hold = HOLD_HELD;
     break;
 
@@ -461,8 +451,8 @@ void CDVDInputStreamBluray::ProcessEvent() {
     if (m_playlist <= MAX_PLAYLIST_ID)
     {
       if(m_title)
-        m_dll->bd_free_title_info(m_title);
-      m_title = m_dll->bd_get_playlist_info(m_bd, m_playlist, m_angle);
+        bd_free_title_info(m_title);
+      m_title = bd_get_playlist_info(m_bd, m_playlist, m_angle);
     }
     break;
 
@@ -471,7 +461,7 @@ void CDVDInputStreamBluray::ProcessEvent() {
         m_event.param);
     /* when a title ends, playlist WILL eventually change */
     if (m_title)
-      m_dll->bd_free_title_info(m_title);
+      bd_free_title_info(m_title);
     m_title = NULL;
     break;
 
@@ -485,8 +475,8 @@ void CDVDInputStreamBluray::ProcessEvent() {
         m_event.param);
     m_playlist = m_event.param;
     if(m_title)
-      m_dll->bd_free_title_info(m_title);
-    m_title = m_dll->bd_get_playlist_info(m_bd, m_playlist, m_angle);
+      bd_free_title_info(m_title);
+    m_title = bd_get_playlist_info(m_bd, m_playlist, m_angle);
     break;
 
   case BD_EVENT_PLAYITEM:
@@ -545,7 +535,7 @@ void CDVDInputStreamBluray::ProcessEvent() {
   case BD_EVENT_SOUND_EFFECT:
   {
     BLURAY_SOUND_EFFECT effect;
-    if (m_dll->bd_get_sound_effect(m_bd, m_event.param, &effect) <= 0)
+    if (bd_get_sound_effect(m_bd, m_event.param, &effect) <= 0)
     {
       CLog::Log(LOGDEBUG, "CDVDInputStreamBluray - BD_EVENT_SOUND_EFFECT %d not valid",
         m_event.param);
@@ -587,7 +577,7 @@ void CDVDInputStreamBluray::ProcessEvent() {
 int CDVDInputStreamBluray::Read(uint8_t* buf, int buf_size)
 {
   int result = 0;
-  m_dispTimeBeforeRead = (int)(m_dll->bd_tell_time(m_bd) / 90);
+  m_dispTimeBeforeRead = (int)(bd_tell_time(m_bd) / 90);
   if(m_navmode)
   {
     do {
@@ -599,7 +589,7 @@ int CDVDInputStreamBluray::Read(uint8_t* buf, int buf_size)
         || m_hold == HOLD_EXIT)
         return -1;
 
-      result = m_dll->bd_read_ext (m_bd, buf, buf_size, &m_event);
+      result = bd_read_ext (m_bd, buf, buf_size, &m_event);
 
       if(result < 0)
       {
@@ -642,8 +632,8 @@ int CDVDInputStreamBluray::Read(uint8_t* buf, int buf_size)
   }
   else
   {
-    result = m_dll->bd_read(m_bd, buf, buf_size);
-    while (m_dll->bd_get_event(m_bd, &m_event))
+    result = bd_read(m_bd, buf, buf_size);
+    while (bd_get_event(m_bd, &m_event))
       ProcessEvent();
   }
   return result;
@@ -892,10 +882,10 @@ int CDVDInputStreamBluray::GetTime()
 
 bool CDVDInputStreamBluray::PosTime(int ms)
 {
-  if(m_dll->bd_seek_time(m_bd, ms * 90) < 0)
+  if(bd_seek_time(m_bd, ms * 90) < 0)
     return false;
 
-  while (m_dll->bd_get_event(m_bd, &m_event))
+  while (bd_get_event(m_bd, &m_event))
     ProcessEvent();
 
   return true;
@@ -912,17 +902,17 @@ int CDVDInputStreamBluray::GetChapterCount()
 int CDVDInputStreamBluray::GetChapter()
 {
   if(m_title)
-    return m_dll->bd_get_current_chapter(m_bd) + 1;
+    return bd_get_current_chapter(m_bd) + 1;
   else
     return 0;
 }
 
 bool CDVDInputStreamBluray::SeekChapter(int ch)
 {
-  if(m_title && m_dll->bd_seek_chapter(m_bd, ch-1) < 0)
+  if(m_title && bd_seek_chapter(m_bd, ch-1) < 0)
     return false;
 
-  while (m_dll->bd_get_event(m_bd, &m_event))
+  while (bd_get_event(m_bd, &m_event))
     ProcessEvent();
 
   return true;
@@ -947,16 +937,16 @@ int64_t CDVDInputStreamBluray::Seek(int64_t offset, int whence)
   else if(whence == SEEK_CUR)
   {
     if(offset == 0)
-      return m_dll->bd_tell(m_bd);
+      return bd_tell(m_bd);
     else
       offset += bd_tell(m_bd);
   }
   else if(whence == SEEK_END)
-    offset += m_dll->bd_get_title_size(m_bd);
+    offset += bd_get_title_size(m_bd);
   else if(whence != SEEK_SET)
     return -1;
 
-  int64_t pos = m_dll->bd_seek(m_bd, offset);
+  int64_t pos = bd_seek(m_bd, offset);
   if(pos < 0)
   {
     CLog::Log(LOGERROR, "CDVDInputStreamBluray::Seek - seek to %" PRId64", failed with %" PRId64, offset, pos);
@@ -976,7 +966,7 @@ int64_t CDVDInputStreamBluray::Seek(int64_t offset, int whence)
 
 int64_t CDVDInputStreamBluray::GetLength()
 {
-  return m_dll->bd_get_title_size(m_bd);
+  return bd_get_title_size(m_bd);
 }
 
 static bool find_stream(int pid, BLURAY_STREAM_INFO *info, int count, std::string &language)
@@ -1019,7 +1009,7 @@ CDVDInputStream::ENextStream CDVDInputStreamBluray::NextStream()
   ProcessEvent();
 
   /* process all queued up events */
-  while(m_dll->bd_get_event(m_bd, &m_event))
+  while(bd_get_event(m_bd, &m_event))
     ProcessEvent();
 
   if(m_hold == HOLD_STILL)
@@ -1034,7 +1024,7 @@ void CDVDInputStreamBluray::UserInput(bd_vk_key_e vk)
   if(m_bd == NULL || !m_navmode)
     return;
 
-  int ret = m_dll->bd_user_input(m_bd, -1, vk);
+  int ret = bd_user_input(m_bd, -1, vk);
   if (ret < 0)
   {
     CLog::Log(LOGDEBUG, "CDVDInputStreamBluray::UserInput - user input failed");
@@ -1042,7 +1032,7 @@ void CDVDInputStreamBluray::UserInput(bd_vk_key_e vk)
   else
   {
     /* process all queued up events */
-    while (m_dll->bd_get_event(m_bd, &m_event))
+    while (bd_get_event(m_bd, &m_event))
       ProcessEvent();
   }
 }
@@ -1052,7 +1042,7 @@ bool CDVDInputStreamBluray::MouseMove(const CPoint &point)
   if (m_bd == NULL || !m_navmode)
     return false;
 
-  if (m_dll->bd_mouse_select(m_bd, -1, (uint16_t)point.x, (uint16_t)point.y) < 0)
+  if (bd_mouse_select(m_bd, -1, (uint16_t)point.x, (uint16_t)point.y) < 0)
   {
     CLog::Log(LOGDEBUG, "CDVDInputStreamBluray::MouseMove - mouse select failed");
     return false;
@@ -1066,13 +1056,13 @@ bool CDVDInputStreamBluray::MouseClick(const CPoint &point)
   if (m_bd == NULL || !m_navmode)
     return false;
 
-  if (m_dll->bd_mouse_select(m_bd, -1, (uint16_t)point.x, (uint16_t)point.y) < 0)
+  if (bd_mouse_select(m_bd, -1, (uint16_t)point.x, (uint16_t)point.y) < 0)
   {
     CLog::Log(LOGDEBUG, "CDVDInputStreamBluray::MouseClick - mouse select failed");
     return false;
   }
 
-  if (m_dll->bd_user_input(m_bd, -1, BD_VK_MOUSE_ACTIVATE) >= 0)
+  if (bd_user_input(m_bd, -1, BD_VK_MOUSE_ACTIVATE) >= 0)
     return true;
 
   CLog::Log(LOGDEBUG, "CDVDInputStreamBluray::MouseClick - mouse click (user input) failed");
@@ -1087,15 +1077,15 @@ void CDVDInputStreamBluray::OnMenu()
     return;
   }
 
-  if(m_dll->bd_user_input(m_bd, -1, BD_VK_POPUP) >= 0)
+  if(bd_user_input(m_bd, -1, BD_VK_POPUP) >= 0)
     return;
   CLog::Log(LOGDEBUG, "CDVDInputStreamBluray::OnMenu - popup failed, trying root");
 
-  if(m_dll->bd_user_input(m_bd, -1, BD_VK_ROOT_MENU) >= 0)
+  if(bd_user_input(m_bd, -1, BD_VK_ROOT_MENU) >= 0)
     return;
 
   CLog::Log(LOGDEBUG, "CDVDInputStreamBluray::OnMenu - root failed, trying explicit");
-  if(m_dll->bd_menu_call(m_bd, -1) <= 0)
+  if(bd_menu_call(m_bd, -1) <= 0)
     CLog::Log(LOGDEBUG, "CDVDInputStreamBluray::OnMenu - root failed");
 }
 
@@ -1116,10 +1106,10 @@ void CDVDInputStreamBluray::SkipStill()
   if(m_hold == HOLD_STILL)
   {
     m_hold = HOLD_HELD;
-    m_dll->bd_read_skip_still(m_bd);
+    bd_read_skip_still(m_bd);
 
     /* process all queued up events */
-    while (m_dll->bd_get_event(m_bd, &m_event))
+    while (bd_get_event(m_bd, &m_event))
       ProcessEvent();
   }
 }
@@ -1139,29 +1129,29 @@ void CDVDInputStreamBluray::SetupPlayerSettings()
     CLog::Log(LOGWARNING, "CDVDInputStreamBluray::Open - Blu-ray region must be set in setting, assuming region A");
     region = BLURAY_REGION_A;
   }
-  m_dll->bd_set_player_setting(m_bd, BLURAY_PLAYER_SETTING_REGION_CODE, region);
-  m_dll->bd_set_player_setting(m_bd, BLURAY_PLAYER_SETTING_PARENTAL, 99);
-  m_dll->bd_set_player_setting(m_bd, BLURAY_PLAYER_SETTING_PLAYER_PROFILE, BLURAY_PLAYER_PROFILE_5_v2_4);
-  m_dll->bd_set_player_setting(m_bd, BLURAY_PLAYER_SETTING_3D_CAP, 0xffffffff);
+  bd_set_player_setting(m_bd, BLURAY_PLAYER_SETTING_REGION_CODE, region);
+  bd_set_player_setting(m_bd, BLURAY_PLAYER_SETTING_PARENTAL, 99);
+  bd_set_player_setting(m_bd, BLURAY_PLAYER_SETTING_PLAYER_PROFILE, BLURAY_PLAYER_PROFILE_5_v2_4);
+  bd_set_player_setting(m_bd, BLURAY_PLAYER_SETTING_3D_CAP, 0xffffffff);
 
   std::string langCode;
   g_LangCodeExpander.ConvertToISO6392T(g_langInfo.GetDVDAudioLanguage(), langCode);
-  m_dll->bd_set_player_setting_str(m_bd, BLURAY_PLAYER_SETTING_AUDIO_LANG, langCode.c_str());
+  bd_set_player_setting_str(m_bd, BLURAY_PLAYER_SETTING_AUDIO_LANG, langCode.c_str());
 
   g_LangCodeExpander.ConvertToISO6392T(g_langInfo.GetDVDSubtitleLanguage(), langCode);
-  m_dll->bd_set_player_setting_str(m_bd, BLURAY_PLAYER_SETTING_PG_LANG, langCode.c_str());
+  bd_set_player_setting_str(m_bd, BLURAY_PLAYER_SETTING_PG_LANG, langCode.c_str());
 
   g_LangCodeExpander.ConvertToISO6392T(g_langInfo.GetDVDMenuLanguage(), langCode);
-  m_dll->bd_set_player_setting_str(m_bd, BLURAY_PLAYER_SETTING_MENU_LANG, langCode.c_str());
+  bd_set_player_setting_str(m_bd, BLURAY_PLAYER_SETTING_MENU_LANG, langCode.c_str());
 
   g_LangCodeExpander.ConvertToISO6391(g_langInfo.GetRegionLocale(), langCode);
-  m_dll->bd_set_player_setting_str(m_bd, BLURAY_PLAYER_SETTING_COUNTRY_CODE, langCode.c_str());
+  bd_set_player_setting_str(m_bd, BLURAY_PLAYER_SETTING_COUNTRY_CODE, langCode.c_str());
 
 #ifdef HAVE_LIBBLURAY_BDJ
   std::string cacheDir = CSpecialProtocol::TranslatePath("special://userdata/cache/bluray/cache");
   std::string persistentDir = CSpecialProtocol::TranslatePath("special://userdata/cache/bluray/persistent");
-  m_dll->bd_set_player_setting_str(m_bd, BLURAY_PLAYER_PERSISTENT_ROOT, persistentDir.c_str());
-  m_dll->bd_set_player_setting_str(m_bd, BLURAY_PLAYER_CACHE_ROOT, cacheDir.c_str());
+  bd_set_player_setting_str(m_bd, BLURAY_PLAYER_PERSISTENT_ROOT, persistentDir.c_str());
+  bd_set_player_setting_str(m_bd, BLURAY_PLAYER_CACHE_ROOT, cacheDir.c_str());
 #endif
 }
 
diff --git a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamBluray.h b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamBluray.h
index f742be153ce8..f1cb4459b8bb 100644
--- a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamBluray.h
+++ b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamBluray.h
@@ -40,7 +40,6 @@ extern "C"
 #define BD_EVENT_ENC_ERROR    -3
 
 class CDVDOverlayImage;
-class DllLibbluray;
 class IVideoPlayer;
 
 class CDVDInputStreamBluray
@@ -133,7 +132,6 @@ class CDVDInputStreamBluray
   static void OverlayInit (SPlane& plane, int w, int h);
 
   IVideoPlayer* m_player;
-  DllLibbluray* m_dll;
   BLURAY* m_bd;
   BLURAY_TITLE_INFO* m_title;
   uint32_t m_playlist;
diff --git a/xbmc/filesystem/BlurayDirectory.cpp b/xbmc/filesystem/BlurayDirectory.cpp
index 09e0bc284706..7c8cdab0f44f 100644
--- a/xbmc/filesystem/BlurayDirectory.cpp
+++ b/xbmc/filesystem/BlurayDirectory.cpp
@@ -24,7 +24,6 @@
 #include "utils/URIUtils.h"
 #include "utils/StringUtils.h"
 #include "URL.h"
-#include "DllLibbluray.h"
 #include "FileItem.h"
 #include "LangInfo.h"
 #include "video/VideoInfoTag.h"
@@ -39,14 +38,18 @@
 #include "File.h"
 #include "utils/RegExp.h"
 
+#include <libbluray/bluray.h>
+#include <libbluray/bluray-version.h>
+#include <libbluray/filesystem.h>
+#include <libbluray/log_control.h>
+
 namespace XFILE
 {
 
 #define MAIN_TITLE_LENGTH_PERCENT 70 /** Minimum length of main titles, based on longest title */
 
 CBlurayDirectory::CBlurayDirectory()
-  : m_dll(NULL)
-  , m_bd(NULL)
+  : m_bd(NULL)
 {
 }
 
@@ -59,11 +62,9 @@ void CBlurayDirectory::Dispose()
 {
   if(m_bd)
   {
-    m_dll->bd_close(m_bd);
+    bd_close(m_bd);
     m_bd = NULL;
   }
-  delete m_dll;
-  m_dll = NULL;
 }
 
 std::string CBlurayDirectory::GetBlurayTitle()
@@ -84,7 +85,7 @@ std::string CBlurayDirectory::GetDiscInfoString(DiscInfo info)
   {
     if (!m_blurayInitialized)
       return "";
-    const BLURAY_DISC_INFO* disc_info = m_dll->bd_get_disc_info(m_bd);
+    const BLURAY_DISC_INFO* disc_info = bd_get_disc_info(m_bd);
     if (!disc_info || !disc_info->bluray_detected)
       return "";
 
@@ -101,7 +102,7 @@ std::string CBlurayDirectory::GetDiscInfoString(DiscInfo info)
     if (!m_blurayInitialized)
       return "";
 
-    const BLURAY_DISC_INFO* disc_info = m_dll->bd_get_disc_info(m_bd);
+    const BLURAY_DISC_INFO* disc_info = bd_get_disc_info(m_bd);
     if (!disc_info || !disc_info->bluray_detected)
       return "";
 
@@ -161,11 +162,11 @@ void CBlurayDirectory::GetTitles(bool main, CFileItemList &items)
 
   if (!main || titleList.empty())
   {
-    uint32_t numTitles = m_dll->bd_get_titles(m_bd, TITLES_RELEVANT, 0);
+    uint32_t numTitles = bd_get_titles(m_bd, TITLES_RELEVANT, 0);
 
     for (uint32_t i = 0; i < numTitles; i++)
     {
-      BLURAY_TITLE_INFO* t = m_dll->bd_get_title_info(m_bd, i, 0);
+      BLURAY_TITLE_INFO* t = bd_get_title_info(m_bd, i, 0);
 
       if (!t)
       {
@@ -188,7 +189,7 @@ void CBlurayDirectory::GetTitles(bool main, CFileItemList &items)
       continue;
 
     items.Add(GetTitle(title, main ? g_localizeStrings.Get(25004) /* Main Title */ : g_localizeStrings.Get(25005) /* Title */));
-    m_dll->bd_free_title_info(title);
+    bd_free_title_info(title);
   }
 }
 
@@ -257,17 +258,10 @@ CURL CBlurayDirectory::GetUnderlyingCURL(const CURL& url)
 
 bool CBlurayDirectory::InitializeBluray(const std::string &root)
 {
-  m_dll = new DllLibbluray();
-  if (!m_dll->Load())
-  {
-    CLog::Log(LOGERROR, "CBlurayDirectory::InitializeBluray - failed to load dll");
-    return false;
-  }
-
-  m_dll->bd_set_debug_handler(CBlurayCallback::bluray_logger);
-  m_dll->bd_set_debug_mask(DBG_CRIT | DBG_BLURAY | DBG_NAV);
+  bd_set_debug_handler(CBlurayCallback::bluray_logger);
+  bd_set_debug_mask(DBG_CRIT | DBG_BLURAY | DBG_NAV);
 
-  m_bd = m_dll->bd_init();
+  m_bd = bd_init();
 
   if (!m_bd)
   {
@@ -277,9 +271,9 @@ bool CBlurayDirectory::InitializeBluray(const std::string &root)
 
   std::string langCode;
   g_LangCodeExpander.ConvertToISO6392T(g_langInfo.GetDVDMenuLanguage(), langCode);
-  m_dll->bd_set_player_setting_str(m_bd, BLURAY_PLAYER_SETTING_MENU_LANG, langCode.c_str());
+  bd_set_player_setting_str(m_bd, BLURAY_PLAYER_SETTING_MENU_LANG, langCode.c_str());
 
-  if (!m_dll->bd_open_files(m_bd, const_cast<std::string*>(&root), CBlurayCallback::dir_open, CBlurayCallback::file_open))
+  if (!bd_open_files(m_bd, const_cast<std::string*>(&root), CBlurayCallback::dir_open, CBlurayCallback::file_open))
   {
     CLog::Log(LOGERROR, "CBlurayDirectory::InitializeBluray - failed to open %s", CURL::GetRedacted(root).c_str());
     return false;
@@ -336,7 +330,7 @@ std::vector<BLURAY_TITLE_INFO*> CBlurayDirectory::GetUserPlaylists()
           {
             unsigned long int plNum = strtoul(playlist.c_str(), nullptr, 10);
 
-            BLURAY_TITLE_INFO* t = m_dll->bd_get_playlist_info(m_bd, static_cast<uint32_t>(plNum), 0);
+            BLURAY_TITLE_INFO* t = bd_get_playlist_info(m_bd, static_cast<uint32_t>(plNum), 0);
             if (t)
               userTitles.emplace_back(t);
           }
diff --git a/xbmc/filesystem/BlurayDirectory.h b/xbmc/filesystem/BlurayDirectory.h
index 998b8fe6deca..f933b1467e8c 100644
--- a/xbmc/filesystem/BlurayDirectory.h
+++ b/xbmc/filesystem/BlurayDirectory.h
@@ -24,7 +24,6 @@
 #include "FileItem.h"
 #include "URL.h"
 
-class  DllLibbluray;
 typedef struct bluray BLURAY;
 typedef struct bd_title_info BLURAY_TITLE_INFO;
 
@@ -58,7 +57,6 @@ class CBlurayDirectory: public XFILE::IDirectory
   CURL         GetUnderlyingCURL(const CURL& url);
   std::string  HexToString(const uint8_t * buf, int count);
   CURL          m_url;
-  DllLibbluray* m_dll;
   BLURAY*       m_bd;
   bool          m_blurayInitialized = false;
 };
diff --git a/xbmc/settings/DiscSettings.cpp b/xbmc/settings/DiscSettings.cpp
index 6941ec244e4f..717fb6dbc33c 100644
--- a/xbmc/settings/DiscSettings.cpp
+++ b/xbmc/settings/DiscSettings.cpp
@@ -23,7 +23,6 @@
 #include "DiscSettings.h"
 #include "Settings.h"
 #include "lib/Setting.h"
-#include "DllLibbluray.h"
 #include "ServiceBroker.h"
 #include "dialogs/GUIDialogKaiToast.h"
 #include "guilib/LocalizeStrings.h"
@@ -31,34 +30,17 @@
 #include "messaging/helpers/DialogOKHelper.h"
 #include "utils/Variant.h"
 
+#include <libbluray/bluray.h>
 #include <libbluray/bluray-version.h>
 
 using namespace KODI::MESSAGING;
 
-CDiscSettings::CDiscSettings(void)
-{
-
-  m_dll = new DllLibbluray;
-  if (!m_dll->Load())
-  {
-    delete m_dll;
-    m_dll = NULL;
-  }
-}
-
-
-CDiscSettings::~CDiscSettings()
-{
-  delete m_dll;
-}
-
 CDiscSettings& CDiscSettings::GetInstance()
 {
   static CDiscSettings sDiscSettings;
   return sDiscSettings;
 }
 
-
 void CDiscSettings::OnSettingChanged(std::shared_ptr<const CSetting> setting)
 {
 #if (BLURAY_VERSION >= BLURAY_VERSION_CODE(1,0,1))
@@ -72,8 +54,8 @@ void CDiscSettings::OnSettingChanged(std::shared_ptr<const CSetting> setting)
     int mode = std::static_pointer_cast<const CSettingInt>(setting)->GetValue();
     if (mode == BD_PLAYBACK_DISC_MENU)
     {
-      BLURAY* bd = m_dll->bd_init();
-      const BLURAY_DISC_INFO* info = m_dll->bd_get_disc_info(bd);
+      BLURAY* bd = bd_init();
+      const BLURAY_DISC_INFO* info = bd_get_disc_info(bd);
       if (!info->bdj_handled)
       {
         if (!info->libjvm_detected)
@@ -83,7 +65,7 @@ void CDiscSettings::OnSettingChanged(std::shared_ptr<const CSetting> setting)
         }
         CLog::Log(LOGDEBUG, "DiscSettings - Could not load the libbluray.jar.");
       }
-      m_dll->bd_close(bd);
+      bd_close(bd);
     }
   }
 #endif
diff --git a/xbmc/settings/DiscSettings.h b/xbmc/settings/DiscSettings.h
index 3e5bc40c20c3..ca66dbf4fdbc 100644
--- a/xbmc/settings/DiscSettings.h
+++ b/xbmc/settings/DiscSettings.h
@@ -32,8 +32,6 @@ enum BDPlaybackMode
 
 #include "settings/lib/ISettingCallback.h"
 
-class DllLibbluray;
-
 class CDiscSettings : public ISettingCallback
 {
 public:
@@ -42,10 +40,7 @@ class CDiscSettings : public ISettingCallback
   static CDiscSettings& GetInstance();
   void OnSettingChanged(std::shared_ptr<const CSetting> setting) override;
 
-protected:
-  CDiscSettings();
-  ~CDiscSettings() override;
-
-  DllLibbluray*       m_dll;
-
+private:
+  CDiscSettings() = default;
+  ~CDiscSettings() = default;
 };
