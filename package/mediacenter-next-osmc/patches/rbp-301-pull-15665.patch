From 8a805fd53fbcf5e87356a388ebdefdc638821ab1 Mon Sep 17 00:00:00 2001
From: ronie <ronie@kodi.tv>
Date: Mon, 4 Mar 2019 02:07:02 +0100
Subject: [PATCH 1/5] add python album scraper

---
 addons/metadata.generic.albums/LICENSE.txt    | 282 +++++++++++
 addons/metadata.generic.albums/addon.xml      |  20 +
 addons/metadata.generic.albums/changelog.txt  |  31 ++
 addons/metadata.generic.albums/default.py     |  32 ++
 .../metadata.generic.albums/lib/allmusic.py   | 122 +++++
 addons/metadata.generic.albums/lib/discogs.py |  59 +++
 .../metadata.generic.albums/lib/fanarttv.py   |  45 ++
 .../lib/musicbrainz.py                        | 154 ++++++
 addons/metadata.generic.albums/lib/nfo.py     |   8 +
 addons/metadata.generic.albums/lib/scraper.py | 442 ++++++++++++++++++
 .../metadata.generic.albums/lib/theaudiodb.py | 124 +++++
 addons/metadata.generic.albums/lib/utils.py   |  24 +
 .../resources/icon.png                        | Bin 0 -> 15700 bytes
 .../resource.language.en_gb/strings.po        |  85 ++++
 .../resources/settings.xml                    | 107 +++++
 15 files changed, 1535 insertions(+)
 create mode 100644 addons/metadata.generic.albums/LICENSE.txt
 create mode 100644 addons/metadata.generic.albums/addon.xml
 create mode 100644 addons/metadata.generic.albums/changelog.txt
 create mode 100644 addons/metadata.generic.albums/default.py
 create mode 100644 addons/metadata.generic.albums/lib/allmusic.py
 create mode 100644 addons/metadata.generic.albums/lib/discogs.py
 create mode 100644 addons/metadata.generic.albums/lib/fanarttv.py
 create mode 100644 addons/metadata.generic.albums/lib/musicbrainz.py
 create mode 100644 addons/metadata.generic.albums/lib/nfo.py
 create mode 100644 addons/metadata.generic.albums/lib/scraper.py
 create mode 100644 addons/metadata.generic.albums/lib/theaudiodb.py
 create mode 100644 addons/metadata.generic.albums/lib/utils.py
 create mode 100644 addons/metadata.generic.albums/resources/icon.png
 create mode 100644 addons/metadata.generic.albums/resources/language/resource.language.en_gb/strings.po
 create mode 100644 addons/metadata.generic.albums/resources/settings.xml

diff --git a/addons/metadata.generic.albums/LICENSE.txt b/addons/metadata.generic.albums/LICENSE.txt
new file mode 100644
index 000000000000..4f8e8eb30cc7
--- /dev/null
+++ b/addons/metadata.generic.albums/LICENSE.txt
@@ -0,0 +1,282 @@
+
+		    GNU GENERAL PUBLIC LICENSE
+		       Version 2, June 1991
+
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc.
+                       59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+			    Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it.  (Some other Free Software Foundation software is covered by
+the GNU Library General Public License instead.)  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must show them these terms so they know their
+rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary.  To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at all.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+		    GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License applies to any program or other work which contains
+a notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License.  The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language.  (Hereinafter, translation is included without limitation in
+the term "modification".)  Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the
+Program (independent of having been made by running the Program).
+Whether that is true depends on what the Program does.
+
+  1. You may copy and distribute verbatim copies of the Program's
+source code as you receive it, in any medium, provided that you
+conspicuously and appropriately publish on each copy an appropriate
+copyright notice and disclaimer of warranty; keep intact all the
+notices that refer to this License and to the absence of any warranty;
+and give any other recipients of the Program a copy of this License
+along with the Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a fee.
+
+  2. You may modify your copy or copies of the Program or any portion
+of it, thus forming a work based on the Program, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) You must cause the modified files to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    b) You must cause any work that you distribute or publish, that in
+    whole or in part contains or is derived from the Program or any
+    part thereof, to be licensed as a whole at no charge to all third
+    parties under the terms of this License.
+
+    c) If the modified program normally reads commands interactively
+    when run, you must cause it, when started running for such
+    interactive use in the most ordinary way, to print or display an
+    announcement including an appropriate copyright notice and a
+    notice that there is no warranty (or else, saying that you provide
+    a warranty) and that users may redistribute the program under
+    these conditions, and telling the user how to view a copy of this
+    License.  (Exception: if the Program itself is interactive but
+    does not normally print such an announcement, your work based on
+    the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
+
+In addition, mere aggregation of another work not based on the Program
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+    a) Accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of Sections
+    1 and 2 above on a medium customarily used for software interchange; or,
+
+    b) Accompany it with a written offer, valid for at least three
+    years, to give any third party, for a charge no more than your
+    cost of physically performing source distribution, a complete
+    machine-readable copy of the corresponding source code, to be
+    distributed under the terms of Sections 1 and 2 above on a medium
+    customarily used for software interchange; or,
+
+    c) Accompany it with the information you received as to the offer
+    to distribute corresponding source code.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form with such
+    an offer, in accord with Subsection b above.)
+
+The source code for a work means the preferred form of the work for
+making modifications to it.  For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable.  However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License.  Any attempt
+otherwise to copy, modify, sublicense or distribute the Program is
+void, and will automatically terminate your rights under this License.
+However, parties who have received copies, or rights, from you under
+this License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+  5. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Program or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Program.
+
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded.  In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+  9. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of this License which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+this License, you may choose any version ever published by the Free Software
+Foundation.
+
+  10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+			    NO WARRANTY
+
+  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+		     END OF TERMS AND CONDITIONS
+-------------------------------------------------------------------------
diff --git a/addons/metadata.generic.albums/addon.xml b/addons/metadata.generic.albums/addon.xml
new file mode 100644
index 000000000000..acdc7b4f16c7
--- /dev/null
+++ b/addons/metadata.generic.albums/addon.xml
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
+<addon id="metadata.generic.albums" name="Generic Album Scraper" version="1.0.7" provider-name="Team Kodi">
+	<requires>
+		<import addon="xbmc.python" version="3.0.0"/>
+		<import addon="xbmc.metadata" version="2.1.0"/>
+	</requires>
+	<extension point="xbmc.metadata.scraper.albums" library="default.py"/>
+	<extension point="xbmc.addon.metadata">
+		<summary lang="en_GB">Generic music scraper for albums</summary>
+		<description lang="en_GB">Searches for album information and artwork across multiple websites.</description>
+		<platform>all</platform>
+		<license>GPL-2.0-only</license>
+		<forum>https://forum.kodi.tv/showthread.php?tid=351570</forum>
+		<source>https://gitlab.com/ronie/metadata.generic.albums/</source>
+		<assets>
+			<icon>resources/icon.png</icon>
+		</assets>
+		<news>- first release</news>
+	</extension>
+</addon>
diff --git a/addons/metadata.generic.albums/changelog.txt b/addons/metadata.generic.albums/changelog.txt
new file mode 100644
index 000000000000..9d67dccb9f4a
--- /dev/null
+++ b/addons/metadata.generic.albums/changelog.txt
@@ -0,0 +1,31 @@
+v1.0.7
+- fix crash when album type is absent or empty in the api response
+- filter inaccurate search results from discogs
+- filter inaccurate albumdetails from allmusic
+- filter blank allmusic album thumb
+- consider both score and releasedate when selecting the top release from releasegroup
+
+v1.0.6
+- improve custom scoring
+- add support for original release date
+- fix release date from musicbrainz
+- use releasegroup id to fetch coverartarchive artwork
+- only use one release from each releasegroup
+- provide detailed search results
+
+v1.0.5
+- don't set releasetype
+- fix types from musicbrainz
+- add release status
+
+v1.0.4
+- catch time-outs
+
+v1.0.3
+- replace beautifulsoup with regex
+
+v1.0.2
+- replace requests with urllib
+
+v1.0.1
+- release
diff --git a/addons/metadata.generic.albums/default.py b/addons/metadata.generic.albums/default.py
new file mode 100644
index 000000000000..85aeb90dff4a
--- /dev/null
+++ b/addons/metadata.generic.albums/default.py
@@ -0,0 +1,32 @@
+# -*- coding: utf-8 -*-
+import sys
+from urllib.parse import parse_qsl
+from lib.scraper import Scraper
+
+
+class Main:
+    def __init__(self):
+        action, key, artist, album, url, nfo, settings = self._parse_argv()
+        Scraper(action, key, artist, album, url, nfo, settings)
+
+    def _parse_argv(self):
+        params = dict(parse_qsl(sys.argv[2].lstrip('?')))
+        # actions: resolveid, find, getdetails, NfoUrl
+        action = params['action']
+        # key: musicbrainz id
+        key = params.get('key', '')
+        # artist: artistname
+        artist = params.get('artist', '')
+        # album: albumtitle
+        album = params.get('title', '')
+        # url: provided by the scraper on previous run
+        url = params.get('url', '')
+        # nfo: musicbrainz url from .nfo file
+        nfo = params.get('nfo', '')
+        # path specific settings
+        settings = params.get('pathSettings', {})
+        return action, key, artist, album, url, nfo, settings
+
+
+if (__name__ == '__main__'):
+    Main()
diff --git a/addons/metadata.generic.albums/lib/allmusic.py b/addons/metadata.generic.albums/lib/allmusic.py
new file mode 100644
index 000000000000..ede10368c0ed
--- /dev/null
+++ b/addons/metadata.generic.albums/lib/allmusic.py
@@ -0,0 +1,122 @@
+# -*- coding: utf-8 -*-
+
+import datetime
+import difflib
+import time
+import re
+
+# not used for 'find', but needed for 'getdetails'
+def allmusic_albumfind(data, artist, album):
+    data = data.decode('utf-8')
+    albums = []
+    albumlist = re.findall('class="album">\s*(.*?)\s*</li', data, re.S)
+    for item in albumlist:
+        albumdata = {}
+        albumartist = re.search('class="artist">.*?>(.*?)</a', item, re.S)
+        if albumartist:
+            albumdata['artist'] = albumartist.group(1)
+        else: # classical album
+            continue
+        albumname = re.search('class="title">.*?>(.*?)</a', item, re.S)
+        if albumname:
+            albumdata['album'] = albumname.group(1)
+        else: # not likely to happen, but just in case
+            continue
+        # filter inaccurate results
+        artistmatch = difflib.SequenceMatcher(None, artist.decode('utf-8').lower(), albumdata['artist'].lower()).ratio()
+        albummatch = difflib.SequenceMatcher(None, album.decode('utf-8').lower(), albumdata['album'].lower()).ratio()
+        if artistmatch > 0.90 and albummatch > 0.90:
+            albumurl = re.search('class="title">\s*<a href="(.*?)"', item)
+            if albumurl:
+                albumdata['url'] = albumurl.group(1)
+            else: # not likely to happen, but just in case
+                continue
+            albumyear = re.search('class="year">\s*(.*?)\s*<', item, re.S)
+            if albumyear:
+                albumdata['year'] = albumyear.group(1)
+            else:
+                albumdata['year'] = ''
+            albumthumb = re.search('img src="(.*?)"', item)
+            if albumthumb:
+                albumdata['thumb'] = albumthumb.group(1)
+            else:
+                albumdata['thumb'] = ''
+            albums.append(albumdata)
+    return albums
+
+def allmusic_albumdetails(data):
+    data = data.decode('utf-8')
+    albumdata = {}
+    releasedata = re.search('class="release-date">.*?<span>(.*?)<', data, re.S)
+    if releasedata:
+        dateformat = releasedata.group(1)
+        if len(dateformat) > 4:
+            try:
+                # month day, year
+                albumdata['releasedate'] = datetime.datetime(*(time.strptime(dateformat, '%B %d, %Y')[0:3])).strftime('%Y-%m-%d')
+            except:
+                # month, year
+                albumdata['releasedate'] = datetime.datetime(*(time.strptime(dateformat, '%B, %Y')[0:3])).strftime('%Y-%m')
+        else:
+            # year
+            albumdata['releasedate'] = dateformat
+    yeardata = re.search('class="year".*?>\s*(.*?)\s*<', data)
+    if yeardata:
+        albumdata['year'] = yeardata.group(1)
+    genredata = re.search('class="genre">.*?">(.*?)<', data, re.S)
+    if genredata:
+        albumdata['genre'] = genredata.group(1)
+    styledata = re.search('class="styles">.*?div>\s*(.*?)\s*</div', data, re.S)
+    if styledata:
+        stylelist = re.findall('">(.*?)<', styledata.group(1))
+        if stylelist:
+            albumdata['styles'] =  ' / '.join(stylelist)
+    mooddata = re.search('class="moods">.*?div>\s*(.*?)\s*</div', data, re.S)
+    if mooddata:
+        moodlist = re.findall('">(.*?)<', mooddata.group(1))
+        if moodlist:
+            albumdata['moods'] =  ' / '.join(moodlist)
+    themedata = re.search('class="themes">.*?div>\s*(.*?)\s*</div', data, re.S)
+    if themedata:
+        themelist = re.findall('">(.*?)<', themedata.group(1))
+        if themelist:
+            albumdata['themes'] =  ' / '.join(themelist)
+    ratingdata = re.search('itemprop="ratingValue">\s*(.*?)\s*</div', data)
+    if ratingdata:
+        albumdata['rating'] = ratingdata.group(1)
+    albumdata['votes'] = ''
+    titledata = re.search('class="album-title".*?>\s*(.*?)\s*<', data, re.S)
+    if titledata:
+        albumdata['album'] = titledata.group(1)
+    labeldata = re.search('class="label-catalog".*?<.*?>(.*?)<', data, re.S)
+    if labeldata:
+        albumdata['label'] = labeldata.group(1)
+    artistdata = re.search('class="album-artist".*?<span.*?>\s*(.*?)\s*</span', data, re.S)
+    if artistdata:
+        artistlist = re.findall('">(.*?)<', artistdata.group(1))
+        artists = []
+        for item in artistlist:
+            artistinfo = {}
+            artistinfo['artist'] = item
+            artists.append(artistinfo)
+        if artists:
+            albumdata['artist'] = artists
+            albumdata['artist_description'] = ' / '.join(artistlist)
+    thumbsdata = re.search('class="album-contain".*?src="(.*?)"', data, re.S)
+    if thumbsdata:
+        thumbs = []
+        thumbdata = {}
+        thumb = thumbsdata.group(1).rstrip('?partner=allrovi.com')
+        # ignore internal blank thumb
+        if thumb.startswith('http'):
+            # 0=largest / 1=75 / 2=150 / 3=250 / 4=400 / 5=500 / 6=1080
+            if thumb.endswith('f=5'):
+                thumbdata['image'] = thumb.replace('f=5', 'f=0')
+                thumbdata['preview'] = thumb.replace('f=5', 'f=2')
+            else:
+                thumbdata['image'] = thumb
+                thumbdata['preview'] = thumb
+            thumbdata['aspect'] = 'thumb'
+            thumbs.append(thumbdata)
+            albumdata['thumb'] = thumbs
+    return albumdata
diff --git a/addons/metadata.generic.albums/lib/discogs.py b/addons/metadata.generic.albums/lib/discogs.py
new file mode 100644
index 000000000000..09730ef0fc7c
--- /dev/null
+++ b/addons/metadata.generic.albums/lib/discogs.py
@@ -0,0 +1,59 @@
+# -*- coding: utf-8 -*-
+import difflib
+
+def discogs_albumfind(data, artist, album):
+    albums = []
+    masters = []
+    # sort results by lowest release id (first version of a release)
+    releases = sorted(data.get('results',[]), key=lambda k: k['id']) 
+    for item in releases:
+        masterid = item['master_id']
+        # we are not interested in multiple versions that belong to the same master release
+        if masterid not in masters:
+            masters.append(masterid)
+            albumdata = {}
+            albumdata['artist'] = item['title'].split(' - ',1)[0]
+            albumdata['album'] = item['title'].split(' - ',1)[1]
+            albumdata['artist_description'] = item['title'].split(' - ',1)[0]
+            albumdata['year'] = str(item.get('year', ''))
+            albumdata['label'] = item['label'][0]
+            albumdata['thumb'] = item['thumb']
+            albumdata['dcalbumid'] = item['id']
+            # discogs does not provide relevance, use our own
+            artistmatch = difflib.SequenceMatcher(None, artist.lower(), albumdata['artist'].lower()).ratio()
+            albummatch = difflib.SequenceMatcher(None, album.lower(), albumdata['album'].lower()).ratio()
+            artistscore = round(artistmatch, 2)
+            albumscore = round(albummatch, 2)
+            score = round(((artistscore + albumscore) / 2), 2)
+            albumdata['relevance'] = str(score)
+            albums.append(albumdata)
+    return albums
+
+def discogs_albumdetails(data):
+    albumdata = {}
+    albumdata['album'] = data['title']
+    if 'styles' in data:
+        albumdata['styles'] = ' / '.join(data['styles'])
+    albumdata['genres'] = ' / '.join(data['genres'])
+    albumdata['year'] = str(data['year'])
+    albumdata['label'] = data['labels'][0]['name']
+    artists = []
+    for artist in data['artists']:
+        artistdata = {}
+        artistdata['artist'] = artist['name']
+        artists.append(artistdata)
+    albumdata['artist'] = artists
+    albumdata['artist_description'] = data['artists_sort']
+    albumdata['rating'] = str(int((float(data['community']['rating']['average']) * 2) + 0.5))
+    albumdata['votes'] = str(data['community']['rating']['count'])
+    if 'images' in data:
+        thumbs = []
+        for thumb in data['images']:
+            thumbdata = {}
+            thumbdata['image'] = thumb['uri']
+            thumbdata['preview'] = thumb['uri150']
+            # not accurate: discogs can provide any art type, there is no indication if it is an album front cover (thumb)
+            thumbdata['aspect'] = 'thumb'
+            thumbs.append(thumbdata)
+        albumdata['thumb'] = thumbs
+    return albumdata
diff --git a/addons/metadata.generic.albums/lib/fanarttv.py b/addons/metadata.generic.albums/lib/fanarttv.py
new file mode 100644
index 000000000000..172494507898
--- /dev/null
+++ b/addons/metadata.generic.albums/lib/fanarttv.py
@@ -0,0 +1,45 @@
+# -*- coding: utf-8 -*-
+
+def fanarttv_albumart(data):
+    if 'albums' in data:
+        albumdata = {}
+        thumbs = []
+        extras = []
+        discs = {}
+        for mbid, art in data['albums'].items():
+            if 'albumcover' in art:
+                for thumb in art['albumcover']:
+                    thumbdata = {}
+                    thumbdata['image'] = thumb['url']
+                    thumbdata['preview'] = thumb['url'].replace('/fanart/', '/preview/')
+                    thumbdata['aspect'] = 'thumb'
+                    thumbs.append(thumbdata)
+            if 'cdart' in art:
+                albumdata['discart'] = art['cdart'][0]['url']
+                for cdart in art['cdart']:
+                    extradata = {}
+                    extradata['image'] = cdart['url']
+                    extradata['preview'] = cdart['url'].replace('/fanart/', '/preview/')
+                    extradata['aspect'] = 'discart'
+                    extras.append(extradata)
+                    # support for multi-disc albums
+                    multidata = {}
+                    num = cdart['disc']
+                    multidata['image'] = cdart['url']
+                    multidata['preview'] = cdart['url'].replace('/fanart/', '/preview/')
+                    multidata['aspect'] = 'discart%s' % num
+                    if not num in discs:
+                        discs[num] = [multidata]
+                    else:
+                        discs[num].append(multidata)
+        if thumbs:
+            albumdata['thumb'] = thumbs
+        # only return for multi-discs, not single discs
+        if len(discs) > 1:
+            albumdata['multidiscart'] = discs
+            for k, v in discs.items():
+                for item in v:
+                    extras.append(item)
+        if extras:
+            albumdata['extras'] = extras
+        return albumdata
diff --git a/addons/metadata.generic.albums/lib/musicbrainz.py b/addons/metadata.generic.albums/lib/musicbrainz.py
new file mode 100644
index 000000000000..0b7c9a36f69e
--- /dev/null
+++ b/addons/metadata.generic.albums/lib/musicbrainz.py
@@ -0,0 +1,154 @@
+# -*- coding: utf-8 -*-
+
+def musicbrainz_albumfind(data, artist, album):
+    albums = []
+    # count how often each releasegroup occurs in the release results
+    # keep track of the release with the highest score and earliest releasedate in each releasegroup
+    releasegroups = {}
+    for item in data.get('releases'):
+        mbid = item['id']
+        score = item.get('score', 0)
+        releasegroup = item['release-group']['id']
+        if 'date' in item and item['date']:
+            date = item['date'].replace('-','')
+            if len(date) == 4:
+                date = date + '9999'
+        else:
+            date = '99999999'
+        if releasegroup in releasegroups:
+            count = releasegroups[releasegroup][0] + 1
+            topmbid = releasegroups[releasegroup][1]
+            topdate = releasegroups[releasegroup][2]
+            topscore = releasegroups[releasegroup][3]
+            if date < topdate and score >= topscore:
+                topdate = date
+                topmbid = mbid
+            releasegroups[releasegroup] = [count, topmbid, topdate, topscore]
+        else:
+            releasegroups[releasegroup] = [1, mbid, date, score]
+    if releasegroups:
+        # get the highest releasegroup count
+        maxcount = max(releasegroups.values())[0]
+        # get the releasegroup(s) that match this highest value
+        topgroups = [k for k, v in releasegroups.items() if v[0] == maxcount]
+    for item in data.get('releases'):
+        # only use the 'top' release from each releasegroup
+        if item['id'] != releasegroups[item['release-group']['id']][1]:
+            continue
+        albumdata = {}
+        if item.get('artist-credit'):
+            artists = []
+            artistdisp = ""
+            for artist in item['artist-credit']:
+                artistdata = {}
+                artistdata['artist'] = artist['artist']['name']
+                artistdata['mbartistid'] = artist['artist']['id']
+                artistdata['artistsort'] = artist['artist']['sort-name']
+                artistdisp = artistdisp + artist['artist']['name']
+                artistdisp = artistdisp + artist.get('joinphrase', '')
+                artists.append(artistdata)
+            albumdata['artist'] = artists
+            albumdata['artist_description'] = artistdisp
+        if item.get('label-info','') and item['label-info'][0].get('label','') and item['label-info'][0]['label'].get('name',''):
+            albumdata['label'] = item['label-info'][0]['label']['name']
+        albumdata['album'] = item['title']
+        if item.get('date',''):
+            albumdata['year'] = item['date'][:4]
+        albumdata['thumb'] = 'https://coverartarchive.org/release-group/%s/front-250' % item['release-group']['id']
+        if item.get('label-info','') and item['label-info'][0].get('label','') and item['label-info'][0]['label'].get('name',''):
+            albumdata['label'] = item['label-info'][0]['label']['name']
+        if item.get('status',''):
+            albumdata['releasestatus'] = item['status']
+        albumdata['type'] = item['release-group'].get('primary-type')
+        albumdata['mbalbumid'] = item['id']
+        albumdata['mbreleasegroupid'] = item['release-group']['id']
+        if item.get('score'):
+            releasescore = item['score'] / 100.0
+            # if the release is in the releasegroup with most releases, it is considered the most accurate one
+            # (this also helps with prefering official releases over bootlegs, assuming there are more variations of an official release than of a bootleg)
+            if item['release-group']['id'] not in topgroups:
+                releasescore -= 0.001
+            # if the release is an album, prefer it over singles/ep's
+            # (this needs to be the double of the above, as me might have just given the album a lesser score if the single happened to be in the topgroup)
+            if item['release-group'].get('primary-type') != 'Album':
+                releasescore -= 0.002
+            albumdata['relevance'] = str(releasescore)
+        albums.append(albumdata)
+    return albums
+
+def musicbrainz_albumdetails(data):
+    albumdata = {}
+    albumdata['album'] = data['title']
+    albumdata['mbalbumid'] = data['id']
+    if data.get('release-group',''):
+        albumdata['mbreleasegroupid'] = data['release-group']['id']
+        if data['release-group']['rating'] and data['release-group']['rating']['value']:
+            albumdata['rating'] = str(int((float(data['release-group']['rating']['value']) * 2) + 0.5))
+            albumdata['votes'] = str(data['release-group']['rating']['votes-count'])
+        if data['release-group'].get('primary-type'):
+            albumtypes = [data['release-group']['primary-type']] + data['release-group']['secondary-types']
+            albumdata['type'] = ' / '.join(albumtypes)
+            if 'Compilation' in albumtypes:
+                albumdata['compilation'] = 'true'
+        if data['release-group'].get('first-release-date',''):
+            albumdata['originaldate'] = data['release-group']['first-release-date']
+    if data.get('release-events',''):
+        albumdata['year'] = data['release-events'][0]['date'][:4]
+        albumdata['releasedate'] = data['release-events'][0]['date']
+    if data.get('label-info','') and data['label-info'][0].get('label','') and data['label-info'][0]['label'].get('name',''):
+        albumdata['label'] = data['label-info'][0]['label']['name']
+    if data.get('status',''):
+        albumdata['releasestatus'] = data['status']
+    if data.get('artist-credit'):
+        artists = []
+        artistdisp = ''
+        for artist in data['artist-credit']:
+            artistdata = {}
+            artistdata['artist'] = artist['name']
+            artistdata['mbartistid'] = artist['artist']['id']
+            artistdata['artistsort'] = artist['artist']['sort-name']
+            artistdisp = artistdisp + artist['name']
+            artistdisp = artistdisp + artist.get('joinphrase', '')
+            artists.append(artistdata)
+        albumdata['artist'] = artists
+        albumdata['artist_description'] = artistdisp
+    return albumdata
+
+def musicbrainz_albumart(data):
+    albumdata = {}
+    thumbs = []
+    extras = []
+    for item in data['images']:
+        if 'Front' in item['types']:
+            thumbdata = {}
+            thumbdata['image'] = item['image']
+            thumbdata['preview'] = item['thumbnails']['small']
+            thumbdata['aspect'] = 'thumb'
+            thumbs.append(thumbdata)
+        if 'Back' in item['types']:
+            albumdata['back'] = item['image']
+            backdata = {}
+            backdata['image'] = item['image']
+            backdata['preview'] = item['thumbnails']['small']
+            backdata['aspect'] = 'back'
+            extras.append(backdata)
+        if 'Medium' in item['types']:
+            albumdata['discart'] = item['image']
+            discartdata = {}
+            discartdata['image'] = item['image']
+            discartdata['preview'] = item['thumbnails']['small']
+            discartdata['aspect'] = 'discart'
+            extras.append(discartdata)
+        # exculde spine+back images
+        if 'Spine' in item['types'] and len(item['types']) == 1:
+            albumdata['spine'] = item['image']
+            spinedata = {}
+            spinedata['image'] = item['image']
+            spinedata['preview'] = item['thumbnails']['small']
+            spinedata['aspect'] = 'spine'
+            extras.append(spinedata)
+    if thumbs:
+        albumdata['thumb'] = thumbs
+    if extras:
+        albumdata['extras'] = extras
+    return albumdata
diff --git a/addons/metadata.generic.albums/lib/nfo.py b/addons/metadata.generic.albums/lib/nfo.py
new file mode 100644
index 000000000000..ef996ce52b74
--- /dev/null
+++ b/addons/metadata.generic.albums/lib/nfo.py
@@ -0,0 +1,8 @@
+# -*- coding: utf-8 -*-
+
+import re
+
+def nfo_geturl(data):
+    result = re.search('https://musicbrainz.org/(ws/2/)?release/([0-9a-z\-]*)', data)
+    if result:
+        return result.group(2)
diff --git a/addons/metadata.generic.albums/lib/scraper.py b/addons/metadata.generic.albums/lib/scraper.py
new file mode 100644
index 000000000000..7a05a11c581c
--- /dev/null
+++ b/addons/metadata.generic.albums/lib/scraper.py
@@ -0,0 +1,442 @@
+# -*- coding: utf-8 -*-
+
+import json
+import socket
+import sys
+import time
+import urllib.parse
+import urllib.request
+import _strptime # https://bugs.python.org/issue7980
+from threading import Thread
+from urllib.error import HTTPError, URLError
+from socket import timeout
+import xbmc
+import xbmcgui
+import xbmcplugin
+import xbmcaddon
+from .theaudiodb import theaudiodb_albumdetails
+from .musicbrainz import musicbrainz_albumfind
+from .musicbrainz import musicbrainz_albumdetails
+from .musicbrainz import musicbrainz_albumart
+from .discogs import discogs_albumfind
+from .discogs import discogs_albumdetails
+from .allmusic import allmusic_albumfind
+from .allmusic import allmusic_albumdetails
+from .nfo import nfo_geturl
+from .fanarttv import fanarttv_albumart
+from .utils import *
+
+ADDONID = xbmcaddon.Addon().getAddonInfo('id')
+ADDONNAME = xbmcaddon.Addon().getAddonInfo('name')
+ADDONVERSION = xbmcaddon.Addon().getAddonInfo('version')
+
+
+def log(txt):
+    message = '%s: %s' % (ADDONID, txt)
+    xbmc.log(msg=message, level=xbmc.LOGDEBUG)
+
+def get_data(url, jsonformat):
+    try:
+        headers = {}
+        headers['User-Agent'] = '%s/%s ( http://kodi.tv )' % (ADDONNAME, ADDONVERSION)
+        req = urllib.request.Request(url, headers=headers)
+        resp = urllib.request.urlopen(req, timeout=5)
+        respdata = resp.read()
+    except URLError as e:
+        log('URLError: %s - %s' % (e.reason, url))
+        return
+    except HTTPError as e:
+        log('HTTPError: %s - %s' % (e.reason, url))
+        return
+    except socket.timeout as e:
+        log('socket: %s - %s' % (e, url))
+        return
+    if resp.getcode() == 503:
+        log('exceeding musicbrainz api limit')
+        return
+    elif resp.getcode() == 429:
+        log('exceeding discogs api limit')
+        return
+    if jsonformat:
+        respdata = json.loads(respdata)
+    return respdata
+
+
+class Scraper():
+    def __init__(self, action, key, artist, album, url, nfo, settings):
+        # get start time in milliseconds
+        self.start = int(round(time.time() * 1000))
+        # parse path settings
+        self.parse_settings(settings)
+        # return a dummy result, this is just for backward compitability with xml based scrapers https://github.com/xbmc/xbmc/pull/11632
+        if action == 'resolveid':
+            result = self.resolve_mbid(key)
+            if result:
+                self.return_resolved(result)
+        # search for artist name / album title matches
+        elif action == 'find':
+            # both musicbrainz and discogs allow 1 api per second. this query requires 1 musicbrainz api call and optionally 1 discogs api call
+            RATELIMIT = 1000
+            # try musicbrainz first
+            result = self.find_album(artist, album, 'musicbrainz')
+            if result:
+                self.return_search(result)
+            # fallback to discogs
+            else:
+                result = self.find_album(artist, album, 'discogs')
+                if result:
+                    self.return_search(result)
+        # return info using artistname / albumtitle / id's
+        elif action == 'getdetails':
+            details = {}
+            url = json.loads(url)
+            artist = url['artist'].encode('utf-8')
+            album = url['album'].encode('utf-8')
+            mbid = url.get('mbalbumid', '')
+            dcid = url.get('dcalbumid', '')
+            mbreleasegroupid = url.get('mbreleasegroupid', '')
+            threads = []
+            # we have a musicbrainz album id, but no musicbrainz releasegroupid
+            if mbid and not mbreleasegroupid:
+                # musicbrainz allows 1 api per second.
+                RATELIMIT = 1000
+                for item in [[mbid, 'musicbrainz']]:
+                    thread = Thread(target = self.get_details, args = (item[0], item[1], details))
+                    threads.append(thread)
+                    thread.start()
+                # wait for musicbrainz to finish
+                threads[0].join()
+                # check if we have a result:
+                if 'musicbrainz' in details:
+                    artist = details['musicbrainz']['artist_description'].encode('utf-8')
+                    album = details['musicbrainz']['album'].encode('utf-8')
+                    mbreleasegroupid = details['musicbrainz']['mbreleasegroupid']
+                    scrapers = [[mbreleasegroupid, 'theaudiodb'], [mbreleasegroupid, 'fanarttv'], [mbreleasegroupid, 'coverarchive'], [[artist, album], 'allmusic']]
+                    if self.usediscogs == 1:
+                        scrapers.append([[artist, album, dcid], 'discogs'])
+                        # discogs allows 1 api per second. this query requires 2 discogs api calls
+                        RATELIMIT = 2000
+                    for item in scrapers:
+                        thread = Thread(target = self.get_details, args = (item[0], item[1], details))
+                        threads.append(thread)
+                        thread.start()
+            # we have a discogs id and artistname and albumtitle
+            elif dcid:
+                # discogs allows 1 api per second. this query requires 1 discogs api call
+                RATELIMIT = 1000
+                for item in [[[artist, album, dcid], 'discogs'], [[artist, album], 'allmusic']]:
+                    thread = Thread(target = self.get_details, args = (item[0], item[1], details))
+                    threads.append(thread)
+                    thread.start()
+            # we have musicbrainz album id, musicbrainz releasegroupid, artistname and albumtitle
+            else:
+                # musicbrainz allows 1 api per second.
+                RATELIMIT = 1000
+                scrapers = [[mbid, 'musicbrainz'], [mbreleasegroupid, 'theaudiodb'], [mbreleasegroupid, 'fanarttv'], [mbreleasegroupid, 'coverarchive'], [[artist, album], 'allmusic']]
+                if self.usediscogs == 1:
+                    scrapers.append([[artist, album, dcid], 'discogs'])
+                    # discogs allows 1 api per second. this query requires 2 discogs api calls
+                    RATELIMIT = 2000
+                for item in scrapers:
+                    thread = Thread(target = self.get_details, args = (item[0], item[1], details))
+                    threads.append(thread)
+                    thread.start()
+            for thread in threads:
+                thread.join()
+            result = self.compile_results(details)
+            if result:
+                self.return_details(result)
+        # extract the mbid from the provided musicbrainz url
+        elif action == 'NfoUrl':
+            mbid = nfo_geturl(nfo)
+            if mbid:
+                # create a dummy item
+                result = self.resolve_mbid(mbid)
+                if result:
+                    self.return_nfourl(result)
+        # get end time in milliseconds
+        self.end = int(round(time.time() * 1000))
+        # handle musicbrainz and discogs ratelimit
+        if action == 'find' or action == 'getdetails':
+            if self.end - self.start < RATELIMIT:
+                # wait max 2 seconds
+                diff = RATELIMIT - (self.end - self.start)
+                xbmc.sleep(diff)
+        xbmcplugin.endOfDirectory(int(sys.argv[1]))
+
+    def parse_settings(self, data):
+        settings = json.loads(data)
+        # note: path settings are taken from the db, they may not reflect the current settings.xml file
+        self.genre = settings['genre']
+        self.lang = settings['lang']
+        self.mood = settings['mood']
+        self.rating = settings['rating']
+        self.style = settings['style']
+        self.theme = settings['theme']
+        self.usediscogs = settings['usediscogs']
+
+    def resolve_mbid(self, mbid):
+        # create dummy result
+        item = {}
+        item['artist_description'] = ''
+        item['album'] = ''
+        item['mbalbumid'] = mbid
+        item['mbreleasegroupid'] = ''
+        return item
+
+    def find_album(self, artist, album, site):
+        json = True
+        # musicbrainz
+        if site == 'musicbrainz':
+            url = MUSICBRAINZURL % (MUSICBRAINZSEARCH % (urllib.parse.quote_plus(album), urllib.parse.quote_plus(artist), urllib.parse.quote_plus(artist)))
+            scraper = musicbrainz_albumfind
+        # discogs
+        elif site == 'discogs':
+            url = DISCOGSURL % (DISCOGSSEARCH % (urllib.parse.quote_plus(album), urllib.parse.quote_plus(artist), DISCOGSKEY , DISCOGSSECRET))
+            scraper = discogs_albumfind
+        # allmusic
+        elif site == 'allmusic':
+            url = ALLMUSICURL % (ALLMUSICSEARCH % (urllib.parse.quote_plus(artist), urllib.parse.quote_plus(album)))
+            scraper = allmusic_albumfind
+            json = False
+        result = get_data(url, json)
+        if not result:
+            return
+        albumresults = scraper(result, artist, album)
+        return albumresults
+
+    def get_details(self, param, site, details):
+        json = True
+        # theaudiodb
+        if site == 'theaudiodb':
+            url = AUDIODBURL % (AUDIODBKEY, AUDIODBDETAILS % param)
+            albumscraper = theaudiodb_albumdetails
+        # musicbrainz
+        elif site == 'musicbrainz':
+            url = MUSICBRAINZURL % (MUSICBRAINZDETAILS % param)
+            albumscraper = musicbrainz_albumdetails
+        # fanarttv
+        elif site == 'fanarttv':
+            url = FANARTVURL % (param, FANARTVKEY)
+            albumscraper = fanarttv_albumart
+       # coverarchive
+        elif site == 'coverarchive':
+            url = MUSICBRAINZART % (param)
+            albumscraper = musicbrainz_albumart
+        # discogs
+        elif site == 'discogs':
+            dcalbumid = param[2]
+            if not dcalbumid:
+                # search
+                found = self.find_album(param[0], param[1], 'discogs')
+                if found:
+                    # get details
+                    dcalbumid = found[0]['dcalbumid']
+                else:
+                    return
+            url = DISCOGSURL % (DISCOGSDETAILS % (dcalbumid, DISCOGSKEY, DISCOGSSECRET))
+            albumscraper = discogs_albumdetails
+        # allmusic
+        elif site == 'allmusic':
+            # search
+            found = self.find_album(param[0], param[1], 'allmusic')
+            if found:
+                # get details
+                url = ALLMUSICDETAILS % found[0]['url']
+                albumscraper = allmusic_albumdetails
+                json = False
+            else:
+                return
+        result = get_data(url, json)
+        if not result:
+            return
+        albumresults = albumscraper(result)
+        if not albumresults:
+            return
+        details[site] = albumresults
+        return details
+
+    def compile_results(self, details):
+        result = {}
+        thumbs = []
+        extras = []
+        # merge metadata results, start with the least accurate sources
+        if 'discogs' in details:
+            for k, v in details['discogs'].items():
+                result[k] = v
+                if k == 'thumb':
+                    thumbs.append(v)
+        if 'allmusic' in details:
+            for k, v in details['allmusic'].items():
+                result[k] = v
+                if k == 'thumb':
+                    thumbs.append(v)
+        if 'theaudiodb' in details:
+            for k, v in details['theaudiodb'].items():
+                result[k] = v
+                if k == 'thumb':
+                    thumbs.append(v)
+                if k == 'extras':
+                    extras.append(v)
+        if 'musicbrainz' in details:
+            for k, v in details['musicbrainz'].items():
+                result[k] = v
+        if 'coverarchive' in details:
+            for k, v in details['coverarchive'].items():
+                result[k] = v
+                if k == 'thumb':
+                    thumbs.append(v)
+                if k == 'extras':
+                    extras.append(v)
+        # prefer artwork from fanarttv
+        if 'fanarttv' in details:
+            for k, v in details['fanarttv'].items():
+                result[k] = v
+                if k == 'thumb':
+                    thumbs.append(v)
+                if k == 'extras':
+                    extras.append(v)
+        # use musicbrainz artist list as they provide mbid's, these can be passed to the artist scraper
+        if 'musicbrainz' in details:
+            result['artist'] = details['musicbrainz']['artist']
+        # provide artwork from all scrapers for getthumb option
+        if result:
+            # thumb list from most accurate sources first
+            thumbs.reverse()
+            thumbnails = []
+            for thumblist in thumbs:
+                for item in thumblist:
+                    thumbnails.append(item)
+            # the order for extra art does not matter
+            extraart = []
+            for extralist in extras:
+                for item in extralist:
+                    extraart.append(item)
+            # add the extra art to the end of the thumb list
+            thumbnails.extend(extraart)
+            result['thumb'] = thumbnails
+        data = self.user_prefs(details, result)
+        return data
+
+    def user_prefs(self, details, result):
+        # user preferences
+        lang = 'description' + self.lang
+        if 'theaudiodb' in details:
+            if lang in details['theaudiodb']:
+                result['description'] = details['theaudiodb'][lang]
+            elif 'descriptionEN' in details['theaudiodb']:
+                result['description'] = details['theaudiodb']['descriptionEN']
+        if (self.genre in details) and ('genre' in details[self.genre]):
+            result['genre'] = details[self.genre]['genre']
+        if (self.style in details) and ('styles' in details[self.style]):
+            result['styles'] = details[self.style]['styles']
+        if (self.mood in details) and ('moods' in details[self.mood]):
+            result['moods'] = details[self.mood]['moods']
+        if (self.theme in details) and ('themes' in details[self.theme]):
+            result['themes'] = details[self.theme]['themes']
+        if (self.rating in details) and ('rating' in details[self.rating]):
+            result['rating'] = details[self.rating]['rating']
+            result['votes'] = details[self.rating]['votes']
+        return result
+
+    def return_search(self, data):
+        for count, item in enumerate(data):
+            listitem = xbmcgui.ListItem(item['album'], offscreen=True)
+            listitem.setArt({'thumb': item['thumb']})
+            listitem.setProperty('album.artist', item['artist_description'])
+            listitem.setProperty('album.year', item.get('year',''))
+            listitem.setProperty('album.type', item.get('type',''))
+            listitem.setProperty('album.releasestatus', item.get('releasestatus',''))
+            listitem.setProperty('album.label', item.get('label',''))
+            listitem.setProperty('relevance', item['relevance'])
+            url = {'artist':item['artist_description'], 'album':item['album']}
+            if 'mbalbumid' in item:
+                url['mbalbumid'] = item['mbalbumid']
+            if 'mbreleasegroupid' in item:
+                url['mbreleasegroupid'] = item['mbreleasegroupid']
+            if 'dcalbumid' in item:
+                url['dcalbumid'] = item['dcalbumid']
+            xbmcplugin.addDirectoryItem(handle=int(sys.argv[1]), url=json.dumps(url), listitem=listitem, isFolder=True)
+
+    def return_nfourl(self, item):
+        url = {'artist':item['artist_description'], 'album':item['album'], 'mbalbumid':item['mbalbumid'], 'mbreleasegroupid':item['mbreleasegroupid']}
+        listitem = xbmcgui.ListItem(offscreen=True)
+        xbmcplugin.addDirectoryItem(handle=int(sys.argv[1]), url=json.dumps(url), listitem=listitem, isFolder=True)
+
+    def return_resolved(self, item):
+        url = {'artist':item['artist_description'], 'album':item['album'], 'mbalbumid':item['mbalbumid'], 'mbreleasegroupid':item['mbreleasegroupid']}
+        listitem = xbmcgui.ListItem(path=json.dumps(url), offscreen=True)
+        xbmcplugin.setResolvedUrl(handle=int(sys.argv[1]), succeeded=True, listitem=listitem)
+
+    def return_details(self, item):
+        if not 'album' in item:
+            return
+        listitem = xbmcgui.ListItem(item['album'], offscreen=True)
+        if 'mbalbumid' in item:
+            listitem.setProperty('album.musicbrainzid', item['mbalbumid'])
+            listitem.setProperty('album.releaseid', item['mbalbumid'])
+        if 'mbreleasegroupid' in item:
+            listitem.setProperty('album.releasegroupid', item['mbreleasegroupid'])
+        if 'scrapedmbid' in item:
+            listitem.setProperty('album.scrapedmbid', item['scrapedmbid'])
+        if 'artist' in item:
+            listitem.setProperty('album.artists', str(len(item['artist'])))
+            for count, artist in enumerate(item['artist']):
+                listitem.setProperty('album.artist%i.name' % (count + 1), artist['artist'])
+                listitem.setProperty('album.artist%i.musicbrainzid' % (count + 1), artist.get('mbartistid', ''))
+                listitem.setProperty('album.artist%i.sortname' % (count + 1), artist.get('artistsort', ''))
+        if 'genre' in item:
+            listitem.setProperty('album.genre', item['genre'])
+        if 'styles' in item:
+            listitem.setProperty('album.styles', item['styles'])
+        if 'moods' in item:
+            listitem.setProperty('album.moods', item['moods'])
+        if 'themes' in item:
+            listitem.setProperty('album.themes', item['themes'])
+        if 'description' in item:
+            listitem.setProperty('album.review', item['description'])
+        if 'releasedate' in item:
+            listitem.setProperty('album.releasedate', item['releasedate'])
+        if 'originaldate' in item:
+            listitem.setProperty('album.originaldate', item['originaldate'])
+        if 'releasestatus' in item:
+            listitem.setProperty('album.releasestatus', item['releasestatus'])
+        if 'artist_description' in item:
+            listitem.setProperty('album.artist_description', item['artist_description'])
+        if 'label' in item:
+            listitem.setProperty('album.label', item['label'])
+        if 'type' in item:
+            listitem.setProperty('album.type', item['type'])
+        if 'compilation' in item:
+            listitem.setProperty('album.compilation', item['compilation'])
+        if 'year' in item:
+            listitem.setProperty('album.year', item['year'])
+        if 'rating' in item:
+            listitem.setProperty('album.rating', item['rating'])
+        if 'votes' in item:
+            listitem.setProperty('album.votes', item['votes'])
+        art = {}
+        if 'discart' in item:
+            art['discart'] = item['discart']
+        if 'multidiscart' in item:
+            for k, v in item['multidiscart'].items():
+                discart = 'discart%s' % k
+                art[discart] = v[0]['image']
+        if 'back' in item:
+            art['back'] = item['back']
+        if 'spine' in item:
+            art['spine'] = item['spine']
+        if '3dcase' in item:
+            art['3dcase'] = item['3dcase']
+        if '3dflat' in item:
+            art['3dflat'] = item['3dflat']
+        if '3dface' in item:
+            art['3dface'] = item['3dface']
+        listitem.setArt(art)
+        if 'thumb' in item:
+            listitem.setProperty('album.thumbs', str(len(item['thumb'])))
+            for count, thumb in enumerate(item['thumb']):
+                listitem.setProperty('album.thumb%i.url' % (count + 1), thumb['image'])
+                listitem.setProperty('album.thumb%i.aspect' % (count + 1), thumb['aspect'])
+                listitem.setProperty('album.thumb%i.preview' % (count + 1), thumb['preview'])
+        xbmcplugin.setResolvedUrl(handle=int(sys.argv[1]), succeeded=True, listitem=listitem)
diff --git a/addons/metadata.generic.albums/lib/theaudiodb.py b/addons/metadata.generic.albums/lib/theaudiodb.py
new file mode 100644
index 000000000000..196e195c9a9f
--- /dev/null
+++ b/addons/metadata.generic.albums/lib/theaudiodb.py
@@ -0,0 +1,124 @@
+# -*- coding: utf-8 -*-
+
+def theaudiodb_albumdetails(data):
+    if data.get('album'):
+        item = data['album'][0]
+        albumdata = {}
+        albumdata['album'] = item['strAlbum']
+        if item.get('intYearReleased',''):
+            albumdata['year'] = item['intYearReleased']
+        if item.get('strStyle',''):
+            albumdata['styles'] = item['strStyle']
+        if item.get('strGenre',''):
+            albumdata['genre'] = item['strGenre']
+        if item.get('strLabel',''):
+            albumdata['label'] = item['strLabel']
+        if item.get('strReleaseFormat',''):
+            albumdata['type'] = item['strReleaseFormat']
+        if item.get('intScore',''):
+            albumdata['rating'] = str(int(float(item['intScore']) + 0.5))
+        if item.get('intScoreVotes',''):
+            albumdata['votes'] = item['intScoreVotes']
+        if item.get('strMood',''):
+            albumdata['moods'] = item['strMood']
+        if item.get('strTheme',''):
+            albumdata['themes'] = item['strTheme']
+        if item.get('strMusicBrainzID',''):
+            albumdata['mbreleasegroupid'] = item['strMusicBrainzID']
+        # api inconsistent
+        if item.get('strDescription',''):
+            albumdata['descriptionEN'] = item['strDescription']
+        elif item.get('strDescriptionEN',''):
+            albumdata['descriptionEN'] = item['strDescriptionEN']
+        if item.get('strDescriptionDE',''):
+            albumdata['descriptionDE'] = item['strDescriptionDE']
+        if item.get('strDescriptionFR',''):
+            albumdata['descriptionFR'] = item['strDescriptionFR']
+        if item.get('strDescriptionCN',''):
+            albumdata['descriptionCN'] = item['strDescriptionCN']
+        if item.get('strDescriptionIT',''):
+            albumdata['descriptionIT'] = item['strDescriptionIT']
+        if item.get('strDescriptionJP',''):
+            albumdata['descriptionJP'] = item['strDescriptionJP']
+        if item.get('strDescriptionRU',''):
+            albumdata['descriptionRU'] = item['strDescriptionRU']
+        if item.get('strDescriptionES',''):
+            albumdata['descriptionES'] = item['strDescriptionES']
+        if item.get('strDescriptionPT',''):
+            albumdata['descriptionPT'] = item['strDescriptionPT']
+        if item.get('strDescriptionSE',''):
+            albumdata['descriptionSE'] = item['strDescriptionSE']
+        if item.get('strDescriptionNL',''):
+            albumdata['descriptionNL'] = item['strDescriptionNL']
+        if item.get('strDescriptionHU',''):
+            albumdata['descriptionHU'] = item['strDescriptionHU']
+        if item.get('strDescriptionNO',''):
+            albumdata['descriptionNO'] = item['strDescriptionNO']
+        if item.get('strDescriptionIL',''):
+            albumdata['descriptionIL'] = item['strDescriptionIL']
+        if item.get('strDescriptionPL',''):
+            albumdata['descriptionPL'] = item['strDescriptionPL']
+        if item.get('strArtist',''):
+            albumdata['artist_description'] = item['strArtist']
+            artists = []
+            artistdata = {}
+            artistdata['artist'] = item['strArtist']
+            if item.get('strMusicBrainzArtistID',''):
+                artistdata['mbartistid'] = item['strMusicBrainzArtistID']
+            artists.append(artistdata)
+            albumdata['artist'] = artists
+        thumbs = []
+        extras = []
+        if item.get('strAlbumThumb',''):
+            thumbdata = {}
+            thumbdata['image'] = item['strAlbumThumb']
+            thumbdata['preview'] = item['strAlbumThumb'] + '/preview'
+            thumbdata['aspect'] = 'thumb'
+            thumbs.append(thumbdata)
+        if item.get('strAlbumThumbBack',''):
+            albumdata['back'] = item['strAlbumThumbBack']
+            extradata = {}
+            extradata['image'] = item['strAlbumThumbBack']
+            extradata['preview'] = item['strAlbumThumbBack'] + '/preview'
+            extradata['aspect'] = 'back'
+            extras.append(extradata)
+        if item.get('strAlbumSpine',''):
+            albumdata['spine'] = item['strAlbumSpine']
+            extradata = {}
+            extradata['image'] = item['strAlbumSpine']
+            extradata['preview'] = item['strAlbumSpine'] + '/preview'
+            extradata['aspect'] = 'spine'
+            extras.append(extradata)
+        if item.get('strAlbumCDart',''):
+            albumdata['discart'] = item['strAlbumCDart']
+            extradata = {}
+            extradata['image'] = item['strAlbumCDart']
+            extradata['preview'] = item['strAlbumCDart'] + '/preview'
+            extradata['aspect'] = 'discart'
+            extras.append(extradata)
+        if item.get('strAlbum3DCase',''):
+            albumdata['3dcase'] = item['strAlbum3DCase']
+            extradata = {}
+            extradata['image'] = item['strAlbum3DCase']
+            extradata['preview'] = item['strAlbum3DCase'] + '/preview'
+            extradata['aspect'] = '3dcase'
+            extras.append(extradata)
+        if item.get('strAlbum3DFlat',''):
+            albumdata['3dflat'] = item['strAlbum3DFlat']
+            extradata = {}
+            extradata['image'] = item['strAlbum3DFlat']
+            extradata['preview'] = item['strAlbum3DFlat'] + '/preview'
+            extradata['aspect'] = '3dflat'
+            extras.append(extradata)
+        if item.get('strAlbum3DFace',''):
+            albumdata['3dface'] = item['strAlbum3DFace']
+            extradata = {}
+            extradata['image'] = item['strAlbum3DFace']
+            extradata['preview'] = item['strAlbum3DFace'] + '/preview'
+            extradata['aspect'] = '3dface'
+            extras.append(extradata)
+        if thumbs:
+            albumdata['thumb'] = thumbs
+        if extras:
+            albumdata['extras'] = extras
+        return albumdata
diff --git a/addons/metadata.generic.albums/lib/utils.py b/addons/metadata.generic.albums/lib/utils.py
new file mode 100644
index 000000000000..e0ef3083c646
--- /dev/null
+++ b/addons/metadata.generic.albums/lib/utils.py
@@ -0,0 +1,24 @@
+# -*- coding: utf-8 -*-
+
+AUDIODBKEY = '58424d43204d6564696120'
+AUDIODBURL = 'https://www.theaudiodb.com/api/v1/json/%s/%s'
+AUDIODBSEARCH = 'searchalbum.php?s=%s&a=%s'
+AUDIODBDETAILS = 'album-mb.php?i=%s'
+
+MUSICBRAINZURL = 'https://musicbrainz.org/ws/2/release/%s'
+MUSICBRAINZSEARCH = '?query=release:"%s"%%20AND%%20(artistname:"%s"%%20OR%%20artist:"%s")&fmt=json'
+MUSICBRAINZDETAILS = '%s?inc=recordings+release-groups+artists+labels+ratings&fmt=json'
+MUSICBRAINZART = 'https://coverartarchive.org/release-group/%s'
+
+DISCOGSKEY = 'zACPgktOmNegwbwKWMaC'
+DISCOGSSECRET = 'wGuSOeMtfdkQxtERKQKPquyBwExSHdQq'
+DISCOGSURL = 'https://api.discogs.com/%s'
+DISCOGSSEARCH = 'database/search?release_title=%s&type=release&artist=%s&page=1&per_page=100&key=%s&secret=%s'
+DISCOGSDETAILS = 'releases/%i?key=%s&secret=%s'
+
+ALLMUSICURL = 'https://www.allmusic.com/%s'
+ALLMUSICSEARCH = 'search/albums/%s+%s'
+ALLMUSICDETAILS = '%s/releases'
+
+FANARTVKEY = 'ed4b784f97227358b31ca4dd966a04f1'
+FANARTVURL = 'https://webservice.fanart.tv/v3/music/albums/%s?api_key=%s'
diff --git a/addons/metadata.generic.albums/resources/icon.png b/addons/metadata.generic.albums/resources/icon.png
new file mode 100644
index 0000000000000000000000000000000000000000..b6748b3f54287e49d5d09a2f922511a97b8e0bc5
GIT binary patch
literal 15700
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

literal 0
HcmV?d00001

diff --git a/addons/metadata.generic.albums/resources/language/resource.language.en_gb/strings.po b/addons/metadata.generic.albums/resources/language/resource.language.en_gb/strings.po
new file mode 100644
index 000000000000..f0e777ee6ba4
--- /dev/null
+++ b/addons/metadata.generic.albums/resources/language/resource.language.en_gb/strings.po
@@ -0,0 +1,85 @@
+# Kodi Media Center language file
+# Addon Name: Generic Album Scraper
+# Addon id: metadata.generic.albums
+# Addon Provider: Team Kodi
+msgid ""
+msgstr ""
+"Project-Id-Version: KODI Main\n"
+"Report-Msgid-Bugs-To: https://github.com/xbmc/xbmc/issues\n"
+"POT-Creation-Date: YEAR-MO-DA HO:MI+ZONE\n"
+"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
+"Last-Translator: Kodi Translation Team\n"
+"Language-Team: English (United Kingdom) (http://www.transifex.com/projects/p/kodi-main/language/en_GB/)\n"
+"MIME-Version: 1.0\n"
+"Content-Type: text/plain; charset=UTF-8\n"
+"Content-Transfer-Encoding: 8bit\n"
+"Language: en_GB\n"
+"Plural-Forms: nplurals=2; plural=(n != 1);\n"
+
+msgctxt "#30000"
+msgid "Preferences"
+msgstr ""
+
+msgctxt "#30001"
+msgid "Prefered language for album review"
+msgstr ""
+
+msgctxt "#30002"
+msgid "Prefer genres from"
+msgstr ""
+
+msgctxt "#30003"
+msgid "Prefer styles from"
+msgstr ""
+
+msgctxt "#30004"
+msgid "Prefer moods from"
+msgstr ""
+
+msgctxt "#30005"
+msgid "Prefer themes from"
+msgstr ""
+
+msgctxt "#30006"
+msgid "Prefer rating from"
+msgstr ""
+
+msgctxt "#30101"
+msgid "Use Discogs.com"
+msgstr ""
+
+msgctxt "#30102"
+msgid "As fallback only"
+msgstr ""
+
+msgctxt "#30103"
+msgid "Always"
+msgstr ""
+
+msgctxt "#30201"
+msgid "If available, the album review will be downloaded in the selected language. It will fallback to english."
+msgstr ""
+
+msgctxt "#30202"
+msgid "Try to get genre info using the selected scraper. Other scrapers will be used if the prefered scraper returns no results."
+msgstr ""
+
+msgctxt "#30203"
+msgid "Try to get style info using the selected scraper. Other scrapers will be used if the prefered scraper returns no results."
+msgstr ""
+
+msgctxt "#30204"
+msgid "Try to get mood info using the selected scraper. Other scrapers will be used if the prefered scraper returns no results."
+msgstr ""
+
+msgctxt "#30205"
+msgid "Try to get theme info using the selected scraper. Other scrapers will be used if the prefered scraper returns no results."
+msgstr ""
+
+msgctxt "#30206"
+msgid "Try to get rating info using the selected scraper. Other scrapers will be used if the prefered scraper returns no results."
+msgstr ""
+
+msgctxt "#30301"
+msgid "Fallback: only use the discogs scraper if the album can't be found on MusicBrainz (faster, but could result in less complete results). Always: retrieve info from discogs.com for each album (slower, but results could be more complete)"
+msgstr ""
diff --git a/addons/metadata.generic.albums/resources/settings.xml b/addons/metadata.generic.albums/resources/settings.xml
new file mode 100644
index 000000000000..51150c2c527b
--- /dev/null
+++ b/addons/metadata.generic.albums/resources/settings.xml
@@ -0,0 +1,107 @@
+<?xml version="1.0" ?>
+<settings version="1">
+	<section id="metadata.generic.albums">
+		<category id="preferences" label="30000">
+			<group id="1">
+				<setting help="30201" id="lang" label="30001" type="string">
+					<level>0</level>
+					<default>EN</default>
+					<control format="string" type="spinner"/>
+					<constraints>
+						<options>
+							<option label="CN">CN</option>
+							<option label="DE">DE</option>
+							<option label="EN">EN</option>
+							<option label="ES">ES</option>
+							<option label="FR">FR</option>
+							<option label="HU">HU</option>
+							<option label="IL">IL</option>
+							<option label="IT">IT</option>
+							<option label="JP">JP</option>
+							<option label="NL">NL</option>
+							<option label="NO">NO</option>
+							<option label="PL">PL</option>
+							<option label="PT">PT</option>
+							<option label="RU">RU</option>
+							<option label="SE">SE</option>
+						</options>
+					</constraints>
+				</setting>
+				<setting help="30202" id="genre" label="30002" type="string">
+					<level>0</level>
+					<default>theaudiodb</default>
+					<control format="string" type="spinner"/>
+					<constraints>
+						<options>
+							<option label="allmusic">allmusic</option>
+							<option label="discogs">discogs</option>
+							<option label="theaudiodb">theaudiodb</option>
+						</options>
+					</constraints>
+				</setting>
+				<setting help="30203" id="style" label="30003" type="string">
+					<level>0</level>
+					<default>theaudiodb</default>
+					<control format="string" type="spinner"/>
+					<constraints>
+						<options>
+							<option label="allmusic">allmusic</option>
+							<option label="discogs">discogs</option>
+							<option label="theaudiodb">theaudiodb</option>
+						</options>
+					</constraints>
+				</setting>
+				<setting help="30204" id="mood" label="30004" type="string">
+					<level>0</level>
+					<default>theaudiodb</default>
+					<control format="string" type="spinner"/>
+					<constraints>
+						<options>
+							<option label="allmusic">allmusic</option>
+							<option label="theaudiodb">theaudiodb</option>
+						</options>
+					</constraints>
+				</setting>
+				<setting help="30205" id="theme" label="30005" type="string">
+					<level>0</level>
+					<default>theaudiodb</default>
+					<control format="string" type="spinner"/>
+					<constraints>
+						<options>
+							<option label="allmusic">allmusic</option>
+							<option label="theaudiodb">theaudiodb</option>
+						</options>
+					</constraints>
+				</setting>
+				<setting help="30206" id="rating" label="30006" type="string">
+					<level>0</level>
+					<default>musicbrainz</default>
+					<control format="string" type="spinner"/>
+					<constraints>
+						<options>
+							<option label="allmusic">allmusic</option>
+							<option label="discogs">discogs</option>
+							<option label="musicbrainz">musicbrainz</option>
+							<option label="theaudiodb">theaudiodb</option>
+						</options>
+					</constraints>
+				</setting>
+			</group>
+		</category>
+		<category id="options" label="33063">
+			<group id="1">
+				<setting help="30301" id="usediscogs" label="30101" type="integer">
+					<level>0</level>
+					<default>0</default>
+					<control format="string" type="spinner"/>
+					<constraints>
+						<options>
+							<option label="30102">0</option>
+							<option label="30103">1</option>
+						</options>
+					</constraints>
+				</setting>
+			</group>
+		</category>
+	</section>
+</settings>

From 86dbff0f73fc9a4218e9803752b9bf36f5ace141 Mon Sep 17 00:00:00 2001
From: ronie <ronie@kodi.tv>
Date: Mon, 4 Mar 2019 02:07:15 +0100
Subject: [PATCH 2/5] add python artist scraper

---
 addons/metadata.generic.artists/LICENSE.txt   | 282 ++++++++++++
 addons/metadata.generic.artists/addon.xml     |  20 +
 addons/metadata.generic.artists/changelog.txt |  22 +
 addons/metadata.generic.artists/default.py    |  30 ++
 .../metadata.generic.artists/lib/allmusic.py  |  84 ++++
 .../metadata.generic.artists/lib/discogs.py   |  45 ++
 .../metadata.generic.artists/lib/fanarttv.py  |  50 +++
 .../lib/musicbrainz.py                        |  53 +++
 addons/metadata.generic.artists/lib/nfo.py    |   8 +
 .../metadata.generic.artists/lib/scraper.py   | 415 ++++++++++++++++++
 .../lib/theaudiodb.py                         | 124 ++++++
 addons/metadata.generic.artists/lib/utils.py  |  24 +
 .../resources/icon.png                        | Bin 0 -> 14308 bytes
 .../resource.language.en_gb/strings.po        |  85 ++++
 .../resources/settings.xml                    | 105 +++++
 15 files changed, 1347 insertions(+)
 create mode 100644 addons/metadata.generic.artists/LICENSE.txt
 create mode 100644 addons/metadata.generic.artists/addon.xml
 create mode 100644 addons/metadata.generic.artists/changelog.txt
 create mode 100644 addons/metadata.generic.artists/default.py
 create mode 100644 addons/metadata.generic.artists/lib/allmusic.py
 create mode 100644 addons/metadata.generic.artists/lib/discogs.py
 create mode 100644 addons/metadata.generic.artists/lib/fanarttv.py
 create mode 100644 addons/metadata.generic.artists/lib/musicbrainz.py
 create mode 100644 addons/metadata.generic.artists/lib/nfo.py
 create mode 100644 addons/metadata.generic.artists/lib/scraper.py
 create mode 100644 addons/metadata.generic.artists/lib/theaudiodb.py
 create mode 100644 addons/metadata.generic.artists/lib/utils.py
 create mode 100644 addons/metadata.generic.artists/resources/icon.png
 create mode 100644 addons/metadata.generic.artists/resources/language/resource.language.en_gb/strings.po
 create mode 100644 addons/metadata.generic.artists/resources/settings.xml

diff --git a/addons/metadata.generic.artists/LICENSE.txt b/addons/metadata.generic.artists/LICENSE.txt
new file mode 100644
index 000000000000..4f8e8eb30cc7
--- /dev/null
+++ b/addons/metadata.generic.artists/LICENSE.txt
@@ -0,0 +1,282 @@
+
+		    GNU GENERAL PUBLIC LICENSE
+		       Version 2, June 1991
+
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc.
+                       59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+			    Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it.  (Some other Free Software Foundation software is covered by
+the GNU Library General Public License instead.)  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must show them these terms so they know their
+rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary.  To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at all.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+		    GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License applies to any program or other work which contains
+a notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License.  The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language.  (Hereinafter, translation is included without limitation in
+the term "modification".)  Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the
+Program (independent of having been made by running the Program).
+Whether that is true depends on what the Program does.
+
+  1. You may copy and distribute verbatim copies of the Program's
+source code as you receive it, in any medium, provided that you
+conspicuously and appropriately publish on each copy an appropriate
+copyright notice and disclaimer of warranty; keep intact all the
+notices that refer to this License and to the absence of any warranty;
+and give any other recipients of the Program a copy of this License
+along with the Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a fee.
+
+  2. You may modify your copy or copies of the Program or any portion
+of it, thus forming a work based on the Program, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) You must cause the modified files to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    b) You must cause any work that you distribute or publish, that in
+    whole or in part contains or is derived from the Program or any
+    part thereof, to be licensed as a whole at no charge to all third
+    parties under the terms of this License.
+
+    c) If the modified program normally reads commands interactively
+    when run, you must cause it, when started running for such
+    interactive use in the most ordinary way, to print or display an
+    announcement including an appropriate copyright notice and a
+    notice that there is no warranty (or else, saying that you provide
+    a warranty) and that users may redistribute the program under
+    these conditions, and telling the user how to view a copy of this
+    License.  (Exception: if the Program itself is interactive but
+    does not normally print such an announcement, your work based on
+    the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
+
+In addition, mere aggregation of another work not based on the Program
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+    a) Accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of Sections
+    1 and 2 above on a medium customarily used for software interchange; or,
+
+    b) Accompany it with a written offer, valid for at least three
+    years, to give any third party, for a charge no more than your
+    cost of physically performing source distribution, a complete
+    machine-readable copy of the corresponding source code, to be
+    distributed under the terms of Sections 1 and 2 above on a medium
+    customarily used for software interchange; or,
+
+    c) Accompany it with the information you received as to the offer
+    to distribute corresponding source code.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form with such
+    an offer, in accord with Subsection b above.)
+
+The source code for a work means the preferred form of the work for
+making modifications to it.  For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable.  However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License.  Any attempt
+otherwise to copy, modify, sublicense or distribute the Program is
+void, and will automatically terminate your rights under this License.
+However, parties who have received copies, or rights, from you under
+this License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+  5. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Program or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Program.
+
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded.  In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+  9. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of this License which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+this License, you may choose any version ever published by the Free Software
+Foundation.
+
+  10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+			    NO WARRANTY
+
+  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+		     END OF TERMS AND CONDITIONS
+-------------------------------------------------------------------------
diff --git a/addons/metadata.generic.artists/addon.xml b/addons/metadata.generic.artists/addon.xml
new file mode 100644
index 000000000000..723cda0dc2e4
--- /dev/null
+++ b/addons/metadata.generic.artists/addon.xml
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
+<addon id="metadata.generic.artists" name="Generic Artist Scraper" version="1.0.7" provider-name="Team Kodi">
+	<requires>
+		<import addon="xbmc.python" version="3.0.0"/>
+		<import addon="xbmc.metadata" version="2.1.0"/>
+	</requires>
+	<extension point="xbmc.metadata.scraper.artists" library="default.py"/>
+	<extension point="xbmc.addon.metadata">
+		<summary lang="en_GB">Generic music scraper for artists</summary>
+		<description lang="en_GB">Searches for artist information and artwork across multiple websites.</description>
+		<platform>all</platform>
+		<license>GPL-2.0-only</license>
+		<forum>https://forum.kodi.tv/showthread.php?tid=351571</forum>
+		<source>https://gitlab.com/ronie/metadata.generic.artists/</source>
+		<assets>
+			<icon>resources/icon.png</icon>
+		</assets>
+		<news>- first release</news>
+	</extension>
+</addon>
diff --git a/addons/metadata.generic.artists/changelog.txt b/addons/metadata.generic.artists/changelog.txt
new file mode 100644
index 000000000000..a41e2803f200
--- /dev/null
+++ b/addons/metadata.generic.artists/changelog.txt
@@ -0,0 +1,22 @@
+v1.0.7
+- include alias and sortname in artist search
+- filter inaccurate search results from discogs
+
+v1.0.6
+- provide musicbrainzreleasegroupid for artist albums
+
+v1.0.5
+- add artist gender
+- disallow 0 value born/formed/died/disbanded dates from theaudiodb
+
+v1.0.4
+- catch time-outs
+
+v1.0.3
+- replace beautifulsoup with regex
+
+v1.0.2
+- replace requests with urllib
+
+v1.0.1
+- release
diff --git a/addons/metadata.generic.artists/default.py b/addons/metadata.generic.artists/default.py
new file mode 100644
index 000000000000..c9a5a4b5d342
--- /dev/null
+++ b/addons/metadata.generic.artists/default.py
@@ -0,0 +1,30 @@
+# -*- coding: utf-8 -*-
+import sys
+from urllib.parse import parse_qsl
+from lib.scraper import Scraper
+
+
+class Main:
+    def __init__(self):
+        action, key, artist, url, nfo, settings = self._parse_argv()
+        Scraper(action, key, artist, url, nfo, settings)
+
+    def _parse_argv(self):
+        params = dict(parse_qsl(sys.argv[2].lstrip('?')))
+        # actions: resolveid, find, getdetails, NfoUrl
+        action = params['action']
+        # key: musicbrainz id
+        key = params.get('key', '')
+        # artist: artistname
+        artist = params.get('artist', '')
+        # url: provided by the scraper on previous run
+        url = params.get('url', '')
+        # nfo: musicbrainz url from .nfo file
+        nfo = params.get('nfo', '')
+        # path specific settings
+        settings = params.get('pathSettings', {})
+        return action, key, artist, url, nfo, settings
+
+
+if (__name__ == '__main__'):
+    Main()
diff --git a/addons/metadata.generic.artists/lib/allmusic.py b/addons/metadata.generic.artists/lib/allmusic.py
new file mode 100644
index 000000000000..5bd1597c16f7
--- /dev/null
+++ b/addons/metadata.generic.artists/lib/allmusic.py
@@ -0,0 +1,84 @@
+# -*- coding: utf-8 -*-
+
+import re
+
+def allmusic_artistdetails(data):
+    data = data.decode('utf-8')
+    artistdata = {}
+    artist = re.search(r'artist-name" itemprop="name">\s*(.*?)\s*<', data)
+    if artist:
+        artistdata['artist'] = artist.group(1)
+    else:
+        # no discography page available for this artist
+        return
+    active = re.search(r'class="active-dates">.*?<div>(.*?)<', data, re.S)
+    if active:
+        artistdata['active'] = active.group(1)
+    begin = re.search(r'class="birth">.*?<h4>\s*(.*?)\s*<', data, re.S)
+    if begin and begin.group(1) == 'Born':
+        born = re.search(r'class="birth">.*?<a.*?>(.*?)<', data, re.S)
+        if born:
+            artistdata['born'] = born.group(1)
+    elif begin and begin.group(1) == 'Formed':
+        formed = re.search(r'class="birth">.*?<a.*?>(.*?)<', data, re.S)
+        if formed:
+            artistdata['formed'] = formed.group(1)
+    end = re.search(r'class="died">.*?<h4>\s*(.*?)\s*<', data, re.S)
+    if end and end.group(1) == 'Died':
+        died = re.search(r'class="died">.*?<a.*?>(.*?)<', data, re.S)
+        if died:
+            artistdata['died'] = died.group(1)
+    elif end and end.group(1) == 'Disbanded':
+        disbanded = re.search(r'class="died">.*?<a.*?>(.*?)<', data, re.S)
+        if disbanded:
+            artistdata['disbanded'] = disbanded.group(1)
+    genre = re.search(r'class="genre">.*?<a.*?>(.*?)<', data, re.S)
+    if genre:
+        artistdata['genre'] = genre.group(1)
+    styledata = re.search(r'class="styles">.*?<div>\s*(.*?)\s*</div', data, re.S)
+    if styledata:
+        styles = re.findall(r'">(.*?)<', styledata.group(1))
+        if styles:
+            artistdata['styles'] = ' / '.join(styles)
+    mooddata = re.search(r'class="moods">.*?<li>\s*(.*?)\s*</ul', data, re.S)
+    if mooddata:
+        moods = re.findall(r'">(.*?)<', mooddata.group(1))
+        if moods:
+            artistdata['moods'] = ' / '.join(moods)
+    thumbsdata = re.search(r'class="artist-image">.*?<img src="(.*?)"', data, re.S)
+    if thumbsdata:
+        thumbs = []
+        thumbdata = {}
+        thumb = thumbsdata.group(1).rstrip('?partner=allrovi.com')
+        # 0=largest / 1=75 / 2=150 / 3=250 / 4=400 / 5=500 / 6=1080
+        if thumb.endswith('f=4'):
+            thumbdata['image'] = thumb.replace('f=4', 'f=0')
+            thumbdata['preview'] = thumb.replace('f=4', 'f=2')
+        else:
+            thumbdata['image'] = thumb
+            thumbdata['preview'] = thumb
+        thumbdata['aspect'] = 'thumb'
+        thumbs.append(thumbdata)
+        artistdata['thumb'] = thumbs
+    return artistdata
+
+def allmusic_artistalbums(data):
+    data = data.decode('utf-8')
+    albums = []
+    albumdata = re.search(r'tbody>\s*(.*?)\s*</tbody', data, re.S)
+    if albumdata:
+        albumlist = re.findall(r'tr.*?>\s*(.*?)\s*</tr', albumdata.group(1), re.S)
+        if albumlist:
+            for album in albumlist:
+                albumdata = {}
+                title = re.search(r'<a.*?>(.*?)<', album)
+                if title:
+                    albumdata['title'] = title.group(1)
+                year = re.search(r'class="year".*?>\s*(.*?)\s*<', album)
+                if year:
+                    albumdata['year'] = year.group(1)
+                else:
+                    albumdata['year'] = ''
+                if albumdata:
+                    albums.append(albumdata)
+    return albums
diff --git a/addons/metadata.generic.artists/lib/discogs.py b/addons/metadata.generic.artists/lib/discogs.py
new file mode 100644
index 000000000000..42fa1301d256
--- /dev/null
+++ b/addons/metadata.generic.artists/lib/discogs.py
@@ -0,0 +1,45 @@
+# -*- coding: utf-8 -*-
+import difflib
+
+def discogs_artistfind(data, artist):
+    artists = []
+    for item in data.get('results',[]):
+        artistdata = {}
+        artistdata['artist'] = item['title']
+        # filter inaccurate results
+        match = difflib.SequenceMatcher(None, artist.lower(), item['title'].lower()).ratio()
+        score = round(match, 2)
+        if score > 0.90:
+            artistdata['thumb'] = item['thumb']
+            artistdata['genre'] = ''
+            artistdata['born'] = ''
+            artistdata['dcid'] = item['id']
+            # discogs does not provide relevance, use our own
+            artistdata['relevance'] = str(score)
+            artists.append(artistdata)
+    return artists
+
+def discogs_artistdetails(data):
+    artistdata = {}
+    artistdata['artist'] = data['name']
+    artistdata['biography'] = data['profile']
+    if 'images' in data:
+        thumbs = []
+        for item in data['images']:
+            thumbdata = {}
+            thumbdata['image'] = item['uri']
+            thumbdata['preview'] = item['uri150']
+            thumbdata['aspect'] = 'thumb'
+            thumbs.append(thumbdata)
+        artistdata['thumb'] = thumbs
+    return artistdata
+
+def discogs_artistalbums(data):
+    albums = []
+    for item in data['releases']:
+        if item['role'] == 'Main':
+            albumdata = {}
+            albumdata['title'] = item['title']
+            albumdata['year'] = str(item.get('year', ''))
+            albums.append(albumdata)
+    return albums
diff --git a/addons/metadata.generic.artists/lib/fanarttv.py b/addons/metadata.generic.artists/lib/fanarttv.py
new file mode 100644
index 000000000000..22ae1f2e5c33
--- /dev/null
+++ b/addons/metadata.generic.artists/lib/fanarttv.py
@@ -0,0 +1,50 @@
+# -*- coding: utf-8 -*-
+
+def fanarttv_artistart(data):
+    artistdata = {}
+    extras = []
+    if 'artistbackground' in data:
+        fanart = []
+        for item in data['artistbackground']:
+            fanartdata = {}
+            fanartdata['image'] = item['url']
+            fanartdata['preview'] = item['url'].replace('/fanart/', '/preview/')
+            fanart.append(fanartdata)
+        artistdata['fanart'] = fanart
+    if 'artistthumb' in data:
+        thumbs = []
+        for item in data['artistthumb']:
+            thumbdata = {}
+            thumbdata['image'] = item['url']
+            thumbdata['preview'] = item['url'].replace('/fanart/', '/preview/')
+            thumbdata['aspect'] = 'thumb'
+            thumbs.append(thumbdata)
+        if thumbs:
+            artistdata['thumb'] = thumbs
+    if 'musicbanner' in data:
+        artistdata['banner'] = data['musicbanner'][0]['url']
+        for item in data['musicbanner']:
+            extradata = {}
+            extradata['image'] = item['url']
+            extradata['preview'] = item['url'].replace('/fanart/', '/preview/')
+            extradata['aspect'] = 'banner'
+            extras.append(extradata)
+    if 'hdmusiclogo' in data:
+        artistdata['clearlogo'] = data['hdmusiclogo'][0]['url']
+        for item in data['hdmusiclogo']:
+            extradata = {}
+            extradata['image'] = item['url']
+            extradata['preview'] = item['url'].replace('/fanart/', '/preview/')
+            extradata['aspect'] = 'clearlogo'
+            extras.append(extradata)
+    elif 'musiclogo' in data:
+        artistdata['clearlogo'] = data['musiclogo'][0]['url']
+        for item in data['musiclogo']:
+            extradata = {}
+            extradata['image'] = item['url']
+            extradata['preview'] = item['url'].replace('/fanart/', '/preview/')
+            extradata['aspect'] = 'clearlogo'
+            extras.append(extradata)
+    if extras:
+        artistdata['extras'] = extras
+    return artistdata
diff --git a/addons/metadata.generic.artists/lib/musicbrainz.py b/addons/metadata.generic.artists/lib/musicbrainz.py
new file mode 100644
index 000000000000..4a9cbced0a02
--- /dev/null
+++ b/addons/metadata.generic.artists/lib/musicbrainz.py
@@ -0,0 +1,53 @@
+# -*- coding: utf-8 -*-
+
+def musicbrainz_artistfind(data, artist):
+    artists = []
+    for item in data.get('artists',[]):
+        artistdata = {}
+        artistdata['artist'] = item['name']
+        artistdata['thumb'] = ''
+        artistdata['genre'] = ''
+        artistdata['born'] = item['life-span'].get('begin', '')
+        if 'type' in item:
+            artistdata['type'] = item['type']
+        if 'gender' in item:
+            artistdata['gender'] = item['gender']
+        if 'disambiguation' in item:
+            artistdata['disambiguation'] = item['disambiguation']
+        artistdata['mbid'] = item['id']
+        if item.get('score',1):
+            artistdata['relevance'] = str(item['score'] / 100.00)
+        artists.append(artistdata)
+    return artists
+
+def musicbrainz_artistdetails(data):
+    artistdata = {}
+    artistdata['artist'] = data['name']
+    artistdata['mbartistid'] = data['id']
+    artistdata['type'] = data['type']
+    artistdata['gender'] = data['gender']
+    artistdata['disambiguation'] = data['disambiguation']
+    if data.get('life-span','') and data.get('type',''):
+        begin = data['life-span'].get('begin', '')
+        end = data['life-span'].get('end', '')
+        if data['type'] in ['Group', 'Orchestra', 'Choir']:
+            artistdata['formed'] = begin
+            artistdata['disbanded'] = end
+        elif data['type'] in ['Person', 'Character']:
+            artistdata['born'] = begin
+            artistdata['died'] = end
+    albums = []
+    for item in data.get('release-groups',[]):
+        albumdata = {}
+        albumdata['title'] = item.get('title','')
+        albumdata['year'] = item.get('first-release-date','')
+        albumdata['musicbrainzreleasegroupid'] = item.get('id','')
+        albums.append(albumdata)
+    if albums:
+        artistdata['albums'] = albums
+    for item in data['relations']:
+        if item['type'] == 'allmusic':
+            artistdata['allmusic-url'] = item['url']['resource']
+        elif item['type'] == 'discogs':
+            artistdata['discogs-url'] = item['url']['resource']
+    return artistdata
diff --git a/addons/metadata.generic.artists/lib/nfo.py b/addons/metadata.generic.artists/lib/nfo.py
new file mode 100644
index 000000000000..7aeb7ff06cc1
--- /dev/null
+++ b/addons/metadata.generic.artists/lib/nfo.py
@@ -0,0 +1,8 @@
+# -*- coding: utf-8 -*-
+
+import re
+
+def nfo_geturl(data):
+    result = re.search('https://musicbrainz.org/(ws/2/)?artist/([0-9a-z\-]*)', data)
+    if result:
+        return result.group(2)
diff --git a/addons/metadata.generic.artists/lib/scraper.py b/addons/metadata.generic.artists/lib/scraper.py
new file mode 100644
index 000000000000..8828a435c546
--- /dev/null
+++ b/addons/metadata.generic.artists/lib/scraper.py
@@ -0,0 +1,415 @@
+# -*- coding: utf-8 -*-
+
+import json
+import socket
+import sys
+import time
+import urllib.parse
+import urllib.request
+import _strptime # https://bugs.python.org/issue7980
+from threading import Thread
+from urllib.error import HTTPError, URLError
+from socket import timeout
+import xbmc
+import xbmcgui
+import xbmcplugin
+import xbmcaddon
+from .theaudiodb import theaudiodb_artistdetails
+from .theaudiodb import theaudiodb_artistalbums
+from .musicbrainz import musicbrainz_artistfind
+from .musicbrainz import musicbrainz_artistdetails
+from .discogs import discogs_artistfind
+from .discogs import discogs_artistdetails
+from .discogs import discogs_artistalbums
+from .allmusic import allmusic_artistdetails
+from .allmusic import allmusic_artistalbums
+from .nfo import nfo_geturl
+from .fanarttv import fanarttv_artistart
+from .utils import *
+
+ADDONID = xbmcaddon.Addon().getAddonInfo('id')
+ADDONNAME = xbmcaddon.Addon().getAddonInfo('name')
+ADDONVERSION = xbmcaddon.Addon().getAddonInfo('version')
+
+
+def log(txt):
+    message = '%s: %s' % (ADDONID, txt)
+    xbmc.log(msg=message, level=xbmc.LOGDEBUG)
+
+def get_data(url, jsonformat):
+    try:
+        headers = {}
+        headers['User-Agent'] = '%s/%s ( http://kodi.tv )' % (ADDONNAME, ADDONVERSION)
+        req = urllib.request.Request(url, headers=headers)
+        resp = urllib.request.urlopen(req, timeout=5)
+        respdata = resp.read()
+    except URLError as e:
+        log('URLError: %s - %s' % (e.reason, url))
+        return
+    except HTTPError as e:
+        log('HTTPError: %s - %s' % (e.reason, url))
+        return
+    except socket.timeout as e:
+        log('socket: %s - %s' % (e, url))
+        return
+    if resp.getcode() == 503:
+        log('exceeding musicbrainz api limit')
+        return
+    elif resp.getcode() == 429:
+        log('exceeding discogs api limit')
+        return
+    if jsonformat:
+        respdata = json.loads(respdata)
+    return respdata
+
+
+class Scraper():
+    def __init__(self, action, key, artist, url, nfo, settings):
+        # get start time in milliseconds
+        self.start = int(round(time.time() * 1000))
+        # parse path settings
+        self.parse_settings(settings)
+        # return a dummy result, this is just for backward compitability with xml based scrapers https://github.com/xbmc/xbmc/pull/11632
+        if action == 'resolveid':
+            result = self.resolve_mbid(key)
+            if result:
+                self.return_resolved(result)
+        # search for artist name matches
+        elif action == 'find':
+            # both musicbrainz and discogs allow 1 api per second. this query requires 1 musicbrainz api call and optionally 1 discogs api call
+            RATELIMIT = 1000
+            # try musicbrainz first
+            result = self.find_artist(artist, 'musicbrainz')
+            if result:
+                self.return_search(result)
+            # fallback to discogs
+            else:
+                result = self.find_artist(artist, 'discogs')
+                if result:
+                    self.return_search(result)
+        # return info using artistname / id's
+        elif action == 'getdetails':
+            details = {}
+            url = json.loads(url)
+            artist = url['artist'].encode('utf-8')
+            mbid = url.get('mbid', '')
+            dcid = url.get('dcid', '')
+            threads = []
+            extrathreads = []
+            # we have a musicbrainz id
+            if mbid:
+                # musicbrainz allows 1 api per second.
+                RATELIMIT = 1000
+                scrapers = [[mbid, 'musicbrainz'], [mbid, 'theaudiodb'], [mbid, 'fanarttv']]
+
+                for item in scrapers:
+                    thread = Thread(target = self.get_details, args = (item[0], item[1], details))
+                    threads.append(thread)
+                    thread.start()
+                # wait for musicbrainz to finish
+                threads[0].join()
+                # check if we have a result:
+                if 'musicbrainz' in details:
+                    extrascrapers = []
+                    # only scrape allmusic if we have an url provided by musicbrainz
+                    if 'allmusic-url' in details['musicbrainz']:
+                        extrascrapers.append([details['musicbrainz']['allmusic-url'], 'allmusic'])
+                    # only scrape discogs if we have an url provided by musicbrainz and discogs scraping is explicitly enabled (as it is slower)
+                    if 'discogs-url' in details['musicbrainz'] and self.usediscogs == 1:
+                        dcid = int(details['musicbrainz']['discogs-url'].rsplit('/', 1)[1])
+                        extrascrapers.append([dcid, 'discogs'])
+                        # discogs allows 1 api per second. this query requires 2 discogs api calls
+                        RATELIMIT = 2000
+                    for item in extrascrapers:
+                        thread = Thread(target = self.get_details, args = (item[0], item[1], details))
+                        extrathreads.append(thread)
+                        thread.start()
+            # we have a discogs id
+            else:
+                result = self.get_details(dcid, 'discogs', details)
+                # discogs allow 1 api per second. this query requires 2 discogs api call
+                RATELIMIT = 2000
+            if threads:
+                for thread in threads:
+                    thread.join()
+            if extrathreads:
+                for thread in extrathreads:
+                    thread.join()
+            result = self.compile_results(details)
+            if result:
+                self.return_details(result)
+        elif action == 'NfoUrl':
+            mbid = nfo_geturl(nfo)
+            if mbid:
+                result = self.resolve_mbid(mbid)
+                if result:
+                    self.return_nfourl(result)
+        # get end time in milliseconds
+        self.end = int(round(time.time() * 1000))
+        # handle musicbrainz and discogs ratelimit
+        if action == 'find' or action == 'getdetails':
+            if self.end - self.start < RATELIMIT:
+                # wait max 2 seconds
+                diff = RATELIMIT - (self.end - self.start)
+                xbmc.sleep(diff)
+        xbmcplugin.endOfDirectory(int(sys.argv[1]))
+
+    def parse_settings(self, data):
+        settings = json.loads(data)
+        # note: path settings are taken from the db, they may not reflect the current settings.xml file
+        self.bio = settings['bio']
+        self.discog = settings['discog']
+        self.genre = settings['genre']
+        self.lang = settings['lang']
+        self.mood = settings['mood']
+        self.style = settings['style']
+        self.usediscogs = settings['usediscogs']
+
+    def resolve_mbid(self, mbid):
+        # create dummy result
+        item = {}
+        item['artist'] = ''
+        item['mbartistid'] = mbid
+        return item
+
+    def find_artist(self, artist, site):
+        json = True
+        # musicbrainz
+        if site == 'musicbrainz':
+            url = MUSICBRAINZURL % (MUSICBRAINZSEARCH % urllib.parse.quote_plus(artist))
+            scraper = musicbrainz_artistfind
+        # musicbrainz
+        if site == 'discogs':
+            url = DISCOGSURL % (DISCOGSSEARCH % (urllib.parse.quote_plus(artist), DISCOGSKEY , DISCOGSSECRET))
+            scraper = discogs_artistfind
+        result = get_data(url, json)
+        if not result:
+            return
+        artistresults = scraper(result, artist)
+        return artistresults
+
+    def get_details(self, param, site, details):
+        json = True
+        # theaudiodb
+        if site == 'theaudiodb':
+            url = AUDIODBURL % (AUDIODBKEY, AUDIODBDETAILS % param)
+            artistscraper = theaudiodb_artistdetails
+        # musicbrainz
+        elif site == 'musicbrainz':
+            url = MUSICBRAINZURL % (MUSICBRAINZDETAILS % param)
+            artistscraper = musicbrainz_artistdetails
+        # fanarttv
+        elif site == 'fanarttv':
+            url = FANARTVURL % (param, FANARTVKEY)
+            artistscraper = fanarttv_artistart
+        # discogs
+        elif site == 'discogs':
+            url = DISCOGSURL % (DISCOGSDETAILS % (param, DISCOGSKEY, DISCOGSSECRET))
+            artistscraper = discogs_artistdetails
+        # allmusic
+        elif site == 'allmusic':
+            url = param + '/discography'
+            artistscraper = allmusic_artistdetails
+            json = False
+        result = get_data(url, json)
+        if not result:
+            return
+        artistresults = artistscraper(result)
+        if not artistresults:
+            return
+        if site == 'theaudiodb' or site == 'discogs' or site == 'allmusic':
+            if site == 'theaudiodb':
+                # theaudiodb - discography
+                albumsurl = AUDIODBURL % (AUDIODBKEY, AUDIODBDISCOGRAPHY % artistresults['mbartistid'])
+                scraper = theaudiodb_artistalbums
+            elif site == 'discogs':
+                # discogs - discography
+                albumsurl = DISCOGSURL % (DISCOGSDISCOGRAPHY % (param, DISCOGSKEY, DISCOGSSECRET))
+                scraper = discogs_artistalbums
+            elif site == 'allmusic':
+                # allmusic - discography
+                albumsurl = param + '/discography'
+                scraper = allmusic_artistalbums
+            albumdata = get_data(albumsurl, json)
+            if albumdata:
+                albumresults = scraper(albumdata)
+                if albumresults:
+                    artistresults['albums'] = albumresults
+        details[site] = artistresults
+        return details
+
+    def compile_results(self, details):
+        result = {}
+        thumbs = []
+        fanart = []
+        extras = []
+        # merge metadata results, start with the least accurate sources
+        if 'discogs' in details:
+            for k, v in details['discogs'].items():
+                result[k] = v
+                if k == 'thumb':
+                    thumbs.append(v)
+        if 'allmusic' in details:
+            for k, v in details['allmusic'].items():
+                result[k] = v
+                if k == 'thumb':
+                    thumbs.append(v)
+        if 'theaudiodb' in details:
+            for k, v in details['theaudiodb'].items():
+                result[k] = v
+                if k == 'thumb':
+                    thumbs.append(v)
+                elif k == 'fanart':
+                    fanart.append(v)
+                if k == 'extras':
+                    extras.append(v)
+        if 'musicbrainz' in details:
+            for k, v in details['musicbrainz'].items():
+                result[k] = v
+        if 'fanarttv' in details:
+            for k, v in details['fanarttv'].items():
+                result[k] = v
+                if k == 'thumb':
+                    thumbs.append(v)
+                elif k == 'fanart':
+                    fanart.append(v)
+                if k == 'extras':
+                    extras.append(v)
+        # provide artwork from all scrapers for getthumb / getfanart option
+        if result:
+            # artworks from most accurate sources first
+            thumbs.reverse()
+            thumbnails = []
+            fanart.reverse()
+            fanarts = []
+            # the order for extra art does not matter
+            extraart = []
+            for thumblist in thumbs:
+                for item in thumblist:
+                    thumbnails.append(item)
+            for extralist in extras:
+                for item in extralist:
+                    extraart.append(item)
+            # add the extra art to the end of the thumb list
+            thumbnails.extend(extraart)
+            result['thumb'] = thumbnails
+            for fanartlist in fanart:
+                for item in fanartlist:
+                    fanarts.append(item)
+            result['fanart'] = fanarts
+        data = self.user_prefs(details, result)
+        return data
+
+    def user_prefs(self, details, result):
+        # user preferences
+        lang = 'biography' + self.lang
+        if self.bio == 'theaudiodb' and 'theaudiodb' in details:
+            if lang in details['theaudiodb']:
+                result['biography'] = details['theaudiodb'][lang]
+            elif 'biographyEN' in details['theaudiodb']:
+                result['biography'] = details['theaudiodb']['biographyEN']
+        elif self.bio == 'discogs' and 'discogs' in details:
+            result['biography'] = details['discogs']['biography']
+        if (self.discog in details) and ('albums' in details[self.discog]):
+            result['albums'] = details[self.discog]['albums']
+        if (self.genre in details) and ('genre' in details[self.genre]):
+            result['genre'] = details[self.genre]['genre']
+        if (self.style in details) and ('styles' in details[self.style]):
+            result['styles'] = details[self.style]['styles']
+        if (self.mood in details) and ('moods' in details[self.mood]):
+            result['moods'] = details[self.mood]['moods']
+        return result
+
+    def return_search(self, data):
+        for item in data:
+            listitem = xbmcgui.ListItem(item['artist'], offscreen=True)
+            listitem.setArt({'thumb': item['thumb']})
+            listitem.setProperty('artist.genre', item['genre'])
+            listitem.setProperty('artist.born', item['born'])
+            listitem.setProperty('relevance', item['relevance'])
+            if 'type' in item:
+                listitem.setProperty('artist.type', item['type'])
+            if 'gender' in item:
+                listitem.setProperty('artist.gender', item['gender'])
+            if 'disambiguation' in item:
+                listitem.setProperty('artist.disambiguation', item['disambiguation'])
+            url = {'artist':item['artist']}
+            if 'mbid' in item:
+                url['mbid'] = item['mbid']
+            if 'dcid' in item:
+                url['dcid'] = item['dcid']
+            xbmcplugin.addDirectoryItem(handle=int(sys.argv[1]), url=json.dumps(url), listitem=listitem, isFolder=True)
+
+    def return_nfourl(self, item):
+        url = {'artist':item['artist'], 'mbid':item['mbartistid']}
+        listitem = xbmcgui.ListItem(offscreen=True)
+        xbmcplugin.addDirectoryItem(handle=int(sys.argv[1]), url=json.dumps(url), listitem=listitem, isFolder=True)
+
+    def return_resolved(self, item):
+        url = {'artist':item['artist'], 'mbid':item['mbartistid']}
+        listitem = xbmcgui.ListItem(path=json.dumps(url), offscreen=True)
+        xbmcplugin.setResolvedUrl(handle=int(sys.argv[1]), succeeded=True, listitem=listitem)
+
+    def return_details(self, item):
+        if not 'artist' in item:
+            return
+        listitem = xbmcgui.ListItem(item['artist'], offscreen=True)
+        if 'mbartistid' in item:
+            listitem.setProperty('artist.musicbrainzid', item['mbartistid'])
+        if 'genre' in item:
+            listitem.setProperty('artist.genre', item['genre'])
+        if 'biography' in item:
+            listitem.setProperty('artist.biography', item['biography'])
+        if 'gender' in item:
+            listitem.setProperty('artist.gender', item['gender'])
+        if 'styles' in item:
+            listitem.setProperty('artist.styles', item['styles'])
+        if 'moods' in item:
+            listitem.setProperty('artist.moods', item['moods'])
+        if 'instruments' in item:
+            listitem.setProperty('artist.instruments', item['instruments'])
+        if 'disambiguation' in item:
+            listitem.setProperty('artist.disambiguation', item['disambiguation'])
+        if 'type' in item:
+            listitem.setProperty('artist.type', item['type'])
+        if 'sortname' in item:
+            listitem.setProperty('artist.sortname', item['sortname'])
+        if 'active' in item:
+            listitem.setProperty('artist.years_active', item['active'])
+        if 'born' in item:
+            listitem.setProperty('artist.born', item['born'])
+        if 'formed' in item:
+            listitem.setProperty('artist.formed', item['formed'])
+        if 'died' in item:
+            listitem.setProperty('artist.died', item['died'])
+        if 'disbanded' in item:
+            listitem.setProperty('artist.disbanded', item['disbanded'])
+        art = {}
+        if 'clearlogo' in item:
+            art['clearlogo'] = item['clearlogo']
+        if 'banner' in item:
+            art['banner'] = item['banner']
+        if 'clearart' in item:
+            art['clearart'] = item['clearart']
+        if 'landscape' in item:
+            art['landscape'] = item['landscape']
+        listitem.setArt(art)
+        if 'fanart' in item:
+            listitem.setProperty('artist.fanarts', str(len(item['fanart'])))
+            for count, fanart in enumerate(item['fanart']):
+                listitem.setProperty('artist.fanart%i.url' % (count + 1), fanart['image'])
+                listitem.setProperty('artist.fanart%i.preview' % (count + 1), fanart['preview'])
+        if 'thumb' in item:
+            listitem.setProperty('artist.thumbs', str(len(item['thumb'])))
+            for count, thumb in enumerate(item['thumb']):
+                listitem.setProperty('artist.thumb%i.url' % (count + 1), thumb['image'])
+                listitem.setProperty('artist.thumb%i.preview' % (count + 1), thumb['preview'])
+                listitem.setProperty('artist.thumb%i.aspect' % (count + 1), thumb['aspect'])
+        if 'albums' in item:
+            listitem.setProperty('artist.albums', str(len(item['albums'])))
+            for count, album in enumerate(item['albums']):
+                listitem.setProperty('artist.album%i.title' % (count + 1), album['title'])
+                listitem.setProperty('artist.album%i.year' % (count + 1), album['year'])
+                if 'musicbrainzreleasegroupid' in album:
+                    listitem.setProperty('artist.album%i.musicbrainzreleasegroupid' % (count + 1), album['musicbrainzreleasegroupid'])
+        xbmcplugin.setResolvedUrl(handle=int(sys.argv[1]), succeeded=True, listitem=listitem)
diff --git a/addons/metadata.generic.artists/lib/theaudiodb.py b/addons/metadata.generic.artists/lib/theaudiodb.py
new file mode 100644
index 000000000000..c2a80a561405
--- /dev/null
+++ b/addons/metadata.generic.artists/lib/theaudiodb.py
@@ -0,0 +1,124 @@
+# -*- coding: utf-8 -*-
+
+def theaudiodb_artistdetails(data):
+    if data.get('artists',[]):
+        item = data['artists'][0]
+        artistdata = {}
+        extras = []
+        artistdata['artist'] = item['strArtist']
+        # api inconsistent
+        if item.get('intFormedYear','') and item['intFormedYear'] != '0':
+            artistdata['formed'] = item['intFormedYear']
+        if item.get('intBornYear','') and item['intBornYear'] != '0':
+            artistdata['born'] = item['intBornYear']
+        if item.get('intDiedYear','') and item['intDiedYear'] != '0':
+            artistdata['died'] = item['intDiedYear']
+        if item.get('strDisbanded','') and item['strDisbanded'] != '0':
+            artistdata['disbanded'] = item['strDisbanded']
+        if item.get('strStyle',''):
+            artistdata['styles'] = item['strStyle']
+        if item.get('strGenre',''):
+            artistdata['genre'] = item['strGenre']
+        if item.get('strMood',''):
+            artistdata['moods'] = item['strMood']
+        if item.get('strGender',''):
+            artistdata['gender'] = item['strGender']
+        if item.get('strBiographyEN',''):
+            artistdata['biographyEN'] = item['strBiographyEN']
+        if item.get('strBiographyDE',''):
+            artistdata['biographyDE'] = item['strBiographyDE']
+        if item.get('strBiographyFR',''):
+            artistdata['biographyFR'] = item['strBiographyFR']
+        if item.get('strBiographyCN',''):
+            artistdata['biographyCN'] = item['strBiographyCN']
+        if item.get('strBiographyIT',''):
+            artistdata['biographyIT'] = item['strBiographyIT']
+        if item.get('strBiographyJP',''):
+            artistdata['biographyJP'] = item['strBiographyJP']
+        if item.get('strBiographyRU',''):
+            artistdata['biographyRU'] = item['strBiographyRU']
+        if item.get('strBiographyES',''):
+            artistdata['biographyES'] = item['strBiographyES']
+        if item.get('strBiographyPT',''):
+            artistdata['biographyPT'] = item['strBiographyPT']
+        if item.get('strBiographySE',''):
+            artistdata['biographySE'] = item['strBiographySE']
+        if item.get('strBiographyNL',''):
+            artistdata['biographyNL'] = item['strBiographyNL']
+        if item.get('strBiographyHU',''):
+            artistdata['biographyHU'] = item['strBiographyHU']
+        if item.get('strBiographyNO',''):
+            artistdata['biographyNO'] = item['strBiographyNO']
+        if item.get('strBiographyIL',''):
+            artistdata['biographyIL'] = item['strBiographyIL']
+        if item.get('strBiographyPL',''):
+            artistdata['biographyPL'] = item['strBiographyPL']
+        if item.get('strMusicBrainzID',''):
+            artistdata['mbartistid'] = item['strMusicBrainzID']
+        if item.get('strArtistFanart',''):
+            fanart = []
+            fanartdata = {}
+            fanartdata['image'] = item['strArtistFanart']
+            fanartdata['preview'] = item['strArtistFanart'] + '/preview'
+            fanart.append(fanartdata)
+            if item['strArtistFanart2']:
+                fanartdata = {}
+                fanartdata['image'] = item['strArtistFanart2']
+                fanartdata['preview'] = item['strArtistFanart2'] + '/preview'
+                fanart.append(fanartdata)
+                if item['strArtistFanart3']:
+                    fanartdata = {}
+                    fanartdata['image'] = item['strArtistFanart3']
+                    fanartdata['preview'] = item['strArtistFanart3'] + '/preview'
+                    fanart.append(fanartdata)
+            artistdata['fanart'] = fanart
+        if item.get('strArtistThumb',''):
+            thumbs = []
+            thumbdata = {}
+            thumbdata['image'] = item['strArtistThumb']
+            thumbdata['preview'] = item['strArtistThumb'] + '/preview'
+            thumbdata['aspect'] = 'thumb'
+            thumbs.append(thumbdata)
+            artistdata['thumb'] = thumbs
+        if item.get('strArtistLogo',''):
+            artistdata['clearlogo'] = item['strArtistLogo']
+            extradata = {}
+            extradata['image'] = item['strArtistLogo']
+            extradata['preview'] = item['strArtistLogo'] + '/preview'
+            extradata['aspect'] = 'clearlogo'
+            extras.append(extradata)
+        if item.get('strArtistClearart',''):
+            artistdata['clearart'] = item['strArtistClearart']
+            extradata = {}
+            extradata['image'] = item['strArtistClearart']
+            extradata['preview'] = item['strArtistClearart'] + '/preview'
+            extradata['aspect'] = 'clearart'
+            extras.append(extradata)
+        if item.get('strArtistWideThumb',''):
+            artistdata['landscape'] = item['strArtistWideThumb']
+            extradata = {}
+            extradata['image'] = item['strArtistWideThumb']
+            extradata['preview'] = item['strArtistWideThumb'] + '/preview'
+            extradata['aspect'] = 'landscape'
+            extras.append(extradata)
+        if item.get('strArtistBanner',''):
+            artistdata['banner'] = item['strArtistBanner']
+            extradata = {}
+            extradata['image'] = item['strArtistBanner']
+            extradata['preview'] = item['strArtistBanner'] + '/preview'
+            extradata['aspect'] = 'banner'
+            extras.append(extradata)
+        if extras:
+            artistdata['extras'] = extras
+        return artistdata
+
+def theaudiodb_artistalbums(data):
+    albums = []
+    albumlist = data.get('album',[])
+    if albumlist:
+        for item in data.get('album',[]):
+            albumdata = {}
+            albumdata['title'] = item['strAlbum']
+            albumdata['year'] = item.get('intYearReleased', '')
+            albums.append(albumdata)
+    return albums
diff --git a/addons/metadata.generic.artists/lib/utils.py b/addons/metadata.generic.artists/lib/utils.py
new file mode 100644
index 000000000000..5d432f01f533
--- /dev/null
+++ b/addons/metadata.generic.artists/lib/utils.py
@@ -0,0 +1,24 @@
+# -*- coding: utf-8 -*-
+
+AUDIODBKEY = '58424d43204d6564696120'
+AUDIODBURL = 'https://www.theaudiodb.com/api/v1/json/%s/%s'
+AUDIODBSEARCH = 'search.php?s=%s'
+AUDIODBDETAILS = 'artist-mb.php?i=%s'
+AUDIODBDISCOGRAPHY = 'discography-mb.php?s=%s'
+
+MUSICBRAINZURL = 'https://musicbrainz.org/ws/2/artist/%s'
+MUSICBRAINZSEARCH = '?query="%s"&fmt=json'
+MUSICBRAINZDETAILS = '%s?inc=url-rels+release-groups&type=album&fmt=json'
+
+DISCOGSKEY = 'zACPgktOmNegwbwKWMaC'
+DISCOGSSECRET = 'wGuSOeMtfdkQxtERKQKPquyBwExSHdQq'
+DISCOGSURL = 'https://api.discogs.com/%s'
+DISCOGSSEARCH = 'database/search?q=%s&type=artist&key=%s&secret=%s'
+DISCOGSDETAILS = 'artists/%i?key=%s&secret=%s'
+DISCOGSDISCOGRAPHY = 'artists/%i/releases?sort=format&page=1&per_page=100&key=%s&secret=%s'
+
+ALLMUSICURL = 'https://www.allmusic.com/%s'
+ALLMUSICSEARCH = 'search/artists/%s'
+
+FANARTVKEY = 'ed4b784f97227358b31ca4dd966a04f1'
+FANARTVURL = 'https://webservice.fanart.tv/v3/music/%s?api_key=%s'
diff --git a/addons/metadata.generic.artists/resources/icon.png b/addons/metadata.generic.artists/resources/icon.png
new file mode 100644
index 0000000000000000000000000000000000000000..25fa698f6784e2b4cf3f05d850ac0d25713d9c6a
GIT binary patch
literal 14308
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
LNuox~IQahpDJ|r-

literal 0
HcmV?d00001

diff --git a/addons/metadata.generic.artists/resources/language/resource.language.en_gb/strings.po b/addons/metadata.generic.artists/resources/language/resource.language.en_gb/strings.po
new file mode 100644
index 000000000000..5c4998f6ff6e
--- /dev/null
+++ b/addons/metadata.generic.artists/resources/language/resource.language.en_gb/strings.po
@@ -0,0 +1,85 @@
+# Kodi Media Center language file
+# Addon Name: Generic Artist Scraper
+# Addon id: metadata.generic.artists
+# Addon Provider: Team Kodi
+msgid ""
+msgstr ""
+"Project-Id-Version: KODI Main\n"
+"Report-Msgid-Bugs-To: https://github.com/xbmc/xbmc/issues\n"
+"POT-Creation-Date: YEAR-MO-DA HO:MI+ZONE\n"
+"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
+"Last-Translator: Kodi Translation Team\n"
+"Language-Team: English (United Kingdom) (http://www.transifex.com/projects/p/kodi-main/language/en_GB/)\n"
+"MIME-Version: 1.0\n"
+"Content-Type: text/plain; charset=UTF-8\n"
+"Content-Transfer-Encoding: 8bit\n"
+"Language: en_GB\n"
+"Plural-Forms: nplurals=2; plural=(n != 1);\n"
+
+msgctxt "#30000"
+msgid "Preferences"
+msgstr ""
+
+msgctxt "#30001"
+msgid "Prefered language for artist biography"
+msgstr ""
+
+msgctxt "#30002"
+msgid "Prefer biography from"
+msgstr ""
+
+msgctxt "#30003"
+msgid "Prefer discography from"
+msgstr ""
+
+msgctxt "#30004"
+msgid "Prefer genres from"
+msgstr ""
+
+msgctxt "#30005"
+msgid "Prefer styles from"
+msgstr ""
+
+msgctxt "#30006"
+msgid "Prefer moods from"
+msgstr ""
+
+msgctxt "#30101"
+msgid "Use Discogs.com"
+msgstr ""
+
+msgctxt "#30102"
+msgid "As fallback only"
+msgstr ""
+
+msgctxt "#30103"
+msgid "Always"
+msgstr ""
+
+msgctxt "#30201"
+msgid "If available, the artist biography will be downloaded in the selected language. It will fallback to english."
+msgstr ""
+
+msgctxt "#30202"
+msgid "Try to get the artist biography using the selected scraper. Other scrapers will be used if the prefered scraper returns no results."
+msgstr ""
+
+msgctxt "#30203"
+msgid "Try to get the artist discography using the selected scraper. Other scrapers will be used if the prefered scraper returns no results."
+msgstr ""
+
+msgctxt "#30204"
+msgid "Try to get genre info using the selected scraper. Other scrapers will be used if the prefered scraper returns no results."
+msgstr ""
+
+msgctxt "#30205"
+msgid "Try to get style info using the selected scraper. Other scrapers will be used if the prefered scraper returns no results."
+msgstr ""
+
+msgctxt "#30206"
+msgid "Try to get mood info using the selected scraper. Other scrapers will be used if the prefered scraper returns no results."
+msgstr ""
+
+msgctxt "#30301"
+msgid "Fallback: only use the discogs scraper if the artist can't be found on MusicBrainz (faster, but could result in less complete results). Always: retrieve info from discogs.com for each artist (slower, but results could be more complete)"
+msgstr ""
diff --git a/addons/metadata.generic.artists/resources/settings.xml b/addons/metadata.generic.artists/resources/settings.xml
new file mode 100644
index 000000000000..53508b1be934
--- /dev/null
+++ b/addons/metadata.generic.artists/resources/settings.xml
@@ -0,0 +1,105 @@
+<?xml version="1.0" ?>
+<settings version="1">
+	<section id="metadata.generic.artists">
+		<category id="general" label="30000">
+			<group id="1">
+				<setting help="30201" id="lang" label="30001" type="string">
+					<level>0</level>
+					<default>EN</default>
+					<control format="string" type="spinner"/>
+					<constraints>
+						<options>
+							<option label="CN">CN</option>
+							<option label="DE">DE</option>
+							<option label="EN">EN</option>
+							<option label="ES">ES</option>
+							<option label="FR">FR</option>
+							<option label="HU">HU</option>
+							<option label="IL">IL</option>
+							<option label="IT">IT</option>
+							<option label="JP">JP</option>
+							<option label="NL">NL</option>
+							<option label="NO">NO</option>
+							<option label="PL">PL</option>
+							<option label="PT">PT</option>
+							<option label="RU">RU</option>
+							<option label="SE">SE</option>
+						</options>
+					</constraints>
+				</setting>
+				<setting help="30202" id="bio" label="30002" type="string">
+					<level>0</level>
+					<default>theaudiodb</default>
+					<control format="string" type="spinner"/>
+					<constraints>
+						<options>
+							<option label="discogs">discogs</option>
+							<option label="theaudiodb">theaudiodb</option>
+						</options>
+					</constraints>
+				</setting>
+				<setting help="30203" id="discog" label="30003" type="string">
+					<level>0</level>
+					<default>allmusic</default>
+					<control format="string" type="spinner"/>
+					<constraints>
+						<options>
+							<option label="allmusic">allmusic</option>
+							<option label="discogs">discogs</option>
+							<option label="musicbrainz">musicbrainz</option>
+							<option label="theaudiodb">theaudiodb</option>
+						</options>
+					</constraints>
+				</setting>
+				<setting help="30204" id="genre" label="30004" type="string">
+					<level>0</level>
+					<default>allmusic</default>
+					<control format="string" type="spinner"/>
+					<constraints>
+						<options>
+							<option label="allmusic">allmusic</option>
+							<option label="theaudiodb">theaudiodb</option>
+						</options>
+					</constraints>
+				</setting>
+				<setting help="30205" id="style" label="30005" type="string">
+					<level>0</level>
+					<default>allmusic</default>
+					<control format="string" type="spinner"/>
+					<constraints>
+						<options>
+							<option label="allmusic">allmusic</option>
+							<option label="theaudiodb">theaudiodb</option>
+						</options>
+					</constraints>
+				</setting>
+				<setting help="30206" id="mood" label="30006" type="string">
+					<level>0</level>
+					<default>allmusic</default>
+					<control format="string" type="spinner"/>
+					<constraints>
+						<options>
+							<option label="allmusic">allmusic</option>
+							<option label="theaudiodb">theaudiodb</option>
+						</options>
+					</constraints>
+				</setting>
+			</group>
+		</category>
+		<category id="options" label="33063">
+			<group id="1">
+				<setting help="30301" id="usediscogs" label="30101" type="integer">
+					<level>0</level>
+					<default>0</default>
+					<control format="string" type="spinner"/>
+					<constraints>
+						<options>
+							<option label="30102">0</option>
+							<option label="30103">1</option>
+						</options>
+					</constraints>
+				</setting>
+			</group>
+		</category>
+	</section>
+</settings>

From 383d456c4e53abb33032d40c5e3377707e938c6f Mon Sep 17 00:00:00 2001
From: ronie <ronie@kodi.tv>
Date: Mon, 4 Mar 2019 02:08:30 +0100
Subject: [PATCH 3/5] remove outdated demo scrapers

---
 addons/metadata.demo.albums/addon.xml  |  17 ----
 addons/metadata.demo.albums/demo.py    | 120 -------------------------
 addons/metadata.demo.artists/addon.xml |  17 ----
 addons/metadata.demo.artists/demo.py   | 116 ------------------------
 4 files changed, 270 deletions(-)
 delete mode 100644 addons/metadata.demo.albums/addon.xml
 delete mode 100644 addons/metadata.demo.albums/demo.py
 delete mode 100644 addons/metadata.demo.artists/addon.xml
 delete mode 100644 addons/metadata.demo.artists/demo.py

diff --git a/addons/metadata.demo.albums/addon.xml b/addons/metadata.demo.albums/addon.xml
deleted file mode 100644
index 023c22fc2372..000000000000
--- a/addons/metadata.demo.albums/addon.xml
+++ /dev/null
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
-<addon id="metadata.demo.albums"
-       name="Demo albums python scraper"
-       version="1.0.0"
-       provider-name="spiff">
-  <requires>
-    <import addon="xbmc.metadata" version="2.1.0"/>
-  </requires>
-  <extension point="xbmc.metadata.scraper.albums"
-             library="demo.py"/>
-  <extension point="xbmc.addon.metadata">
-    <summary lang="en">Demo albums python scraper</summary>
-    <description lang="en">Demo albums python scraper.</description>
-    <platform>all</platform>
-    <license>GPL v2.0</license>
-  </extension>
-</addon>
diff --git a/addons/metadata.demo.albums/demo.py b/addons/metadata.demo.albums/demo.py
deleted file mode 100644
index 8ff9542f3991..000000000000
--- a/addons/metadata.demo.albums/demo.py
+++ /dev/null
@@ -1,120 +0,0 @@
-#!/usr/bin/env python
-# -*- coding: UTF-8 -*-
-
-import xbmcplugin,xbmcgui,xbmc,xbmcaddon
-import os,sys,urllib
-
-def get_params():
-        param=[]
-        paramstring=sys.argv[2]
-        if len(paramstring)>=2:
-                params=sys.argv[2]
-                cleanedparams=params.replace('?','')
-                if (params[len(params)-1]=='/'):
-                        params=params[0:len(params)-2]
-                pairsofparams=cleanedparams.split('&')
-                param={}
-                for i in range(len(pairsofparams)):
-                        splitparams={}
-                        splitparams=pairsofparams[i].split('=')
-                        if (len(splitparams))==2:
-                                param[splitparams[0]]=splitparams[1]
-                                
-        return param
-
-
-params=get_params()
-print(params)
-
-try:
-    action=urllib.unquote_plus(params["action"])
-except:
-    pass
-
-print ("Action: "+action)
-
-if action == 'find':
-    try:
-        artist=urllib.unquote_plus(params["artist"])
-        album=urllib.unquote_plus(params["title"])
-    except:
-        pass
-
-    print('Find album with title %s from artist %s' %(album, artist))
-    liz=xbmcgui.ListItem('Demo album 1', thumbnailImage='DefaultAlbum.png', offscreen=True)
-    liz.setProperty('relevance', '0.5')
-    liz.setProperty('album.artist', artist)
-    liz.setProperty('album.year', '2005')
-    xbmcplugin.addDirectoryItem(handle=int(sys.argv[1]), url="/path/to/album", listitem=liz, isFolder=True)
-
-    liz=xbmcgui.ListItem('Demo album 2', thumbnailImage='DefaultVideo.png', offscreen=True)
-    liz.setProperty('relevance', '0.3')
-    liz.setProperty('album.artist', 'spiff')
-    liz.setProperty('album.year', '2016')
-    xbmcplugin.addDirectoryItem(handle=int(sys.argv[1]), url="/path/to/album2", listitem=liz, isFolder=True)
-elif action == 'getdetails':
-    try:
-        url=urllib.unquote_plus(params["url"])
-    except:
-        pass
-
-    if url == '/path/to/album':
-        liz=xbmcgui.ListItem('Demo album 1', offscreen=True)
-        liz.setProperty('album.musicbrainzid', '123')
-        liz.setProperty('album.artists', '2')
-        liz.setProperty('album.artist1.name', 'Jan')
-        liz.setProperty('album.artist1.musicbrainzid', '456')
-        liz.setProperty('album.artist2.name', 'Banan')
-        liz.setProperty('album.artist2.musicbrainzid', '789')
-        liz.setProperty('album.artist_description', 'I hate this album.')
-        liz.setProperty('album.genre', 'rock / pop')
-        liz.setProperty('album.styles', 'light / heavy')
-        liz.setProperty('album.moods', 'angry / happy')
-        liz.setProperty('album.themes', 'Morbid sexual things.. And urmumz.')
-        liz.setProperty('album.compiliation', 'true')
-        liz.setProperty('album.review', 'Somebody should die for making this')
-        liz.setProperty('album.release_date', '2005-01-02')
-        liz.setProperty('album.label', 'ArtistExploitation inc')
-        liz.setProperty('album.type', 'what is this?')
-        liz.setProperty('album.release_type', 'single')
-        liz.setProperty('album.year', '2005')
-        liz.setProperty('album.rating', '2.5')
-        liz.setProperty('album.userrating', '4.5')
-        liz.setProperty('album.votes', '100')
-        liz.setProperty('album.thumbs', '2')
-        liz.setProperty('album.thumb1.url', 'DefaultBackFanart.png')
-        liz.setProperty('album.thumb1.aspect', '1.78')
-        liz.setProperty('album.thumb2.url', '/home/akva/Pictures/hawaii-shirt.png')
-        liz.setProperty('album.thumb2.aspect', '2.35')
-        xbmcplugin.setResolvedUrl(handle=int(sys.argv[1]), succeeded=True, listitem=liz)
-    elif url == '/path/to/album2':
-        liz=xbmcgui.ListItem('Demo album 2', offscreen=True)
-        liz.setProperty('album.musicbrainzid', '123')
-        liz.setProperty('album.artists', '2')
-        liz.setProperty('album.artist1.name', 'Heise')
-        liz.setProperty('album.artist1.musicbrainzid', '456')
-        liz.setProperty('album.artist2.name', 'Kran')
-        liz.setProperty('album.artist2.musicbrainzid', '789')
-        liz.setProperty('album.artist_description', 'I love this album.')
-        liz.setProperty('album.genre', 'classical / jazz')
-        liz.setProperty('album.styles', 'yay / hurrah')
-        liz.setProperty('album.moods', 'sad / excited')
-        liz.setProperty('album.themes', 'Nice things.. And unicorns.')
-        liz.setProperty('album.compiliation', 'false')
-        liz.setProperty('album.review', 'Somebody should be rewarded for making this')
-        liz.setProperty('album.release_date', '2015-01-02')
-        liz.setProperty('album.label', 'Artists inc')
-        liz.setProperty('album.type', 'what is that?')
-        liz.setProperty('album.release_type', 'album')
-        liz.setProperty('album.year', '2015')
-        liz.setProperty('album.rating', '4.5')
-        liz.setProperty('album.userrating', '3.5')
-        liz.setProperty('album.votes', '200')
-        liz.setProperty('album.thumbs', '2')
-        liz.setProperty('album.thumb1.url', 'DefaultBackFanart.png')
-        liz.setProperty('album.thumb1.aspect', '1.78')
-        liz.setProperty('album.thumb2.url', '/home/akva/Pictures/hawaii-shirt.png')
-        liz.setProperty('album.thumb2.aspect', '2.35')
-        xbmcplugin.setResolvedUrl(handle=int(sys.argv[1]), succeeded=True, listitem=liz)
-
-xbmcplugin.endOfDirectory(int(sys.argv[1]))
diff --git a/addons/metadata.demo.artists/addon.xml b/addons/metadata.demo.artists/addon.xml
deleted file mode 100644
index 59b6f7d0bb44..000000000000
--- a/addons/metadata.demo.artists/addon.xml
+++ /dev/null
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
-<addon id="metadata.demo.artists"
-       name="Demo artists python scraper"
-       version="1.0.0"
-       provider-name="spiff">
-  <requires>
-    <import addon="xbmc.metadata" version="2.1.0"/>
-  </requires>
-  <extension point="xbmc.metadata.scraper.artists"
-             library="demo.py"/>
-  <extension point="xbmc.addon.metadata">
-    <summary lang="en">Demo artists python scraper</summary>
-    <description lang="en">Demo artists python scraper</description>
-    <platform>all</platform>
-    <license>GPL v2.0</license>
-  </extension>
-</addon>
diff --git a/addons/metadata.demo.artists/demo.py b/addons/metadata.demo.artists/demo.py
deleted file mode 100644
index 37a31bef6505..000000000000
--- a/addons/metadata.demo.artists/demo.py
+++ /dev/null
@@ -1,116 +0,0 @@
-#!/usr/bin/env python
-# -*- coding: UTF-8 -*-
-
-import xbmcplugin,xbmcgui,xbmc,xbmcaddon
-import os,sys,urllib
-
-def get_params():
-        param=[]
-        paramstring=sys.argv[2]
-        if len(paramstring)>=2:
-                params=sys.argv[2]
-                cleanedparams=params.replace('?','')
-                if (params[len(params)-1]=='/'):
-                        params=params[0:len(params)-2]
-                pairsofparams=cleanedparams.split('&')
-                param={}
-                for i in range(len(pairsofparams)):
-                        splitparams={}
-                        splitparams=pairsofparams[i].split('=')
-                        if (len(splitparams))==2:
-                                param[splitparams[0]]=splitparams[1]
-                                
-        return param
-
-
-params=get_params()
-
-try:
-    action=urllib.unquote_plus(params["action"])
-except:
-    pass
-
-if action == 'find':
-    try:
-        artist=urllib.unquote_plus(params["artist"])
-    except:
-        pass
-
-    print('Find artist with name %s' %(artist))
-    liz=xbmcgui.ListItem('Demo artist 1', thumbnailImage='DefaultAlbum.png', offscreen=True)
-    liz.setProperty('artist.genre', 'rock / pop')
-    liz.setProperty('artist.born', '2002')
-    xbmcplugin.addDirectoryItem(handle=int(sys.argv[1]), url="/path/to/artist", listitem=liz, isFolder=True)
-
-    liz=xbmcgui.ListItem('Demo artist 2', thumbnailImage='DefaultAlbum.png', offscreen=True)
-    liz.setProperty('artist.genre', 'classical / jazz')
-    liz.setProperty('artist.born', '2012')
-    xbmcplugin.addDirectoryItem(handle=int(sys.argv[1]), url="/path/to/artist2", listitem=liz, isFolder=True)
-elif action == 'resolveid':
-    liz=xbmcgui.ListItem(path='/path/to/artist2', offscreen=True)
-    xbmcplugin.setResolvedUrl(handle=int(sys.argv[1]), succeeded=True, listitem=liz)
-elif action == 'getdetails':
-    url=urllib.unquote_plus(params["url"])
-    print('Artist with url %s' %(url))
-    if url == '/path/to/artist':
-        liz=xbmcgui.ListItem('Demo artist 1', offscreen=True)
-        liz.setProperty('artist.musicbrainzid', '123')
-        liz.setProperty('artist.genre', 'rock / pop')
-        liz.setProperty('artist.styles', 'heavy / light')
-        liz.setProperty('artist.moods', 'angry / happy')
-        liz.setProperty('artist.years_active', '1980 / 2012')
-        liz.setProperty('artist.instruments', 'guitar / drums')
-        liz.setProperty('artist.born', '1/1/2001')
-        liz.setProperty('artist.formed', '1980')
-        liz.setProperty('artist.biography', 'Wrote lots of crap. Likes to torture cats.')
-        liz.setProperty('artist.died', 'Tomorrow.')
-        liz.setProperty('artist.disbanded', 'Dec 21 2012')
-        liz.setProperty('artist.fanarts', '2')
-        liz.setProperty('artist.fanart1.url', 'DefaultBackFanart.png')
-        liz.setProperty('artist.fanart1.preview', 'DefaultBackFanart.png')
-        liz.setProperty('artist.fanart1.dim', '720')
-        liz.setProperty('artist.fanart2.url', '/home/akva/Pictures/hawaii-shirt.png')
-        liz.setProperty('artist.fanart2.preview', '/home/akva/Pictures/hawaii-shirt.png')
-        liz.setProperty('artist.fanart2.dim', '1080')
-        liz.setProperty('artist.albums', '2')
-        liz.setProperty('artist.album1.title', 'Demo album 1')
-        liz.setProperty('artist.album1.year', '2002')
-        liz.setProperty('artist.album2.title', 'Demo album 2')
-        liz.setProperty('artist.album2.year', '2007')
-        liz.setProperty('artist.thumbs', '2')
-        liz.setProperty('artist.thumb1.url', 'DefaultBackFanart.png')
-        liz.setProperty('artist.thumb1.aspect', '1.78')
-        liz.setProperty('artist.thumb2.url', '/home/akva/Pictures/hawaii-shirt.png')
-        liz.setProperty('artist.thumb2.aspect', '2.35')
-        xbmcplugin.setResolvedUrl(handle=int(sys.argv[1]), succeeded=True, listitem=liz)
-    if url == '/path/to/artist2':
-        liz=xbmcgui.ListItem('Demo artist 2', thumbnailImage='DefaultAlbum.png', offscreen=True)
-        liz.setProperty('artist.musicbrainzid', '456')
-        liz.setProperty('artist.genre', 'classical / jazz')
-        liz.setProperty('artist.styles', 'morbid / funny')
-        liz.setProperty('artist.moods', 'fast / dance')
-        liz.setProperty('artist.years_active', '1990 / 2016')
-        liz.setProperty('artist.instruments', 'bass / flute')
-        liz.setProperty('artist.born', '2/2/1971')
-        liz.setProperty('artist.formed', '1990')
-        liz.setProperty('artist.biography', 'Tortured lots of cats. Likes crap.')
-        liz.setProperty('artist.died', 'Yesterday.')
-        liz.setProperty('artist.disbanded', 'Nov 20 1980')
-        liz.setProperty('artist.fanarts', '2')
-        liz.setProperty('artist.fanart1.thumb', 'DefaultBackFanart.png')
-        liz.setProperty('artist.fanart1.dim', '720')
-        liz.setProperty('artist.fanart2.thumb', '/home/akva/Pictures/gnome-tshirt.png')
-        liz.setProperty('artist.fanart2.dim', '1080')
-        liz.setProperty('artist.albums', '2')
-        liz.setProperty('artist.album1.title', 'Demo album 1')
-        liz.setProperty('artist.album1.year', '2002')
-        liz.setProperty('artist.album2.title', 'Demo album 2')
-        liz.setProperty('artist.album2.year', '2005')
-        liz.setProperty('artist.thumbs', '2')
-        liz.setProperty('artist.thumb1.url', 'DefaultBackFanart.png')
-        liz.setProperty('artist.thumb1.aspect', '1.78')
-        liz.setProperty('artist.thumb2.url', '/home/akva/Pictures/hawaii-shirt.png')
-        liz.setProperty('artist.thumb2.aspect', '2.35')
-        xbmcplugin.setResolvedUrl(handle=int(sys.argv[1]), succeeded=True, listitem=liz)
-
-xbmcplugin.endOfDirectory(int(sys.argv[1]))

From b39d529c1f26db1294b83cf0306b54826bc88a30 Mon Sep 17 00:00:00 2001
From: ronie <ronie@kodi.tv>
Date: Tue, 21 Jan 2020 01:07:27 +0100
Subject: [PATCH 4/5] update addon installdata

---
 cmake/installdata/common/addons.txt | 2 ++
 system/addon-manifest.xml           | 2 ++
 2 files changed, 4 insertions(+)

diff --git a/cmake/installdata/common/addons.txt b/cmake/installdata/common/addons.txt
index 13dbab39ec5b..897420faa7a4 100644
--- a/cmake/installdata/common/addons.txt
+++ b/cmake/installdata/common/addons.txt
@@ -39,6 +39,8 @@ addons/metadata.common.imdb.com/*
 addons/metadata.common.musicbrainz.org/*
 addons/metadata.common.theaudiodb.com/*
 addons/metadata.common.themoviedb.org/*
+addons/metadata.generic.albums/*
+addons/metadata.generic.artists/*
 addons/metadata.themoviedb.org/*
 addons/metadata.tvshows.themoviedb.org/*
 addons/kodi.vfs/*
diff --git a/system/addon-manifest.xml b/system/addon-manifest.xml
index aeb0cc682077..dbdcf76f1df4 100644
--- a/system/addon-manifest.xml
+++ b/system/addon-manifest.xml
@@ -29,6 +29,8 @@
   <addon>metadata.common.musicbrainz.org</addon>
   <addon>metadata.common.theaudiodb.com</addon>
   <addon>metadata.common.themoviedb.org</addon>
+  <addon>metadata.generic.albums</addon>
+  <addon>metadata.generic.artists</addon>
   <addon>metadata.local</addon>
   <addon>metadata.themoviedb.org</addon>
   <addon>metadata.tvshows.themoviedb.org</addon>

From 4f3f490123e5fe9b5bb20ff18debfc3cafb3038a Mon Sep 17 00:00:00 2001
From: ronie <ronie@kodi.tv>
Date: Tue, 2 Jun 2020 04:14:11 +0200
Subject: [PATCH 5/5] set python scrapers as default on new install

---
 system/settings/settings.xml | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/system/settings/settings.xml b/system/settings/settings.xml
index 54f7e4c931fc..75370843e216 100755
--- a/system/settings/settings.xml
+++ b/system/settings/settings.xml
@@ -1136,7 +1136,7 @@
         </setting>
         <setting id="musiclibrary.albumsscraper" type="addon" label="20193" help="36257">
           <level>1</level>
-          <default>metadata.album.universal</default>
+          <default>metadata.generic.albums</default>
           <constraints>
             <addontype>xbmc.metadata.scraper.albums</addontype>
           </constraints>
@@ -1146,7 +1146,7 @@
         </setting>
         <setting id="musiclibrary.artistsscraper" type="addon" label="20194" help="36258">
           <level>1</level>
-          <default>metadata.artists.universal</default>
+          <default>metadata.generic.artists</default>
           <constraints>
             <addontype>xbmc.metadata.scraper.artists</addontype>
           </constraints>
