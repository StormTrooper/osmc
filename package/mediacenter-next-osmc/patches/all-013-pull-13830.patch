From 42ddcbae5ea0e8fb3d6009c374cce174ab42284f Mon Sep 17 00:00:00 2001
From: Kai Sommerfeld <kai.sommerfeld@gmx.com>
Date: Mon, 30 Apr 2018 08:36:31 +0200
Subject: [PATCH] [PVR] CPVRSettings: All settings instances must be re-inited
 on profile switch.

---
 xbmc/pvr/PVRManager.cpp  | 23 +++++++++++------------
 xbmc/pvr/PVRManager.h    |  2 +-
 xbmc/pvr/PVRSettings.cpp | 17 +++++++++++++++++
 xbmc/pvr/PVRSettings.h   |  6 +++++-
 4 files changed, 34 insertions(+), 14 deletions(-)

diff --git a/xbmc/pvr/PVRManager.cpp b/xbmc/pvr/PVRManager.cpp
index 55de988cc6f2..a5821c6cad2d 100644
--- a/xbmc/pvr/PVRManager.cpp
+++ b/xbmc/pvr/PVRManager.cpp
@@ -141,7 +141,13 @@ CPVRManager::CPVRManager(void) :
     m_bFirstStart(true),
     m_bEpgsCreated(false),
     m_managerState(ManagerStateStopped),
-    m_parentalTimer(new CStopWatch)
+    m_parentalTimer(new CStopWatch),
+    m_settings({
+      CSettings::SETTING_PVRPOWERMANAGEMENT_ENABLED,
+      CSettings::SETTING_PVRPOWERMANAGEMENT_SETWAKEUPCMD,
+      CSettings::SETTING_PVRPARENTAL_ENABLED,
+      CSettings::SETTING_PVRPARENTAL_DURATION
+    })
 {
   CAnnouncementManager::GetInstance().AddAnnouncer(this);
 }
@@ -243,13 +249,6 @@ void CPVRManager::ResetProperties(void)
 
 void CPVRManager::Init()
 {
-  m_settings.reset(new CPVRSettings({
-    CSettings::SETTING_PVRPOWERMANAGEMENT_ENABLED,
-    CSettings::SETTING_PVRPOWERMANAGEMENT_SETWAKEUPCMD,
-    CSettings::SETTING_PVRPARENTAL_ENABLED,
-    CSettings::SETTING_PVRPARENTAL_DURATION
-  }));
-
   // initial check for enabled addons
   // if at least one pvr addon is enabled, PVRManager start up
   CJobManager::GetInstance().AddJob(new CPVRStartupJob(), nullptr);
@@ -473,10 +472,10 @@ void CPVRManager::Process(void)
 bool CPVRManager::SetWakeupCommand(void)
 {
 #if !defined(TARGET_DARWIN_IOS) && !defined(TARGET_WINDOWS_STORE)
-  if (!m_settings->GetBoolValue(CSettings::SETTING_PVRPOWERMANAGEMENT_ENABLED))
+  if (!m_settings.GetBoolValue(CSettings::SETTING_PVRPOWERMANAGEMENT_ENABLED))
     return false;
 
-  const std::string strWakeupCommand(m_settings->GetStringValue(CSettings::SETTING_PVRPOWERMANAGEMENT_SETWAKEUPCMD));
+  const std::string strWakeupCommand(m_settings.GetStringValue(CSettings::SETTING_PVRPOWERMANAGEMENT_SETWAKEUPCMD));
   if (!strWakeupCommand.empty() && m_timers)
   {
     time_t iWakeupTime;
@@ -678,11 +677,11 @@ bool CPVRManager::IsParentalLocked(const CPVRChannelPtr &channel)
   if (// different channel
       (!currentChannel || channel != currentChannel) &&
       // parental control enabled
-      m_settings->GetBoolValue(CSettings::SETTING_PVRPARENTAL_ENABLED) &&
+      m_settings.GetBoolValue(CSettings::SETTING_PVRPARENTAL_ENABLED) &&
       // channel is locked
       channel && channel->IsLocked())
   {
-    float parentalDurationMs = m_settings->GetIntValue(CSettings::SETTING_PVRPARENTAL_DURATION) * 1000.0f;
+    float parentalDurationMs = m_settings.GetIntValue(CSettings::SETTING_PVRPARENTAL_DURATION) * 1000.0f;
     bReturn = m_parentalTimer &&
         (!m_parentalTimer->IsRunning() ||
           m_parentalTimer->GetElapsedMilliseconds() > parentalDurationMs);
diff --git a/xbmc/pvr/PVRManager.h b/xbmc/pvr/PVRManager.h
index 2f27647a289f..ba89c99b60d8 100644
--- a/xbmc/pvr/PVRManager.h
+++ b/xbmc/pvr/PVRManager.h
@@ -531,7 +531,7 @@ namespace PVR
     CEventSource<PVREvent> m_events;
 
     CPVRActionListener m_actionListener;
-    std::unique_ptr<CPVRSettings> m_settings;
+    CPVRSettings m_settings;
 
     CPVRChannelPtr m_playingChannel;
     CPVRRecordingPtr m_playingRecording;
diff --git a/xbmc/pvr/PVRSettings.cpp b/xbmc/pvr/PVRSettings.cpp
index dfceca1bdd72..b4ef9a938ab7 100644
--- a/xbmc/pvr/PVRSettings.cpp
+++ b/xbmc/pvr/PVRSettings.cpp
@@ -35,12 +35,14 @@ using namespace PVR;
 CPVRSettings::CPVRSettings(const std::set<std::string> &settingNames)
 {
   Init(settingNames);
+  CServiceBroker::GetSettings().GetSettingsManager()->RegisterSettingsHandler(this);
   CServiceBroker::GetSettings().RegisterCallback(this, settingNames);
 }
 
 CPVRSettings::~CPVRSettings()
 {
   CServiceBroker::GetSettings().UnregisterCallback(this);
+  CServiceBroker::GetSettings().GetSettingsManager()->UnregisterSettingsHandler(this);
 }
 
 void CPVRSettings::Init(const std::set<std::string> &settingNames)
@@ -59,6 +61,21 @@ void CPVRSettings::Init(const std::set<std::string> &settingNames)
   }
 }
 
+void CPVRSettings::OnSettingsLoaded()
+{
+  std::set<std::string> settingNames;
+
+  {
+    CSingleLock lock(m_critSection);
+    for (const auto& settingName : m_settings)
+      settingNames.insert(settingName.first);
+
+    m_settings.clear();
+  }
+
+  Init(settingNames);
+}
+
 void CPVRSettings::OnSettingChanged(std::shared_ptr<const CSetting> setting)
 {
   if (setting == nullptr)
diff --git a/xbmc/pvr/PVRSettings.h b/xbmc/pvr/PVRSettings.h
index e355cf3a8e0e..09356dd0eb71 100644
--- a/xbmc/pvr/PVRSettings.h
+++ b/xbmc/pvr/PVRSettings.h
@@ -24,16 +24,20 @@
 #include <utility>
 
 #include "settings/lib/ISettingCallback.h"
+#include "settings/lib/ISettingsHandler.h"
 #include "settings/lib/Setting.h"
 
 namespace PVR
 {
-  class CPVRSettings : private ISettingCallback
+  class CPVRSettings : private ISettingsHandler, private ISettingCallback
   {
   public:
     explicit CPVRSettings(const std::set<std::string> & settingNames);
     ~CPVRSettings() override;
 
+    // ISettingsHandler implementation
+    void OnSettingsLoaded() override;
+
     // ISettingCallback implementation
     void OnSettingChanged(std::shared_ptr<const CSetting> setting) override;
 
