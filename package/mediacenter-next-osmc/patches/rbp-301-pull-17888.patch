From aba6217882b2ae4c07a2365fb6c8614acaf252e8 Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Sun, 17 May 2020 19:43:34 +0200
Subject: [PATCH 1/7] [addons][imagedecoder] clang cleanup on addon header

To have the header ready on next changes. In working code
is nothing changed.
---
 .../kodi/addon-instance/ImageDecoder.h        | 221 ++++++++++--------
 1 file changed, 121 insertions(+), 100 deletions(-)

diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/ImageDecoder.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/ImageDecoder.h
index 35ff48cc5b14..ff159d162183 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/ImageDecoder.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/ImageDecoder.h
@@ -10,7 +10,13 @@
 
 #include "../AddonBase.h"
 
-namespace kodi { namespace addon { class CInstanceImageDecoder; }}
+namespace kodi
+{
+namespace addon
+{
+class CInstanceImageDecoder;
+}
+} // namespace kodi
 
 extern "C"
 {
@@ -29,14 +35,18 @@ extern "C"
   typedef struct KodiToAddonFuncTable_ImageDecoder
   {
     kodi::addon::CInstanceImageDecoder* addonInstance;
-    bool (__cdecl* load_image_from_memory) (const AddonInstance_ImageDecoder* instance,
-                                            unsigned char* buffer, unsigned int buf_size,
-                                            unsigned int* width, unsigned int* height);
-
-    bool (__cdecl* decode) (const AddonInstance_ImageDecoder* instance,
-                            unsigned char* pixels,
-                            unsigned int width, unsigned int height,
-                            unsigned int pitch, unsigned int format);
+    bool(__cdecl* load_image_from_memory)(const AddonInstance_ImageDecoder* instance,
+                                          unsigned char* buffer,
+                                          unsigned int buf_size,
+                                          unsigned int* width,
+                                          unsigned int* height);
+
+    bool(__cdecl* decode)(const AddonInstance_ImageDecoder* instance,
+                          unsigned char* pixels,
+                          unsigned int width,
+                          unsigned int height,
+                          unsigned int pitch,
+                          unsigned int format);
   } KodiToAddonFuncTable_ImageDecoder;
 
   typedef struct AddonInstance_ImageDecoder
@@ -61,98 +71,109 @@ namespace kodi
 namespace addon
 {
 
-  class CInstanceImageDecoder : public IAddonInstance
+class CInstanceImageDecoder : public IAddonInstance
+{
+public:
+  //==========================================================================
+  /// @brief Class constructor
+  ///
+  /// @param[in] instance             The from Kodi given instance given be
+  ///                                 add-on CreateInstance call with instance
+  ///                                 id ADDON_INSTANCE_IMAGEDECODER.
+  /// @param[in] kodiVersion [opt] Version used in Kodi for this instance, to
+  ///                        allow compatibility to older Kodi versions.
+  ///                        @note Recommended to set.
+  ///
+  explicit CInstanceImageDecoder(KODI_HANDLE instance, const std::string& kodiVersion = "")
+    : IAddonInstance(ADDON_INSTANCE_IMAGEDECODER,
+                     !kodiVersion.empty() ? kodiVersion
+                                          : GetKodiTypeVersion(ADDON_INSTANCE_IMAGEDECODER))
   {
-  public:
-    //==========================================================================
-    /// @brief Class constructor
-    ///
-    /// @param[in] instance             The from Kodi given instance given be
-    ///                                 add-on CreateInstance call with instance
-    ///                                 id ADDON_INSTANCE_IMAGEDECODER.
-    /// @param[in] kodiVersion [opt] Version used in Kodi for this instance, to
-    ///                        allow compatibility to older Kodi versions.
-    ///                        @note Recommended to set.
-    ///
-    explicit CInstanceImageDecoder(KODI_HANDLE instance, const std::string& kodiVersion = "")
-      : IAddonInstance(ADDON_INSTANCE_IMAGEDECODER,
-                       !kodiVersion.empty() ? kodiVersion
-                                            : GetKodiTypeVersion(ADDON_INSTANCE_IMAGEDECODER))
-    {
-      if (CAddonBase::m_interface->globalSingleInstance != nullptr)
-        throw std::logic_error("kodi::addon::CInstanceImageDecoder: Creation of multiple together with single instance way is not allowed!");
-
-      SetAddonStruct(instance);
-    }
-    //--------------------------------------------------------------------------
-
-    ~CInstanceImageDecoder() override = default;
-
-    //==========================================================================
-    /// @brief Initialize an encoder
-    ///
-    /// @param[in] buffer The data to read from memory
-    /// @param[in] bufSize The buffer size
-    /// @param[in,out] width The optimal width of image on entry, obtained width on return
-    /// @param[in,out] height The optimal height of image, actual obtained height on return
-    /// @return true if successful done, false on error
-    ///
-    virtual bool LoadImageFromMemory(unsigned char* buffer, unsigned int bufSize,
-                                     unsigned int& width, unsigned int& height) = 0;
-    //--------------------------------------------------------------------------
-
-    //==========================================================================
-    /// @brief Decode previously loaded image
-    ///
-    /// @param[in] pixels Output buffer
-    /// @param[in] width Width of output image
-    /// @param[in] height Height of output image
-    /// @param[in] pitch Pitch of output image
-    /// @param[in] format Format of output image
-    /// @return true if successful done, false on error
-    ///
-    virtual bool Decode(unsigned char* pixels,
-                        unsigned int width, unsigned int height,
-                        unsigned int pitch, ImageFormat format) = 0;
-    //--------------------------------------------------------------------------
-
-    //==========================================================================
-    /// @brief Get the wanted mime type from Kodi
-    ///
-    /// @return the mimetype wanted from Kodi
-    ///
-    inline std::string MimeType() { return m_instanceData->props.mimetype; }
-    //--------------------------------------------------------------------------
-
-  private:
-    void SetAddonStruct(KODI_HANDLE instance)
-    {
-      if (instance == nullptr)
-        throw std::logic_error("kodi::addon::CInstanceImageDecoder: Creation with empty addon structure not allowed, table must be given from Kodi!");
-
-      m_instanceData = static_cast<AddonInstance_ImageDecoder*>(instance);
-      m_instanceData->toAddon.addonInstance = this;
-      m_instanceData->toAddon.load_image_from_memory = ADDON_LoadImageFromMemory;
-      m_instanceData->toAddon.decode = ADDON_Decode;
-    }
-
-    inline static bool ADDON_LoadImageFromMemory(const AddonInstance_ImageDecoder* instance,
-                                                 unsigned char* buffer, unsigned int bufSize,
-                                                 unsigned int* width, unsigned int* height)
-    {
-      return instance->toAddon.addonInstance->LoadImageFromMemory(buffer, bufSize, *width, *height);
-    }
-
-    inline static bool ADDON_Decode(const AddonInstance_ImageDecoder* instance,
-                                    unsigned char* pixels,
-                                    unsigned int width, unsigned int height,
-                                    unsigned int pitch, unsigned int format)
-    {
-      return instance->toAddon.addonInstance->Decode(pixels, width, height, pitch, static_cast<ImageFormat>(format));
-    }
-
-    AddonInstance_ImageDecoder* m_instanceData;
-  };
+    if (CAddonBase::m_interface->globalSingleInstance != nullptr)
+      throw std::logic_error("kodi::addon::CInstanceImageDecoder: Creation of multiple together "
+                             "with single instance way is not allowed!");
+
+    SetAddonStruct(instance);
+  }
+  //--------------------------------------------------------------------------
+
+  ~CInstanceImageDecoder() override = default;
+
+  //==========================================================================
+  /// @brief Initialize an encoder
+  ///
+  /// @param[in] buffer The data to read from memory
+  /// @param[in] bufSize The buffer size
+  /// @param[in,out] width The optimal width of image on entry, obtained width on return
+  /// @param[in,out] height The optimal height of image, actual obtained height on return
+  /// @return true if successful done, false on error
+  ///
+  virtual bool LoadImageFromMemory(unsigned char* buffer,
+                                   unsigned int bufSize,
+                                   unsigned int& width,
+                                   unsigned int& height) = 0;
+  //--------------------------------------------------------------------------
+
+  //==========================================================================
+  /// @brief Decode previously loaded image
+  ///
+  /// @param[in] pixels Output buffer
+  /// @param[in] width Width of output image
+  /// @param[in] height Height of output image
+  /// @param[in] pitch Pitch of output image
+  /// @param[in] format Format of output image
+  /// @return true if successful done, false on error
+  ///
+  virtual bool Decode(unsigned char* pixels,
+                      unsigned int width,
+                      unsigned int height,
+                      unsigned int pitch,
+                      ImageFormat format) = 0;
+  //--------------------------------------------------------------------------
+
+  //==========================================================================
+  /// @brief Get the wanted mime type from Kodi
+  ///
+  /// @return the mimetype wanted from Kodi
+  ///
+  inline std::string MimeType() { return m_instanceData->props.mimetype; }
+  //--------------------------------------------------------------------------
+
+private:
+  void SetAddonStruct(KODI_HANDLE instance)
+  {
+    if (instance == nullptr)
+      throw std::logic_error("kodi::addon::CInstanceImageDecoder: Creation with empty addon "
+                             "structure not allowed, table must be given from Kodi!");
+
+    m_instanceData = static_cast<AddonInstance_ImageDecoder*>(instance);
+    m_instanceData->toAddon.addonInstance = this;
+    m_instanceData->toAddon.load_image_from_memory = ADDON_LoadImageFromMemory;
+    m_instanceData->toAddon.decode = ADDON_Decode;
+  }
+
+  inline static bool ADDON_LoadImageFromMemory(const AddonInstance_ImageDecoder* instance,
+                                               unsigned char* buffer,
+                                               unsigned int bufSize,
+                                               unsigned int* width,
+                                               unsigned int* height)
+  {
+    return instance->toAddon.addonInstance->LoadImageFromMemory(buffer, bufSize, *width, *height);
+  }
+
+  inline static bool ADDON_Decode(const AddonInstance_ImageDecoder* instance,
+                                  unsigned char* pixels,
+                                  unsigned int width,
+                                  unsigned int height,
+                                  unsigned int pitch,
+                                  unsigned int format)
+  {
+    return instance->toAddon.addonInstance->Decode(pixels, width, height, pitch,
+                                                   static_cast<ImageFormat>(format));
+  }
+
+  AddonInstance_ImageDecoder* m_instanceData;
+};
 
 } /* namespace addon */
 } /* namespace kodi */

From 4e738be5377c0108d0717154272a97ecdd5c6fd4 Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Sun, 17 May 2020 19:44:07 +0200
Subject: [PATCH 2/7] [addons][imagedecoder] don't pass C++ class within "C"
 interface

Before was the class direct exchanged as value between Kodi and addon.
This breaks "C" compatibility and not match a working ABI style
---
 .../include/kodi/addon-instance/ImageDecoder.h  | 17 +++++------------
 1 file changed, 5 insertions(+), 12 deletions(-)

diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/ImageDecoder.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/ImageDecoder.h
index ff159d162183..94520f8a7dd9 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/ImageDecoder.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/ImageDecoder.h
@@ -10,14 +10,6 @@
 
 #include "../AddonBase.h"
 
-namespace kodi
-{
-namespace addon
-{
-class CInstanceImageDecoder;
-}
-} // namespace kodi
-
 extern "C"
 {
 
@@ -34,7 +26,7 @@ extern "C"
   struct AddonInstance_ImageDecoder;
   typedef struct KodiToAddonFuncTable_ImageDecoder
   {
-    kodi::addon::CInstanceImageDecoder* addonInstance;
+    KODI_HANDLE addonInstance;
     bool(__cdecl* load_image_from_memory)(const AddonInstance_ImageDecoder* instance,
                                           unsigned char* buffer,
                                           unsigned int buf_size,
@@ -158,7 +150,8 @@ class CInstanceImageDecoder : public IAddonInstance
                                                unsigned int* width,
                                                unsigned int* height)
   {
-    return instance->toAddon.addonInstance->LoadImageFromMemory(buffer, bufSize, *width, *height);
+    return static_cast<CInstanceImageDecoder*>(instance->toAddon.addonInstance)
+        ->LoadImageFromMemory(buffer, bufSize, *width, *height);
   }
 
   inline static bool ADDON_Decode(const AddonInstance_ImageDecoder* instance,
@@ -168,8 +161,8 @@ class CInstanceImageDecoder : public IAddonInstance
                                   unsigned int pitch,
                                   unsigned int format)
   {
-    return instance->toAddon.addonInstance->Decode(pixels, width, height, pitch,
-                                                   static_cast<ImageFormat>(format));
+    return static_cast<CInstanceImageDecoder*>(instance->toAddon.addonInstance)
+        ->Decode(pixels, width, height, pitch, static_cast<ImageFormat>(format));
   }
 
   AddonInstance_ImageDecoder* m_instanceData;

From 48c9be2820fe7ad08f399dced223424d5ab07843 Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Sun, 17 May 2020 20:01:41 +0200
Subject: [PATCH 3/7] [addons][imagedecoder] separate all interface structures
 to own parts

By them becomes every part a own "new" to have in cases of changes compatible
to older versions.
---
 xbmc/addons/ImageDecoder.cpp                  | 21 +++++++++++++------
 .../kodi/addon-instance/ImageDecoder.h        | 18 ++++++++--------
 2 files changed, 24 insertions(+), 15 deletions(-)

diff --git a/xbmc/addons/ImageDecoder.cpp b/xbmc/addons/ImageDecoder.cpp
index 3598c8391f0e..ad3f35234179 100644
--- a/xbmc/addons/ImageDecoder.cpp
+++ b/xbmc/addons/ImageDecoder.cpp
@@ -20,36 +20,45 @@ namespace ADDON
 CImageDecoder::CImageDecoder(BinaryAddonBasePtr addonBase)
   : IAddonInstanceHandler(ADDON_INSTANCE_IMAGEDECODER, addonBase)
 {
+  // Create all interface parts independent to make API changes easier if
+  // something is added
+  m_struct.props = new AddonProps_ImageDecoder();
+  m_struct.toKodi = new AddonToKodiFuncTable_ImageDecoder();
+  m_struct.toAddon = new KodiToAddonFuncTable_ImageDecoder();
 }
 
 CImageDecoder::~CImageDecoder()
 {
   DestroyInstance();
+
+  delete m_struct.props;
+  delete m_struct.toKodi;
+  delete m_struct.toAddon;
 }
 
 bool CImageDecoder::LoadImageFromMemory(unsigned char* buffer, unsigned int bufSize,
                                         unsigned int width, unsigned int height)
 {
-  if (!m_struct.toAddon.load_image_from_memory)
+  if (!m_struct.toAddon->load_image_from_memory)
     return false;
 
   m_width = width;
   m_height = height;
-  return m_struct.toAddon.load_image_from_memory(&m_struct, buffer, bufSize, &m_width, &m_height);
+  return m_struct.toAddon->load_image_from_memory(&m_struct, buffer, bufSize, &m_width, &m_height);
 }
 
 bool CImageDecoder::Decode(unsigned char* const pixels, unsigned int width,
                            unsigned int height, unsigned int pitch,
                            unsigned int format)
 {
-  if (!m_struct.toAddon.decode)
+  if (!m_struct.toAddon->decode)
     return false;
 
   auto it = KodiToAddonFormat.find(format & XB_FMT_MASK);
   if (it == KodiToAddonFormat.end())
     return false;
 
-  bool result = m_struct.toAddon.decode(&m_struct, pixels, width, height, pitch, it->second);
+  bool result = m_struct.toAddon->decode(&m_struct, pixels, width, height, pitch, it->second);
   m_width = width;
   m_height = height;
 
@@ -58,8 +67,8 @@ bool CImageDecoder::Decode(unsigned char* const pixels, unsigned int width,
 
 bool CImageDecoder::Create(const std::string& mimetype)
 {
-  m_struct.props.mimetype = mimetype.c_str();
-  m_struct.toKodi.kodi_instance = this;
+  m_struct.props->mimetype = mimetype.c_str();
+  m_struct.toKodi->kodi_instance = this;
   return (CreateInstance(&m_struct) == ADDON_STATUS_OK);
 }
 
diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/ImageDecoder.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/ImageDecoder.h
index 94520f8a7dd9..3e223edba44e 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/ImageDecoder.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/ImageDecoder.h
@@ -43,9 +43,9 @@ extern "C"
 
   typedef struct AddonInstance_ImageDecoder
   {
-    AddonProps_ImageDecoder props;
-    AddonToKodiFuncTable_ImageDecoder toKodi;
-    KodiToAddonFuncTable_ImageDecoder toAddon;
+    AddonProps_ImageDecoder* props;
+    AddonToKodiFuncTable_ImageDecoder* toKodi;
+    KodiToAddonFuncTable_ImageDecoder* toAddon;
   } AddonInstance_ImageDecoder;
 
 } /* extern "C" */
@@ -128,7 +128,7 @@ class CInstanceImageDecoder : public IAddonInstance
   ///
   /// @return the mimetype wanted from Kodi
   ///
-  inline std::string MimeType() { return m_instanceData->props.mimetype; }
+  inline std::string MimeType() { return m_instanceData->props->mimetype; }
   //--------------------------------------------------------------------------
 
 private:
@@ -139,9 +139,9 @@ class CInstanceImageDecoder : public IAddonInstance
                              "structure not allowed, table must be given from Kodi!");
 
     m_instanceData = static_cast<AddonInstance_ImageDecoder*>(instance);
-    m_instanceData->toAddon.addonInstance = this;
-    m_instanceData->toAddon.load_image_from_memory = ADDON_LoadImageFromMemory;
-    m_instanceData->toAddon.decode = ADDON_Decode;
+    m_instanceData->toAddon->addonInstance = this;
+    m_instanceData->toAddon->load_image_from_memory = ADDON_LoadImageFromMemory;
+    m_instanceData->toAddon->decode = ADDON_Decode;
   }
 
   inline static bool ADDON_LoadImageFromMemory(const AddonInstance_ImageDecoder* instance,
@@ -150,7 +150,7 @@ class CInstanceImageDecoder : public IAddonInstance
                                                unsigned int* width,
                                                unsigned int* height)
   {
-    return static_cast<CInstanceImageDecoder*>(instance->toAddon.addonInstance)
+    return static_cast<CInstanceImageDecoder*>(instance->toAddon->addonInstance)
         ->LoadImageFromMemory(buffer, bufSize, *width, *height);
   }
 
@@ -161,7 +161,7 @@ class CInstanceImageDecoder : public IAddonInstance
                                   unsigned int pitch,
                                   unsigned int format)
   {
-    return static_cast<CInstanceImageDecoder*>(instance->toAddon.addonInstance)
+    return static_cast<CInstanceImageDecoder*>(instance->toAddon->addonInstance)
         ->Decode(pixels, width, height, pitch, static_cast<ImageFormat>(format));
   }
 

From c2db6699ecf22e87b702ce14a347d7755b244577 Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Sun, 17 May 2020 20:10:33 +0200
Subject: [PATCH 4/7] [addons][imagedecoder] remove nowhere used functions and
 values

Further was this values also not set and never usable.
---
 xbmc/addons/ImageDecoder.h | 5 -----
 1 file changed, 5 deletions(-)

diff --git a/xbmc/addons/ImageDecoder.h b/xbmc/addons/ImageDecoder.h
index 4bdf498534c9..650dc38195a8 100644
--- a/xbmc/addons/ImageDecoder.h
+++ b/xbmc/addons/ImageDecoder.h
@@ -32,12 +32,7 @@ namespace ADDON
                 unsigned int height, unsigned int pitch,
                 unsigned int format) override;
 
-    const std::string& GetMimetypes() const { return m_mimetype; }
-    const std::string& GetExtensions() const { return m_extension; }
-
   protected:
-    std::string m_mimetype;
-    std::string m_extension;
     AddonInstance_ImageDecoder m_struct = {};
   };
 

From a705599e5abd457f05d31f08c9dd6f9795cfcf32 Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Sun, 17 May 2020 20:28:16 +0200
Subject: [PATCH 5/7] [addons][imagedecoder] separate "C" and "C++" parts in
 different files

There becomes image_decoder.h added where then include all "C" parts for
works by Kodi. The C++ part stays in ImageDecoder.h where used by addon.

Currently is the C++ header still included in Kodi, to have compile checks
during changes about, about them comes in other requests a test system
and Kodi only need to have the "C" parts of system.
---
 cmake/treedata/common/subdirs.txt             |  1 +
 xbmc/addons/ImageDecoder.cpp                  |  9 +--
 .../kodi/addon-instance/ImageDecoder.h        | 55 ++--------------
 .../kodi/c-api/addon-instance/CMakeLists.txt  |  5 ++
 .../kodi/c-api/addon-instance/image_decoder.h | 63 +++++++++++++++++++
 5 files changed, 79 insertions(+), 54 deletions(-)
 create mode 100644 xbmc/addons/kodi-addon-dev-kit/include/kodi/c-api/addon-instance/CMakeLists.txt
 create mode 100644 xbmc/addons/kodi-addon-dev-kit/include/kodi/c-api/addon-instance/image_decoder.h

diff --git a/cmake/treedata/common/subdirs.txt b/cmake/treedata/common/subdirs.txt
index d471e73e1a47..f48fdfb7703b 100644
--- a/cmake/treedata/common/subdirs.txt
+++ b/cmake/treedata/common/subdirs.txt
@@ -9,6 +9,7 @@ xbmc/addons/interfaces/gui/controls             addons_interfaces_gui_controls
 xbmc/addons/interfaces/gui/dialogs              addons_interfaces_gui_dialogs
 xbmc/addons/kodi-addon-dev-kit/include/kodi     addons_kodi-addon-dev-kit_include_kodi
 xbmc/addons/kodi-addon-dev-kit/include/kodi/c-api addons_kodi-addon-dev-kit_include_kodi_c-api
+xbmc/addons/kodi-addon-dev-kit/include/kodi/c-api/addon-instance addons_kodi-addon-dev-kit_include_kodi_c-api_addon-instance
 xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance addons_kodi-addon-dev-kit_include_kodi_addon-instance
 xbmc/addons/kodi-addon-dev-kit/include/kodi/gui addons_kodi-addon-dev-kit_include_kodi_gui
 xbmc/addons/kodi-addon-dev-kit/include/kodi/gui/controls addons_kodi-addon-dev-kit_include_kodi_gui_controls
diff --git a/xbmc/addons/ImageDecoder.cpp b/xbmc/addons/ImageDecoder.cpp
index ad3f35234179..64968e2c9df4 100644
--- a/xbmc/addons/ImageDecoder.cpp
+++ b/xbmc/addons/ImageDecoder.cpp
@@ -9,10 +9,11 @@
 
 #include "guilib/TextureFormats.h"
 
-static const std::map<int,int> KodiToAddonFormat = {{XB_FMT_A8R8G8B8, ADDON_IMG_FMT_A8R8G8B8},
-                                                    {XB_FMT_A8,       ADDON_IMG_FMT_A8},
-                                                    {XB_FMT_RGBA8,    ADDON_IMG_FMT_RGBA8},
-                                                    {XB_FMT_RGB8,     ADDON_IMG_FMT_RGB8}};
+static const std::map<int, ImageFormat> KodiToAddonFormat = {
+    {XB_FMT_A8R8G8B8, ADDON_IMG_FMT_A8R8G8B8},
+    {XB_FMT_A8, ADDON_IMG_FMT_A8},
+    {XB_FMT_RGBA8, ADDON_IMG_FMT_RGBA8},
+    {XB_FMT_RGB8, ADDON_IMG_FMT_RGB8}};
 
 namespace ADDON
 {
diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/ImageDecoder.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/ImageDecoder.h
index 3e223edba44e..52fbe628d3b3 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/ImageDecoder.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/ImageDecoder.h
@@ -9,55 +9,9 @@
 #pragma once
 
 #include "../AddonBase.h"
+#include "../c-api/addon-instance/image_decoder.h"
 
-extern "C"
-{
-
-  typedef struct AddonProps_ImageDecoder
-  {
-    const char* mimetype;
-  } AddonProps_ImageDecoder;
-
-  typedef struct AddonToKodiFuncTable_ImageDecoder
-  {
-    KODI_HANDLE kodi_instance;
-  } AddonToKodiFuncTable_ImageDecoder;
-
-  struct AddonInstance_ImageDecoder;
-  typedef struct KodiToAddonFuncTable_ImageDecoder
-  {
-    KODI_HANDLE addonInstance;
-    bool(__cdecl* load_image_from_memory)(const AddonInstance_ImageDecoder* instance,
-                                          unsigned char* buffer,
-                                          unsigned int buf_size,
-                                          unsigned int* width,
-                                          unsigned int* height);
-
-    bool(__cdecl* decode)(const AddonInstance_ImageDecoder* instance,
-                          unsigned char* pixels,
-                          unsigned int width,
-                          unsigned int height,
-                          unsigned int pitch,
-                          unsigned int format);
-  } KodiToAddonFuncTable_ImageDecoder;
-
-  typedef struct AddonInstance_ImageDecoder
-  {
-    AddonProps_ImageDecoder* props;
-    AddonToKodiFuncTable_ImageDecoder* toKodi;
-    KodiToAddonFuncTable_ImageDecoder* toAddon;
-  } AddonInstance_ImageDecoder;
-
-} /* extern "C" */
-
-typedef enum ImageFormat : unsigned int
-{
-  ADDON_IMG_FMT_A8R8G8B8 = 1,
-  ADDON_IMG_FMT_A8 = 2,
-  ADDON_IMG_FMT_RGBA8 = 3,
-  ADDON_IMG_FMT_RGB8 = 4
-} ImageFormat;
-
+#ifdef __cplusplus
 namespace kodi
 {
 namespace addon
@@ -159,10 +113,10 @@ class CInstanceImageDecoder : public IAddonInstance
                                   unsigned int width,
                                   unsigned int height,
                                   unsigned int pitch,
-                                  unsigned int format)
+                                  enum ImageFormat format)
   {
     return static_cast<CInstanceImageDecoder*>(instance->toAddon->addonInstance)
-        ->Decode(pixels, width, height, pitch, static_cast<ImageFormat>(format));
+        ->Decode(pixels, width, height, pitch, format);
   }
 
   AddonInstance_ImageDecoder* m_instanceData;
@@ -170,3 +124,4 @@ class CInstanceImageDecoder : public IAddonInstance
 
 } /* namespace addon */
 } /* namespace kodi */
+#endif /* __cplusplus */
diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/c-api/addon-instance/CMakeLists.txt b/xbmc/addons/kodi-addon-dev-kit/include/kodi/c-api/addon-instance/CMakeLists.txt
new file mode 100644
index 000000000000..fe229254528f
--- /dev/null
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/c-api/addon-instance/CMakeLists.txt
@@ -0,0 +1,5 @@
+set(HEADERS image_decoder.h)
+
+if(NOT ENABLE_STATIC_LIBS)
+  core_add_library(addons_kodi-addon-dev-kit_include_kodi_c-api_addon-instance)
+endif()
diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/c-api/addon-instance/image_decoder.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/c-api/addon-instance/image_decoder.h
new file mode 100644
index 000000000000..83420a4f7fbf
--- /dev/null
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/c-api/addon-instance/image_decoder.h
@@ -0,0 +1,63 @@
+/*
+ *  Copyright (C) 2005-2018 Team Kodi
+ *  This file is part of Kodi - https://kodi.tv
+ *
+ *  SPDX-License-Identifier: GPL-2.0-or-later
+ *  See LICENSES/README.md for more information.
+ */
+
+#pragma once
+
+#include "../addon_base.h"
+
+#ifdef __cplusplus
+extern "C"
+{
+#endif /* __cplusplus */
+
+  typedef enum ImageFormat
+  {
+    ADDON_IMG_FMT_A8R8G8B8 = 1,
+    ADDON_IMG_FMT_A8 = 2,
+    ADDON_IMG_FMT_RGBA8 = 3,
+    ADDON_IMG_FMT_RGB8 = 4
+  } ImageFormat;
+
+  typedef struct AddonProps_ImageDecoder
+  {
+    const char* mimetype;
+  } AddonProps_ImageDecoder;
+
+  typedef struct AddonToKodiFuncTable_ImageDecoder
+  {
+    KODI_HANDLE kodi_instance;
+  } AddonToKodiFuncTable_ImageDecoder;
+
+  struct AddonInstance_ImageDecoder;
+  typedef struct KodiToAddonFuncTable_ImageDecoder
+  {
+    KODI_HANDLE addonInstance;
+    bool(__cdecl* load_image_from_memory)(const struct AddonInstance_ImageDecoder* instance,
+                                          unsigned char* buffer,
+                                          unsigned int buf_size,
+                                          unsigned int* width,
+                                          unsigned int* height);
+
+    bool(__cdecl* decode)(const struct AddonInstance_ImageDecoder* instance,
+                          unsigned char* pixels,
+                          unsigned int width,
+                          unsigned int height,
+                          unsigned int pitch,
+                          enum ImageFormat format);
+  } KodiToAddonFuncTable_ImageDecoder;
+
+  typedef struct AddonInstance_ImageDecoder
+  {
+    struct AddonProps_ImageDecoder* props;
+    struct AddonToKodiFuncTable_ImageDecoder* toKodi;
+    struct KodiToAddonFuncTable_ImageDecoder* toAddon;
+  } AddonInstance_ImageDecoder;
+
+#ifdef __cplusplus
+} /* extern "C" */
+#endif /* __cplusplus */

From c192469e71370034ec93e8157cfedc163497e56d Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Mon, 18 May 2020 01:10:22 +0200
Subject: [PATCH 6/7] [addons][imagedecoder] rework documentation to have
 usable

There are some changes to have it usable by Doxyfile of addons.
Further is example code added, some parts with new text and
cleanups.
---
 .../kodi/addon-instance/ImageDecoder.h        | 224 ++++++++++++++++--
 .../kodi/c-api/addon-instance/image_decoder.h |  15 ++
 2 files changed, 221 insertions(+), 18 deletions(-)

diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/ImageDecoder.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/ImageDecoder.h
index 52fbe628d3b3..6ff179a233ba 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/ImageDecoder.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/ImageDecoder.h
@@ -17,18 +17,198 @@ namespace kodi
 namespace addon
 {
 
+//##############################################################################
+/// @defgroup cpp_kodi_addon_imagedecoder_Defs Definitions, structures and enumerators
+/// @ingroup cpp_kodi_addon_imagedecoder
+/// @brief **Image decoder add-on general variables**
+///
+/// Used to exchange the available options between Kodi and addon.
+///
+///
+
+//==============================================================================
+///
+/// @addtogroup cpp_kodi_addon_imagedecoder
+/// @brief @cpp_class{ kodi::addon::CInstanceImageDecoder }
+/// **Image decoder add-on instance**\n
+/// This instance type is used to allow Kodi various additional image format
+/// types.
+///
+/// This usage can be requested under various conditions, by a Mimetype protocol
+/// defined in <b>`addon.xml`</b> or supported file extensions.
+///
+/// Include the header @ref ImageDecoder.h "#include <kodi/addon-instance/ImageDecoder.h>"
+/// to use this class.
+///
+/// ----------------------------------------------------------------------------
+///
+/// Here is an example of what the <b>`addon.xml.in`</b> would look like for an
+/// image decoder addon:
+///
+/// ~~~~~~~~~~~~~{.xml}
+/// <?xml version="1.0" encoding="UTF-8"?>
+/// <addon
+///   id="imagedecoder.myspecialnamefor"
+///   version="1.0.0"
+///   name="My image decoder addon"
+///   provider-name="Your Name">
+///   <requires>@ADDON_DEPENDS@</requires>
+///   <extension
+///     point="kodi.imagedecoder"
+///     extension=".imga|.imgb"
+///     mimetype="image/mymimea|image/mymimea"
+///     library_@PLATFORM@="@LIBRARY_FILENAME@"/>
+///   <extension point="xbmc.addon.metadata">
+///     <summary lang="en_GB">My image decoder addon summary</summary>
+///     <description lang="en_GB">My image decoder description</description>
+///     <platform>@PLATFORM@</platform>
+///   </extension>
+/// </addon>
+/// ~~~~~~~~~~~~~
+///
+/// ### Standard values that can be declared for processing in `addon.xml`.
+///
+/// These values are used by Kodi to identify associated images and file
+/// extensions and then to select the associated addon.
+///
+/// \table_start
+///   \table_h3{ Labels, Type, Description }
+///   \table_row3{   <b>`point`</b>,
+///                  @anchor cpp_kodi_addon_imagedecoder_point
+///                  string,
+///     The identification of the addon instance to image decoder is mandatory
+///     <b>`kodi.imagedecoder`</b>. In addition\, the instance declared in the
+///     first <b>`<extension ... />`</b> is also the main type of addon.
+///   }
+///   \table_row3{   <b>`extension`</b>,
+///                  @anchor cpp_kodi_addon_imagedecoder_defaultPort
+///                  string,
+///     The from addon operated and supported image file endings.\n
+///     Use a <b>`|`</b> to separate between different ones.
+///   }
+///   \table_row3{   <b>`defaultPort`</b>,
+///                  @anchor cpp_kodi_addon_imagedecoder_defaultPort
+///                  string,
+///     The from addon operated image [mimetypes](https://en.wikipedia.org/wiki/Media_type).\n
+///     Use a <b>`|`</b> to separate between different ones.
+///   }
+///   \table_row3{   <b>`library_@PLATFORM@`</b>,
+///                  @anchor cpp_kodi_addon_imagedecoder_library
+///                  string,
+///     The runtime library used for the addon. This is usually declared by `cmake` and correctly displayed in the translated <b>`addon.xml`</b>.
+///   }
+/// \table_end
+///
+/// @remark For more detailed description of the <b>`addon.xml`</b>, see also https://kodi.wiki/view/Addon.xml.
+///
+///
+/// --------------------------------------------------------------------------
+///
+///
+/// **Example:**
+///
+/// ~~~~~~~~~~~~~{.cpp}
+/// #include <kodi/addon-instance/ImageDecoder.h>
+///
+/// class ATTRIBUTE_HIDDEN CMyImageDecoder : public kodi::addon::CInstanceImageDecoder
+/// {
+/// public:
+///   CMyImageDecoder(KODI_HANDLE instance, const std::string& kodiVersion);
+///
+///   bool LoadImageFromMemory(unsigned char* buffer,
+///                            unsigned int bufSize,
+///                            unsigned int& width,
+///                            unsigned int& height) override;
+///
+///   bool Decode(unsigned char* pixels,
+///               unsigned int width,
+///               unsigned int height,
+///               unsigned int pitch,
+///               ImageFormat format) override;
+///
+///   ...
+/// };
+///
+/// CMyImageDecoder::CMyImageDecoder(KODI_HANDLE instance, const std::string& kodiVersion)
+///   : CInstanceImageDecoder(instance, kodiVersion)
+/// {
+///   ...
+/// }
+///
+/// bool CMyImageDecoder::LoadImageFromMemory(unsigned char* buffer,
+///                                           unsigned int bufSize,
+///                                           unsigned int& width,
+///                                           unsigned int& height)
+/// {
+///   ...
+///   return true;
+/// }
+///
+/// bool CMyImageDecoder::Decode(unsigned char* pixels,
+///                              unsigned int width,
+///                              unsigned int height,
+///                              unsigned int pitch,
+///                              ImageFormat format) override;
+/// {
+///   ...
+///   return true;
+/// }
+///
+/// //----------------------------------------------------------------------
+///
+/// class ATTRIBUTE_HIDDEN CMyAddon : public kodi::addon::CAddonBase
+/// {
+/// public:
+///   CMyAddon() = default;
+///   ADDON_STATUS CreateInstance(int instanceType,
+///                               const std::string& instanceID,
+///                               KODI_HANDLE instance,
+///                               const std::string& version,
+///                               KODI_HANDLE& addonInstance) override;
+/// };
+///
+/// // If you use only one instance in your add-on, can be instanceType and
+/// // instanceID ignored
+/// ADDON_STATUS CMyAddon::CreateInstance(int instanceType,
+///                                       const std::string& instanceID,
+///                                       KODI_HANDLE instance,
+///                                       const std::string& version,
+///                                       KODI_HANDLE& addonInstance)
+/// {
+///   if (instanceType == ADDON_INSTANCE_IMAGEDECODER)
+///   {
+///     kodi::Log(ADDON_LOG_NOTICE, "Creating my image decoder instance");
+///     addonInstance = new CMyImageDecoder(instance, version);
+///     return ADDON_STATUS_OK;
+///   }
+///   else if (...)
+///   {
+///     ...
+///   }
+///   return ADDON_STATUS_UNKNOWN;
+/// }
+///
+/// ADDONCREATOR(CMyAddon)
+/// ~~~~~~~~~~~~~
+///
+/// The destruction of the example class `CMyImageDecoder` is called from
+/// Kodi's header. Manually deleting the add-on instance is not required.
+///
+//------------------------------------------------------------------------------
 class CInstanceImageDecoder : public IAddonInstance
 {
 public:
-  //==========================================================================
-  /// @brief Class constructor
+  //============================================================================
+  /// @ingroup cpp_kodi_addon_imagedecoder
+  /// @brief Class constructor.
   ///
-  /// @param[in] instance             The from Kodi given instance given be
-  ///                                 add-on CreateInstance call with instance
-  ///                                 id ADDON_INSTANCE_IMAGEDECODER.
+  /// @param[in] instance The from Kodi given instance given be add-on
+  ///                     CreateInstance call with instance id
+  ///                     @ref ADDON_INSTANCE_IMAGEDECODER.
   /// @param[in] kodiVersion [opt] Version used in Kodi for this instance, to
   ///                        allow compatibility to older Kodi versions.
-  ///                        @note Recommended to set.
+  ///
+  /// @note Recommended to set <b>`kodiVersion`</b>.
   ///
   explicit CInstanceImageDecoder(KODI_HANDLE instance, const std::string& kodiVersion = "")
     : IAddonInstance(ADDON_INSTANCE_IMAGEDECODER,
@@ -41,27 +221,31 @@ class CInstanceImageDecoder : public IAddonInstance
 
     SetAddonStruct(instance);
   }
-  //--------------------------------------------------------------------------
+  //----------------------------------------------------------------------------
 
   ~CInstanceImageDecoder() override = default;
 
-  //==========================================================================
-  /// @brief Initialize an encoder
+  //============================================================================
+  /// @ingroup cpp_kodi_addon_imagedecoder
+  /// @brief Initialize an encoder.
   ///
   /// @param[in] buffer The data to read from memory
   /// @param[in] bufSize The buffer size
-  /// @param[in,out] width The optimal width of image on entry, obtained width on return
-  /// @param[in,out] height The optimal height of image, actual obtained height on return
+  /// @param[in,out] width The optimal width of image on entry, obtained width
+  ///                      on return
+  /// @param[in,out] height The optimal height of image, actual obtained height
+  ///                       on return
   /// @return true if successful done, false on error
   ///
   virtual bool LoadImageFromMemory(unsigned char* buffer,
                                    unsigned int bufSize,
                                    unsigned int& width,
                                    unsigned int& height) = 0;
-  //--------------------------------------------------------------------------
+  //----------------------------------------------------------------------------
 
-  //==========================================================================
-  /// @brief Decode previously loaded image
+  //============================================================================
+  /// @ingroup cpp_kodi_addon_imagedecoder
+  /// @brief Decode previously loaded image.
   ///
   /// @param[in] pixels Output buffer
   /// @param[in] width Width of output image
@@ -75,15 +259,19 @@ class CInstanceImageDecoder : public IAddonInstance
                       unsigned int height,
                       unsigned int pitch,
                       ImageFormat format) = 0;
-  //--------------------------------------------------------------------------
+  //----------------------------------------------------------------------------
 
-  //==========================================================================
-  /// @brief Get the wanted mime type from Kodi
+  //============================================================================
+  /// @ingroup cpp_kodi_addon_imagedecoder
+  /// @brief **Callback to Kodi Function**\n
+  /// Get the wanted mime type from Kodi.
   ///
   /// @return the mimetype wanted from Kodi
   ///
+  /// @remarks Only called from addon itself.
+  ///
   inline std::string MimeType() { return m_instanceData->props->mimetype; }
-  //--------------------------------------------------------------------------
+  //----------------------------------------------------------------------------
 
 private:
   void SetAddonStruct(KODI_HANDLE instance)
diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/c-api/addon-instance/image_decoder.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/c-api/addon-instance/image_decoder.h
index 83420a4f7fbf..595a5dc9628b 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/c-api/addon-instance/image_decoder.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/c-api/addon-instance/image_decoder.h
@@ -15,13 +15,28 @@ extern "C"
 {
 #endif /* __cplusplus */
 
+  //============================================================================
+  /// @ingroup cpp_kodi_addon_imagedecoder_Defs
+  /// @brief **Image format types**\n
+  /// Used to define wanted target format where image decoder should give to
+  /// Kodi.
+  ///
   typedef enum ImageFormat
   {
+    /// @brief A 32-bit ARGB pixel format, with alpha, that uses 8 bits per
+    /// channel, ARGBARGB...
     ADDON_IMG_FMT_A8R8G8B8 = 1,
+
+    /// @brief A 8, alpha only, 8bpp, AAA...
     ADDON_IMG_FMT_A8 = 2,
+
+    /// @brief RGBA 8:8:8:8, with alpha, 32bpp, RGBARGBA...
     ADDON_IMG_FMT_RGBA8 = 3,
+
+    /// @brief RGB 8:8:8, with alpha, 24bpp, RGBRGB...
     ADDON_IMG_FMT_RGB8 = 4
   } ImageFormat;
+  //----------------------------------------------------------------------------
 
   typedef struct AddonProps_ImageDecoder
   {

From 4a68f0aa160f38c3b525ff0d043524ae7895e6fb Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Sun, 17 May 2020 21:45:57 +0200
Subject: [PATCH 7/7] [addons] increase image deocder API version to 2.1.0

Also min increased as the "C" struct is changed.
---
 xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h
index 7e8b68ac3fe1..fcb0b0438549 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h
@@ -88,8 +88,8 @@
 #define ADDON_INSTANCE_VERSION_GAME_XML_ID            "kodi.binary.instance.game"
 #define ADDON_INSTANCE_VERSION_GAME_DEPENDS           "addon-instance/Game.h"
 
-#define ADDON_INSTANCE_VERSION_IMAGEDECODER           "2.0.1"
-#define ADDON_INSTANCE_VERSION_IMAGEDECODER_MIN       "2.0.1"
+#define ADDON_INSTANCE_VERSION_IMAGEDECODER           "2.1.0"
+#define ADDON_INSTANCE_VERSION_IMAGEDECODER_MIN       "2.1.0"
 #define ADDON_INSTANCE_VERSION_IMAGEDECODER_XML_ID    "kodi.binary.instance.imagedecoder"
 #define ADDON_INSTANCE_VERSION_IMAGEDECODER_DEPENDS   "addon-instance/ImageDecoder.h"
 
