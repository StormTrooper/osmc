From 6df2ce77112d1a02233a7279453515929224977f Mon Sep 17 00:00:00 2001
From: Kai Sommerfeld <kai.sommerfeld@gmx.com>
Date: Sat, 1 Sep 2018 17:46:49 +0200
Subject: [PATCH] [PVR] Guide window: Fix deadlock.

---
 xbmc/pvr/windows/GUIEPGGridContainer.cpp      |  6 +----
 xbmc/pvr/windows/GUIEPGGridContainer.h        |  1 -
 xbmc/pvr/windows/GUIEPGGridContainerModel.cpp | 24 ++++---------------
 xbmc/pvr/windows/GUIEPGGridContainerModel.h   |  6 ++---
 4 files changed, 9 insertions(+), 28 deletions(-)

diff --git a/xbmc/pvr/windows/GUIEPGGridContainer.cpp b/xbmc/pvr/windows/GUIEPGGridContainer.cpp
index 79c5e8df8c91..88fe9737ca5f 100644
--- a/xbmc/pvr/windows/GUIEPGGridContainer.cpp
+++ b/xbmc/pvr/windows/GUIEPGGridContainer.cpp
@@ -143,7 +143,6 @@ CGUIEPGGridContainer::CGUIEPGGridContainer(const CGUIEPGGridContainer &other)
   m_channelScrollOffset(other.m_channelScrollOffset),
   m_gridModel(new CGUIEPGGridContainerModel(*other.m_gridModel)),
   m_updatedGridModel(other.m_updatedGridModel ? new CGUIEPGGridContainerModel(*other.m_updatedGridModel) : nullptr),
-  m_outdatedGridModel(other.m_outdatedGridModel ? new CGUIEPGGridContainerModel(*other.m_outdatedGridModel) : nullptr),
   m_item(GetItem(m_channelCursor)) // pointer to grid model internal data.
 {
 }
@@ -736,7 +735,6 @@ void CGUIEPGGridContainer::UpdateItems()
   m_lastChannel = nullptr;
 
   // always use asynchronously precalculated grid data.
-  m_outdatedGridModel = std::move(m_gridModel); // destructing grid data can be very expensive, thus this will be done asynchronously, not here.
   m_gridModel = std::move(m_updatedGridModel);
 
   if (prevSelectedEpgTag)
@@ -1726,18 +1724,16 @@ void CGUIEPGGridContainer::SetTimelineItems(const std::unique_ptr<CFileItemList>
     fBlockSize = m_blockSize;
   }
 
-  std::unique_ptr<CGUIEPGGridContainerModel> oldOutdatedGridModel;
   std::unique_ptr<CGUIEPGGridContainerModel> oldUpdatedGridModel;
   std::unique_ptr<CGUIEPGGridContainerModel> newUpdatedGridModel(new CGUIEPGGridContainerModel);
   // can be very expensive. never call with lock acquired.
-  newUpdatedGridModel->Refresh(items, gridStart, gridEnd, iRulerUnit, iBlocksPerPage, fBlockSize);
+  newUpdatedGridModel->Initialize(items, gridStart, gridEnd, iRulerUnit, iBlocksPerPage, fBlockSize);
 
   {
     CSingleLock lock(m_critSection);
 
     // grid contains CFileItem instances. CFileItem dtor locks global graphics mutex.
     // by increasing its refcount make sure, old data are not deleted while we're holding own mutex.
-    oldOutdatedGridModel = std::move(m_outdatedGridModel);
     oldUpdatedGridModel = std::move(m_updatedGridModel);
 
     m_updatedGridModel = std::move(newUpdatedGridModel);
diff --git a/xbmc/pvr/windows/GUIEPGGridContainer.h b/xbmc/pvr/windows/GUIEPGGridContainer.h
index aeacd0a11746..db78ed711a6b 100644
--- a/xbmc/pvr/windows/GUIEPGGridContainer.h
+++ b/xbmc/pvr/windows/GUIEPGGridContainer.h
@@ -225,7 +225,6 @@ namespace PVR
     mutable CCriticalSection m_critSection;
     std::unique_ptr<CGUIEPGGridContainerModel> m_gridModel;
     std::unique_ptr<CGUIEPGGridContainerModel> m_updatedGridModel;
-    std::unique_ptr<CGUIEPGGridContainerModel> m_outdatedGridModel;
 
     GridItem *m_item;
   };
diff --git a/xbmc/pvr/windows/GUIEPGGridContainerModel.cpp b/xbmc/pvr/windows/GUIEPGGridContainerModel.cpp
index a77529be5d27..e6d5c65176dc 100644
--- a/xbmc/pvr/windows/GUIEPGGridContainerModel.cpp
+++ b/xbmc/pvr/windows/GUIEPGGridContainerModel.cpp
@@ -14,6 +14,7 @@
 #include "ServiceBroker.h"
 #include "settings/Settings.h"
 #include "utils/Variant.h"
+#include "utils/log.h"
 
 #include "pvr/PVRManager.h"
 #include "pvr/channels/PVRChannel.h"
@@ -36,28 +37,13 @@ void CGUIEPGGridContainerModel::SetInvalid()
     ruler->SetInvalid();
 }
 
-void CGUIEPGGridContainerModel::Reset()
+void CGUIEPGGridContainerModel::Initialize(const std::unique_ptr<CFileItemList> &items, const CDateTime &gridStart, const CDateTime &gridEnd, int iRulerUnit, int iBlocksPerPage, float fBlockSize)
 {
-  for (auto &channel : m_gridIndex)
+  if (!m_channelItems.empty())
   {
-    for (const auto &block : channel)
-    {
-      if (block.item)
-        block.item->ClearProperties();
-    }
-    channel.clear();
+    CLog::LogF(LOGERROR, "Already initialized!");
+    return;
   }
-  m_gridIndex.clear();
-
-  m_channelItems.clear();
-  m_programmeItems.clear();
-  m_rulerItems.clear();
-  m_epgItemsPtr.clear();
-}
-
-void CGUIEPGGridContainerModel::Refresh(const std::unique_ptr<CFileItemList> &items, const CDateTime &gridStart, const CDateTime &gridEnd, int iRulerUnit, int iBlocksPerPage, float fBlockSize)
-{
-  Reset();
 
   ////////////////////////////////////////////////////////////////////////
   // Create programme & channel items
diff --git a/xbmc/pvr/windows/GUIEPGGridContainerModel.h b/xbmc/pvr/windows/GUIEPGGridContainerModel.h
index 04ddd451577c..146ecbe2fed8 100644
--- a/xbmc/pvr/windows/GUIEPGGridContainerModel.h
+++ b/xbmc/pvr/windows/GUIEPGGridContainerModel.h
@@ -36,9 +36,10 @@ namespace PVR
     static const int MINSPERBLOCK = 5; // minutes
     static const int MAXBLOCKS = 33 * 24 * 60 / MINSPERBLOCK; //! 33 days of 5 minute blocks (31 days for upcoming data + 1 day for past data + 1 day for fillers)
 
-    virtual ~CGUIEPGGridContainerModel() { Reset(); }
+    CGUIEPGGridContainerModel() = default;
+    virtual ~CGUIEPGGridContainerModel() = default;
 
-    void Refresh(const std::unique_ptr<CFileItemList> &items, const CDateTime &gridStart, const CDateTime &gridEnd, int iRulerUnit, int iBlocksPerPage, float fBlockSize);
+    void Initialize(const std::unique_ptr<CFileItemList> &items, const CDateTime &gridStart, const CDateTime &gridEnd, int iRulerUnit, int iBlocksPerPage, float fBlockSize);
     void SetInvalid();
 
     static const int INVALID_INDEX = -1;
@@ -83,7 +84,6 @@ namespace PVR
 
   private:
     void FreeItemsMemory();
-    void Reset();
 
     struct ItemsPtr
     {
