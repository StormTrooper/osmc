From 5658fa331c5cdf6b4dce8e3888ac6037fa7718bb Mon Sep 17 00:00:00 2001
From: montellese <montellese@kodi.tv>
Date: Mon, 25 May 2020 08:35:58 +0200
Subject: [PATCH] [settings] move CSettingList::FindIntInList() to
 CSettingUtils::FindIntInList()

The settings library and its integration into Kodi is as generic as possible
and we want as little (type) specific logic in the library as possible.
---
 xbmc/guilib/guiinfo/VideoGUIInfo.cpp      | 18 +++++++++---------
 xbmc/settings/SettingUtils.cpp            | 15 +++++++++++++++
 xbmc/settings/SettingUtils.h              |  9 +++++++++
 xbmc/settings/SettingsBase.cpp            |  8 --------
 xbmc/settings/SettingsBase.h              |  9 ---------
 xbmc/settings/lib/Setting.cpp             |  9 ---------
 xbmc/settings/lib/Setting.h               |  1 -
 xbmc/settings/lib/SettingsManager.cpp     |  8 --------
 xbmc/settings/lib/SettingsManager.h       |  9 ---------
 xbmc/video/VideoThumbLoader.cpp           |  7 +++----
 xbmc/video/dialogs/GUIDialogVideoInfo.cpp | 15 ++++++++-------
 xbmc/view/GUIViewState.cpp                |  9 ++++++++-
 12 files changed, 52 insertions(+), 65 deletions(-)

diff --git a/xbmc/guilib/guiinfo/VideoGUIInfo.cpp b/xbmc/guilib/guiinfo/VideoGUIInfo.cpp
index fec8190096ed..d34cfac0ab07 100644
--- a/xbmc/guilib/guiinfo/VideoGUIInfo.cpp
+++ b/xbmc/guilib/guiinfo/VideoGUIInfo.cpp
@@ -25,6 +25,7 @@
 #include "guilib/guiinfo/GUIInfoLabels.h"
 #include "playlists/PlayList.h"
 #include "settings/AdvancedSettings.h"
+#include "settings/SettingUtils.h"
 #include "settings/Settings.h"
 #include "settings/SettingsComponent.h"
 #include "settings/lib/Setting.h"
@@ -351,15 +352,14 @@ bool CVideoGUIInfo::GetLabel(std::string& value, const CFileItem *item, int cont
         {
           std::shared_ptr<CSettingList> setting(std::dynamic_pointer_cast<CSettingList>( 
             CServiceBroker::GetSettingsComponent()->GetSettings()->GetSetting(CSettings::SETTING_VIDEOLIBRARY_SHOWUNWATCHEDPLOTS)));
-          if (tag->m_type != MediaTypeTvShow &&
-              tag->m_type != MediaTypeVideoCollection &&
-              tag->GetPlayCount() == 0 &&
-              setting &&
-              (
-               (tag->m_type == MediaTypeMovie && (!setting->FindIntInList(CSettings::VIDEOLIBRARY_PLOTS_SHOW_UNWATCHED_MOVIES))) ||  
-               (tag->m_type == MediaTypeEpisode && (!setting->FindIntInList(CSettings::VIDEOLIBRARY_PLOTS_SHOW_UNWATCHED_TVSHOWEPISODES)))
-              )
-             ) 
+          if (tag->m_type != MediaTypeTvShow && tag->m_type != MediaTypeVideoCollection &&
+              tag->GetPlayCount() == 0 && setting &&
+              ((tag->m_type == MediaTypeMovie &&
+                !CSettingUtils::FindIntInList(
+                    setting, CSettings::VIDEOLIBRARY_PLOTS_SHOW_UNWATCHED_MOVIES)) ||
+               (tag->m_type == MediaTypeEpisode &&
+                !CSettingUtils::FindIntInList(
+                    setting, CSettings::VIDEOLIBRARY_PLOTS_SHOW_UNWATCHED_TVSHOWEPISODES))))
           {
             value = g_localizeStrings.Get(20370);
           }
diff --git a/xbmc/settings/SettingUtils.cpp b/xbmc/settings/SettingUtils.cpp
index 294f246f305f..2aebb1c3853f 100644
--- a/xbmc/settings/SettingUtils.cpp
+++ b/xbmc/settings/SettingUtils.cpp
@@ -12,6 +12,8 @@
 #include "utils/StringUtils.h"
 #include "utils/Variant.h"
 
+#include <algorithm>
+
 std::vector<CVariant> CSettingUtils::GetList(std::shared_ptr<const CSettingList> settingList)
 {
   return ListToValues(settingList, settingList->GetValue());
@@ -118,3 +120,16 @@ bool CSettingUtils::ValuesToList(std::shared_ptr<const CSettingList> setting, co
 
   return true;
 }
+
+bool CSettingUtils::FindIntInList(std::shared_ptr<const CSettingList> settingList, int value)
+{
+  if (settingList == nullptr || settingList->GetElementType() != SettingType::Integer)
+    return false;
+
+  const auto values = settingList->GetValue();
+  const auto matchingValue =
+      std::find_if(values.begin(), values.end(), [value](const SettingPtr& setting) {
+        return std::static_pointer_cast<CSettingInt>(setting)->GetValue() == value;
+      });
+  return matchingValue != values.end();
+}
diff --git a/xbmc/settings/SettingUtils.h b/xbmc/settings/SettingUtils.h
index 0ccd62191430..2bc731349ba3 100644
--- a/xbmc/settings/SettingUtils.h
+++ b/xbmc/settings/SettingUtils.h
@@ -36,4 +36,13 @@ class CSettingUtils
 
   static std::vector<CVariant> ListToValues(std::shared_ptr<const CSettingList> setting, const std::vector< std::shared_ptr<CSetting> > &values);
   static bool ValuesToList(std::shared_ptr<const CSettingList> setting, const std::vector<CVariant> &values, std::vector< std::shared_ptr<CSetting> > &newValues);
+
+  /*!
+   \brief Search in a list of Ints for a given value.
+
+   \param settingList CSettingList instance
+   \param value value to search for
+   \return True if value was found in list, false otherwise
+  */
+  static bool FindIntInList(std::shared_ptr<const CSettingList> settingList, int value);
 };
diff --git a/xbmc/settings/SettingsBase.cpp b/xbmc/settings/SettingsBase.cpp
index c58552c283ce..d67c992b7999 100644
--- a/xbmc/settings/SettingsBase.cpp
+++ b/xbmc/settings/SettingsBase.cpp
@@ -167,14 +167,6 @@ void CSettingsBase::UnregisterCallback(ISettingCallback* callback)
   m_settingsManager->UnregisterCallback(callback);
 }
 
-bool CSettingsBase::FindIntInList(const std::string &id, int value) const
-{
-  if (id.empty())
-    return false;
-
-  return m_settingsManager->FindIntInList(id, value);
-}
-
 SettingPtr CSettingsBase::GetSetting(const std::string& id) const
 {
   if (id.empty())
diff --git a/xbmc/settings/SettingsBase.h b/xbmc/settings/SettingsBase.h
index dcbc7237c75d..209b6cc13a30 100644
--- a/xbmc/settings/SettingsBase.h
+++ b/xbmc/settings/SettingsBase.h
@@ -99,15 +99,6 @@ class CSettingsBase
    */
   void UnregisterCallback(ISettingCallback* callback);
 
-  /*!
-  \brief Search in a list of Ints for a given value.
-
-  \param id Setting identifier
-  \param value value to search for
-  \return True if value was found in list, false otherwise
-  */
-  bool FindIntInList(const std::string &id, int value) const;
-
   /*!
    \brief Gets the setting with the given identifier.
 
diff --git a/xbmc/settings/lib/Setting.cpp b/xbmc/settings/lib/Setting.cpp
index 7fd34f1a071a..4fc4312923c6 100644
--- a/xbmc/settings/lib/Setting.cpp
+++ b/xbmc/settings/lib/Setting.cpp
@@ -16,7 +16,6 @@
 #include "utils/XMLUtils.h"
 #include "utils/log.h"
 
-#include <algorithm>
 #include <sstream>
 
 template<typename TKey, typename TValue>
@@ -484,14 +483,6 @@ void CSettingList::Reset()
   SetValue(values);
 }
 
-bool CSettingList::FindIntInList(int value) const
-{
-  return std::find_if(m_values.cbegin(), m_values.cend(), [&](const SettingPtr& setting)
-  {
-    return setting->GetType() == SettingType::Integer && std::static_pointer_cast<CSettingInt>(setting)->GetValue() == value;
-  }) != m_values.cend();
-}
-
 bool CSettingList::FromString(const std::vector<std::string> &value)
 {
   SettingList values;
diff --git a/xbmc/settings/lib/Setting.h b/xbmc/settings/lib/Setting.h
index 7092eb89ded9..e59b3738943c 100644
--- a/xbmc/settings/lib/Setting.h
+++ b/xbmc/settings/lib/Setting.h
@@ -191,7 +191,6 @@ class CSettingList : public CSetting
   bool SetValue(const SettingList &values);
   const SettingList& GetDefault() const { return m_defaults; }
   void SetDefault(const SettingList &values);
-  bool FindIntInList(int value) const;
 
 protected:
   void copy(const CSettingList &setting);
diff --git a/xbmc/settings/lib/SettingsManager.cpp b/xbmc/settings/lib/SettingsManager.cpp
index 00645d61f06c..8f5b165024ed 100644
--- a/xbmc/settings/lib/SettingsManager.cpp
+++ b/xbmc/settings/lib/SettingsManager.cpp
@@ -685,14 +685,6 @@ bool CSettingsManager::SetList(const std::string &id, const std::vector< std::sh
   return std::static_pointer_cast<CSettingList>(setting)->SetValue(value);
 }
 
-bool CSettingsManager::FindIntInList(const std::string &id, int value) const
-{
-  CSharedLock lock(m_settingsCritical);
-  std::shared_ptr<CSettingList> setting(std::dynamic_pointer_cast<CSettingList>(GetSetting(id)));
-
-  return setting && setting->FindIntInList(value);
-}
-
 bool CSettingsManager::SetDefault(const std::string &id)
 {
   CSharedLock lock(m_settingsCritical);
diff --git a/xbmc/settings/lib/SettingsManager.h b/xbmc/settings/lib/SettingsManager.h
index fc0e7b5f474d..31ed7006ed81 100644
--- a/xbmc/settings/lib/SettingsManager.h
+++ b/xbmc/settings/lib/SettingsManager.h
@@ -405,15 +405,6 @@ class CSettingsManager : public ISettingCreator,
    */
   bool SetList(const std::string &id, const std::vector< std::shared_ptr<CSetting> > &value);
 
-  /*!
-   \brief Search in a list of Ints for a given value.
-
-   \param id Setting identifier
-   \param value value to search for
-   \return True if value was found in list, false otherwise
-  */
-  bool FindIntInList(const std::string &id, int value) const;
-
   /*!
    \brief Sets the value of the setting to its default.
 
diff --git a/xbmc/video/VideoThumbLoader.cpp b/xbmc/video/VideoThumbLoader.cpp
index 4af2438ba336..4610233ecc08 100644
--- a/xbmc/video/VideoThumbLoader.cpp
+++ b/xbmc/video/VideoThumbLoader.cpp
@@ -23,6 +23,7 @@
 #include "guilib/StereoscopicsManager.h"
 #include "music/MusicDatabase.h"
 #include "settings/AdvancedSettings.h"
+#include "settings/SettingUtils.h"
 #include "settings/Settings.h"
 #include "settings/SettingsComponent.h"
 #include "settings/lib/Setting.h"
@@ -356,10 +357,8 @@ bool CVideoThumbLoader::LoadItemCached(CFileItem* pItem)
     CServiceBroker::GetSettingsComponent()->GetSettings()->GetSetting(CSettings::SETTING_VIDEOLIBRARY_SHOWUNWATCHEDPLOTS)));
   if (pItem->HasArt("thumb") && pItem->HasVideoInfoTag() &&
       pItem->GetVideoInfoTag()->m_type == MediaTypeEpisode &&
-      pItem->GetVideoInfoTag()->GetPlayCount() == 0 &&
-      setting && 
-      !setting->FindIntInList(CSettings::VIDEOLIBRARY_THUMB_SHOW_UNWATCHED_EPISODE)
-     )
+      pItem->GetVideoInfoTag()->GetPlayCount() == 0 && setting &&
+      !CSettingUtils::FindIntInList(setting, CSettings::VIDEOLIBRARY_THUMB_SHOW_UNWATCHED_EPISODE))
   {
     // use fanart if available
     if (pItem->HasArt("fanart"))
diff --git a/xbmc/video/dialogs/GUIDialogVideoInfo.cpp b/xbmc/video/dialogs/GUIDialogVideoInfo.cpp
index 253289ce7312..fcd848e916e9 100644
--- a/xbmc/video/dialogs/GUIDialogVideoInfo.cpp
+++ b/xbmc/video/dialogs/GUIDialogVideoInfo.cpp
@@ -37,6 +37,7 @@
 #include "profiles/ProfileManager.h"
 #include "settings/AdvancedSettings.h"
 #include "settings/MediaSourceSettings.h"
+#include "settings/SettingUtils.h"
 #include "settings/Settings.h"
 #include "settings/SettingsComponent.h"
 #include "settings/lib/Setting.h"
@@ -402,13 +403,13 @@ void CGUIDialogVideoInfo::Update()
     CServiceBroker::GetSettingsComponent()->GetSettings()->GetSetting(CSettings::SETTING_VIDEOLIBRARY_SHOWUNWATCHEDPLOTS)));
   std::string strTmp = m_movieItem->GetVideoInfoTag()->m_strPlot;
   if (m_movieItem->GetVideoInfoTag()->m_type != MediaTypeTvShow)
-    if (m_movieItem->GetVideoInfoTag()->GetPlayCount() == 0 && 
-        setting &&
-        (
-         (m_movieItem->GetVideoInfoTag()->m_type == MediaTypeMovie && (!setting->FindIntInList(CSettings::VIDEOLIBRARY_PLOTS_SHOW_UNWATCHED_MOVIES))) || 
-         (m_movieItem->GetVideoInfoTag()->m_type == MediaTypeEpisode && (!setting->FindIntInList(CSettings::VIDEOLIBRARY_PLOTS_SHOW_UNWATCHED_TVSHOWEPISODES)))
-        )
-       )
+    if (m_movieItem->GetVideoInfoTag()->GetPlayCount() == 0 && setting &&
+        ((m_movieItem->GetVideoInfoTag()->m_type == MediaTypeMovie &&
+          !CSettingUtils::FindIntInList(setting,
+                                        CSettings::VIDEOLIBRARY_PLOTS_SHOW_UNWATCHED_MOVIES)) ||
+         (m_movieItem->GetVideoInfoTag()->m_type == MediaTypeEpisode &&
+          !CSettingUtils::FindIntInList(
+              setting, CSettings::VIDEOLIBRARY_PLOTS_SHOW_UNWATCHED_TVSHOWEPISODES))))
       strTmp = g_localizeStrings.Get(20370);
 
   StringUtils::Trim(strTmp);
diff --git a/xbmc/view/GUIViewState.cpp b/xbmc/view/GUIViewState.cpp
index 47b0d664f5d3..cb525b23c24b 100644
--- a/xbmc/view/GUIViewState.cpp
+++ b/xbmc/view/GUIViewState.cpp
@@ -34,8 +34,10 @@
 #include "pvr/windows/GUIViewStatePVR.h"
 #include "settings/AdvancedSettings.h"
 #include "settings/MediaSourceSettings.h"
+#include "settings/SettingUtils.h"
 #include "settings/Settings.h"
 #include "settings/SettingsComponent.h"
+#include "settings/lib/Setting.h"
 #include "utils/URIUtils.h"
 #include "video/GUIViewStateVideo.h"
 #include "view/ViewState.h"
@@ -509,7 +511,12 @@ bool CGUIViewState::AutoPlayNextVideoItem() const
   else
     settingValue = SETTING_AUTOPLAYNEXT_UNCATEGORIZED;
 
-  return settingValue >= 0 && CServiceBroker::GetSettingsComponent()->GetSettings()->FindIntInList(CSettings::SETTING_VIDEOPLAYER_AUTOPLAYNEXTITEM, settingValue);
+  const auto setting = std::dynamic_pointer_cast<CSettingList>(
+      CServiceBroker::GetSettingsComponent()->GetSettings()->GetSetting(
+          CSettings::SETTING_VIDEOPLAYER_AUTOPLAYNEXTITEM));
+
+  return settingValue >= 0 && setting != nullptr &&
+         CSettingUtils::FindIntInList(setting, settingValue);
 }
 
 void CGUIViewState::LoadViewState(const std::string &path, int windowID)
