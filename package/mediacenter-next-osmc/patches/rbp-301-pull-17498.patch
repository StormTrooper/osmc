From 6494737d00694b2253881485b0e38b8cbae40d5b Mon Sep 17 00:00:00 2001
From: Sascha Montellese <montellese@kodi.tv>
Date: Thu, 9 Apr 2020 07:48:12 +0200
Subject: [PATCH 01/21] [docs] update list of manually installed packages on
 Ubuntu

Co-Authored-By: Wolfgang Schupp <w.schupp@a1.net>
---
 docs/README.Ubuntu.md | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/docs/README.Ubuntu.md b/docs/README.Ubuntu.md
index 6055c9ebf4b0..f57a4550876b 100644
--- a/docs/README.Ubuntu.md
+++ b/docs/README.Ubuntu.md
@@ -116,7 +116,7 @@ If you get a `package not found` type of message with the below command, remove
 
 Install build dependencies manually:
 ```
-sudo apt install debhelper autoconf automake autopoint gettext autotools-dev cmake curl default-jre doxygen gawk gcc gdc gperf libasound2-dev libass-dev libavahi-client-dev libavahi-common-dev libbluetooth-dev libbluray-dev libbz2-dev libcdio-dev libp8-platform-dev libcrossguid-dev libcurl4-openssl-dev libcwiid-dev libdbus-1-dev libegl1-mesa-dev libenca-dev libflac-dev flatbuffers-dev libfontconfig-dev libfreetype6-dev libfribidi-dev libfstrcmp-dev libgcrypt-dev libgif-dev libgles2-mesa-dev libgl1-mesa-dev libglu1-mesa-dev libgnutls28-dev libgpg-error-dev libiso9660-dev libjpeg-dev liblcms2-dev libltdl-dev liblzo2-dev libmicrohttpd-dev libmysqlclient-dev libnfs-dev libogg-dev libpcre3-dev libplist-dev libpng-dev libpulse-dev libshairplay-dev libsmbclient-dev libsqlite3-dev libssl-dev libtag1-dev libtiff5-dev libtinyxml-dev libtool libudev-dev libva-dev libvdpau-dev libvorbis-dev libxmu-dev libxrandr-dev libxslt1-dev libxt-dev lsb-release nasm ninja-build python3-dev python3-pil python3-pip rapidjson-dev swig unzip uuid-dev yasm zip zlib1g-dev
+sudo apt install debhelper autoconf automake autopoint gettext autotools-dev cmake curl default-jre doxygen gawk gcc gdc gperf libasound2-dev libass-dev libavahi-client-dev libavahi-common-dev libbluetooth-dev libbluray-dev libbz2-dev libcdio-dev libp8-platform-dev libcrossguid-dev libcurl4-openssl-dev libcwiid-dev libdbus-1-dev libegl1-mesa-dev libenca-dev libflac-dev flatbuffers-dev libfmt-dev libfontconfig-dev libfreetype6-dev libfribidi-dev libfstrcmp-dev libgcrypt-dev libgif-dev libgles2-mesa-dev libgl1-mesa-dev libglu1-mesa-dev libgnutls28-dev libgpg-error-dev libiso9660-dev libjpeg-dev liblcms2-dev libltdl-dev liblzo2-dev libmicrohttpd-dev libmysqlclient-dev libnfs-dev libogg-dev libpcre3-dev libplist-dev libpng-dev libpulse-dev libshairplay-dev libsmbclient-dev libsqlite3-dev libssl-dev libtag1-dev libtiff5-dev libtinyxml-dev libtool libudev-dev libva-dev libvdpau-dev libvorbis-dev libxmu-dev libxrandr-dev libxslt1-dev libxt-dev lsb-release meson nasm ninja-build python3-dev python3-pil python3-pip rapidjson-dev swig unzip uuid-dev yasm zip zlib1g-dev
 ```
 
 **WARNING:** Make sure you copy paste the entire line or you might receive an error or miss a few dependencies.

From 07e40f7f790dd7f4f884cf37b9979303bc68c62b Mon Sep 17 00:00:00 2001
From: montellese <montellese@kodi.tv>
Date: Tue, 17 Mar 2020 21:06:32 +0100
Subject: [PATCH 02/21] [cmake] fix FindFmt.cmake for windows and fix version
 from 3.0.1 to 6.1.2

---
 cmake/modules/FindFmt.cmake | 7 +------
 1 file changed, 1 insertion(+), 6 deletions(-)

diff --git a/cmake/modules/FindFmt.cmake b/cmake/modules/FindFmt.cmake
index 9588501382dc..b426d8c77965 100644
--- a/cmake/modules/FindFmt.cmake
+++ b/cmake/modules/FindFmt.cmake
@@ -59,12 +59,7 @@ if(ENABLE_INTERNAL_FMT)
 
 else()
 
-if(CORE_SYSTEM_NAME STREQUAL windows OR CORE_SYSTEM_NAME STREQUAL windowsstore)
-  # TODO: fix windows fmt package to include fmt-config.cmake and fmt-config-version.cmake
-  set(FMT_VERSION 3.0.1)
-else()
-  find_package(FMT 3.0.1 CONFIG REQUIRED QUIET)
-endif()
+find_package(FMT 6.1.2 CONFIG REQUIRED QUIET)
 
 if(PKG_CONFIG_FOUND)
   pkg_check_modules(PC_FMT libfmt QUIET)

From b97635702e3ddcaa8a27178d320cd2aadf147d8a Mon Sep 17 00:00:00 2001
From: montellese <montellese@kodi.tv>
Date: Sun, 6 Nov 2016 11:02:10 +0100
Subject: [PATCH 03/21] [cmake/depends/win32] add spdlog

---
 .travis.yml                                   |   2 +-
 CMakeLists.txt                                |   4 +-
 cmake/modules/FindSpdlog.cmake                | 104 ++++++++++++++++++
 docs/README.Linux.md                          |  11 +-
 docs/README.Ubuntu.md                         |   2 +-
 .../scripts/0_package.target-win10-arm.list   |   1 +
 .../scripts/0_package.target-win10-win32.list |   1 +
 .../scripts/0_package.target-win10-x64.list   |   1 +
 .../scripts/0_package.target-win32.list       |   1 +
 .../scripts/0_package.target-x64.list         |   1 +
 tools/buildsteps/freebsd/configure-xbmc       |   2 +-
 tools/depends/.gitignore                      |   1 +
 tools/depends/target/Makefile                 |   3 +-
 tools/depends/target/libspdlog/Makefile       |  69 ++++++++++++
 xbmc/interfaces/swig/CMakeLists.txt           |   1 +
 15 files changed, 196 insertions(+), 8 deletions(-)
 create mode 100644 cmake/modules/FindSpdlog.cmake
 create mode 100644 tools/depends/target/libspdlog/Makefile

diff --git a/.travis.yml b/.travis.yml
index a3b46cafa43a..fb9e08307f3c 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -70,7 +70,7 @@ install:
       gettext git-core gperf libasound2-dev libass-dev libbluray-dev libbz2-dev libcap-dev libcdio-dev libcec4-dev libcrossguid-dev libcurl3
       libcurl4-openssl-dev libdbus-1-dev libegl1-mesa-dev libfmt3-dev libfontconfig-dev libfreetype6-dev libfribidi-dev libfstrcmp-dev libgif-dev libgl1-mesa-dev
       libglu1-mesa-dev libiso9660-dev libjpeg-dev liblcms2-dev libltdl-dev liblzo2-dev libmicrohttpd-dev libmysqlclient-dev libnfs-dev
-      libpcre3-dev libplist-dev libpng-dev libpulse-dev libsmbclient-dev libsqlite3-dev
+      libpcre3-dev libplist-dev libpng-dev libpulse-dev libsmbclient-dev libspdlog-dev libsqlite3-dev
       libssl-dev libtag1-dev libtinyxml-dev libtool libudev-dev libusb-dev libva-dev libvdpau-dev
       libxml2-dev libxmu-dev libxrandr-dev libxrender-dev libxslt1-dev libxt-dev mesa-utils
       nasm ninja-build pmount python-dev python-imaging python-pip3 python-sqlite rapidjson-dev swig unzip uuid-dev yasm zip zlib1g-dev;
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 6e5fad9f4925..a555ac7803b2 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -60,6 +60,7 @@ if(UNIX)
   option(ENABLE_INTERNAL_DAV1D "Enable internal dav1d?" OFF)
   option(ENABLE_INTERNAL_GTEST "Enable internal gtest?" OFF)
   option(ENABLE_INTERNAL_UDFREAD "Enable internal udfread?" OFF)
+  option(ENABLE_INTERNAL_SPDLOG "Enable internal spdlog?" OFF)
 endif()
 # System options
 if(NOT WIN32)
@@ -129,6 +130,7 @@ set(required_deps ASS
                   OpenSSL>=1.0.2
                   PCRE
                   RapidJSON
+                  Spdlog
                   Sqlite3
                   TagLib
                   TinyXML
@@ -286,7 +288,7 @@ elseif(CORE_SYSTEM_NAME STREQUAL android)
                  ${CORE_BUILD_DIR}/DllPaths_generated_android.h @ONLY)
 endif()
 
-set(GLOBAL_TARGET_DEPS ffmpeg dvdnav crossguid fmt fstrcmp flatbuffers ${PLATFORM_GLOBAL_TARGET_DEPS})
+set(GLOBAL_TARGET_DEPS ffmpeg dvdnav crossguid fmt Spdlog::Spdlog fstrcmp flatbuffers ${PLATFORM_GLOBAL_TARGET_DEPS})
 
 # main library (used for main binary and tests)
 add_library(lib${APP_NAME_LC} STATIC $<TARGET_OBJECTS:compileinfo>)
diff --git a/cmake/modules/FindSpdlog.cmake b/cmake/modules/FindSpdlog.cmake
new file mode 100644
index 000000000000..d8d5d017a3db
--- /dev/null
+++ b/cmake/modules/FindSpdlog.cmake
@@ -0,0 +1,104 @@
+# FindSpdlog
+# -------
+# Finds the Spdlog library
+#
+# This will define the following variables:
+#
+# SPDLOG_FOUND - system has Spdlog
+# SPDLOG_INCLUDE_DIRS - the Spdlog include directory
+# SPDLOG_LIBRARIES - the Spdlog libraries
+# SPDLOG_DEFINITIONS - the Spdlog compile definitions
+#
+# and the following imported targets:
+#
+#   Spdlog::Spdlog   - The Spdlog library
+
+if(ENABLE_INTERNAL_SPDLOG)
+  include(ExternalProject)
+  file(STRINGS ${CMAKE_SOURCE_DIR}/tools/depends/target/libspdlog/Makefile VER REGEX "^[ ]*VERSION[ ]*=.+$")
+  string(REGEX REPLACE "^[ ]*VERSION[ ]*=[ ]*" "" SPDLOG_VERSION "${VER}")
+
+  # allow user to override the download URL with a local tarball
+  # needed for offline build envs
+  if(SPDLOG_URL)
+      get_filename_component(SPDLOG_URL "${SPDLOG_URL}" ABSOLUTE)
+  else()
+      set(SPDLOG_URL http://mirrors.kodi.tv/build-deps/sources/spdlog-${SPDLOG_VERSION}.tar.gz)
+  endif()
+  if(VERBOSE)
+      message(STATUS "SPDLOG_URL: ${SPDLOG_URL}")
+  endif()
+
+  if(APPLE)
+    set(EXTRA_ARGS "-DCMAKE_OSX_ARCHITECTURES=${CMAKE_OSX_ARCHITECTURES}")
+  endif()
+
+  set(SPDLOG_LIBRARY ${CMAKE_BINARY_DIR}/${CORE_BUILD_DIR}/lib/libspdlog.a)
+  set(SPDLOG_INCLUDE_DIR ${CMAKE_BINARY_DIR}/${CORE_BUILD_DIR}/include)
+  externalproject_add(spdlog
+                      URL ${SPDLOG_URL}
+                      DOWNLOAD_DIR ${CMAKE_BINARY_DIR}/${CORE_BUILD_DIR}/download
+                      PREFIX ${CORE_BUILD_DIR}/spdlog
+                      CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/${CORE_BUILD_DIR}
+                                 -DCMAKE_CXX_EXTENSIONS=${CMAKE_CXX_EXTENSIONS}
+                                 -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}
+                                 -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
+                                 -DCMAKE_INSTALL_LIBDIR=lib
+                                 -DSPDLOG_BUILD_EXAMPLE=OFF
+                                 -DSPDLOG_BUILD_TESTS=OFF
+                                 -DSPDLOG_BUILD_BENCH=OFF
+                                 -DSPDLOG_FMT_EXTERNAL=ON
+                                 "${EXTRA_ARGS}"
+                      BUILD_BYPRODUCTS ${SPDLOG_LIBRARY})
+  set_target_properties(spdlog PROPERTIES FOLDER "External Projects")
+
+  if(ENABLE_INTERNAL_FMT)
+    add_dependencies(spdlog fmt)
+  endif()
+else()
+  find_package(spdlog 1.5.0 CONFIG REQUIRED QUIET)
+
+  if(PKG_CONFIG_FOUND)
+    pkg_check_modules(PC_SPDLOG spdlog QUIET)
+    set(SPDLOG_VERSION ${PC_SPDLOG_VERSION})
+  endif()
+
+  find_path(SPDLOG_INCLUDE_DIR NAMES spdlog/spdlog.h
+                               PATHS ${PC_SPDLOG_INCLUDEDIR})
+
+  find_library(SPDLOG_LIBRARY_RELEASE NAMES spdlog
+                                      PATHS ${PC_SPDLOG_LIBDIR})
+  find_library(SPDLOG_LIBRARY_DEBUG NAMES spdlogd
+                                    PATHS ${PC_SPDLOG_LIBDIR})
+
+  include(SelectLibraryConfigurations)
+  select_library_configurations(SPDLOG)
+endif()
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(Spdlog
+                                  REQUIRED_VARS SPDLOG_LIBRARY SPDLOG_INCLUDE_DIR
+                                  VERSION_VAR SPDLOG_VERSION)
+
+if(SPDLOG_FOUND)
+  set(SPDLOG_LIBRARIES ${SPDLOG_LIBRARY})
+  set(SPDLOG_INCLUDE_DIRS ${SPDLOG_INCLUDE_DIR})
+  set(SPDLOG_DEFINITIONS -DSPDLOG_FMT_EXTERNAL
+                         -DSPDLOG_DEBUG_ON
+                         -DSPDLOG_NO_ATOMIC_LEVELS
+                         -DSPDLOG_ENABLE_PATTERN_PADDING)
+  if(WIN32)
+    list(APPEND SPDLOG_DEFINITIONS -DSPDLOG_WCHAR_FILENAMES
+                                   -DSPDLOG_WCHAR_TO_UTF8_SUPPORT)
+  endif()
+
+  if(NOT TARGET Spdlog::Spdlog)
+    add_library(Spdlog::Spdlog UNKNOWN IMPORTED)
+    set_target_properties(Spdlog::Spdlog PROPERTIES
+                                         IMPORTED_LOCATION "${SPDLOG_LIBRARY}"
+                                         INTERFACE_INCLUDE_DIRECTORIES "${SPDLOG_INCLUDE_DIR}"
+                                         INTERFACE_COMPILE_DEFINITIONS "${SPDLOG_DEFINITIONS}")
+  endif()
+endif()
+
+mark_as_advanced(SPDLOG_INCLUDE_DIR SPDLOG_LIBRARY)
diff --git a/docs/README.Linux.md b/docs/README.Linux.md
index 11fa5ae00932..73afac904b8d 100644
--- a/docs/README.Linux.md
+++ b/docs/README.Linux.md
@@ -74,10 +74,10 @@ The following is the list of packages that are used to build Kodi on Debian/Ubun
 
 **NOTE:** Kodi requires a compiler with C++14 support, i.e. gcc >= 4.9 or clang >= 3.4
 
-* autoconf, automake, autopoint, gettext, autotools-dev, cmake, curl, default-jre | openjdk-6-jre | openjdk-7-jre, gawk, gcc (>= 4.9) | gcc-4.9, g++ (>= 4.9) | g++-4.9, cpp (>= 4.9) | cpp-4.9, flatbuffers, gdc, gperf, libasound2-dev | libasound-dev, libass-dev (>= 0.9.8), libavahi-client-dev, libavahi-common-dev, libbluetooth-dev, libbluray-dev, libbz2-dev, libcdio-dev, libcec4-dev | libcec-dev, libp8-platform-dev, libcrossguid-dev, libcurl4-openssl-dev | libcurl4-gnutls-dev | libcurl-dev, libcwiid-dev, libdbus-1-dev, libegl1-mesa-dev, libenca-dev, libflac-dev, libfontconfig-dev, libfmt3-dev | libfmt-dev, libfreetype6-dev, libfribidi-dev, libfstrcmp-dev, libgcrypt-dev, libgif-dev (>= 5.0.5), libgles2-mesa-dev [armel] | libgl1-mesa-dev | libgl-dev, libglew-dev, libglu1-mesa-dev | libglu-dev, libgnutls-dev | libgnutls28-dev, libgpg-error-dev, libiso9660-dev, libjpeg-dev, liblcms2-dev, liblirc-dev, libltdl-dev, liblzo2-dev, libmicrohttpd-dev, libmysqlclient-dev, libnfs-dev, libogg-dev, libomxil-bellagio-dev [armel], libpcre3-dev, libplist-dev, libpng12-dev | libpng-dev, libpulse-dev, libshairplay-dev, libsmbclient-dev, libsqlite3-dev, libssl-dev, libtag1-dev (>= 1.8) | libtag1x8, libtiff5-dev | libtiff-dev | libtiff4-dev, libtinyxml-dev, libtool, libudev-dev, libva-dev, libvdpau-dev, libvorbis-dev, libxkbcommon-dev, libxmu-dev, libxrandr-dev, libxslt1-dev | libxslt-dev, libxt-dev, waylandpp-dev | netcat, wayland-protocols | wipe, lsb-release, meson (>= 0.47.0), nasm (>= 2.14), ninja-build, python3-dev, python3-pil | python-imaging, python-support | python3-minimal, rapidjson-dev, swig, unzip, uuid-dev, yasm, zip, zlib1g-dev
+* autoconf, automake, autopoint, gettext, autotools-dev, cmake, curl, default-jre | openjdk-6-jre | openjdk-7-jre, gawk, gcc (>= 4.9) | gcc-4.9, g++ (>= 4.9) | g++-4.9, cpp (>= 4.9) | cpp-4.9, flatbuffers, gdc, gperf, libasound2-dev | libasound-dev, libass-dev (>= 0.9.8), libavahi-client-dev, libavahi-common-dev, libbluetooth-dev, libbluray-dev, libbz2-dev, libcdio-dev, libcec4-dev | libcec-dev, libp8-platform-dev, libcrossguid-dev, libcurl4-openssl-dev | libcurl4-gnutls-dev | libcurl-dev, libcwiid-dev, libdbus-1-dev, libegl1-mesa-dev, libenca-dev, libflac-dev, libfontconfig-dev, libfmt3-dev | libfmt-dev, libfreetype6-dev, libfribidi-dev, libfstrcmp-dev, libgcrypt-dev, libgif-dev (>= 5.0.5), libgles2-mesa-dev [armel] | libgl1-mesa-dev | libgl-dev, libglew-dev, libglu1-mesa-dev | libglu-dev, libgnutls-dev | libgnutls28-dev, libgpg-error-dev, libiso9660-dev, libjpeg-dev, liblcms2-dev, liblirc-dev, libltdl-dev, liblzo2-dev, libmicrohttpd-dev, libmysqlclient-dev, libnfs-dev, libogg-dev, libomxil-bellagio-dev [armel], libpcre3-dev, libplist-dev, libpng12-dev | libpng-dev, libpulse-dev, libshairplay-dev, libsmbclient-dev, libspdlog-dev, libsqlite3-dev, libssl-dev, libtag1-dev (>= 1.8) | libtag1x8, libtiff5-dev | libtiff-dev | libtiff4-dev, libtinyxml-dev, libtool, libudev-dev, libva-dev, libvdpau-dev, libvorbis-dev, libxkbcommon-dev, libxmu-dev, libxrandr-dev, libxslt1-dev | libxslt-dev, libxt-dev, waylandpp-dev | netcat, wayland-protocols | wipe, lsb-release, meson (>= 0.47.0), nasm (>= 2.14), ninja-build, python3-dev, python3-pil | python-imaging, python-support | python3-minimal, rapidjson-dev, swig, unzip, uuid-dev, yasm, zip, zlib1g-dev
 
 ### 3.1. Build missing dependencies
-Some packages may be missing or outdated in older distributions. Notably `crossguid, libfmt, waylandpp, wayland-protocols, etc.` are known to be outdated or missing. Fortunately there is an easy way to build individual dependencies with **[Kodi's unified depends build system](../tools/depends/README.md)**.
+Some packages may be missing or outdated in older distributions. Notably `crossguid`, `libfmt`, `libspdlog`, `waylandpp`, `wayland-protocols`, etc. are known to be outdated or missing. Fortunately there is an easy way to build individual dependencies with **[Kodi's unified depends build system](../tools/depends/README.md)**.
 
 Change to Kodi's source code directory:
 ```
@@ -99,6 +99,11 @@ Build and install libfmt:
 sudo make -C tools/depends/target/libfmt PREFIX=/usr/local
 ```
 
+Build and install libspdlog:
+```
+sudo make -C tools/depends/target/libspdlog PREFIX=/usr/local
+```
+
 Build and install wayland-protocols:
 ```
 sudo make -C tools/depends/target/wayland-protocols PREFIX=/usr/local
@@ -114,7 +119,7 @@ sudo make -C tools/depends/target/waylandpp PREFIX=/usr/local
 **TIP:** Complete list of dependencies is available **[here](https://github.com/xbmc/xbmc/tree/master/tools/depends/target)**.
 
 ### 3.2. Enable internal dependencies
-Some dependencies can be configured to build before Kodi. That's the case with `flatbuffers`, `crossguid, libfmt, rapidjson and dav1d`. To enable the internal build of a dependency, append `-DENABLE_INTERNAL_<DEPENDENCY_NAME>=ON` to the configure command below. For example, configuring an X11 build with internal `fmt` would become `cmake ../kodi -DCMAKE_INSTALL_PREFIX=/usr/local -DENABLE_INTERNAL_FMT=ON` instead of `cmake ../kodi -DCMAKE_INSTALL_PREFIX=/usr/local`.
+Some dependencies can be configured to build before Kodi. That's the case with `flatbuffers`, `crossguid`, `libfmt`, `libspdlog`, `rapidjson` and `dav1d`. To enable the internal build of a dependency, append `-DENABLE_INTERNAL_<DEPENDENCY_NAME>=ON` to the configure command below. For example, configuring an X11 build with internal `fmt` would become `cmake ../kodi -DCMAKE_INSTALL_PREFIX=/usr/local -DENABLE_INTERNAL_FMT=ON` instead of `cmake ../kodi -DCMAKE_INSTALL_PREFIX=/usr/local`.
 
 **[back to top](#table-of-contents)** | **[back to section top](#3-installing-the-required-packages)**
 
diff --git a/docs/README.Ubuntu.md b/docs/README.Ubuntu.md
index f57a4550876b..6ebef3732d90 100644
--- a/docs/README.Ubuntu.md
+++ b/docs/README.Ubuntu.md
@@ -116,7 +116,7 @@ If you get a `package not found` type of message with the below command, remove
 
 Install build dependencies manually:
 ```
-sudo apt install debhelper autoconf automake autopoint gettext autotools-dev cmake curl default-jre doxygen gawk gcc gdc gperf libasound2-dev libass-dev libavahi-client-dev libavahi-common-dev libbluetooth-dev libbluray-dev libbz2-dev libcdio-dev libp8-platform-dev libcrossguid-dev libcurl4-openssl-dev libcwiid-dev libdbus-1-dev libegl1-mesa-dev libenca-dev libflac-dev flatbuffers-dev libfmt-dev libfontconfig-dev libfreetype6-dev libfribidi-dev libfstrcmp-dev libgcrypt-dev libgif-dev libgles2-mesa-dev libgl1-mesa-dev libglu1-mesa-dev libgnutls28-dev libgpg-error-dev libiso9660-dev libjpeg-dev liblcms2-dev libltdl-dev liblzo2-dev libmicrohttpd-dev libmysqlclient-dev libnfs-dev libogg-dev libpcre3-dev libplist-dev libpng-dev libpulse-dev libshairplay-dev libsmbclient-dev libsqlite3-dev libssl-dev libtag1-dev libtiff5-dev libtinyxml-dev libtool libudev-dev libva-dev libvdpau-dev libvorbis-dev libxmu-dev libxrandr-dev libxslt1-dev libxt-dev lsb-release meson nasm ninja-build python3-dev python3-pil python3-pip rapidjson-dev swig unzip uuid-dev yasm zip zlib1g-dev
+sudo apt install debhelper autoconf automake autopoint gettext autotools-dev cmake curl default-jre doxygen gawk gcc gdc gperf libasound2-dev libass-dev libavahi-client-dev libavahi-common-dev libbluetooth-dev libbluray-dev libbz2-dev libcdio-dev libp8-platform-dev libcrossguid-dev libcurl4-openssl-dev libcwiid-dev libdbus-1-dev libegl1-mesa-dev libenca-dev libflac-dev flatbuffers-dev libfmt-dev libfontconfig-dev libfreetype6-dev libfribidi-dev libfstrcmp-dev libgcrypt-dev libgif-dev libgles2-mesa-dev libgl1-mesa-dev libglu1-mesa-dev libgnutls28-dev libgpg-error-dev libiso9660-dev libjpeg-dev liblcms2-dev libltdl-dev liblzo2-dev libmicrohttpd-dev libmysqlclient-dev libnfs-dev libogg-dev libpcre3-dev libplist-dev libpng-dev libpulse-dev libshairplay-dev libsmbclient-dev libspdlog-dev libsqlite3-dev libssl-dev libtag1-dev libtiff5-dev libtinyxml-dev libtool libudev-dev libva-dev libvdpau-dev libvorbis-dev libxmu-dev libxrandr-dev libxslt1-dev libxt-dev lsb-release meson nasm ninja-build python3-dev python3-pil python3-pip rapidjson-dev swig unzip uuid-dev yasm zip zlib1g-dev
 ```
 
 **WARNING:** Make sure you copy paste the entire line or you might receive an error or miss a few dependencies.
diff --git a/project/BuildDependencies/scripts/0_package.target-win10-arm.list b/project/BuildDependencies/scripts/0_package.target-win10-arm.list
index fb7e72b03b97..97ba9343359c 100644
--- a/project/BuildDependencies/scripts/0_package.target-win10-arm.list
+++ b/project/BuildDependencies/scripts/0_package.target-win10-arm.list
@@ -35,6 +35,7 @@ pillow-6.2.1-win10-arm-v141-20200105.7z
 pycryptodome-3.9.4-win10-arm-v141-20200110.7z
 python-3.7.5-win10-arm-v141-20200105.7z
 rapidjson-1.1.0-20200105.7z
+spdlog-1.5.0-win10-arm-v141-20200320-2.7z
 sqlite-3300100-win10-arm-v141-20200105.7z
 taglib-1.11.1-win10-arm-v141-20200105.7z
 tinyxml-2.6.2-win10-arm-v141-20200105.7z
diff --git a/project/BuildDependencies/scripts/0_package.target-win10-win32.list b/project/BuildDependencies/scripts/0_package.target-win10-win32.list
index 52e38e93aad9..d70422581fc4 100644
--- a/project/BuildDependencies/scripts/0_package.target-win10-win32.list
+++ b/project/BuildDependencies/scripts/0_package.target-win10-win32.list
@@ -35,6 +35,7 @@ pillow-6.2.1-win10-win32-v141-20200105.7z
 pycryptodome-3.9.4-win10-win32-v141-20200110.7z
 python-3.7.5-win10-win32-v141-20200105.7z
 rapidjson-1.1.0-20200105.7z
+spdlog-1.5.0-win10-win32-v141-20200320-2.7z
 sqlite-3300100-win10-win32-v141-20200105.7z
 taglib-1.11.1-win10-win32-v141-20200105.7z
 tinyxml-2.6.2-win10-win32-v141-20200105.7z
diff --git a/project/BuildDependencies/scripts/0_package.target-win10-x64.list b/project/BuildDependencies/scripts/0_package.target-win10-x64.list
index 99cef44952df..c4f3053ad34a 100644
--- a/project/BuildDependencies/scripts/0_package.target-win10-x64.list
+++ b/project/BuildDependencies/scripts/0_package.target-win10-x64.list
@@ -35,6 +35,7 @@ pillow-6.2.1-win10-x64-v141-20200105.7z
 pycryptodome-3.9.4-win10-x64-v141-20200110.7z
 python-3.7.5-win10-x64-v141-20200105.7z
 rapidjson-1.1.0-20200105.7z
+spdlog-1.5.0-win10-x64-v141-20200320.7z
 sqlite-3300100-win10-x64-v141-20200105.7z
 taglib-1.11.1-win10-x64-v141-20200105.7z
 tinyxml-2.6.2-win10-x64-v141-20200105.7z
diff --git a/project/BuildDependencies/scripts/0_package.target-win32.list b/project/BuildDependencies/scripts/0_package.target-win32.list
index fb690a3c4e61..189a1d0a5b78 100644
--- a/project/BuildDependencies/scripts/0_package.target-win32.list
+++ b/project/BuildDependencies/scripts/0_package.target-win32.list
@@ -43,6 +43,7 @@ pycryptodome-3.9.4-win32-v141-20200110.7z
 python-3.7.5-win32-v141-20200105.7z
 rapidjson-1.1.0-20200105.7z
 shairplay-ce80e00-win32-v141-20200105.7z
+spdlog-1.5.0-win32-v141-20200320-2.7z
 sqlite-3300100-win32-v141-20200105.7z
 taglib-1.11.1-win32-v141-20200105.7z
 tinyxml-2.6.2-win32-v141-20200105.7z
diff --git a/project/BuildDependencies/scripts/0_package.target-x64.list b/project/BuildDependencies/scripts/0_package.target-x64.list
index 25794a669071..e78c50293b31 100644
--- a/project/BuildDependencies/scripts/0_package.target-x64.list
+++ b/project/BuildDependencies/scripts/0_package.target-x64.list
@@ -40,6 +40,7 @@ pycryptodome-3.9.4-x64-v141-20200110.7z
 python-3.7.5-x64-v141-20200105.7z
 rapidjson-1.1.0-20200105.7z
 shairplay-ce80e00-x64-v141-20200105.7z
+spdlog-1.5.0-x64-v141-20200320.7z
 sqlite-3300100-x64-v141-20200105.7z
 taglib-1.11.1-x64-v141-20200105.7z
 tinyxml-2.6.2-x64-v141-20200105.7z
diff --git a/tools/buildsteps/freebsd/configure-xbmc b/tools/buildsteps/freebsd/configure-xbmc
index 0c069d274200..0fe6f3b986a2 100644
--- a/tools/buildsteps/freebsd/configure-xbmc
+++ b/tools/buildsteps/freebsd/configure-xbmc
@@ -5,4 +5,4 @@ XBMC_PLATFORM_DIR=freebsd
 
 mkdir -p $WORKSPACE/build
 cd $WORKSPACE/build
-cmake -DCMAKE_BUILD_TYPE=$Configuration ..
+cmake -DCMAKE_BUILD_TYPE=$Configuration -DENABLE_INTERNAL_SPDLOG=ON ..
diff --git a/tools/depends/.gitignore b/tools/depends/.gitignore
index 04c3de216692..b21db943893f 100644
--- a/tools/depends/.gitignore
+++ b/tools/depends/.gitignore
@@ -51,3 +51,4 @@ config.site.native
 /target/libfmt/fmt-*.tar.gz
 /target/rapidjson/rapidjson-*.tar.gz
 /target/flatbuffers/*.tar.gz
+/target/libspdlog/spdlog-*.tar.gz
diff --git a/tools/depends/target/Makefile b/tools/depends/target/Makefile
index 41b39a273512..a0481c4add65 100644
--- a/tools/depends/target/Makefile
+++ b/tools/depends/target/Makefile
@@ -10,7 +10,7 @@ DEPENDS = \
 	openssl gmp nettle gnutls curl nghttp2 \
 	libjpeg-turbo libpng fribidi libass \
 	libxml2 rapidjson libmicrohttpd mariadb libffi \
-	python3 libshairplay libfmt \
+	python3 libshairplay libfmt libspdlog \
 	libplist libcec libbluray tinyxml \
 	taglib libusb libnfs meson-cross-file \
 	pythonmodule-pil pythonmodule-pycryptodome pythonmodule-setuptools \
@@ -117,6 +117,7 @@ libevdev: libudev
 samba-gplv3: gnutls
 taglib: $(ZLIB)
 dav1d: meson-cross-file
+libspdlog: libfmt
 
 .installed-$(PLATFORM): $(DEPENDS)
 	touch $@
diff --git a/tools/depends/target/libspdlog/Makefile b/tools/depends/target/libspdlog/Makefile
new file mode 100644
index 000000000000..69a396f87623
--- /dev/null
+++ b/tools/depends/target/libspdlog/Makefile
@@ -0,0 +1,69 @@
+-include ../../Makefile.include
+DEPS = Makefile
+
+# lib name, version
+LIBNAME=spdlog
+VERSION=1.5.0
+SOURCE=$(LIBNAME)-$(VERSION)
+ARCHIVE=$(SOURCE).tar.gz
+
+CMAKE_OPTIONS= \
+	-DSPDLOG_BUILD_EXAMPLE=OFF \
+	-DSPDLOG_BUILD_TESTS=OFF \
+	-DSPDLOG_BUILD_BENCH=OFF \
+	-DSPDLOG_INSTALL=ON \
+	-DSPDLOG_FMT_EXTERNAL=ON
+
+ifeq ($(CROSS_COMPILING), yes)
+  DEPS += ../../Makefile.include
+else
+  CXXFLAGS += -std=c++14
+  ROOT_DIR := $(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))
+
+  ifeq ($(PLATFORM),)
+    PLATFORM = native
+    TARBALLS_LOCATION = $(ROOT_DIR)
+    BASE_URL := http://mirrors.kodi.tv/build-deps/sources
+    RETRIEVE_TOOL := curl
+    RETRIEVE_TOOL_FLAGS := -Ls --create-dirs -f -O
+    ARCHIVE_TOOL := tar
+    ARCHIVE_TOOL_FLAGS := --strip-components=1 -xf
+    CMAKE := cmake -DCMAKE_INSTALL_PREFIX=$(PREFIX)
+  endif
+endif
+
+LIBDYLIB=$(PLATFORM)/build/libspdlog.a
+
+.PHONY: .installed-native
+
+all: .installed-$(PLATFORM)
+
+download: $(TARBALLS_LOCATION)/$(ARCHIVE)
+
+$(TARBALLS_LOCATION)/$(ARCHIVE):
+	cd $(TARBALLS_LOCATION); $(RETRIEVE_TOOL) $(RETRIEVE_TOOL_FLAGS) $(BASE_URL)/$(ARCHIVE)
+
+$(PLATFORM): $(TARBALLS_LOCATION)/$(ARCHIVE) $(DEPS)
+ifeq ($(PREFIX),)
+	@echo
+	@echo "ERROR: please set PREFIX to the kodi install path e.g. make PREFIX=/usr/local"
+	@exit 1
+endif
+	rm -rf $(PLATFORM); mkdir -p $(PLATFORM)
+	cd $(PLATFORM); $(ARCHIVE_TOOL) $(ARCHIVE_TOOL_FLAGS) $(TARBALLS_LOCATION)/$(ARCHIVE)
+	cd $(PLATFORM); rm -rf build; mkdir -p build
+	cd $(PLATFORM)/build; $(CMAKE) $(CMAKE_OPTIONS) ..
+
+$(LIBDYLIB): $(PLATFORM)
+	$(MAKE) -C $(PLATFORM)/build
+
+.installed-$(PLATFORM): $(PLATFORM)
+	$(MAKE) -C $(PLATFORM)/build install
+	touch $@
+
+clean:
+	$(MAKE) -C $(PLATFORM)/build clean
+	rm -f .installed-$(PLATFORM)
+
+distclean:
+	rm -rf $(PLATFORM) .installed-$(PLATFORM)
diff --git a/xbmc/interfaces/swig/CMakeLists.txt b/xbmc/interfaces/swig/CMakeLists.txt
index fc738219e544..3abe31a3f5d0 100644
--- a/xbmc/interfaces/swig/CMakeLists.txt
+++ b/xbmc/interfaces/swig/CMakeLists.txt
@@ -49,6 +49,7 @@ add_library(python_binding STATIC ${SOURCES})
 set_target_properties(python_binding PROPERTIES POSITION_INDEPENDENT_CODE TRUE
                                                 FOLDER "Build Utilities")
 set(core_DEPENDS python_binding ${core_DEPENDS} CACHE STRING "" FORCE)
+add_dependencies(python_binding ${GLOBAL_TARGET_DEPS})
 
 if(CORE_SYSTEM_NAME STREQUAL windowsstore)
   set_target_properties(python_binding PROPERTIES STATIC_LIBRARY_FLAGS "/ignore:4264")

From 91e7c78eb4cef1a60ce384c09403541fba0c74b0 Mon Sep 17 00:00:00 2001
From: montellese <montellese@kodi.tv>
Date: Sat, 14 Mar 2020 10:59:34 +0100
Subject: [PATCH 04/21] [utils] CLog: replace custom logging implementation
 with spdlog

---
 cmake/treedata/android/subdirs.txt            |   1 +
 cmake/treedata/darwin_embedded/subdirs.txt    |   1 +
 cmake/treedata/osx/subdirs.txt                |   1 +
 xbmc/AppParamParser.cpp                       |   2 +-
 xbmc/Application.cpp                          |   8 +-
 xbmc/ServiceBroker.cpp                        |  12 +
 xbmc/ServiceBroker.h                          |   5 +
 .../devices/PeripheralCecAdapter.cpp          |   2 +-
 .../android/utils/AndroidInterfaceForCLog.cpp |  26 ++
 .../android/utils/AndroidInterfaceForCLog.h   |  22 ++
 xbmc/platform/android/utils/CMakeLists.txt    |   5 +
 xbmc/platform/darwin/DarwinUtils.h            |   1 -
 xbmc/platform/darwin/DarwinUtils.mm           |   5 -
 xbmc/platform/darwin/tvos/XBMCController.mm   |   2 +-
 xbmc/platform/darwin/utils/CMakeLists.txt     |   5 +
 .../darwin/utils/DarwinInterfaceForCLog.h     |  38 +++
 .../darwin/utils/DarwinInterfaceForCLog.mm    |  58 ++++
 .../posix/utils/PosixInterfaceForCLog.cpp     | 100 +-----
 .../posix/utils/PosixInterfaceForCLog.h       |  25 +-
 .../win32/utils/Win32InterfaceForCLog.cpp     | 111 +------
 .../win32/utils/Win32InterfaceForCLog.h       |  25 +-
 xbmc/settings/AdvancedSettings.cpp            |   8 +-
 xbmc/test/TestBasicEnvironment.cpp            |   3 +
 xbmc/utils/CMakeLists.txt                     |   2 +
 xbmc/utils/IPlatformLog.h                     |  40 +++
 xbmc/utils/log.cpp                            | 296 ++++++++----------
 xbmc/utils/log.h                              | 211 +++++++++----
 xbmc/utils/logtypes.h                         |  18 ++
 xbmc/utils/test/TestRegExp.cpp                |   9 +-
 xbmc/utils/test/Testlog.cpp                   |  72 +----
 30 files changed, 599 insertions(+), 515 deletions(-)
 create mode 100644 xbmc/platform/android/utils/AndroidInterfaceForCLog.cpp
 create mode 100644 xbmc/platform/android/utils/AndroidInterfaceForCLog.h
 create mode 100644 xbmc/platform/android/utils/CMakeLists.txt
 create mode 100644 xbmc/platform/darwin/utils/CMakeLists.txt
 create mode 100644 xbmc/platform/darwin/utils/DarwinInterfaceForCLog.h
 create mode 100644 xbmc/platform/darwin/utils/DarwinInterfaceForCLog.mm
 create mode 100644 xbmc/utils/IPlatformLog.h
 create mode 100644 xbmc/utils/logtypes.h

diff --git a/cmake/treedata/android/subdirs.txt b/cmake/treedata/android/subdirs.txt
index 57c89ea843fe..0c4cf8836072 100644
--- a/cmake/treedata/android/subdirs.txt
+++ b/cmake/treedata/android/subdirs.txt
@@ -13,6 +13,7 @@ xbmc/platform/android/network               platform/android/network
 xbmc/platform/android/peripherals           platform/android/peripherals
 xbmc/platform/android/powermanagement       platform/android/powermanagement
 xbmc/platform/android/storage               platform/android/storage
+xbmc/platform/android/utils                 platform/android/utils
 xbmc/platform/linux/peripherals             platform/linux/peripherals
 xbmc/platform/posix                         platform/posix
 xbmc/platform/posix/filesystem              platform/posix/filesystem
diff --git a/cmake/treedata/darwin_embedded/subdirs.txt b/cmake/treedata/darwin_embedded/subdirs.txt
index d2f500ed15a4..be1dfc8d1b9c 100644
--- a/cmake/treedata/darwin_embedded/subdirs.txt
+++ b/cmake/treedata/darwin_embedded/subdirs.txt
@@ -7,6 +7,7 @@ xbmc/platform/darwin/ios-common       platform/ios-common
 xbmc/platform/darwin/ios-common/network  platform/ios-common/network
 xbmc/platform/darwin/ios-common/storage platform/ios-common/storage
 xbmc/platform/darwin/network          platform/darwin/network
+xbmc/platform/darwin/utils            platform/darwin/utils
 xbmc/platform/posix                   posix
 xbmc/platform/posix/filesystem        platform/posix/filesystem
 xbmc/platform/posix/utils             platform/posix/utils
diff --git a/cmake/treedata/osx/subdirs.txt b/cmake/treedata/osx/subdirs.txt
index f4785abbf158..fa28aa0efba6 100644
--- a/cmake/treedata/osx/subdirs.txt
+++ b/cmake/treedata/osx/subdirs.txt
@@ -7,6 +7,7 @@ xbmc/platform/darwin/osx/network      platform/darwin/osx/network
 xbmc/platform/darwin/osx/peripherals  platform/osx/peripherals
 xbmc/platform/darwin/osx/powermanagement platform/darwin/osx/powermanagement
 xbmc/platform/darwin/osx/storage      platform/osx/storage
+xbmc/platform/darwin/utils            platform/darwin/utils
 xbmc/platform/posix                   posix
 xbmc/platform/posix/filesystem        platform/posix/filesystem
 xbmc/platform/posix/network           platform/posix/network
diff --git a/xbmc/AppParamParser.cpp b/xbmc/AppParamParser.cpp
index 6660b0a77632..60ff9d821aef 100644
--- a/xbmc/AppParamParser.cpp
+++ b/xbmc/AppParamParser.cpp
@@ -97,7 +97,7 @@ void CAppParamParser::SetAdvancedSettings(CAdvancedSettings& advancedSettings) c
   {
     advancedSettings.m_logLevel = LOG_LEVEL_DEBUG;
     advancedSettings.m_logLevelHint = LOG_LEVEL_DEBUG;
-    CLog::SetLogLevel(LOG_LEVEL_DEBUG);
+    CServiceBroker::GetLogging().SetLogLevel(LOG_LEVEL_DEBUG);
   }
 
   if (!m_settingsFile.empty())
diff --git a/xbmc/Application.cpp b/xbmc/Application.cpp
index 5cb12e347cef..5539c8e85971 100644
--- a/xbmc/Application.cpp
+++ b/xbmc/Application.cpp
@@ -363,6 +363,8 @@ bool CApplication::Create(const CAppParamParser &params)
   m_bTestMode = params.m_testmode;
   m_bStandalone = params.m_standAlone;
 
+  CServiceBroker::CreateLogging();
+
   CServiceBroker::RegisterCPUInfo(CCPUInfo::GetCPUInfo());
 
   m_pSettingsComponent.reset(new CSettingsComponent());
@@ -420,11 +422,7 @@ bool CApplication::Create(const CAppParamParser &params)
     CopyUserDataIfNeeded("special://masterprofile/", "iOS/sources.xml", "sources.xml");
   #endif
 
-  if (!CLog::Init(CSpecialProtocol::TranslatePath("special://logpath").c_str()))
-  {
-    fprintf(stderr,"Could not init logging classes. Log folder error (%s)\n", CSpecialProtocol::TranslatePath("special://logpath").c_str());
-    return false;
-  }
+  CServiceBroker::GetLogging().Initialize(CSpecialProtocol::TranslatePath("special://logpath"));
 
 #ifdef TARGET_POSIX //! @todo Win32 has no special://home/ mapping by default, so we
   //!       must create these here. Ideally this should be using special://home/ and
diff --git a/xbmc/ServiceBroker.cpp b/xbmc/ServiceBroker.cpp
index 5d60cf8d2375..a23061a45cbd 100644
--- a/xbmc/ServiceBroker.cpp
+++ b/xbmc/ServiceBroker.cpp
@@ -11,10 +11,22 @@
 #include "Application.h"
 #include "profiles/ProfileManager.h"
 #include "settings/SettingsComponent.h"
+#include "utils/log.h"
 #include "windowing/WinSystem.h"
 
 using namespace KODI;
 
+std::unique_ptr<CLog> CServiceBroker::m_logging;
+CLog& CServiceBroker::GetLogging()
+{
+  return *m_logging;
+}
+
+void CServiceBroker::CreateLogging()
+{
+  m_logging = std::make_unique<CLog>();
+}
+
 // announcement
 std::shared_ptr<ANNOUNCEMENT::CAnnouncementManager> CServiceBroker::m_pAnnouncementManager;
 std::shared_ptr<ANNOUNCEMENT::CAnnouncementManager> CServiceBroker::GetAnnouncementManager()
diff --git a/xbmc/ServiceBroker.h b/xbmc/ServiceBroker.h
index 8f5ca91c8109..8a7844da9551 100644
--- a/xbmc/ServiceBroker.h
+++ b/xbmc/ServiceBroker.h
@@ -55,6 +55,7 @@ class CSettingsComponent;
 class CDecoderFilterManager;
 class CMediaManager;
 class CCPUInfo;
+class CLog;
 
 namespace KODI
 {
@@ -78,6 +79,9 @@ namespace PERIPHERALS
 class CServiceBroker
 {
 public:
+  static CLog& GetLogging();
+  static void CreateLogging();
+
   static std::shared_ptr<ANNOUNCEMENT::CAnnouncementManager> GetAnnouncementManager();
   static void RegisterAnnouncementManager(std::shared_ptr<ANNOUNCEMENT::CAnnouncementManager> announcementManager);
   static void UnregisterAnnouncementManager();
@@ -139,6 +143,7 @@ class CServiceBroker
   static void UnregisterCPUInfo();
 
 private:
+  static std::unique_ptr<CLog> m_logging;
   static std::shared_ptr<ANNOUNCEMENT::CAnnouncementManager> m_pAnnouncementManager;
   static CGUIComponent* m_pGUI;
   static CWinSystemBase* m_pWinSystem;
diff --git a/xbmc/peripherals/devices/PeripheralCecAdapter.cpp b/xbmc/peripherals/devices/PeripheralCecAdapter.cpp
index 039acb10af63..1505aaf73f73 100644
--- a/xbmc/peripherals/devices/PeripheralCecAdapter.cpp
+++ b/xbmc/peripherals/devices/PeripheralCecAdapter.cpp
@@ -1206,7 +1206,7 @@ void CPeripheralCecAdapter::CecLogMessage(void *cbParam, const cec_log_message*
     break;
   }
 
-  if (iLevel >= CEC_LOG_NOTICE || (iLevel >= 0 && CLog::IsLogLevelLogged(LOGDEBUG)))
+  if (iLevel >= CEC_LOG_NOTICE || (iLevel >= 0 && CServiceBroker::GetLogging().IsLogLevelLogged(LOGDEBUG)))
     CLog::Log(iLevel, LOGCEC, "%s - %s", __FUNCTION__, message->message);
 }
 
diff --git a/xbmc/platform/android/utils/AndroidInterfaceForCLog.cpp b/xbmc/platform/android/utils/AndroidInterfaceForCLog.cpp
new file mode 100644
index 000000000000..62644a5cffec
--- /dev/null
+++ b/xbmc/platform/android/utils/AndroidInterfaceForCLog.cpp
@@ -0,0 +1,26 @@
+/*
+ *  Copyright (C) 2020 Team Kodi
+ *  This file is part of Kodi - https://kodi.tv
+ *
+ *  SPDX-License-Identifier: GPL-2.0-or-later
+ *  See LICENSES/README.md for more information.
+ */
+
+#include "platform/android/utils/AndroidInterfaceForCLog.h"
+
+#include "CompileInfo.h"
+
+#include <spdlog/sinks/android_sink.h>
+#include <spdlog/sinks/dist_sink.h>
+
+std::unique_ptr<IPlatformLog> IPlatformLog::CreatePlatformLog()
+{
+  return std::make_unique<CAndroidInterfaceForCLog>();
+}
+
+void CAndroidInterfaceForCLog::AddSinks(
+    std::shared_ptr<spdlog::sinks::dist_sink<std::mutex>> distributionSink) const
+{
+  distributionSink->add_sink(
+      std::make_shared<spdlog::sinks::android_sink_mt>(CCompileInfo::GetAppName()));
+}
diff --git a/xbmc/platform/android/utils/AndroidInterfaceForCLog.h b/xbmc/platform/android/utils/AndroidInterfaceForCLog.h
new file mode 100644
index 000000000000..eabc204e79b8
--- /dev/null
+++ b/xbmc/platform/android/utils/AndroidInterfaceForCLog.h
@@ -0,0 +1,22 @@
+/*
+ *  Copyright (C) 2020 Team Kodi
+ *  This file is part of Kodi - https://kodi.tv
+ *
+ *  SPDX-License-Identifier: GPL-2.0-or-later
+ *  See LICENSES/README.md for more information.
+ */
+
+#pragma once
+
+#include "platform/posix/utils/PosixInterfaceForCLog.h"
+
+class CAndroidInterfaceForCLog : public CPosixInterfaceForCLog
+{
+public:
+  CAndroidInterfaceForCLog() = default;
+  ~CAndroidInterfaceForCLog() = default;
+
+  // specialization of CPosixInterfaceForCLog
+  void AddSinks(
+      std::shared_ptr<spdlog::sinks::dist_sink<std::mutex>> distributionSink) const override;
+};
diff --git a/xbmc/platform/android/utils/CMakeLists.txt b/xbmc/platform/android/utils/CMakeLists.txt
new file mode 100644
index 000000000000..c5f53082c3d1
--- /dev/null
+++ b/xbmc/platform/android/utils/CMakeLists.txt
@@ -0,0 +1,5 @@
+set(SOURCES AndroidInterfaceForCLog.cpp)
+
+set(HEADERS AndroidInterfaceForCLog.h)
+
+core_add_library(platform_android_utils)
diff --git a/xbmc/platform/darwin/DarwinUtils.h b/xbmc/platform/darwin/DarwinUtils.h
index b13e596b2420..4f3db3557db6 100644
--- a/xbmc/platform/darwin/DarwinUtils.h
+++ b/xbmc/platform/darwin/DarwinUtils.h
@@ -27,7 +27,6 @@ class CDarwinUtils
   static const char *GetAppRootFolder(void);
   static bool        IsIosSandboxed(void);
   static void        SetScheduling(bool realtime);
-  static void        PrintDebugString(std::string debugString);
   static bool        CFStringRefToString(CFStringRef source, std::string& destination);
   static bool        CFStringRefToUTF8String(CFStringRef source, std::string& destination);
   static const std::string&  GetManufacturer(void);
diff --git a/xbmc/platform/darwin/DarwinUtils.mm b/xbmc/platform/darwin/DarwinUtils.mm
index 08e6603ca25b..8f9cd57e197f 100644
--- a/xbmc/platform/darwin/DarwinUtils.mm
+++ b/xbmc/platform/darwin/DarwinUtils.mm
@@ -245,11 +245,6 @@ bool CFStringRefToStringWithEncoding(CFStringRef source, std::string &destinatio
   return true;
 }
 
-void CDarwinUtils::PrintDebugString(std::string debugString)
-{
-  NSLog(@"Debug Print: %s", debugString.c_str());
-}
-
 
 bool CDarwinUtils::CFStringRefToString(CFStringRef source, std::string &destination)
 {
diff --git a/xbmc/platform/darwin/tvos/XBMCController.mm b/xbmc/platform/darwin/tvos/XBMCController.mm
index d6381513f727..588db3ee9c58 100644
--- a/xbmc/platform/darwin/tvos/XBMCController.mm
+++ b/xbmc/platform/darwin/tvos/XBMCController.mm
@@ -421,7 +421,7 @@ int KODI_Run(bool renderGUI)
   CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->m_logLevel = LOG_LEVEL_NORMAL;
   CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->m_logLevelHint = LOG_LEVEL_NORMAL;
 #endif
-  CLog::SetLogLevel(CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->m_logLevel);
+  CServiceBroker::GetLogging().SetLogLevel(CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->m_logLevel);
 
   // not a failure if returns false, just means someone
   // did the init before us.
diff --git a/xbmc/platform/darwin/utils/CMakeLists.txt b/xbmc/platform/darwin/utils/CMakeLists.txt
new file mode 100644
index 000000000000..c2717d595cb5
--- /dev/null
+++ b/xbmc/platform/darwin/utils/CMakeLists.txt
@@ -0,0 +1,5 @@
+set(SOURCES DarwinInterfaceForCLog.mm)
+
+set(HEADERS DarwinInterfaceForCLog.h)
+
+core_add_library(platform_darwin_utils)
diff --git a/xbmc/platform/darwin/utils/DarwinInterfaceForCLog.h b/xbmc/platform/darwin/utils/DarwinInterfaceForCLog.h
new file mode 100644
index 000000000000..b6bf541e32c3
--- /dev/null
+++ b/xbmc/platform/darwin/utils/DarwinInterfaceForCLog.h
@@ -0,0 +1,38 @@
+/*
+ *  Copyright (C) 2020 Team Kodi
+ *  This file is part of Kodi - https://kodi.tv
+ *
+ *  SPDX-License-Identifier: GPL-2.0-or-later
+ *  See LICENSES/README.md for more information.
+ */
+
+#pragma once
+
+#include "platform/posix/utils/PosixInterfaceForCLog.h"
+
+#include <memory>
+#include <mutex>
+
+#include <spdlog/formatter.h>
+#include <spdlog/sinks/sink.h>
+
+class CDarwinInterfaceForCLog : public CPosixInterfaceForCLog, public spdlog::sinks::sink
+{
+public:
+  CDarwinInterfaceForCLog();
+  ~CDarwinInterfaceForCLog() = default;
+
+  // specialization of CPosixInterfaceForCLog
+  void AddSinks(
+      std::shared_ptr<spdlog::sinks::dist_sink<std::mutex>> distributionSink) const override;
+
+  // implementations of spdlog::sink
+  void log(const spdlog::details::log_msg& msg) override;
+  void flush() override;
+  void set_pattern(const std::string& pattern) override;
+  void set_formatter(std::unique_ptr<spdlog::formatter> sink_formatter) override;
+
+private:
+  std::unique_ptr<spdlog::formatter> m_formatter;
+  std::mutex m_mutex;
+};
diff --git a/xbmc/platform/darwin/utils/DarwinInterfaceForCLog.mm b/xbmc/platform/darwin/utils/DarwinInterfaceForCLog.mm
new file mode 100644
index 000000000000..0d126af9323d
--- /dev/null
+++ b/xbmc/platform/darwin/utils/DarwinInterfaceForCLog.mm
@@ -0,0 +1,58 @@
+/*
+ *  Copyright (C) 2020 Team Kodi
+ *  This file is part of Kodi - https://kodi.tv
+ *
+ *  SPDX-License-Identifier: GPL-2.0-or-later
+ *  See LICENSES/README.md for more information.
+ */
+
+#include "DarwinInterfaceForCLog.h"
+
+#include <string>
+
+#import <Foundation/Foundation.h>
+#include <spdlog/common.h>
+#include <spdlog/details/pattern_formatter.h>
+#include <spdlog/sinks/dist_sink.h>
+
+std::unique_ptr<IPlatformLog> IPlatformLog::CreatePlatformLog()
+{
+  return std::make_unique<CDarwinInterfaceForCLog>();
+}
+
+CDarwinInterfaceForCLog::CDarwinInterfaceForCLog()
+  : m_formatter(std::make_unique<spdlog::pattern_formatter>())
+{
+}
+
+void CDarwinInterfaceForCLog::AddSinks(
+    std::shared_ptr<spdlog::sinks::dist_sink<std::mutex>> distributionSink) const
+{
+  distributionSink->add_sink(std::make_shared<CDarwinInterfaceForCLog>());
+}
+
+void CDarwinInterfaceForCLog::log(const spdlog::details::log_msg& msg)
+{
+  std::lock_guard<std::mutex> lock(m_mutex);
+  spdlog::memory_buf_t formatted;
+  m_formatter->format(msg, formatted);
+  formatted.push_back('\0');
+  NSLog(@"%s", formatted.data());
+}
+
+void CDarwinInterfaceForCLog::flush()
+{
+  std::lock_guard<std::mutex> lock(m_mutex);
+  fflush(stderr);
+}
+
+void CDarwinInterfaceForCLog::set_pattern(const std::string& pattern)
+{
+  set_formatter(std::make_unique<spdlog::pattern_formatter>(pattern));
+}
+
+void CDarwinInterfaceForCLog::set_formatter(std::unique_ptr<spdlog::formatter> sink_formatter)
+{
+  std::lock_guard<std::mutex> lock(m_mutex);
+  m_formatter = std::move(sink_formatter);
+}
diff --git a/xbmc/platform/posix/utils/PosixInterfaceForCLog.cpp b/xbmc/platform/posix/utils/PosixInterfaceForCLog.cpp
index ce4c5aa5b53d..68c1ddb5efe9 100644
--- a/xbmc/platform/posix/utils/PosixInterfaceForCLog.cpp
+++ b/xbmc/platform/posix/utils/PosixInterfaceForCLog.cpp
@@ -1,5 +1,5 @@
 /*
- *  Copyright (C) 2014-2018 Team Kodi
+ *  Copyright (C) 2020 Team Kodi
  *  This file is part of Kodi - https://kodi.tv
  *
  *  SPDX-License-Identifier: GPL-2.0-or-later
@@ -7,100 +7,10 @@
  */
 
 #include "PosixInterfaceForCLog.h"
-#include <stdio.h>
-#include <time.h>
-#include <sys/time.h>
 
-#if defined(TARGET_DARWIN)
-#include "platform/darwin/DarwinUtils.h"
-#elif defined(TARGET_ANDROID)
-#include "platform/android/activity/XBMCApp.h"
-#endif // TARGET_ANDROID
-
-struct FILEWRAP : public FILE
-{};
-
-
-CPosixInterfaceForCLog::CPosixInterfaceForCLog() :
-  m_file(NULL)
-{ }
-
-CPosixInterfaceForCLog::~CPosixInterfaceForCLog()
-{
-  if (m_file)
-    fclose(m_file);
-  m_file = NULL;
-}
-
-bool CPosixInterfaceForCLog::OpenLogFile(const std::string &logFilename, const std::string &backupOldLogToFilename)
-{
-  if (m_file)
-    return false; // file was already opened
-
-  (void)remove(backupOldLogToFilename.c_str()); // if it's failed, try to continue
-  (void)rename(logFilename.c_str(), backupOldLogToFilename.c_str()); // if it's failed, try to continue
-
-  m_file = (FILEWRAP*)fopen(logFilename.c_str(), "wb");
-  if (!m_file)
-    return false; // error, can't open log file
-
-  static const unsigned char BOM[3] = { 0xEF, 0xBB, 0xBF };
-  (void)fwrite(BOM, sizeof(BOM), 1, m_file); // write BOM, ignore possible errors
-
-  return true;
-}
-
-void CPosixInterfaceForCLog::CloseLogFile()
-{
-  if (m_file)
-  {
-    fclose(m_file);
-    m_file = NULL;
-  }
-}
-
-bool CPosixInterfaceForCLog::WriteStringToLog(const std::string &logString)
+#if !defined(TARGET_ANDROID) && !defined(TARGET_DARWIN)
+std::unique_ptr<IPlatformLog> IPlatformLog::CreatePlatformLog()
 {
-  if (!m_file)
-    return false;
-
-  const bool ret = (fwrite(logString.data(), logString.size(), 1, m_file) == 1) &&
-                   (fwrite("\n", 1, 1, m_file) == 1);
-  (void)fflush(m_file);
-
-  return ret;
-}
-
-void CPosixInterfaceForCLog::PrintDebugString(const std::string &debugString)
-{
-#ifdef _DEBUG
-#if defined(TARGET_DARWIN)
-  CDarwinUtils::PrintDebugString(debugString);
-#elif defined(TARGET_ANDROID)
-  //print to adb
-  CXBMCApp::android_printf("Debug Print: %s", debugString.c_str());
-#endif // TARGET_ANDROID
-#endif // _DEBUG
-}
-
-void CPosixInterfaceForCLog::GetCurrentLocalTime(int& year, int& month, int& day, int &hour, int& minute, int& second, double& milliseconds)
-{
-  struct tm localTime;
-  struct timeval tv;
-
-  if (gettimeofday(&tv, nullptr) != -1 && localtime_r(&tv.tv_sec, &localTime) != NULL)
-  {
-    year   = localTime.tm_year + 1900;
-    month  = localTime.tm_mon + 1;
-    day    = localTime.tm_mday;
-    hour   = localTime.tm_hour;
-    minute = localTime.tm_min;
-    second = localTime.tm_sec;
-    milliseconds = static_cast<double>(tv.tv_usec) / 1000;
-  }
-  else
-  {
-    year = month = day = hour = minute = second = 0;
-    milliseconds = 0.0;
-  }
+  return std::make_unique<CPosixInterfaceForCLog>();
 }
+#endif
diff --git a/xbmc/platform/posix/utils/PosixInterfaceForCLog.h b/xbmc/platform/posix/utils/PosixInterfaceForCLog.h
index 4e0f6c66467b..48a016efb217 100644
--- a/xbmc/platform/posix/utils/PosixInterfaceForCLog.h
+++ b/xbmc/platform/posix/utils/PosixInterfaceForCLog.h
@@ -1,5 +1,5 @@
 /*
- *  Copyright (C) 2014-2018 Team Kodi
+ *  Copyright (C) 2020 Team Kodi
  *  This file is part of Kodi - https://kodi.tv
  *
  *  SPDX-License-Identifier: GPL-2.0-or-later
@@ -8,20 +8,17 @@
 
 #pragma once
 
-#include <string>
+#include "utils/IPlatformLog.h"
 
-struct FILEWRAP; // forward declaration, wrapper for FILE
-
-class CPosixInterfaceForCLog
+class CPosixInterfaceForCLog : public IPlatformLog
 {
 public:
-  CPosixInterfaceForCLog();
-  ~CPosixInterfaceForCLog();
-  bool OpenLogFile(const std::string& logFilename, const std::string& backupOldLogToFilename);
-  void CloseLogFile(void);
-  bool WriteStringToLog(const std::string& logString);
-  void PrintDebugString(const std::string& debugString);
-  static void GetCurrentLocalTime(int& year, int& month, int& day, int& hour, int& minute, int& second, double& millisecond);
-private:
-  FILEWRAP* m_file;
+  CPosixInterfaceForCLog() = default;
+  virtual ~CPosixInterfaceForCLog() = default;
+
+  spdlog_filename_t GetLogFilename(const std::string& filename) const override { return filename; }
+  void AddSinks(
+      std::shared_ptr<spdlog::sinks::dist_sink<std::mutex>> distributionSink) const override
+  {
+  }
 };
diff --git a/xbmc/platform/win32/utils/Win32InterfaceForCLog.cpp b/xbmc/platform/win32/utils/Win32InterfaceForCLog.cpp
index 9eea2d0f4935..3c055dafa08b 100644
--- a/xbmc/platform/win32/utils/Win32InterfaceForCLog.cpp
+++ b/xbmc/platform/win32/utils/Win32InterfaceForCLog.cpp
@@ -1,119 +1,34 @@
 /*
- *  Copyright (C) 2014-2018 Team Kodi
+ *  Copyright (C) 2020 Team Kodi
  *  This file is part of Kodi - https://kodi.tv
  *
  *  SPDX-License-Identifier: GPL-2.0-or-later
  *  See LICENSES/README.md for more information.
  */
 
-#ifndef TARGET_WINDOWS
+#if !defined(TARGET_WINDOWS) && !defined(TARGET_WIN10)
 #error This file is for win32 platforms only
-#endif //!TARGET_WINDOWS
+#endif // !defined(TARGET_WINDOWS) && !defined(TARGET_WIN10)
 
 #include "Win32InterfaceForCLog.h"
-#include "platform/win32/WIN32Util.h"
-#include "utils/StringUtils.h"
-#include "utils/auto_buffer.h"
-
-#include <Windows.h>
-
-CWin32InterfaceForCLog::CWin32InterfaceForCLog() :
-  m_hFile(INVALID_HANDLE_VALUE)
-{ }
-
-CWin32InterfaceForCLog::~CWin32InterfaceForCLog()
-{
-  if (m_hFile != INVALID_HANDLE_VALUE)
-    CloseHandle(m_hFile);
-}
-
-bool CWin32InterfaceForCLog::OpenLogFile(const std::string& logFilename, const std::string& backupOldLogToFilename)
-{
-  if (m_hFile != INVALID_HANDLE_VALUE)
-    return false; // file was already opened
-
-  std::wstring strLogFileW(CWIN32Util::ConvertPathToWin32Form(CWIN32Util::SmbToUnc(logFilename)));
-  std::wstring strLogFileOldW(CWIN32Util::ConvertPathToWin32Form(CWIN32Util::SmbToUnc(backupOldLogToFilename)));
-
-  if (strLogFileW.empty())
-    return false;
-
-  if (!strLogFileOldW.empty())
-  {
-    (void)DeleteFileW(strLogFileOldW.c_str()); // if it's failed, try to continue
-#ifdef TARGET_WINDOWS_STORE
-    (void)MoveFileEx(strLogFileW.c_str(), strLogFileOldW.c_str(), MOVEFILE_REPLACE_EXISTING); // if it's failed, try to continue
-#else
-    (void)MoveFileW(strLogFileW.c_str(), strLogFileOldW.c_str()); // if it's failed, try to continue
-#endif
-  }
 
-#ifdef TARGET_WINDOWS_STORE
-  m_hFile = CreateFile2(strLogFileW.c_str(), GENERIC_WRITE, FILE_SHARE_READ,
-                                  CREATE_ALWAYS, NULL);
-#else
-  m_hFile = CreateFileW(strLogFileW.c_str(), GENERIC_WRITE, FILE_SHARE_READ, NULL,
-    CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
-#endif
-
-  if (m_hFile == INVALID_HANDLE_VALUE)
-    return false;
-
-  static const unsigned char BOM[3] = { 0xEF, 0xBB, 0xBF };
-  DWORD written;
-  (void)WriteFile(m_hFile, BOM, sizeof(BOM), &written, NULL); // write BOM, ignore possible errors
-  (void)FlushFileBuffers(m_hFile);
-
-  return true;
-}
+#include "platform/win32/WIN32Util.h"
 
-void CWin32InterfaceForCLog::CloseLogFile(void)
-{
-  if (m_hFile != INVALID_HANDLE_VALUE)
-  {
-    CloseHandle(m_hFile);
-    m_hFile = INVALID_HANDLE_VALUE;
-  }
-}
+#include <spdlog/sinks/dist_sink.h>
+#include <spdlog/sinks/msvc_sink.h>
 
-bool CWin32InterfaceForCLog::WriteStringToLog(const std::string& logString)
+std::unique_ptr<IPlatformLog> IPlatformLog::CreatePlatformLog()
 {
-  if (m_hFile == INVALID_HANDLE_VALUE)
-    return false;
-
-  std::string strData(logString);
-  StringUtils::Replace(strData, "\n", "\r\n");
-  strData += "\r\n";
-
-  DWORD written;
-  const bool ret = (WriteFile(m_hFile, strData.c_str(), strData.length(), &written, NULL) != 0) && written == strData.length();
-
-  return ret;
+  return std::make_unique<CWin32InterfaceForCLog>();
 }
 
-void CWin32InterfaceForCLog::PrintDebugString(const std::string& debugString)
+spdlog_filename_t CWin32InterfaceForCLog::GetLogFilename(const std::string& filename) const
 {
-#ifdef _DEBUG
-  ::OutputDebugStringW(L"Debug Print: ");
-  int bufSize = MultiByteToWideChar(CP_UTF8, 0, debugString.c_str(), debugString.length(), NULL, 0);
-  XUTILS::auto_buffer buf(sizeof(wchar_t) * (bufSize + 1)); // '+1' for extra safety
-  if (MultiByteToWideChar(CP_UTF8, 0, debugString.c_str(), debugString.length(), (wchar_t*)buf.get(), buf.size() / sizeof(wchar_t)) == bufSize)
-    ::OutputDebugStringW(std::wstring((wchar_t*)buf.get(), bufSize).c_str());
-  else
-    ::OutputDebugStringA(debugString.c_str());
-  ::OutputDebugStringW(L"\n");
-#endif // _DEBUG
+  return CWIN32Util::ConvertPathToWin32Form(CWIN32Util::SmbToUnc(filename));
 }
 
-void CWin32InterfaceForCLog::GetCurrentLocalTime(int& year, int& month, int& day, int& hour, int& minute, int& second, double& millisecond)
+void CWin32InterfaceForCLog::AddSinks(
+    std::shared_ptr<spdlog::sinks::dist_sink<std::mutex>> distributionSink) const
 {
-  KODI::TIME::SystemTime time;
-  GetLocalTime(&time);
-  year = time.year;
-  month = time.month;
-  day = time.day;
-  hour = time.hour;
-  minute = time.minute;
-  second = time.second;
-  millisecond = static_cast<double>(time.milliseconds);
+  distributionSink->add_sink(std::make_shared<spdlog::sinks::msvc_sink_mt>());
 }
diff --git a/xbmc/platform/win32/utils/Win32InterfaceForCLog.h b/xbmc/platform/win32/utils/Win32InterfaceForCLog.h
index 6baf61a3164e..1c3b3d8ea50c 100644
--- a/xbmc/platform/win32/utils/Win32InterfaceForCLog.h
+++ b/xbmc/platform/win32/utils/Win32InterfaceForCLog.h
@@ -1,5 +1,5 @@
 /*
- *  Copyright (C) 2014-2018 Team Kodi
+ *  Copyright (C) 2020 Team Kodi
  *  This file is part of Kodi - https://kodi.tv
  *
  *  SPDX-License-Identifier: GPL-2.0-or-later
@@ -8,20 +8,19 @@
 
 #pragma once
 
-#include <string>
+#if !defined(TARGET_WINDOWS) && !defined(TARGET_WIN10)
+#error This file is for win32 platforms only
+#endif // !defined(TARGET_WINDOWS) && !defined(TARGET_WIN10)
 
-typedef void* HANDLE; // forward declaration, to avoid inclusion of whole Windows.h
+#include "utils/IPlatformLog.h"
 
-class CWin32InterfaceForCLog
+class CWin32InterfaceForCLog : public IPlatformLog
 {
 public:
-  CWin32InterfaceForCLog();
-  ~CWin32InterfaceForCLog();
-  bool OpenLogFile(const std::string& logFilename, const std::string& backupOldLogToFilename);
-  void CloseLogFile(void);
-  bool WriteStringToLog(const std::string& logString);
-  void PrintDebugString(const std::string& debugString);
-  static void GetCurrentLocalTime(int& year, int& month, int& day, int& hour, int& minute, int& second, double& millisecond);
-private:
-  HANDLE m_hFile;
+  CWin32InterfaceForCLog() = default;
+  ~CWin32InterfaceForCLog() = default;
+
+  spdlog_filename_t GetLogFilename(const std::string& filename) const override;
+  void AddSinks(
+      std::shared_ptr<spdlog::sinks::dist_sink<std::mutex>> distributionSink) const override;
 };
diff --git a/xbmc/settings/AdvancedSettings.cpp b/xbmc/settings/AdvancedSettings.cpp
index bf7c76a5172f..54f82611354a 100644
--- a/xbmc/settings/AdvancedSettings.cpp
+++ b/xbmc/settings/AdvancedSettings.cpp
@@ -68,7 +68,7 @@ void CAdvancedSettings::OnSettingsLoaded()
     m_logLevel = std::min(m_logLevelHint, LOG_LEVEL_DEBUG/*LOG_LEVEL_NORMAL*/);
     CLog::Log(LOGNOTICE, "Disabled debug logging due to GUI setting. Level %d.", m_logLevel);
   }
-  CLog::SetLogLevel(m_logLevel);
+  CServiceBroker::GetLogging().SetLogLevel(m_logLevel);
 
   m_extraLogEnabled = settings->GetBool(CSettings::SETTING_DEBUG_EXTRALOGGING);
   SetExtraLogLevel(settings->GetList(CSettings::SETTING_DEBUG_SETEXTRALOGLEVEL));
@@ -867,7 +867,7 @@ void CAdvancedSettings::ParseSettingsFile(const std::string &file)
         setting->SetVisible(false);
     }
     m_logLevel = std::max(m_logLevel, m_logLevelHint);
-    CLog::SetLogLevel(m_logLevel);
+    CServiceBroker::GetLogging().SetLogLevel(m_logLevel);
   }
 
   XMLUtils::GetString(pRootElement, "cddbaddress", m_cddbAddress);
@@ -1351,7 +1351,7 @@ void CAdvancedSettings::SetDebugMode(bool debug)
   {
     int level = std::max(m_logLevelHint, LOG_LEVEL_DEBUG_FREEMEM);
     m_logLevel = level;
-    CLog::SetLogLevel(level);
+    CServiceBroker::GetLogging().SetLogLevel(level);
     CLog::Log(LOGNOTICE, "Enabled debug logging due to GUI setting. Level %d.", level);
   }
   else
@@ -1359,7 +1359,7 @@ void CAdvancedSettings::SetDebugMode(bool debug)
     int level = std::min(m_logLevelHint, LOG_LEVEL_DEBUG/*LOG_LEVEL_NORMAL*/);
     CLog::Log(LOGNOTICE, "Disabled debug logging due to GUI setting. Level %d.", level);
     m_logLevel = level;
-    CLog::SetLogLevel(level);
+    CServiceBroker::GetLogging().SetLogLevel(level);
   }
 }
 
diff --git a/xbmc/test/TestBasicEnvironment.cpp b/xbmc/test/TestBasicEnvironment.cpp
index 971401892405..cbb9605c804c 100644
--- a/xbmc/test/TestBasicEnvironment.cpp
+++ b/xbmc/test/TestBasicEnvironment.cpp
@@ -38,6 +38,9 @@ void TestBasicEnvironment::SetUp()
 {
   CAppParamParser params;
   params.m_platformDirectories = false;
+
+  CServiceBroker::CreateLogging();
+
   m_pSettingsComponent.reset(new CSettingsComponent());
   m_pSettingsComponent->Init(params);
 
diff --git a/xbmc/utils/CMakeLists.txt b/xbmc/utils/CMakeLists.txt
index 648d15ffee9b..9705e31d0932 100644
--- a/xbmc/utils/CMakeLists.txt
+++ b/xbmc/utils/CMakeLists.txt
@@ -111,6 +111,7 @@ set(HEADERS ActorProtocol.h
             IBufferObject.h
             ILocalizer.h
             InfoLoader.h
+            IPlatformLog.h
             IRssObserver.h
             IScreenshotSurface.h
             ISerializable.h
@@ -125,6 +126,7 @@ set(HEADERS ActorProtocol.h
             LegacyPathTranslation.h
             Locale.h
             log.h
+            logtypes.h
             MathUtils.h
             MemUtils.h
             Mime.h
diff --git a/xbmc/utils/IPlatformLog.h b/xbmc/utils/IPlatformLog.h
new file mode 100644
index 000000000000..6ccf98d33480
--- /dev/null
+++ b/xbmc/utils/IPlatformLog.h
@@ -0,0 +1,40 @@
+/*
+ *  Copyright (C) 2020 Team Kodi
+ *  This file is part of Kodi - https://kodi.tv
+ *
+ *  SPDX-License-Identifier: GPL-2.0-or-later
+ *  See LICENSES/README.md for more information.
+ */
+
+#pragma once
+
+#include <memory>
+#include <mutex>
+#include <string>
+
+#ifdef TARGET_WINDOWS
+using spdlog_filename_t = std::wstring;
+#else
+using spdlog_filename_t = std::string;
+#endif
+
+namespace spdlog
+{
+namespace sinks
+{
+template<typename Mutex>
+class dist_sink;
+}
+} // namespace spdlog
+
+class IPlatformLog
+{
+public:
+  virtual ~IPlatformLog() = default;
+
+  static std::unique_ptr<IPlatformLog> CreatePlatformLog();
+
+  virtual spdlog_filename_t GetLogFilename(const std::string& filename) const = 0;
+  virtual void AddSinks(
+      std::shared_ptr<spdlog::sinks::dist_sink<std::mutex>> distributionSink) const = 0;
+};
diff --git a/xbmc/utils/log.cpp b/xbmc/utils/log.cpp
index e51a5f3d6f76..79b423ff18e7 100644
--- a/xbmc/utils/log.cpp
+++ b/xbmc/utils/log.cpp
@@ -10,207 +10,185 @@
 
 #include "CompileInfo.h"
 #include "ServiceBroker.h"
-#include "settings/AdvancedSettings.h"
-#include "settings/SettingsComponent.h"
-#include "threads/CriticalSection.h"
-#include "threads/SingleLock.h"
-#include "threads/Thread.h"
-#include "utils/StringUtils.h"
-
-#include <inttypes.h>
-
-#if defined(TARGET_POSIX)
-#include "platform/posix/utils/PosixInterfaceForCLog.h"
-typedef class CPosixInterfaceForCLog PlatformInterfaceForCLog;
-#elif defined(TARGET_WINDOWS)
+#include "filesystem/File.h"
+#include "utils/URIUtils.h"
+
+#if defined(TARGET_ANDROID)
+#include "platform/android/utils/AndroidInterfaceForCLog.h"
+#elif defined(TARGET_DARWIN)
+#include "platform/darwin/utils/DarwinInterfaceForCLog.h"
+#elif defined(TARGET_WINDOWS) || defined(TARGET_WIN10)
 #include "platform/win32/utils/Win32InterfaceForCLog.h"
-typedef class CWin32InterfaceForCLog PlatformInterfaceForCLog;
+#else
+#include "platform/posix/utils/PosixInterfaceForCLog.h"
 #endif
 
+#include <cstring>
 
-static const char* const levelNames[] =
-{"DEBUG", "INFO", "NOTICE", "WARNING", "ERROR", "SEVERE", "FATAL", "NONE"};
+#include <spdlog/sinks/basic_file_sink.h>
+#include <spdlog/sinks/dist_sink.h>
 
-// add 1 to level number to get index of name
-static const char* const logLevelNames[] =
-{ "LOG_LEVEL_NONE" /*-1*/, "LOG_LEVEL_NORMAL" /*0*/, "LOG_LEVEL_DEBUG" /*1*/, "LOG_LEVEL_DEBUG_FREEMEM" /*2*/ };
+static constexpr unsigned char Utf8Bom[3] = {0xEF, 0xBB, 0xBF};
+static const std::string LogFileExtension = ".log";
+static const std::string LogPattern = "%Y-%m-%d %T.%e T:%-5t %7l <%n>: %v";
 
-namespace
-{
-class CLogGlobals
+CLog::CLog()
+  : m_platform(IPlatformLog::CreatePlatformLog()),
+    m_sinks(std::make_shared<spdlog::sinks::dist_sink_mt>()),
+    m_defaultLogger(CreateLogger("general")),
+    m_logLevel(LOG_LEVEL_DEBUG)
 {
-public:
-  ~CLogGlobals() = default;
-  PlatformInterfaceForCLog m_platform;
-  int         m_repeatCount = 0;
-  int         m_repeatLogLevel = -1;
-  std::string m_repeatLine;
-  int         m_logLevel = LOG_LEVEL_DEBUG;
-  int         m_extraLogLevels = 0;
-  CCriticalSection critSec;
-};
-
-static CLogGlobals g_logState;
-}
+  // add platform-specific debug sinks
+  m_platform->AddSinks(m_sinks);
 
-CLog::CLog() = default;
+  // register the default logger with spdlog
+  spdlog::set_default_logger(m_defaultLogger);
 
-CLog::~CLog() = default;
+  // set the formatting pattern globally
+  spdlog::set_pattern(LogPattern);
 
-void CLog::Close()
-{
-  CSingleLock waitLock(g_logState.critSec);
-  g_logState.m_platform.CloseLogFile();
-  g_logState.m_repeatLine.clear();
+  // flush on debug logs
+  spdlog::flush_on(spdlog::level::debug);
+
+  // set the log level
+  SetLogLevel(m_logLevel);
 }
 
-void CLog::LogString(int logLevel, std::string&& logString)
+void CLog::Initialize(const std::string& path)
 {
-  CSingleLock waitLock(g_logState.critSec);
-  std::string strData(logString);
-  StringUtils::TrimRight(strData);
-  if (!strData.empty())
+  if (m_fileSink != nullptr)
+    return;
+
+  if (path.empty())
+    return;
+
+  // put together the path to the log file(s)
+  std::string appName = CCompileInfo::GetAppName();
+  StringUtils::ToLower(appName);
+  const std::string filePathBase = URIUtils::AddFileToFolder(path, appName);
+  const std::string filePath = filePathBase + LogFileExtension;
+  const std::string oldFilePath = filePathBase + ".old" + LogFileExtension;
+
+  // handle old.log by deleting an existing old.log and renaming the last log to old.log
+  XFILE::CFile::Delete(oldFilePath);
+  XFILE::CFile::Rename(filePath, oldFilePath);
+
+  // write UTF-8 BOM
   {
-    if (g_logState.m_repeatLogLevel == logLevel && g_logState.m_repeatLine == strData)
-    {
-      g_logState.m_repeatCount++;
-      return;
-    }
-    else if (g_logState.m_repeatCount)
-    {
-      std::string strData2 = StringUtils::Format("Previous line repeats %d times.",
-                                                g_logState.m_repeatCount);
-      PrintDebugString(strData2);
-      WriteLogString(g_logState.m_repeatLogLevel, strData2);
-      g_logState.m_repeatCount = 0;
-    }
-
-    g_logState.m_repeatLine = strData;
-    g_logState.m_repeatLogLevel = logLevel;
-
-    PrintDebugString(strData);
-
-    WriteLogString(logLevel, strData);
+    XFILE::CFile file;
+    if (file.OpenForWrite(filePath, true))
+      file.Write(Utf8Bom, sizeof(Utf8Bom));
   }
-}
 
-void CLog::LogString(int logLevel, int component, std::string&& logString)
-{
-  if (CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(component) && IsLogLevelLogged(logLevel))
-    LogString(logLevel, std::move(logString));
+  // create the file sink
+  m_fileSink = std::make_shared<spdlog::sinks::basic_file_sink_mt>(
+      m_platform->GetLogFilename(filePath), false);
+  m_fileSink->set_pattern(LogPattern);
+
+  // add it to the existing sinks
+  m_sinks->add_sink(m_fileSink);
 }
 
-bool CLog::Init(const std::string& path)
+void CLog::Uninitialize()
 {
-  CSingleLock waitLock(g_logState.critSec);
+  if (m_fileSink == nullptr)
+    return;
 
-  // the log folder location is initialized in the CAdvancedSettings
-  // constructor and changed in CApplication::Create()
+  // flush all loggers
+  spdlog::apply_all([](std::shared_ptr<spdlog::logger> logger) { logger->flush(); });
 
-  std::string appName = CCompileInfo::GetAppName();
-  StringUtils::ToLower(appName);
-  return g_logState.m_platform.OpenLogFile(path + appName + ".log", path + appName + ".old.log");
-}
+  // flush the file sink
+  m_fileSink->flush();
 
-void CLog::MemDump(char *pData, int length)
-{
-  Log(LOGDEBUG, "MEM_DUMP: Dumping from %p", pData);
-  for (int i = 0; i < length; i+=16)
-  {
-    std::string strLine = StringUtils::Format("MEM_DUMP: %04x ", i);
-    char *alpha = pData;
-    for (int k=0; k < 4 && i + 4*k < length; k++)
-    {
-      for (int j=0; j < 4 && i + 4*k + j < length; j++)
-      {
-        std::string strFormat = StringUtils::Format(" %02x", (unsigned char)*pData++);
-        strLine += strFormat;
-      }
-      strLine += " ";
-    }
-    // pad with spaces
-    while (strLine.size() < 13*4 + 16)
-      strLine += " ";
-    for (int j=0; j < 16 && i + j < length; j++)
-    {
-      if (*alpha > 31)
-        strLine += *alpha;
-      else
-        strLine += '.';
-      alpha++;
-    }
-    Log(LOGDEBUG, "%s", strLine.c_str());
-  }
+  // remove and destroy the file sink
+  m_sinks->remove_sink(m_fileSink);
+  m_fileSink.reset();
 }
 
 void CLog::SetLogLevel(int level)
 {
-  CSingleLock waitLock(g_logState.critSec);
-  if (level >= LOG_LEVEL_NONE && level <= LOG_LEVEL_MAX)
-  {
-    g_logState.m_logLevel = level;
-    CLog::Log(LOGNOTICE, "Log level changed to \"%s\"", logLevelNames[g_logState.m_logLevel + 1]);
-  }
+  if (level < LOG_LEVEL_NONE || level > LOG_LEVEL_MAX)
+    return;
+
+  m_logLevel = level;
+
+  auto spdLevel = spdlog::level::info;
+#if defined(_DEBUG) || defined(PROFILE)
+  spdLevel = spdlog::level::trace;
+#else
+  if (level <= LOG_LEVEL_NONE)
+    spdLevel = spdlog::level::off;
+  else if (level >= LOG_LEVEL_DEBUG)
+    spdLevel = spdlog::level::trace;
   else
-    CLog::Log(LOGERROR, "%s: Invalid log level requested: %d", __FUNCTION__, level);
-}
+    spdLevel = spdlog::level::info;
+#endif
 
-int CLog::GetLogLevel()
-{
-  return g_logState.m_logLevel;
-}
+  if (m_defaultLogger != nullptr && m_defaultLogger->level() == spdLevel)
+    return;
 
-void CLog::SetExtraLogLevels(int level)
-{
-  CSingleLock waitLock(g_logState.critSec);
-  g_logState.m_extraLogLevels = level;
+  spdlog::set_level(spdLevel);
+  FormatAndLogInternal(spdlog::level::info, "Log level changed to \"%s\"",
+                       spdlog::level::to_string_view(spdLevel));
 }
 
 bool CLog::IsLogLevelLogged(int loglevel)
 {
-  const int extras = (loglevel & ~LOGMASK);
-  if (extras != 0 && (g_logState.m_extraLogLevels & extras) == 0)
-    return false;
-
-  if (g_logState.m_logLevel >= LOG_LEVEL_DEBUG)
+  if (m_logLevel >= LOG_LEVEL_DEBUG)
     return true;
-  if (g_logState.m_logLevel <= LOG_LEVEL_NONE)
+  if (m_logLevel <= LOG_LEVEL_NONE)
     return false;
 
-  // "m_logLevel" is "LOG_LEVEL_NORMAL"
   return (loglevel & LOGMASK) >= LOGNOTICE;
 }
 
+Logger CLog::GetLogger(const std::string& loggerName)
+{
+  auto logger = spdlog::get(loggerName);
+  if (logger == nullptr)
+    logger = CreateLogger(loggerName);
 
-void CLog::PrintDebugString(const std::string& line)
+  return logger;
+}
+
+CLog& CLog::GetInstance()
 {
-#if defined(_DEBUG) || defined(PROFILE)
-  g_logState.m_platform.PrintDebugString(line);
-#endif // defined(_DEBUG) || defined(PROFILE)
+  return CServiceBroker::GetLogging();
 }
 
-bool CLog::WriteLogString(int logLevel, const std::string& logString)
+spdlog::level::level_enum CLog::MapLogLevel(int level)
 {
-  static const char* prefixFormat = "%02d-%02d-%02d %02d:%02d:%02d.%03d T:%" PRIu64" %7s: ";
-
-  std::string strData(logString);
-  /* fixup newline alignment, number of spaces should equal prefix length */
-  StringUtils::Replace(strData, "\n", "\n                                            ");
-
-  int year, month, day, hour, minute, second;
-  double millisecond;
-  g_logState.m_platform.GetCurrentLocalTime(year, month, day, hour, minute, second, millisecond);
-
-  strData = StringUtils::Format(prefixFormat,
-                                  year,
-                                  month,
-                                  day,
-                                  hour,
-                                  minute,
-                                  second,
-                                  static_cast<int>(millisecond),
-                                  static_cast<uint64_t>(CThread::GetCurrentThreadNativeId()),
-                                  levelNames[logLevel]) + strData;
-
-  return g_logState.m_platform.WriteStringToLog(strData);
+  switch (level)
+  {
+    case LOGDEBUG:
+      return spdlog::level::debug;
+    case LOGINFO:
+    case LOGNOTICE:
+      return spdlog::level::info;
+    case LOGWARNING:
+      return spdlog::level::warn;
+    case LOGERROR:
+      return spdlog::level::err;
+    case LOGSEVERE:
+    case LOGFATAL:
+      return spdlog::level::critical;
+    case LOGNONE:
+      return spdlog::level::off;
+
+    default:
+      break;
+  }
+
+  return spdlog::level::info;
+}
+
+Logger CLog::CreateLogger(const std::string& loggerName)
+{
+  // create the logger
+  auto logger = std::make_shared<spdlog::logger>(loggerName, m_sinks);
+
+  // initialize the logger
+  spdlog::initialize_logger(logger);
+
+  return logger;
 }
diff --git a/xbmc/utils/log.h b/xbmc/utils/log.h
index c45ed06c5280..bf37ba3799a1 100644
--- a/xbmc/utils/log.h
+++ b/xbmc/utils/log.h
@@ -8,98 +8,191 @@
 
 #pragma once
 
+// spdlog specific defines
+#define SPDLOG_LEVEL_NAMES {"TRACE", "DEBUG", "INFO", "WARNING", "ERROR", "FATAL", "OFF"};
+
 #include "commons/ilog.h"
+#include "settings/AdvancedSettings.h"
+#include "settings/SettingsComponent.h"
+#include "utils/IPlatformLog.h"
 #include "utils/StringUtils.h"
+#include "utils/logtypes.h"
 
 #include <string>
-#include <utility>
 
+#include <spdlog/spdlog.h>
+
+namespace spdlog
+{
+namespace sinks
+{
+template<typename Mutex>
+class basic_file_sink;
+
+template<typename Mutex>
+class dist_sink;
+} // namespace sinks
+} // namespace spdlog
 
 class CLog
 {
 public:
   CLog();
-  ~CLog();
-  static void Close();
+  ~CLog() = default;
+
+  void Initialize(const std::string& path);
+  void Uninitialize();
 
-  static void Log(int loglevel, const char* format)
+  void SetLogLevel(int level);
+  int GetLogLevel() { return m_logLevel; }
+  bool IsLogLevelLogged(int loglevel);
+
+  Logger GetLogger(const std::string& loggerName);
+
+  template<typename Char, typename... Args>
+  static inline void Log(int level, const Char* format, Args&&... args)
   {
-    if (IsLogLevelLogged(loglevel))
-      LogString(loglevel, format);
+    Log(MapLogLevel(level), format, std::forward<Args>(args)...);
   }
 
-  template<typename... Args>
-  static void Log(int loglevel, const char* format, Args&&... args)
+  template<typename Char, typename... Args>
+  static inline void Log(int level, int component, const Char* format, Args&&... args)
   {
-    if (IsLogLevelLogged(loglevel))
-      LogString(loglevel, StringUtils::Format(format, std::forward<Args>(args)...));
+    if (!CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(component))
+      return;
+
+    Log(level, format, std::forward<Args>(args)...);
   }
 
-  static void Log(int loglevel, int component, const char* format)
+  template<typename Char, typename... Args>
+  static inline void Log(spdlog::level::level_enum level, const Char* format, Args&&... args)
   {
-    if (IsLogLevelLogged(loglevel))
-      LogString(loglevel, component, format);
+    GetInstance().FormatAndLogInternal(level, format, std::forward<Args>(args)...);
   }
 
-  template<typename... Args>
-  static void Log(int loglevel, int component, const char* format, Args&&... args)
+  template<typename Char, typename... Args>
+  static inline void Log(spdlog::level::level_enum level,
+                         int component,
+                         const Char* format,
+                         Args&&... args)
   {
-    // We defer component checking to LogString to avoid having to drag in advancedsettings
-    // everywhere we want to log anything
-    if (IsLogLevelLogged(loglevel))
-      LogString(loglevel, component, StringUtils::Format(format, std::forward<Args>(args)...));
+    if (!CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(component))
+      return;
+
+    Log(level, format, std::forward<Args>(args)...);
   }
 
-  static void LogFunction(int loglevel, std::string functionName, const char* format)
+  template<typename Char, typename... Args>
+  static inline void LogFunction(int level,
+                                 const char* functionName,
+                                 const Char* format,
+                                 Args&&... args)
   {
-    if (IsLogLevelLogged(loglevel))
-      LogString(loglevel, functionName + ": " + format);
+    LogFunction(MapLogLevel(level), functionName, format, std::forward<Args>(args)...);
   }
 
-  template<typename... Args>
-  static void LogFunction(int loglevel,
-                          std::string functionName,
-                          const char* format,
-                          Args&&... args)
+  template<typename Char, typename... Args>
+  static inline void LogFunction(
+      int level, const char* functionName, int component, const Char* format, Args&&... args)
+  {
+    if (!CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(component))
+      return;
+
+    LogFunction(level, functionName, format, std::forward<Args>(args)...);
+  }
+
+  template<typename Char, typename... Args>
+  static inline void LogFunction(spdlog::level::level_enum level,
+                                 const char* functionName,
+                                 const Char* format,
+                                 Args&&... args)
   {
-    if (IsLogLevelLogged(loglevel))
-    {
-      functionName.append(": ");
-      LogString(loglevel, functionName + StringUtils::Format(format, std::forward<Args>(args)...));
-    }
+    if (functionName == nullptr || strlen(functionName) == 0)
+      GetInstance().FormatAndLogInternal(level, format, std::forward<Args>(args)...);
+    else
+      GetInstance().FormatAndLogFunctionInternal(level, functionName, format,
+                                                 std::forward<Args>(args)...);
   }
 
-  static void LogFunction(int loglevel, std::string functionName, int component, const char* format)
+  template<typename Char, typename... Args>
+  static inline void LogFunction(spdlog::level::level_enum level,
+                                 const char* functionName,
+                                 int component,
+                                 const Char* format,
+                                 Args&&... args)
   {
-    if (IsLogLevelLogged(loglevel))
-      LogString(loglevel, component, functionName + ": " + format);
+    if (!CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(component))
+      return;
+
+    LogFunction(level, functionName, format, std::forward<Args>(args)...);
   }
 
+#define LogF(level, format, ...) LogFunction((level), __FUNCTION__, (format), ##__VA_ARGS__)
+#define LogFC(level, component, format, ...) \
+  LogFunction((level), __FUNCTION__, (component), (format), ##__VA_ARGS__)
+
+private:
+  static CLog& GetInstance();
+
+  static spdlog::level::level_enum MapLogLevel(int level);
+
   template<typename... Args>
-  static void LogFunction(
-      int loglevel, std::string functionName, int component, const char* format, Args&&... args)
+  static inline void FormatAndLogFunctionInternal(spdlog::level::level_enum level,
+                                                  const char* functionName,
+                                                  const char* format,
+                                                  Args&&... args)
+  {
+    GetInstance().FormatAndLogInternal(
+        level, StringUtils::Format("{0:s}: {1:s}", functionName, format).c_str(),
+        std::forward<Args>(args)...);
+  }
+
+  template<typename... Args>
+  static inline void FormatAndLogFunctionInternal(spdlog::level::level_enum level,
+                                                  const char* functionName,
+                                                  const wchar_t* format,
+                                                  Args&&... args)
+  {
+    GetInstance().FormatAndLogInternal(
+        level, StringUtils::Format(L"{0:s}: {1:s}", functionName, format).c_str(),
+        std::forward<Args>(args)...);
+  }
+
+  template<typename Char, typename... Args>
+  inline void FormatAndLogInternal(spdlog::level::level_enum level,
+                                   const Char* format,
+                                   Args&&... args)
+  {
+    // TODO: for now we manually format the messages to support both python- and printf-style formatting.
+    //       this can be removed once all log messages have been adjusted to python-style formatting
+    auto logString = StringUtils::Format(format, std::forward<Args>(args)...);
+
+    // fixup newline alignment, number of spaces should equal prefix length
+    StringUtils::Replace(logString, "\n", "\n                                                   ");
+
+    m_defaultLogger->log(level, std::move(logString));
+  }
+
+  Logger CreateLogger(const std::string& loggerName);
+
+  std::unique_ptr<IPlatformLog> m_platform;
+  std::shared_ptr<spdlog::sinks::dist_sink<std::mutex>> m_sinks;
+  Logger m_defaultLogger;
+
+  std::shared_ptr<spdlog::sinks::basic_file_sink<std::mutex>> m_fileSink;
+
+  int m_logLevel;
+};
+
+namespace XbmcUtils
+{
+class LogImplementation : public XbmcCommons::ILogger
+{
+public:
+  ~LogImplementation() override = default;
+  inline void log(int logLevel, IN_STRING const char* message) override
   {
-    // We defer component checking to LogString to avoid having to drag in advancedsettings
-    // everywhere we want to log anything
-    if (IsLogLevelLogged(loglevel))
-    {
-      functionName.append(": ");
-      LogString(loglevel, component,
-                functionName + StringUtils::Format(format, std::forward<Args>(args)...));
-    }
+    CLog::Log(logLevel, "{0:s}", message);
   }
-#define LogF(loglevel, ...) LogFunction((loglevel), __FUNCTION__, ##__VA_ARGS__)
-#define LogFC(loglevel, component, ...) LogFunction((loglevel), __FUNCTION__, (component), ##__VA_ARGS__)
-  static void MemDump(char *pData, int length);
-  static bool Init(const std::string& path);
-  static void PrintDebugString(const std::string& line); // universal interface for printing debug strings
-  static void SetLogLevel(int level);
-  static int  GetLogLevel();
-  static void SetExtraLogLevels(int level);
-  static bool IsLogLevelLogged(int loglevel);
-
-protected:
-  static void LogString(int logLevel, std::string&& logString);
-  static void LogString(int logLevel, int component, std::string&& logString);
-  static bool WriteLogString(int logLevel, const std::string& logString);
 };
+} // namespace XbmcUtils
diff --git a/xbmc/utils/logtypes.h b/xbmc/utils/logtypes.h
new file mode 100644
index 000000000000..f41aa7eb0751
--- /dev/null
+++ b/xbmc/utils/logtypes.h
@@ -0,0 +1,18 @@
+/*
+ *  Copyright (C) 2020 Team Kodi
+ *  This file is part of Kodi - https://kodi.tv
+ *
+ *  SPDX-License-Identifier: GPL-2.0-or-later
+ *  See LICENSES/README.md for more information.
+ */
+
+#pragma once
+
+#include <memory>
+
+namespace spdlog
+{
+class logger;
+}
+
+using Logger = std::shared_ptr<spdlog::logger>;
diff --git a/xbmc/utils/test/TestRegExp.cpp b/xbmc/utils/test/TestRegExp.cpp
index 1019c5bfcbba..dd047923650b 100644
--- a/xbmc/utils/test/TestRegExp.cpp
+++ b/xbmc/utils/test/TestRegExp.cpp
@@ -10,6 +10,7 @@
  * Investigate why.
  */
 #include "CompileInfo.h"
+#include "ServiceBroker.h"
 #include "filesystem/File.h"
 #include "filesystem/SpecialProtocol.h"
 #include "utils/RegExp.h"
@@ -128,7 +129,7 @@ class TestRegExpLog : public testing::Test
   TestRegExpLog() = default;
   ~TestRegExpLog() override
   {
-    CLog::Close();
+    CServiceBroker::GetLogging().Uninitialize();
   }
 };
 
@@ -143,13 +144,13 @@ TEST_F(TestRegExpLog, DumpOvector)
   std::string appName = CCompileInfo::GetAppName();
   StringUtils::ToLower(appName);
   logfile = CSpecialProtocol::TranslatePath("special://temp/") + appName + ".log";
-  EXPECT_TRUE(CLog::Init(CSpecialProtocol::TranslatePath("special://temp/").c_str()));
+  CServiceBroker::GetLogging().Initialize(CSpecialProtocol::TranslatePath("special://temp/").c_str());
   EXPECT_TRUE(XFILE::CFile::Exists(logfile));
 
   EXPECT_TRUE(regex.RegComp("^(?<first>Test)\\s*(?<second>.*)\\."));
   EXPECT_EQ(0, regex.RegFind("Test string."));
   regex.DumpOvector(LOGDEBUG);
-  CLog::Close();
+  CServiceBroker::GetLogging().Uninitialize();
 
   EXPECT_TRUE(file.Open(logfile));
   while ((bytesread = file.Read(buf, sizeof(buf) - 1)) > 0)
@@ -162,7 +163,7 @@ TEST_F(TestRegExpLog, DumpOvector)
 
   EXPECT_STREQ("\xEF\xBB\xBF", logstring.substr(0, 3).c_str());
 
-  EXPECT_TRUE(regex.RegComp(".*DEBUG: regexp ovector=\\{\\[0,12\\],\\[0,4\\],"
+  EXPECT_TRUE(regex.RegComp(".*DEBUG <general>: regexp ovector=\\{\\[0,12\\],\\[0,4\\],"
                             "\\[5,11\\]\\}.*"));
   EXPECT_GE(regex.RegFind(logstring), 0);
 
diff --git a/xbmc/utils/test/Testlog.cpp b/xbmc/utils/test/Testlog.cpp
index 71bf9d6a5fee..15f37a8f9ea8 100644
--- a/xbmc/utils/test/Testlog.cpp
+++ b/xbmc/utils/test/Testlog.cpp
@@ -7,6 +7,7 @@
  */
 
 #include "CompileInfo.h"
+#include "ServiceBroker.h"
 #include "filesystem/File.h"
 #include "filesystem/SpecialProtocol.h"
 #include "test/TestUtils.h"
@@ -24,7 +25,7 @@ class Testlog : public testing::Test
   Testlog() = default;
   ~Testlog() override
   {
-    CLog::Close();
+    CServiceBroker::GetLogging().Uninitialize();
   }
 };
 
@@ -39,7 +40,7 @@ TEST_F(Testlog, Log)
   std::string appName = CCompileInfo::GetAppName();
   StringUtils::ToLower(appName);
   logfile = CSpecialProtocol::TranslatePath("special://temp/") + appName + ".log";
-  EXPECT_TRUE(CLog::Init(CSpecialProtocol::TranslatePath("special://temp/").c_str()));
+  CServiceBroker::GetLogging().Initialize(CSpecialProtocol::TranslatePath("special://temp/").c_str());
   EXPECT_TRUE(XFILE::CFile::Exists(logfile));
 
   CLog::Log(LOGDEBUG, "debug log message");
@@ -50,7 +51,7 @@ TEST_F(Testlog, Log)
   CLog::Log(LOGSEVERE, "severe log message");
   CLog::Log(LOGFATAL, "fatal log message");
   CLog::Log(LOGNONE, "none type log message");
-  CLog::Close();
+  CServiceBroker::GetLogging().Uninitialize();
 
   EXPECT_TRUE(file.Open(logfile));
   while ((bytesread = file.Read(buf, sizeof(buf) - 1)) > 0)
@@ -63,60 +64,21 @@ TEST_F(Testlog, Log)
 
   EXPECT_STREQ("\xEF\xBB\xBF", logstring.substr(0, 3).c_str());
 
-  EXPECT_TRUE(regex.RegComp(".*DEBUG: debug log message.*"));
+  EXPECT_TRUE(regex.RegComp(".*DEBUG <general>: debug log message.*"));
   EXPECT_GE(regex.RegFind(logstring), 0);
-  EXPECT_TRUE(regex.RegComp(".*INFO: info log message.*"));
+  EXPECT_TRUE(regex.RegComp(".*INFO <general>: info log message.*"));
   EXPECT_GE(regex.RegFind(logstring), 0);
-  EXPECT_TRUE(regex.RegComp(".*NOTICE: notice log message.*"));
+  EXPECT_TRUE(regex.RegComp(".*INFO <general>: notice log message.*"));
   EXPECT_GE(regex.RegFind(logstring), 0);
-  EXPECT_TRUE(regex.RegComp(".*WARNING: warning log message.*"));
+  EXPECT_TRUE(regex.RegComp(".*WARNING <general>: warning log message.*"));
   EXPECT_GE(regex.RegFind(logstring), 0);
-  EXPECT_TRUE(regex.RegComp(".*ERROR: error log message.*"));
+  EXPECT_TRUE(regex.RegComp(".*ERROR <general>: error log message.*"));
   EXPECT_GE(regex.RegFind(logstring), 0);
-  EXPECT_TRUE(regex.RegComp(".*SEVERE: severe log message.*"));
+  EXPECT_TRUE(regex.RegComp(".*FATAL <general>: severe log message.*"));
   EXPECT_GE(regex.RegFind(logstring), 0);
-  EXPECT_TRUE(regex.RegComp(".*FATAL: fatal log message.*"));
+  EXPECT_TRUE(regex.RegComp(".*FATAL <general>: fatal log message.*"));
   EXPECT_GE(regex.RegFind(logstring), 0);
-  EXPECT_TRUE(regex.RegComp(".*NONE: none type log message.*"));
-  EXPECT_GE(regex.RegFind(logstring), 0);
-
-  EXPECT_TRUE(XFILE::CFile::Delete(logfile));
-}
-
-TEST_F(Testlog, MemDump)
-{
-  std::string logfile, logstring;
-  char buf[100];
-  unsigned int bytesread;
-  XFILE::CFile file;
-  CRegExp regex;
-  char refdata[] = "0123456789abcdefghijklmnopqrstuvwxyz";
-
-  std::string appName = CCompileInfo::GetAppName();
-  StringUtils::ToLower(appName);
-  logfile = CSpecialProtocol::TranslatePath("special://temp/") + appName + ".log";
-  EXPECT_TRUE(CLog::Init(CSpecialProtocol::TranslatePath("special://temp/").c_str()));
-  EXPECT_TRUE(XFILE::CFile::Exists(logfile));
-
-  CLog::MemDump(refdata, sizeof(refdata));
-  CLog::Close();
-
-  EXPECT_TRUE(file.Open(logfile));
-  while ((bytesread = file.Read(buf, sizeof(buf) - 1)) > 0)
-  {
-    buf[bytesread] = '\0';
-    logstring.append(buf);
-  }
-  file.Close();
-  EXPECT_FALSE(logstring.empty());
-
-  EXPECT_STREQ("\xEF\xBB\xBF", logstring.substr(0, 3).c_str());
-
-  EXPECT_TRUE(regex.RegComp(".*DEBUG: MEM_DUMP: Dumping from.*"));
-  EXPECT_GE(regex.RegFind(logstring), 0);
-  EXPECT_TRUE(regex.RegComp(".*DEBUG: MEM_DUMP: 0000  30 31 32 33.*"));
-  EXPECT_GE(regex.RegFind(logstring), 0);
-  EXPECT_TRUE(regex.RegComp(".*73 74 75 76  ghijklmnopqrstuv.*"));
+  EXPECT_TRUE(regex.RegComp(".*OFF <general>: none type log message.*"));
   EXPECT_GE(regex.RegFind(logstring), 0);
 
   EXPECT_TRUE(XFILE::CFile::Delete(logfile));
@@ -129,13 +91,13 @@ TEST_F(Testlog, SetLogLevel)
   std::string appName = CCompileInfo::GetAppName();
   StringUtils::ToLower(appName);
   logfile = CSpecialProtocol::TranslatePath("special://temp/") + appName + ".log";
-  EXPECT_TRUE(CLog::Init(CSpecialProtocol::TranslatePath("special://temp/").c_str()));
+  CServiceBroker::GetLogging().Initialize(CSpecialProtocol::TranslatePath("special://temp/").c_str());
   EXPECT_TRUE(XFILE::CFile::Exists(logfile));
 
-  EXPECT_EQ(LOG_LEVEL_DEBUG, CLog::GetLogLevel());
-  CLog::SetLogLevel(LOG_LEVEL_MAX);
-  EXPECT_EQ(LOG_LEVEL_MAX, CLog::GetLogLevel());
+  EXPECT_EQ(LOG_LEVEL_DEBUG, CServiceBroker::GetLogging().GetLogLevel());
+  CServiceBroker::GetLogging().SetLogLevel(LOG_LEVEL_MAX);
+  EXPECT_EQ(LOG_LEVEL_MAX, CServiceBroker::GetLogging().GetLogLevel());
 
-  CLog::Close();
+  CServiceBroker::GetLogging().Uninitialize();
   EXPECT_TRUE(XFILE::CFile::Delete(logfile));
 }

From 77f0f1b43ced53056248c6a2864fc704ba7a5f69 Mon Sep 17 00:00:00 2001
From: montellese <montellese@kodi.tv>
Date: Mon, 13 Apr 2020 14:45:06 +0200
Subject: [PATCH 05/21] ~ follow coding style for d7489e5714

---
 xbmc/Application.cpp                              |  2 +-
 xbmc/peripherals/devices/PeripheralCecAdapter.cpp |  3 ++-
 xbmc/platform/darwin/tvos/XBMCController.mm       |  3 ++-
 xbmc/utils/test/TestRegExp.cpp                    |  8 +++-----
 xbmc/utils/test/Testlog.cpp                       | 11 +++++------
 5 files changed, 13 insertions(+), 14 deletions(-)

diff --git a/xbmc/Application.cpp b/xbmc/Application.cpp
index 5539c8e85971..5dfbb2fcbae0 100644
--- a/xbmc/Application.cpp
+++ b/xbmc/Application.cpp
@@ -422,7 +422,7 @@ bool CApplication::Create(const CAppParamParser &params)
     CopyUserDataIfNeeded("special://masterprofile/", "iOS/sources.xml", "sources.xml");
   #endif
 
-  CServiceBroker::GetLogging().Initialize(CSpecialProtocol::TranslatePath("special://logpath"));
+    CServiceBroker::GetLogging().Initialize(CSpecialProtocol::TranslatePath("special://logpath"));
 
 #ifdef TARGET_POSIX //! @todo Win32 has no special://home/ mapping by default, so we
   //!       must create these here. Ideally this should be using special://home/ and
diff --git a/xbmc/peripherals/devices/PeripheralCecAdapter.cpp b/xbmc/peripherals/devices/PeripheralCecAdapter.cpp
index 1505aaf73f73..9b6069fe75ab 100644
--- a/xbmc/peripherals/devices/PeripheralCecAdapter.cpp
+++ b/xbmc/peripherals/devices/PeripheralCecAdapter.cpp
@@ -1206,7 +1206,8 @@ void CPeripheralCecAdapter::CecLogMessage(void *cbParam, const cec_log_message*
     break;
   }
 
-  if (iLevel >= CEC_LOG_NOTICE || (iLevel >= 0 && CServiceBroker::GetLogging().IsLogLevelLogged(LOGDEBUG)))
+  if (iLevel >= CEC_LOG_NOTICE ||
+      (iLevel >= 0 && CServiceBroker::GetLogging().IsLogLevelLogged(LOGDEBUG)))
     CLog::Log(iLevel, LOGCEC, "%s - %s", __FUNCTION__, message->message);
 }
 
diff --git a/xbmc/platform/darwin/tvos/XBMCController.mm b/xbmc/platform/darwin/tvos/XBMCController.mm
index 588db3ee9c58..998f9f5ff7a5 100644
--- a/xbmc/platform/darwin/tvos/XBMCController.mm
+++ b/xbmc/platform/darwin/tvos/XBMCController.mm
@@ -421,7 +421,8 @@ int KODI_Run(bool renderGUI)
   CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->m_logLevel = LOG_LEVEL_NORMAL;
   CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->m_logLevelHint = LOG_LEVEL_NORMAL;
 #endif
-  CServiceBroker::GetLogging().SetLogLevel(CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->m_logLevel);
+  CServiceBroker::GetLogging().SetLogLevel(
+      CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->m_logLevel);
 
   // not a failure if returns false, just means someone
   // did the init before us.
diff --git a/xbmc/utils/test/TestRegExp.cpp b/xbmc/utils/test/TestRegExp.cpp
index dd047923650b..3a3df8fb68b3 100644
--- a/xbmc/utils/test/TestRegExp.cpp
+++ b/xbmc/utils/test/TestRegExp.cpp
@@ -127,10 +127,7 @@ class TestRegExpLog : public testing::Test
 {
 protected:
   TestRegExpLog() = default;
-  ~TestRegExpLog() override
-  {
-    CServiceBroker::GetLogging().Uninitialize();
-  }
+  ~TestRegExpLog() override { CServiceBroker::GetLogging().Uninitialize(); }
 };
 
 TEST_F(TestRegExpLog, DumpOvector)
@@ -144,7 +141,8 @@ TEST_F(TestRegExpLog, DumpOvector)
   std::string appName = CCompileInfo::GetAppName();
   StringUtils::ToLower(appName);
   logfile = CSpecialProtocol::TranslatePath("special://temp/") + appName + ".log";
-  CServiceBroker::GetLogging().Initialize(CSpecialProtocol::TranslatePath("special://temp/").c_str());
+  CServiceBroker::GetLogging().Initialize(
+      CSpecialProtocol::TranslatePath("special://temp/").c_str());
   EXPECT_TRUE(XFILE::CFile::Exists(logfile));
 
   EXPECT_TRUE(regex.RegComp("^(?<first>Test)\\s*(?<second>.*)\\."));
diff --git a/xbmc/utils/test/Testlog.cpp b/xbmc/utils/test/Testlog.cpp
index 15f37a8f9ea8..7405c02f591c 100644
--- a/xbmc/utils/test/Testlog.cpp
+++ b/xbmc/utils/test/Testlog.cpp
@@ -23,10 +23,7 @@ class Testlog : public testing::Test
 {
 protected:
   Testlog() = default;
-  ~Testlog() override
-  {
-    CServiceBroker::GetLogging().Uninitialize();
-  }
+  ~Testlog() override { CServiceBroker::GetLogging().Uninitialize(); }
 };
 
 TEST_F(Testlog, Log)
@@ -40,7 +37,8 @@ TEST_F(Testlog, Log)
   std::string appName = CCompileInfo::GetAppName();
   StringUtils::ToLower(appName);
   logfile = CSpecialProtocol::TranslatePath("special://temp/") + appName + ".log";
-  CServiceBroker::GetLogging().Initialize(CSpecialProtocol::TranslatePath("special://temp/").c_str());
+  CServiceBroker::GetLogging().Initialize(
+      CSpecialProtocol::TranslatePath("special://temp/").c_str());
   EXPECT_TRUE(XFILE::CFile::Exists(logfile));
 
   CLog::Log(LOGDEBUG, "debug log message");
@@ -91,7 +89,8 @@ TEST_F(Testlog, SetLogLevel)
   std::string appName = CCompileInfo::GetAppName();
   StringUtils::ToLower(appName);
   logfile = CSpecialProtocol::TranslatePath("special://temp/") + appName + ".log";
-  CServiceBroker::GetLogging().Initialize(CSpecialProtocol::TranslatePath("special://temp/").c_str());
+  CServiceBroker::GetLogging().Initialize(
+      CSpecialProtocol::TranslatePath("special://temp/").c_str());
   EXPECT_TRUE(XFILE::CFile::Exists(logfile));
 
   EXPECT_EQ(LOG_LEVEL_DEBUG, CServiceBroker::GetLogging().GetLogLevel());

From 2091ab2baedebcf485b8ec0cf0a398f927b25291 Mon Sep 17 00:00:00 2001
From: montellese <montellese@kodi.tv>
Date: Sun, 22 Mar 2020 21:26:05 +0100
Subject: [PATCH 06/21] move component logging from CAdvancedSettings to CLog

---
 xbmc/AppParamParser.cpp                       |   1 +
 xbmc/cores/AudioEngine/Sinks/AESinkALSA.cpp   |   6 +-
 .../AudioEngine/Sinks/AESinkAUDIOTRACK.cpp    |   5 +-
 xbmc/cores/AudioEngine/Sinks/AESinkXAudio.cpp |   4 +-
 xbmc/cores/FFmpeg.cpp                         |   2 +-
 .../Audio/DVDAudioCodecAndroidMediaCodec.cpp  |   4 +-
 .../Video/DVDVideoCodecAndroidMediaCodec.cpp  |   5 +-
 .../DVDCodecs/Video/DVDVideoCodecFFmpeg.cpp   |   2 +-
 .../VideoPlayer/DVDCodecs/Video/MMALCodec.cpp |   3 +-
 .../HwDecRender/MMALRenderer.cpp              |  33 +++---
 xbmc/filesystem/CurlFile.cpp                  |   6 +-
 xbmc/network/AirTunesServer.cpp               |   5 +-
 xbmc/platform/posix/filesystem/SMBFile.cpp    |   4 +-
 xbmc/settings/AdvancedSettings.cpp            |  64 -----------
 xbmc/settings/AdvancedSettings.h              |   6 -
 xbmc/utils/log.cpp                            | 108 +++++++++++++++++-
 xbmc/utils/log.h                              |  41 +++++--
 17 files changed, 168 insertions(+), 131 deletions(-)

diff --git a/xbmc/AppParamParser.cpp b/xbmc/AppParamParser.cpp
index 60ff9d821aef..f8fd7b8e96d9 100644
--- a/xbmc/AppParamParser.cpp
+++ b/xbmc/AppParamParser.cpp
@@ -10,6 +10,7 @@
 
 #include "CompileInfo.h"
 #include "FileItem.h"
+#include "ServiceBroker.h"
 #include "settings/AdvancedSettings.h"
 #include "utils/StringUtils.h"
 #include "utils/SystemInfo.h"
diff --git a/xbmc/cores/AudioEngine/Sinks/AESinkALSA.cpp b/xbmc/cores/AudioEngine/Sinks/AESinkALSA.cpp
index 9c383ff57224..ecf6840f2ce1 100644
--- a/xbmc/cores/AudioEngine/Sinks/AESinkALSA.cpp
+++ b/xbmc/cores/AudioEngine/Sinks/AESinkALSA.cpp
@@ -12,8 +12,6 @@
 #include "cores/AudioEngine/AESinkFactory.h"
 #include "cores/AudioEngine/Utils/AEELDParser.h"
 #include "cores/AudioEngine/Utils/AEUtil.h"
-#include "settings/AdvancedSettings.h"
-#include "settings/SettingsComponent.h"
 #include "threads/SingleLock.h"
 #include "utils/MathUtils.h"
 #include "utils/SystemInfo.h"
@@ -445,7 +443,7 @@ snd_pcm_chmap_t* CAESinkALSA::SelectALSAChannelMap(const CAEChannelInfo& info)
       chmap = CopyALSAchmap(&supportedMaps[best]->map);
   }
 
-  if (chmap && CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(LOGAUDIO))
+  if (chmap && CServiceBroker::GetLogging().CanLogComponent(LOGAUDIO))
     CLog::Log(LOGDEBUG, "CAESinkALSA::SelectALSAChannelMap - Selected ALSA map \"%s\"", ALSAchmapToString(chmap).c_str());
 
   snd_pcm_free_chmaps(supportedMaps);
@@ -1621,7 +1619,7 @@ bool CAESinkALSA::GetELD(snd_hctl_t *hctl, int device, CAEDeviceInfo& info, bool
 
 void CAESinkALSA::sndLibErrorHandler(const char *file, int line, const char *function, int err, const char *fmt, ...)
 {
-  if(!CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(LOGAUDIO))
+  if(!CServiceBroker::GetLogging().CanLogComponent(LOGAUDIO))
     return;
 
   va_list arg;
diff --git a/xbmc/cores/AudioEngine/Sinks/AESinkAUDIOTRACK.cpp b/xbmc/cores/AudioEngine/Sinks/AESinkAUDIOTRACK.cpp
index b477220344c1..d56e42f83448 100644
--- a/xbmc/cores/AudioEngine/Sinks/AESinkAUDIOTRACK.cpp
+++ b/xbmc/cores/AudioEngine/Sinks/AESinkAUDIOTRACK.cpp
@@ -11,9 +11,7 @@
 #include "ServiceBroker.h"
 #include "cores/AudioEngine/AESinkFactory.h"
 #include "cores/AudioEngine/Utils/AEUtil.h"
-#include "settings/AdvancedSettings.h"
 #include "settings/Settings.h"
-#include "settings/SettingsComponent.h"
 #include "utils/StringUtils.h"
 #include "utils/TimeUtils.h"
 #include "utils/log.h"
@@ -576,8 +574,7 @@ void CAESinkAUDIOTRACK::GetDelay(AEDelayStatus& status)
     return;
   }
 
-  bool usesAdvancedLogging =
-      CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(LOGAUDIO);
+  bool usesAdvancedLogging = CServiceBroker::GetLogging().CanLogComponent(LOGAUDIO);
   // In their infinite wisdom, Google decided to make getPlaybackHeadPosition
   // return a 32bit "int" that you should "interpret as unsigned."  As such,
   // for wrap safety, we need to do all ops on it in 32bit integer math.
diff --git a/xbmc/cores/AudioEngine/Sinks/AESinkXAudio.cpp b/xbmc/cores/AudioEngine/Sinks/AESinkXAudio.cpp
index fb4115b559be..373574c295dd 100644
--- a/xbmc/cores/AudioEngine/Sinks/AESinkXAudio.cpp
+++ b/xbmc/cores/AudioEngine/Sinks/AESinkXAudio.cpp
@@ -13,8 +13,6 @@
 #include "cores/AudioEngine/Sinks/windows/AESinkFactoryWin.h"
 #include "cores/AudioEngine/Utils/AEDeviceInfo.h"
 #include "cores/AudioEngine/Utils/AEUtil.h"
-#include "settings/AdvancedSettings.h"
-#include "settings/SettingsComponent.h"
 #include "utils/StringUtils.h"
 #include "utils/TimeUtils.h"
 #include "utils/XTimeUtils.h"
@@ -661,7 +659,7 @@ bool CAESinkXAudio::InitializeInternal(std::string deviceId, AEAudioFormat &form
   if (format.m_dataFormat == AE_FMT_RAW) //No sense in trying other formats for passthrough.
     return false;
 
-  if (CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(LOGAUDIO))
+  if (CServiceBroker::GetLogging().CanLogComponent(LOGAUDIO))
     CLog::Log(LOGDEBUG, __FUNCTION__": CreateSourceVoice failed (%s) - trying to find a compatible format", WASAPIErrToStr(hr));
 
   int closestMatch;
diff --git a/xbmc/cores/FFmpeg.cpp b/xbmc/cores/FFmpeg.cpp
index d0b228b25c4b..968cb3b49514 100644
--- a/xbmc/cores/FFmpeg.cpp
+++ b/xbmc/cores/FFmpeg.cpp
@@ -74,7 +74,7 @@ void ff_avutil_log(void* ptr, int level, const char* format, va_list va)
     maxLevel = AV_LOG_INFO;
 
   if (level > maxLevel &&
-     !CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(LOGFFMPEG))
+     !CServiceBroker::GetLogging().CanLogComponent(LOGFFMPEG))
     return;
   else if (CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->m_logLevel <= LOG_LEVEL_NORMAL)
     return;
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Audio/DVDAudioCodecAndroidMediaCodec.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Audio/DVDAudioCodecAndroidMediaCodec.cpp
index bebad2c47dfd..1c2e1459eec0 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Audio/DVDAudioCodecAndroidMediaCodec.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Audio/DVDAudioCodecAndroidMediaCodec.cpp
@@ -23,8 +23,6 @@
 #include "cores/AudioEngine/Interfaces/AE.h"
 #include "cores/AudioEngine/Utils/AEUtil.h"
 #include "cores/VideoPlayer/Interface/Addon/DemuxCrypto.h"
-#include "settings/AdvancedSettings.h"
-#include "settings/SettingsComponent.h"
 #include "utils/StringUtils.h"
 #include "utils/log.h"
 
@@ -592,7 +590,7 @@ void CDVDAudioCodecAndroidMediaCodec::GetData(DVDAudioFrame &frame)
     frame.duration = ((double)frame.nb_frames * DVD_TIME_BASE) / frame.format.m_sampleRate;
   else
     frame.duration = 0.0;
-  if (frame.nb_frames > 0 && CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(LOGAUDIO))
+  if (frame.nb_frames > 0 && CServiceBroker::GetLogging().CanLogComponent(LOGAUDIO))
     CLog::Log(LOGDEBUG, "MediaCodecAudio::GetData: frames:%d pts: %0.4f", frame.nb_frames, frame.pts);
 }
 
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAndroidMediaCodec.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAndroidMediaCodec.cpp
index 5a0005da5666..067d24479093 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAndroidMediaCodec.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAndroidMediaCodec.cpp
@@ -24,7 +24,6 @@
 #include "cores/VideoPlayer/VideoRenderers/RenderManager.h"
 #include "media/decoderfilter/DecoderFilterManager.h"
 #include "messaging/ApplicationMessenger.h"
-#include "settings/AdvancedSettings.h"
 #include "settings/Settings.h"
 #include "settings/SettingsComponent.h"
 #include "utils/BitstreamConverter.h"
@@ -161,7 +160,7 @@ void CMediaCodecVideoBuffer::ReleaseOutputBuffer(bool render, int64_t displayTim
     if (m_frameready)
       m_frameready->Reset();
 
-  if (CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(LOGVIDEO))
+  if (CServiceBroker::GetLogging().CanLogComponent(LOGVIDEO))
   {
     int64_t diff = displayTime ? displayTime - CurrentHostCounter() : 0;
     CLog::Log(LOGDEBUG, "CMediaCodecVideoBuffer::ReleaseOutputBuffer index(%d), render(%d), time:%lld, offset:%lld", m_bufferId, render, displayTime, diff);
@@ -808,7 +807,7 @@ bool CDVDVideoCodecAndroidMediaCodec::AddData(const DemuxPacket &packet)
 
   double pts(packet.pts), dts(packet.dts);
 
-  if (CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(LOGVIDEO))
+  if (CServiceBroker::GetLogging().CanLogComponent(LOGVIDEO))
     CLog::Log(LOGDEBUG, "CDVDVideoCodecAndroidMediaCodec::AddData dts:%0.2lf pts:%0.2lf sz:%d indexBuffer:%d current state (%d)", dts, pts, packet.iSize, m_indexInputBuffer, m_state);
   else if (m_state != MEDIACODEC_STATE_RUNNING)
     CLog::Log(LOGDEBUG, "CDVDVideoCodecAndroidMediaCodec::AddData current state (%d)", m_state);
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecFFmpeg.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecFFmpeg.cpp
index 1351795f2587..c023c50d5019 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecFFmpeg.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecFFmpeg.cpp
@@ -1161,7 +1161,7 @@ int CDVDVideoCodecFFmpeg::FilterOpen(const std::string& filters, bool scale)
     return result;
   }
 
-  if (CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(LOGVIDEO))
+  if (CServiceBroker::GetLogging().CanLogComponent(LOGVIDEO))
   {
     char* graphDump = avfilter_graph_dump(m_pFilterGraph, nullptr);
     if (graphDump)
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/MMALCodec.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/MMALCodec.cpp
index 220625426ff5..4fdd733026ef 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/MMALCodec.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/MMALCodec.cpp
@@ -30,7 +30,6 @@
 #include "Application.h"
 #include "guilib/GUIWindowManager.h"
 #include "cores/VideoPlayer/VideoRenderers/RenderFlags.h"
-#include "settings/AdvancedSettings.h"
 #include "settings/DisplaySettings.h"
 #include "settings/SettingsComponent.h"
 #include "cores/VideoPlayer/VideoRenderers/RenderManager.h"
@@ -588,7 +587,7 @@ bool CMMALVideo::AddData(const DemuxPacket &packet)
   uint8_t* pData = packet.pData;
   int iSize = packet.iSize;
   CSingleLock lock(m_sharedSection);
-  //if (CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(LOGVIDEO))
+  //if (CServiceBroker::GetLogging().CanLogComponent(LOGVIDEO))
   //  CLog::Log(LOGDEBUG, "%s::%s - %-8p %-6d dts:%.3f pts:%.3f ready_queue(%d)",
   //    CLASSNAME, __func__, pData, iSize, dts == DVD_NOPTS_VALUE ? 0.0 : packet.dts*1e-6, packet.pts == DVD_NOPTS_VALUE ? 0.0 : packet.pts*1e-6, m_output_ready.size());
 
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/MMALRenderer.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/MMALRenderer.cpp
index b9413d65563d..86824db8ecef 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/MMALRenderer.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/MMALRenderer.cpp
@@ -15,7 +15,6 @@
 #include "ServiceBroker.h"
 #include "cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodec.h"
 #include "filesystem/File.h"
-#include "settings/AdvancedSettings.h"
 #include "settings/DisplaySettings.h"
 #include "settings/MediaSettings.h"
 #include "settings/Settings.h"
@@ -42,13 +41,13 @@ using namespace MMAL;
 
 CMMALBuffer::CMMALBuffer(int id) : CVideoBuffer(id)
 {
-  if (VERBOSE && CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(LOGVIDEO))
+  if (VERBOSE && CServiceBroker::GetLogging().CanLogComponent(LOGVIDEO))
     CLog::Log(LOGDEBUG, "%s::%s %p", CLASSNAME, __func__, static_cast<void*>(this));
 }
 
 CMMALBuffer::~CMMALBuffer()
 {
-  if (VERBOSE && CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(LOGVIDEO))
+  if (VERBOSE && CServiceBroker::GetLogging().CanLogComponent(LOGVIDEO))
     CLog::Log(LOGDEBUG, "%s::%s %p", CLASSNAME, __func__, static_cast<void*>(this));
 }
 
@@ -365,7 +364,7 @@ CMMALBuffer *CMMALPool::GetBuffer(uint32_t timeout)
                 __FUNCTION__, static_cast<void*>(m_mmal_pool), static_cast<void*>(omvb),
                 static_cast<void*>(buffer), timeout);
     }
-  else if (VERBOSE && CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(LOGVIDEO))
+  else if (VERBOSE && CServiceBroker::GetLogging().CanLogComponent(LOGVIDEO))
   {
     CLog::Log(LOGDEBUG,
               "%s::%s pool:%p omvb:%p mmal:%p gmem:%p new:%d id:%d to:%d %dx%d (%dx%d) size:%d "
@@ -390,7 +389,7 @@ void CMMALPool::Prime()
     return;
   while (omvb = GetBuffer(0), omvb)
   {
-    if (VERBOSE && CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(LOGVIDEO))
+    if (VERBOSE && CServiceBroker::GetLogging().CanLogComponent(LOGVIDEO))
     {
       CLog::Log(
           LOGDEBUG, "%s::%s Send omvb:%p mmal:%p from pool %p to %s len:%d cmd:%x flags:%x pool:%p",
@@ -442,7 +441,7 @@ CRenderInfo CMMALRenderer::GetRenderInfo()
 
 void CMMALRenderer::vout_input_port_cb(MMAL_PORT_T *port, MMAL_BUFFER_HEADER_T *buffer)
 {
-  if (VERBOSE && CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(LOGVIDEO))
+  if (VERBOSE && CServiceBroker::GetLogging().CanLogComponent(LOGVIDEO))
   {
     CLog::Log(LOGDEBUG, "%s::%s omvb:%p mmal:%p dts:%.3f pts:%.3f len:%d cmd:%x flags:%x",
               CLASSNAME, __func__, static_cast<void*>(buffer->user_data),
@@ -709,7 +708,7 @@ void CMMALRenderer::Run()
     bool kept = false;
 
     CMMALBuffer *omvb = (CMMALBuffer *)buffer->user_data;
-    if (VERBOSE && CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(LOGVIDEO))
+    if (VERBOSE && CServiceBroker::GetLogging().CanLogComponent(LOGVIDEO))
     {
       CLog::Log(LOGDEBUG,
                 "%s::%s %s omvb:%p mmal:%p dts:%.3f pts:%.3f len:%d cmd:%x flags:%x enc:%.4s",
@@ -832,7 +831,7 @@ void CMMALRenderer::Run()
         if (m_queue_render)
         {
           mmal_queue_put(m_queue_render, buffer);
-          if (VERBOSE && CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(LOGVIDEO))
+          if (VERBOSE && CServiceBroker::GetLogging().CanLogComponent(LOGVIDEO))
             CLog::Log(LOGDEBUG, "%s::%s send %p to m_queue_render", CLASSNAME, __func__, static_cast<void*>(omvb));
           kept = true;
         }
@@ -841,7 +840,7 @@ void CMMALRenderer::Run()
           CheckConfigurationVout(omvb->Width(), omvb->Height(), omvb->AlignedWidth(), omvb->AlignedHeight(), omvb->Encoding());
           if (m_vout_input)
           {
-            if (VERBOSE && CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(LOGVIDEO))
+            if (VERBOSE && CServiceBroker::GetLogging().CanLogComponent(LOGVIDEO))
               CLog::Log(LOGDEBUG, "%s::%s send %p to m_vout_input", CLASSNAME, __func__, static_cast<void*>(omvb));
             MMAL_STATUS_T status = mmal_port_send_buffer(m_vout_input, buffer);
             if (status != MMAL_SUCCESS)
@@ -861,7 +860,7 @@ void CMMALRenderer::Run()
     }
     if (!kept)
     {
-      if (VERBOSE && CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(LOGVIDEO))
+      if (VERBOSE && CServiceBroker::GetLogging().CanLogComponent(LOGVIDEO))
       {
         CLog::Log(
             LOGDEBUG,
@@ -899,7 +898,7 @@ void CMMALRenderer::UpdateFramerateStats(double pts)
   }
   if (pts != DVD_NOPTS_VALUE)
     m_lastPts = pts;
-  if (VERBOSE && CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(LOGVIDEO))
+  if (VERBOSE && CServiceBroker::GetLogging().CanLogComponent(LOGVIDEO))
     CLog::Log(LOGDEBUG, "%s::%s pts:%.3f diff:%.3f m_frameInterval:%.6f m_frameIntervalDiff:%.6f", CLASSNAME, __func__, pts*1e-6, diff * 1e-6 , m_frameInterval * 1e-6, m_frameIntervalDiff *1e-6);
 }
 
@@ -907,7 +906,7 @@ void CMMALRenderer::AddVideoPicture(const VideoPicture& pic, int id)
 {
   CMMALBuffer *buffer = dynamic_cast<CMMALBuffer*>(pic.videoBuffer);
   assert(buffer);
-  if (VERBOSE && CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(LOGVIDEO))
+  if (VERBOSE && CServiceBroker::GetLogging().CanLogComponent(LOGVIDEO))
   {
     CLog::Log(LOGDEBUG, "%s::%s MMAL - %p (%p) %i", CLASSNAME, __func__, static_cast<void*>(buffer),
               static_cast<void*>(buffer->mmal_buffer), id);
@@ -959,7 +958,7 @@ void CMMALRenderer::ReleaseBuffer(int id)
 {
   CSingleLock lock(m_sharedSection);
   CMMALBuffer *omvb = m_buffers[id];
-  if (VERBOSE && CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(LOGVIDEO))
+  if (VERBOSE && CServiceBroker::GetLogging().CanLogComponent(LOGVIDEO))
   {
     CLog::Log(LOGDEBUG, "%s::%s - MMAL: source:%d omvb:%p mmal:%p", CLASSNAME, __func__, id,
               static_cast<void*>(omvb), omvb ? static_cast<void*>(omvb->mmal_buffer) : nullptr);
@@ -1022,7 +1021,7 @@ void CMMALRenderer::RenderUpdate(int index, int index2, bool clear, unsigned int
   if (omvb && omvb->m_state == MMALStateBypass)
   {
     // dummy buffer from omxplayer
-    if (VERBOSE && CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(LOGVIDEO))
+    if (VERBOSE && CServiceBroker::GetLogging().CanLogComponent(LOGVIDEO))
     {
       CLog::Log(LOGDEBUG, "%s::%s - OMX: clear:%d flags:%x alpha:%d source:%d omvb:%p", CLASSNAME,
                 __func__, clear, flags, alpha, index, static_cast<void*>(omvb));
@@ -1071,7 +1070,7 @@ void CMMALRenderer::RenderUpdate(int index, int index2, bool clear, unsigned int
 
 void CMMALRenderer::ReleaseBuffers()
 {
-  if (VERBOSE && CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(LOGVIDEO))
+  if (VERBOSE && CServiceBroker::GetLogging().CanLogComponent(LOGVIDEO))
     CLog::Log(LOGDEBUG, "%s::%s", CLASSNAME, __func__);
   for (int i=0; i<NUM_BUFFERS; i++)
     ReleaseBuffer(i);
@@ -1305,7 +1304,7 @@ void CMMALRenderer::SetVideoRect(const CRect& InSrcRect, const CRect& InDestRect
 
 void CMMALRenderer::deint_input_port_cb(MMAL_PORT_T *port, MMAL_BUFFER_HEADER_T *buffer)
 {
-  if (VERBOSE && CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(LOGVIDEO))
+  if (VERBOSE && CServiceBroker::GetLogging().CanLogComponent(LOGVIDEO))
   {
     CLog::Log(LOGDEBUG, "%s::%s omvb:%p mmal:%p dts:%.3f pts:%.3f len:%d cmd:%x flags:%x",
               CLASSNAME, __func__, static_cast<void*>(buffer->user_data),
@@ -1323,7 +1322,7 @@ static void deint_input_port_cb_static(MMAL_PORT_T *port, MMAL_BUFFER_HEADER_T *
 
 void CMMALRenderer::deint_output_port_cb(MMAL_PORT_T *port, MMAL_BUFFER_HEADER_T *buffer)
 {
-  if (VERBOSE && CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(LOGVIDEO))
+  if (VERBOSE && CServiceBroker::GetLogging().CanLogComponent(LOGVIDEO))
   {
     CLog::Log(LOGDEBUG, "%s::%s omvb:%p mmal:%p dts:%.3f pts:%.3f len:%d cmd:%x flags:%x",
               CLASSNAME, __func__, static_cast<void*>(buffer->user_data),
diff --git a/xbmc/filesystem/CurlFile.cpp b/xbmc/filesystem/CurlFile.cpp
index dca0cf46eaa4..b49507789e11 100644
--- a/xbmc/filesystem/CurlFile.cpp
+++ b/xbmc/filesystem/CurlFile.cpp
@@ -59,7 +59,7 @@ extern "C" int debug_callback(CURL_HANDLE *handle, curl_infotype info, char *out
   if (info == CURLINFO_DATA_IN || info == CURLINFO_DATA_OUT)
     return 0;
 
-  if (!CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(LOGCURL))
+  if (!CServiceBroker::GetLogging().CanLogComponent(LOGCURL))
     return 0;
 
   std::string strLine;
@@ -1008,7 +1008,7 @@ bool CCurlFile::Open(const CURL& url)
                                 &m_state->m_multiHandle);
 
   // setup common curl options
-  SetCommonOptions(m_state, m_failOnError && !CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(LOGCURL));
+  SetCommonOptions(m_state, m_failOnError && !CServiceBroker::GetLogging().CanLogComponent(LOGCURL));
   SetRequestHeaders(m_state);
   m_state->m_sendRange = m_seekable;
   m_state->m_bRetry = m_allowRetry;
@@ -1018,7 +1018,7 @@ bool CCurlFile::Open(const CURL& url)
   if (m_httpresponse <= 0 || (m_failOnError && m_httpresponse >= 400))
   {
     std::string error;
-    if (m_httpresponse >= 400 && CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(LOGCURL))
+    if (m_httpresponse >= 400 && CServiceBroker::GetLogging().CanLogComponent(LOGCURL))
     {
       error.resize(4096);
       ReadString(&error[0], 4095);
diff --git a/xbmc/network/AirTunesServer.cpp b/xbmc/network/AirTunesServer.cpp
index 8529be536ffc..c7e3bf697099 100644
--- a/xbmc/network/AirTunesServer.cpp
+++ b/xbmc/network/AirTunesServer.cpp
@@ -32,7 +32,6 @@
 #include "network/Network.h"
 #include "network/Zeroconf.h"
 #include "network/ZeroconfBrowser.h"
-#include "settings/AdvancedSettings.h"
 #include "settings/Settings.h"
 #include "settings/SettingsComponent.h"
 #include "URL.h"
@@ -530,7 +529,7 @@ void  CAirTunesServer::AudioOutputFunctions::audio_destroy(void *cls, void *sess
 void shairplay_log(void *cls, int level, const char *msg)
 {
   int xbmcLevel = LOGINFO;
-  if(!CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(LOGAIRTUNES))
+  if(!CServiceBroker::GetLogging().CanLogComponent(LOGAIRTUNES))
     return;
 
   switch(level)
@@ -706,7 +705,7 @@ bool CAirTunesServer::Initialize(const std::string &password)
     unsigned short port = (unsigned short)m_port;
 
     raop_set_log_level(m_pRaop, RAOP_LOG_WARNING);
-    if (CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(LOGAIRTUNES))
+    if (CServiceBroker::GetLogging().CanLogComponent(LOGAIRTUNES))
     {
       raop_set_log_level(m_pRaop, RAOP_LOG_DEBUG);
     }
diff --git a/xbmc/platform/posix/filesystem/SMBFile.cpp b/xbmc/platform/posix/filesystem/SMBFile.cpp
index ad8a119a0c34..86ef41b4a310 100644
--- a/xbmc/platform/posix/filesystem/SMBFile.cpp
+++ b/xbmc/platform/posix/filesystem/SMBFile.cpp
@@ -173,7 +173,7 @@ void CSMB::Init()
     setenv("HOME", truehome.c_str(), 1);
 
 #ifdef DEPRECATED_SMBC_INTERFACE
-    smbc_setDebug(m_context, CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(LOGSAMBA) ? 10 : 0);
+    smbc_setDebug(m_context, CServiceBroker::GetLogging().CanLogComponent(LOGSAMBA) ? 10 : 0);
     smbc_setFunctionAuthData(m_context, xb_smbc_auth);
     orig_cache = smbc_getFunctionGetCachedServer(m_context);
     smbc_setFunctionGetCachedServer(m_context, xb_smbc_cache);
@@ -188,7 +188,7 @@ void CSMB::Init()
     //! @bug libsmbclient < 4.8 isn't const correct
     smbc_setUser(m_context, const_cast<char*>(guest.c_str()));
 #else
-    m_context->debug = (CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(LOGSAMBA) ? 10 : 0);
+    m_context->debug = (CServiceBroker::GetLogging().CanLogComponent(LOGSAMBA) ? 10 : 0);
     m_context->callbacks.auth_fn = xb_smbc_auth;
     orig_cache = m_context->callbacks.get_cached_srv_fn;
     m_context->callbacks.get_cached_srv_fn = xb_smbc_cache;
diff --git a/xbmc/settings/AdvancedSettings.cpp b/xbmc/settings/AdvancedSettings.cpp
index 54f82611354a..667ca8fad1fc 100644
--- a/xbmc/settings/AdvancedSettings.cpp
+++ b/xbmc/settings/AdvancedSettings.cpp
@@ -18,7 +18,6 @@
 #include "ServiceBroker.h"
 #include "filesystem/File.h"
 #include "filesystem/SpecialProtocol.h"
-#include "guilib/LocalizeStrings.h"
 #include "LangInfo.h"
 #include "network/DNSNameCache.h"
 #include "profiles/ProfileManager.h"
@@ -69,9 +68,6 @@ void CAdvancedSettings::OnSettingsLoaded()
     CLog::Log(LOGNOTICE, "Disabled debug logging due to GUI setting. Level %d.", m_logLevel);
   }
   CServiceBroker::GetLogging().SetLogLevel(m_logLevel);
-
-  m_extraLogEnabled = settings->GetBool(CSettings::SETTING_DEBUG_EXTRALOGGING);
-  SetExtraLogLevel(settings->GetList(CSettings::SETTING_DEBUG_SETEXTRALOGLEVEL));
 }
 
 void CAdvancedSettings::OnSettingsUnloaded()
@@ -87,10 +83,6 @@ void CAdvancedSettings::OnSettingChanged(std::shared_ptr<const CSetting> setting
   const std::string &settingId = setting->GetId();
   if (settingId == CSettings::SETTING_DEBUG_SHOWLOGINFO)
     SetDebugMode(std::static_pointer_cast<const CSettingBool>(setting)->GetValue());
-  else if (settingId == CSettings::SETTING_DEBUG_EXTRALOGGING)
-    m_extraLogEnabled = std::static_pointer_cast<const CSettingBool>(setting)->GetValue();
-  else if (settingId == CSettings::SETTING_DEBUG_SETEXTRALOGLEVEL)
-    SetExtraLogLevel(CSettingUtils::GetList(std::static_pointer_cast<const CSettingList>(setting)));
 }
 
 void CAdvancedSettings::Initialize(const CAppParamParser &params, CSettingsManager& settingsMgr)
@@ -99,12 +91,9 @@ void CAdvancedSettings::Initialize(const CAppParamParser &params, CSettingsManag
 
   params.SetAdvancedSettings(*this);
 
-  settingsMgr.RegisterSettingOptionsFiller("loggingcomponents", SettingOptionsLoggingComponentsFiller);
   settingsMgr.RegisterSettingsHandler(this, true);
   std::set<std::string> settingSet;
   settingSet.insert(CSettings::SETTING_DEBUG_SHOWLOGINFO);
-  settingSet.insert(CSettings::SETTING_DEBUG_EXTRALOGGING);
-  settingSet.insert(CSettings::SETTING_DEBUG_SETEXTRALOGLEVEL);
   settingsMgr.RegisterCallback(this, settingSet);
 }
 
@@ -425,8 +414,6 @@ void CAdvancedSettings::Initialize()
   m_videoAssFixedWorks = false;
 
   m_logLevelHint = m_logLevel = LOG_LEVEL_NORMAL;
-  m_extraLogEnabled = false;
-  m_extraLogLevels = 0;
 
   m_openGlDebugging = false;
 
@@ -1363,57 +1350,6 @@ void CAdvancedSettings::SetDebugMode(bool debug)
   }
 }
 
-bool CAdvancedSettings::CanLogComponent(int component) const
-{
-  if (!m_extraLogEnabled || component <= 0)
-    return false;
-
-  return ((m_extraLogLevels & component) == component);
-}
-
-void CAdvancedSettings::SettingOptionsLoggingComponentsFiller(SettingConstPtr setting, std::vector<IntegerSettingOption> &list, int &current, void *data)
-{
-  list.emplace_back(g_localizeStrings.Get(669), LOGSAMBA);
-  list.emplace_back(g_localizeStrings.Get(670), LOGCURL);
-  list.emplace_back(g_localizeStrings.Get(672), LOGFFMPEG);
-  list.emplace_back(g_localizeStrings.Get(675), LOGJSONRPC);
-  list.emplace_back(g_localizeStrings.Get(676), LOGAUDIO);
-  list.emplace_back(g_localizeStrings.Get(680), LOGVIDEO);
-  list.emplace_back(g_localizeStrings.Get(683), LOGAVTIMING);
-  list.emplace_back(g_localizeStrings.Get(684), LOGWINDOWING);
-  list.emplace_back(g_localizeStrings.Get(685), LOGPVR);
-  list.emplace_back(g_localizeStrings.Get(686), LOGEPG);
-  list.emplace_back(g_localizeStrings.Get(39117), LOGANNOUNCE);
-#ifdef HAS_DBUS
-  list.emplace_back(g_localizeStrings.Get(674), LOGDBUS);
-#endif
-#ifdef HAS_WEB_SERVER
-  list.emplace_back(g_localizeStrings.Get(681), LOGWEBSERVER);
-#endif
-#ifdef HAS_AIRTUNES
-  list.emplace_back(g_localizeStrings.Get(677), LOGAIRTUNES);
-#endif
-#ifdef HAS_UPNP
-  list.emplace_back(g_localizeStrings.Get(678), LOGUPNP);
-#endif
-#ifdef HAVE_LIBCEC
-  list.emplace_back(g_localizeStrings.Get(679), LOGCEC);
-#endif
-  list.emplace_back(g_localizeStrings.Get(682), LOGDATABASE);
-}
-
-void CAdvancedSettings::SetExtraLogLevel(const std::vector<CVariant> &components)
-{
-  m_extraLogLevels = 0;
-  for (std::vector<CVariant>::const_iterator it = components.begin(); it != components.end(); ++it)
-  {
-    if (!it->isInteger())
-      continue;
-
-    m_extraLogLevels |= static_cast<int>(it->asInteger());
-  }
-}
-
 void CAdvancedSettings::SetExtraArtwork(const TiXmlElement* arttypes, std::vector<std::string>& artworkMap)
 {
   if (!arttypes)
diff --git a/xbmc/settings/AdvancedSettings.h b/xbmc/settings/AdvancedSettings.h
index 4949e9c764ce..7ea1b342f3c7 100644
--- a/xbmc/settings/AdvancedSettings.h
+++ b/xbmc/settings/AdvancedSettings.h
@@ -123,9 +123,6 @@ class CAdvancedSettings : public ISettingCallback, public ISettingsHandler
     static void GetCustomRegexps(TiXmlElement *pRootElement, std::vector<std::string> &settings);
     static void GetCustomExtensions(TiXmlElement *pRootElement, std::string& extensions);
 
-    bool CanLogComponent(int component) const;
-    static void SettingOptionsLoggingComponentsFiller(std::shared_ptr<const CSetting> setting, std::vector<IntegerSettingOption> &list, int &current, void *data);
-
     std::string m_audioDefaultPlayer;
     float m_audioPlayCountMinimumPercent;
     bool m_VideoPlayerIgnoreDTSinWAV;
@@ -186,8 +183,6 @@ class CAdvancedSettings : public ISettingCallback, public ISettingsHandler
     int m_songInfoDuration;
     int m_logLevel;
     int m_logLevelHint;
-    bool m_extraLogEnabled;
-    int m_extraLogLevels;
     std::string m_cddbAddress;
     bool m_addSourceOnTop; //!< True to put 'add source' buttons on top
 
@@ -370,7 +365,6 @@ class CAdvancedSettings : public ISettingCallback, public ISettingsHandler
     std::string m_userAgent;
 
   private:
-    void SetExtraLogLevel(const std::vector<CVariant> &components);
     void Initialize();
     void Clear();
     void SetExtraArtwork(const TiXmlElement* arttypes, std::vector<std::string>& artworkMap);
diff --git a/xbmc/utils/log.cpp b/xbmc/utils/log.cpp
index 79b423ff18e7..bdbcfb695ed0 100644
--- a/xbmc/utils/log.cpp
+++ b/xbmc/utils/log.cpp
@@ -11,8 +11,7 @@
 #include "CompileInfo.h"
 #include "ServiceBroker.h"
 #include "filesystem/File.h"
-#include "utils/URIUtils.h"
-
+#include "guilib/LocalizeStrings.h"
 #if defined(TARGET_ANDROID)
 #include "platform/android/utils/AndroidInterfaceForCLog.h"
 #elif defined(TARGET_DARWIN)
@@ -22,8 +21,15 @@
 #else
 #include "platform/posix/utils/PosixInterfaceForCLog.h"
 #endif
+#include "settings/SettingUtils.h"
+#include "settings/Settings.h"
+#include "settings/SettingsComponent.h"
+#include "settings/lib/Setting.h"
+#include "settings/lib/SettingsManager.h"
+#include "utils/URIUtils.h"
 
 #include <cstring>
+#include <set>
 
 #include <spdlog/sinks/basic_file_sink.h>
 #include <spdlog/sinks/dist_sink.h>
@@ -36,7 +42,9 @@ CLog::CLog()
   : m_platform(IPlatformLog::CreatePlatformLog()),
     m_sinks(std::make_shared<spdlog::sinks::dist_sink_mt>()),
     m_defaultLogger(CreateLogger("general")),
-    m_logLevel(LOG_LEVEL_DEBUG)
+    m_logLevel(LOG_LEVEL_DEBUG),
+    m_componentLogEnabled(false),
+    m_componentLogLevels(0)
 {
   // add platform-specific debug sinks
   m_platform->AddSinks(m_sinks);
@@ -54,11 +62,42 @@ CLog::CLog()
   SetLogLevel(m_logLevel);
 }
 
-void CLog::Initialize(const std::string& path)
+void CLog::OnSettingsLoaded()
+{
+  const std::shared_ptr<CSettings> settings = CServiceBroker::GetSettingsComponent()->GetSettings();
+  m_componentLogEnabled = settings->GetBool(CSettings::SETTING_DEBUG_EXTRALOGGING);
+  SetComponentLogLevel(settings->GetList(CSettings::SETTING_DEBUG_SETEXTRALOGLEVEL));
+}
+
+void CLog::OnSettingChanged(std::shared_ptr<const CSetting> setting)
+{
+  if (setting == NULL)
+    return;
+
+  const std::string& settingId = setting->GetId();
+  if (settingId == CSettings::SETTING_DEBUG_EXTRALOGGING)
+    m_componentLogEnabled = std::static_pointer_cast<const CSettingBool>(setting)->GetValue();
+  else if (settingId == CSettings::SETTING_DEBUG_SETEXTRALOGLEVEL)
+    SetComponentLogLevel(
+        CSettingUtils::GetList(std::static_pointer_cast<const CSettingList>(setting)));
+}
+
+void CLog::Initialize(const std::string& path) 
 {
   if (m_fileSink != nullptr)
     return;
 
+  // register setting callbacks
+  auto settingsManager =
+      CServiceBroker::GetSettingsComponent()->GetSettings()->GetSettingsManager();
+  settingsManager->RegisterSettingOptionsFiller("loggingcomponents",
+                                                SettingOptionsLoggingComponentsFiller);
+  settingsManager->RegisterSettingsHandler(this);
+  std::set<std::string> settingSet;
+  settingSet.insert(CSettings::SETTING_DEBUG_EXTRALOGGING);
+  settingSet.insert(CSettings::SETTING_DEBUG_SETEXTRALOGLEVEL);
+  settingsManager->RegisterCallback(this, settingSet);
+
   if (path.empty())
     return;
 
@@ -94,6 +133,13 @@ void CLog::Uninitialize()
   if (m_fileSink == nullptr)
     return;
 
+  // unregister setting callbacks
+  auto settingsManager =
+      CServiceBroker::GetSettingsComponent()->GetSettings()->GetSettingsManager();
+  settingsManager->UnregisterSettingOptionsFiller("loggingcomponents");
+  settingsManager->UnregisterSettingsHandler(this);
+  settingsManager->UnregisterCallback(this);
+
   // flush all loggers
   spdlog::apply_all([](std::shared_ptr<spdlog::logger> logger) { logger->flush(); });
 
@@ -142,6 +188,48 @@ bool CLog::IsLogLevelLogged(int loglevel)
   return (loglevel & LOGMASK) >= LOGNOTICE;
 }
 
+bool CLog::CanLogComponent(uint32_t component) const
+{
+  if (!m_componentLogEnabled || component == 0)
+    return false;
+
+  return ((m_componentLogLevels & component) == component);
+}
+
+void CLog::SettingOptionsLoggingComponentsFiller(SettingConstPtr setting,
+                                                 std::vector<IntegerSettingOption>& list,
+                                                 int& current,
+                                                 void* data)
+{
+  list.emplace_back(g_localizeStrings.Get(669), LOGSAMBA);
+  list.emplace_back(g_localizeStrings.Get(670), LOGCURL);
+  list.emplace_back(g_localizeStrings.Get(672), LOGFFMPEG);
+  list.emplace_back(g_localizeStrings.Get(675), LOGJSONRPC);
+  list.emplace_back(g_localizeStrings.Get(676), LOGAUDIO);
+  list.emplace_back(g_localizeStrings.Get(680), LOGVIDEO);
+  list.emplace_back(g_localizeStrings.Get(683), LOGAVTIMING);
+  list.emplace_back(g_localizeStrings.Get(684), LOGWINDOWING);
+  list.emplace_back(g_localizeStrings.Get(685), LOGPVR);
+  list.emplace_back(g_localizeStrings.Get(686), LOGEPG);
+  list.emplace_back(g_localizeStrings.Get(39117), LOGANNOUNCE);
+#ifdef HAS_DBUS
+  list.emplace_back(g_localizeStrings.Get(674), LOGDBUS);
+#endif
+#ifdef HAS_WEB_SERVER
+  list.emplace_back(g_localizeStrings.Get(681), LOGWEBSERVER);
+#endif
+#ifdef HAS_AIRTUNES
+  list.emplace_back(g_localizeStrings.Get(677), LOGAIRTUNES);
+#endif
+#ifdef HAS_UPNP
+  list.emplace_back(g_localizeStrings.Get(678), LOGUPNP);
+#endif
+#ifdef HAVE_LIBCEC
+  list.emplace_back(g_localizeStrings.Get(679), LOGCEC);
+#endif
+  list.emplace_back(g_localizeStrings.Get(682), LOGDATABASE);
+}
+
 Logger CLog::GetLogger(const std::string& loggerName)
 {
   auto logger = spdlog::get(loggerName);
@@ -192,3 +280,15 @@ Logger CLog::CreateLogger(const std::string& loggerName)
 
   return logger;
 }
+
+void CLog::SetComponentLogLevel(const std::vector<CVariant>& components)
+{
+  m_componentLogLevels = 0;
+  for (const auto& component : components)
+  {
+    if (!component.isInteger())
+      continue;
+
+    m_componentLogLevels |= static_cast<uint32_t>(component.asInteger());
+  }
+}
diff --git a/xbmc/utils/log.h b/xbmc/utils/log.h
index bf37ba3799a1..7287918453f5 100644
--- a/xbmc/utils/log.h
+++ b/xbmc/utils/log.h
@@ -12,13 +12,15 @@
 #define SPDLOG_LEVEL_NAMES {"TRACE", "DEBUG", "INFO", "WARNING", "ERROR", "FATAL", "OFF"};
 
 #include "commons/ilog.h"
-#include "settings/AdvancedSettings.h"
-#include "settings/SettingsComponent.h"
+#include "settings/lib/ISettingCallback.h"
+#include "settings/lib/ISettingsHandler.h"
+#include "settings/lib/SettingDefinitions.h"
 #include "utils/IPlatformLog.h"
 #include "utils/StringUtils.h"
 #include "utils/logtypes.h"
 
 #include <string>
+#include <vector>
 
 #include <spdlog/spdlog.h>
 
@@ -34,12 +36,18 @@ class dist_sink;
 } // namespace sinks
 } // namespace spdlog
 
-class CLog
+class CLog : public ISettingsHandler, public ISettingCallback
 {
 public:
   CLog();
   ~CLog() = default;
 
+  // implementation of ISettingsHandler
+  void OnSettingsLoaded() override;
+
+  // implementation of ISettingCallback
+  void OnSettingChanged(std::shared_ptr<const CSetting> setting) override;
+
   void Initialize(const std::string& path);
   void Uninitialize();
 
@@ -47,6 +55,12 @@ class CLog
   int GetLogLevel() { return m_logLevel; }
   bool IsLogLevelLogged(int loglevel);
 
+  bool CanLogComponent(uint32_t component) const;
+  static void SettingOptionsLoggingComponentsFiller(std::shared_ptr<const CSetting> setting,
+                                                    std::vector<IntegerSettingOption>& list,
+                                                    int& current,
+                                                    void* data);
+
   Logger GetLogger(const std::string& loggerName);
 
   template<typename Char, typename... Args>
@@ -56,9 +70,9 @@ class CLog
   }
 
   template<typename Char, typename... Args>
-  static inline void Log(int level, int component, const Char* format, Args&&... args)
+  static inline void Log(int level, uint32_t component, const Char* format, Args&&... args)
   {
-    if (!CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(component))
+    if (!GetInstance().CanLogComponent(component))
       return;
 
     Log(level, format, std::forward<Args>(args)...);
@@ -72,11 +86,11 @@ class CLog
 
   template<typename Char, typename... Args>
   static inline void Log(spdlog::level::level_enum level,
-                         int component,
+                         uint32_t component,
                          const Char* format,
                          Args&&... args)
   {
-    if (!CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(component))
+    if (!GetInstance().CanLogComponent(component))
       return;
 
     Log(level, format, std::forward<Args>(args)...);
@@ -93,9 +107,9 @@ class CLog
 
   template<typename Char, typename... Args>
   static inline void LogFunction(
-      int level, const char* functionName, int component, const Char* format, Args&&... args)
+      int level, const char* functionName, uint32_t component, const Char* format, Args&&... args)
   {
-    if (!CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(component))
+    if (!GetInstance().CanLogComponent(component))
       return;
 
     LogFunction(level, functionName, format, std::forward<Args>(args)...);
@@ -117,11 +131,11 @@ class CLog
   template<typename Char, typename... Args>
   static inline void LogFunction(spdlog::level::level_enum level,
                                  const char* functionName,
-                                 int component,
+                                 uint32_t component,
                                  const Char* format,
                                  Args&&... args)
   {
-    if (!CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(component))
+    if (!GetInstance().CanLogComponent(component))
       return;
 
     LogFunction(level, functionName, format, std::forward<Args>(args)...);
@@ -175,6 +189,8 @@ class CLog
 
   Logger CreateLogger(const std::string& loggerName);
 
+  void SetComponentLogLevel(const std::vector<CVariant>& components);
+
   std::unique_ptr<IPlatformLog> m_platform;
   std::shared_ptr<spdlog::sinks::dist_sink<std::mutex>> m_sinks;
   Logger m_defaultLogger;
@@ -182,6 +198,9 @@ class CLog
   std::shared_ptr<spdlog::sinks::basic_file_sink<std::mutex>> m_fileSink;
 
   int m_logLevel;
+
+  bool m_componentLogEnabled;
+  uint32_t m_componentLogLevels;
 };
 
 namespace XbmcUtils

From 2ed9236357d3e1a4cbb6771d2c9acc557cd88806 Mon Sep 17 00:00:00 2001
From: montellese <montellese@kodi.tv>
Date: Mon, 13 Apr 2020 14:53:48 +0200
Subject: [PATCH 07/21] ~ follow coding style for 50ced18d7b

---
 xbmc/cores/AudioEngine/Sinks/AESinkALSA.cpp   |  2 +-
 xbmc/cores/FFmpeg.cpp                         |  3 +--
 .../HwDecRender/MMALRenderer.cpp              | 20 +++++++++----------
 xbmc/filesystem/CurlFile.cpp                  |  3 ++-
 xbmc/network/AirTunesServer.cpp               |  2 +-
 5 files changed, 15 insertions(+), 15 deletions(-)

diff --git a/xbmc/cores/AudioEngine/Sinks/AESinkALSA.cpp b/xbmc/cores/AudioEngine/Sinks/AESinkALSA.cpp
index ecf6840f2ce1..41befc885911 100644
--- a/xbmc/cores/AudioEngine/Sinks/AESinkALSA.cpp
+++ b/xbmc/cores/AudioEngine/Sinks/AESinkALSA.cpp
@@ -1619,7 +1619,7 @@ bool CAESinkALSA::GetELD(snd_hctl_t *hctl, int device, CAEDeviceInfo& info, bool
 
 void CAESinkALSA::sndLibErrorHandler(const char *file, int line, const char *function, int err, const char *fmt, ...)
 {
-  if(!CServiceBroker::GetLogging().CanLogComponent(LOGAUDIO))
+  if (!CServiceBroker::GetLogging().CanLogComponent(LOGAUDIO))
     return;
 
   va_list arg;
diff --git a/xbmc/cores/FFmpeg.cpp b/xbmc/cores/FFmpeg.cpp
index 968cb3b49514..a8e4f613a497 100644
--- a/xbmc/cores/FFmpeg.cpp
+++ b/xbmc/cores/FFmpeg.cpp
@@ -73,8 +73,7 @@ void ff_avutil_log(void* ptr, int level, const char* format, va_list va)
   if (CFFmpegLog::GetLogLevel() > 0)
     maxLevel = AV_LOG_INFO;
 
-  if (level > maxLevel &&
-     !CServiceBroker::GetLogging().CanLogComponent(LOGFFMPEG))
+  if (level > maxLevel && !CServiceBroker::GetLogging().CanLogComponent(LOGFFMPEG))
     return;
   else if (CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->m_logLevel <= LOG_LEVEL_NORMAL)
     return;
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/MMALRenderer.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/MMALRenderer.cpp
index 86824db8ecef..0c736428874b 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/MMALRenderer.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/MMALRenderer.cpp
@@ -364,16 +364,16 @@ CMMALBuffer *CMMALPool::GetBuffer(uint32_t timeout)
                 __FUNCTION__, static_cast<void*>(m_mmal_pool), static_cast<void*>(omvb),
                 static_cast<void*>(buffer), timeout);
     }
-  else if (VERBOSE && CServiceBroker::GetLogging().CanLogComponent(LOGVIDEO))
-  {
-    CLog::Log(LOGDEBUG,
-              "%s::%s pool:%p omvb:%p mmal:%p gmem:%p new:%d id:%d to:%d %dx%d (%dx%d) size:%d "
-              "pool:%p:%p enc:%.4s",
-              CLASSNAME, __FUNCTION__, static_cast<void*>(m_mmal_pool), static_cast<void*>(omvb),
-              static_cast<void*>(buffer), static_cast<void*>(gmem), newbuf, id, timeout, m_width,
-              m_height, AlignedWidth(), AlignedHeight(), buffer ? buffer->alloc_size : 0,
-              omvb ? static_cast<void*>(omvb->Pool().get()) : nullptr, static_cast<void*>(GetPtr().get()),
-              (char*)&m_mmal_format);
+    else if (VERBOSE && CServiceBroker::GetLogging().CanLogComponent(LOGVIDEO))
+    {
+      CLog::Log(LOGDEBUG,
+                "%s::%s pool:%p omvb:%p mmal:%p gmem:%p new:%d id:%d to:%d %dx%d (%dx%d) size:%d "
+                "pool:%p:%p enc:%.4s",
+                CLASSNAME, __FUNCTION__, static_cast<void*>(m_mmal_pool), static_cast<void*>(omvb),
+                static_cast<void*>(buffer), static_cast<void*>(gmem), newbuf, id, timeout, m_width,
+                m_height, AlignedWidth(), AlignedHeight(), buffer ? buffer->alloc_size : 0,
+                omvb ? static_cast<void*>(omvb->Pool().get()) : nullptr,
+                static_cast<void*>(GetPtr().get()), (char*)&m_mmal_format);
   }
   return omvb;
 }
diff --git a/xbmc/filesystem/CurlFile.cpp b/xbmc/filesystem/CurlFile.cpp
index b49507789e11..c90ae5cf6019 100644
--- a/xbmc/filesystem/CurlFile.cpp
+++ b/xbmc/filesystem/CurlFile.cpp
@@ -1008,7 +1008,8 @@ bool CCurlFile::Open(const CURL& url)
                                 &m_state->m_multiHandle);
 
   // setup common curl options
-  SetCommonOptions(m_state, m_failOnError && !CServiceBroker::GetLogging().CanLogComponent(LOGCURL));
+  SetCommonOptions(m_state,
+                   m_failOnError && !CServiceBroker::GetLogging().CanLogComponent(LOGCURL));
   SetRequestHeaders(m_state);
   m_state->m_sendRange = m_seekable;
   m_state->m_bRetry = m_allowRetry;
diff --git a/xbmc/network/AirTunesServer.cpp b/xbmc/network/AirTunesServer.cpp
index c7e3bf697099..f71b6c2d8f6a 100644
--- a/xbmc/network/AirTunesServer.cpp
+++ b/xbmc/network/AirTunesServer.cpp
@@ -529,7 +529,7 @@ void  CAirTunesServer::AudioOutputFunctions::audio_destroy(void *cls, void *sess
 void shairplay_log(void *cls, int level, const char *msg)
 {
   int xbmcLevel = LOGINFO;
-  if(!CServiceBroker::GetLogging().CanLogComponent(LOGAIRTUNES))
+  if (!CServiceBroker::GetLogging().CanLogComponent(LOGAIRTUNES))
     return;
 
   switch(level)

From 4a51be4d868f3777af83e9b936b95cad55094208 Mon Sep 17 00:00:00 2001
From: montellese <montellese@kodi.tv>
Date: Sun, 9 Feb 2020 23:46:38 +0100
Subject: [PATCH 08/21] remove unnecessary trailing newline from log messages

---
 xbmc/SectionLoader.cpp                        |   2 +-
 xbmc/Util.cpp                                 |   6 +-
 .../Engines/ActiveAE/ActiveAEResamplePi.cpp   |   2 +-
 xbmc/cores/AudioEngine/Utils/AERingBuffer.h   |   8 +-
 xbmc/cores/DllLoader/DllLoader.cpp            |  52 ++---
 xbmc/cores/DllLoader/SoLoader.cpp             |   4 +-
 xbmc/cores/DllLoader/exports/emu_msvcrt.cpp   |   2 +-
 .../Video/DVDVideoCodecAndroidMediaCodec.cpp  |   8 +-
 .../VideoPlayer/DVDCodecs/Video/VDPAU.cpp     |   8 +-
 .../DVDInputStreamNavigator.cpp               |  30 +--
 xbmc/cores/VideoPlayer/VideoPlayer.cpp        |   2 +-
 .../cores/VideoPlayer/VideoPlayerRadioRDS.cpp |   2 +-
 .../VideoRenderers/ColorManager.cpp           |  24 +--
 xbmc/cores/omxplayer/OMXImage.cpp             | 186 +++++++++---------
 xbmc/filesystem/BlurayCallback.cpp            |   6 +-
 xbmc/filesystem/DllLibCurl.cpp                |   4 +-
 xbmc/filesystem/NFSDirectory.cpp              |   8 +-
 xbmc/filesystem/NFSFile.cpp                   |  16 +-
 xbmc/filesystem/SpecialProtocol.cpp           |   2 +-
 xbmc/guilib/FFmpegImage.cpp                   |   4 +-
 xbmc/guilib/GUIWindow.cpp                     |   2 +-
 xbmc/interfaces/json-rpc/JSONRPC.cpp          |   6 +-
 xbmc/network/AirPlayServer.cpp                |   2 +-
 xbmc/network/mdns/ZeroconfBrowserMDNS.cpp     |   2 +-
 xbmc/platform/darwin/osx/XBMCHelper.cpp       |   2 +-
 .../osx/peripherals/PeripheralBusUSB.cpp      |   4 +-
 xbmc/platform/darwin/tvos/TVOSTopShelf.mm     |   4 +-
 xbmc/platform/linux/DBusMessage.cpp           |   2 +-
 xbmc/platform/linux/OMXCore.cpp               | 150 +++++++-------
 xbmc/platform/posix/XHandle.cpp               |   2 +-
 xbmc/pvr/channels/PVRChannelGroup.cpp         |   2 +-
 xbmc/storage/cdioSupport.cpp                  |   2 +-
 xbmc/utils/FileUtils.cpp                      |   2 +-
 xbmc/video/Teletext.cpp                       |   2 +-
 xbmc/windowing/X11/GLContextEGL.cpp           |  14 +-
 .../windowing/X11/WinSystemX11GLESContext.cpp |   8 +-
 xbmc/windowing/android/AndroidUtils.cpp       |   2 +-
 xbmc/windowing/ios/WinSystemIOS.mm            |   2 +-
 xbmc/windowing/osx/WinSystemOSX.mm            |   4 +-
 xbmc/windowing/rpi/RPIUtils.cpp               |  20 +-
 xbmc/windowing/rpi/WinSystemRpi.cpp           |   2 +-
 xbmc/windowing/tvos/WinSystemTVOS.mm          |   2 +-
 42 files changed, 307 insertions(+), 307 deletions(-)

diff --git a/xbmc/SectionLoader.cpp b/xbmc/SectionLoader.cpp
index 6461c4cd205e..7a2534954819 100644
--- a/xbmc/SectionLoader.cpp
+++ b/xbmc/SectionLoader.cpp
@@ -47,7 +47,7 @@ LibraryLoader *CSectionLoader::LoadDLL(const std::string &dllname, bool bDelayUn
   }
 
   // ok, now load the dll
-  CLog::Log(LOGDEBUG, "SECTION:LoadDLL(%s)\n", dllname.c_str());
+  CLog::Log(LOGDEBUG, "SECTION:LoadDLL(%s)", dllname.c_str());
   LibraryLoader* pDll = DllLoaderContainer::LoadModule(dllname.c_str(), NULL, bLoadSymbols);
   if (!pDll)
     return NULL;
diff --git a/xbmc/Util.cpp b/xbmc/Util.cpp
index c04aab69846b..384d504bfcaa 100644
--- a/xbmc/Util.cpp
+++ b/xbmc/Util.cpp
@@ -1904,7 +1904,7 @@ void CUtil::ScanPathsForAssociatedItems(const std::string& videoName,
       else
       {
         associatedFiles.push_back(pItem->GetPath());
-        CLog::Log(LOGINFO, "%s: found associated file %s\n", __FUNCTION__, CURL::GetRedacted(pItem->GetPath()).c_str());
+        CLog::Log(LOGINFO, "%s: found associated file %s", __FUNCTION__, CURL::GetRedacted(pItem->GetPath()).c_str());
       }
     }
     else
@@ -1956,7 +1956,7 @@ int CUtil::ScanArchiveForAssociatedItems(const std::string& strArchivePath,
     {
       if (StringUtils::EqualsNoCase(strExt, ext))
       {
-        CLog::Log(LOGINFO, "%s: found associated file %s\n", __FUNCTION__, CURL::GetRedacted(strPathInRar).c_str());
+        CLog::Log(LOGINFO, "%s: found associated file %s", __FUNCTION__, CURL::GetRedacted(strPathInRar).c_str());
         associatedFiles.push_back(strPathInRar);
         nItemsAdded++;
         break;
@@ -2049,7 +2049,7 @@ void CUtil::ScanForExternalSubtitles(const std::string& strMovie, std::vector<st
             std::string strDest = StringUtils::Format("special://temp/subtitle.%s.%zu.smi", lang.Name.c_str(), i);
             if (CFile::Copy(vecSubtitles[i], strDest))
             {
-              CLog::Log(LOGINFO, " cached subtitle %s->%s\n", CURL::GetRedacted(vecSubtitles[i]).c_str(), strDest.c_str());
+              CLog::Log(LOGINFO, " cached subtitle %s->%s", CURL::GetRedacted(vecSubtitles[i]).c_str(), strDest.c_str());
               vecSubtitles.push_back(strDest);
             }
           }
diff --git a/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAEResamplePi.cpp b/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAEResamplePi.cpp
index 8daa1e6f7da2..d7ff8ced9ec8 100644
--- a/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAEResamplePi.cpp
+++ b/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAEResamplePi.cpp
@@ -338,7 +338,7 @@ bool CActiveAEResamplePi::Init(SampleConfig dstConfig, SampleConfig srcConfig, b
   omx_err = m_omx_mixer.SetConfig(OMX_IndexConfigBrcmAudioDownmixCoefficients8x8, &mix);
   if (omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s - error setting mixer OMX_IndexConfigBrcmAudioDownmixCoefficients, error 0x%08x\n",
+    CLog::Log(LOGERROR, "%s::%s - error setting mixer OMX_IndexConfigBrcmAudioDownmixCoefficients, error 0x%08x",
               CLASSNAME, __func__, omx_err);
     return false;
   }
diff --git a/xbmc/cores/AudioEngine/Utils/AERingBuffer.h b/xbmc/cores/AudioEngine/Utils/AERingBuffer.h
index 34ddc7a396d7..e4bbb34d1407 100644
--- a/xbmc/cores/AudioEngine/Utils/AERingBuffer.h
+++ b/xbmc/cores/AudioEngine/Utils/AERingBuffer.h
@@ -101,7 +101,7 @@ class AERingBuffer {
     if ( m_iSize > size + m_iWritePos )
     {
 #ifdef AE_RING_BUFFER_DEBUG
-      CLog::Log(LOGDEBUG, "AERingBuffer: Written to: %u size: %u space before: %u\n", m_iWritePos, size, space);
+      CLog::Log(LOGDEBUG, "AERingBuffer: Written to: %u size: %u space before: %u", m_iWritePos, size, space);
 #endif
       memcpy(m_Buffer[plane] + m_iWritePos, src, size);
     }
@@ -111,7 +111,7 @@ class AERingBuffer {
       unsigned int first = m_iSize - m_iWritePos;
       unsigned int second = size - first;
 #ifdef AE_RING_BUFFER_DEBUG
-      CLog::Log(LOGDEBUG, "AERingBuffer: Written to (split) first: %u second: %u size: %u space before: %u\n", first, second, size, space);
+      CLog::Log(LOGDEBUG, "AERingBuffer: Written to (split) first: %u second: %u size: %u space before: %u", first, second, size, space);
 #endif
       memcpy(m_Buffer[plane] + m_iWritePos, src, first);
       memcpy(m_Buffer[plane], src + first, second);
@@ -155,7 +155,7 @@ class AERingBuffer {
     if ( size + m_iReadPos < m_iSize )
     {
 #ifdef AE_RING_BUFFER_DEBUG
-      CLog::Log(LOGDEBUG, "AERingBuffer: Reading from: %u size: %u space before: %u\n", m_iWritePos, size, space);
+      CLog::Log(LOGDEBUG, "AERingBuffer: Reading from: %u size: %u space before: %u", m_iWritePos, size, space);
 #endif
       if (dest)
         memcpy(dest, m_Buffer[plane] + m_iReadPos, size);
@@ -166,7 +166,7 @@ class AERingBuffer {
       unsigned int first = m_iSize - m_iReadPos;
       unsigned int second = size - first;
 #ifdef AE_RING_BUFFER_DEBUG
-      CLog::Log(LOGDEBUG, "AERingBuffer: Reading from (split) first: %u second: %u size: %u space before: %u\n", first, second, size, space);
+      CLog::Log(LOGDEBUG, "AERingBuffer: Reading from (split) first: %u second: %u size: %u space before: %u", first, second, size, space);
 #endif
       if (dest)
       {
diff --git a/xbmc/cores/DllLoader/DllLoader.cpp b/xbmc/cores/DllLoader/DllLoader.cpp
index 435a7efd0aa5..bbc2982af0f8 100644
--- a/xbmc/cores/DllLoader/DllLoader.cpp
+++ b/xbmc/cores/DllLoader/DllLoader.cpp
@@ -186,11 +186,11 @@ void DllLoader::PrintImportLookupTable(unsigned long ImportLookupTable_RVA)
     if (*Table & 0x80000000)
     {
       // Process Ordinal...
-      CLog::Log(LOGDEBUG, "            Ordinal: %01lX\n", *Table & 0x7fffffff);
+      CLog::Log(LOGDEBUG, "            Ordinal: %01lX", *Table & 0x7fffffff);
     }
     else
     {
-      CLog::Log(LOGDEBUG, "            Don't process Hint/Name Table yet...\n");
+      CLog::Log(LOGDEBUG, "            Don't process Hint/Name Table yet...");
     }
     Table++;
   }
@@ -201,7 +201,7 @@ void DllLoader::PrintImportTable(ImportDirTable_t *ImportDirTable)
   ImportDirTable_t *Imp = ImportDirTable;
   int HavePrinted = 0;
 
-  CLog::Log(LOGDEBUG, "The Coff Image contains the following imports:\n\n");
+  CLog::Log(LOGDEBUG, "The Coff Image contains the following imports:");
   while ( Imp->ImportLookupTable_RVA != 0 ||
           Imp->TimeStamp != 0 ||
           Imp->ForwarderChain != 0 ||
@@ -213,14 +213,14 @@ void DllLoader::PrintImportTable(ImportDirTable_t *ImportDirTable)
 
     Name = (char*)RVA2Data(Imp->Name_RVA);
 
-    CLog::Log(LOGDEBUG, "    %s:\n", Name);
-    CLog::Log(LOGDEBUG, "        ImportAddressTable:     %04lX\n", Imp->ImportAddressTable_RVA);
-    CLog::Log(LOGDEBUG, "        ImportLookupTable:      %04lX\n", Imp->ImportLookupTable_RVA);
-    CLog::Log(LOGDEBUG, "        TimeStamp:              %01lX\n", Imp->TimeStamp);
-    CLog::Log(LOGDEBUG, "        Forwarder Chain:        %01lX\n", Imp->ForwarderChain);
+    CLog::Log(LOGDEBUG, "    %s:", Name);
+    CLog::Log(LOGDEBUG, "        ImportAddressTable:     %04lX", Imp->ImportAddressTable_RVA);
+    CLog::Log(LOGDEBUG, "        ImportLookupTable:      %04lX", Imp->ImportLookupTable_RVA);
+    CLog::Log(LOGDEBUG, "        TimeStamp:              %01lX", Imp->TimeStamp);
+    CLog::Log(LOGDEBUG, "        Forwarder Chain:        %01lX", Imp->ForwarderChain);
 
     PrintImportLookupTable(Imp->ImportLookupTable_RVA);
-    CLog::Log(LOGDEBUG, "\n");
+    CLog::Log(LOGDEBUG, "");
     Imp++;
   }
   if (!HavePrinted) CLog::Log(LOGDEBUG, "None.");
@@ -235,22 +235,22 @@ void DllLoader::PrintExportTable(ExportDirTable_t *ExportDirTable)
   unsigned short *OrdinalTable = (unsigned short*)RVA2Data(ExportDirTable->OrdinalTable_RVA);
 
 
-  CLog::Log(LOGDEBUG, "Export Table for %s:\n", Name);
+  CLog::Log(LOGDEBUG, "Export Table for %s:", Name);
 
-  CLog::Log(LOGDEBUG, "ExportFlags:    %04lX\n", ExportDirTable->ExportFlags);
-  CLog::Log(LOGDEBUG, "TimeStamp:      %04lX\n", ExportDirTable->TimeStamp);
-  CLog::Log(LOGDEBUG, "Major Ver:      %02X\n", ExportDirTable->MajorVersion);
-  CLog::Log(LOGDEBUG, "Minor Ver:      %02X\n", ExportDirTable->MinorVersion);
-  CLog::Log(LOGDEBUG, "Name RVA:       %04lX\n", ExportDirTable->Name_RVA);
-  CLog::Log(LOGDEBUG, "OrdinalBase     %lu\n", ExportDirTable->OrdinalBase);
-  CLog::Log(LOGDEBUG, "NumAddrTable    %lu\n", ExportDirTable->NumAddrTable);
-  CLog::Log(LOGDEBUG, "NumNamePtrs     %lu\n", ExportDirTable->NumNamePtrs);
-  CLog::Log(LOGDEBUG, "ExportAddressTable_RVA  %04lX\n", ExportDirTable->ExportAddressTable_RVA);
-  CLog::Log(LOGDEBUG, "NamePointerTable_RVA    %04lX\n", ExportDirTable->NamePointerTable_RVA);
-  CLog::Log(LOGDEBUG, "OrdinalTable_RVA        %04lX\n\n", ExportDirTable->OrdinalTable_RVA);
+  CLog::Log(LOGDEBUG, "ExportFlags:    %04lX", ExportDirTable->ExportFlags);
+  CLog::Log(LOGDEBUG, "TimeStamp:      %04lX", ExportDirTable->TimeStamp);
+  CLog::Log(LOGDEBUG, "Major Ver:      %02X", ExportDirTable->MajorVersion);
+  CLog::Log(LOGDEBUG, "Minor Ver:      %02X", ExportDirTable->MinorVersion);
+  CLog::Log(LOGDEBUG, "Name RVA:       %04lX", ExportDirTable->Name_RVA);
+  CLog::Log(LOGDEBUG, "OrdinalBase     %lu", ExportDirTable->OrdinalBase);
+  CLog::Log(LOGDEBUG, "NumAddrTable    %lu", ExportDirTable->NumAddrTable);
+  CLog::Log(LOGDEBUG, "NumNamePtrs     %lu", ExportDirTable->NumNamePtrs);
+  CLog::Log(LOGDEBUG, "ExportAddressTable_RVA  %04lX", ExportDirTable->ExportAddressTable_RVA);
+  CLog::Log(LOGDEBUG, "NamePointerTable_RVA    %04lX", ExportDirTable->NamePointerTable_RVA);
+  CLog::Log(LOGDEBUG, "OrdinalTable_RVA        %04lX", ExportDirTable->OrdinalTable_RVA);
 
-  CLog::Log(LOGDEBUG, "Public Exports:\n");
-  CLog::Log(LOGDEBUG, "    ordinal hint RVA      name\n");
+  CLog::Log(LOGDEBUG, "Public Exports:");
+  CLog::Log(LOGDEBUG, "    ordinal hint RVA      name");
   for (unsigned int i = 0; i < ExportDirTable->NumNamePtrs; i++)
   {
     char *Name = (char*)RVA2Data(NamePointerTable[i]);
@@ -258,7 +258,7 @@ void DllLoader::PrintExportTable(ExportDirTable_t *ExportDirTable)
     CLog::Log(LOGDEBUG, "          %lu", OrdinalTable[i] + ExportDirTable->OrdinalBase);
     CLog::Log(LOGDEBUG, "    %d", OrdinalTable[i]);
     CLog::Log(LOGDEBUG, " %08lX", ExportAddressTable[OrdinalTable[i]]);
-    CLog::Log(LOGDEBUG, " %s\n", Name);
+    CLog::Log(LOGDEBUG, " %s", Name);
   }
 }
 
@@ -300,7 +300,7 @@ int DllLoader::ResolveImports(void)
           {
             bResult = 0;
             char szBuf[128];
-            CLog::Log(LOGDEBUG,"Unable to resolve ordinal %s %lu\n", Name, *Table&0x7ffffff);
+            CLog::Log(LOGDEBUG,"Unable to resolve ordinal %s %lu", Name, *Table&0x7ffffff);
             sprintf(szBuf, "%lu", *Table&0x7ffffff);
             *Addr = create_dummy_function(Name, szBuf);
             tracker_dll_data_track(this, *Addr);
@@ -321,7 +321,7 @@ int DllLoader::ResolveImports(void)
             *Addr=get_win_function_address(Name, ImpName);
             if(!*Addr)
             {
-              CLog::Log(LOGDEBUG,"Unable to resolve %s %s\n", Name, ImpName);
+              CLog::Log(LOGDEBUG,"Unable to resolve %s %s", Name, ImpName);
               *Addr = create_dummy_function(Name, ImpName);
               tracker_dll_data_track(this, *Addr);
               bResult = 0;
diff --git a/xbmc/cores/DllLoader/SoLoader.cpp b/xbmc/cores/DllLoader/SoLoader.cpp
index 0320b834dcae..9c422e81a200 100644
--- a/xbmc/cores/DllLoader/SoLoader.cpp
+++ b/xbmc/cores/DllLoader/SoLoader.cpp
@@ -34,12 +34,12 @@ bool SoLoader::Load()
   std::string strFileName= CSpecialProtocol::TranslatePath(GetFileName());
   if (strFileName == "xbmc.so")
   {
-    CLog::Log(LOGDEBUG, "Loading Internal Library\n");
+    CLog::Log(LOGDEBUG, "Loading Internal Library");
     m_soHandle = RTLD_DEFAULT;
   }
   else
   {
-    CLog::Log(LOGDEBUG, "Loading: %s\n", strFileName.c_str());
+    CLog::Log(LOGDEBUG, "Loading: %s", strFileName.c_str());
     int flags = RTLD_LAZY;
     m_soHandle = dlopen(strFileName.c_str(), flags);
     if (!m_soHandle)
diff --git a/xbmc/cores/DllLoader/exports/emu_msvcrt.cpp b/xbmc/cores/DllLoader/exports/emu_msvcrt.cpp
index 57937b266e6b..e4d58f75b311 100644
--- a/xbmc/cores/DllLoader/exports/emu_msvcrt.cpp
+++ b/xbmc/cores/DllLoader/exports/emu_msvcrt.cpp
@@ -382,7 +382,7 @@ extern "C"
     if (szLine[strlen(szLine) - 1] != '\n')
       CLog::Log(LOGDEBUG,"  msg: %s", szLine);
     else
-      CLog::Log(LOGDEBUG,"  msg: %s\n", szLine);
+      CLog::Log(LOGDEBUG,"  msg: %s", szLine);
 
     // return a non negative value
     return 0;
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAndroidMediaCodec.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAndroidMediaCodec.cpp
index 067d24479093..272241b2bc3a 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAndroidMediaCodec.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAndroidMediaCodec.cpp
@@ -367,26 +367,26 @@ bool CDVDVideoCodecAndroidMediaCodec::Open(CDVDStreamInfo &hints, CDVDCodecOptio
   // allow only 1 instance here
   if (m_InstanceGuard.exchange(true))
   {
-    CLog::Log(LOGERROR, "CDVDVideoCodecAndroidMediaCodec::Open - InstanceGuard locked\n");
+    CLog::Log(LOGERROR, "CDVDVideoCodecAndroidMediaCodec::Open - InstanceGuard locked");
     return false;
   }
 
   // mediacodec crashes with null size. Trap this...
   if (!hints.width || !hints.height)
   {
-    CLog::Log(LOGERROR, "CDVDVideoCodecAndroidMediaCodec::Open - %s\n", "null size, cannot handle");
+    CLog::Log(LOGERROR, "CDVDVideoCodecAndroidMediaCodec::Open - %s", "null size, cannot handle");
     goto FAIL;
   }
   else if (hints.orientation && m_render_surface && CJNIBase::GetSDKVersion() < 23)
   {
-    CLog::Log(LOGERROR, "CDVDVideoCodecAndroidMediaCodec::Open - %s\n", "Surface does not support orientation before API 23");
+    CLog::Log(LOGERROR, "CDVDVideoCodecAndroidMediaCodec::Open - %s", "Surface does not support orientation before API 23");
     goto FAIL;
   }
   else if (!CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_VIDEOPLAYER_USEMEDIACODEC) &&
            !CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_VIDEOPLAYER_USEMEDIACODECSURFACE))
     goto FAIL;
 
-  CLog::Log(LOGDEBUG, "CDVDVideoCodecAndroidMediaCodec::Open hints: Width %d x Height %d, Fpsrate %d / Fpsscale %d, CodecID %d, Level %d, Profile %d, PTS_invalid %d, Tag %d, Extradata-Size: %d\n",
+  CLog::Log(LOGDEBUG, "CDVDVideoCodecAndroidMediaCodec::Open hints: Width %d x Height %d, Fpsrate %d / Fpsscale %d, CodecID %d, Level %d, Profile %d, PTS_invalid %d, Tag %d, Extradata-Size: %d",
     hints.width, hints.height, hints.fpsrate, hints.fpsscale, hints.codec, hints.level, hints.profile, hints.ptsinvalid, hints.codec_tag, hints.extrasize);
 
   m_render_surface = CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_VIDEOPLAYER_USEMEDIACODECSURFACE);
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/VDPAU.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/VDPAU.cpp
index 858d116d5bf9..e15c475a281f 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/VDPAU.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/VDPAU.cpp
@@ -281,7 +281,7 @@ void CVDPAUContext::SpewHardwareAvailable()  //Copyright (c) 2008 Wladimir J. va
                                 &is_supported, &max_level, &max_macroblocks, &max_width, &max_height);
     if(rv == VDP_STATUS_OK && is_supported)
     {
-      CLog::Log(LOGNOTICE,"%-16s %2i %5i %5i %5i\n", decoder_profile.name,
+      CLog::Log(LOGNOTICE,"%-16s %2i %5i %5i %5i", decoder_profile.name,
                 max_level, max_macroblocks, max_width, max_height);
     }
   }
@@ -1258,7 +1258,7 @@ bool CDecoder::CheckStatus(VdpStatus vdp_st, int line)
 {
   if (vdp_st != VDP_STATUS_OK)
   {
-    CLog::Log(LOGERROR, " (VDPAU) Error: %s(%d) at %s:%d\n", m_vdpauConfig.context->GetProcs().vdp_get_error_string(vdp_st), vdp_st, __FILE__, line);
+    CLog::Log(LOGERROR, " (VDPAU) Error: %s(%d) at %s:%d", m_vdpauConfig.context->GetProcs().vdp_get_error_string(vdp_st), vdp_st, __FILE__, line);
 
     m_ErrorCount++;
 
@@ -2731,7 +2731,7 @@ bool CMixer::CheckStatus(VdpStatus vdp_st, int line)
 {
   if (vdp_st != VDP_STATUS_OK)
   {
-    CLog::Log(LOGERROR, " (VDPAU) Error: %s(%d) at %s:%d\n", m_config.context->GetProcs().vdp_get_error_string(vdp_st), vdp_st, __FILE__, line);
+    CLog::Log(LOGERROR, " (VDPAU) Error: %s(%d) at %s:%d", m_config.context->GetProcs().vdp_get_error_string(vdp_st), vdp_st, __FILE__, line);
     m_vdpError = true;
     return true;
   }
@@ -3365,7 +3365,7 @@ bool COutput::CheckStatus(VdpStatus vdp_st, int line)
 {
   if (vdp_st != VDP_STATUS_OK)
   {
-    CLog::Log(LOGERROR, " (VDPAU) Error: %s(%d) at %s:%d\n", m_config.context->GetProcs().vdp_get_error_string(vdp_st), vdp_st, __FILE__, line);
+    CLog::Log(LOGERROR, " (VDPAU) Error: %s(%d) at %s:%d", m_config.context->GetProcs().vdp_get_error_string(vdp_st), vdp_st, __FILE__, line);
     m_vdpError = true;
     return true;
   }
diff --git a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamNavigator.cpp b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamNavigator.cpp
index 0a9e2176c0bc..33e8b1034978 100644
--- a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamNavigator.cpp
+++ b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamNavigator.cpp
@@ -112,7 +112,7 @@ bool CDVDInputStreamNavigator::Open()
     m_pstream.reset(new CDVDInputStreamFile(m_item, XFILE::READ_TRUNCATED | XFILE::READ_BITRATE | XFILE::READ_CHUNKED));
     if (!m_pstream->Open() || m_dll.dvdnav_open_stream(&m_dvdnav, m_pstream.get(), &m_dvdnav_stream_cb) != DVDNAV_STATUS_OK)
     {
-      CLog::Log(LOGERROR, "Error opening image file or Error on dvdnav_open_stream\n");
+      CLog::Log(LOGERROR, "Error opening image file or Error on dvdnav_open_stream");
       Close();
       return false;
     }
@@ -120,7 +120,7 @@ bool CDVDInputStreamNavigator::Open()
   else
   if (m_dll.dvdnav_open(&m_dvdnav, path.c_str()) != DVDNAV_STATUS_OK)
   {
-    CLog::Log(LOGERROR,"Error on dvdnav_open\n");
+    CLog::Log(LOGERROR,"Error on dvdnav_open");
     Close();
     return false;
   }
@@ -163,7 +163,7 @@ bool CDVDInputStreamNavigator::Open()
   // set default language settings
   if (m_dll.dvdnav_menu_language_select(m_dvdnav, (char*)language_menu) != DVDNAV_STATUS_OK)
   {
-    CLog::Log(LOGERROR, "Error on setting default menu language: %s\n", m_dll.dvdnav_err_to_string(m_dvdnav));
+    CLog::Log(LOGERROR, "Error on setting default menu language: %s", m_dll.dvdnav_err_to_string(m_dvdnav));
     CLog::Log(LOGERROR, "Defaulting to \"en\"");
     //! @bug libdvdnav isn't const correct
     m_dll.dvdnav_menu_language_select(m_dvdnav, const_cast<char*>("en"));
@@ -171,7 +171,7 @@ bool CDVDInputStreamNavigator::Open()
 
   if (m_dll.dvdnav_audio_language_select(m_dvdnav, (char*)language_audio) != DVDNAV_STATUS_OK)
   {
-    CLog::Log(LOGERROR, "Error on setting default audio language: %s\n", m_dll.dvdnav_err_to_string(m_dvdnav));
+    CLog::Log(LOGERROR, "Error on setting default audio language: %s", m_dll.dvdnav_err_to_string(m_dvdnav));
     CLog::Log(LOGERROR, "Defaulting to \"en\"");
     //! @bug libdvdnav isn't const correct
     m_dll.dvdnav_audio_language_select(m_dvdnav, const_cast<char*>("en"));
@@ -179,7 +179,7 @@ bool CDVDInputStreamNavigator::Open()
 
   if (m_dll.dvdnav_spu_language_select(m_dvdnav, (char*)language_subtitle) != DVDNAV_STATUS_OK)
   {
-    CLog::Log(LOGERROR, "Error on setting default subtitle language: %s\n", m_dll.dvdnav_err_to_string(m_dvdnav));
+    CLog::Log(LOGERROR, "Error on setting default subtitle language: %s", m_dll.dvdnav_err_to_string(m_dvdnav));
     CLog::Log(LOGERROR, "Defaulting to \"en\"");
     //! @bug libdvdnav isn't const correct
     m_dll.dvdnav_spu_language_select(m_dvdnav, const_cast<char*>("en"));
@@ -188,7 +188,7 @@ bool CDVDInputStreamNavigator::Open()
   // set read ahead cache usage
   if (m_dll.dvdnav_set_readahead_flag(m_dvdnav, 1) != DVDNAV_STATUS_OK)
   {
-    CLog::Log(LOGERROR,"Error on dvdnav_set_readahead_flag: %s\n", m_dll.dvdnav_err_to_string(m_dvdnav));
+    CLog::Log(LOGERROR,"Error on dvdnav_set_readahead_flag: %s", m_dll.dvdnav_err_to_string(m_dvdnav));
     Close();
     return false;
   }
@@ -197,7 +197,7 @@ bool CDVDInputStreamNavigator::Open()
   // whole feature instead of just relatively to the current chapter
   if (m_dll.dvdnav_set_PGC_positioning_flag(m_dvdnav, 1) != DVDNAV_STATUS_OK)
   {
-    CLog::Log(LOGERROR,"Error on dvdnav_set_PGC_positioning_flag: %s\n", m_dll.dvdnav_err_to_string(m_dvdnav));
+    CLog::Log(LOGERROR,"Error on dvdnav_set_PGC_positioning_flag: %s", m_dll.dvdnav_err_to_string(m_dvdnav));
     Close();
     return false;
   }
@@ -216,10 +216,10 @@ bool CDVDInputStreamNavigator::Open()
     // first try title menu
     if(m_dll.dvdnav_menu_call(m_dvdnav, DVD_MENU_Title) != DVDNAV_STATUS_OK)
     {
-      CLog::Log(LOGERROR,"Error on dvdnav_menu_call(Title): %s\n", m_dll.dvdnav_err_to_string(m_dvdnav));
+      CLog::Log(LOGERROR,"Error on dvdnav_menu_call(Title): %s", m_dll.dvdnav_err_to_string(m_dvdnav));
       // next try root menu
       if(m_dll.dvdnav_menu_call(m_dvdnav, DVD_MENU_Root) != DVDNAV_STATUS_OK )
-        CLog::Log(LOGERROR,"Error on dvdnav_menu_call(Root): %s\n", m_dll.dvdnav_err_to_string(m_dvdnav));
+        CLog::Log(LOGERROR,"Error on dvdnav_menu_call(Root): %s", m_dll.dvdnav_err_to_string(m_dvdnav));
     }
   }
 
@@ -245,7 +245,7 @@ void CDVDInputStreamNavigator::Close()
   // finish off by closing the dvdnav device
   if (m_dll.dvdnav_close(m_dvdnav) != DVDNAV_STATUS_OK)
   {
-    CLog::Log(LOGERROR,"Error on dvdnav_close: %s\n", m_dll.dvdnav_err_to_string(m_dvdnav));
+    CLog::Log(LOGERROR,"Error on dvdnav_close: %s", m_dll.dvdnav_err_to_string(m_dvdnav));
     return ;
   }
 
@@ -333,7 +333,7 @@ int CDVDInputStreamNavigator::ProcessBlock(uint8_t* dest_buffer, int* read)
 
   if (result == DVDNAV_STATUS_ERR)
   {
-    CLog::Log(LOGERROR,"Error getting next block: %s\n", m_dll.dvdnav_err_to_string(m_dvdnav));
+    CLog::Log(LOGERROR,"Error getting next block: %s", m_dll.dvdnav_err_to_string(m_dvdnav));
     m_bEOF = true;
     return NAVRESULT_ERROR;
   }
@@ -508,7 +508,7 @@ int CDVDInputStreamNavigator::ProcessBlock(uint8_t* dest_buffer, int* read)
           int entries = m_dll.dvdnav_describe_title_chapters(m_dvdnav, m_iTitle, &times, &duration);
 
           if (entries != m_iPartCount)
-            CLog::Log(LOGDEBUG, "%s - Number of chapters/positions differ: Chapters %d, positions %d\n", __FUNCTION__, m_iPartCount, entries);
+            CLog::Log(LOGDEBUG, "%s - Number of chapters/positions differ: Chapters %d, positions %d", __FUNCTION__, m_iPartCount, entries);
 
           if (times)
           {
@@ -521,8 +521,8 @@ int CDVDInputStreamNavigator::ProcessBlock(uint8_t* dest_buffer, int* read)
             m_dll.dvdnav_free(times);
           }
         }
-        CLog::Log(LOGDEBUG, "%s - Cell change: Title %d, Chapter %d\n", __FUNCTION__, m_iTitle, m_iPart);
-        CLog::Log(LOGDEBUG, "%s - At position %.0f%% inside the feature\n", __FUNCTION__, 100 * (double)pos / (double)len);
+        CLog::Log(LOGDEBUG, "%s - Cell change: Title %d, Chapter %d", __FUNCTION__, m_iTitle, m_iPart);
+        CLog::Log(LOGDEBUG, "%s - At position %.0f%% inside the feature", __FUNCTION__, 100 * (double)pos / (double)len);
         //Get total segment time
 
         dvdnav_cell_change_event_t* cell_change_event = reinterpret_cast<dvdnav_cell_change_event_t*>(buf);
@@ -617,7 +617,7 @@ int CDVDInputStreamNavigator::ProcessBlock(uint8_t* dest_buffer, int* read)
 
     default:
       {
-        CLog::Log(LOGDEBUG,"CDVDInputStreamNavigator: Unknown event (%i)\n", m_lastevent);
+        CLog::Log(LOGDEBUG,"CDVDInputStreamNavigator: Unknown event (%i)", m_lastevent);
       }
       break;
 
diff --git a/xbmc/cores/VideoPlayer/VideoPlayer.cpp b/xbmc/cores/VideoPlayer/VideoPlayer.cpp
index 68b11d6acc22..36ef0c40c3e2 100644
--- a/xbmc/cores/VideoPlayer/VideoPlayer.cpp
+++ b/xbmc/cores/VideoPlayer/VideoPlayer.cpp
@@ -4009,7 +4009,7 @@ int CVideoPlayer::OnDiscNavResult(void* pData, int iMessage)
       {
         //dvdnav_highlight_event_t* pInfo = (dvdnav_highlight_event_t*)pData;
         int iButton = pStream->GetCurrentButton();
-        CLog::Log(LOGDEBUG, "DVDNAV_HIGHLIGHT: Highlight button %d\n", iButton);
+        CLog::Log(LOGDEBUG, "DVDNAV_HIGHLIGHT: Highlight button %d", iButton);
         m_VideoPlayerSubtitle->UpdateOverlayInfo(std::static_pointer_cast<CDVDInputStreamNavigator>(m_pInputStream), LIBDVDNAV_BUTTON_NORMAL);
       }
       break;
diff --git a/xbmc/cores/VideoPlayer/VideoPlayerRadioRDS.cpp b/xbmc/cores/VideoPlayer/VideoPlayerRadioRDS.cpp
index d90d2ec2843d..cafb41fe773c 100644
--- a/xbmc/cores/VideoPlayer/VideoPlayerRadioRDS.cpp
+++ b/xbmc/cores/VideoPlayer/VideoPlayerRadioRDS.cpp
@@ -1078,7 +1078,7 @@ unsigned int CDVDRadioRDSData::DecodeRT(uint8_t *msgElement, unsigned int len)
   unsigned int msgLength = msgElement[UECP_ME_MEL];
   if (msgLength > len-2)
   {
-    CLog::Log(LOGERROR, "Radio UECP (RDS) - %s - RT-Error: Length=0 or not correct (MFL= %d, MEL= %d)\n", __FUNCTION__, len, msgLength);
+    CLog::Log(LOGERROR, "Radio UECP (RDS) - %s - RT-Error: Length=0 or not correct (MFL= %d, MEL= %d)", __FUNCTION__, len, msgLength);
     m_UECPDataDeadBreak = true;
     return 0;
   }
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/ColorManager.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/ColorManager.cpp
index 5d7dce0d86a0..60c44b329012 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/ColorManager.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/ColorManager.cpp
@@ -147,7 +147,7 @@ bool CColorManager::Get3dLutSize(CMS_DATA_FORMAT format, int *clutSize, int *dat
     return true;
   }
   default:
-    CLog::Log(LOGDEBUG, "ColorManager: unknown CMS mode %d\n", cmsmode);
+    CLog::Log(LOGDEBUG, "ColorManager: unknown CMS mode %d", cmsmode);
     return false;
   }
 }
@@ -156,11 +156,11 @@ bool CColorManager::GetVideo3dLut(int videoFlags, int *cmsToken, CMS_DATA_FORMAT
 {
   const std::shared_ptr<CSettings> settings = CServiceBroker::GetSettingsComponent()->GetSettings();
   CMS_PRIMARIES videoPrimaries = videoFlagsToPrimaries(videoFlags);
-  CLog::Log(LOGDEBUG, "ColorManager: video primaries: %d\n", (int)videoPrimaries);
+  CLog::Log(LOGDEBUG, "ColorManager: video primaries: %d", (int)videoPrimaries);
   switch (settings->GetInt("videoscreen.cmsmode"))
   {
   case CMS_MODE_3DLUT:
-    CLog::Log(LOGDEBUG, "ColorManager: CMS_MODE_3DLUT\n");
+    CLog::Log(LOGDEBUG, "ColorManager: CMS_MODE_3DLUT");
     m_cur3dlutFile = settings->GetString("videoscreen.cms3dlut");
     if (!Load3dLut(m_cur3dlutFile, format, clutSize, clutData))
       return false;
@@ -168,7 +168,7 @@ bool CColorManager::GetVideo3dLut(int videoFlags, int *cmsToken, CMS_DATA_FORMAT
     break;
 
   case CMS_MODE_PROFILE:
-    CLog::Log(LOGDEBUG, "ColorManager: CMS_MODE_PROFILE\n");
+    CLog::Log(LOGDEBUG, "ColorManager: CMS_MODE_PROFILE");
 #if defined(HAVE_LCMS2)
     {
       // check if display profile is not loaded, or has changed
@@ -184,7 +184,7 @@ bool CColorManager::GetVideo3dLut(int videoFlags, int *cmsToken, CMS_DATA_FORMAT
         // detect blackpoint
         if (cmsDetectBlackPoint(&m_blackPoint, m_hProfile, INTENT_PERCEPTUAL, 0))
         {
-          CLog::Log(LOGDEBUG, "ColorManager: black point: %f\n", m_blackPoint.Y);
+          CLog::Log(LOGDEBUG, "ColorManager: black point: %f", m_blackPoint.Y);
         }
         m_curIccProfile = settings->GetString("videoscreen.displayprofile");
       }
@@ -198,10 +198,10 @@ bool CColorManager::GetVideo3dLut(int videoFlags, int *cmsToken, CMS_DATA_FORMAT
       // create source profile
       m_curIccWhitePoint = static_cast<CMS_WHITEPOINT>(settings->GetInt("videoscreen.cmswhitepoint"));
       m_curIccPrimaries = static_cast<CMS_PRIMARIES>(settings->GetInt("videoscreen.cmsprimaries"));
-      CLog::Log(LOGDEBUG, "ColorManager: primaries setting: %d\n", (int)m_curIccPrimaries);
+      CLog::Log(LOGDEBUG, "ColorManager: primaries setting: %d", (int)m_curIccPrimaries);
       if (m_curIccPrimaries == CMS_PRIMARIES_AUTO)
         m_curIccPrimaries = videoPrimaries;
-      CLog::Log(LOGDEBUG, "ColorManager: source profile primaries: %d\n", (int)m_curIccPrimaries);
+      CLog::Log(LOGDEBUG, "ColorManager: source profile primaries: %d", (int)m_curIccPrimaries);
       cmsHPROFILE sourceProfile = CreateSourceProfile(m_curIccPrimaries, gammaCurve, m_curIccWhitePoint);
 
       // link profiles
@@ -228,7 +228,7 @@ bool CColorManager::GetVideo3dLut(int videoFlags, int *cmsToken, CMS_DATA_FORMAT
 #endif  //defined(HAVE_LCMS2)
 
   default:
-    CLog::Log(LOGDEBUG, "ColorManager: unknown CMS mode %d\n", settings->GetInt("videoscreen.cmsmode"));
+    CLog::Log(LOGDEBUG, "ColorManager: unknown CMS mode %d", settings->GetInt("videoscreen.cmsmode"));
     return false;
   }
 
@@ -419,7 +419,7 @@ cmsHPROFILE CColorManager::LoadIccDisplayProfile(const std::string filename)
   hProfile = cmsOpenProfileFromFile(filename.c_str(), "r");
   if (!hProfile)
   {
-    CLog::Log(LOGERROR, "ICC profile not found\n");
+    CLog::Log(LOGERROR, "ICC profile not found");
   }
   return hProfile;
 }
@@ -467,7 +467,7 @@ cmsToneCurve* CColorManager::CreateToneCurve(CMS_TRC_TYPE gammaType, float gamma
         }
       }
       gammaValue = gammaGuess;
-      CLog::Log(LOGINFO, "calculated technical gamma %0.3f (50%% target %0.4f, output %0.4f)\n",
+      CLog::Log(LOGINFO, "calculated technical gamma %0.3f (50%% target %0.4f, output %0.4f)",
         gammaValue,
         TARGET(effectiveGamma),
         HALFPT(blackPoint.Y, gammaValue));
@@ -514,7 +514,7 @@ cmsToneCurve* CColorManager::CreateToneCurve(CMS_TRC_TYPE gammaType, float gamma
     break;
 
   default:
-    CLog::Log(LOGERROR, "gamma type %d not implemented\n", gammaType);
+    CLog::Log(LOGERROR, "gamma type %d not implemented", gammaType);
   }
 
   cmsToneCurve* result = cmsBuildTabulatedToneCurveFloat(0,
@@ -601,7 +601,7 @@ void CColorManager::Create3dLut(cmsHTRANSFORM transform, CMS_DATA_FORMAT format,
   for (int y=0; y<lutResolution; y+=1)
   {
     int index = components*(y*lutResolution*lutResolution + y*lutResolution + y);
-    CLog::Log(LOGDEBUG, "  %d (%d): %d %d %d\n",
+    CLog::Log(LOGDEBUG, "  %d (%d): %d %d %d",
         (int)round(y * 255 / (lutResolution-1.0)), y,
         (int)round(clutData[index+0]),
         (int)round(clutData[index+1]),
diff --git a/xbmc/cores/omxplayer/OMXImage.cpp b/xbmc/cores/omxplayer/OMXImage.cpp
index d43404af743b..1e31bf8824ac 100644
--- a/xbmc/cores/omxplayer/OMXImage.cpp
+++ b/xbmc/cores/omxplayer/OMXImage.cpp
@@ -207,7 +207,7 @@ bool COMXImage::CreateThumb(const std::string& srcFile, unsigned int maxHeight,
       okay = true;
     }
     else
-      CLog::Log(LOGERROR, "%s: can't open output file: %s\n", __func__, destFile.c_str());
+      CLog::Log(LOGERROR, "%s: can't open output file: %s", __func__, destFile.c_str());
   }
   return okay;
 }
@@ -591,7 +591,7 @@ OMX_IMAGE_CODINGTYPE COMXImageFile::GetCodingType(unsigned int &width, unsigned
 
   if(!m_image_size)
   {
-    CLog::Log(LOGERROR, "%s::%s %s m_image_size unexpected (%lu)\n", CLASSNAME, __func__, GetFilename(), m_image_size);
+    CLog::Log(LOGERROR, "%s::%s %s m_image_size unexpected (%lu)", CLASSNAME, __func__, GetFilename(), m_image_size);
     return OMX_IMAGE_CodingMax;
   }
 
@@ -841,7 +841,7 @@ OMX_IMAGE_CODINGTYPE COMXImageFile::GetCodingType(unsigned int &width, unsigned
     }
   }
   else
-    CLog::Log(LOGERROR, "%s::%s error unsupported image format\n", CLASSNAME, __func__);
+    CLog::Log(LOGERROR, "%s::%s error unsupported image format", CLASSNAME, __func__);
 
   // apply input orientation
   m_orientation = m_orientation ^ orientation;
@@ -850,13 +850,13 @@ OMX_IMAGE_CODINGTYPE COMXImageFile::GetCodingType(unsigned int &width, unsigned
 
   if(progressive)
   {
-    CLog::Log(LOGWARNING, "%s::%s progressive images not supported by decoder\n", CLASSNAME, __func__);
+    CLog::Log(LOGWARNING, "%s::%s progressive images not supported by decoder", CLASSNAME, __func__);
     eCompressionFormat = OMX_IMAGE_CodingMax;
   }
 
   if(components > 3)
   {
-    CLog::Log(LOGWARNING, "%s::%s Only YUV images are supported by decoder\n", CLASSNAME, __func__);
+    CLog::Log(LOGWARNING, "%s::%s Only YUV images are supported by decoder", CLASSNAME, __func__);
     eCompressionFormat = OMX_IMAGE_CodingMax;
   }
 
@@ -870,7 +870,7 @@ bool COMXImageFile::ReadFile(const std::string& inputFile, int orientation)
   m_filename = CURL::GetRedacted(inputFile);
   if(!m_pFile.Open(inputFile, 0))
   {
-    CLog::Log(LOGERROR, "%s::%s %s not found\n", CLASSNAME, __func__, GetFilename());
+    CLog::Log(LOGERROR, "%s::%s %s not found", CLASSNAME, __func__, GetFilename());
     return false;
   }
 
@@ -882,13 +882,13 @@ bool COMXImageFile::ReadFile(const std::string& inputFile, int orientation)
 
   if(!m_image_size)
   {
-    CLog::Log(LOGERROR, "%s::%s %s m_image_size zero\n", CLASSNAME, __func__, GetFilename());
+    CLog::Log(LOGERROR, "%s::%s %s m_image_size zero", CLASSNAME, __func__, GetFilename());
     return false;
   }
   m_image_buffer = (uint8_t *)malloc(m_image_size);
   if(!m_image_buffer)
   {
-    CLog::Log(LOGERROR, "%s::%s %s m_image_buffer null (%lu)\n", CLASSNAME, __func__, GetFilename(), m_image_size);
+    CLog::Log(LOGERROR, "%s::%s %s m_image_buffer null (%lu)", CLASSNAME, __func__, GetFilename(), m_image_size);
     return false;
   }
 
@@ -898,7 +898,7 @@ bool COMXImageFile::ReadFile(const std::string& inputFile, int orientation)
   OMX_IMAGE_CODINGTYPE eCompressionFormat = GetCodingType(m_width, m_height, orientation);
   if(eCompressionFormat != OMX_IMAGE_CodingJPEG || m_width < 1 || m_height < 1)
   {
-    CLog::Log(LOGDEBUG, "%s::%s %s GetCodingType=0x%x (%dx%d)\n", CLASSNAME, __func__, GetFilename(), eCompressionFormat, m_width, m_height);
+    CLog::Log(LOGDEBUG, "%s::%s %s GetCodingType=0x%x (%dx%d)", CLASSNAME, __func__, GetFilename(), eCompressionFormat, m_width, m_height);
     return false;
   }
 
@@ -976,13 +976,13 @@ bool COMXImageDec::HandlePortSettingChange(unsigned int resize_width, unsigned i
     omx_err = m_omx_tunnel_decode.Establish();
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s m_omx_tunnel_decode.Establish\n", CLASSNAME, __func__);
+      CLog::Log(LOGERROR, "%s::%s m_omx_tunnel_decode.Establish", CLASSNAME, __func__);
       return false;
     }
     omx_err = m_omx_resize.WaitForEvent(OMX_EventPortSettingsChanged);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s m_omx_resize.WaitForEvent=%x\n", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s m_omx_resize.WaitForEvent=%x", CLASSNAME, __func__, omx_err);
       return false;
     }
 
@@ -1001,7 +1001,7 @@ bool COMXImageDec::HandlePortSettingChange(unsigned int resize_width, unsigned i
     omx_err = m_omx_resize.SetParameter(OMX_IndexParamPortDefinition, &port_def);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s m_omx_resize.SetParameter result(0x%x)\n", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s m_omx_resize.SetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
       return false;
     }
 
@@ -1010,7 +1010,7 @@ bool COMXImageDec::HandlePortSettingChange(unsigned int resize_width, unsigned i
     omx_err = m_omx_resize.GetParameter(OMX_IndexParamPortDefinition, &m_decoded_format);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s m_omx_resize.GetParameter result(0x%x)\n", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s m_omx_resize.GetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
       return false;
     }
     assert(m_decoded_format.nBufferCountActual == 1);
@@ -1018,13 +1018,13 @@ bool COMXImageDec::HandlePortSettingChange(unsigned int resize_width, unsigned i
     omx_err = m_omx_resize.AllocOutputBuffers();
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s m_omx_resize.AllocOutputBuffers result(0x%x)\n", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s m_omx_resize.AllocOutputBuffers result(0x%x)", CLASSNAME, __func__, omx_err);
       return false;
     }
     omx_err = m_omx_resize.SetStateForComponent(OMX_StateExecuting);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s m_omx_resize.SetStateForComponent result(0x%x)\n", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s m_omx_resize.SetStateForComponent result(0x%x)", CLASSNAME, __func__, omx_err);
       return false;
     }
 
@@ -1032,14 +1032,14 @@ bool COMXImageDec::HandlePortSettingChange(unsigned int resize_width, unsigned i
 
     if(!m_decoded_buffer)
     {
-      CLog::Log(LOGERROR, "%s::%s no output buffer\n", CLASSNAME, __func__);
+      CLog::Log(LOGERROR, "%s::%s no output buffer", CLASSNAME, __func__);
       return false;
     }
 
     omx_err = m_omx_resize.FillThisBuffer(m_decoded_buffer);
     if(omx_err != OMX_ErrorNone)
      {
-      CLog::Log(LOGERROR, "%s::%s m_omx_resize FillThisBuffer result(0x%x)\n", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s m_omx_resize FillThisBuffer result(0x%x)", CLASSNAME, __func__, omx_err);
       m_omx_resize.DecoderFillBufferDone(m_omx_resize.GetComponent(), m_decoded_buffer);
       return false;
     }
@@ -1048,7 +1048,7 @@ bool COMXImageDec::HandlePortSettingChange(unsigned int resize_width, unsigned i
   else
   {
     // a little surprising, make a note
-    CLog::Log(LOGDEBUG, "%s::%s m_omx_resize second port changed event\n", CLASSNAME, __func__);
+    CLog::Log(LOGDEBUG, "%s::%s m_omx_resize second port changed event", CLASSNAME, __func__);
     m_omx_decoder.DisablePort(m_omx_decoder.GetOutputPort(), true);
     m_omx_resize.DisablePort(m_omx_resize.GetInputPort(), true);
 
@@ -1063,7 +1063,7 @@ bool COMXImageDec::HandlePortSettingChange(unsigned int resize_width, unsigned i
     omx_err = m_omx_resize.WaitForEvent(OMX_EventPortSettingsChanged);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s m_omx_resize.WaitForEvent=%x\n", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s m_omx_resize.WaitForEvent=%x", CLASSNAME, __func__, omx_err);
       return false;
     }
     m_omx_decoder.EnablePort(m_omx_decoder.GetOutputPort(), true);
@@ -1080,19 +1080,19 @@ bool COMXImageDec::Decode(const uint8_t *demuxer_content, unsigned demuxer_bytes
 
   if(!demuxer_content || !demuxer_bytes)
   {
-    CLog::Log(LOGERROR, "%s::%s no input buffer\n", CLASSNAME, __func__);
+    CLog::Log(LOGERROR, "%s::%s no input buffer", CLASSNAME, __func__);
     return false;
   }
 
   if(!m_omx_decoder.Initialize("OMX.broadcom.image_decode", OMX_IndexParamImageInit))
   {
-    CLog::Log(LOGERROR, "%s::%s error m_omx_decoder.Initialize\n", CLASSNAME, __func__);
+    CLog::Log(LOGERROR, "%s::%s error m_omx_decoder.Initialize", CLASSNAME, __func__);
     return false;
   }
 
   if(!m_omx_resize.Initialize("OMX.broadcom.resize", OMX_IndexParamImageInit))
   {
-    CLog::Log(LOGERROR, "%s::%s error m_omx_resize.Initialize\n", CLASSNAME, __func__);
+    CLog::Log(LOGERROR, "%s::%s error m_omx_resize.Initialize", CLASSNAME, __func__);
     return false;
   }
 
@@ -1104,7 +1104,7 @@ bool COMXImageDec::Decode(const uint8_t *demuxer_content, unsigned demuxer_bytes
   omx_err = m_omx_decoder.GetParameter(OMX_IndexParamPortDefinition, &portParam);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s error GetParameter:OMX_IndexParamPortDefinition omx_err(0x%08x)\n", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s error GetParameter:OMX_IndexParamPortDefinition omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
     return false;
   }
 
@@ -1115,7 +1115,7 @@ bool COMXImageDec::Decode(const uint8_t *demuxer_content, unsigned demuxer_bytes
   omx_err = m_omx_decoder.SetParameter(OMX_IndexParamPortDefinition, &portParam);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s error SetParameter:OMX_IndexParamPortDefinition omx_err(0x%08x)\n", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s error SetParameter:OMX_IndexParamPortDefinition omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
     return false;
   }
 
@@ -1129,7 +1129,7 @@ bool COMXImageDec::Decode(const uint8_t *demuxer_content, unsigned demuxer_bytes
   omx_err = m_omx_decoder.SetStateForComponent(OMX_StateExecuting);
   if (omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s m_omx_decoder.SetStateForComponent result(0x%x)\n", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s m_omx_decoder.SetStateForComponent result(0x%x)", CLASSNAME, __func__, omx_err);
     return false;
   }
 
@@ -1156,7 +1156,7 @@ bool COMXImageDec::Decode(const uint8_t *demuxer_content, unsigned demuxer_bytes
        omx_err = m_omx_decoder.EmptyThisBuffer(omx_buffer);
        if (omx_err != OMX_ErrorNone)
        {
-         CLog::Log(LOGERROR, "%s::%s OMX_EmptyThisBuffer() failed with result(0x%x)\n", CLASSNAME, __func__, omx_err);
+         CLog::Log(LOGERROR, "%s::%s OMX_EmptyThisBuffer() failed with result(0x%x)", CLASSNAME, __func__, omx_err);
          m_omx_decoder.DecoderEmptyBufferDone(m_omx_decoder.GetComponent(), omx_buffer);
          return false;
        }
@@ -1171,7 +1171,7 @@ bool COMXImageDec::Decode(const uint8_t *demuxer_content, unsigned demuxer_bytes
     {
       if (!HandlePortSettingChange(width, height, stride))
       {
-        CLog::Log(LOGERROR, "%s::%s HandlePortSettingChange() failed\n", CLASSNAME, __func__);
+        CLog::Log(LOGERROR, "%s::%s HandlePortSettingChange() failed", CLASSNAME, __func__);
         return false;
       }
     }
@@ -1182,7 +1182,7 @@ bool COMXImageDec::Decode(const uint8_t *demuxer_content, unsigned demuxer_bytes
     }
     else if(timeout || omx_err != OMX_ErrorTimeout)
     {
-      CLog::Log(LOGERROR, "%s::%s WaitForEvent:OMX_EventPortSettingsChanged failed (%x)\n", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s WaitForEvent:OMX_EventPortSettingsChanged failed (%x)", CLASSNAME, __func__, omx_err);
       return false;
     }
   }
@@ -1190,7 +1190,7 @@ bool COMXImageDec::Decode(const uint8_t *demuxer_content, unsigned demuxer_bytes
   omx_err = m_omx_resize.WaitForOutputDone(1000);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s m_omx_resize.WaitForOutputDone result(0x%x)\n", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s m_omx_resize.WaitForOutputDone result(0x%x)", CLASSNAME, __func__, omx_err);
     return false;
   }
 
@@ -1253,13 +1253,13 @@ bool COMXImageEnc::Encode(unsigned char *buffer, int size, unsigned width, unsig
 
   if (!buffer || !size)
   {
-    CLog::Log(LOGERROR, "%s::%s error no buffer\n", CLASSNAME, __func__);
+    CLog::Log(LOGERROR, "%s::%s error no buffer", CLASSNAME, __func__);
     return false;
   }
 
   if(!m_omx_encoder.Initialize("OMX.broadcom.image_encode", OMX_IndexParamImageInit))
   {
-    CLog::Log(LOGERROR, "%s::%s error m_omx_encoder.Initialize\n", CLASSNAME, __func__);
+    CLog::Log(LOGERROR, "%s::%s error m_omx_encoder.Initialize", CLASSNAME, __func__);
     return false;
   }
 
@@ -1270,7 +1270,7 @@ bool COMXImageEnc::Encode(unsigned char *buffer, int size, unsigned width, unsig
   omx_err = m_omx_encoder.GetParameter(OMX_IndexParamPortDefinition, &port_def);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.GetParameter result(0x%x)\n", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.GetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
     return false;
   }
 
@@ -1285,7 +1285,7 @@ bool COMXImageEnc::Encode(unsigned char *buffer, int size, unsigned width, unsig
   omx_err = m_omx_encoder.SetParameter(OMX_IndexParamPortDefinition, &port_def);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.SetParameter result(0x%x)\n", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.SetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
     return false;
   }
 
@@ -1295,7 +1295,7 @@ bool COMXImageEnc::Encode(unsigned char *buffer, int size, unsigned width, unsig
   omx_err = m_omx_encoder.GetParameter(OMX_IndexParamPortDefinition, &port_def);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.GetParameter result(0x%x)\n", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.GetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
     return false;
   }
 
@@ -1310,7 +1310,7 @@ bool COMXImageEnc::Encode(unsigned char *buffer, int size, unsigned width, unsig
   omx_err = m_omx_encoder.SetParameter(OMX_IndexParamPortDefinition, &port_def);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.SetParameter result(0x%x)\n", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.SetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
     return false;
   }
 
@@ -1322,7 +1322,7 @@ bool COMXImageEnc::Encode(unsigned char *buffer, int size, unsigned width, unsig
   omx_err = m_omx_encoder.SetParameter(OMX_IndexParamQFactor, &qfactor);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.SetParameter OMX_IndexParamQFactor result(0x%x)\n", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.SetParameter OMX_IndexParamQFactor result(0x%x)", CLASSNAME, __func__, omx_err);
     return false;
   }
 
@@ -1336,14 +1336,14 @@ bool COMXImageEnc::Encode(unsigned char *buffer, int size, unsigned width, unsig
   omx_err = m_omx_encoder.AllocOutputBuffers();
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.AllocOutputBuffers result(0x%x)\n", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.AllocOutputBuffers result(0x%x)", CLASSNAME, __func__, omx_err);
     return false;
   }
 
   omx_err = m_omx_encoder.SetStateForComponent(OMX_StateExecuting);
   if (omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.SetStateForComponent result(0x%x)\n", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.SetStateForComponent result(0x%x)", CLASSNAME, __func__, omx_err);
     return false;
   }
 
@@ -1375,7 +1375,7 @@ bool COMXImageEnc::Encode(unsigned char *buffer, int size, unsigned width, unsig
     omx_err = m_omx_encoder.EmptyThisBuffer(omx_buffer);
     if (omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s OMX_EmptyThisBuffer() failed with result(0x%x)\n", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s OMX_EmptyThisBuffer() failed with result(0x%x)", CLASSNAME, __func__, omx_err);
       m_omx_encoder.DecoderEmptyBufferDone(m_omx_encoder.GetComponent(), omx_buffer);
       break;
     }
@@ -1385,21 +1385,21 @@ bool COMXImageEnc::Encode(unsigned char *buffer, int size, unsigned width, unsig
 
   if(!m_encoded_buffer)
   {
-    CLog::Log(LOGERROR, "%s::%s no output buffer\n", CLASSNAME, __func__);
+    CLog::Log(LOGERROR, "%s::%s no output buffer", CLASSNAME, __func__);
     return false;
   }
 
   omx_err = m_omx_encoder.FillThisBuffer(m_encoded_buffer);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.FillThisBuffer result(0x%x)\n", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.FillThisBuffer result(0x%x)", CLASSNAME, __func__, omx_err);
     m_omx_encoder.DecoderFillBufferDone(m_omx_encoder.GetComponent(), m_encoded_buffer);
     return false;
   }
   omx_err = m_omx_encoder.WaitForOutputDone(2000);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.WaitForOutputDone result(0x%x)\n", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.WaitForOutputDone result(0x%x)", CLASSNAME, __func__, omx_err);
     return false;
   }
 
@@ -1407,7 +1407,7 @@ bool COMXImageEnc::Encode(unsigned char *buffer, int size, unsigned width, unsig
   omx_err = m_omx_encoder.GetParameter(OMX_IndexParamPortDefinition, &m_encoded_format);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.GetParameter result(0x%x)\n", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.GetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
     return false;
   }
 
@@ -1422,20 +1422,20 @@ bool COMXImageEnc::CreateThumbnailFromSurface(unsigned char* buffer, unsigned in
 {
   if(format != XB_FMT_A8R8G8B8 || !buffer)
   {
-    CLog::Log(LOGDEBUG, "%s::%s : %s failed format=0x%x\n", CLASSNAME, __func__, destFile.c_str(), format);
+    CLog::Log(LOGDEBUG, "%s::%s : %s failed format=0x%x", CLASSNAME, __func__, destFile.c_str(), format);
     return false;
   }
 
   if(!Encode(buffer, height * pitch, width, height, pitch))
   {
-    CLog::Log(LOGDEBUG, "%s::%s : %s encode failed\n", CLASSNAME, __func__, destFile.c_str());
+    CLog::Log(LOGDEBUG, "%s::%s : %s encode failed", CLASSNAME, __func__, destFile.c_str());
     return false;
   }
 
   XFILE::CFile file;
   if (file.OpenForWrite(destFile, true))
   {
-    CLog::Log(LOGDEBUG, "%s::%s : %s width %d height %d\n", CLASSNAME, __func__, destFile.c_str(), width, height);
+    CLog::Log(LOGDEBUG, "%s::%s : %s width %d height %d", CLASSNAME, __func__, destFile.c_str(), width, height);
 
     file.Write(m_encoded_buffer->pBuffer, m_encoded_buffer->nFilledLen);
     file.Close();
@@ -1520,7 +1520,7 @@ bool COMXImageReEnc::HandlePortSettingChange(unsigned int resize_width, unsigned
     m_omx_decoder.GetParameter(OMX_IndexParamPortDefinition, &port_def);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s m_omx_decoder.GetParameter result(0x%x)\n", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s m_omx_decoder.GetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
       return false;
     }
 
@@ -1528,7 +1528,7 @@ bool COMXImageReEnc::HandlePortSettingChange(unsigned int resize_width, unsigned
     {
       if(!m_omx_resize.Initialize("OMX.broadcom.resize", OMX_IndexParamImageInit))
       {
-        CLog::Log(LOGERROR, "%s::%s error m_omx_resize.Initialize\n", CLASSNAME, __func__);
+        CLog::Log(LOGERROR, "%s::%s error m_omx_resize.Initialize", CLASSNAME, __func__);
         return false;
       }
     }
@@ -1545,7 +1545,7 @@ bool COMXImageReEnc::HandlePortSettingChange(unsigned int resize_width, unsigned
     m_omx_decoder.SetParameter(OMX_IndexParamPortDefinition, &port_def);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s m_omx_decoder.SetParameter result(0x%x)\n", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s m_omx_decoder.SetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
       return false;
     }
 
@@ -1556,7 +1556,7 @@ bool COMXImageReEnc::HandlePortSettingChange(unsigned int resize_width, unsigned
       m_omx_resize.SetParameter(OMX_IndexParamPortDefinition, &port_def);
       if(omx_err != OMX_ErrorNone)
       {
-        CLog::Log(LOGERROR, "%s::%s m_omx_resize.SetParameter result(0x%x)\n", CLASSNAME, __func__, omx_err);
+        CLog::Log(LOGERROR, "%s::%s m_omx_resize.SetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
         return false;
       }
 
@@ -1564,7 +1564,7 @@ bool COMXImageReEnc::HandlePortSettingChange(unsigned int resize_width, unsigned
       m_omx_resize.GetParameter(OMX_IndexParamPortDefinition, &port_def);
       if(omx_err != OMX_ErrorNone)
       {
-        CLog::Log(LOGERROR, "%s::%s m_omx_resize.GetParameter result(0x%x)\n", CLASSNAME, __func__, omx_err);
+        CLog::Log(LOGERROR, "%s::%s m_omx_resize.GetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
         return false;
       }
       port_def.format.image.eColorFormat = OMX_COLOR_FormatYUV420PackedPlanar;
@@ -1575,14 +1575,14 @@ bool COMXImageReEnc::HandlePortSettingChange(unsigned int resize_width, unsigned
       m_omx_resize.SetParameter(OMX_IndexParamPortDefinition, &port_def);
       if(omx_err != OMX_ErrorNone)
       {
-        CLog::Log(LOGERROR, "%s::%s m_omx_resize.SetParameter result(0x%x)\n", CLASSNAME, __func__, omx_err);
+        CLog::Log(LOGERROR, "%s::%s m_omx_resize.SetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
         return false;
       }
     }
 
     if(!m_omx_encoder.Initialize("OMX.broadcom.image_encode", OMX_IndexParamImageInit))
     {
-      CLog::Log(LOGERROR, "%s::%s error m_omx_encoder.Initialize\n", CLASSNAME, __func__);
+      CLog::Log(LOGERROR, "%s::%s error m_omx_encoder.Initialize", CLASSNAME, __func__);
       return false;
     }
 
@@ -1590,7 +1590,7 @@ bool COMXImageReEnc::HandlePortSettingChange(unsigned int resize_width, unsigned
     m_omx_encoder.GetParameter(OMX_IndexParamPortDefinition, &port_def);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s m_omx_encoder.GetParameter result(0x%x)\n", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s m_omx_encoder.GetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
       return false;
     }
     port_def.format.image.eColorFormat = OMX_COLOR_FormatYUV420PackedPlanar;
@@ -1601,7 +1601,7 @@ bool COMXImageReEnc::HandlePortSettingChange(unsigned int resize_width, unsigned
     m_omx_encoder.SetParameter(OMX_IndexParamPortDefinition, &port_def);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s m_omx_encoder.SetParameter result(0x%x)\n", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s m_omx_encoder.SetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
       return false;
     }
 
@@ -1609,7 +1609,7 @@ bool COMXImageReEnc::HandlePortSettingChange(unsigned int resize_width, unsigned
     omx_err = m_omx_encoder.GetParameter(OMX_IndexParamPortDefinition, &port_def);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s m_omx_encoder.GetParameter result(0x%x)\n", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s m_omx_encoder.GetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
       return false;
     }
 
@@ -1624,7 +1624,7 @@ bool COMXImageReEnc::HandlePortSettingChange(unsigned int resize_width, unsigned
     omx_err = m_omx_encoder.SetParameter(OMX_IndexParamPortDefinition, &port_def);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s m_omx_encoder.SetParameter result(0x%x)\n", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s m_omx_encoder.SetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
       return false;
     }
 
@@ -1636,7 +1636,7 @@ bool COMXImageReEnc::HandlePortSettingChange(unsigned int resize_width, unsigned
     omx_err = m_omx_encoder.SetParameter(OMX_IndexParamQFactor, &qfactor);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s m_omx_encoder.SetParameter OMX_IndexParamQFactor result(0x%x)\n", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s m_omx_encoder.SetParameter OMX_IndexParamQFactor result(0x%x)", CLASSNAME, __func__, omx_err);
       return false;
     }
 
@@ -1667,14 +1667,14 @@ bool COMXImageReEnc::HandlePortSettingChange(unsigned int resize_width, unsigned
       omx_err = m_omx_encoder.SetParameter(OMX_IndexConfigMetadataItem, &item);
       if (omx_err != OMX_ErrorNone)
       {
-        CLog::Log(LOGERROR, "%s::%s m_omx_encoder.SetParameter:OMX_IndexConfigMetadataItem omx_err(0x%08x)\n", CLASSNAME, __func__, omx_err);
+        CLog::Log(LOGERROR, "%s::%s m_omx_encoder.SetParameter:OMX_IndexConfigMetadataItem omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
         return false;
       }
     }
     omx_err = m_omx_encoder.AllocOutputBuffers();
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s m_omx_encoder.AllocOutputBuffers result(0x%x)\n", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s m_omx_encoder.AllocOutputBuffers result(0x%x)", CLASSNAME, __func__, omx_err);
       return false;
     }
 
@@ -1685,7 +1685,7 @@ bool COMXImageReEnc::HandlePortSettingChange(unsigned int resize_width, unsigned
       omx_err = m_omx_tunnel_decode.Establish();
       if(omx_err != OMX_ErrorNone)
       {
-        CLog::Log(LOGERROR, "%s::%s m_omx_tunnel_decode.Establish\n", CLASSNAME, __func__);
+        CLog::Log(LOGERROR, "%s::%s m_omx_tunnel_decode.Establish", CLASSNAME, __func__);
         return false;
       }
 
@@ -1694,14 +1694,14 @@ bool COMXImageReEnc::HandlePortSettingChange(unsigned int resize_width, unsigned
       omx_err = m_omx_tunnel_resize.Establish();
       if(omx_err != OMX_ErrorNone)
       {
-        CLog::Log(LOGERROR, "%s::%s m_omx_tunnel_resize.Establish\n", CLASSNAME, __func__);
+        CLog::Log(LOGERROR, "%s::%s m_omx_tunnel_resize.Establish", CLASSNAME, __func__);
         return false;
       }
 
       omx_err = m_omx_resize.SetStateForComponent(OMX_StateExecuting);
       if(omx_err != OMX_ErrorNone)
       {
-        CLog::Log(LOGERROR, "%s::%s m_omx_resize.SetStateForComponent result(0x%x)\n", CLASSNAME, __func__, omx_err);
+        CLog::Log(LOGERROR, "%s::%s m_omx_resize.SetStateForComponent result(0x%x)", CLASSNAME, __func__, omx_err);
         return false;
       }
     }
@@ -1712,14 +1712,14 @@ bool COMXImageReEnc::HandlePortSettingChange(unsigned int resize_width, unsigned
       omx_err = m_omx_tunnel_decode.Establish();
       if(omx_err != OMX_ErrorNone)
       {
-        CLog::Log(LOGERROR, "%s::%s m_omx_tunnel_decode.Establish\n", CLASSNAME, __func__);
+        CLog::Log(LOGERROR, "%s::%s m_omx_tunnel_decode.Establish", CLASSNAME, __func__);
         return false;
       }
     }
     omx_err = m_omx_encoder.SetStateForComponent(OMX_StateExecuting);
     if (omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s m_omx_encoder.SetStateForComponent result(0x%x)\n", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s m_omx_encoder.SetStateForComponent result(0x%x)", CLASSNAME, __func__, omx_err);
       return false;
     }
 
@@ -1730,7 +1730,7 @@ bool COMXImageReEnc::HandlePortSettingChange(unsigned int resize_width, unsigned
   else
   {
     // a little surprising, make a note
-    CLog::Log(LOGDEBUG, "%s::%s m_omx_resize second port changed event\n", CLASSNAME, __func__);
+    CLog::Log(LOGDEBUG, "%s::%s m_omx_resize second port changed event", CLASSNAME, __func__);
     m_omx_decoder.DisablePort(m_omx_decoder.GetOutputPort(), true);
     if (m_omx_resize.IsInitialized())
     {
@@ -1747,7 +1747,7 @@ bool COMXImageReEnc::HandlePortSettingChange(unsigned int resize_width, unsigned
       omx_err = m_omx_resize.WaitForEvent(OMX_EventPortSettingsChanged);
       if(omx_err != OMX_ErrorNone)
       {
-        CLog::Log(LOGERROR, "%s::%s m_omx_resize.WaitForEvent=%x\n", CLASSNAME, __func__, omx_err);
+        CLog::Log(LOGERROR, "%s::%s m_omx_resize.WaitForEvent=%x", CLASSNAME, __func__, omx_err);
         return false;
       }
       m_omx_resize.EnablePort(m_omx_resize.GetInputPort(), true);
@@ -1770,13 +1770,13 @@ bool COMXImageReEnc::ReEncode(COMXImageFile &srcFile, unsigned int maxWidth, uns
 
   if(!demuxer_content || !demuxer_bytes)
   {
-    CLog::Log(LOGERROR, "%s::%s %s no input buffer\n", CLASSNAME, __func__, srcFile.GetFilename());
+    CLog::Log(LOGERROR, "%s::%s %s no input buffer", CLASSNAME, __func__, srcFile.GetFilename());
     return false;
   }
 
   if(!m_omx_decoder.Initialize("OMX.broadcom.image_decode", OMX_IndexParamImageInit))
   {
-    CLog::Log(LOGERROR, "%s::%s %s error m_omx_decoder.Initialize\n", CLASSNAME, __func__, srcFile.GetFilename());
+    CLog::Log(LOGERROR, "%s::%s %s error m_omx_decoder.Initialize", CLASSNAME, __func__, srcFile.GetFilename());
     return false;
   }
 
@@ -1788,7 +1788,7 @@ bool COMXImageReEnc::ReEncode(COMXImageFile &srcFile, unsigned int maxWidth, uns
   omx_err = m_omx_decoder.GetParameter(OMX_IndexParamPortDefinition, &portParam);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s %s error GetParameter:OMX_IndexParamPortDefinition omx_err(0x%08x)\n", CLASSNAME, __func__, srcFile.GetFilename(), omx_err);
+    CLog::Log(LOGERROR, "%s::%s %s error GetParameter:OMX_IndexParamPortDefinition omx_err(0x%08x)", CLASSNAME, __func__, srcFile.GetFilename(), omx_err);
     return false;
   }
 
@@ -1799,7 +1799,7 @@ bool COMXImageReEnc::ReEncode(COMXImageFile &srcFile, unsigned int maxWidth, uns
   omx_err = m_omx_decoder.SetParameter(OMX_IndexParamPortDefinition, &portParam);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s %s error SetParameter:OMX_IndexParamPortDefinition omx_err(0x%08x)\n", CLASSNAME, __func__, srcFile.GetFilename(), omx_err);
+    CLog::Log(LOGERROR, "%s::%s %s error SetParameter:OMX_IndexParamPortDefinition omx_err(0x%08x)", CLASSNAME, __func__, srcFile.GetFilename(), omx_err);
     return false;
   }
 
@@ -1813,7 +1813,7 @@ bool COMXImageReEnc::ReEncode(COMXImageFile &srcFile, unsigned int maxWidth, uns
   omx_err = m_omx_decoder.SetStateForComponent(OMX_StateExecuting);
   if (omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s %s m_omx_decoder.SetStateForComponent result(0x%x)\n", CLASSNAME, __func__, srcFile.GetFilename(), omx_err);
+    CLog::Log(LOGERROR, "%s::%s %s m_omx_decoder.SetStateForComponent result(0x%x)", CLASSNAME, __func__, srcFile.GetFilename(), omx_err);
     return false;
   }
 
@@ -1839,7 +1839,7 @@ bool COMXImageReEnc::ReEncode(COMXImageFile &srcFile, unsigned int maxWidth, uns
          omx_err = m_omx_decoder.EmptyThisBuffer(omx_buffer);
          if (omx_err != OMX_ErrorNone)
          {
-           CLog::Log(LOGERROR, "%s::%s %s OMX_EmptyThisBuffer() failed with result(0x%x)\n", CLASSNAME, __func__, srcFile.GetFilename(), omx_err);
+           CLog::Log(LOGERROR, "%s::%s %s OMX_EmptyThisBuffer() failed with result(0x%x)", CLASSNAME, __func__, srcFile.GetFilename(), omx_err);
            m_omx_decoder.DecoderEmptyBufferDone(m_omx_decoder.GetComponent(), omx_buffer);
            return false;
          }
@@ -1856,7 +1856,7 @@ bool COMXImageReEnc::ReEncode(COMXImageFile &srcFile, unsigned int maxWidth, uns
     {
       if (!HandlePortSettingChange(maxWidth, maxHeight, srcFile.GetOrientation(), port_settings_changed))
       {
-        CLog::Log(LOGERROR, "%s::%s %s HandlePortSettingChange() failed\n", srcFile.GetFilename(), CLASSNAME, __func__);
+        CLog::Log(LOGERROR, "%s::%s %s HandlePortSettingChange() failed", srcFile.GetFilename(), CLASSNAME, __func__);
         return false;
       }
       port_settings_changed = true;
@@ -1868,7 +1868,7 @@ bool COMXImageReEnc::ReEncode(COMXImageFile &srcFile, unsigned int maxWidth, uns
     }
     else if(timeout || omx_err != OMX_ErrorTimeout)
     {
-      CLog::Log(LOGERROR, "%s::%s %s WaitForEvent:OMX_EventPortSettingsChanged failed (%x)\n", CLASSNAME, __func__, srcFile.GetFilename(), omx_err);
+      CLog::Log(LOGERROR, "%s::%s %s WaitForEvent:OMX_EventPortSettingsChanged failed (%x)", CLASSNAME, __func__, srcFile.GetFilename(), omx_err);
       return false;
     }
 
@@ -1878,7 +1878,7 @@ bool COMXImageReEnc::ReEncode(COMXImageFile &srcFile, unsigned int maxWidth, uns
       omx_err = m_omx_encoder.FillThisBuffer(m_encoded_buffer);
       if(omx_err != OMX_ErrorNone)
       {
-        CLog::Log(LOGERROR, "%s::%s %s FillThisBuffer() failed (%x)\n", CLASSNAME, __func__, srcFile.GetFilename(), omx_err);
+        CLog::Log(LOGERROR, "%s::%s %s FillThisBuffer() failed (%x)", CLASSNAME, __func__, srcFile.GetFilename(), omx_err);
         m_omx_encoder.DecoderFillBufferDone(m_omx_encoder.GetComponent(), m_encoded_buffer);
         return false;
       }
@@ -1888,12 +1888,12 @@ bool COMXImageReEnc::ReEncode(COMXImageFile &srcFile, unsigned int maxWidth, uns
       omx_err = m_omx_encoder.WaitForOutputDone(2000);
       if (omx_err != OMX_ErrorNone)
       {
-        CLog::Log(LOGERROR, "%s::%s %s m_omx_encoder.WaitForOutputDone result(0x%x)\n", CLASSNAME, __func__, srcFile.GetFilename(), omx_err);
+        CLog::Log(LOGERROR, "%s::%s %s m_omx_encoder.WaitForOutputDone result(0x%x)", CLASSNAME, __func__, srcFile.GetFilename(), omx_err);
         return false;
       }
       if (!m_encoded_buffer->nFilledLen)
       {
-        CLog::Log(LOGERROR, "%s::%s %s m_omx_encoder.WaitForOutputDone no data\n", CLASSNAME, __func__, srcFile.GetFilename());
+        CLog::Log(LOGERROR, "%s::%s %s m_omx_encoder.WaitForOutputDone no data", CLASSNAME, __func__, srcFile.GetFilename());
         return false;
       }
       if (m_encoded_buffer->nFlags & OMX_BUFFERFLAG_EOS)
@@ -1915,7 +1915,7 @@ bool COMXImageReEnc::ReEncode(COMXImageFile &srcFile, unsigned int maxWidth, uns
     return false;
 
   pDestBuffer = m_pDestBuffer;
-  CLog::Log(LOGDEBUG, "%s::%s : %s %dx%d -> %dx%d\n", CLASSNAME, __func__, srcFile.GetFilename(), srcFile.GetWidth(), srcFile.GetHeight(), maxWidth, maxHeight);
+  CLog::Log(LOGDEBUG, "%s::%s : %s %dx%d -> %dx%d", CLASSNAME, __func__, srcFile.GetFilename(), srcFile.GetWidth(), srcFile.GetHeight(), maxWidth, maxHeight);
 
   m_success = true;
   Close();
@@ -1980,7 +1980,7 @@ bool COMXTexture::HandlePortSettingChange(unsigned int resize_width, unsigned in
   OMX_ERRORTYPE omx_err;
 
   if (port_settings_changed)
-    CLog::Log(LOGERROR, "%s::%s Unexpected second port_settings_changed call\n", CLASSNAME, __func__);
+    CLog::Log(LOGERROR, "%s::%s Unexpected second port_settings_changed call", CLASSNAME, __func__);
 
   OMX_PARAM_PORTDEFINITIONTYPE port_def;
   OMX_INIT_STRUCTURE(port_def);
@@ -1989,7 +1989,7 @@ bool COMXTexture::HandlePortSettingChange(unsigned int resize_width, unsigned in
   omx_err = m_omx_decoder.GetParameter(OMX_IndexParamPortDefinition, &port_def);
   if (omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s m_omx_decoder.GetParameter result(0x%x)\n", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s m_omx_decoder.GetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
     return false;
   }
 
@@ -2001,7 +2001,7 @@ bool COMXTexture::HandlePortSettingChange(unsigned int resize_width, unsigned in
   omx_err = m_omx_decoder.SetParameter(OMX_IndexParamPortDefinition, &port_def);
   if (omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s m_omx_decoder.SetParameter result(0x%x)\n", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s m_omx_decoder.SetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
     return false;
   }
   if (resize_width != port_def.format.image.nFrameWidth || resize_height != port_def.format.image.nFrameHeight)
@@ -2019,7 +2019,7 @@ bool COMXTexture::HandlePortSettingChange(unsigned int resize_width, unsigned in
     omx_err = m_omx_resize.SetParameter(OMX_IndexParamPortDefinition, &port_def);
     if (omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s m_omx_resize.SetParameter result(0x%x)\n", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s m_omx_resize.SetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
       return false;
     }
 
@@ -2027,7 +2027,7 @@ bool COMXTexture::HandlePortSettingChange(unsigned int resize_width, unsigned in
     omx_err = m_omx_resize.GetParameter(OMX_IndexParamPortDefinition, &port_def);
     if (omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s m_omx_resize.GetParameter result(0x%x)\n", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s m_omx_resize.GetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
       return false;
     }
 
@@ -2039,7 +2039,7 @@ bool COMXTexture::HandlePortSettingChange(unsigned int resize_width, unsigned in
     omx_err = m_omx_resize.SetParameter(OMX_IndexParamPortDefinition, &port_def);
     if (omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s m_omx_resize.SetParameter result(0x%x)\n", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s m_omx_resize.SetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
       return false;
     }
   }
@@ -2053,7 +2053,7 @@ bool COMXTexture::HandlePortSettingChange(unsigned int resize_width, unsigned in
   omx_err = m_omx_egl_render.GetParameter(OMX_IndexParamPortDefinition, &port_def);
   if (omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s m_omx_egl_render.SetParameter result(0x%x)\n", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s m_omx_egl_render.SetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
     return false;
   }
   port_def.nBufferCountActual = 1;
@@ -2062,7 +2062,7 @@ bool COMXTexture::HandlePortSettingChange(unsigned int resize_width, unsigned in
   omx_err = m_omx_egl_render.SetParameter(OMX_IndexParamPortDefinition, &port_def);
   if (omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s m_omx_egl_render.SetParameter result(0x%x)\n", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s m_omx_egl_render.SetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
     return false;
   }
 
@@ -2128,7 +2128,7 @@ bool COMXTexture::Decode(const uint8_t *demuxer_content, unsigned demuxer_bytes,
 
   if (!demuxer_content || !demuxer_bytes)
   {
-    CLog::Log(LOGERROR, "%s::%s no input buffer\n", CLASSNAME, __func__);
+    CLog::Log(LOGERROR, "%s::%s no input buffer", CLASSNAME, __func__);
     return false;
   }
 
@@ -2146,7 +2146,7 @@ bool COMXTexture::Decode(const uint8_t *demuxer_content, unsigned demuxer_bytes,
   omx_err = m_omx_decoder.GetParameter(OMX_IndexParamPortDefinition, &portParam);
   if (omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s error GetParameter:OMX_IndexParamPortDefinition omx_err(0x%08x)\n", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s error GetParameter:OMX_IndexParamPortDefinition omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
     return false;
   }
 
@@ -2157,7 +2157,7 @@ bool COMXTexture::Decode(const uint8_t *demuxer_content, unsigned demuxer_bytes,
   omx_err = m_omx_decoder.SetParameter(OMX_IndexParamPortDefinition, &portParam);
   if (omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s error SetParameter:OMX_IndexParamPortDefinition omx_err(0x%08x)\n", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s error SetParameter:OMX_IndexParamPortDefinition omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
     return false;
   }
 
@@ -2228,7 +2228,7 @@ bool COMXTexture::Decode(const uint8_t *demuxer_content, unsigned demuxer_bytes,
     }
     else if (timeout || omx_err != OMX_ErrorTimeout)
     {
-      CLog::Log(LOGERROR, "%s::%s WaitForEvent:OMX_EventPortSettingsChanged failed (%x)\n", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s WaitForEvent:OMX_EventPortSettingsChanged failed (%x)", CLASSNAME, __func__, omx_err);
       return false;
     }
 
@@ -2237,7 +2237,7 @@ bool COMXTexture::Decode(const uint8_t *demuxer_content, unsigned demuxer_bytes,
       OMX_BUFFERHEADERTYPE *omx_buffer = m_omx_egl_render.GetOutputBuffer();
       if (!omx_buffer)
       {
-        CLog::Log(LOGERROR, "%s::%s GetOutputBuffer failed\n", CLASSNAME, __func__);
+        CLog::Log(LOGERROR, "%s::%s GetOutputBuffer failed", CLASSNAME, __func__);
         return false;
       }
       if (omx_buffer != m_egl_buffer)
@@ -2258,7 +2258,7 @@ bool COMXTexture::Decode(const uint8_t *demuxer_content, unsigned demuxer_bytes,
       omx_err = m_omx_egl_render.WaitForOutputDone(2000);
       if (omx_err != OMX_ErrorNone)
       {
-        CLog::Log(LOGERROR, "%s::%s m_omx_egl_render.WaitForOutputDone result(0x%x)\n", CLASSNAME, __func__, omx_err);
+        CLog::Log(LOGERROR, "%s::%s m_omx_egl_render.WaitForOutputDone result(0x%x)", CLASSNAME, __func__, omx_err);
         return false;
       }
       eos = true;
diff --git a/xbmc/filesystem/BlurayCallback.cpp b/xbmc/filesystem/BlurayCallback.cpp
index aa675acb18d8..d750f8991055 100644
--- a/xbmc/filesystem/BlurayCallback.cpp
+++ b/xbmc/filesystem/BlurayCallback.cpp
@@ -31,7 +31,7 @@ void CBlurayCallback::dir_close(BD_DIR_H *dir)
 {
   if (dir)
   {
-    CLog::Log(LOGDEBUG, "CBlurayCallback - Closed dir (%p)\n", static_cast<void*>(dir));
+    CLog::Log(LOGDEBUG, "CBlurayCallback - Closed dir (%p)", static_cast<void*>(dir));
     delete static_cast<SDirState*>(dir->internal);
     delete dir;
   }
@@ -51,13 +51,13 @@ BD_DIR_H* CBlurayCallback::dir_open(void *handle, const char* rel_path)
   if (URIUtils::HasSlashAtEnd(strDirname))
     URIUtils::RemoveSlashAtEnd(strDirname);
 
-  CLog::Log(LOGDEBUG, "CBlurayCallback - Opening dir %s\n", CURL::GetRedacted(strDirname).c_str());
+  CLog::Log(LOGDEBUG, "CBlurayCallback - Opening dir %s", CURL::GetRedacted(strDirname).c_str());
 
   SDirState *st = new SDirState();
   if (!CDirectory::GetDirectory(strDirname, st->list, "", DIR_FLAG_DEFAULTS))
   {
     if (!CFile::Exists(strDirname))
-      CLog::Log(LOGDEBUG, "CBlurayCallback - Error opening dir! (%s)\n", CURL::GetRedacted(strDirname).c_str());
+      CLog::Log(LOGDEBUG, "CBlurayCallback - Error opening dir! (%s)", CURL::GetRedacted(strDirname).c_str());
     delete st;
     return nullptr;
   }
diff --git a/xbmc/filesystem/DllLibCurl.cpp b/xbmc/filesystem/DllLibCurl.cpp
index 203263602d28..9079a0ecce19 100644
--- a/xbmc/filesystem/DllLibCurl.cpp
+++ b/xbmc/filesystem/DllLibCurl.cpp
@@ -149,7 +149,7 @@ void DllLibCurlGlobal::CheckIdle()
   {
     if (!it->m_busy && (XbmcThreads::SystemClockMillis() - it->m_idletimestamp) > idletime)
     {
-      CLog::Log(LOGINFO, "%s - Closing session to %s://%s (easy=%p, multi=%p)\n", __FUNCTION__,
+      CLog::Log(LOGINFO, "%s - Closing session to %s://%s (easy=%p, multi=%p)", __FUNCTION__,
                 it->m_protocol.c_str(), it->m_hostname.c_str(), static_cast<void*>(it->m_easy),
                 static_cast<void*>(it->m_multi));
 
@@ -225,7 +225,7 @@ void DllLibCurlGlobal::easy_acquire(const char* protocol,
 
   m_sessions.push_back(session);
 
-  CLog::Log(LOGINFO, "%s - Created session to %s://%s\n", __FUNCTION__, protocol, hostname);
+  CLog::Log(LOGINFO, "%s - Created session to %s://%s", __FUNCTION__, protocol, hostname);
 }
 
 void DllLibCurlGlobal::easy_release(CURL_HANDLE** easy_handle, CURLM** multi_handle)
diff --git a/xbmc/filesystem/NFSDirectory.cpp b/xbmc/filesystem/NFSDirectory.cpp
index 67c9f83768b2..cb3215a2a008 100644
--- a/xbmc/filesystem/NFSDirectory.cpp
+++ b/xbmc/filesystem/NFSDirectory.cpp
@@ -144,7 +144,7 @@ bool CNFSDirectory::ResolveSymlink( const std::string &dirName, struct nfsdirent
 
     if (ret != 0)
     {
-      CLog::Log(LOGERROR, "NFS: Failed to stat(%s) on link resolve %s\n", fullpath.c_str(), nfs_get_error(gNfsConnection.GetNfsContext()));
+      CLog::Log(LOGERROR, "NFS: Failed to stat(%s) on link resolve %s", fullpath.c_str(), nfs_get_error(gNfsConnection.GetNfsContext()));
       retVal = false;
     }
     else
@@ -168,7 +168,7 @@ bool CNFSDirectory::ResolveSymlink( const std::string &dirName, struct nfsdirent
   }
   else
   {
-    CLog::Log(LOGERROR, "Failed to readlink(%s) %s\n", fullpath.c_str(), nfs_get_error(gNfsConnection.GetNfsContext()));
+    CLog::Log(LOGERROR, "Failed to readlink(%s) %s", fullpath.c_str(), nfs_get_error(gNfsConnection.GetNfsContext()));
     retVal = false;
   }
   return retVal;
@@ -211,7 +211,7 @@ bool CNFSDirectory::GetDirectory(const CURL& url, CFileItemList &items)
 
   if(ret != 0)
   {
-    CLog::Log(LOGERROR, "Failed to open(%s) %s\n", strDirName.c_str(), nfs_get_error(gNfsConnection.GetNfsContext()));
+    CLog::Log(LOGERROR, "Failed to open(%s) %s", strDirName.c_str(), nfs_get_error(gNfsConnection.GetNfsContext()));
     return false;
   }
   lock.Leave();
@@ -304,7 +304,7 @@ bool CNFSDirectory::Create(const CURL& url2)
 
   success = (ret == 0 || -EEXIST == ret);
   if(!success)
-    CLog::Log(LOGERROR, "NFS: Failed to create(%s) %s\n", folderName.c_str(), nfs_get_error(gNfsConnection.GetNfsContext()));
+    CLog::Log(LOGERROR, "NFS: Failed to create(%s) %s", folderName.c_str(), nfs_get_error(gNfsConnection.GetNfsContext()));
   return success;
 }
 
diff --git a/xbmc/filesystem/NFSFile.cpp b/xbmc/filesystem/NFSFile.cpp
index 408b331e4da2..cb505fdd75fa 100644
--- a/xbmc/filesystem/NFSFile.cpp
+++ b/xbmc/filesystem/NFSFile.cpp
@@ -285,11 +285,11 @@ bool CNfsConnection::Connect(const CURL& url, std::string &relativePath)
 
       if(nfsRet != 0)
       {
-        CLog::Log(LOGERROR,"NFS: Failed to mount nfs share: %s (%s)\n", exportPath.c_str(), nfs_get_error(m_pNfsContext));
+        CLog::Log(LOGERROR,"NFS: Failed to mount nfs share: %s (%s)", exportPath.c_str(), nfs_get_error(m_pNfsContext));
         destroyContext(url.GetHostName() + exportPath);
         return false;
       }
-      CLog::Log(LOGDEBUG,"NFS: Connected to server %s and export %s\n", url.GetHostName().c_str(), exportPath.c_str());
+      CLog::Log(LOGDEBUG,"NFS: Connected to server %s and export %s", url.GetHostName().c_str(), exportPath.c_str());
     }
     m_exportPath = exportPath;
     m_hostName = url.GetHostName();
@@ -299,7 +299,7 @@ bool CNfsConnection::Connect(const CURL& url, std::string &relativePath)
 
     if(contextRet == CONTEXT_NEW)
     {
-      CLog::Log(LOGDEBUG,"NFS: chunks: r/w %i/%i\n", (int)m_readChunkSize,(int)m_writeChunkSize);
+      CLog::Log(LOGDEBUG,"NFS: chunks: r/w %i/%i", (int)m_readChunkSize,(int)m_writeChunkSize);
     }
   }
   return ret;
@@ -434,11 +434,11 @@ int CNfsConnection::stat(const CURL &url, NFSSTAT *statbuff)
       }
       else
       {
-        CLog::Log(LOGERROR,"NFS: Failed to mount nfs share: %s (%s)\n", exportPath.c_str(), nfs_get_error(m_pNfsContext));
+        CLog::Log(LOGERROR,"NFS: Failed to mount nfs share: %s (%s)", exportPath.c_str(), nfs_get_error(m_pNfsContext));
       }
 
       nfs_destroy_context(pTmpContext);
-      CLog::Log(LOGDEBUG,"NFS: Connected to server %s and export %s in tmpContext\n", url.GetHostName().c_str(), exportPath.c_str());
+      CLog::Log(LOGDEBUG,"NFS: Connected to server %s and export %s in tmpContext", url.GetHostName().c_str(), exportPath.c_str());
     }
   }
   return nfsRet;
@@ -577,7 +577,7 @@ int CNFSFile::Stat(const CURL& url, struct __stat64* buffer)
   //if buffer == NULL we where called from Exists - in that case don't spam the log with errors
   if (ret != 0 && buffer != NULL)
   {
-    CLog::Log(LOGERROR, "NFS: Failed to stat(%s) %s\n", url.GetFileName().c_str(), nfs_get_error(gNfsConnection.GetNfsContext()));
+    CLog::Log(LOGERROR, "NFS: Failed to stat(%s) %s", url.GetFileName().c_str(), nfs_get_error(gNfsConnection.GetNfsContext()));
     ret = -1;
   }
   else
@@ -679,7 +679,7 @@ void CNFSFile::Close()
 
 	  if (ret < 0)
     {
-      CLog::Log(LOGERROR, "Failed to close(%s) - %s\n", m_url.GetFileName().c_str(), nfs_get_error(m_pNfsContext));
+      CLog::Log(LOGERROR, "Failed to close(%s) - %s", m_url.GetFileName().c_str(), nfs_get_error(m_pNfsContext));
     }
     m_pFileHandle = NULL;
     m_pNfsContext = NULL;
@@ -725,7 +725,7 @@ ssize_t CNFSFile::Write(const void* lpBuf, size_t uiBufSize)
     //danger - something went wrong
     if (writtenBytes < 0)
     {
-      CLog::Log(LOGERROR, "Failed to pwrite(%s) %s\n", m_url.GetFileName().c_str(), nfs_get_error(m_pNfsContext));
+      CLog::Log(LOGERROR, "Failed to pwrite(%s) %s", m_url.GetFileName().c_str(), nfs_get_error(m_pNfsContext));
       if (numberOfBytesWritten == 0)
         return -1;
 
diff --git a/xbmc/filesystem/SpecialProtocol.cpp b/xbmc/filesystem/SpecialProtocol.cpp
index b69b4256e3b8..ef3b5d437a4e 100644
--- a/xbmc/filesystem/SpecialProtocol.cpp
+++ b/xbmc/filesystem/SpecialProtocol.cpp
@@ -122,7 +122,7 @@ std::string CSpecialProtocol::TranslatePath(const CURL &url)
     std::string path(url.Get());
     if (path.length() >= 2 && path[1] == ':')
     {
-      CLog::Log(LOGWARNING, "Trying to access old style dir: %s\n", path.c_str());
+      CLog::Log(LOGWARNING, "Trying to access old style dir: %s", path.c_str());
      // printf("Trying to access old style dir: %s\n", path.c_str());
     }
 #endif
diff --git a/xbmc/guilib/FFmpegImage.cpp b/xbmc/guilib/FFmpegImage.cpp
index dd837a8fdad2..444dbb511113 100644
--- a/xbmc/guilib/FFmpegImage.cpp
+++ b/xbmc/guilib/FFmpegImage.cpp
@@ -275,7 +275,7 @@ AVFrame* CFFmpegImage::ExtractFrame()
   ret = av_read_frame(m_fctx, &pkt);
   if (ret < 0)
   {
-    CLog::Log(LOGDEBUG, "Error [%d] while reading frame: %s\n", ret, strerror(AVERROR(ret)));
+    CLog::Log(LOGDEBUG, "Error [%d] while reading frame: %s", ret, strerror(AVERROR(ret)));
     av_frame_free(&frame);
     av_packet_unref(&pkt);
     return nullptr;
@@ -284,7 +284,7 @@ AVFrame* CFFmpegImage::ExtractFrame()
   ret = DecodeFFmpegFrame(m_codec_ctx, frame, &frame_decoded, &pkt);
   if (ret < 0 || frame_decoded == 0 || !frame)
   {
-    CLog::Log(LOGDEBUG, "Error [%d] while decoding frame: %s\n", ret, strerror(AVERROR(ret)));
+    CLog::Log(LOGDEBUG, "Error [%d] while decoding frame: %s", ret, strerror(AVERROR(ret)));
     av_frame_free(&frame);
     av_packet_unref(&pkt);
     return nullptr;
diff --git a/xbmc/guilib/GUIWindow.cpp b/xbmc/guilib/GUIWindow.cpp
index b658a8016d66..8f7ea34c177a 100644
--- a/xbmc/guilib/GUIWindow.cpp
+++ b/xbmc/guilib/GUIWindow.cpp
@@ -635,7 +635,7 @@ bool CGUIWindow::OnMessage(CGUIMessage& message)
     }
   case GUI_MSG_SETFOCUS:
     {
-//      CLog::Log(LOGDEBUG,"set focus to control:%i window:%i (%i)\n", message.GetControlId(),message.GetSenderId(), GetID());
+//      CLog::Log(LOGDEBUG,"set focus to control:%i window:%i (%i)", message.GetControlId(),message.GetSenderId(), GetID());
       if ( message.GetControlId() )
       {
         // first unfocus the current control
diff --git a/xbmc/interfaces/json-rpc/JSONRPC.cpp b/xbmc/interfaces/json-rpc/JSONRPC.cpp
index 121a0f1cf53c..f7b5ee757462 100644
--- a/xbmc/interfaces/json-rpc/JSONRPC.cpp
+++ b/xbmc/interfaces/json-rpc/JSONRPC.cpp
@@ -239,7 +239,7 @@ std::string CJSONRPC::MethodCall(const std::string &inputString, ITransportLayer
     {
       if (inputroot.size() <= 0)
       {
-        CLog::Log(LOGERROR, "JSONRPC: Empty batch call\n");
+        CLog::Log(LOGERROR, "JSONRPC: Empty batch call");
         BuildResponse(inputroot, InvalidRequest, CVariant(), outputroot);
         hasResponse = true;
       }
@@ -261,7 +261,7 @@ std::string CJSONRPC::MethodCall(const std::string &inputString, ITransportLayer
   }
   else
   {
-    CLog::Log(LOGERROR, "JSONRPC: Failed to parse '%s'\n", inputString.c_str());
+    CLog::Log(LOGERROR, "JSONRPC: Failed to parse '%s'", inputString.c_str());
     BuildResponse(inputroot, ParseError, CVariant(), outputroot);
     hasResponse = true;
   }
@@ -299,7 +299,7 @@ bool CJSONRPC::HandleMethodCall(const CVariant& request, CVariant& response, ITr
     std::string str;
     CJSONVariantWriter::Write(request, str, true);
 
-    CLog::Log(LOGERROR, "JSONRPC: Failed to parse '%s'\n", str.c_str());
+    CLog::Log(LOGERROR, "JSONRPC: Failed to parse '%s'", str.c_str());
     errorCode = InvalidRequest;
   }
 
diff --git a/xbmc/network/AirPlayServer.cpp b/xbmc/network/AirPlayServer.cpp
index f3976cf7a8e7..f12539661c96 100644
--- a/xbmc/network/AirPlayServer.cpp
+++ b/xbmc/network/AirPlayServer.cpp
@@ -1171,7 +1171,7 @@ int CAirPlayServer::CTCPClient::ProcessRequest( std::string& responseHeader,
   }
   else
   {
-    CLog::Log(LOGERROR, "AIRPLAY Server: unhandled request [%s]\n", uri.c_str());
+    CLog::Log(LOGERROR, "AIRPLAY Server: unhandled request [%s]", uri.c_str());
     status = AIRPLAY_STATUS_NOT_IMPLEMENTED;
   }
 
diff --git a/xbmc/network/mdns/ZeroconfBrowserMDNS.cpp b/xbmc/network/mdns/ZeroconfBrowserMDNS.cpp
index 91958eade982..48236ce1a2e8 100644
--- a/xbmc/network/mdns/ZeroconfBrowserMDNS.cpp
+++ b/xbmc/network/mdns/ZeroconfBrowserMDNS.cpp
@@ -88,7 +88,7 @@ void DNSSD_API CZeroconfBrowserMDNS::BrowserCallback(DNSServiceRef browser,
   }
   else
   {
-    CLog::Log(LOGERROR, "ZeroconfBrowserMDNS::BrowserCallback returned (error = %ld)\n", (int)errorCode);
+    CLog::Log(LOGERROR, "ZeroconfBrowserMDNS::BrowserCallback returned (error = %ld)", (int)errorCode);
   }
 }
 
diff --git a/xbmc/platform/darwin/osx/XBMCHelper.cpp b/xbmc/platform/darwin/osx/XBMCHelper.cpp
index 02f214ac8561..19177c2adc42 100644
--- a/xbmc/platform/darwin/osx/XBMCHelper.cpp
+++ b/xbmc/platform/darwin/osx/XBMCHelper.cpp
@@ -153,7 +153,7 @@ void XBMCHelper::Stop()
   int pid = GetProcessPid(XBMC_HELPER_PROGRAM);
   if (pid != -1)
   {
-    CLog::Log(LOGDEBUG,"XBMCHelper: Sending SIGKILL to %s\n", XBMC_HELPER_PROGRAM);
+    CLog::Log(LOGDEBUG,"XBMCHelper: Sending SIGKILL to %s", XBMC_HELPER_PROGRAM);
     kill(pid, SIGKILL);
   }
 }
diff --git a/xbmc/platform/darwin/osx/peripherals/PeripheralBusUSB.cpp b/xbmc/platform/darwin/osx/peripherals/PeripheralBusUSB.cpp
index 49302c7b9c94..6a1dfa3184f8 100644
--- a/xbmc/platform/darwin/osx/peripherals/PeripheralBusUSB.cpp
+++ b/xbmc/platform/darwin/osx/peripherals/PeripheralBusUSB.cpp
@@ -114,7 +114,7 @@ void CPeripheralBusUSB::DeviceDetachCallback(void *refCon, io_service_t service,
     }
     privateDataRef->refCon->ScanForDevices();
 
-    CLog::Log(LOGDEBUG, "USB Device Detach:%s, %s\n",
+    CLog::Log(LOGDEBUG, "USB Device Detach:%s, %s",
       privateDataRef->deviceName.c_str(), privateDataRef->result.m_strLocation.c_str());
     IOObjectRelease(privateDataRef->notification);
     delete privateDataRef;
@@ -260,7 +260,7 @@ void CPeripheralBusUSB::DeviceAttachCallback(CPeripheralBusUSB* refCon, io_itera
           if (result == kIOReturnSuccess)
           {
             refCon->m_scan_results.m_results.push_back(privateDataRef->result);
-            CLog::Log(LOGDEBUG, "USB Device Attach:%s, %s\n",
+            CLog::Log(LOGDEBUG, "USB Device Attach:%s, %s",
               deviceName, privateDataRef->result.m_strLocation.c_str());
           }
           else
diff --git a/xbmc/platform/darwin/tvos/TVOSTopShelf.mm b/xbmc/platform/darwin/tvos/TVOSTopShelf.mm
index a3816f673f91..7a6cc8556606 100644
--- a/xbmc/platform/darwin/tvos/TVOSTopShelf.mm
+++ b/xbmc/platform/darwin/tvos/TVOSTopShelf.mm
@@ -56,7 +56,7 @@
 
     storeUrl = [storeUrl URLByAppendingPathComponent:@"RA" isDirectory:YES];
     const BOOL isJailbroken = [tvosShared isJailbroken];
-    CLog::Log(LOGDEBUG, "TopShelf: using shared path {} (jailbroken: {})\n",
+    CLog::Log(LOGDEBUG, "TopShelf: using shared path {} (jailbroken: {})",
               storeUrl.path.UTF8String, isJailbroken ? "yes" : "no");
 
     auto sharedDefaults = [[NSUserDefaults alloc] initWithSuiteName:[tvosShared getSharedID]];
@@ -106,7 +106,7 @@
               }
 
               auto title = getTitleForItem(videoItem);
-              CLog::Log(LOGDEBUG, "TopShelf: - adding video to '{}' array: {}\n",
+              CLog::Log(LOGDEBUG, "TopShelf: - adding video to '{}' array: {}",
                         videosKey.UTF8String, title.c_str());
               [videosArray addObject:@{
                 @"title" : @(title.c_str()),
diff --git a/xbmc/platform/linux/DBusMessage.cpp b/xbmc/platform/linux/DBusMessage.cpp
index 9ebbf16906a5..08e66e447cd0 100644
--- a/xbmc/platform/linux/DBusMessage.cpp
+++ b/xbmc/platform/linux/DBusMessage.cpp
@@ -22,7 +22,7 @@ CDBusMessage::CDBusMessage(const char *destination, const char *object, const ch
   }
   m_haveArgs = false;
 
-  CLog::Log(LOGDEBUG, LOGDBUS, "DBus: Creating message to %s on %s with interface %s and method %s\n", destination, object, interface, method);
+  CLog::Log(LOGDEBUG, LOGDBUS, "DBus: Creating message to %s on %s with interface %s and method %s", destination, object, interface, method);
 }
 
 CDBusMessage::CDBusMessage(const std::string& destination, const std::string& object, const std::string& interface, const std::string& method)
diff --git a/xbmc/platform/linux/OMXCore.cpp b/xbmc/platform/linux/OMXCore.cpp
index 8c09724d9f45..a32acf42a8bf 100644
--- a/xbmc/platform/linux/OMXCore.cpp
+++ b/xbmc/platform/linux/OMXCore.cpp
@@ -112,7 +112,7 @@ OMX_ERRORTYPE COMXCoreTunnel::Deestablish(bool noWait)
     omx_err = m_DllOMX->OMX_SetupTunnel(m_src_component->GetComponent(), m_src_port, NULL, 0);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "COMXCoreTunnel::Deestablish - could not unset tunnel on comp src %s port %d omx_err(0x%08x)\n",
+      CLog::Log(LOGERROR, "COMXCoreTunnel::Deestablish - could not unset tunnel on comp src %s port %d omx_err(0x%08x)",
           m_src_component->GetName().c_str(), m_src_port, (int)omx_err);
     }
   }
@@ -122,7 +122,7 @@ OMX_ERRORTYPE COMXCoreTunnel::Deestablish(bool noWait)
     omx_err = m_DllOMX->OMX_SetupTunnel(m_dst_component->GetComponent(), m_dst_port, NULL, 0);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "COMXCoreTunnel::Deestablish - could not unset tunnel on comp dst %s port %d omx_err(0x%08x)\n",
+      CLog::Log(LOGERROR, "COMXCoreTunnel::Deestablish - could not unset tunnel on comp dst %s port %d omx_err(0x%08x)",
           m_dst_component->GetName().c_str(), m_dst_port, (int)omx_err);
     }
   }
@@ -201,14 +201,14 @@ OMX_ERRORTYPE COMXCoreTunnel::Establish(bool enable_ports /* = true */, bool dis
     omx_err = m_DllOMX->OMX_SetupTunnel(m_src_component->GetComponent(), m_src_port, m_dst_component->GetComponent(), m_dst_port);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "COMXCoreTunnel::Establish - could not setup tunnel src %s port %d dst %s port %d omx_err(0x%08x)\n",
+      CLog::Log(LOGERROR, "COMXCoreTunnel::Establish - could not setup tunnel src %s port %d dst %s port %d omx_err(0x%08x)",
           m_src_component->GetName().c_str(), m_src_port, m_dst_component->GetName().c_str(), m_dst_port, (int)omx_err);
       return omx_err;
     }
   }
   else
   {
-    CLog::Log(LOGERROR, "COMXCoreTunnel::Establish - could not setup tunnel\n");
+    CLog::Log(LOGERROR, "COMXCoreTunnel::Establish - could not setup tunnel");
     return OMX_ErrorUndefined;
   }
 
@@ -335,7 +335,7 @@ OMX_ERRORTYPE COMXCoreComponent::EmptyThisBuffer(OMX_BUFFERHEADERTYPE *omx_buffe
   OMX_ERRORTYPE omx_err = OMX_ErrorNone;
 
   #if defined(OMX_DEBUG_EVENTHANDLER)
-  CLog::Log(LOGDEBUG, "COMXCoreComponent::EmptyThisBuffer component(%s) %p\n", m_componentName.c_str(), omx_buffer);
+  CLog::Log(LOGDEBUG, "COMXCoreComponent::EmptyThisBuffer component(%s) %p", m_componentName.c_str(), omx_buffer);
   #endif
   if(!m_handle || !omx_buffer)
     return OMX_ErrorUndefined;
@@ -343,7 +343,7 @@ OMX_ERRORTYPE COMXCoreComponent::EmptyThisBuffer(OMX_BUFFERHEADERTYPE *omx_buffe
   omx_err = OMX_EmptyThisBuffer(m_handle, omx_buffer);
   if (omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "COMXCoreComponent::EmptyThisBuffer component(%s) - failed with result(0x%x)\n",
+    CLog::Log(LOGERROR, "COMXCoreComponent::EmptyThisBuffer component(%s) - failed with result(0x%x)",
         m_componentName.c_str(), omx_err);
   }
 
@@ -355,7 +355,7 @@ OMX_ERRORTYPE COMXCoreComponent::FillThisBuffer(OMX_BUFFERHEADERTYPE *omx_buffer
   OMX_ERRORTYPE omx_err = OMX_ErrorNone;
 
   #if defined(OMX_DEBUG_EVENTHANDLER)
-  CLog::Log(LOGDEBUG, "COMXCoreComponent::FillThisBuffer component(%s) %p\n", m_componentName.c_str(), omx_buffer);
+  CLog::Log(LOGDEBUG, "COMXCoreComponent::FillThisBuffer component(%s) %p", m_componentName.c_str(), omx_buffer);
   #endif
   if(!m_handle || !omx_buffer)
     return OMX_ErrorUndefined;
@@ -363,7 +363,7 @@ OMX_ERRORTYPE COMXCoreComponent::FillThisBuffer(OMX_BUFFERHEADERTYPE *omx_buffer
   omx_err = OMX_FillThisBuffer(m_handle, omx_buffer);
   if (omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "COMXCoreComponent::FillThisBuffer component(%s) - failed with result(0x%x)\n",
+    CLog::Log(LOGERROR, "COMXCoreComponent::FillThisBuffer component(%s) - failed with result(0x%x)",
         m_componentName.c_str(), omx_err);
   }
 
@@ -380,7 +380,7 @@ OMX_ERRORTYPE COMXCoreComponent::FreeOutputBuffer(OMX_BUFFERHEADERTYPE *omx_buff
   omx_err = OMX_FreeBuffer(m_handle, m_output_port, omx_buffer);
   if (omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "COMXCoreComponent::FreeOutputBuffer component(%s) - failed with result(0x%x)\n",
+    CLog::Log(LOGERROR, "COMXCoreComponent::FreeOutputBuffer component(%s) - failed with result(0x%x)",
         m_componentName.c_str(), omx_err);
   }
 
@@ -449,7 +449,7 @@ OMX_BUFFERHEADERTYPE *COMXCoreComponent::GetInputBuffer(long timeout /*=200*/)
     int retcode = pthread_cond_timedwait(&m_input_buffer_cond, &m_omx_input_mutex, &endtime);
     if (retcode != 0) {
       if (timeout != 0)
-        CLog::Log(LOGERROR, "COMXCoreComponent::GetInputBuffer %s wait event timeout\n", m_componentName.c_str());
+        CLog::Log(LOGERROR, "COMXCoreComponent::GetInputBuffer %s wait event timeout", m_componentName.c_str());
       break;
     }
   }
@@ -481,7 +481,7 @@ OMX_BUFFERHEADERTYPE *COMXCoreComponent::GetOutputBuffer(long timeout /*=200*/)
 
     int retcode = pthread_cond_timedwait(&m_output_buffer_cond, &m_omx_output_mutex, &endtime);
     if (retcode != 0) {
-      CLog::Log(LOGERROR, "COMXCoreComponent::GetOutputBuffer %s wait event timeout\n", m_componentName.c_str());
+      CLog::Log(LOGERROR, "COMXCoreComponent::GetOutputBuffer %s wait event timeout", m_componentName.c_str());
       break;
     }
   }
@@ -506,7 +506,7 @@ OMX_ERRORTYPE COMXCoreComponent::WaitForInputDone(long timeout /*=200*/)
     int retcode = pthread_cond_timedwait(&m_input_buffer_cond, &m_omx_input_mutex, &endtime);
     if (retcode != 0) {
       if (timeout != 0)
-        CLog::Log(LOGERROR, "COMXCoreComponent::WaitForInputDone %s wait event timeout\n", m_componentName.c_str());
+        CLog::Log(LOGERROR, "COMXCoreComponent::WaitForInputDone %s wait event timeout", m_componentName.c_str());
       omx_err = OMX_ErrorTimeout;
       break;
     }
@@ -531,7 +531,7 @@ OMX_ERRORTYPE COMXCoreComponent::WaitForOutputDone(long timeout /*=200*/)
     int retcode = pthread_cond_timedwait(&m_output_buffer_cond, &m_omx_output_mutex, &endtime);
     if (retcode != 0) {
       if (timeout != 0)
-        CLog::Log(LOGERROR, "COMXCoreComponent::WaitForOutputDone %s wait event timeout\n", m_componentName.c_str());
+        CLog::Log(LOGERROR, "COMXCoreComponent::WaitForOutputDone %s wait event timeout", m_componentName.c_str());
       omx_err = OMX_ErrorTimeout;
       break;
     }
@@ -572,7 +572,7 @@ OMX_ERRORTYPE COMXCoreComponent::AllocInputBuffers()
   m_input_buffer_count  = portFormat.nBufferCountActual;
   m_input_buffer_size   = portFormat.nBufferSize;
 
-  CLog::Log(LOGDEBUG, "COMXCoreComponent::AllocInputBuffers component(%s) - port(%d), nBufferCountMin(%u), nBufferCountActual(%u), nBufferSize(%u), nBufferAlignment(%u)\n",
+  CLog::Log(LOGDEBUG, "COMXCoreComponent::AllocInputBuffers component(%s) - port(%d), nBufferCountMin(%u), nBufferCountActual(%u), nBufferSize(%u), nBufferAlignment(%u)",
             m_componentName.c_str(), GetInputPort(), portFormat.nBufferCountMin,
             portFormat.nBufferCountActual, portFormat.nBufferSize, portFormat.nBufferAlignment);
 
@@ -583,7 +583,7 @@ OMX_ERRORTYPE COMXCoreComponent::AllocInputBuffers()
     omx_err = OMX_AllocateBuffer(m_handle, &buffer, m_input_port, NULL, portFormat.nBufferSize);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "COMXCoreComponent::AllocInputBuffers component(%s) - OMX_UseBuffer failed with omx_err(0x%x)\n",
+      CLog::Log(LOGERROR, "COMXCoreComponent::AllocInputBuffers component(%s) - OMX_UseBuffer failed with omx_err(0x%x)",
         m_componentName.c_str(), omx_err);
       return omx_err;
     }
@@ -598,7 +598,7 @@ OMX_ERRORTYPE COMXCoreComponent::AllocInputBuffers()
   omx_err = WaitForCommand(OMX_CommandPortEnable, m_input_port);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "COMXCoreComponent::AllocInputBuffers WaitForCommand:OMX_CommandPortEnable failed on %s omx_err(0x%08x)\n", m_componentName.c_str(), omx_err);
+    CLog::Log(LOGERROR, "COMXCoreComponent::AllocInputBuffers WaitForCommand:OMX_CommandPortEnable failed on %s omx_err(0x%08x)", m_componentName.c_str(), omx_err);
     return omx_err;
   }
 
@@ -638,7 +638,7 @@ OMX_ERRORTYPE COMXCoreComponent::AllocOutputBuffers()
   m_output_buffer_count  = portFormat.nBufferCountActual;
   m_output_buffer_size   = portFormat.nBufferSize;
 
-  CLog::Log(LOGDEBUG, "COMXCoreComponent::AllocOutputBuffers component(%s) - port(%d), nBufferCountMin(%u), nBufferCountActual(%u), nBufferSize(%u) nBufferAlignment(%u)\n",
+  CLog::Log(LOGDEBUG, "COMXCoreComponent::AllocOutputBuffers component(%s) - port(%d), nBufferCountMin(%u), nBufferCountActual(%u), nBufferSize(%u) nBufferAlignment(%u)",
             m_componentName.c_str(), m_output_port, portFormat.nBufferCountMin,
             portFormat.nBufferCountActual, portFormat.nBufferSize, portFormat.nBufferAlignment);
 
@@ -649,7 +649,7 @@ OMX_ERRORTYPE COMXCoreComponent::AllocOutputBuffers()
     omx_err = OMX_AllocateBuffer(m_handle, &buffer, m_output_port, NULL, portFormat.nBufferSize);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "COMXCoreComponent::AllocOutputBuffers component(%s) - OMX_UseBuffer failed with omx_err(0x%x)\n",
+      CLog::Log(LOGERROR, "COMXCoreComponent::AllocOutputBuffers component(%s) - OMX_UseBuffer failed with omx_err(0x%x)",
         m_componentName.c_str(), omx_err);
       return omx_err;
     }
@@ -664,7 +664,7 @@ OMX_ERRORTYPE COMXCoreComponent::AllocOutputBuffers()
   omx_err = WaitForCommand(OMX_CommandPortEnable, m_output_port);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "COMXCoreComponent::AllocOutputBuffers WaitForCommand:OMX_CommandPortEnable failed on %s omx_err(0x%08x)\n", m_componentName.c_str(), omx_err);
+    CLog::Log(LOGERROR, "COMXCoreComponent::AllocOutputBuffers WaitForCommand:OMX_CommandPortEnable failed on %s omx_err(0x%08x)", m_componentName.c_str(), omx_err);
     return omx_err;
   }
 
@@ -695,7 +695,7 @@ OMX_ERRORTYPE COMXCoreComponent::FreeInputBuffers()
     omx_err = OMX_FreeBuffer(m_handle, m_input_port, m_omx_input_buffers[i]);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "COMXCoreComponent::FreeInputBuffers error deallocate omx input buffer on component %s omx_err(0x%08x)\n", m_componentName.c_str(), omx_err);
+      CLog::Log(LOGERROR, "COMXCoreComponent::FreeInputBuffers error deallocate omx input buffer on component %s omx_err(0x%08x)", m_componentName.c_str(), omx_err);
     }
   }
   pthread_mutex_unlock(&m_omx_input_mutex);
@@ -703,7 +703,7 @@ OMX_ERRORTYPE COMXCoreComponent::FreeInputBuffers()
   omx_err = WaitForCommand(OMX_CommandPortDisable, m_input_port);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "COMXCoreComponent::FreeInputBuffers WaitForCommand:OMX_CommandPortDisable failed on %s omx_err(0x%08x)\n", m_componentName.c_str(), omx_err);
+    CLog::Log(LOGERROR, "COMXCoreComponent::FreeInputBuffers WaitForCommand:OMX_CommandPortDisable failed on %s omx_err(0x%08x)", m_componentName.c_str(), omx_err);
   }
 
   WaitForInputDone(1000);
@@ -747,7 +747,7 @@ OMX_ERRORTYPE COMXCoreComponent::FreeOutputBuffers()
     omx_err = OMX_FreeBuffer(m_handle, m_output_port, m_omx_output_buffers[i]);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "COMXCoreComponent::FreeOutputBuffers error deallocate omx output buffer on component %s omx_err(0x%08x)\n", m_componentName.c_str(), omx_err);
+      CLog::Log(LOGERROR, "COMXCoreComponent::FreeOutputBuffers error deallocate omx output buffer on component %s omx_err(0x%08x)", m_componentName.c_str(), omx_err);
     }
   }
   pthread_mutex_unlock(&m_omx_output_mutex);
@@ -755,7 +755,7 @@ OMX_ERRORTYPE COMXCoreComponent::FreeOutputBuffers()
   omx_err = WaitForCommand(OMX_CommandPortDisable, m_output_port);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "COMXCoreComponent::FreeOutputBuffers WaitForCommand:OMX_CommandPortDisable failed on %s omx_err(0x%08x)\n", m_componentName.c_str(), omx_err);
+    CLog::Log(LOGERROR, "COMXCoreComponent::FreeOutputBuffers WaitForCommand:OMX_CommandPortDisable failed on %s omx_err(0x%08x)", m_componentName.c_str(), omx_err);
   }
 
   WaitForOutputDone(1000);
@@ -861,7 +861,7 @@ OMX_ERRORTYPE COMXCoreComponent::AddEvent(OMX_EVENTTYPE eEvent, OMX_U32 nData1,
   pthread_mutex_unlock(&m_omx_event_mutex);
 
 #ifdef OMX_DEBUG_EVENTS
-  CLog::Log(LOGDEBUG, "COMXCoreComponent::AddEvent %s add event event.eEvent 0x%08x event.nData1 0x%08x event.nData2 %d\n",
+  CLog::Log(LOGDEBUG, "COMXCoreComponent::AddEvent %s add event event.eEvent 0x%08x event.nData1 0x%08x event.nData2 %d",
           m_componentName.c_str(), (int)event.eEvent, (int)event.nData1, (int)event.nData2);
 #endif
 
@@ -872,7 +872,7 @@ OMX_ERRORTYPE COMXCoreComponent::AddEvent(OMX_EVENTTYPE eEvent, OMX_U32 nData1,
 OMX_ERRORTYPE COMXCoreComponent::WaitForEvent(OMX_EVENTTYPE eventType, long timeout)
 {
 #ifdef OMX_DEBUG_EVENTS
-  CLog::Log(LOGDEBUG, "COMXCoreComponent::WaitForEvent %s wait event 0x%08x\n",
+  CLog::Log(LOGDEBUG, "COMXCoreComponent::WaitForEvent %s wait event 0x%08x",
       m_componentName.c_str(), (int)eventType);
 #endif
 
@@ -887,7 +887,7 @@ OMX_ERRORTYPE COMXCoreComponent::WaitForEvent(OMX_EVENTTYPE eventType, long time
       omx_event event = *it;
 
 #ifdef OMX_DEBUG_EVENTS
-      CLog::Log(LOGDEBUG, "COMXCoreComponent::WaitForEvent %s inlist event event.eEvent 0x%08x event.nData1 0x%08x event.nData2 %d\n",
+      CLog::Log(LOGDEBUG, "COMXCoreComponent::WaitForEvent %s inlist event event.eEvent 0x%08x event.nData1 0x%08x event.nData2 %d",
           m_componentName.c_str(), (int)event.eEvent, (int)event.nData1, (int)event.nData2);
 #endif
 
@@ -895,7 +895,7 @@ OMX_ERRORTYPE COMXCoreComponent::WaitForEvent(OMX_EVENTTYPE eventType, long time
       if(event.eEvent == OMX_EventError && event.nData1 == (OMX_U32)OMX_ErrorSameState && event.nData2 == 1)
       {
 #ifdef OMX_DEBUG_EVENTS
-        CLog::Log(LOGDEBUG, "COMXCoreComponent::WaitForEvent %s remove event event.eEvent 0x%08x event.nData1 0x%08x event.nData2 %d\n",
+        CLog::Log(LOGDEBUG, "COMXCoreComponent::WaitForEvent %s remove event event.eEvent 0x%08x event.nData1 0x%08x event.nData2 %d",
           m_componentName.c_str(), (int)event.eEvent, (int)event.nData1, (int)event.nData2);
 #endif
         m_omx_events.erase(it);
@@ -911,7 +911,7 @@ OMX_ERRORTYPE COMXCoreComponent::WaitForEvent(OMX_EVENTTYPE eventType, long time
       else if(event.eEvent == eventType)
       {
 #ifdef OMX_DEBUG_EVENTS
-        CLog::Log(LOGDEBUG, "COMXCoreComponent::WaitForEvent %s remove event event.eEvent 0x%08x event.nData1 0x%08x event.nData2 %d\n",
+        CLog::Log(LOGDEBUG, "COMXCoreComponent::WaitForEvent %s remove event event.eEvent 0x%08x event.nData1 0x%08x event.nData2 %d",
           m_componentName.c_str(), (int)event.eEvent, (int)event.nData1, (int)event.nData2);
 #endif
 
@@ -927,7 +927,7 @@ OMX_ERRORTYPE COMXCoreComponent::WaitForEvent(OMX_EVENTTYPE eventType, long time
     if (retcode != 0)
     {
       if (timeout > 0)
-        CLog::Log(LOGERROR, "COMXCoreComponent::WaitForEvent %s wait event 0x%08x timeout %ld\n",
+        CLog::Log(LOGERROR, "COMXCoreComponent::WaitForEvent %s wait event 0x%08x timeout %ld",
                           m_componentName.c_str(), (int)eventType, timeout);
       pthread_mutex_unlock(&m_omx_event_mutex);
       return OMX_ErrorTimeout;
@@ -941,7 +941,7 @@ OMX_ERRORTYPE COMXCoreComponent::WaitForEvent(OMX_EVENTTYPE eventType, long time
 OMX_ERRORTYPE COMXCoreComponent::WaitForCommand(OMX_U32 command, OMX_U32 nData2, long timeout)
 {
 #ifdef OMX_DEBUG_EVENTS
-  CLog::Log(LOGDEBUG, "COMXCoreComponent::WaitForCommand %s wait event.eEvent 0x%08x event.command 0x%08x event.nData2 %d\n",
+  CLog::Log(LOGDEBUG, "COMXCoreComponent::WaitForCommand %s wait event.eEvent 0x%08x event.command 0x%08x event.nData2 %d",
       m_componentName.c_str(), (int)OMX_EventCmdComplete, (int)command, (int)nData2);
 #endif
 
@@ -956,13 +956,13 @@ OMX_ERRORTYPE COMXCoreComponent::WaitForCommand(OMX_U32 command, OMX_U32 nData2,
       omx_event event = *it;
 
 #ifdef OMX_DEBUG_EVENTS
-      CLog::Log(LOGDEBUG, "COMXCoreComponent::WaitForCommand %s inlist event event.eEvent 0x%08x event.nData1 0x%08x event.nData2 %d\n",
+      CLog::Log(LOGDEBUG, "COMXCoreComponent::WaitForCommand %s inlist event event.eEvent 0x%08x event.nData1 0x%08x event.nData2 %d",
           m_componentName.c_str(), (int)event.eEvent, (int)event.nData1, (int)event.nData2);
 #endif
       if(event.eEvent == OMX_EventError && event.nData1 == (OMX_U32)OMX_ErrorSameState && event.nData2 == 1)
       {
 #ifdef OMX_DEBUG_EVENTS
-        CLog::Log(LOGDEBUG, "COMXCoreComponent::WaitForCommand %s remove event event.eEvent 0x%08x event.nData1 0x%08x event.nData2 %d\n",
+        CLog::Log(LOGDEBUG, "COMXCoreComponent::WaitForCommand %s remove event event.eEvent 0x%08x event.nData1 0x%08x event.nData2 %d",
           m_componentName.c_str(), (int)event.eEvent, (int)event.nData1, (int)event.nData2);
 #endif
 
@@ -980,7 +980,7 @@ OMX_ERRORTYPE COMXCoreComponent::WaitForCommand(OMX_U32 command, OMX_U32 nData2,
       {
 
 #ifdef OMX_DEBUG_EVENTS
-        CLog::Log(LOGDEBUG, "COMXCoreComponent::WaitForCommand %s remove event event.eEvent 0x%08x event.nData1 0x%08x event.nData2 %d\n",
+        CLog::Log(LOGDEBUG, "COMXCoreComponent::WaitForCommand %s remove event event.eEvent 0x%08x event.nData1 0x%08x event.nData2 %d",
           m_componentName.c_str(), (int)event.eEvent, (int)event.nData1, (int)event.nData2);
 #endif
 
@@ -994,7 +994,7 @@ OMX_ERRORTYPE COMXCoreComponent::WaitForCommand(OMX_U32 command, OMX_U32 nData2,
       break;
     int retcode = pthread_cond_timedwait(&m_omx_event_cond, &m_omx_event_mutex, &endtime);
     if (retcode != 0) {
-      CLog::Log(LOGERROR, "COMXCoreComponent::WaitForCommand %s wait timeout event.eEvent 0x%08x event.command 0x%08x event.nData2 %d\n",
+      CLog::Log(LOGERROR, "COMXCoreComponent::WaitForCommand %s wait timeout event.eEvent 0x%08x event.command 0x%08x event.nData2 %d",
         m_componentName.c_str(), (int)OMX_EventCmdComplete, (int)command, (int)nData2);
 
       pthread_mutex_unlock(&m_omx_event_mutex);
@@ -1021,13 +1021,13 @@ OMX_ERRORTYPE COMXCoreComponent::SetStateForComponent(OMX_STATETYPE state)
   {
     if(omx_err == OMX_ErrorSameState)
     {
-      CLog::Log(LOGERROR, "COMXCoreComponent::SetStateForComponent - %s same state\n",
+      CLog::Log(LOGERROR, "COMXCoreComponent::SetStateForComponent - %s same state",
         m_componentName.c_str());
       omx_err = OMX_ErrorNone;
     }
     else
     {
-      CLog::Log(LOGERROR, "COMXCoreComponent::SetStateForComponent - %s failed with omx_err(0x%x)\n",
+      CLog::Log(LOGERROR, "COMXCoreComponent::SetStateForComponent - %s failed with omx_err(0x%x)",
         m_componentName.c_str(), omx_err);
     }
   }
@@ -1036,7 +1036,7 @@ OMX_ERRORTYPE COMXCoreComponent::SetStateForComponent(OMX_STATETYPE state)
     omx_err = WaitForCommand(OMX_CommandStateSet, state);
     if (omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "COMXCoreComponent::WaitForCommand - %s failed with omx_err(0x%x)\n",
+      CLog::Log(LOGERROR, "COMXCoreComponent::WaitForCommand - %s failed with omx_err(0x%x)",
         m_componentName.c_str(), omx_err);
     }
   }
@@ -1064,7 +1064,7 @@ OMX_ERRORTYPE COMXCoreComponent::SetParameter(OMX_INDEXTYPE paramIndex, OMX_PTR
   omx_err = OMX_SetParameter(m_handle, paramIndex, paramStruct);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "COMXCoreComponent::SetParameter - %s failed with omx_err(0x%x)\n",
+    CLog::Log(LOGERROR, "COMXCoreComponent::SetParameter - %s failed with omx_err(0x%x)",
               m_componentName.c_str(), omx_err);
   }
   return omx_err;
@@ -1080,7 +1080,7 @@ OMX_ERRORTYPE COMXCoreComponent::GetParameter(OMX_INDEXTYPE paramIndex, OMX_PTR
   omx_err = OMX_GetParameter(m_handle, paramIndex, paramStruct);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "COMXCoreComponent::GetParameter - %s failed with omx_err(0x%x)\n",
+    CLog::Log(LOGERROR, "COMXCoreComponent::GetParameter - %s failed with omx_err(0x%x)",
               m_componentName.c_str(), omx_err);
   }
   return omx_err;
@@ -1096,7 +1096,7 @@ OMX_ERRORTYPE COMXCoreComponent::SetConfig(OMX_INDEXTYPE configIndex, OMX_PTR co
   omx_err = OMX_SetConfig(m_handle, configIndex, configStruct);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "COMXCoreComponent::SetConfig - %s failed with omx_err(0x%x)\n",
+    CLog::Log(LOGERROR, "COMXCoreComponent::SetConfig - %s failed with omx_err(0x%x)",
               m_componentName.c_str(), omx_err);
   }
   return omx_err;
@@ -1112,7 +1112,7 @@ OMX_ERRORTYPE COMXCoreComponent::GetConfig(OMX_INDEXTYPE configIndex, OMX_PTR co
   omx_err = OMX_GetConfig(m_handle, configIndex, configStruct);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "COMXCoreComponent::GetConfig - %s failed with omx_err(0x%x)\n",
+    CLog::Log(LOGERROR, "COMXCoreComponent::GetConfig - %s failed with omx_err(0x%x)",
               m_componentName.c_str(), omx_err);
   }
   return omx_err;
@@ -1128,7 +1128,7 @@ OMX_ERRORTYPE COMXCoreComponent::SendCommand(OMX_COMMANDTYPE cmd, OMX_U32 cmdPar
   omx_err = OMX_SendCommand(m_handle, cmd, cmdParam, cmdParamData);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "COMXCoreComponent::SendCommand - %s failed with omx_err(0x%x)\n",
+    CLog::Log(LOGERROR, "COMXCoreComponent::SendCommand - %s failed with omx_err(0x%x)",
               m_componentName.c_str(), omx_err);
   }
   return omx_err;
@@ -1244,7 +1244,7 @@ OMX_ERRORTYPE COMXCoreComponent::UseEGLImage(OMX_BUFFERHEADERTYPE** ppBufferHdr,
     return omx_err;
   }
 
-  CLog::Log(LOGDEBUG, "%s::%s component(%s) - port(%d), nBufferCountMin(%u), nBufferCountActual(%u), nBufferSize(%u) nBufferAlignment(%u)\n",
+  CLog::Log(LOGDEBUG, "%s::%s component(%s) - port(%d), nBufferCountMin(%u), nBufferCountActual(%u), nBufferSize(%u) nBufferAlignment(%u)",
             CLASSNAME, __func__, m_componentName.c_str(), m_output_port, portFormat.nBufferCountMin,
             portFormat.nBufferCountActual, portFormat.nBufferSize, portFormat.nBufferAlignment);
 
@@ -1253,7 +1253,7 @@ OMX_ERRORTYPE COMXCoreComponent::UseEGLImage(OMX_BUFFERHEADERTYPE** ppBufferHdr,
     omx_err = OMX_UseEGLImage(m_handle, ppBufferHdr, nPortIndex, pAppPrivate, eglImage);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s - %s failed with omx_err(0x%x)\n",
+      CLog::Log(LOGERROR, "%s::%s - %s failed with omx_err(0x%x)",
                 CLASSNAME, __func__, m_componentName.c_str(), omx_err);
       return omx_err;
     }
@@ -1270,7 +1270,7 @@ OMX_ERRORTYPE COMXCoreComponent::UseEGLImage(OMX_BUFFERHEADERTYPE** ppBufferHdr,
   omx_err = WaitForCommand(OMX_CommandPortEnable, m_output_port);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, " %s::%s - %s EnablePort failed with omx_err(0x%x)\n",
+    CLog::Log(LOGERROR, " %s::%s - %s EnablePort failed with omx_err(0x%x)",
               CLASSNAME, __func__, m_componentName.c_str(), omx_err);
       return omx_err;
   }
@@ -1317,7 +1317,7 @@ bool COMXCoreComponent::Initialize( const std::string &component_name, OMX_INDEX
     omx_err = m_DllOMX->OMX_GetHandle(&m_handle, (char*)component_name.c_str(), this, &m_callbacks);
     if (!m_handle || omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "COMXCoreComponent::Initialize - could not get component handle for %s omx_err(0x%08x)\n",
+      CLog::Log(LOGERROR, "COMXCoreComponent::Initialize - could not get component handle for %s omx_err(0x%08x)",
           component_name.c_str(), (int)omx_err);
       Deinitialize();
       return false;
@@ -1330,14 +1330,14 @@ bool COMXCoreComponent::Initialize( const std::string &component_name, OMX_INDEX
   omx_err = OMX_GetParameter(m_handle, index, &port_param);
   if (omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "COMXCoreComponent::Initialize - could not get port_param for component %s omx_err(0x%08x)\n",
+    CLog::Log(LOGERROR, "COMXCoreComponent::Initialize - could not get port_param for component %s omx_err(0x%08x)",
         component_name.c_str(), (int)omx_err);
   }
 
   omx_err = DisableAllPorts();
   if (omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "COMXCoreComponent::Initialize - error disable ports on component %s omx_err(0x%08x)\n",
+    CLog::Log(LOGERROR, "COMXCoreComponent::Initialize - error disable ports on component %s omx_err(0x%08x)",
         component_name.c_str(), (int)omx_err);
   }
 
@@ -1353,7 +1353,7 @@ bool COMXCoreComponent::Initialize( const std::string &component_name, OMX_INDEX
   if (m_output_port > port_param.nStartPortNumber+port_param.nPorts-1)
     m_output_port = port_param.nStartPortNumber+port_param.nPorts-1;
 
-  CLog::Log(LOGDEBUG, "COMXCoreComponent::Initialize %s input port %d output port %d m_handle %p\n",
+  CLog::Log(LOGDEBUG, "COMXCoreComponent::Initialize %s input port %d output port %d m_handle %p",
       m_componentName.c_str(), m_input_port, m_output_port, m_handle);
 
   m_exit = false;
@@ -1388,7 +1388,7 @@ bool COMXCoreComponent::Deinitialize()
 
     TransitionToStateLoaded();
 
-    CLog::Log(LOGDEBUG, "COMXCoreComponent::Deinitialize : %s handle %p\n",
+    CLog::Log(LOGDEBUG, "COMXCoreComponent::Deinitialize : %s handle %p",
         m_componentName.c_str(), m_handle);
     omx_err = m_DllOMX->OMX_FreeHandle(m_handle);
     if (omx_err != OMX_ErrorNone)
@@ -1456,7 +1456,7 @@ OMX_ERRORTYPE COMXCoreComponent::DecoderEmptyBufferDone(OMX_HANDLETYPE hComponen
     return OMX_ErrorNone;
 
   #if defined(OMX_DEBUG_EVENTHANDLER)
-  CLog::Log(LOGDEBUG, "COMXCoreComponent::DecoderEmptyBufferDone component(%s) %p %d/%d\n", m_componentName.c_str(), pBuffer, m_omx_input_available.size(), m_input_buffer_count);
+  CLog::Log(LOGDEBUG, "COMXCoreComponent::DecoderEmptyBufferDone component(%s) %p %d/%d", m_componentName.c_str(), pBuffer, m_omx_input_available.size(), m_input_buffer_count);
   #endif
   pthread_mutex_lock(&m_omx_input_mutex);
   m_omx_input_available.push(pBuffer);
@@ -1475,7 +1475,7 @@ OMX_ERRORTYPE COMXCoreComponent::DecoderFillBufferDone(OMX_HANDLETYPE hComponent
     return OMX_ErrorNone;
 
   #if defined(OMX_DEBUG_EVENTHANDLER)
-  CLog::Log(LOGDEBUG, "COMXCoreComponent::DecoderFillBufferDone component(%s) %p %d/%d\n", m_componentName.c_str(), pBuffer, m_omx_output_available.size(), m_output_buffer_count);
+  CLog::Log(LOGDEBUG, "COMXCoreComponent::DecoderFillBufferDone component(%s) %p %d/%d", m_componentName.c_str(), pBuffer, m_omx_output_available.size(), m_output_buffer_count);
   #endif
   pthread_mutex_lock(&m_omx_output_mutex);
   m_omx_output_available.push(pBuffer);
@@ -1526,32 +1526,32 @@ OMX_ERRORTYPE COMXCoreComponent::DecoderEventHandler(
           {
             case OMX_StateInvalid:
             #if defined(OMX_DEBUG_EVENTHANDLER)
-              CLog::Log(LOGDEBUG, "%s::%s %s - OMX_StateInvalid\n", CLASSNAME, __func__, GetName().c_str());
+              CLog::Log(LOGDEBUG, "%s::%s %s - OMX_StateInvalid", CLASSNAME, __func__, GetName().c_str());
             #endif
             break;
             case OMX_StateLoaded:
             #if defined(OMX_DEBUG_EVENTHANDLER)
-              CLog::Log(LOGDEBUG, "%s::%s %s - OMX_StateLoaded\n", CLASSNAME, __func__, GetName().c_str());
+              CLog::Log(LOGDEBUG, "%s::%s %s - OMX_StateLoaded", CLASSNAME, __func__, GetName().c_str());
             #endif
             break;
             case OMX_StateIdle:
             #if defined(OMX_DEBUG_EVENTHANDLER)
-              CLog::Log(LOGDEBUG, "%s::%s %s - OMX_StateIdle\n", CLASSNAME, __func__, GetName().c_str());
+              CLog::Log(LOGDEBUG, "%s::%s %s - OMX_StateIdle", CLASSNAME, __func__, GetName().c_str());
             #endif
             break;
             case OMX_StateExecuting:
             #if defined(OMX_DEBUG_EVENTHANDLER)
-              CLog::Log(LOGDEBUG, "%s::%s %s - OMX_StateExecuting\n", CLASSNAME, __func__, GetName().c_str());
+              CLog::Log(LOGDEBUG, "%s::%s %s - OMX_StateExecuting", CLASSNAME, __func__, GetName().c_str());
             #endif
             break;
             case OMX_StatePause:
             #if defined(OMX_DEBUG_EVENTHANDLER)
-              CLog::Log(LOGDEBUG, "%s::%s %s - OMX_StatePause\n", CLASSNAME, __func__, GetName().c_str());
+              CLog::Log(LOGDEBUG, "%s::%s %s - OMX_StatePause", CLASSNAME, __func__, GetName().c_str());
             #endif
             break;
             case OMX_StateWaitForResources:
             #if defined(OMX_DEBUG_EVENTHANDLER)
-              CLog::Log(LOGDEBUG, "%s::%s %s - OMX_StateWaitForResources\n", CLASSNAME, __func__, GetName().c_str());
+              CLog::Log(LOGDEBUG, "%s::%s %s - OMX_StateWaitForResources", CLASSNAME, __func__, GetName().c_str());
             #endif
             break;
             default:
@@ -1564,29 +1564,29 @@ OMX_ERRORTYPE COMXCoreComponent::DecoderEventHandler(
         break;
         case OMX_CommandFlush:
           #if defined(OMX_DEBUG_EVENTHANDLER)
-          CLog::Log(LOGDEBUG, "%s::%s %s - OMX_CommandFlush, port %d\n", CLASSNAME, __func__, GetName().c_str(), (int)nData2);
+          CLog::Log(LOGDEBUG, "%s::%s %s - OMX_CommandFlush, port %d", CLASSNAME, __func__, GetName().c_str(), (int)nData2);
           #endif
         break;
         case OMX_CommandPortDisable:
           #if defined(OMX_DEBUG_EVENTHANDLER)
-          CLog::Log(LOGDEBUG, "%s::%s %s - OMX_CommandPortDisable, nData1(0x%x), port %d\n", CLASSNAME, __func__, GetName().c_str(), nData1, (int)nData2);
+          CLog::Log(LOGDEBUG, "%s::%s %s - OMX_CommandPortDisable, nData1(0x%x), port %d", CLASSNAME, __func__, GetName().c_str(), nData1, (int)nData2);
           #endif
         break;
         case OMX_CommandPortEnable:
           #if defined(OMX_DEBUG_EVENTHANDLER)
-          CLog::Log(LOGDEBUG, "%s::%s %s - OMX_CommandPortEnable, nData1(0x%x), port %d\n", CLASSNAME, __func__, GetName().c_str(), nData1, (int)nData2);
+          CLog::Log(LOGDEBUG, "%s::%s %s - OMX_CommandPortEnable, nData1(0x%x), port %d", CLASSNAME, __func__, GetName().c_str(), nData1, (int)nData2);
           #endif
         break;
         #if defined(OMX_DEBUG_EVENTHANDLER)
         case OMX_CommandMarkBuffer:
-          CLog::Log(LOGDEBUG, "%s::%s %s - OMX_CommandMarkBuffer, nData1(0x%x), port %d\n", CLASSNAME, __func__, GetName().c_str(), nData1, (int)nData2);
+          CLog::Log(LOGDEBUG, "%s::%s %s - OMX_CommandMarkBuffer, nData1(0x%x), port %d", CLASSNAME, __func__, GetName().c_str(), nData1, (int)nData2);
         break;
         #endif
       }
     break;
     case OMX_EventBufferFlag:
       #if defined(OMX_DEBUG_EVENTHANDLER)
-      CLog::Log(LOGDEBUG, "%s::%s %s - OMX_EventBufferFlag(input)\n", CLASSNAME, __func__, GetName().c_str());
+      CLog::Log(LOGDEBUG, "%s::%s %s - OMX_EventBufferFlag(input)", CLASSNAME, __func__, GetName().c_str());
       #endif
       if(nData2 & OMX_BUFFERFLAG_EOS)
       {
@@ -1597,20 +1597,20 @@ OMX_ERRORTYPE COMXCoreComponent::DecoderEventHandler(
     break;
     case OMX_EventPortSettingsChanged:
       #if defined(OMX_DEBUG_EVENTHANDLER)
-      CLog::Log(LOGDEBUG, "%s::%s %s - OMX_EventPortSettingsChanged(output)\n", CLASSNAME, __func__, GetName().c_str());
+      CLog::Log(LOGDEBUG, "%s::%s %s - OMX_EventPortSettingsChanged(output)", CLASSNAME, __func__, GetName().c_str());
       #endif
     break;
     case OMX_EventParamOrConfigChanged:
       #if defined(OMX_DEBUG_EVENTHANDLER)
-      CLog::Log(LOGDEBUG, "%s::%s %s - OMX_EventParamOrConfigChanged(output)\n", CLASSNAME, __func__, GetName().c_str());
+      CLog::Log(LOGDEBUG, "%s::%s %s - OMX_EventParamOrConfigChanged(output)", CLASSNAME, __func__, GetName().c_str());
       #endif
     break;
     #if defined(OMX_DEBUG_EVENTHANDLER)
     case OMX_EventMark:
-      CLog::Log(LOGDEBUG, "%s::%s %s - OMX_EventMark\n", CLASSNAME, __func__, GetName().c_str());
+      CLog::Log(LOGDEBUG, "%s::%s %s - OMX_EventMark", CLASSNAME, __func__, GetName().c_str());
     break;
     case OMX_EventResourcesAcquired:
-      CLog::Log(LOGDEBUG, "%s::%s %s- OMX_EventResourcesAcquired\n", CLASSNAME, __func__, GetName().c_str());
+      CLog::Log(LOGDEBUG, "%s::%s %s- OMX_EventResourcesAcquired", CLASSNAME, __func__, GetName().c_str());
     break;
     #endif
     case OMX_EventError:
@@ -1618,28 +1618,28 @@ OMX_ERRORTYPE COMXCoreComponent::DecoderEventHandler(
       {
         case OMX_ErrorSameState:
           //#if defined(OMX_DEBUG_EVENTHANDLER)
-          //CLog::Log(LOGERROR, "%s::%s %s - OMX_ErrorSameState, same state\n", CLASSNAME, __func__, GetName().c_str());
+          //CLog::Log(LOGERROR, "%s::%s %s - OMX_ErrorSameState, same state", CLASSNAME, __func__, GetName().c_str());
           //#endif
         break;
         case OMX_ErrorInsufficientResources:
-          CLog::Log(LOGERROR, "%s::%s %s - OMX_ErrorInsufficientResources, insufficient resources\n", CLASSNAME, __func__, GetName().c_str());
+          CLog::Log(LOGERROR, "%s::%s %s - OMX_ErrorInsufficientResources, insufficient resources", CLASSNAME, __func__, GetName().c_str());
           m_resource_error = true;
         break;
         case OMX_ErrorFormatNotDetected:
-          CLog::Log(LOGERROR, "%s::%s %s - OMX_ErrorFormatNotDetected, cannot parse input stream\n", CLASSNAME, __func__, GetName().c_str());
+          CLog::Log(LOGERROR, "%s::%s %s - OMX_ErrorFormatNotDetected, cannot parse input stream", CLASSNAME, __func__, GetName().c_str());
         break;
         case OMX_ErrorPortUnpopulated:
-        CLog::Log(LOGWARNING, "%s::%s %s - OMX_ErrorPortUnpopulated port %d\n", CLASSNAME, __func__, GetName().c_str(), (int)nData2);
+        CLog::Log(LOGWARNING, "%s::%s %s - OMX_ErrorPortUnpopulated port %d", CLASSNAME, __func__, GetName().c_str(), (int)nData2);
         break;
         case OMX_ErrorStreamCorrupt:
-          CLog::Log(LOGERROR, "%s::%s %s - OMX_ErrorStreamCorrupt, Bitstream corrupt\n", CLASSNAME, __func__, GetName().c_str());
+          CLog::Log(LOGERROR, "%s::%s %s - OMX_ErrorStreamCorrupt, Bitstream corrupt", CLASSNAME, __func__, GetName().c_str());
           m_resource_error = true;
         break;
         case OMX_ErrorUnsupportedSetting:
-          CLog::Log(LOGERROR, "%s::%s %s - OMX_ErrorUnsupportedSetting, unsupported setting\n", CLASSNAME, __func__, GetName().c_str());
+          CLog::Log(LOGERROR, "%s::%s %s - OMX_ErrorUnsupportedSetting, unsupported setting", CLASSNAME, __func__, GetName().c_str());
         break;
         default:
-          CLog::Log(LOGERROR, "%s::%s %s - OMX_EventError detected, nData1(0x%x), port %d\n",  CLASSNAME, __func__, GetName().c_str(), nData1, (int)nData2);
+          CLog::Log(LOGERROR, "%s::%s %s - OMX_EventError detected, nData1(0x%x), port %d",  CLASSNAME, __func__, GetName().c_str(), nData1, (int)nData2);
         break;
       }
       // wake things up
@@ -1651,7 +1651,7 @@ OMX_ERRORTYPE COMXCoreComponent::DecoderEventHandler(
       }
     break;
     default:
-      CLog::Log(LOGWARNING, "%s::%s %s - Unknown eEvent(0x%x), nData1(0x%x), port %d\n", CLASSNAME, __func__, GetName().c_str(), eEvent, nData1, (int)nData2);
+      CLog::Log(LOGWARNING, "%s::%s %s - Unknown eEvent(0x%x), nData1(0x%x), port %d", CLASSNAME, __func__, GetName().c_str(), eEvent, nData1, (int)nData2);
     break;
   }
 
diff --git a/xbmc/platform/posix/XHandle.cpp b/xbmc/platform/posix/XHandle.cpp
index 7f754c783b3e..1b7792993d0a 100644
--- a/xbmc/platform/posix/XHandle.cpp
+++ b/xbmc/platform/posix/XHandle.cpp
@@ -110,7 +110,7 @@ void CXHandle::ChangeType(HandleType newType) {
 
 void CXHandle::DumpObjectTracker() {
   for (int i=0; i< 10; i++) {
-    CLog::Log(LOGDEBUG,"object %d --> %d instances\n", i, m_objectTracker[i]);
+    CLog::Log(LOGDEBUG,"object %d --> %d instances", i, m_objectTracker[i]);
   }
 }
 
diff --git a/xbmc/pvr/channels/PVRChannelGroup.cpp b/xbmc/pvr/channels/PVRChannelGroup.cpp
index 8c0c3f36d451..2c12168a2d37 100644
--- a/xbmc/pvr/channels/PVRChannelGroup.cpp
+++ b/xbmc/pvr/channels/PVRChannelGroup.cpp
@@ -878,7 +878,7 @@ void CPVRChannelGroup::OnSettingChanged(std::shared_ptr<const CSetting> setting)
   //! @todo while pvr manager is starting up do accept setting changes.
   if(!CServiceBroker::GetPVRManager().IsStarted())
   {
-    CLog::Log(LOGWARNING, "Channel group setting change ignored while PVR Manager is starting\n");
+    CLog::Log(LOGWARNING, "Channel group setting change ignored while PVR Manager is starting");
     return;
   }
 
diff --git a/xbmc/storage/cdioSupport.cpp b/xbmc/storage/cdioSupport.cpp
index 84ac0adb038d..ebca09bc56bb 100644
--- a/xbmc/storage/cdioSupport.cpp
+++ b/xbmc/storage/cdioSupport.cpp
@@ -386,7 +386,7 @@ void CCdIoSupport::PrintAnalysis(int fs, int num_audio)
   {
   case FS_UDF:
   case FS_ISO_UDF:
-    CLog::Log(LOGINFO, "UDF: version %x.%2.2x\n",
+    CLog::Log(LOGINFO, "UDF: version %x.%2.2x",
               m_nUDFVerMajor, m_nUDFVerMinor);
     break;
   }
diff --git a/xbmc/utils/FileUtils.cpp b/xbmc/utils/FileUtils.cpp
index 7217f242e2cf..0b4a7324fa03 100644
--- a/xbmc/utils/FileUtils.cpp
+++ b/xbmc/utils/FileUtils.cpp
@@ -71,7 +71,7 @@ bool CFileUtils::RenameFile(const std::string &strFile)
   if (CGUIKeyboardFactory::ShowAndGetInput(strFileName, CVariant{g_localizeStrings.Get(16013)}, false))
   {
     strPath = URIUtils::AddFileToFolder(strPath, strFileName);
-    CLog::Log(LOGINFO,"FileUtils: rename %s->%s\n", strFileAndPath.c_str(), strPath.c_str());
+    CLog::Log(LOGINFO,"FileUtils: rename %s->%s", strFileAndPath.c_str(), strPath.c_str());
     if (URIUtils::IsMultiPath(strFileAndPath))
     { // special case for multipath renames - rename all the paths.
       std::vector<std::string> paths;
diff --git a/xbmc/video/Teletext.cpp b/xbmc/video/Teletext.cpp
index 9640f90ede27..fad2fc5e43db 100644
--- a/xbmc/video/Teletext.cpp
+++ b/xbmc/video/Teletext.cpp
@@ -643,7 +643,7 @@ bool CTeletextDecoder::InitDecoder()
     m_TypeTTF.face_id = (FTC_FaceID) const_cast<char*>(m_teletextFont.c_str());
     if ((error = FTC_Manager_LookupFace(m_Manager, m_TypeTTF.face_id, &m_Face)))
     {
-      CLog::Log(LOGERROR, "%s: <FTC_Manager_Lookup_Face failed with Errorcode 0x%.2X>\n", __FUNCTION__, error);
+      CLog::Log(LOGERROR, "%s: <FTC_Manager_Lookup_Face failed with Errorcode 0x%.2X>", __FUNCTION__, error);
       FTC_Manager_Done(m_Manager);
       FT_Done_FreeType(m_Library);
       m_Manager = NULL;
diff --git a/xbmc/windowing/X11/GLContextEGL.cpp b/xbmc/windowing/X11/GLContextEGL.cpp
index 61d410a05623..ec1a21bc2a9d 100644
--- a/xbmc/windowing/X11/GLContextEGL.cpp
+++ b/xbmc/windowing/X11/GLContextEGL.cpp
@@ -61,7 +61,7 @@ bool CGLContextEGL::Refresh(bool force, int screen, Window glWindow, bool &newCo
       m_eglSurface = eglCreateWindowSurface(m_eglDisplay, m_eglConfig, glWindow, NULL);
       if (m_eglSurface == EGL_NO_SURFACE)
       {
-        CLog::Log(LOGERROR, "failed to create EGL window surface %d\n", eglGetError());
+        CLog::Log(LOGERROR, "failed to create EGL window surface %d", eglGetError());
         return false;
       }
     }
@@ -95,7 +95,7 @@ bool CGLContextEGL::Refresh(bool force, int screen, Window glWindow, bool &newCo
   }
   if (!eglInitialize(m_eglDisplay, NULL, NULL))
   {
-    CLog::Log(LOGERROR, "failed to initialize egl\n");
+    CLog::Log(LOGERROR, "failed to initialize egl");
     Destroy();
     return false;
   }
@@ -170,7 +170,7 @@ bool CGLContextEGL::Refresh(bool force, int screen, Window glWindow, bool &newCo
 
     if (m_eglContext == EGL_NO_CONTEXT)
     {
-      CLog::Log(LOGERROR, "failed to create EGL context\n");
+      CLog::Log(LOGERROR, "failed to create EGL context");
       Destroy();
       return false;
     }
@@ -181,7 +181,7 @@ bool CGLContextEGL::Refresh(bool force, int screen, Window glWindow, bool &newCo
 
   if (!eglMakeCurrent(m_eglDisplay, m_eglSurface, m_eglSurface, m_eglContext))
   {
-    CLog::Log(LOGERROR, "Failed to make context current %p %p %p\n", m_eglDisplay, m_eglSurface, m_eglContext);
+    CLog::Log(LOGERROR, "Failed to make context current %p %p %p", m_eglDisplay, m_eglSurface, m_eglContext);
     Destroy();
     return false;
   }
@@ -229,7 +229,7 @@ bool CGLContextEGL::CreatePB()
   }
   if (!eglInitialize(m_eglDisplay, NULL, NULL))
   {
-    CLog::Log(LOGERROR, "failed to initialize egl\n");
+    CLog::Log(LOGERROR, "failed to initialize egl");
     Destroy();
     return false;
   }
@@ -270,7 +270,7 @@ bool CGLContextEGL::CreatePB()
 
     if (m_eglContext == EGL_NO_CONTEXT)
     {
-      CLog::Log(LOGERROR, "failed to create EGL context\n");
+      CLog::Log(LOGERROR, "failed to create EGL context");
       Destroy();
       return false;
     }
@@ -278,7 +278,7 @@ bool CGLContextEGL::CreatePB()
 
   if (!eglMakeCurrent(m_eglDisplay, m_eglSurface, m_eglSurface, m_eglContext))
   {
-    CLog::Log(LOGERROR, "Failed to make context current %p %p %p\n", m_eglDisplay, m_eglSurface, m_eglContext);
+    CLog::Log(LOGERROR, "Failed to make context current %p %p %p", m_eglDisplay, m_eglSurface, m_eglContext);
     Destroy();
     return false;
   }
diff --git a/xbmc/windowing/X11/WinSystemX11GLESContext.cpp b/xbmc/windowing/X11/WinSystemX11GLESContext.cpp
index 152b97fffc57..d786cd1bc448 100644
--- a/xbmc/windowing/X11/WinSystemX11GLESContext.cpp
+++ b/xbmc/windowing/X11/WinSystemX11GLESContext.cpp
@@ -230,12 +230,12 @@ XVisualInfo* CWinSystemX11GLESContext::GetVisual()
 
   if (eglDisplay == EGL_NO_DISPLAY)
   {
-    CLog::Log(LOGERROR, "failed to get egl display\n");
+    CLog::Log(LOGERROR, "failed to get egl display");
     return nullptr;
   }
   if (!eglInitialize(eglDisplay, nullptr, nullptr))
   {
-    CLog::Log(LOGERROR, "failed to initialize egl display\n");
+    CLog::Log(LOGERROR, "failed to initialize egl display");
     return nullptr;
   }
 
@@ -254,7 +254,7 @@ XVisualInfo* CWinSystemX11GLESContext::GetVisual()
   EGLConfig eglConfig = 0;
   if (!eglChooseConfig(eglDisplay, att, &eglConfig, 1, &numConfigs) || numConfigs == 0)
   {
-    CLog::Log(LOGERROR, "Failed to choose a config %d\n", eglGetError());
+    CLog::Log(LOGERROR, "Failed to choose a config %d", eglGetError());
     return nullptr;
   }
 
@@ -262,7 +262,7 @@ XVisualInfo* CWinSystemX11GLESContext::GetVisual()
   if (!eglGetConfigAttrib(eglDisplay, eglConfig,
     EGL_NATIVE_VISUAL_ID, reinterpret_cast<EGLint*>(&x11_visual_info_template.visualid)))
   {
-    CLog::Log(LOGERROR, "Failed to query native visual id\n");
+    CLog::Log(LOGERROR, "Failed to query native visual id");
     return nullptr;
   }
   int num_visuals;
diff --git a/xbmc/windowing/android/AndroidUtils.cpp b/xbmc/windowing/android/AndroidUtils.cpp
index d24cc34a6fd7..6dcf22527eb4 100644
--- a/xbmc/windowing/android/AndroidUtils.cpp
+++ b/xbmc/windowing/android/AndroidUtils.cpp
@@ -225,7 +225,7 @@ bool CAndroidUtils::GetNativeResolution(RESOLUTION_INFO* res) const
   res->iSubtitles    = (int)(0.965 * res->iHeight);
   res->strMode       = StringUtils::Format("%dx%d @ %.6f%s - Full Screen", res->iScreenWidth, res->iScreenHeight, res->fRefreshRate,
                                            res->dwFlags & D3DPRESENTFLAG_INTERLACED ? "i" : "");
-  CLog::Log(LOGNOTICE,"CAndroidUtils: Current resolution: %dx%d %s\n", res->iWidth, res->iHeight, res->strMode.c_str());
+  CLog::Log(LOGNOTICE,"CAndroidUtils: Current resolution: %dx%d %s", res->iWidth, res->iHeight, res->strMode.c_str());
   return true;
 }
 
diff --git a/xbmc/windowing/ios/WinSystemIOS.mm b/xbmc/windowing/ios/WinSystemIOS.mm
index 2ee94b9c080e..1e2b1587c22a 100644
--- a/xbmc/windowing/ios/WinSystemIOS.mm
+++ b/xbmc/windowing/ios/WinSystemIOS.mm
@@ -303,7 +303,7 @@ - (void) runDisplayLink;
     h = mode.size.height;
 
     UpdateDesktopResolution(res, screenIdx == 0 ? CONST_TOUCHSCREEN : CONST_EXTERNAL, w, h, refreshrate, 0);
-    CLog::Log(LOGNOTICE, "Found possible resolution for display %d with %d x %d\n", screenIdx, w, h);
+    CLog::Log(LOGNOTICE, "Found possible resolution for display %d with %d x %d", screenIdx, w, h);
 
     CServiceBroker::GetWinSystem()->GetGfxContext().ResetOverscan(res);
     CDisplaySettings::GetInstance().AddResolutionInfo(res);
diff --git a/xbmc/windowing/osx/WinSystemOSX.mm b/xbmc/windowing/osx/WinSystemOSX.mm
index 43fb3287ee38..1b60560422a1 100644
--- a/xbmc/windowing/osx/WinSystemOSX.mm
+++ b/xbmc/windowing/osx/WinSystemOSX.mm
@@ -545,7 +545,7 @@ CGDisplayModeRef GetMode(int width, int height, double refreshrate, int screenId
   double rate;
   RESOLUTION_INFO res;
 
-  CLog::Log(LOGDEBUG, "GetMode looking for suitable mode with %d x %d @ %f Hz on display %d\n", width, height, refreshrate, screenIdx);
+  CLog::Log(LOGDEBUG, "GetMode looking for suitable mode with %d x %d @ %f Hz on display %d", width, height, refreshrate, screenIdx);
 
   CFArrayRef displayModes = GetAllDisplayModes(GetDisplayID(screenIdx));
 
@@ -1396,7 +1396,7 @@ void ResizeWindowInternal(int newWidth, int newHeight, int newLeft, int newTop,
           // NOTE: The refresh rate will be REPORTED AS 0 for many DVI and notebook displays.
           refreshrate = 60.0;
         }
-        CLog::Log(LOGNOTICE, "Found possible resolution for display %d with %d x %d @ %f Hz\n", disp, w, h, refreshrate);
+        CLog::Log(LOGNOTICE, "Found possible resolution for display %d with %d x %d @ %f Hz", disp, w, h, refreshrate);
 
         // only add the resolution if it belongs to "our" screen
         // all others are only logged above...
diff --git a/xbmc/windowing/rpi/RPIUtils.cpp b/xbmc/windowing/rpi/RPIUtils.cpp
index d93a45089070..34adba0e71b9 100644
--- a/xbmc/windowing/rpi/RPIUtils.cpp
+++ b/xbmc/windowing/rpi/RPIUtils.cpp
@@ -161,7 +161,7 @@ bool CRPIUtils::SetNativeResolution(const RESOLUTION_INFO res, EGLSurface m_nati
 
     if (success == 0)
     {
-      CLog::Log(LOGDEBUG, "EGL set HDMI mode (%d,%d)=%d %s%s\n",
+      CLog::Log(LOGDEBUG, "EGL set HDMI mode (%d,%d)=%d %s%s",
                           GETFLAGS_GROUP(res.dwFlags), GETFLAGS_MODE(res.dwFlags), success,
                           CStereoscopicsManager::ConvertGuiStereoModeToString(stereo_mode),
                           mode3d==HDMI_3D_FORMAT_FRAME_PACKING ? " FP" : mode3d==HDMI_3D_FORMAT_SBS_HALF ? " SBS" : mode3d==HDMI_3D_FORMAT_TB_HALF ? " TB" : "");
@@ -170,7 +170,7 @@ bool CRPIUtils::SetNativeResolution(const RESOLUTION_INFO res, EGLSurface m_nati
     }
     else
     {
-      CLog::Log(LOGERROR, "EGL failed to set HDMI mode (%d,%d)=%d %s%s\n",
+      CLog::Log(LOGERROR, "EGL failed to set HDMI mode (%d,%d)=%d %s%s",
                           GETFLAGS_GROUP(res.dwFlags), GETFLAGS_MODE(res.dwFlags), success,
                           CStereoscopicsManager::ConvertGuiStereoModeToString(stereo_mode),
                           mode3d==HDMI_3D_FORMAT_FRAME_PACKING ? " FP" : mode3d==HDMI_3D_FORMAT_SBS_HALF ? " SBS" : mode3d==HDMI_3D_FORMAT_TB_HALF ? " TB" : "");
@@ -192,14 +192,14 @@ bool CRPIUtils::SetNativeResolution(const RESOLUTION_INFO res, EGLSurface m_nati
 
     if (success == 0)
     {
-      CLog::Log(LOGDEBUG, "EGL set SDTV mode (%d,%d)=%d\n",
+      CLog::Log(LOGDEBUG, "EGL set SDTV mode (%d,%d)=%d",
                           GETFLAGS_GROUP(res.dwFlags), GETFLAGS_MODE(res.dwFlags), success);
 
       sem_wait(&m_tv_synced);
     }
     else
     {
-      CLog::Log(LOGERROR, "EGL failed to set SDTV mode (%d,%d)=%d\n",
+      CLog::Log(LOGERROR, "EGL failed to set SDTV mode (%d,%d)=%d",
                           GETFLAGS_GROUP(res.dwFlags), GETFLAGS_MODE(res.dwFlags), success);
     }
     m_DllBcmHost->vc_tv_unregister_callback(CallbackTvServiceCallback);
@@ -246,7 +246,7 @@ bool CRPIUtils::SetNativeResolution(const RESOLUTION_INFO res, EGLSurface m_nati
   else
     transform = DISPMANX_STEREOSCOPIC_MONO;
 
-  CLog::Log(LOGDEBUG, "EGL set resolution %dx%d -> %dx%d @ %.2f fps (%d,%d) flags:%x aspect:%.2f\n",
+  CLog::Log(LOGDEBUG, "EGL set resolution %dx%d -> %dx%d @ %.2f fps (%d,%d) flags:%x aspect:%.2f",
       m_width, m_height, dst_rect.width, dst_rect.height, res.fRefreshRate, GETFLAGS_GROUP(res.dwFlags), GETFLAGS_MODE(res.dwFlags), (int)res.dwFlags, res.fPixelRatio);
 
   m_dispman_element = m_DllBcmHost->vc_dispmanx_element_add(dispman_update,
@@ -430,7 +430,7 @@ bool CRPIUtils::ProbeResolutions(std::vector<RESOLUTION_INFO> &resolutions)
 
     m_desktopRes.iSubtitles   = (int)(0.965 * m_desktopRes.iHeight);
 
-    CLog::Log(LOGDEBUG, "EGL initial desktop resolution %s (%.2f)\n", m_desktopRes.strMode.c_str(), m_desktopRes.fPixelRatio);
+    CLog::Log(LOGDEBUG, "EGL initial desktop resolution %s (%.2f)", m_desktopRes.strMode.c_str(), m_desktopRes.fPixelRatio);
   }
 
   if(GETFLAGS_GROUP(m_desktopRes.dwFlags) && GETFLAGS_MODE(m_desktopRes.dwFlags))
@@ -440,7 +440,7 @@ bool CRPIUtils::ProbeResolutions(std::vector<RESOLUTION_INFO> &resolutions)
   }
   {
     AddUniqueResolution(m_desktopRes, resolutions, true);
-    CLog::Log(LOGDEBUG, "EGL probe resolution %s:%x\n", m_desktopRes.strMode.c_str(), m_desktopRes.dwFlags);
+    CLog::Log(LOGDEBUG, "EGL probe resolution %s:%x", m_desktopRes.strMode.c_str(), m_desktopRes.dwFlags);
   }
 
   return true;
@@ -522,7 +522,7 @@ void CRPIUtils::GetSupportedModes(HDMI_RES_GROUP_T group, std::vector<RESOLUTION
     num_modes = m_DllBcmHost->vc_tv_hdmi_get_supported_modes_new(group,
         supported_modes, max_supported_modes, &prefer_group, &prefer_mode);
 
-    CLog::Log(LOGDEBUG, "EGL get supported modes (%d) = %d, prefer_group=%x, prefer_mode=%x\n",
+    CLog::Log(LOGDEBUG, "EGL get supported modes (%d) = %d, prefer_group=%x, prefer_mode=%x",
         group, num_modes, prefer_group, prefer_mode);
   }
 
@@ -547,7 +547,7 @@ void CRPIUtils::GetSupportedModes(HDMI_RES_GROUP_T group, std::vector<RESOLUTION
         m_desktopRes = res;
 
       AddUniqueResolution(res, resolutions);
-      CLog::Log(LOGDEBUG, "EGL mode %d: %s (%.2f) %s%s:%x\n", i, res.strMode, res.fPixelRatio,
+      CLog::Log(LOGDEBUG, "EGL mode %d: %s (%.2f) %s%s:%x", i, res.strMode, res.fPixelRatio,
           tv->native ? "N" : "", tv->scan_mode ? "I" : "", int(tv->code));
 
       if (tv->frame_rate == 24 || tv->frame_rate == 30 || tv->frame_rate == 48 || tv->frame_rate == 60 || tv->frame_rate == 72)
@@ -564,7 +564,7 @@ void CRPIUtils::GetSupportedModes(HDMI_RES_GROUP_T group, std::vector<RESOLUTION
 
 void CRPIUtils::TvServiceCallback(uint32_t reason, uint32_t param1, uint32_t param2)
 {
-  CLog::Log(LOGDEBUG, "EGL tv_service_callback (%d,%d,%d)\n", reason, param1, param2);
+  CLog::Log(LOGDEBUG, "EGL tv_service_callback (%d,%d,%d)", reason, param1, param2);
   switch(reason)
   {
   case VC_HDMI_UNPLUGGED:
diff --git a/xbmc/windowing/rpi/WinSystemRpi.cpp b/xbmc/windowing/rpi/WinSystemRpi.cpp
index 9b723eb645b6..48a6b9fe4abe 100644
--- a/xbmc/windowing/rpi/WinSystemRpi.cpp
+++ b/xbmc/windowing/rpi/WinSystemRpi.cpp
@@ -196,7 +196,7 @@ void CWinSystemRpi::UpdateResolutions()
     CServiceBroker::GetWinSystem()->GetGfxContext().ResetOverscan(resolutions[i]);
     CDisplaySettings::GetInstance().GetResolutionInfo(res_index) = resolutions[i];
 
-    CLog::Log(LOGNOTICE, "Found resolution %d x %d with %d x %d%s @ %f Hz\n",
+    CLog::Log(LOGNOTICE, "Found resolution %d x %d with %d x %d%s @ %f Hz",
       resolutions[i].iWidth,
       resolutions[i].iHeight,
       resolutions[i].iScreenWidth,
diff --git a/xbmc/windowing/tvos/WinSystemTVOS.mm b/xbmc/windowing/tvos/WinSystemTVOS.mm
index 9cbc8d71f08e..76700f206a66 100644
--- a/xbmc/windowing/tvos/WinSystemTVOS.mm
+++ b/xbmc/windowing/tvos/WinSystemTVOS.mm
@@ -284,7 +284,7 @@ - (void)runDisplayLink;
   {
     RESOLUTION_INFO res;
     UpdateDesktopResolution(res, CONST_HDMI, w, h, refreshrate, 0);
-    CLog::Log(LOGNOTICE, "Found possible resolution for display {} with {} x {} RefreshRate:{} \n",
+    CLog::Log(LOGNOTICE, "Found possible resolution for display {} with {} x {} RefreshRate:{} ",
               screenIdx, w, h, refreshrate);
 
     CServiceBroker::GetWinSystem()->GetGfxContext().ResetOverscan(res);

From 3cefb243a534a1cc20549b11113383b36b54a023 Mon Sep 17 00:00:00 2001
From: montellese <montellese@kodi.tv>
Date: Mon, 13 Apr 2020 14:54:32 +0200
Subject: [PATCH 09/21] ~ follow coding style for 5af7aaeecc

---
 xbmc/Util.cpp                                 |   9 +-
 .../Engines/ActiveAE/ActiveAEResamplePi.cpp   |   6 +-
 xbmc/cores/AudioEngine/Utils/AERingBuffer.h   |  14 +-
 xbmc/cores/DllLoader/DllLoader.cpp            |   4 +-
 xbmc/cores/DllLoader/exports/emu_msvcrt.cpp   |   2 +-
 .../Video/DVDVideoCodecAndroidMediaCodec.cpp  |  11 +-
 .../VideoPlayer/DVDCodecs/Video/VDPAU.cpp     |  14 +-
 .../DVDInputStreamNavigator.cpp               |  39 ++-
 .../cores/VideoPlayer/VideoPlayerRadioRDS.cpp |   4 +-
 .../VideoRenderers/ColorManager.cpp           |  15 +-
 xbmc/cores/omxplayer/OMXImage.cpp             | 197 +++++++----
 xbmc/filesystem/BlurayCallback.cpp            |   3 +-
 xbmc/filesystem/NFSDirectory.cpp              |  12 +-
 xbmc/filesystem/NFSFile.cpp                   |  23 +-
 xbmc/filesystem/SpecialProtocol.cpp           |   2 +-
 xbmc/guilib/GUIWindow.cpp                     |   2 +-
 xbmc/network/mdns/ZeroconfBrowserMDNS.cpp     |   3 +-
 xbmc/platform/darwin/osx/XBMCHelper.cpp       |   2 +-
 .../osx/peripherals/PeripheralBusUSB.cpp      |   8 +-
 xbmc/platform/darwin/tvos/TVOSTopShelf.mm     |   4 +-
 xbmc/platform/linux/DBusMessage.cpp           |   3 +-
 xbmc/platform/linux/OMXCore.cpp               | 318 +++++++++++-------
 xbmc/platform/posix/XHandle.cpp               |   2 +-
 xbmc/storage/cdioSupport.cpp                  |   3 +-
 xbmc/utils/FileUtils.cpp                      |   2 +-
 xbmc/video/Teletext.cpp                       |   3 +-
 xbmc/windowing/X11/GLContextEGL.cpp           |   6 +-
 xbmc/windowing/android/AndroidUtils.cpp       |   3 +-
 xbmc/windowing/osx/WinSystemOSX.mm            |   6 +-
 xbmc/windowing/rpi/RPIUtils.cpp               |  46 ++-
 xbmc/windowing/rpi/WinSystemRpi.cpp           |  11 +-
 31 files changed, 495 insertions(+), 282 deletions(-)

diff --git a/xbmc/Util.cpp b/xbmc/Util.cpp
index 384d504bfcaa..11d0e4975466 100644
--- a/xbmc/Util.cpp
+++ b/xbmc/Util.cpp
@@ -1904,7 +1904,8 @@ void CUtil::ScanPathsForAssociatedItems(const std::string& videoName,
       else
       {
         associatedFiles.push_back(pItem->GetPath());
-        CLog::Log(LOGINFO, "%s: found associated file %s", __FUNCTION__, CURL::GetRedacted(pItem->GetPath()).c_str());
+        CLog::Log(LOGINFO, "%s: found associated file %s", __FUNCTION__,
+                  CURL::GetRedacted(pItem->GetPath()).c_str());
       }
     }
     else
@@ -1956,7 +1957,8 @@ int CUtil::ScanArchiveForAssociatedItems(const std::string& strArchivePath,
     {
       if (StringUtils::EqualsNoCase(strExt, ext))
       {
-        CLog::Log(LOGINFO, "%s: found associated file %s", __FUNCTION__, CURL::GetRedacted(strPathInRar).c_str());
+        CLog::Log(LOGINFO, "%s: found associated file %s", __FUNCTION__,
+                  CURL::GetRedacted(strPathInRar).c_str());
         associatedFiles.push_back(strPathInRar);
         nItemsAdded++;
         break;
@@ -2049,7 +2051,8 @@ void CUtil::ScanForExternalSubtitles(const std::string& strMovie, std::vector<st
             std::string strDest = StringUtils::Format("special://temp/subtitle.%s.%zu.smi", lang.Name.c_str(), i);
             if (CFile::Copy(vecSubtitles[i], strDest))
             {
-              CLog::Log(LOGINFO, " cached subtitle %s->%s", CURL::GetRedacted(vecSubtitles[i]).c_str(), strDest.c_str());
+              CLog::Log(LOGINFO, " cached subtitle %s->%s",
+                        CURL::GetRedacted(vecSubtitles[i]).c_str(), strDest.c_str());
               vecSubtitles.push_back(strDest);
             }
           }
diff --git a/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAEResamplePi.cpp b/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAEResamplePi.cpp
index d7ff8ced9ec8..79a86f137947 100644
--- a/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAEResamplePi.cpp
+++ b/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAEResamplePi.cpp
@@ -338,8 +338,10 @@ bool CActiveAEResamplePi::Init(SampleConfig dstConfig, SampleConfig srcConfig, b
   omx_err = m_omx_mixer.SetConfig(OMX_IndexConfigBrcmAudioDownmixCoefficients8x8, &mix);
   if (omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s - error setting mixer OMX_IndexConfigBrcmAudioDownmixCoefficients, error 0x%08x",
-              CLASSNAME, __func__, omx_err);
+    CLog::Log(
+        LOGERROR,
+        "%s::%s - error setting mixer OMX_IndexConfigBrcmAudioDownmixCoefficients, error 0x%08x",
+        CLASSNAME, __func__, omx_err);
     return false;
   }
 
diff --git a/xbmc/cores/AudioEngine/Utils/AERingBuffer.h b/xbmc/cores/AudioEngine/Utils/AERingBuffer.h
index e4bbb34d1407..634465533238 100644
--- a/xbmc/cores/AudioEngine/Utils/AERingBuffer.h
+++ b/xbmc/cores/AudioEngine/Utils/AERingBuffer.h
@@ -101,7 +101,8 @@ class AERingBuffer {
     if ( m_iSize > size + m_iWritePos )
     {
 #ifdef AE_RING_BUFFER_DEBUG
-      CLog::Log(LOGDEBUG, "AERingBuffer: Written to: %u size: %u space before: %u", m_iWritePos, size, space);
+      CLog::Log(LOGDEBUG, "AERingBuffer: Written to: %u size: %u space before: %u", m_iWritePos,
+                size, space);
 #endif
       memcpy(m_Buffer[plane] + m_iWritePos, src, size);
     }
@@ -111,7 +112,9 @@ class AERingBuffer {
       unsigned int first = m_iSize - m_iWritePos;
       unsigned int second = size - first;
 #ifdef AE_RING_BUFFER_DEBUG
-      CLog::Log(LOGDEBUG, "AERingBuffer: Written to (split) first: %u second: %u size: %u space before: %u", first, second, size, space);
+      CLog::Log(LOGDEBUG,
+                "AERingBuffer: Written to (split) first: %u second: %u size: %u space before: %u",
+                first, second, size, space);
 #endif
       memcpy(m_Buffer[plane] + m_iWritePos, src, first);
       memcpy(m_Buffer[plane], src + first, second);
@@ -155,7 +158,8 @@ class AERingBuffer {
     if ( size + m_iReadPos < m_iSize )
     {
 #ifdef AE_RING_BUFFER_DEBUG
-      CLog::Log(LOGDEBUG, "AERingBuffer: Reading from: %u size: %u space before: %u", m_iWritePos, size, space);
+      CLog::Log(LOGDEBUG, "AERingBuffer: Reading from: %u size: %u space before: %u", m_iWritePos,
+                size, space);
 #endif
       if (dest)
         memcpy(dest, m_Buffer[plane] + m_iReadPos, size);
@@ -166,7 +170,9 @@ class AERingBuffer {
       unsigned int first = m_iSize - m_iReadPos;
       unsigned int second = size - first;
 #ifdef AE_RING_BUFFER_DEBUG
-      CLog::Log(LOGDEBUG, "AERingBuffer: Reading from (split) first: %u second: %u size: %u space before: %u", first, second, size, space);
+      CLog::Log(LOGDEBUG,
+                "AERingBuffer: Reading from (split) first: %u second: %u size: %u space before: %u",
+                first, second, size, space);
 #endif
       if (dest)
       {
diff --git a/xbmc/cores/DllLoader/DllLoader.cpp b/xbmc/cores/DllLoader/DllLoader.cpp
index bbc2982af0f8..b2af81b7e303 100644
--- a/xbmc/cores/DllLoader/DllLoader.cpp
+++ b/xbmc/cores/DllLoader/DllLoader.cpp
@@ -300,7 +300,7 @@ int DllLoader::ResolveImports(void)
           {
             bResult = 0;
             char szBuf[128];
-            CLog::Log(LOGDEBUG,"Unable to resolve ordinal %s %lu", Name, *Table&0x7ffffff);
+            CLog::Log(LOGDEBUG, "Unable to resolve ordinal %s %lu", Name, *Table & 0x7ffffff);
             sprintf(szBuf, "%lu", *Table&0x7ffffff);
             *Addr = create_dummy_function(Name, szBuf);
             tracker_dll_data_track(this, *Addr);
@@ -321,7 +321,7 @@ int DllLoader::ResolveImports(void)
             *Addr=get_win_function_address(Name, ImpName);
             if(!*Addr)
             {
-              CLog::Log(LOGDEBUG,"Unable to resolve %s %s", Name, ImpName);
+              CLog::Log(LOGDEBUG, "Unable to resolve %s %s", Name, ImpName);
               *Addr = create_dummy_function(Name, ImpName);
               tracker_dll_data_track(this, *Addr);
               bResult = 0;
diff --git a/xbmc/cores/DllLoader/exports/emu_msvcrt.cpp b/xbmc/cores/DllLoader/exports/emu_msvcrt.cpp
index e4d58f75b311..47165710e618 100644
--- a/xbmc/cores/DllLoader/exports/emu_msvcrt.cpp
+++ b/xbmc/cores/DllLoader/exports/emu_msvcrt.cpp
@@ -382,7 +382,7 @@ extern "C"
     if (szLine[strlen(szLine) - 1] != '\n')
       CLog::Log(LOGDEBUG,"  msg: %s", szLine);
     else
-      CLog::Log(LOGDEBUG,"  msg: %s", szLine);
+      CLog::Log(LOGDEBUG, "  msg: %s", szLine);
 
     // return a non negative value
     return 0;
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAndroidMediaCodec.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAndroidMediaCodec.cpp
index 272241b2bc3a..8b34108aa225 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAndroidMediaCodec.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAndroidMediaCodec.cpp
@@ -379,15 +379,20 @@ bool CDVDVideoCodecAndroidMediaCodec::Open(CDVDStreamInfo &hints, CDVDCodecOptio
   }
   else if (hints.orientation && m_render_surface && CJNIBase::GetSDKVersion() < 23)
   {
-    CLog::Log(LOGERROR, "CDVDVideoCodecAndroidMediaCodec::Open - %s", "Surface does not support orientation before API 23");
+    CLog::Log(LOGERROR, "CDVDVideoCodecAndroidMediaCodec::Open - %s",
+              "Surface does not support orientation before API 23");
     goto FAIL;
   }
   else if (!CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_VIDEOPLAYER_USEMEDIACODEC) &&
            !CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_VIDEOPLAYER_USEMEDIACODECSURFACE))
     goto FAIL;
 
-  CLog::Log(LOGDEBUG, "CDVDVideoCodecAndroidMediaCodec::Open hints: Width %d x Height %d, Fpsrate %d / Fpsscale %d, CodecID %d, Level %d, Profile %d, PTS_invalid %d, Tag %d, Extradata-Size: %d",
-    hints.width, hints.height, hints.fpsrate, hints.fpsscale, hints.codec, hints.level, hints.profile, hints.ptsinvalid, hints.codec_tag, hints.extrasize);
+  CLog::Log(
+      LOGDEBUG,
+      "CDVDVideoCodecAndroidMediaCodec::Open hints: Width %d x Height %d, Fpsrate %d / Fpsscale "
+      "%d, CodecID %d, Level %d, Profile %d, PTS_invalid %d, Tag %d, Extradata-Size: %d",
+      hints.width, hints.height, hints.fpsrate, hints.fpsscale, hints.codec, hints.level,
+      hints.profile, hints.ptsinvalid, hints.codec_tag, hints.extrasize);
 
   m_render_surface = CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_VIDEOPLAYER_USEMEDIACODECSURFACE);
   m_state = MEDIACODEC_STATE_UNINITIALIZED;
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/VDPAU.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/VDPAU.cpp
index e15c475a281f..e28b0bf5d77d 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/VDPAU.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/VDPAU.cpp
@@ -281,8 +281,8 @@ void CVDPAUContext::SpewHardwareAvailable()  //Copyright (c) 2008 Wladimir J. va
                                 &is_supported, &max_level, &max_macroblocks, &max_width, &max_height);
     if(rv == VDP_STATUS_OK && is_supported)
     {
-      CLog::Log(LOGNOTICE,"%-16s %2i %5i %5i %5i", decoder_profile.name,
-                max_level, max_macroblocks, max_width, max_height);
+      CLog::Log(LOGNOTICE, "%-16s %2i %5i %5i %5i", decoder_profile.name, max_level,
+                max_macroblocks, max_width, max_height);
     }
   }
   CLog::Log(LOGNOTICE,"------------------------------------");
@@ -1258,7 +1258,9 @@ bool CDecoder::CheckStatus(VdpStatus vdp_st, int line)
 {
   if (vdp_st != VDP_STATUS_OK)
   {
-    CLog::Log(LOGERROR, " (VDPAU) Error: %s(%d) at %s:%d", m_vdpauConfig.context->GetProcs().vdp_get_error_string(vdp_st), vdp_st, __FILE__, line);
+    CLog::Log(LOGERROR, " (VDPAU) Error: %s(%d) at %s:%d",
+              m_vdpauConfig.context->GetProcs().vdp_get_error_string(vdp_st), vdp_st, __FILE__,
+              line);
 
     m_ErrorCount++;
 
@@ -2731,7 +2733,8 @@ bool CMixer::CheckStatus(VdpStatus vdp_st, int line)
 {
   if (vdp_st != VDP_STATUS_OK)
   {
-    CLog::Log(LOGERROR, " (VDPAU) Error: %s(%d) at %s:%d", m_config.context->GetProcs().vdp_get_error_string(vdp_st), vdp_st, __FILE__, line);
+    CLog::Log(LOGERROR, " (VDPAU) Error: %s(%d) at %s:%d",
+              m_config.context->GetProcs().vdp_get_error_string(vdp_st), vdp_st, __FILE__, line);
     m_vdpError = true;
     return true;
   }
@@ -3365,7 +3368,8 @@ bool COutput::CheckStatus(VdpStatus vdp_st, int line)
 {
   if (vdp_st != VDP_STATUS_OK)
   {
-    CLog::Log(LOGERROR, " (VDPAU) Error: %s(%d) at %s:%d", m_config.context->GetProcs().vdp_get_error_string(vdp_st), vdp_st, __FILE__, line);
+    CLog::Log(LOGERROR, " (VDPAU) Error: %s(%d) at %s:%d",
+              m_config.context->GetProcs().vdp_get_error_string(vdp_st), vdp_st, __FILE__, line);
     m_vdpError = true;
     return true;
   }
diff --git a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamNavigator.cpp b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamNavigator.cpp
index 33e8b1034978..5af96ceb8d01 100644
--- a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamNavigator.cpp
+++ b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamNavigator.cpp
@@ -120,7 +120,7 @@ bool CDVDInputStreamNavigator::Open()
   else
   if (m_dll.dvdnav_open(&m_dvdnav, path.c_str()) != DVDNAV_STATUS_OK)
   {
-    CLog::Log(LOGERROR,"Error on dvdnav_open");
+    CLog::Log(LOGERROR, "Error on dvdnav_open");
     Close();
     return false;
   }
@@ -163,7 +163,8 @@ bool CDVDInputStreamNavigator::Open()
   // set default language settings
   if (m_dll.dvdnav_menu_language_select(m_dvdnav, (char*)language_menu) != DVDNAV_STATUS_OK)
   {
-    CLog::Log(LOGERROR, "Error on setting default menu language: %s", m_dll.dvdnav_err_to_string(m_dvdnav));
+    CLog::Log(LOGERROR, "Error on setting default menu language: %s",
+              m_dll.dvdnav_err_to_string(m_dvdnav));
     CLog::Log(LOGERROR, "Defaulting to \"en\"");
     //! @bug libdvdnav isn't const correct
     m_dll.dvdnav_menu_language_select(m_dvdnav, const_cast<char*>("en"));
@@ -171,7 +172,8 @@ bool CDVDInputStreamNavigator::Open()
 
   if (m_dll.dvdnav_audio_language_select(m_dvdnav, (char*)language_audio) != DVDNAV_STATUS_OK)
   {
-    CLog::Log(LOGERROR, "Error on setting default audio language: %s", m_dll.dvdnav_err_to_string(m_dvdnav));
+    CLog::Log(LOGERROR, "Error on setting default audio language: %s",
+              m_dll.dvdnav_err_to_string(m_dvdnav));
     CLog::Log(LOGERROR, "Defaulting to \"en\"");
     //! @bug libdvdnav isn't const correct
     m_dll.dvdnav_audio_language_select(m_dvdnav, const_cast<char*>("en"));
@@ -179,7 +181,8 @@ bool CDVDInputStreamNavigator::Open()
 
   if (m_dll.dvdnav_spu_language_select(m_dvdnav, (char*)language_subtitle) != DVDNAV_STATUS_OK)
   {
-    CLog::Log(LOGERROR, "Error on setting default subtitle language: %s", m_dll.dvdnav_err_to_string(m_dvdnav));
+    CLog::Log(LOGERROR, "Error on setting default subtitle language: %s",
+              m_dll.dvdnav_err_to_string(m_dvdnav));
     CLog::Log(LOGERROR, "Defaulting to \"en\"");
     //! @bug libdvdnav isn't const correct
     m_dll.dvdnav_spu_language_select(m_dvdnav, const_cast<char*>("en"));
@@ -188,7 +191,8 @@ bool CDVDInputStreamNavigator::Open()
   // set read ahead cache usage
   if (m_dll.dvdnav_set_readahead_flag(m_dvdnav, 1) != DVDNAV_STATUS_OK)
   {
-    CLog::Log(LOGERROR,"Error on dvdnav_set_readahead_flag: %s", m_dll.dvdnav_err_to_string(m_dvdnav));
+    CLog::Log(LOGERROR, "Error on dvdnav_set_readahead_flag: %s",
+              m_dll.dvdnav_err_to_string(m_dvdnav));
     Close();
     return false;
   }
@@ -197,7 +201,8 @@ bool CDVDInputStreamNavigator::Open()
   // whole feature instead of just relatively to the current chapter
   if (m_dll.dvdnav_set_PGC_positioning_flag(m_dvdnav, 1) != DVDNAV_STATUS_OK)
   {
-    CLog::Log(LOGERROR,"Error on dvdnav_set_PGC_positioning_flag: %s", m_dll.dvdnav_err_to_string(m_dvdnav));
+    CLog::Log(LOGERROR, "Error on dvdnav_set_PGC_positioning_flag: %s",
+              m_dll.dvdnav_err_to_string(m_dvdnav));
     Close();
     return false;
   }
@@ -216,10 +221,12 @@ bool CDVDInputStreamNavigator::Open()
     // first try title menu
     if(m_dll.dvdnav_menu_call(m_dvdnav, DVD_MENU_Title) != DVDNAV_STATUS_OK)
     {
-      CLog::Log(LOGERROR,"Error on dvdnav_menu_call(Title): %s", m_dll.dvdnav_err_to_string(m_dvdnav));
+      CLog::Log(LOGERROR, "Error on dvdnav_menu_call(Title): %s",
+                m_dll.dvdnav_err_to_string(m_dvdnav));
       // next try root menu
       if(m_dll.dvdnav_menu_call(m_dvdnav, DVD_MENU_Root) != DVDNAV_STATUS_OK )
-        CLog::Log(LOGERROR,"Error on dvdnav_menu_call(Root): %s", m_dll.dvdnav_err_to_string(m_dvdnav));
+        CLog::Log(LOGERROR, "Error on dvdnav_menu_call(Root): %s",
+                  m_dll.dvdnav_err_to_string(m_dvdnav));
     }
   }
 
@@ -245,7 +252,7 @@ void CDVDInputStreamNavigator::Close()
   // finish off by closing the dvdnav device
   if (m_dll.dvdnav_close(m_dvdnav) != DVDNAV_STATUS_OK)
   {
-    CLog::Log(LOGERROR,"Error on dvdnav_close: %s", m_dll.dvdnav_err_to_string(m_dvdnav));
+    CLog::Log(LOGERROR, "Error on dvdnav_close: %s", m_dll.dvdnav_err_to_string(m_dvdnav));
     return ;
   }
 
@@ -333,7 +340,7 @@ int CDVDInputStreamNavigator::ProcessBlock(uint8_t* dest_buffer, int* read)
 
   if (result == DVDNAV_STATUS_ERR)
   {
-    CLog::Log(LOGERROR,"Error getting next block: %s", m_dll.dvdnav_err_to_string(m_dvdnav));
+    CLog::Log(LOGERROR, "Error getting next block: %s", m_dll.dvdnav_err_to_string(m_dvdnav));
     m_bEOF = true;
     return NAVRESULT_ERROR;
   }
@@ -508,7 +515,9 @@ int CDVDInputStreamNavigator::ProcessBlock(uint8_t* dest_buffer, int* read)
           int entries = m_dll.dvdnav_describe_title_chapters(m_dvdnav, m_iTitle, &times, &duration);
 
           if (entries != m_iPartCount)
-            CLog::Log(LOGDEBUG, "%s - Number of chapters/positions differ: Chapters %d, positions %d", __FUNCTION__, m_iPartCount, entries);
+            CLog::Log(LOGDEBUG,
+                      "%s - Number of chapters/positions differ: Chapters %d, positions %d",
+                      __FUNCTION__, m_iPartCount, entries);
 
           if (times)
           {
@@ -521,8 +530,10 @@ int CDVDInputStreamNavigator::ProcessBlock(uint8_t* dest_buffer, int* read)
             m_dll.dvdnav_free(times);
           }
         }
-        CLog::Log(LOGDEBUG, "%s - Cell change: Title %d, Chapter %d", __FUNCTION__, m_iTitle, m_iPart);
-        CLog::Log(LOGDEBUG, "%s - At position %.0f%% inside the feature", __FUNCTION__, 100 * (double)pos / (double)len);
+        CLog::Log(LOGDEBUG, "%s - Cell change: Title %d, Chapter %d", __FUNCTION__, m_iTitle,
+                  m_iPart);
+        CLog::Log(LOGDEBUG, "%s - At position %.0f%% inside the feature", __FUNCTION__,
+                  100 * (double)pos / (double)len);
         //Get total segment time
 
         dvdnav_cell_change_event_t* cell_change_event = reinterpret_cast<dvdnav_cell_change_event_t*>(buf);
@@ -617,7 +628,7 @@ int CDVDInputStreamNavigator::ProcessBlock(uint8_t* dest_buffer, int* read)
 
     default:
       {
-        CLog::Log(LOGDEBUG,"CDVDInputStreamNavigator: Unknown event (%i)", m_lastevent);
+        CLog::Log(LOGDEBUG, "CDVDInputStreamNavigator: Unknown event (%i)", m_lastevent);
       }
       break;
 
diff --git a/xbmc/cores/VideoPlayer/VideoPlayerRadioRDS.cpp b/xbmc/cores/VideoPlayer/VideoPlayerRadioRDS.cpp
index cafb41fe773c..acdc23676e61 100644
--- a/xbmc/cores/VideoPlayer/VideoPlayerRadioRDS.cpp
+++ b/xbmc/cores/VideoPlayer/VideoPlayerRadioRDS.cpp
@@ -1078,7 +1078,9 @@ unsigned int CDVDRadioRDSData::DecodeRT(uint8_t *msgElement, unsigned int len)
   unsigned int msgLength = msgElement[UECP_ME_MEL];
   if (msgLength > len-2)
   {
-    CLog::Log(LOGERROR, "Radio UECP (RDS) - %s - RT-Error: Length=0 or not correct (MFL= %d, MEL= %d)", __FUNCTION__, len, msgLength);
+    CLog::Log(LOGERROR,
+              "Radio UECP (RDS) - %s - RT-Error: Length=0 or not correct (MFL= %d, MEL= %d)",
+              __FUNCTION__, len, msgLength);
     m_UECPDataDeadBreak = true;
     return 0;
   }
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/ColorManager.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/ColorManager.cpp
index 60c44b329012..3b1e03de0282 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/ColorManager.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/ColorManager.cpp
@@ -228,7 +228,8 @@ bool CColorManager::GetVideo3dLut(int videoFlags, int *cmsToken, CMS_DATA_FORMAT
 #endif  //defined(HAVE_LCMS2)
 
   default:
-    CLog::Log(LOGDEBUG, "ColorManager: unknown CMS mode %d", settings->GetInt("videoscreen.cmsmode"));
+    CLog::Log(LOGDEBUG, "ColorManager: unknown CMS mode %d",
+              settings->GetInt("videoscreen.cmsmode"));
     return false;
   }
 
@@ -468,9 +469,7 @@ cmsToneCurve* CColorManager::CreateToneCurve(CMS_TRC_TYPE gammaType, float gamma
       }
       gammaValue = gammaGuess;
       CLog::Log(LOGINFO, "calculated technical gamma %0.3f (50%% target %0.4f, output %0.4f)",
-        gammaValue,
-        TARGET(effectiveGamma),
-        HALFPT(blackPoint.Y, gammaValue));
+                gammaValue, TARGET(effectiveGamma), HALFPT(blackPoint.Y, gammaValue));
 #undef TARGET
 #undef GAIN
 #undef LIFT
@@ -601,11 +600,9 @@ void CColorManager::Create3dLut(cmsHTRANSFORM transform, CMS_DATA_FORMAT format,
   for (int y=0; y<lutResolution; y+=1)
   {
     int index = components*(y*lutResolution*lutResolution + y*lutResolution + y);
-    CLog::Log(LOGDEBUG, "  %d (%d): %d %d %d",
-        (int)round(y * 255 / (lutResolution-1.0)), y,
-        (int)round(clutData[index+0]),
-        (int)round(clutData[index+1]),
-        (int)round(clutData[index+2]));
+    CLog::Log(LOGDEBUG, "  %d (%d): %d %d %d", (int)round(y * 255 / (lutResolution - 1.0)), y,
+              (int)round(clutData[index + 0]), (int)round(clutData[index + 1]),
+              (int)round(clutData[index + 2]));
   }
   delete[] input;
   delete[] output;
diff --git a/xbmc/cores/omxplayer/OMXImage.cpp b/xbmc/cores/omxplayer/OMXImage.cpp
index 1e31bf8824ac..070d913b6674 100644
--- a/xbmc/cores/omxplayer/OMXImage.cpp
+++ b/xbmc/cores/omxplayer/OMXImage.cpp
@@ -591,7 +591,8 @@ OMX_IMAGE_CODINGTYPE COMXImageFile::GetCodingType(unsigned int &width, unsigned
 
   if(!m_image_size)
   {
-    CLog::Log(LOGERROR, "%s::%s %s m_image_size unexpected (%lu)", CLASSNAME, __func__, GetFilename(), m_image_size);
+    CLog::Log(LOGERROR, "%s::%s %s m_image_size unexpected (%lu)", CLASSNAME, __func__,
+              GetFilename(), m_image_size);
     return OMX_IMAGE_CodingMax;
   }
 
@@ -850,7 +851,8 @@ OMX_IMAGE_CODINGTYPE COMXImageFile::GetCodingType(unsigned int &width, unsigned
 
   if(progressive)
   {
-    CLog::Log(LOGWARNING, "%s::%s progressive images not supported by decoder", CLASSNAME, __func__);
+    CLog::Log(LOGWARNING, "%s::%s progressive images not supported by decoder", CLASSNAME,
+              __func__);
     eCompressionFormat = OMX_IMAGE_CodingMax;
   }
 
@@ -888,7 +890,8 @@ bool COMXImageFile::ReadFile(const std::string& inputFile, int orientation)
   m_image_buffer = (uint8_t *)malloc(m_image_size);
   if(!m_image_buffer)
   {
-    CLog::Log(LOGERROR, "%s::%s %s m_image_buffer null (%lu)", CLASSNAME, __func__, GetFilename(), m_image_size);
+    CLog::Log(LOGERROR, "%s::%s %s m_image_buffer null (%lu)", CLASSNAME, __func__, GetFilename(),
+              m_image_size);
     return false;
   }
 
@@ -898,7 +901,8 @@ bool COMXImageFile::ReadFile(const std::string& inputFile, int orientation)
   OMX_IMAGE_CODINGTYPE eCompressionFormat = GetCodingType(m_width, m_height, orientation);
   if(eCompressionFormat != OMX_IMAGE_CodingJPEG || m_width < 1 || m_height < 1)
   {
-    CLog::Log(LOGDEBUG, "%s::%s %s GetCodingType=0x%x (%dx%d)", CLASSNAME, __func__, GetFilename(), eCompressionFormat, m_width, m_height);
+    CLog::Log(LOGDEBUG, "%s::%s %s GetCodingType=0x%x (%dx%d)", CLASSNAME, __func__, GetFilename(),
+              eCompressionFormat, m_width, m_height);
     return false;
   }
 
@@ -1001,7 +1005,8 @@ bool COMXImageDec::HandlePortSettingChange(unsigned int resize_width, unsigned i
     omx_err = m_omx_resize.SetParameter(OMX_IndexParamPortDefinition, &port_def);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s m_omx_resize.SetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s m_omx_resize.SetParameter result(0x%x)", CLASSNAME, __func__,
+                omx_err);
       return false;
     }
 
@@ -1010,7 +1015,8 @@ bool COMXImageDec::HandlePortSettingChange(unsigned int resize_width, unsigned i
     omx_err = m_omx_resize.GetParameter(OMX_IndexParamPortDefinition, &m_decoded_format);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s m_omx_resize.GetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s m_omx_resize.GetParameter result(0x%x)", CLASSNAME, __func__,
+                omx_err);
       return false;
     }
     assert(m_decoded_format.nBufferCountActual == 1);
@@ -1018,13 +1024,15 @@ bool COMXImageDec::HandlePortSettingChange(unsigned int resize_width, unsigned i
     omx_err = m_omx_resize.AllocOutputBuffers();
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s m_omx_resize.AllocOutputBuffers result(0x%x)", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s m_omx_resize.AllocOutputBuffers result(0x%x)", CLASSNAME,
+                __func__, omx_err);
       return false;
     }
     omx_err = m_omx_resize.SetStateForComponent(OMX_StateExecuting);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s m_omx_resize.SetStateForComponent result(0x%x)", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s m_omx_resize.SetStateForComponent result(0x%x)", CLASSNAME,
+                __func__, omx_err);
       return false;
     }
 
@@ -1039,9 +1047,10 @@ bool COMXImageDec::HandlePortSettingChange(unsigned int resize_width, unsigned i
     omx_err = m_omx_resize.FillThisBuffer(m_decoded_buffer);
     if(omx_err != OMX_ErrorNone)
      {
-      CLog::Log(LOGERROR, "%s::%s m_omx_resize FillThisBuffer result(0x%x)", CLASSNAME, __func__, omx_err);
-      m_omx_resize.DecoderFillBufferDone(m_omx_resize.GetComponent(), m_decoded_buffer);
-      return false;
+       CLog::Log(LOGERROR, "%s::%s m_omx_resize FillThisBuffer result(0x%x)", CLASSNAME, __func__,
+                 omx_err);
+       m_omx_resize.DecoderFillBufferDone(m_omx_resize.GetComponent(), m_decoded_buffer);
+       return false;
     }
   }
   // on subsequent port settings changed event, we just copy the port settings
@@ -1104,7 +1113,8 @@ bool COMXImageDec::Decode(const uint8_t *demuxer_content, unsigned demuxer_bytes
   omx_err = m_omx_decoder.GetParameter(OMX_IndexParamPortDefinition, &portParam);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s error GetParameter:OMX_IndexParamPortDefinition omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s error GetParameter:OMX_IndexParamPortDefinition omx_err(0x%08x)",
+              CLASSNAME, __func__, omx_err);
     return false;
   }
 
@@ -1115,7 +1125,8 @@ bool COMXImageDec::Decode(const uint8_t *demuxer_content, unsigned demuxer_bytes
   omx_err = m_omx_decoder.SetParameter(OMX_IndexParamPortDefinition, &portParam);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s error SetParameter:OMX_IndexParamPortDefinition omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s error SetParameter:OMX_IndexParamPortDefinition omx_err(0x%08x)",
+              CLASSNAME, __func__, omx_err);
     return false;
   }
 
@@ -1129,7 +1140,8 @@ bool COMXImageDec::Decode(const uint8_t *demuxer_content, unsigned demuxer_bytes
   omx_err = m_omx_decoder.SetStateForComponent(OMX_StateExecuting);
   if (omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s m_omx_decoder.SetStateForComponent result(0x%x)", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s m_omx_decoder.SetStateForComponent result(0x%x)", CLASSNAME,
+              __func__, omx_err);
     return false;
   }
 
@@ -1156,7 +1168,8 @@ bool COMXImageDec::Decode(const uint8_t *demuxer_content, unsigned demuxer_bytes
        omx_err = m_omx_decoder.EmptyThisBuffer(omx_buffer);
        if (omx_err != OMX_ErrorNone)
        {
-         CLog::Log(LOGERROR, "%s::%s OMX_EmptyThisBuffer() failed with result(0x%x)", CLASSNAME, __func__, omx_err);
+         CLog::Log(LOGERROR, "%s::%s OMX_EmptyThisBuffer() failed with result(0x%x)", CLASSNAME,
+                   __func__, omx_err);
          m_omx_decoder.DecoderEmptyBufferDone(m_omx_decoder.GetComponent(), omx_buffer);
          return false;
        }
@@ -1182,7 +1195,8 @@ bool COMXImageDec::Decode(const uint8_t *demuxer_content, unsigned demuxer_bytes
     }
     else if(timeout || omx_err != OMX_ErrorTimeout)
     {
-      CLog::Log(LOGERROR, "%s::%s WaitForEvent:OMX_EventPortSettingsChanged failed (%x)", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s WaitForEvent:OMX_EventPortSettingsChanged failed (%x)", CLASSNAME,
+                __func__, omx_err);
       return false;
     }
   }
@@ -1190,7 +1204,8 @@ bool COMXImageDec::Decode(const uint8_t *demuxer_content, unsigned demuxer_bytes
   omx_err = m_omx_resize.WaitForOutputDone(1000);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s m_omx_resize.WaitForOutputDone result(0x%x)", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s m_omx_resize.WaitForOutputDone result(0x%x)", CLASSNAME, __func__,
+              omx_err);
     return false;
   }
 
@@ -1270,7 +1285,8 @@ bool COMXImageEnc::Encode(unsigned char *buffer, int size, unsigned width, unsig
   omx_err = m_omx_encoder.GetParameter(OMX_IndexParamPortDefinition, &port_def);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.GetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.GetParameter result(0x%x)", CLASSNAME, __func__,
+              omx_err);
     return false;
   }
 
@@ -1285,7 +1301,8 @@ bool COMXImageEnc::Encode(unsigned char *buffer, int size, unsigned width, unsig
   omx_err = m_omx_encoder.SetParameter(OMX_IndexParamPortDefinition, &port_def);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.SetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.SetParameter result(0x%x)", CLASSNAME, __func__,
+              omx_err);
     return false;
   }
 
@@ -1295,7 +1312,8 @@ bool COMXImageEnc::Encode(unsigned char *buffer, int size, unsigned width, unsig
   omx_err = m_omx_encoder.GetParameter(OMX_IndexParamPortDefinition, &port_def);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.GetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.GetParameter result(0x%x)", CLASSNAME, __func__,
+              omx_err);
     return false;
   }
 
@@ -1310,7 +1328,8 @@ bool COMXImageEnc::Encode(unsigned char *buffer, int size, unsigned width, unsig
   omx_err = m_omx_encoder.SetParameter(OMX_IndexParamPortDefinition, &port_def);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.SetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.SetParameter result(0x%x)", CLASSNAME, __func__,
+              omx_err);
     return false;
   }
 
@@ -1322,7 +1341,8 @@ bool COMXImageEnc::Encode(unsigned char *buffer, int size, unsigned width, unsig
   omx_err = m_omx_encoder.SetParameter(OMX_IndexParamQFactor, &qfactor);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.SetParameter OMX_IndexParamQFactor result(0x%x)", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.SetParameter OMX_IndexParamQFactor result(0x%x)",
+              CLASSNAME, __func__, omx_err);
     return false;
   }
 
@@ -1336,14 +1356,16 @@ bool COMXImageEnc::Encode(unsigned char *buffer, int size, unsigned width, unsig
   omx_err = m_omx_encoder.AllocOutputBuffers();
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.AllocOutputBuffers result(0x%x)", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.AllocOutputBuffers result(0x%x)", CLASSNAME, __func__,
+              omx_err);
     return false;
   }
 
   omx_err = m_omx_encoder.SetStateForComponent(OMX_StateExecuting);
   if (omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.SetStateForComponent result(0x%x)", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.SetStateForComponent result(0x%x)", CLASSNAME,
+              __func__, omx_err);
     return false;
   }
 
@@ -1375,7 +1397,8 @@ bool COMXImageEnc::Encode(unsigned char *buffer, int size, unsigned width, unsig
     omx_err = m_omx_encoder.EmptyThisBuffer(omx_buffer);
     if (omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s OMX_EmptyThisBuffer() failed with result(0x%x)", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s OMX_EmptyThisBuffer() failed with result(0x%x)", CLASSNAME,
+                __func__, omx_err);
       m_omx_encoder.DecoderEmptyBufferDone(m_omx_encoder.GetComponent(), omx_buffer);
       break;
     }
@@ -1392,14 +1415,16 @@ bool COMXImageEnc::Encode(unsigned char *buffer, int size, unsigned width, unsig
   omx_err = m_omx_encoder.FillThisBuffer(m_encoded_buffer);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.FillThisBuffer result(0x%x)", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.FillThisBuffer result(0x%x)", CLASSNAME, __func__,
+              omx_err);
     m_omx_encoder.DecoderFillBufferDone(m_omx_encoder.GetComponent(), m_encoded_buffer);
     return false;
   }
   omx_err = m_omx_encoder.WaitForOutputDone(2000);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.WaitForOutputDone result(0x%x)", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.WaitForOutputDone result(0x%x)", CLASSNAME, __func__,
+              omx_err);
     return false;
   }
 
@@ -1407,7 +1432,8 @@ bool COMXImageEnc::Encode(unsigned char *buffer, int size, unsigned width, unsig
   omx_err = m_omx_encoder.GetParameter(OMX_IndexParamPortDefinition, &m_encoded_format);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.GetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s m_omx_encoder.GetParameter result(0x%x)", CLASSNAME, __func__,
+              omx_err);
     return false;
   }
 
@@ -1422,7 +1448,8 @@ bool COMXImageEnc::CreateThumbnailFromSurface(unsigned char* buffer, unsigned in
 {
   if(format != XB_FMT_A8R8G8B8 || !buffer)
   {
-    CLog::Log(LOGDEBUG, "%s::%s : %s failed format=0x%x", CLASSNAME, __func__, destFile.c_str(), format);
+    CLog::Log(LOGDEBUG, "%s::%s : %s failed format=0x%x", CLASSNAME, __func__, destFile.c_str(),
+              format);
     return false;
   }
 
@@ -1435,7 +1462,8 @@ bool COMXImageEnc::CreateThumbnailFromSurface(unsigned char* buffer, unsigned in
   XFILE::CFile file;
   if (file.OpenForWrite(destFile, true))
   {
-    CLog::Log(LOGDEBUG, "%s::%s : %s width %d height %d", CLASSNAME, __func__, destFile.c_str(), width, height);
+    CLog::Log(LOGDEBUG, "%s::%s : %s width %d height %d", CLASSNAME, __func__, destFile.c_str(),
+              width, height);
 
     file.Write(m_encoded_buffer->pBuffer, m_encoded_buffer->nFilledLen);
     file.Close();
@@ -1520,7 +1548,8 @@ bool COMXImageReEnc::HandlePortSettingChange(unsigned int resize_width, unsigned
     m_omx_decoder.GetParameter(OMX_IndexParamPortDefinition, &port_def);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s m_omx_decoder.GetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s m_omx_decoder.GetParameter result(0x%x)", CLASSNAME, __func__,
+                omx_err);
       return false;
     }
 
@@ -1545,7 +1574,8 @@ bool COMXImageReEnc::HandlePortSettingChange(unsigned int resize_width, unsigned
     m_omx_decoder.SetParameter(OMX_IndexParamPortDefinition, &port_def);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s m_omx_decoder.SetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s m_omx_decoder.SetParameter result(0x%x)", CLASSNAME, __func__,
+                omx_err);
       return false;
     }
 
@@ -1556,7 +1586,8 @@ bool COMXImageReEnc::HandlePortSettingChange(unsigned int resize_width, unsigned
       m_omx_resize.SetParameter(OMX_IndexParamPortDefinition, &port_def);
       if(omx_err != OMX_ErrorNone)
       {
-        CLog::Log(LOGERROR, "%s::%s m_omx_resize.SetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
+        CLog::Log(LOGERROR, "%s::%s m_omx_resize.SetParameter result(0x%x)", CLASSNAME, __func__,
+                  omx_err);
         return false;
       }
 
@@ -1564,7 +1595,8 @@ bool COMXImageReEnc::HandlePortSettingChange(unsigned int resize_width, unsigned
       m_omx_resize.GetParameter(OMX_IndexParamPortDefinition, &port_def);
       if(omx_err != OMX_ErrorNone)
       {
-        CLog::Log(LOGERROR, "%s::%s m_omx_resize.GetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
+        CLog::Log(LOGERROR, "%s::%s m_omx_resize.GetParameter result(0x%x)", CLASSNAME, __func__,
+                  omx_err);
         return false;
       }
       port_def.format.image.eColorFormat = OMX_COLOR_FormatYUV420PackedPlanar;
@@ -1575,7 +1607,8 @@ bool COMXImageReEnc::HandlePortSettingChange(unsigned int resize_width, unsigned
       m_omx_resize.SetParameter(OMX_IndexParamPortDefinition, &port_def);
       if(omx_err != OMX_ErrorNone)
       {
-        CLog::Log(LOGERROR, "%s::%s m_omx_resize.SetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
+        CLog::Log(LOGERROR, "%s::%s m_omx_resize.SetParameter result(0x%x)", CLASSNAME, __func__,
+                  omx_err);
         return false;
       }
     }
@@ -1590,7 +1623,8 @@ bool COMXImageReEnc::HandlePortSettingChange(unsigned int resize_width, unsigned
     m_omx_encoder.GetParameter(OMX_IndexParamPortDefinition, &port_def);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s m_omx_encoder.GetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s m_omx_encoder.GetParameter result(0x%x)", CLASSNAME, __func__,
+                omx_err);
       return false;
     }
     port_def.format.image.eColorFormat = OMX_COLOR_FormatYUV420PackedPlanar;
@@ -1601,7 +1635,8 @@ bool COMXImageReEnc::HandlePortSettingChange(unsigned int resize_width, unsigned
     m_omx_encoder.SetParameter(OMX_IndexParamPortDefinition, &port_def);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s m_omx_encoder.SetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s m_omx_encoder.SetParameter result(0x%x)", CLASSNAME, __func__,
+                omx_err);
       return false;
     }
 
@@ -1609,7 +1644,8 @@ bool COMXImageReEnc::HandlePortSettingChange(unsigned int resize_width, unsigned
     omx_err = m_omx_encoder.GetParameter(OMX_IndexParamPortDefinition, &port_def);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s m_omx_encoder.GetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s m_omx_encoder.GetParameter result(0x%x)", CLASSNAME, __func__,
+                omx_err);
       return false;
     }
 
@@ -1624,7 +1660,8 @@ bool COMXImageReEnc::HandlePortSettingChange(unsigned int resize_width, unsigned
     omx_err = m_omx_encoder.SetParameter(OMX_IndexParamPortDefinition, &port_def);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s m_omx_encoder.SetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s m_omx_encoder.SetParameter result(0x%x)", CLASSNAME, __func__,
+                omx_err);
       return false;
     }
 
@@ -1636,7 +1673,8 @@ bool COMXImageReEnc::HandlePortSettingChange(unsigned int resize_width, unsigned
     omx_err = m_omx_encoder.SetParameter(OMX_IndexParamQFactor, &qfactor);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s m_omx_encoder.SetParameter OMX_IndexParamQFactor result(0x%x)", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s m_omx_encoder.SetParameter OMX_IndexParamQFactor result(0x%x)",
+                CLASSNAME, __func__, omx_err);
       return false;
     }
 
@@ -1667,14 +1705,17 @@ bool COMXImageReEnc::HandlePortSettingChange(unsigned int resize_width, unsigned
       omx_err = m_omx_encoder.SetParameter(OMX_IndexConfigMetadataItem, &item);
       if (omx_err != OMX_ErrorNone)
       {
-        CLog::Log(LOGERROR, "%s::%s m_omx_encoder.SetParameter:OMX_IndexConfigMetadataItem omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
+        CLog::Log(LOGERROR,
+                  "%s::%s m_omx_encoder.SetParameter:OMX_IndexConfigMetadataItem omx_err(0x%08x)",
+                  CLASSNAME, __func__, omx_err);
         return false;
       }
     }
     omx_err = m_omx_encoder.AllocOutputBuffers();
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s m_omx_encoder.AllocOutputBuffers result(0x%x)", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s m_omx_encoder.AllocOutputBuffers result(0x%x)", CLASSNAME,
+                __func__, omx_err);
       return false;
     }
 
@@ -1701,7 +1742,8 @@ bool COMXImageReEnc::HandlePortSettingChange(unsigned int resize_width, unsigned
       omx_err = m_omx_resize.SetStateForComponent(OMX_StateExecuting);
       if(omx_err != OMX_ErrorNone)
       {
-        CLog::Log(LOGERROR, "%s::%s m_omx_resize.SetStateForComponent result(0x%x)", CLASSNAME, __func__, omx_err);
+        CLog::Log(LOGERROR, "%s::%s m_omx_resize.SetStateForComponent result(0x%x)", CLASSNAME,
+                  __func__, omx_err);
         return false;
       }
     }
@@ -1719,7 +1761,8 @@ bool COMXImageReEnc::HandlePortSettingChange(unsigned int resize_width, unsigned
     omx_err = m_omx_encoder.SetStateForComponent(OMX_StateExecuting);
     if (omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s m_omx_encoder.SetStateForComponent result(0x%x)", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s m_omx_encoder.SetStateForComponent result(0x%x)", CLASSNAME,
+                __func__, omx_err);
       return false;
     }
 
@@ -1776,7 +1819,8 @@ bool COMXImageReEnc::ReEncode(COMXImageFile &srcFile, unsigned int maxWidth, uns
 
   if(!m_omx_decoder.Initialize("OMX.broadcom.image_decode", OMX_IndexParamImageInit))
   {
-    CLog::Log(LOGERROR, "%s::%s %s error m_omx_decoder.Initialize", CLASSNAME, __func__, srcFile.GetFilename());
+    CLog::Log(LOGERROR, "%s::%s %s error m_omx_decoder.Initialize", CLASSNAME, __func__,
+              srcFile.GetFilename());
     return false;
   }
 
@@ -1788,7 +1832,8 @@ bool COMXImageReEnc::ReEncode(COMXImageFile &srcFile, unsigned int maxWidth, uns
   omx_err = m_omx_decoder.GetParameter(OMX_IndexParamPortDefinition, &portParam);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s %s error GetParameter:OMX_IndexParamPortDefinition omx_err(0x%08x)", CLASSNAME, __func__, srcFile.GetFilename(), omx_err);
+    CLog::Log(LOGERROR, "%s::%s %s error GetParameter:OMX_IndexParamPortDefinition omx_err(0x%08x)",
+              CLASSNAME, __func__, srcFile.GetFilename(), omx_err);
     return false;
   }
 
@@ -1799,7 +1844,8 @@ bool COMXImageReEnc::ReEncode(COMXImageFile &srcFile, unsigned int maxWidth, uns
   omx_err = m_omx_decoder.SetParameter(OMX_IndexParamPortDefinition, &portParam);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s %s error SetParameter:OMX_IndexParamPortDefinition omx_err(0x%08x)", CLASSNAME, __func__, srcFile.GetFilename(), omx_err);
+    CLog::Log(LOGERROR, "%s::%s %s error SetParameter:OMX_IndexParamPortDefinition omx_err(0x%08x)",
+              CLASSNAME, __func__, srcFile.GetFilename(), omx_err);
     return false;
   }
 
@@ -1813,7 +1859,8 @@ bool COMXImageReEnc::ReEncode(COMXImageFile &srcFile, unsigned int maxWidth, uns
   omx_err = m_omx_decoder.SetStateForComponent(OMX_StateExecuting);
   if (omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s %s m_omx_decoder.SetStateForComponent result(0x%x)", CLASSNAME, __func__, srcFile.GetFilename(), omx_err);
+    CLog::Log(LOGERROR, "%s::%s %s m_omx_decoder.SetStateForComponent result(0x%x)", CLASSNAME,
+              __func__, srcFile.GetFilename(), omx_err);
     return false;
   }
 
@@ -1839,7 +1886,8 @@ bool COMXImageReEnc::ReEncode(COMXImageFile &srcFile, unsigned int maxWidth, uns
          omx_err = m_omx_decoder.EmptyThisBuffer(omx_buffer);
          if (omx_err != OMX_ErrorNone)
          {
-           CLog::Log(LOGERROR, "%s::%s %s OMX_EmptyThisBuffer() failed with result(0x%x)", CLASSNAME, __func__, srcFile.GetFilename(), omx_err);
+           CLog::Log(LOGERROR, "%s::%s %s OMX_EmptyThisBuffer() failed with result(0x%x)",
+                     CLASSNAME, __func__, srcFile.GetFilename(), omx_err);
            m_omx_decoder.DecoderEmptyBufferDone(m_omx_decoder.GetComponent(), omx_buffer);
            return false;
          }
@@ -1856,7 +1904,8 @@ bool COMXImageReEnc::ReEncode(COMXImageFile &srcFile, unsigned int maxWidth, uns
     {
       if (!HandlePortSettingChange(maxWidth, maxHeight, srcFile.GetOrientation(), port_settings_changed))
       {
-        CLog::Log(LOGERROR, "%s::%s %s HandlePortSettingChange() failed", srcFile.GetFilename(), CLASSNAME, __func__);
+        CLog::Log(LOGERROR, "%s::%s %s HandlePortSettingChange() failed", srcFile.GetFilename(),
+                  CLASSNAME, __func__);
         return false;
       }
       port_settings_changed = true;
@@ -1868,7 +1917,8 @@ bool COMXImageReEnc::ReEncode(COMXImageFile &srcFile, unsigned int maxWidth, uns
     }
     else if(timeout || omx_err != OMX_ErrorTimeout)
     {
-      CLog::Log(LOGERROR, "%s::%s %s WaitForEvent:OMX_EventPortSettingsChanged failed (%x)", CLASSNAME, __func__, srcFile.GetFilename(), omx_err);
+      CLog::Log(LOGERROR, "%s::%s %s WaitForEvent:OMX_EventPortSettingsChanged failed (%x)",
+                CLASSNAME, __func__, srcFile.GetFilename(), omx_err);
       return false;
     }
 
@@ -1878,7 +1928,8 @@ bool COMXImageReEnc::ReEncode(COMXImageFile &srcFile, unsigned int maxWidth, uns
       omx_err = m_omx_encoder.FillThisBuffer(m_encoded_buffer);
       if(omx_err != OMX_ErrorNone)
       {
-        CLog::Log(LOGERROR, "%s::%s %s FillThisBuffer() failed (%x)", CLASSNAME, __func__, srcFile.GetFilename(), omx_err);
+        CLog::Log(LOGERROR, "%s::%s %s FillThisBuffer() failed (%x)", CLASSNAME, __func__,
+                  srcFile.GetFilename(), omx_err);
         m_omx_encoder.DecoderFillBufferDone(m_omx_encoder.GetComponent(), m_encoded_buffer);
         return false;
       }
@@ -1888,12 +1939,14 @@ bool COMXImageReEnc::ReEncode(COMXImageFile &srcFile, unsigned int maxWidth, uns
       omx_err = m_omx_encoder.WaitForOutputDone(2000);
       if (omx_err != OMX_ErrorNone)
       {
-        CLog::Log(LOGERROR, "%s::%s %s m_omx_encoder.WaitForOutputDone result(0x%x)", CLASSNAME, __func__, srcFile.GetFilename(), omx_err);
+        CLog::Log(LOGERROR, "%s::%s %s m_omx_encoder.WaitForOutputDone result(0x%x)", CLASSNAME,
+                  __func__, srcFile.GetFilename(), omx_err);
         return false;
       }
       if (!m_encoded_buffer->nFilledLen)
       {
-        CLog::Log(LOGERROR, "%s::%s %s m_omx_encoder.WaitForOutputDone no data", CLASSNAME, __func__, srcFile.GetFilename());
+        CLog::Log(LOGERROR, "%s::%s %s m_omx_encoder.WaitForOutputDone no data", CLASSNAME,
+                  __func__, srcFile.GetFilename());
         return false;
       }
       if (m_encoded_buffer->nFlags & OMX_BUFFERFLAG_EOS)
@@ -1915,7 +1968,8 @@ bool COMXImageReEnc::ReEncode(COMXImageFile &srcFile, unsigned int maxWidth, uns
     return false;
 
   pDestBuffer = m_pDestBuffer;
-  CLog::Log(LOGDEBUG, "%s::%s : %s %dx%d -> %dx%d", CLASSNAME, __func__, srcFile.GetFilename(), srcFile.GetWidth(), srcFile.GetHeight(), maxWidth, maxHeight);
+  CLog::Log(LOGDEBUG, "%s::%s : %s %dx%d -> %dx%d", CLASSNAME, __func__, srcFile.GetFilename(),
+            srcFile.GetWidth(), srcFile.GetHeight(), maxWidth, maxHeight);
 
   m_success = true;
   Close();
@@ -1989,7 +2043,8 @@ bool COMXTexture::HandlePortSettingChange(unsigned int resize_width, unsigned in
   omx_err = m_omx_decoder.GetParameter(OMX_IndexParamPortDefinition, &port_def);
   if (omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s m_omx_decoder.GetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s m_omx_decoder.GetParameter result(0x%x)", CLASSNAME, __func__,
+              omx_err);
     return false;
   }
 
@@ -2001,7 +2056,8 @@ bool COMXTexture::HandlePortSettingChange(unsigned int resize_width, unsigned in
   omx_err = m_omx_decoder.SetParameter(OMX_IndexParamPortDefinition, &port_def);
   if (omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s m_omx_decoder.SetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s m_omx_decoder.SetParameter result(0x%x)", CLASSNAME, __func__,
+              omx_err);
     return false;
   }
   if (resize_width != port_def.format.image.nFrameWidth || resize_height != port_def.format.image.nFrameHeight)
@@ -2019,7 +2075,8 @@ bool COMXTexture::HandlePortSettingChange(unsigned int resize_width, unsigned in
     omx_err = m_omx_resize.SetParameter(OMX_IndexParamPortDefinition, &port_def);
     if (omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s m_omx_resize.SetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s m_omx_resize.SetParameter result(0x%x)", CLASSNAME, __func__,
+                omx_err);
       return false;
     }
 
@@ -2027,7 +2084,8 @@ bool COMXTexture::HandlePortSettingChange(unsigned int resize_width, unsigned in
     omx_err = m_omx_resize.GetParameter(OMX_IndexParamPortDefinition, &port_def);
     if (omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s m_omx_resize.GetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s m_omx_resize.GetParameter result(0x%x)", CLASSNAME, __func__,
+                omx_err);
       return false;
     }
 
@@ -2039,7 +2097,8 @@ bool COMXTexture::HandlePortSettingChange(unsigned int resize_width, unsigned in
     omx_err = m_omx_resize.SetParameter(OMX_IndexParamPortDefinition, &port_def);
     if (omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s m_omx_resize.SetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s m_omx_resize.SetParameter result(0x%x)", CLASSNAME, __func__,
+                omx_err);
       return false;
     }
   }
@@ -2053,7 +2112,8 @@ bool COMXTexture::HandlePortSettingChange(unsigned int resize_width, unsigned in
   omx_err = m_omx_egl_render.GetParameter(OMX_IndexParamPortDefinition, &port_def);
   if (omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s m_omx_egl_render.SetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s m_omx_egl_render.SetParameter result(0x%x)", CLASSNAME, __func__,
+              omx_err);
     return false;
   }
   port_def.nBufferCountActual = 1;
@@ -2062,7 +2122,8 @@ bool COMXTexture::HandlePortSettingChange(unsigned int resize_width, unsigned in
   omx_err = m_omx_egl_render.SetParameter(OMX_IndexParamPortDefinition, &port_def);
   if (omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s m_omx_egl_render.SetParameter result(0x%x)", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s m_omx_egl_render.SetParameter result(0x%x)", CLASSNAME, __func__,
+              omx_err);
     return false;
   }
 
@@ -2146,7 +2207,8 @@ bool COMXTexture::Decode(const uint8_t *demuxer_content, unsigned demuxer_bytes,
   omx_err = m_omx_decoder.GetParameter(OMX_IndexParamPortDefinition, &portParam);
   if (omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s error GetParameter:OMX_IndexParamPortDefinition omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s error GetParameter:OMX_IndexParamPortDefinition omx_err(0x%08x)",
+              CLASSNAME, __func__, omx_err);
     return false;
   }
 
@@ -2157,7 +2219,8 @@ bool COMXTexture::Decode(const uint8_t *demuxer_content, unsigned demuxer_bytes,
   omx_err = m_omx_decoder.SetParameter(OMX_IndexParamPortDefinition, &portParam);
   if (omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "%s::%s error SetParameter:OMX_IndexParamPortDefinition omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
+    CLog::Log(LOGERROR, "%s::%s error SetParameter:OMX_IndexParamPortDefinition omx_err(0x%08x)",
+              CLASSNAME, __func__, omx_err);
     return false;
   }
 
@@ -2228,7 +2291,8 @@ bool COMXTexture::Decode(const uint8_t *demuxer_content, unsigned demuxer_bytes,
     }
     else if (timeout || omx_err != OMX_ErrorTimeout)
     {
-      CLog::Log(LOGERROR, "%s::%s WaitForEvent:OMX_EventPortSettingsChanged failed (%x)", CLASSNAME, __func__, omx_err);
+      CLog::Log(LOGERROR, "%s::%s WaitForEvent:OMX_EventPortSettingsChanged failed (%x)", CLASSNAME,
+                __func__, omx_err);
       return false;
     }
 
@@ -2258,7 +2322,8 @@ bool COMXTexture::Decode(const uint8_t *demuxer_content, unsigned demuxer_bytes,
       omx_err = m_omx_egl_render.WaitForOutputDone(2000);
       if (omx_err != OMX_ErrorNone)
       {
-        CLog::Log(LOGERROR, "%s::%s m_omx_egl_render.WaitForOutputDone result(0x%x)", CLASSNAME, __func__, omx_err);
+        CLog::Log(LOGERROR, "%s::%s m_omx_egl_render.WaitForOutputDone result(0x%x)", CLASSNAME,
+                  __func__, omx_err);
         return false;
       }
       eos = true;
diff --git a/xbmc/filesystem/BlurayCallback.cpp b/xbmc/filesystem/BlurayCallback.cpp
index d750f8991055..6658911d6ee6 100644
--- a/xbmc/filesystem/BlurayCallback.cpp
+++ b/xbmc/filesystem/BlurayCallback.cpp
@@ -57,7 +57,8 @@ BD_DIR_H* CBlurayCallback::dir_open(void *handle, const char* rel_path)
   if (!CDirectory::GetDirectory(strDirname, st->list, "", DIR_FLAG_DEFAULTS))
   {
     if (!CFile::Exists(strDirname))
-      CLog::Log(LOGDEBUG, "CBlurayCallback - Error opening dir! (%s)", CURL::GetRedacted(strDirname).c_str());
+      CLog::Log(LOGDEBUG, "CBlurayCallback - Error opening dir! (%s)",
+                CURL::GetRedacted(strDirname).c_str());
     delete st;
     return nullptr;
   }
diff --git a/xbmc/filesystem/NFSDirectory.cpp b/xbmc/filesystem/NFSDirectory.cpp
index cb3215a2a008..62b1d3349951 100644
--- a/xbmc/filesystem/NFSDirectory.cpp
+++ b/xbmc/filesystem/NFSDirectory.cpp
@@ -144,7 +144,8 @@ bool CNFSDirectory::ResolveSymlink( const std::string &dirName, struct nfsdirent
 
     if (ret != 0)
     {
-      CLog::Log(LOGERROR, "NFS: Failed to stat(%s) on link resolve %s", fullpath.c_str(), nfs_get_error(gNfsConnection.GetNfsContext()));
+      CLog::Log(LOGERROR, "NFS: Failed to stat(%s) on link resolve %s", fullpath.c_str(),
+                nfs_get_error(gNfsConnection.GetNfsContext()));
       retVal = false;
     }
     else
@@ -168,7 +169,8 @@ bool CNFSDirectory::ResolveSymlink( const std::string &dirName, struct nfsdirent
   }
   else
   {
-    CLog::Log(LOGERROR, "Failed to readlink(%s) %s", fullpath.c_str(), nfs_get_error(gNfsConnection.GetNfsContext()));
+    CLog::Log(LOGERROR, "Failed to readlink(%s) %s", fullpath.c_str(),
+              nfs_get_error(gNfsConnection.GetNfsContext()));
     retVal = false;
   }
   return retVal;
@@ -211,7 +213,8 @@ bool CNFSDirectory::GetDirectory(const CURL& url, CFileItemList &items)
 
   if(ret != 0)
   {
-    CLog::Log(LOGERROR, "Failed to open(%s) %s", strDirName.c_str(), nfs_get_error(gNfsConnection.GetNfsContext()));
+    CLog::Log(LOGERROR, "Failed to open(%s) %s", strDirName.c_str(),
+              nfs_get_error(gNfsConnection.GetNfsContext()));
     return false;
   }
   lock.Leave();
@@ -304,7 +307,8 @@ bool CNFSDirectory::Create(const CURL& url2)
 
   success = (ret == 0 || -EEXIST == ret);
   if(!success)
-    CLog::Log(LOGERROR, "NFS: Failed to create(%s) %s", folderName.c_str(), nfs_get_error(gNfsConnection.GetNfsContext()));
+    CLog::Log(LOGERROR, "NFS: Failed to create(%s) %s", folderName.c_str(),
+              nfs_get_error(gNfsConnection.GetNfsContext()));
   return success;
 }
 
diff --git a/xbmc/filesystem/NFSFile.cpp b/xbmc/filesystem/NFSFile.cpp
index cb505fdd75fa..2149bf493f65 100644
--- a/xbmc/filesystem/NFSFile.cpp
+++ b/xbmc/filesystem/NFSFile.cpp
@@ -285,11 +285,13 @@ bool CNfsConnection::Connect(const CURL& url, std::string &relativePath)
 
       if(nfsRet != 0)
       {
-        CLog::Log(LOGERROR,"NFS: Failed to mount nfs share: %s (%s)", exportPath.c_str(), nfs_get_error(m_pNfsContext));
+        CLog::Log(LOGERROR, "NFS: Failed to mount nfs share: %s (%s)", exportPath.c_str(),
+                  nfs_get_error(m_pNfsContext));
         destroyContext(url.GetHostName() + exportPath);
         return false;
       }
-      CLog::Log(LOGDEBUG,"NFS: Connected to server %s and export %s", url.GetHostName().c_str(), exportPath.c_str());
+      CLog::Log(LOGDEBUG, "NFS: Connected to server %s and export %s", url.GetHostName().c_str(),
+                exportPath.c_str());
     }
     m_exportPath = exportPath;
     m_hostName = url.GetHostName();
@@ -299,7 +301,7 @@ bool CNfsConnection::Connect(const CURL& url, std::string &relativePath)
 
     if(contextRet == CONTEXT_NEW)
     {
-      CLog::Log(LOGDEBUG,"NFS: chunks: r/w %i/%i", (int)m_readChunkSize,(int)m_writeChunkSize);
+      CLog::Log(LOGDEBUG, "NFS: chunks: r/w %i/%i", (int)m_readChunkSize, (int)m_writeChunkSize);
     }
   }
   return ret;
@@ -434,11 +436,13 @@ int CNfsConnection::stat(const CURL &url, NFSSTAT *statbuff)
       }
       else
       {
-        CLog::Log(LOGERROR,"NFS: Failed to mount nfs share: %s (%s)", exportPath.c_str(), nfs_get_error(m_pNfsContext));
+        CLog::Log(LOGERROR, "NFS: Failed to mount nfs share: %s (%s)", exportPath.c_str(),
+                  nfs_get_error(m_pNfsContext));
       }
 
       nfs_destroy_context(pTmpContext);
-      CLog::Log(LOGDEBUG,"NFS: Connected to server %s and export %s in tmpContext", url.GetHostName().c_str(), exportPath.c_str());
+      CLog::Log(LOGDEBUG, "NFS: Connected to server %s and export %s in tmpContext",
+                url.GetHostName().c_str(), exportPath.c_str());
     }
   }
   return nfsRet;
@@ -577,7 +581,8 @@ int CNFSFile::Stat(const CURL& url, struct __stat64* buffer)
   //if buffer == NULL we where called from Exists - in that case don't spam the log with errors
   if (ret != 0 && buffer != NULL)
   {
-    CLog::Log(LOGERROR, "NFS: Failed to stat(%s) %s", url.GetFileName().c_str(), nfs_get_error(gNfsConnection.GetNfsContext()));
+    CLog::Log(LOGERROR, "NFS: Failed to stat(%s) %s", url.GetFileName().c_str(),
+              nfs_get_error(gNfsConnection.GetNfsContext()));
     ret = -1;
   }
   else
@@ -679,7 +684,8 @@ void CNFSFile::Close()
 
 	  if (ret < 0)
     {
-      CLog::Log(LOGERROR, "Failed to close(%s) - %s", m_url.GetFileName().c_str(), nfs_get_error(m_pNfsContext));
+      CLog::Log(LOGERROR, "Failed to close(%s) - %s", m_url.GetFileName().c_str(),
+                nfs_get_error(m_pNfsContext));
     }
     m_pFileHandle = NULL;
     m_pNfsContext = NULL;
@@ -725,7 +731,8 @@ ssize_t CNFSFile::Write(const void* lpBuf, size_t uiBufSize)
     //danger - something went wrong
     if (writtenBytes < 0)
     {
-      CLog::Log(LOGERROR, "Failed to pwrite(%s) %s", m_url.GetFileName().c_str(), nfs_get_error(m_pNfsContext));
+      CLog::Log(LOGERROR, "Failed to pwrite(%s) %s", m_url.GetFileName().c_str(),
+                nfs_get_error(m_pNfsContext));
       if (numberOfBytesWritten == 0)
         return -1;
 
diff --git a/xbmc/filesystem/SpecialProtocol.cpp b/xbmc/filesystem/SpecialProtocol.cpp
index ef3b5d437a4e..71eb45eef8c6 100644
--- a/xbmc/filesystem/SpecialProtocol.cpp
+++ b/xbmc/filesystem/SpecialProtocol.cpp
@@ -123,7 +123,7 @@ std::string CSpecialProtocol::TranslatePath(const CURL &url)
     if (path.length() >= 2 && path[1] == ':')
     {
       CLog::Log(LOGWARNING, "Trying to access old style dir: %s", path.c_str());
-     // printf("Trying to access old style dir: %s\n", path.c_str());
+      // printf("Trying to access old style dir: %s\n", path.c_str());
     }
 #endif
 
diff --git a/xbmc/guilib/GUIWindow.cpp b/xbmc/guilib/GUIWindow.cpp
index 8f7ea34c177a..72313ab884d8 100644
--- a/xbmc/guilib/GUIWindow.cpp
+++ b/xbmc/guilib/GUIWindow.cpp
@@ -635,7 +635,7 @@ bool CGUIWindow::OnMessage(CGUIMessage& message)
     }
   case GUI_MSG_SETFOCUS:
     {
-//      CLog::Log(LOGDEBUG,"set focus to control:%i window:%i (%i)", message.GetControlId(),message.GetSenderId(), GetID());
+      //      CLog::Log(LOGDEBUG,"set focus to control:%i window:%i (%i)", message.GetControlId(),message.GetSenderId(), GetID());
       if ( message.GetControlId() )
       {
         // first unfocus the current control
diff --git a/xbmc/network/mdns/ZeroconfBrowserMDNS.cpp b/xbmc/network/mdns/ZeroconfBrowserMDNS.cpp
index 48236ce1a2e8..58fba68612a0 100644
--- a/xbmc/network/mdns/ZeroconfBrowserMDNS.cpp
+++ b/xbmc/network/mdns/ZeroconfBrowserMDNS.cpp
@@ -88,7 +88,8 @@ void DNSSD_API CZeroconfBrowserMDNS::BrowserCallback(DNSServiceRef browser,
   }
   else
   {
-    CLog::Log(LOGERROR, "ZeroconfBrowserMDNS::BrowserCallback returned (error = %ld)", (int)errorCode);
+    CLog::Log(LOGERROR, "ZeroconfBrowserMDNS::BrowserCallback returned (error = %ld)",
+              (int)errorCode);
   }
 }
 
diff --git a/xbmc/platform/darwin/osx/XBMCHelper.cpp b/xbmc/platform/darwin/osx/XBMCHelper.cpp
index 19177c2adc42..cc42b00a5b59 100644
--- a/xbmc/platform/darwin/osx/XBMCHelper.cpp
+++ b/xbmc/platform/darwin/osx/XBMCHelper.cpp
@@ -153,7 +153,7 @@ void XBMCHelper::Stop()
   int pid = GetProcessPid(XBMC_HELPER_PROGRAM);
   if (pid != -1)
   {
-    CLog::Log(LOGDEBUG,"XBMCHelper: Sending SIGKILL to %s", XBMC_HELPER_PROGRAM);
+    CLog::Log(LOGDEBUG, "XBMCHelper: Sending SIGKILL to %s", XBMC_HELPER_PROGRAM);
     kill(pid, SIGKILL);
   }
 }
diff --git a/xbmc/platform/darwin/osx/peripherals/PeripheralBusUSB.cpp b/xbmc/platform/darwin/osx/peripherals/PeripheralBusUSB.cpp
index 6a1dfa3184f8..c07a94e2e6ad 100644
--- a/xbmc/platform/darwin/osx/peripherals/PeripheralBusUSB.cpp
+++ b/xbmc/platform/darwin/osx/peripherals/PeripheralBusUSB.cpp
@@ -114,8 +114,8 @@ void CPeripheralBusUSB::DeviceDetachCallback(void *refCon, io_service_t service,
     }
     privateDataRef->refCon->ScanForDevices();
 
-    CLog::Log(LOGDEBUG, "USB Device Detach:%s, %s",
-      privateDataRef->deviceName.c_str(), privateDataRef->result.m_strLocation.c_str());
+    CLog::Log(LOGDEBUG, "USB Device Detach:%s, %s", privateDataRef->deviceName.c_str(),
+              privateDataRef->result.m_strLocation.c_str());
     IOObjectRelease(privateDataRef->notification);
     delete privateDataRef;
     //release the service
@@ -260,8 +260,8 @@ void CPeripheralBusUSB::DeviceAttachCallback(CPeripheralBusUSB* refCon, io_itera
           if (result == kIOReturnSuccess)
           {
             refCon->m_scan_results.m_results.push_back(privateDataRef->result);
-            CLog::Log(LOGDEBUG, "USB Device Attach:%s, %s",
-              deviceName, privateDataRef->result.m_strLocation.c_str());
+            CLog::Log(LOGDEBUG, "USB Device Attach:%s, %s", deviceName,
+                      privateDataRef->result.m_strLocation.c_str());
           }
           else
           {
diff --git a/xbmc/platform/darwin/tvos/TVOSTopShelf.mm b/xbmc/platform/darwin/tvos/TVOSTopShelf.mm
index 7a6cc8556606..8af537b2472d 100644
--- a/xbmc/platform/darwin/tvos/TVOSTopShelf.mm
+++ b/xbmc/platform/darwin/tvos/TVOSTopShelf.mm
@@ -56,8 +56,8 @@
 
     storeUrl = [storeUrl URLByAppendingPathComponent:@"RA" isDirectory:YES];
     const BOOL isJailbroken = [tvosShared isJailbroken];
-    CLog::Log(LOGDEBUG, "TopShelf: using shared path {} (jailbroken: {})",
-              storeUrl.path.UTF8String, isJailbroken ? "yes" : "no");
+    CLog::Log(LOGDEBUG, "TopShelf: using shared path {} (jailbroken: {})", storeUrl.path.UTF8String,
+              isJailbroken ? "yes" : "no");
 
     auto sharedDefaults = [[NSUserDefaults alloc] initWithSuiteName:[tvosShared getSharedID]];
     auto sharedDictJailbreak = isJailbroken ? [[NSMutableDictionary alloc] initWithCapacity:2 + 2]
diff --git a/xbmc/platform/linux/DBusMessage.cpp b/xbmc/platform/linux/DBusMessage.cpp
index 08e66e447cd0..b2ee49cce660 100644
--- a/xbmc/platform/linux/DBusMessage.cpp
+++ b/xbmc/platform/linux/DBusMessage.cpp
@@ -22,7 +22,8 @@ CDBusMessage::CDBusMessage(const char *destination, const char *object, const ch
   }
   m_haveArgs = false;
 
-  CLog::Log(LOGDEBUG, LOGDBUS, "DBus: Creating message to %s on %s with interface %s and method %s", destination, object, interface, method);
+  CLog::Log(LOGDEBUG, LOGDBUS, "DBus: Creating message to %s on %s with interface %s and method %s",
+            destination, object, interface, method);
 }
 
 CDBusMessage::CDBusMessage(const std::string& destination, const std::string& object, const std::string& interface, const std::string& method)
diff --git a/xbmc/platform/linux/OMXCore.cpp b/xbmc/platform/linux/OMXCore.cpp
index a32acf42a8bf..b2eb3acf4544 100644
--- a/xbmc/platform/linux/OMXCore.cpp
+++ b/xbmc/platform/linux/OMXCore.cpp
@@ -112,8 +112,10 @@ OMX_ERRORTYPE COMXCoreTunnel::Deestablish(bool noWait)
     omx_err = m_DllOMX->OMX_SetupTunnel(m_src_component->GetComponent(), m_src_port, NULL, 0);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "COMXCoreTunnel::Deestablish - could not unset tunnel on comp src %s port %d omx_err(0x%08x)",
-          m_src_component->GetName().c_str(), m_src_port, (int)omx_err);
+      CLog::Log(LOGERROR,
+                "COMXCoreTunnel::Deestablish - could not unset tunnel on comp src %s port %d "
+                "omx_err(0x%08x)",
+                m_src_component->GetName().c_str(), m_src_port, (int)omx_err);
     }
   }
 
@@ -122,8 +124,10 @@ OMX_ERRORTYPE COMXCoreTunnel::Deestablish(bool noWait)
     omx_err = m_DllOMX->OMX_SetupTunnel(m_dst_component->GetComponent(), m_dst_port, NULL, 0);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "COMXCoreTunnel::Deestablish - could not unset tunnel on comp dst %s port %d omx_err(0x%08x)",
-          m_dst_component->GetName().c_str(), m_dst_port, (int)omx_err);
+      CLog::Log(LOGERROR,
+                "COMXCoreTunnel::Deestablish - could not unset tunnel on comp dst %s port %d "
+                "omx_err(0x%08x)",
+                m_dst_component->GetName().c_str(), m_dst_port, (int)omx_err);
     }
   }
 
@@ -201,8 +205,11 @@ OMX_ERRORTYPE COMXCoreTunnel::Establish(bool enable_ports /* = true */, bool dis
     omx_err = m_DllOMX->OMX_SetupTunnel(m_src_component->GetComponent(), m_src_port, m_dst_component->GetComponent(), m_dst_port);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "COMXCoreTunnel::Establish - could not setup tunnel src %s port %d dst %s port %d omx_err(0x%08x)",
-          m_src_component->GetName().c_str(), m_src_port, m_dst_component->GetName().c_str(), m_dst_port, (int)omx_err);
+      CLog::Log(LOGERROR,
+                "COMXCoreTunnel::Establish - could not setup tunnel src %s port %d dst %s port %d "
+                "omx_err(0x%08x)",
+                m_src_component->GetName().c_str(), m_src_port, m_dst_component->GetName().c_str(),
+                m_dst_port, (int)omx_err);
       return omx_err;
     }
   }
@@ -335,16 +342,18 @@ OMX_ERRORTYPE COMXCoreComponent::EmptyThisBuffer(OMX_BUFFERHEADERTYPE *omx_buffe
   OMX_ERRORTYPE omx_err = OMX_ErrorNone;
 
   #if defined(OMX_DEBUG_EVENTHANDLER)
-  CLog::Log(LOGDEBUG, "COMXCoreComponent::EmptyThisBuffer component(%s) %p", m_componentName.c_str(), omx_buffer);
-  #endif
+  CLog::Log(LOGDEBUG, "COMXCoreComponent::EmptyThisBuffer component(%s) %p",
+            m_componentName.c_str(), omx_buffer);
+#endif
   if(!m_handle || !omx_buffer)
     return OMX_ErrorUndefined;
 
   omx_err = OMX_EmptyThisBuffer(m_handle, omx_buffer);
   if (omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "COMXCoreComponent::EmptyThisBuffer component(%s) - failed with result(0x%x)",
-        m_componentName.c_str(), omx_err);
+    CLog::Log(LOGERROR,
+              "COMXCoreComponent::EmptyThisBuffer component(%s) - failed with result(0x%x)",
+              m_componentName.c_str(), omx_err);
   }
 
   return omx_err;
@@ -355,16 +364,18 @@ OMX_ERRORTYPE COMXCoreComponent::FillThisBuffer(OMX_BUFFERHEADERTYPE *omx_buffer
   OMX_ERRORTYPE omx_err = OMX_ErrorNone;
 
   #if defined(OMX_DEBUG_EVENTHANDLER)
-  CLog::Log(LOGDEBUG, "COMXCoreComponent::FillThisBuffer component(%s) %p", m_componentName.c_str(), omx_buffer);
-  #endif
+  CLog::Log(LOGDEBUG, "COMXCoreComponent::FillThisBuffer component(%s) %p", m_componentName.c_str(),
+            omx_buffer);
+#endif
   if(!m_handle || !omx_buffer)
     return OMX_ErrorUndefined;
 
   omx_err = OMX_FillThisBuffer(m_handle, omx_buffer);
   if (omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "COMXCoreComponent::FillThisBuffer component(%s) - failed with result(0x%x)",
-        m_componentName.c_str(), omx_err);
+    CLog::Log(LOGERROR,
+              "COMXCoreComponent::FillThisBuffer component(%s) - failed with result(0x%x)",
+              m_componentName.c_str(), omx_err);
   }
 
   return omx_err;
@@ -380,8 +391,9 @@ OMX_ERRORTYPE COMXCoreComponent::FreeOutputBuffer(OMX_BUFFERHEADERTYPE *omx_buff
   omx_err = OMX_FreeBuffer(m_handle, m_output_port, omx_buffer);
   if (omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "COMXCoreComponent::FreeOutputBuffer component(%s) - failed with result(0x%x)",
-        m_componentName.c_str(), omx_err);
+    CLog::Log(LOGERROR,
+              "COMXCoreComponent::FreeOutputBuffer component(%s) - failed with result(0x%x)",
+              m_componentName.c_str(), omx_err);
   }
 
   return omx_err;
@@ -449,7 +461,8 @@ OMX_BUFFERHEADERTYPE *COMXCoreComponent::GetInputBuffer(long timeout /*=200*/)
     int retcode = pthread_cond_timedwait(&m_input_buffer_cond, &m_omx_input_mutex, &endtime);
     if (retcode != 0) {
       if (timeout != 0)
-        CLog::Log(LOGERROR, "COMXCoreComponent::GetInputBuffer %s wait event timeout", m_componentName.c_str());
+        CLog::Log(LOGERROR, "COMXCoreComponent::GetInputBuffer %s wait event timeout",
+                  m_componentName.c_str());
       break;
     }
   }
@@ -481,7 +494,8 @@ OMX_BUFFERHEADERTYPE *COMXCoreComponent::GetOutputBuffer(long timeout /*=200*/)
 
     int retcode = pthread_cond_timedwait(&m_output_buffer_cond, &m_omx_output_mutex, &endtime);
     if (retcode != 0) {
-      CLog::Log(LOGERROR, "COMXCoreComponent::GetOutputBuffer %s wait event timeout", m_componentName.c_str());
+      CLog::Log(LOGERROR, "COMXCoreComponent::GetOutputBuffer %s wait event timeout",
+                m_componentName.c_str());
       break;
     }
   }
@@ -506,7 +520,8 @@ OMX_ERRORTYPE COMXCoreComponent::WaitForInputDone(long timeout /*=200*/)
     int retcode = pthread_cond_timedwait(&m_input_buffer_cond, &m_omx_input_mutex, &endtime);
     if (retcode != 0) {
       if (timeout != 0)
-        CLog::Log(LOGERROR, "COMXCoreComponent::WaitForInputDone %s wait event timeout", m_componentName.c_str());
+        CLog::Log(LOGERROR, "COMXCoreComponent::WaitForInputDone %s wait event timeout",
+                  m_componentName.c_str());
       omx_err = OMX_ErrorTimeout;
       break;
     }
@@ -531,7 +546,8 @@ OMX_ERRORTYPE COMXCoreComponent::WaitForOutputDone(long timeout /*=200*/)
     int retcode = pthread_cond_timedwait(&m_output_buffer_cond, &m_omx_output_mutex, &endtime);
     if (retcode != 0) {
       if (timeout != 0)
-        CLog::Log(LOGERROR, "COMXCoreComponent::WaitForOutputDone %s wait event timeout", m_componentName.c_str());
+        CLog::Log(LOGERROR, "COMXCoreComponent::WaitForOutputDone %s wait event timeout",
+                  m_componentName.c_str());
       omx_err = OMX_ErrorTimeout;
       break;
     }
@@ -572,7 +588,9 @@ OMX_ERRORTYPE COMXCoreComponent::AllocInputBuffers()
   m_input_buffer_count  = portFormat.nBufferCountActual;
   m_input_buffer_size   = portFormat.nBufferSize;
 
-  CLog::Log(LOGDEBUG, "COMXCoreComponent::AllocInputBuffers component(%s) - port(%d), nBufferCountMin(%u), nBufferCountActual(%u), nBufferSize(%u), nBufferAlignment(%u)",
+  CLog::Log(LOGDEBUG,
+            "COMXCoreComponent::AllocInputBuffers component(%s) - port(%d), nBufferCountMin(%u), "
+            "nBufferCountActual(%u), nBufferSize(%u), nBufferAlignment(%u)",
             m_componentName.c_str(), GetInputPort(), portFormat.nBufferCountMin,
             portFormat.nBufferCountActual, portFormat.nBufferSize, portFormat.nBufferAlignment);
 
@@ -583,8 +601,10 @@ OMX_ERRORTYPE COMXCoreComponent::AllocInputBuffers()
     omx_err = OMX_AllocateBuffer(m_handle, &buffer, m_input_port, NULL, portFormat.nBufferSize);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "COMXCoreComponent::AllocInputBuffers component(%s) - OMX_UseBuffer failed with omx_err(0x%x)",
-        m_componentName.c_str(), omx_err);
+      CLog::Log(LOGERROR,
+                "COMXCoreComponent::AllocInputBuffers component(%s) - OMX_UseBuffer failed with "
+                "omx_err(0x%x)",
+                m_componentName.c_str(), omx_err);
       return omx_err;
     }
     buffer->nInputPortIndex = m_input_port;
@@ -598,7 +618,10 @@ OMX_ERRORTYPE COMXCoreComponent::AllocInputBuffers()
   omx_err = WaitForCommand(OMX_CommandPortEnable, m_input_port);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "COMXCoreComponent::AllocInputBuffers WaitForCommand:OMX_CommandPortEnable failed on %s omx_err(0x%08x)", m_componentName.c_str(), omx_err);
+    CLog::Log(LOGERROR,
+              "COMXCoreComponent::AllocInputBuffers WaitForCommand:OMX_CommandPortEnable failed on "
+              "%s omx_err(0x%08x)",
+              m_componentName.c_str(), omx_err);
     return omx_err;
   }
 
@@ -638,7 +661,9 @@ OMX_ERRORTYPE COMXCoreComponent::AllocOutputBuffers()
   m_output_buffer_count  = portFormat.nBufferCountActual;
   m_output_buffer_size   = portFormat.nBufferSize;
 
-  CLog::Log(LOGDEBUG, "COMXCoreComponent::AllocOutputBuffers component(%s) - port(%d), nBufferCountMin(%u), nBufferCountActual(%u), nBufferSize(%u) nBufferAlignment(%u)",
+  CLog::Log(LOGDEBUG,
+            "COMXCoreComponent::AllocOutputBuffers component(%s) - port(%d), nBufferCountMin(%u), "
+            "nBufferCountActual(%u), nBufferSize(%u) nBufferAlignment(%u)",
             m_componentName.c_str(), m_output_port, portFormat.nBufferCountMin,
             portFormat.nBufferCountActual, portFormat.nBufferSize, portFormat.nBufferAlignment);
 
@@ -649,8 +674,10 @@ OMX_ERRORTYPE COMXCoreComponent::AllocOutputBuffers()
     omx_err = OMX_AllocateBuffer(m_handle, &buffer, m_output_port, NULL, portFormat.nBufferSize);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "COMXCoreComponent::AllocOutputBuffers component(%s) - OMX_UseBuffer failed with omx_err(0x%x)",
-        m_componentName.c_str(), omx_err);
+      CLog::Log(LOGERROR,
+                "COMXCoreComponent::AllocOutputBuffers component(%s) - OMX_UseBuffer failed with "
+                "omx_err(0x%x)",
+                m_componentName.c_str(), omx_err);
       return omx_err;
     }
     buffer->nOutputPortIndex = m_output_port;
@@ -664,7 +691,10 @@ OMX_ERRORTYPE COMXCoreComponent::AllocOutputBuffers()
   omx_err = WaitForCommand(OMX_CommandPortEnable, m_output_port);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "COMXCoreComponent::AllocOutputBuffers WaitForCommand:OMX_CommandPortEnable failed on %s omx_err(0x%08x)", m_componentName.c_str(), omx_err);
+    CLog::Log(LOGERROR,
+              "COMXCoreComponent::AllocOutputBuffers WaitForCommand:OMX_CommandPortEnable failed "
+              "on %s omx_err(0x%08x)",
+              m_componentName.c_str(), omx_err);
     return omx_err;
   }
 
@@ -695,7 +725,10 @@ OMX_ERRORTYPE COMXCoreComponent::FreeInputBuffers()
     omx_err = OMX_FreeBuffer(m_handle, m_input_port, m_omx_input_buffers[i]);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "COMXCoreComponent::FreeInputBuffers error deallocate omx input buffer on component %s omx_err(0x%08x)", m_componentName.c_str(), omx_err);
+      CLog::Log(LOGERROR,
+                "COMXCoreComponent::FreeInputBuffers error deallocate omx input buffer on "
+                "component %s omx_err(0x%08x)",
+                m_componentName.c_str(), omx_err);
     }
   }
   pthread_mutex_unlock(&m_omx_input_mutex);
@@ -703,7 +736,10 @@ OMX_ERRORTYPE COMXCoreComponent::FreeInputBuffers()
   omx_err = WaitForCommand(OMX_CommandPortDisable, m_input_port);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "COMXCoreComponent::FreeInputBuffers WaitForCommand:OMX_CommandPortDisable failed on %s omx_err(0x%08x)", m_componentName.c_str(), omx_err);
+    CLog::Log(LOGERROR,
+              "COMXCoreComponent::FreeInputBuffers WaitForCommand:OMX_CommandPortDisable failed on "
+              "%s omx_err(0x%08x)",
+              m_componentName.c_str(), omx_err);
   }
 
   WaitForInputDone(1000);
@@ -747,7 +783,10 @@ OMX_ERRORTYPE COMXCoreComponent::FreeOutputBuffers()
     omx_err = OMX_FreeBuffer(m_handle, m_output_port, m_omx_output_buffers[i]);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "COMXCoreComponent::FreeOutputBuffers error deallocate omx output buffer on component %s omx_err(0x%08x)", m_componentName.c_str(), omx_err);
+      CLog::Log(LOGERROR,
+                "COMXCoreComponent::FreeOutputBuffers error deallocate omx output buffer on "
+                "component %s omx_err(0x%08x)",
+                m_componentName.c_str(), omx_err);
     }
   }
   pthread_mutex_unlock(&m_omx_output_mutex);
@@ -755,7 +794,10 @@ OMX_ERRORTYPE COMXCoreComponent::FreeOutputBuffers()
   omx_err = WaitForCommand(OMX_CommandPortDisable, m_output_port);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "COMXCoreComponent::FreeOutputBuffers WaitForCommand:OMX_CommandPortDisable failed on %s omx_err(0x%08x)", m_componentName.c_str(), omx_err);
+    CLog::Log(LOGERROR,
+              "COMXCoreComponent::FreeOutputBuffers WaitForCommand:OMX_CommandPortDisable failed "
+              "on %s omx_err(0x%08x)",
+              m_componentName.c_str(), omx_err);
   }
 
   WaitForOutputDone(1000);
@@ -861,8 +903,10 @@ OMX_ERRORTYPE COMXCoreComponent::AddEvent(OMX_EVENTTYPE eEvent, OMX_U32 nData1,
   pthread_mutex_unlock(&m_omx_event_mutex);
 
 #ifdef OMX_DEBUG_EVENTS
-  CLog::Log(LOGDEBUG, "COMXCoreComponent::AddEvent %s add event event.eEvent 0x%08x event.nData1 0x%08x event.nData2 %d",
-          m_componentName.c_str(), (int)event.eEvent, (int)event.nData1, (int)event.nData2);
+  CLog::Log(LOGDEBUG,
+            "COMXCoreComponent::AddEvent %s add event event.eEvent 0x%08x event.nData1 0x%08x "
+            "event.nData2 %d",
+            m_componentName.c_str(), (int)event.eEvent, (int)event.nData1, (int)event.nData2);
 #endif
 
   return OMX_ErrorNone;
@@ -873,7 +917,7 @@ OMX_ERRORTYPE COMXCoreComponent::WaitForEvent(OMX_EVENTTYPE eventType, long time
 {
 #ifdef OMX_DEBUG_EVENTS
   CLog::Log(LOGDEBUG, "COMXCoreComponent::WaitForEvent %s wait event 0x%08x",
-      m_componentName.c_str(), (int)eventType);
+            m_componentName.c_str(), (int)eventType);
 #endif
 
   pthread_mutex_lock(&m_omx_event_mutex);
@@ -887,16 +931,20 @@ OMX_ERRORTYPE COMXCoreComponent::WaitForEvent(OMX_EVENTTYPE eventType, long time
       omx_event event = *it;
 
 #ifdef OMX_DEBUG_EVENTS
-      CLog::Log(LOGDEBUG, "COMXCoreComponent::WaitForEvent %s inlist event event.eEvent 0x%08x event.nData1 0x%08x event.nData2 %d",
-          m_componentName.c_str(), (int)event.eEvent, (int)event.nData1, (int)event.nData2);
+      CLog::Log(LOGDEBUG,
+                "COMXCoreComponent::WaitForEvent %s inlist event event.eEvent 0x%08x event.nData1 "
+                "0x%08x event.nData2 %d",
+                m_componentName.c_str(), (int)event.eEvent, (int)event.nData1, (int)event.nData2);
 #endif
 
 
       if(event.eEvent == OMX_EventError && event.nData1 == (OMX_U32)OMX_ErrorSameState && event.nData2 == 1)
       {
 #ifdef OMX_DEBUG_EVENTS
-        CLog::Log(LOGDEBUG, "COMXCoreComponent::WaitForEvent %s remove event event.eEvent 0x%08x event.nData1 0x%08x event.nData2 %d",
-          m_componentName.c_str(), (int)event.eEvent, (int)event.nData1, (int)event.nData2);
+        CLog::Log(LOGDEBUG,
+                  "COMXCoreComponent::WaitForEvent %s remove event event.eEvent 0x%08x "
+                  "event.nData1 0x%08x event.nData2 %d",
+                  m_componentName.c_str(), (int)event.eEvent, (int)event.nData1, (int)event.nData2);
 #endif
         m_omx_events.erase(it);
         pthread_mutex_unlock(&m_omx_event_mutex);
@@ -911,8 +959,10 @@ OMX_ERRORTYPE COMXCoreComponent::WaitForEvent(OMX_EVENTTYPE eventType, long time
       else if(event.eEvent == eventType)
       {
 #ifdef OMX_DEBUG_EVENTS
-        CLog::Log(LOGDEBUG, "COMXCoreComponent::WaitForEvent %s remove event event.eEvent 0x%08x event.nData1 0x%08x event.nData2 %d",
-          m_componentName.c_str(), (int)event.eEvent, (int)event.nData1, (int)event.nData2);
+        CLog::Log(LOGDEBUG,
+                  "COMXCoreComponent::WaitForEvent %s remove event event.eEvent 0x%08x "
+                  "event.nData1 0x%08x event.nData2 %d",
+                  m_componentName.c_str(), (int)event.eEvent, (int)event.nData1, (int)event.nData2);
 #endif
 
         m_omx_events.erase(it);
@@ -928,7 +978,7 @@ OMX_ERRORTYPE COMXCoreComponent::WaitForEvent(OMX_EVENTTYPE eventType, long time
     {
       if (timeout > 0)
         CLog::Log(LOGERROR, "COMXCoreComponent::WaitForEvent %s wait event 0x%08x timeout %ld",
-                          m_componentName.c_str(), (int)eventType, timeout);
+                  m_componentName.c_str(), (int)eventType, timeout);
       pthread_mutex_unlock(&m_omx_event_mutex);
       return OMX_ErrorTimeout;
     }
@@ -941,8 +991,10 @@ OMX_ERRORTYPE COMXCoreComponent::WaitForEvent(OMX_EVENTTYPE eventType, long time
 OMX_ERRORTYPE COMXCoreComponent::WaitForCommand(OMX_U32 command, OMX_U32 nData2, long timeout)
 {
 #ifdef OMX_DEBUG_EVENTS
-  CLog::Log(LOGDEBUG, "COMXCoreComponent::WaitForCommand %s wait event.eEvent 0x%08x event.command 0x%08x event.nData2 %d",
-      m_componentName.c_str(), (int)OMX_EventCmdComplete, (int)command, (int)nData2);
+  CLog::Log(LOGDEBUG,
+            "COMXCoreComponent::WaitForCommand %s wait event.eEvent 0x%08x event.command 0x%08x "
+            "event.nData2 %d",
+            m_componentName.c_str(), (int)OMX_EventCmdComplete, (int)command, (int)nData2);
 #endif
 
   pthread_mutex_lock(&m_omx_event_mutex);
@@ -956,14 +1008,18 @@ OMX_ERRORTYPE COMXCoreComponent::WaitForCommand(OMX_U32 command, OMX_U32 nData2,
       omx_event event = *it;
 
 #ifdef OMX_DEBUG_EVENTS
-      CLog::Log(LOGDEBUG, "COMXCoreComponent::WaitForCommand %s inlist event event.eEvent 0x%08x event.nData1 0x%08x event.nData2 %d",
-          m_componentName.c_str(), (int)event.eEvent, (int)event.nData1, (int)event.nData2);
+      CLog::Log(LOGDEBUG,
+                "COMXCoreComponent::WaitForCommand %s inlist event event.eEvent 0x%08x "
+                "event.nData1 0x%08x event.nData2 %d",
+                m_componentName.c_str(), (int)event.eEvent, (int)event.nData1, (int)event.nData2);
 #endif
       if(event.eEvent == OMX_EventError && event.nData1 == (OMX_U32)OMX_ErrorSameState && event.nData2 == 1)
       {
 #ifdef OMX_DEBUG_EVENTS
-        CLog::Log(LOGDEBUG, "COMXCoreComponent::WaitForCommand %s remove event event.eEvent 0x%08x event.nData1 0x%08x event.nData2 %d",
-          m_componentName.c_str(), (int)event.eEvent, (int)event.nData1, (int)event.nData2);
+        CLog::Log(LOGDEBUG,
+                  "COMXCoreComponent::WaitForCommand %s remove event event.eEvent 0x%08x "
+                  "event.nData1 0x%08x event.nData2 %d",
+                  m_componentName.c_str(), (int)event.eEvent, (int)event.nData1, (int)event.nData2);
 #endif
 
         m_omx_events.erase(it);
@@ -980,8 +1036,10 @@ OMX_ERRORTYPE COMXCoreComponent::WaitForCommand(OMX_U32 command, OMX_U32 nData2,
       {
 
 #ifdef OMX_DEBUG_EVENTS
-        CLog::Log(LOGDEBUG, "COMXCoreComponent::WaitForCommand %s remove event event.eEvent 0x%08x event.nData1 0x%08x event.nData2 %d",
-          m_componentName.c_str(), (int)event.eEvent, (int)event.nData1, (int)event.nData2);
+        CLog::Log(LOGDEBUG,
+                  "COMXCoreComponent::WaitForCommand %s remove event event.eEvent 0x%08x "
+                  "event.nData1 0x%08x event.nData2 %d",
+                  m_componentName.c_str(), (int)event.eEvent, (int)event.nData1, (int)event.nData2);
 #endif
 
         m_omx_events.erase(it);
@@ -994,8 +1052,10 @@ OMX_ERRORTYPE COMXCoreComponent::WaitForCommand(OMX_U32 command, OMX_U32 nData2,
       break;
     int retcode = pthread_cond_timedwait(&m_omx_event_cond, &m_omx_event_mutex, &endtime);
     if (retcode != 0) {
-      CLog::Log(LOGERROR, "COMXCoreComponent::WaitForCommand %s wait timeout event.eEvent 0x%08x event.command 0x%08x event.nData2 %d",
-        m_componentName.c_str(), (int)OMX_EventCmdComplete, (int)command, (int)nData2);
+      CLog::Log(LOGERROR,
+                "COMXCoreComponent::WaitForCommand %s wait timeout event.eEvent 0x%08x "
+                "event.command 0x%08x event.nData2 %d",
+                m_componentName.c_str(), (int)OMX_EventCmdComplete, (int)command, (int)nData2);
 
       pthread_mutex_unlock(&m_omx_event_mutex);
       return OMX_ErrorTimeout;
@@ -1022,13 +1082,13 @@ OMX_ERRORTYPE COMXCoreComponent::SetStateForComponent(OMX_STATETYPE state)
     if(omx_err == OMX_ErrorSameState)
     {
       CLog::Log(LOGERROR, "COMXCoreComponent::SetStateForComponent - %s same state",
-        m_componentName.c_str());
+                m_componentName.c_str());
       omx_err = OMX_ErrorNone;
     }
     else
     {
       CLog::Log(LOGERROR, "COMXCoreComponent::SetStateForComponent - %s failed with omx_err(0x%x)",
-        m_componentName.c_str(), omx_err);
+                m_componentName.c_str(), omx_err);
     }
   }
   else
@@ -1037,7 +1097,7 @@ OMX_ERRORTYPE COMXCoreComponent::SetStateForComponent(OMX_STATETYPE state)
     if (omx_err != OMX_ErrorNone)
     {
       CLog::Log(LOGERROR, "COMXCoreComponent::WaitForCommand - %s failed with omx_err(0x%x)",
-        m_componentName.c_str(), omx_err);
+                m_componentName.c_str(), omx_err);
     }
   }
   return omx_err;
@@ -1244,7 +1304,9 @@ OMX_ERRORTYPE COMXCoreComponent::UseEGLImage(OMX_BUFFERHEADERTYPE** ppBufferHdr,
     return omx_err;
   }
 
-  CLog::Log(LOGDEBUG, "%s::%s component(%s) - port(%d), nBufferCountMin(%u), nBufferCountActual(%u), nBufferSize(%u) nBufferAlignment(%u)",
+  CLog::Log(LOGDEBUG,
+            "%s::%s component(%s) - port(%d), nBufferCountMin(%u), nBufferCountActual(%u), "
+            "nBufferSize(%u) nBufferAlignment(%u)",
             CLASSNAME, __func__, m_componentName.c_str(), m_output_port, portFormat.nBufferCountMin,
             portFormat.nBufferCountActual, portFormat.nBufferSize, portFormat.nBufferAlignment);
 
@@ -1253,8 +1315,8 @@ OMX_ERRORTYPE COMXCoreComponent::UseEGLImage(OMX_BUFFERHEADERTYPE** ppBufferHdr,
     omx_err = OMX_UseEGLImage(m_handle, ppBufferHdr, nPortIndex, pAppPrivate, eglImage);
     if(omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "%s::%s - %s failed with omx_err(0x%x)",
-                CLASSNAME, __func__, m_componentName.c_str(), omx_err);
+      CLog::Log(LOGERROR, "%s::%s - %s failed with omx_err(0x%x)", CLASSNAME, __func__,
+                m_componentName.c_str(), omx_err);
       return omx_err;
     }
 
@@ -1270,9 +1332,9 @@ OMX_ERRORTYPE COMXCoreComponent::UseEGLImage(OMX_BUFFERHEADERTYPE** ppBufferHdr,
   omx_err = WaitForCommand(OMX_CommandPortEnable, m_output_port);
   if(omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, " %s::%s - %s EnablePort failed with omx_err(0x%x)",
-              CLASSNAME, __func__, m_componentName.c_str(), omx_err);
-      return omx_err;
+    CLog::Log(LOGERROR, " %s::%s - %s EnablePort failed with omx_err(0x%x)", CLASSNAME, __func__,
+              m_componentName.c_str(), omx_err);
+    return omx_err;
   }
   m_flush_output = false;
 
@@ -1317,7 +1379,9 @@ bool COMXCoreComponent::Initialize( const std::string &component_name, OMX_INDEX
     omx_err = m_DllOMX->OMX_GetHandle(&m_handle, (char*)component_name.c_str(), this, &m_callbacks);
     if (!m_handle || omx_err != OMX_ErrorNone)
     {
-      CLog::Log(LOGERROR, "COMXCoreComponent::Initialize - could not get component handle for %s omx_err(0x%08x)",
+      CLog::Log(
+          LOGERROR,
+          "COMXCoreComponent::Initialize - could not get component handle for %s omx_err(0x%08x)",
           component_name.c_str(), (int)omx_err);
       Deinitialize();
       return false;
@@ -1330,15 +1394,18 @@ bool COMXCoreComponent::Initialize( const std::string &component_name, OMX_INDEX
   omx_err = OMX_GetParameter(m_handle, index, &port_param);
   if (omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "COMXCoreComponent::Initialize - could not get port_param for component %s omx_err(0x%08x)",
+    CLog::Log(
+        LOGERROR,
+        "COMXCoreComponent::Initialize - could not get port_param for component %s omx_err(0x%08x)",
         component_name.c_str(), (int)omx_err);
   }
 
   omx_err = DisableAllPorts();
   if (omx_err != OMX_ErrorNone)
   {
-    CLog::Log(LOGERROR, "COMXCoreComponent::Initialize - error disable ports on component %s omx_err(0x%08x)",
-        component_name.c_str(), (int)omx_err);
+    CLog::Log(LOGERROR,
+              "COMXCoreComponent::Initialize - error disable ports on component %s omx_err(0x%08x)",
+              component_name.c_str(), (int)omx_err);
   }
 
   m_input_port  = port_param.nStartPortNumber;
@@ -1354,7 +1421,7 @@ bool COMXCoreComponent::Initialize( const std::string &component_name, OMX_INDEX
     m_output_port = port_param.nStartPortNumber+port_param.nPorts-1;
 
   CLog::Log(LOGDEBUG, "COMXCoreComponent::Initialize %s input port %d output port %d m_handle %p",
-      m_componentName.c_str(), m_input_port, m_output_port, m_handle);
+            m_componentName.c_str(), m_input_port, m_output_port, m_handle);
 
   m_exit = false;
   m_flush_input   = false;
@@ -1388,8 +1455,8 @@ bool COMXCoreComponent::Deinitialize()
 
     TransitionToStateLoaded();
 
-    CLog::Log(LOGDEBUG, "COMXCoreComponent::Deinitialize : %s handle %p",
-        m_componentName.c_str(), m_handle);
+    CLog::Log(LOGDEBUG, "COMXCoreComponent::Deinitialize : %s handle %p", m_componentName.c_str(),
+              m_handle);
     omx_err = m_DllOMX->OMX_FreeHandle(m_handle);
     if (omx_err != OMX_ErrorNone)
     {
@@ -1456,8 +1523,9 @@ OMX_ERRORTYPE COMXCoreComponent::DecoderEmptyBufferDone(OMX_HANDLETYPE hComponen
     return OMX_ErrorNone;
 
   #if defined(OMX_DEBUG_EVENTHANDLER)
-  CLog::Log(LOGDEBUG, "COMXCoreComponent::DecoderEmptyBufferDone component(%s) %p %d/%d", m_componentName.c_str(), pBuffer, m_omx_input_available.size(), m_input_buffer_count);
-  #endif
+  CLog::Log(LOGDEBUG, "COMXCoreComponent::DecoderEmptyBufferDone component(%s) %p %d/%d",
+            m_componentName.c_str(), pBuffer, m_omx_input_available.size(), m_input_buffer_count);
+#endif
   pthread_mutex_lock(&m_omx_input_mutex);
   m_omx_input_available.push(pBuffer);
 
@@ -1475,8 +1543,9 @@ OMX_ERRORTYPE COMXCoreComponent::DecoderFillBufferDone(OMX_HANDLETYPE hComponent
     return OMX_ErrorNone;
 
   #if defined(OMX_DEBUG_EVENTHANDLER)
-  CLog::Log(LOGDEBUG, "COMXCoreComponent::DecoderFillBufferDone component(%s) %p %d/%d", m_componentName.c_str(), pBuffer, m_omx_output_available.size(), m_output_buffer_count);
-  #endif
+  CLog::Log(LOGDEBUG, "COMXCoreComponent::DecoderFillBufferDone component(%s) %p %d/%d",
+            m_componentName.c_str(), pBuffer, m_omx_output_available.size(), m_output_buffer_count);
+#endif
   pthread_mutex_lock(&m_omx_output_mutex);
   m_omx_output_available.push(pBuffer);
 
@@ -1526,33 +1595,39 @@ OMX_ERRORTYPE COMXCoreComponent::DecoderEventHandler(
           {
             case OMX_StateInvalid:
             #if defined(OMX_DEBUG_EVENTHANDLER)
-              CLog::Log(LOGDEBUG, "%s::%s %s - OMX_StateInvalid", CLASSNAME, __func__, GetName().c_str());
-            #endif
+              CLog::Log(LOGDEBUG, "%s::%s %s - OMX_StateInvalid", CLASSNAME, __func__,
+                        GetName().c_str());
+#endif
             break;
             case OMX_StateLoaded:
             #if defined(OMX_DEBUG_EVENTHANDLER)
-              CLog::Log(LOGDEBUG, "%s::%s %s - OMX_StateLoaded", CLASSNAME, __func__, GetName().c_str());
-            #endif
+              CLog::Log(LOGDEBUG, "%s::%s %s - OMX_StateLoaded", CLASSNAME, __func__,
+                        GetName().c_str());
+#endif
             break;
             case OMX_StateIdle:
             #if defined(OMX_DEBUG_EVENTHANDLER)
-              CLog::Log(LOGDEBUG, "%s::%s %s - OMX_StateIdle", CLASSNAME, __func__, GetName().c_str());
-            #endif
+              CLog::Log(LOGDEBUG, "%s::%s %s - OMX_StateIdle", CLASSNAME, __func__,
+                        GetName().c_str());
+#endif
             break;
             case OMX_StateExecuting:
             #if defined(OMX_DEBUG_EVENTHANDLER)
-              CLog::Log(LOGDEBUG, "%s::%s %s - OMX_StateExecuting", CLASSNAME, __func__, GetName().c_str());
-            #endif
+              CLog::Log(LOGDEBUG, "%s::%s %s - OMX_StateExecuting", CLASSNAME, __func__,
+                        GetName().c_str());
+#endif
             break;
             case OMX_StatePause:
             #if defined(OMX_DEBUG_EVENTHANDLER)
-              CLog::Log(LOGDEBUG, "%s::%s %s - OMX_StatePause", CLASSNAME, __func__, GetName().c_str());
-            #endif
+              CLog::Log(LOGDEBUG, "%s::%s %s - OMX_StatePause", CLASSNAME, __func__,
+                        GetName().c_str());
+#endif
             break;
             case OMX_StateWaitForResources:
             #if defined(OMX_DEBUG_EVENTHANDLER)
-              CLog::Log(LOGDEBUG, "%s::%s %s - OMX_StateWaitForResources", CLASSNAME, __func__, GetName().c_str());
-            #endif
+              CLog::Log(LOGDEBUG, "%s::%s %s - OMX_StateWaitForResources", CLASSNAME, __func__,
+                        GetName().c_str());
+#endif
             break;
             default:
             #if defined(OMX_DEBUG_EVENTHANDLER)
@@ -1564,30 +1639,35 @@ OMX_ERRORTYPE COMXCoreComponent::DecoderEventHandler(
         break;
         case OMX_CommandFlush:
           #if defined(OMX_DEBUG_EVENTHANDLER)
-          CLog::Log(LOGDEBUG, "%s::%s %s - OMX_CommandFlush, port %d", CLASSNAME, __func__, GetName().c_str(), (int)nData2);
-          #endif
+          CLog::Log(LOGDEBUG, "%s::%s %s - OMX_CommandFlush, port %d", CLASSNAME, __func__,
+                    GetName().c_str(), (int)nData2);
+#endif
         break;
         case OMX_CommandPortDisable:
           #if defined(OMX_DEBUG_EVENTHANDLER)
-          CLog::Log(LOGDEBUG, "%s::%s %s - OMX_CommandPortDisable, nData1(0x%x), port %d", CLASSNAME, __func__, GetName().c_str(), nData1, (int)nData2);
-          #endif
+          CLog::Log(LOGDEBUG, "%s::%s %s - OMX_CommandPortDisable, nData1(0x%x), port %d",
+                    CLASSNAME, __func__, GetName().c_str(), nData1, (int)nData2);
+#endif
         break;
         case OMX_CommandPortEnable:
           #if defined(OMX_DEBUG_EVENTHANDLER)
-          CLog::Log(LOGDEBUG, "%s::%s %s - OMX_CommandPortEnable, nData1(0x%x), port %d", CLASSNAME, __func__, GetName().c_str(), nData1, (int)nData2);
-          #endif
+          CLog::Log(LOGDEBUG, "%s::%s %s - OMX_CommandPortEnable, nData1(0x%x), port %d", CLASSNAME,
+                    __func__, GetName().c_str(), nData1, (int)nData2);
+#endif
         break;
         #if defined(OMX_DEBUG_EVENTHANDLER)
         case OMX_CommandMarkBuffer:
-          CLog::Log(LOGDEBUG, "%s::%s %s - OMX_CommandMarkBuffer, nData1(0x%x), port %d", CLASSNAME, __func__, GetName().c_str(), nData1, (int)nData2);
-        break;
+          CLog::Log(LOGDEBUG, "%s::%s %s - OMX_CommandMarkBuffer, nData1(0x%x), port %d", CLASSNAME,
+                    __func__, GetName().c_str(), nData1, (int)nData2);
+          break;
         #endif
       }
     break;
     case OMX_EventBufferFlag:
       #if defined(OMX_DEBUG_EVENTHANDLER)
-      CLog::Log(LOGDEBUG, "%s::%s %s - OMX_EventBufferFlag(input)", CLASSNAME, __func__, GetName().c_str());
-      #endif
+      CLog::Log(LOGDEBUG, "%s::%s %s - OMX_EventBufferFlag(input)", CLASSNAME, __func__,
+                GetName().c_str());
+#endif
       if(nData2 & OMX_BUFFERFLAG_EOS)
       {
         pthread_mutex_lock(&m_omx_eos_mutex);
@@ -1597,21 +1677,24 @@ OMX_ERRORTYPE COMXCoreComponent::DecoderEventHandler(
     break;
     case OMX_EventPortSettingsChanged:
       #if defined(OMX_DEBUG_EVENTHANDLER)
-      CLog::Log(LOGDEBUG, "%s::%s %s - OMX_EventPortSettingsChanged(output)", CLASSNAME, __func__, GetName().c_str());
-      #endif
+      CLog::Log(LOGDEBUG, "%s::%s %s - OMX_EventPortSettingsChanged(output)", CLASSNAME, __func__,
+                GetName().c_str());
+#endif
     break;
     case OMX_EventParamOrConfigChanged:
       #if defined(OMX_DEBUG_EVENTHANDLER)
-      CLog::Log(LOGDEBUG, "%s::%s %s - OMX_EventParamOrConfigChanged(output)", CLASSNAME, __func__, GetName().c_str());
-      #endif
+      CLog::Log(LOGDEBUG, "%s::%s %s - OMX_EventParamOrConfigChanged(output)", CLASSNAME, __func__,
+                GetName().c_str());
+#endif
     break;
     #if defined(OMX_DEBUG_EVENTHANDLER)
     case OMX_EventMark:
       CLog::Log(LOGDEBUG, "%s::%s %s - OMX_EventMark", CLASSNAME, __func__, GetName().c_str());
-    break;
+      break;
     case OMX_EventResourcesAcquired:
-      CLog::Log(LOGDEBUG, "%s::%s %s- OMX_EventResourcesAcquired", CLASSNAME, __func__, GetName().c_str());
-    break;
+      CLog::Log(LOGDEBUG, "%s::%s %s- OMX_EventResourcesAcquired", CLASSNAME, __func__,
+                GetName().c_str());
+      break;
     #endif
     case OMX_EventError:
       switch((OMX_S32)nData1)
@@ -1620,27 +1703,33 @@ OMX_ERRORTYPE COMXCoreComponent::DecoderEventHandler(
           //#if defined(OMX_DEBUG_EVENTHANDLER)
           //CLog::Log(LOGERROR, "%s::%s %s - OMX_ErrorSameState, same state", CLASSNAME, __func__, GetName().c_str());
           //#endif
-        break;
+          break;
         case OMX_ErrorInsufficientResources:
-          CLog::Log(LOGERROR, "%s::%s %s - OMX_ErrorInsufficientResources, insufficient resources", CLASSNAME, __func__, GetName().c_str());
+          CLog::Log(LOGERROR, "%s::%s %s - OMX_ErrorInsufficientResources, insufficient resources",
+                    CLASSNAME, __func__, GetName().c_str());
           m_resource_error = true;
         break;
         case OMX_ErrorFormatNotDetected:
-          CLog::Log(LOGERROR, "%s::%s %s - OMX_ErrorFormatNotDetected, cannot parse input stream", CLASSNAME, __func__, GetName().c_str());
-        break;
+          CLog::Log(LOGERROR, "%s::%s %s - OMX_ErrorFormatNotDetected, cannot parse input stream",
+                    CLASSNAME, __func__, GetName().c_str());
+          break;
         case OMX_ErrorPortUnpopulated:
-        CLog::Log(LOGWARNING, "%s::%s %s - OMX_ErrorPortUnpopulated port %d", CLASSNAME, __func__, GetName().c_str(), (int)nData2);
-        break;
+          CLog::Log(LOGWARNING, "%s::%s %s - OMX_ErrorPortUnpopulated port %d", CLASSNAME, __func__,
+                    GetName().c_str(), (int)nData2);
+          break;
         case OMX_ErrorStreamCorrupt:
-          CLog::Log(LOGERROR, "%s::%s %s - OMX_ErrorStreamCorrupt, Bitstream corrupt", CLASSNAME, __func__, GetName().c_str());
+          CLog::Log(LOGERROR, "%s::%s %s - OMX_ErrorStreamCorrupt, Bitstream corrupt", CLASSNAME,
+                    __func__, GetName().c_str());
           m_resource_error = true;
         break;
         case OMX_ErrorUnsupportedSetting:
-          CLog::Log(LOGERROR, "%s::%s %s - OMX_ErrorUnsupportedSetting, unsupported setting", CLASSNAME, __func__, GetName().c_str());
-        break;
+          CLog::Log(LOGERROR, "%s::%s %s - OMX_ErrorUnsupportedSetting, unsupported setting",
+                    CLASSNAME, __func__, GetName().c_str());
+          break;
         default:
-          CLog::Log(LOGERROR, "%s::%s %s - OMX_EventError detected, nData1(0x%x), port %d",  CLASSNAME, __func__, GetName().c_str(), nData1, (int)nData2);
-        break;
+          CLog::Log(LOGERROR, "%s::%s %s - OMX_EventError detected, nData1(0x%x), port %d",
+                    CLASSNAME, __func__, GetName().c_str(), nData1, (int)nData2);
+          break;
       }
       // wake things up
       if (m_resource_error)
@@ -1651,8 +1740,9 @@ OMX_ERRORTYPE COMXCoreComponent::DecoderEventHandler(
       }
     break;
     default:
-      CLog::Log(LOGWARNING, "%s::%s %s - Unknown eEvent(0x%x), nData1(0x%x), port %d", CLASSNAME, __func__, GetName().c_str(), eEvent, nData1, (int)nData2);
-    break;
+      CLog::Log(LOGWARNING, "%s::%s %s - Unknown eEvent(0x%x), nData1(0x%x), port %d", CLASSNAME,
+                __func__, GetName().c_str(), eEvent, nData1, (int)nData2);
+      break;
   }
 
   return OMX_ErrorNone;
diff --git a/xbmc/platform/posix/XHandle.cpp b/xbmc/platform/posix/XHandle.cpp
index 1b7792993d0a..c67df2a33fed 100644
--- a/xbmc/platform/posix/XHandle.cpp
+++ b/xbmc/platform/posix/XHandle.cpp
@@ -110,7 +110,7 @@ void CXHandle::ChangeType(HandleType newType) {
 
 void CXHandle::DumpObjectTracker() {
   for (int i=0; i< 10; i++) {
-    CLog::Log(LOGDEBUG,"object %d --> %d instances", i, m_objectTracker[i]);
+    CLog::Log(LOGDEBUG, "object %d --> %d instances", i, m_objectTracker[i]);
   }
 }
 
diff --git a/xbmc/storage/cdioSupport.cpp b/xbmc/storage/cdioSupport.cpp
index ebca09bc56bb..9a3fc994370f 100644
--- a/xbmc/storage/cdioSupport.cpp
+++ b/xbmc/storage/cdioSupport.cpp
@@ -386,8 +386,7 @@ void CCdIoSupport::PrintAnalysis(int fs, int num_audio)
   {
   case FS_UDF:
   case FS_ISO_UDF:
-    CLog::Log(LOGINFO, "UDF: version %x.%2.2x",
-              m_nUDFVerMajor, m_nUDFVerMinor);
+    CLog::Log(LOGINFO, "UDF: version %x.%2.2x", m_nUDFVerMajor, m_nUDFVerMinor);
     break;
   }
 
diff --git a/xbmc/utils/FileUtils.cpp b/xbmc/utils/FileUtils.cpp
index 0b4a7324fa03..81d85b56de64 100644
--- a/xbmc/utils/FileUtils.cpp
+++ b/xbmc/utils/FileUtils.cpp
@@ -71,7 +71,7 @@ bool CFileUtils::RenameFile(const std::string &strFile)
   if (CGUIKeyboardFactory::ShowAndGetInput(strFileName, CVariant{g_localizeStrings.Get(16013)}, false))
   {
     strPath = URIUtils::AddFileToFolder(strPath, strFileName);
-    CLog::Log(LOGINFO,"FileUtils: rename %s->%s", strFileAndPath.c_str(), strPath.c_str());
+    CLog::Log(LOGINFO, "FileUtils: rename %s->%s", strFileAndPath.c_str(), strPath.c_str());
     if (URIUtils::IsMultiPath(strFileAndPath))
     { // special case for multipath renames - rename all the paths.
       std::vector<std::string> paths;
diff --git a/xbmc/video/Teletext.cpp b/xbmc/video/Teletext.cpp
index fad2fc5e43db..c5087f297a83 100644
--- a/xbmc/video/Teletext.cpp
+++ b/xbmc/video/Teletext.cpp
@@ -643,7 +643,8 @@ bool CTeletextDecoder::InitDecoder()
     m_TypeTTF.face_id = (FTC_FaceID) const_cast<char*>(m_teletextFont.c_str());
     if ((error = FTC_Manager_LookupFace(m_Manager, m_TypeTTF.face_id, &m_Face)))
     {
-      CLog::Log(LOGERROR, "%s: <FTC_Manager_Lookup_Face failed with Errorcode 0x%.2X>", __FUNCTION__, error);
+      CLog::Log(LOGERROR, "%s: <FTC_Manager_Lookup_Face failed with Errorcode 0x%.2X>",
+                __FUNCTION__, error);
       FTC_Manager_Done(m_Manager);
       FT_Done_FreeType(m_Library);
       m_Manager = NULL;
diff --git a/xbmc/windowing/X11/GLContextEGL.cpp b/xbmc/windowing/X11/GLContextEGL.cpp
index ec1a21bc2a9d..6b2d66aaa35f 100644
--- a/xbmc/windowing/X11/GLContextEGL.cpp
+++ b/xbmc/windowing/X11/GLContextEGL.cpp
@@ -181,7 +181,8 @@ bool CGLContextEGL::Refresh(bool force, int screen, Window glWindow, bool &newCo
 
   if (!eglMakeCurrent(m_eglDisplay, m_eglSurface, m_eglSurface, m_eglContext))
   {
-    CLog::Log(LOGERROR, "Failed to make context current %p %p %p", m_eglDisplay, m_eglSurface, m_eglContext);
+    CLog::Log(LOGERROR, "Failed to make context current %p %p %p", m_eglDisplay, m_eglSurface,
+              m_eglContext);
     Destroy();
     return false;
   }
@@ -278,7 +279,8 @@ bool CGLContextEGL::CreatePB()
 
   if (!eglMakeCurrent(m_eglDisplay, m_eglSurface, m_eglSurface, m_eglContext))
   {
-    CLog::Log(LOGERROR, "Failed to make context current %p %p %p", m_eglDisplay, m_eglSurface, m_eglContext);
+    CLog::Log(LOGERROR, "Failed to make context current %p %p %p", m_eglDisplay, m_eglSurface,
+              m_eglContext);
     Destroy();
     return false;
   }
diff --git a/xbmc/windowing/android/AndroidUtils.cpp b/xbmc/windowing/android/AndroidUtils.cpp
index 6dcf22527eb4..7bb6c7557c55 100644
--- a/xbmc/windowing/android/AndroidUtils.cpp
+++ b/xbmc/windowing/android/AndroidUtils.cpp
@@ -225,7 +225,8 @@ bool CAndroidUtils::GetNativeResolution(RESOLUTION_INFO* res) const
   res->iSubtitles    = (int)(0.965 * res->iHeight);
   res->strMode       = StringUtils::Format("%dx%d @ %.6f%s - Full Screen", res->iScreenWidth, res->iScreenHeight, res->fRefreshRate,
                                            res->dwFlags & D3DPRESENTFLAG_INTERLACED ? "i" : "");
-  CLog::Log(LOGNOTICE,"CAndroidUtils: Current resolution: %dx%d %s", res->iWidth, res->iHeight, res->strMode.c_str());
+  CLog::Log(LOGNOTICE, "CAndroidUtils: Current resolution: %dx%d %s", res->iWidth, res->iHeight,
+            res->strMode.c_str());
   return true;
 }
 
diff --git a/xbmc/windowing/osx/WinSystemOSX.mm b/xbmc/windowing/osx/WinSystemOSX.mm
index 1b60560422a1..f141f8d77323 100644
--- a/xbmc/windowing/osx/WinSystemOSX.mm
+++ b/xbmc/windowing/osx/WinSystemOSX.mm
@@ -545,7 +545,8 @@ CGDisplayModeRef GetMode(int width, int height, double refreshrate, int screenId
   double rate;
   RESOLUTION_INFO res;
 
-  CLog::Log(LOGDEBUG, "GetMode looking for suitable mode with %d x %d @ %f Hz on display %d", width, height, refreshrate, screenIdx);
+  CLog::Log(LOGDEBUG, "GetMode looking for suitable mode with %d x %d @ %f Hz on display %d", width,
+            height, refreshrate, screenIdx);
 
   CFArrayRef displayModes = GetAllDisplayModes(GetDisplayID(screenIdx));
 
@@ -1396,7 +1397,8 @@ void ResizeWindowInternal(int newWidth, int newHeight, int newLeft, int newTop,
           // NOTE: The refresh rate will be REPORTED AS 0 for many DVI and notebook displays.
           refreshrate = 60.0;
         }
-        CLog::Log(LOGNOTICE, "Found possible resolution for display %d with %d x %d @ %f Hz", disp, w, h, refreshrate);
+        CLog::Log(LOGNOTICE, "Found possible resolution for display %d with %d x %d @ %f Hz", disp,
+                  w, h, refreshrate);
 
         // only add the resolution if it belongs to "our" screen
         // all others are only logged above...
diff --git a/xbmc/windowing/rpi/RPIUtils.cpp b/xbmc/windowing/rpi/RPIUtils.cpp
index 34adba0e71b9..c7a3a719f833 100644
--- a/xbmc/windowing/rpi/RPIUtils.cpp
+++ b/xbmc/windowing/rpi/RPIUtils.cpp
@@ -161,19 +161,27 @@ bool CRPIUtils::SetNativeResolution(const RESOLUTION_INFO res, EGLSurface m_nati
 
     if (success == 0)
     {
-      CLog::Log(LOGDEBUG, "EGL set HDMI mode (%d,%d)=%d %s%s",
-                          GETFLAGS_GROUP(res.dwFlags), GETFLAGS_MODE(res.dwFlags), success,
-                          CStereoscopicsManager::ConvertGuiStereoModeToString(stereo_mode),
-                          mode3d==HDMI_3D_FORMAT_FRAME_PACKING ? " FP" : mode3d==HDMI_3D_FORMAT_SBS_HALF ? " SBS" : mode3d==HDMI_3D_FORMAT_TB_HALF ? " TB" : "");
+      CLog::Log(LOGDEBUG, "EGL set HDMI mode (%d,%d)=%d %s%s", GETFLAGS_GROUP(res.dwFlags),
+                GETFLAGS_MODE(res.dwFlags), success,
+                CStereoscopicsManager::ConvertGuiStereoModeToString(stereo_mode),
+                mode3d == HDMI_3D_FORMAT_FRAME_PACKING
+                    ? " FP"
+                    : mode3d == HDMI_3D_FORMAT_SBS_HALF
+                          ? " SBS"
+                          : mode3d == HDMI_3D_FORMAT_TB_HALF ? " TB" : "");
 
       sem_wait(&m_tv_synced);
     }
     else
     {
       CLog::Log(LOGERROR, "EGL failed to set HDMI mode (%d,%d)=%d %s%s",
-                          GETFLAGS_GROUP(res.dwFlags), GETFLAGS_MODE(res.dwFlags), success,
-                          CStereoscopicsManager::ConvertGuiStereoModeToString(stereo_mode),
-                          mode3d==HDMI_3D_FORMAT_FRAME_PACKING ? " FP" : mode3d==HDMI_3D_FORMAT_SBS_HALF ? " SBS" : mode3d==HDMI_3D_FORMAT_TB_HALF ? " TB" : "");
+                GETFLAGS_GROUP(res.dwFlags), GETFLAGS_MODE(res.dwFlags), success,
+                CStereoscopicsManager::ConvertGuiStereoModeToString(stereo_mode),
+                mode3d == HDMI_3D_FORMAT_FRAME_PACKING
+                    ? " FP"
+                    : mode3d == HDMI_3D_FORMAT_SBS_HALF
+                          ? " SBS"
+                          : mode3d == HDMI_3D_FORMAT_TB_HALF ? " TB" : "");
     }
     m_DllBcmHost->vc_tv_unregister_callback(CallbackTvServiceCallback);
     sem_destroy(&m_tv_synced);
@@ -192,15 +200,15 @@ bool CRPIUtils::SetNativeResolution(const RESOLUTION_INFO res, EGLSurface m_nati
 
     if (success == 0)
     {
-      CLog::Log(LOGDEBUG, "EGL set SDTV mode (%d,%d)=%d",
-                          GETFLAGS_GROUP(res.dwFlags), GETFLAGS_MODE(res.dwFlags), success);
+      CLog::Log(LOGDEBUG, "EGL set SDTV mode (%d,%d)=%d", GETFLAGS_GROUP(res.dwFlags),
+                GETFLAGS_MODE(res.dwFlags), success);
 
       sem_wait(&m_tv_synced);
     }
     else
     {
-      CLog::Log(LOGERROR, "EGL failed to set SDTV mode (%d,%d)=%d",
-                          GETFLAGS_GROUP(res.dwFlags), GETFLAGS_MODE(res.dwFlags), success);
+      CLog::Log(LOGERROR, "EGL failed to set SDTV mode (%d,%d)=%d", GETFLAGS_GROUP(res.dwFlags),
+                GETFLAGS_MODE(res.dwFlags), success);
     }
     m_DllBcmHost->vc_tv_unregister_callback(CallbackTvServiceCallback);
     sem_destroy(&m_tv_synced);
@@ -247,7 +255,9 @@ bool CRPIUtils::SetNativeResolution(const RESOLUTION_INFO res, EGLSurface m_nati
     transform = DISPMANX_STEREOSCOPIC_MONO;
 
   CLog::Log(LOGDEBUG, "EGL set resolution %dx%d -> %dx%d @ %.2f fps (%d,%d) flags:%x aspect:%.2f",
-      m_width, m_height, dst_rect.width, dst_rect.height, res.fRefreshRate, GETFLAGS_GROUP(res.dwFlags), GETFLAGS_MODE(res.dwFlags), (int)res.dwFlags, res.fPixelRatio);
+            m_width, m_height, dst_rect.width, dst_rect.height, res.fRefreshRate,
+            GETFLAGS_GROUP(res.dwFlags), GETFLAGS_MODE(res.dwFlags), (int)res.dwFlags,
+            res.fPixelRatio);
 
   m_dispman_element = m_DllBcmHost->vc_dispmanx_element_add(dispman_update,
     m_dispman_display,
@@ -430,7 +440,8 @@ bool CRPIUtils::ProbeResolutions(std::vector<RESOLUTION_INFO> &resolutions)
 
     m_desktopRes.iSubtitles   = (int)(0.965 * m_desktopRes.iHeight);
 
-    CLog::Log(LOGDEBUG, "EGL initial desktop resolution %s (%.2f)", m_desktopRes.strMode.c_str(), m_desktopRes.fPixelRatio);
+    CLog::Log(LOGDEBUG, "EGL initial desktop resolution %s (%.2f)", m_desktopRes.strMode.c_str(),
+              m_desktopRes.fPixelRatio);
   }
 
   if(GETFLAGS_GROUP(m_desktopRes.dwFlags) && GETFLAGS_MODE(m_desktopRes.dwFlags))
@@ -440,7 +451,8 @@ bool CRPIUtils::ProbeResolutions(std::vector<RESOLUTION_INFO> &resolutions)
   }
   {
     AddUniqueResolution(m_desktopRes, resolutions, true);
-    CLog::Log(LOGDEBUG, "EGL probe resolution %s:%x", m_desktopRes.strMode.c_str(), m_desktopRes.dwFlags);
+    CLog::Log(LOGDEBUG, "EGL probe resolution %s:%x", m_desktopRes.strMode.c_str(),
+              m_desktopRes.dwFlags);
   }
 
   return true;
@@ -522,8 +534,8 @@ void CRPIUtils::GetSupportedModes(HDMI_RES_GROUP_T group, std::vector<RESOLUTION
     num_modes = m_DllBcmHost->vc_tv_hdmi_get_supported_modes_new(group,
         supported_modes, max_supported_modes, &prefer_group, &prefer_mode);
 
-    CLog::Log(LOGDEBUG, "EGL get supported modes (%d) = %d, prefer_group=%x, prefer_mode=%x",
-        group, num_modes, prefer_group, prefer_mode);
+    CLog::Log(LOGDEBUG, "EGL get supported modes (%d) = %d, prefer_group=%x, prefer_mode=%x", group,
+              num_modes, prefer_group, prefer_mode);
   }
 
   if (num_modes > 0 && prefer_group != HDMI_RES_GROUP_INVALID)
@@ -548,7 +560,7 @@ void CRPIUtils::GetSupportedModes(HDMI_RES_GROUP_T group, std::vector<RESOLUTION
 
       AddUniqueResolution(res, resolutions);
       CLog::Log(LOGDEBUG, "EGL mode %d: %s (%.2f) %s%s:%x", i, res.strMode, res.fPixelRatio,
-          tv->native ? "N" : "", tv->scan_mode ? "I" : "", int(tv->code));
+                tv->native ? "N" : "", tv->scan_mode ? "I" : "", int(tv->code));
 
       if (tv->frame_rate == 24 || tv->frame_rate == 30 || tv->frame_rate == 48 || tv->frame_rate == 60 || tv->frame_rate == 72)
       {
diff --git a/xbmc/windowing/rpi/WinSystemRpi.cpp b/xbmc/windowing/rpi/WinSystemRpi.cpp
index 48a6b9fe4abe..074a86e3c072 100644
--- a/xbmc/windowing/rpi/WinSystemRpi.cpp
+++ b/xbmc/windowing/rpi/WinSystemRpi.cpp
@@ -196,13 +196,10 @@ void CWinSystemRpi::UpdateResolutions()
     CServiceBroker::GetWinSystem()->GetGfxContext().ResetOverscan(resolutions[i]);
     CDisplaySettings::GetInstance().GetResolutionInfo(res_index) = resolutions[i];
 
-    CLog::Log(LOGNOTICE, "Found resolution %d x %d with %d x %d%s @ %f Hz",
-      resolutions[i].iWidth,
-      resolutions[i].iHeight,
-      resolutions[i].iScreenWidth,
-      resolutions[i].iScreenHeight,
-      resolutions[i].dwFlags & D3DPRESENTFLAG_INTERLACED ? "i" : "",
-      resolutions[i].fRefreshRate);
+    CLog::Log(LOGNOTICE, "Found resolution %d x %d with %d x %d%s @ %f Hz", resolutions[i].iWidth,
+              resolutions[i].iHeight, resolutions[i].iScreenWidth, resolutions[i].iScreenHeight,
+              resolutions[i].dwFlags & D3DPRESENTFLAG_INTERLACED ? "i" : "",
+              resolutions[i].fRefreshRate);
 
     if(resDesktop.iWidth == resolutions[i].iWidth &&
        resDesktop.iHeight == resolutions[i].iHeight &&

From e13f2104b1242a84c404088d4a965ec806cdb99e Mon Sep 17 00:00:00 2001
From: montellese <montellese@kodi.tv>
Date: Sun, 22 Mar 2020 10:23:03 +0100
Subject: [PATCH 10/21] [utils] add CStaticLoggerBase helper class for static
 loggers

---
 xbmc/utils/CMakeLists.txt       |  2 ++
 xbmc/utils/StaticLoggerBase.cpp | 20 ++++++++++++++++++++
 xbmc/utils/StaticLoggerBase.h   | 21 +++++++++++++++++++++
 3 files changed, 43 insertions(+)
 create mode 100644 xbmc/utils/StaticLoggerBase.cpp
 create mode 100644 xbmc/utils/StaticLoggerBase.h

diff --git a/xbmc/utils/CMakeLists.txt b/xbmc/utils/CMakeLists.txt
index 9705e31d0932..a04870e91c70 100644
--- a/xbmc/utils/CMakeLists.txt
+++ b/xbmc/utils/CMakeLists.txt
@@ -54,6 +54,7 @@ set(SOURCES ActorProtocol.cpp
             Screenshot.cpp
             SortUtils.cpp
             Speed.cpp
+            StaticLoggerBase.cpp
             Stopwatch.cpp
             StreamDetails.cpp
             StreamUtils.cpp
@@ -147,6 +148,7 @@ set(HEADERS ActorProtocol.h
             Screenshot.h
             SortUtils.h
             Speed.h
+            StaticLoggerBase.h
             Stopwatch.h
             StreamDetails.h
             StreamUtils.h
diff --git a/xbmc/utils/StaticLoggerBase.cpp b/xbmc/utils/StaticLoggerBase.cpp
new file mode 100644
index 000000000000..5bcc06a3c93f
--- /dev/null
+++ b/xbmc/utils/StaticLoggerBase.cpp
@@ -0,0 +1,20 @@
+/*
+ *  Copyright (C) 2020 Team Kodi
+ *  This file is part of Kodi - https://kodi.tv
+ *
+ *  SPDX-License-Identifier: GPL-2.0-or-later
+ *  See LICENSES/README.md for more information.
+ */
+
+#include "StaticLoggerBase.h"
+
+#include "ServiceBroker.h"
+#include "utils/log.h"
+
+Logger CStaticLoggerBase::s_logger;
+
+CStaticLoggerBase::CStaticLoggerBase(const std::string& loggerName)
+{
+  if (s_logger == nullptr)
+    s_logger = CServiceBroker::GetLogging().GetLogger(loggerName);
+}
diff --git a/xbmc/utils/StaticLoggerBase.h b/xbmc/utils/StaticLoggerBase.h
new file mode 100644
index 000000000000..a3da35f470f1
--- /dev/null
+++ b/xbmc/utils/StaticLoggerBase.h
@@ -0,0 +1,21 @@
+/*
+ *  Copyright (C) 2020 Team Kodi
+ *  This file is part of Kodi - https://kodi.tv
+ *
+ *  SPDX-License-Identifier: GPL-2.0-or-later
+ *  See LICENSES/README.md for more information.
+ */
+
+#pragma once
+
+#include "utils/logtypes.h"
+
+#include <string>
+
+class CStaticLoggerBase
+{
+protected:
+  explicit CStaticLoggerBase(const std::string& loggerName);
+
+  static Logger s_logger;
+};

From db562a71d82dcd4a677fdd073b5ebc33df578ab2 Mon Sep 17 00:00:00 2001
From: montellese <montellese@kodi.tv>
Date: Thu, 10 Nov 2016 20:34:23 +0100
Subject: [PATCH 11/21] [network] CWebServer: make use of new logging
 functionality

---
 xbmc/network/WebServer.cpp | 144 +++++++++++++++++++++----------------
 xbmc/network/WebServer.h   |   4 ++
 2 files changed, 86 insertions(+), 62 deletions(-)

diff --git a/xbmc/network/WebServer.cpp b/xbmc/network/WebServer.cpp
index 768e59426f5f..ebee861f01a6 100644
--- a/xbmc/network/WebServer.cpp
+++ b/xbmc/network/WebServer.cpp
@@ -8,22 +8,12 @@
 
 #include "WebServer.h"
 
-#include <algorithm>
-#include <memory>
-#include <stdexcept>
-#include <utility>
-
-#if defined(TARGET_POSIX)
-#include <pthread.h>
-#endif
-
 #include "ServiceBroker.h"
 #include "Util.h"
 #include "XBDateTime.h"
 #include "filesystem/File.h"
 #include "network/httprequesthandler/HTTPRequestHandlerUtils.h"
 #include "network/httprequesthandler/IHTTPRequestHandler.h"
-#include "settings/AdvancedSettings.h"
 #include "settings/Settings.h"
 #include "settings/SettingsComponent.h"
 #include "threads/SingleLock.h"
@@ -34,6 +24,15 @@
 #include "utils/Variant.h"
 #include "utils/log.h"
 
+#include <algorithm>
+#include <memory>
+#include <stdexcept>
+#include <utility>
+
+#if defined(TARGET_POSIX)
+#include <pthread.h>
+#endif
+
 #include <inttypes.h>
 
 #define MAX_POST_BUFFER_SIZE 2048
@@ -57,11 +56,14 @@ typedef struct {
   uint64_t writePosition;
 } HttpFileDownloadContext;
 
+Logger CWebServer::s_logger;
+
 CWebServer::CWebServer()
   : m_authenticationUsername("kodi"),
     m_authenticationPassword(""),
     m_key(),
-    m_cert()
+    m_cert(),
+    m_logger(CServiceBroker::GetLogging().GetLogger("CWebServer"))
 {
 #if defined(TARGET_DARWIN)
   void *stack_addr;
@@ -73,8 +75,11 @@ CWebServer::CWebServer()
   // but it stoped crashing using Kodi iOS remote -> play video.
   // non-darwin will pass a value of zero which means 'system default'
   m_thread_stacksize *= 2;
-  CLog::Log(LOGDEBUG, "CWebServer: increasing thread stack to %zu", m_thread_stacksize);
+  m_logger->debug("increasing thread stack to {}", m_thread_stacksize);
 #endif
+
+  if (s_logger == nullptr)
+    s_logger = CServiceBroker::GetLogging().GetLogger("CWebServer");
 }
 
 static MHD_Response* create_response(size_t size, const void* data, int free, int copy)
@@ -93,14 +98,14 @@ int CWebServer::AskForAuthentication(const HTTPRequest& request) const
   struct MHD_Response *response = create_response(0, nullptr, MHD_NO, MHD_NO);
   if (!response)
   {
-    CLog::Log(LOGERROR, "CWebServer[%hu]: unable to create HTTP Unauthorized response", m_port);
+    m_logger->error("unable to create HTTP Unauthorized response");
     return MHD_NO;
   }
 
   int ret = AddHeader(response, MHD_HTTP_HEADER_CONNECTION, "close");
   if (!ret)
   {
-    CLog::Log(LOGERROR, "CWebServer[%hu]: unable to prepare HTTP Unauthorized response", m_port);
+    m_logger->error("unable to prepare HTTP Unauthorized response");
     MHD_destroy_response(response);
     return MHD_NO;
   }
@@ -144,14 +149,14 @@ int CWebServer::AnswerToConnection(void *cls, struct MHD_Connection *connection,
 {
   if (cls == nullptr || con_cls == nullptr || *con_cls == nullptr)
   {
-    CLog::Log(LOGERROR, "CWebServer[unknown]: invalid request received");
+    s_logger->error("invalid request received");
     return MHD_NO;
   }
 
   CWebServer *webServer = reinterpret_cast<CWebServer*>(cls);
   if (webServer == nullptr)
   {
-    CLog::Log(LOGERROR, "CWebServer[unknown]: invalid request received");
+    s_logger->error("invalid request received");
     return MHD_NO;
   }
 
@@ -211,7 +216,7 @@ int CWebServer::HandlePartialRequest(struct MHD_Connection *connection, Connecti
               struct MHD_Response *response = create_response(0, nullptr, MHD_NO, MHD_NO);
               if (response == nullptr)
               {
-                CLog::Log(LOGERROR, "CWebServer[%hu]: failed to create a HTTP 304 response", m_port);
+                m_logger->error("failed to create a HTTP 304 response");
                 return MHD_NO;
               }
 
@@ -274,7 +279,7 @@ int CWebServer::HandlePartialRequest(struct MHD_Connection *connection, Connecti
       return HandleRequest(requestHandler);
   }
 
-  CLog::Log(LOGERROR, "CWebServer[%hu]: couldn't find any request handler for %s", m_port, request.pathUrl.c_str());
+  m_logger->error("couldn't find any request handler for {}", request.pathUrl);
   return SendErrorResponse(request, MHD_HTTP_NOT_FOUND, request.method);
 }
 
@@ -288,7 +293,7 @@ int CWebServer::HandlePostField(void *cls, enum MHD_ValueKind kind, const char *
   if (conHandler == nullptr || conHandler->requestHandler == nullptr ||
       key == nullptr || data == nullptr || size == 0)
   {
-    CLog::Log(LOGERROR, "CWebServer: unable to handle HTTP POST field");
+    s_logger->error("unable to handle HTTP POST field");
     return MHD_NO;
   }
 
@@ -305,7 +310,7 @@ int CWebServer::HandleRequest(const std::shared_ptr<IHTTPRequestHandler>& handle
   int ret = handler->HandleRequest();
   if (ret == MHD_NO)
   {
-    CLog::Log(LOGERROR, "CWebServer[%hu]: failed to handle HTTP request for %s", m_port, request.pathUrl.c_str());
+    m_logger->error("failed to handle HTTP request for {}", request.pathUrl);
     return SendErrorResponse(request, MHD_HTTP_INTERNAL_SERVER_ERROR, request.method);
   }
 
@@ -314,7 +319,7 @@ int CWebServer::HandleRequest(const std::shared_ptr<IHTTPRequestHandler>& handle
   switch (responseDetails.type)
   {
     case HTTPNone:
-      CLog::Log(LOGERROR, "CWebServer[%hu]: HTTP request handler didn't process %s", m_port, request.pathUrl.c_str());
+      m_logger->error("HTTP request handler didn't process {}", request.pathUrl);
       return MHD_NO;
 
     case HTTPRedirect:
@@ -337,13 +342,13 @@ int CWebServer::HandleRequest(const std::shared_ptr<IHTTPRequestHandler>& handle
       break;
 
     default:
-      CLog::Log(LOGERROR, "CWebServer[%hu]: internal error while HTTP request handler processed %s", m_port, request.pathUrl.c_str());
+      m_logger->error("internal error while HTTP request handler processed {}", request.pathUrl);
       return SendErrorResponse(request, MHD_HTTP_INTERNAL_SERVER_ERROR, request.method);
   }
 
   if (ret == MHD_NO)
   {
-    CLog::Log(LOGERROR, "CWebServer[%hu]: failed to create HTTP response for %s", m_port, request.pathUrl.c_str());
+    m_logger->error("failed to create HTTP response for {}", request.pathUrl);
     return SendErrorResponse(request, MHD_HTTP_INTERNAL_SERVER_ERROR, request.method);
   }
 
@@ -386,7 +391,7 @@ int CWebServer::FinalizeRequest(const std::shared_ptr<IHTTPRequestHandler>& hand
     else
     {
       // create the value of the Cache-Control header
-      std::string cacheControl = StringUtils::Format("public, max-age=%d", maxAge);
+      std::string cacheControl = StringUtils::Format("public, max-age={}", maxAge);
 
       // check if the response contains a Set-Cookie header because they must not be cached
       if (handler->HasResponseHeader(MHD_HTTP_HEADER_SET_COOKIE))
@@ -409,7 +414,7 @@ int CWebServer::FinalizeRequest(const std::shared_ptr<IHTTPRequestHandler>& hand
 
   // add MHD_HTTP_HEADER_CONTENT_LENGTH
   if (responseDetails.totalLength > 0)
-    handler->AddResponseHeader(MHD_HTTP_HEADER_CONTENT_LENGTH, StringUtils::Format("%" PRIu64, responseDetails.totalLength));
+    handler->AddResponseHeader(MHD_HTTP_HEADER_CONTENT_LENGTH, StringUtils::Format("{}", responseDetails.totalLength));
 
   // add all headers set by the request handler
   for (const auto& it : responseDetails.headers)
@@ -507,7 +512,7 @@ void CWebServer::SetupPostDataProcessing(const HTTPRequest& request, ConnectionH
   // MHD doesn't seem to be able to handle this post request
   if (connectionHandler->postprocessor == nullptr)
   {
-    CLog::Log(LOGERROR, "CWebServer[%hu]: unable to create HTTP POST processor for %s", m_port, request.pathUrl.c_str());
+    m_logger->error("unable to create HTTP POST processor for {}", request.pathUrl);
     connectionHandler->errorStatus = MHD_HTTP_INTERNAL_SERVER_ERROR;
   }
 }
@@ -516,7 +521,7 @@ bool CWebServer::ProcessPostData(const HTTPRequest& request, ConnectionHandler *
 {
   if (connectionHandler->requestHandler == nullptr)
   {
-    CLog::Log(LOGERROR, "CWebServer[%hu]: cannot handle partial HTTP POST for %s request because there is no valid request handler available", m_port, request.pathUrl.c_str());
+    m_logger->error("cannot handle partial HTTP POST for {} request because there is no valid request handler available", request.pathUrl);
     connectionHandler->errorStatus = MHD_HTTP_INTERNAL_SERVER_ERROR;
   }
 
@@ -541,7 +546,7 @@ bool CWebServer::ProcessPostData(const HTTPRequest& request, ConnectionHandler *
     // abort if the received POST data couldn't be handled
     if (!postDataHandled)
     {
-      CLog::Log(LOGERROR, "CWebServer[%hu]: failed to handle HTTP POST data for %s", m_port, request.pathUrl.c_str());
+      m_logger->error("failed to handle HTTP POST data for {}", request.pathUrl);
 #if (MHD_VERSION >= 0x00095213)
       connectionHandler->errorStatus = MHD_HTTP_PAYLOAD_TOO_LARGE;
 #else
@@ -581,7 +586,7 @@ int CWebServer::CreateMemoryDownloadResponse(const std::shared_ptr<IHTTPRequestH
   if ((request.ranges.IsEmpty() && responseRanges.size() > 1) ||
      (!request.ranges.IsEmpty() && responseRanges.size() > request.ranges.Size()))
   {
-    CLog::Log(LOGWARNING, "CWebServer[%hu]: response contains more ranges (%d) than the request asked for (%d)", m_port, (int)responseRanges.size(), (int)request.ranges.Size());
+    m_logger->warn("response contains more ranges ({}) than the request asked for ({})", static_cast<int>(responseRanges.size()), static_cast<int>(request.ranges.Size()));
     return SendErrorResponse(request, MHD_HTTP_INTERNAL_SERVER_ERROR, request.method);
   }
 
@@ -593,7 +598,7 @@ int CWebServer::CreateMemoryDownloadResponse(const std::shared_ptr<IHTTPRequestH
     // check if the range is valid
     if (!responseRange.IsValid())
     {
-      CLog::Log(LOGWARNING, "CWebServer[%hu]: invalid response data with range start at %" PRId64 " and end at %" PRId64, m_port, responseRange.GetFirstPosition(), responseRange.GetLastPosition());
+      m_logger->warn("invalid response data with range start at {} and end at {}", responseRange.GetFirstPosition(), responseRange.GetLastPosition());
       return SendErrorResponse(request, MHD_HTTP_INTERNAL_SERVER_ERROR, request.method);
     }
 
@@ -696,7 +701,7 @@ int CWebServer::CreateRangedMemoryDownloadResponse(const std::shared_ptr<IHTTPRe
   result += HttpRangeUtils::GenerateMultipartBoundaryEnd(multipartBoundary);
 
   // add Content-Length header
-  handler->AddResponseHeader(MHD_HTTP_HEADER_CONTENT_LENGTH, StringUtils::Format("%" PRIu64, static_cast<uint64_t>(result.size())));
+  handler->AddResponseHeader(MHD_HTTP_HEADER_CONTENT_LENGTH, StringUtils::Format("{}", static_cast<uint64_t>(result.size())));
 
   // finally create the response
   return CreateMemoryDownloadResponse(request.connection, result.c_str(), result.size(), false, true, response);
@@ -707,7 +712,7 @@ int CWebServer::CreateRedirect(struct MHD_Connection *connection, const std::str
   response = create_response(0, nullptr, MHD_NO, MHD_NO);
   if (response == nullptr)
   {
-    CLog::Log(LOGERROR, "CWebServer[%hu]: failed to create HTTP redirect response to %s", m_port, strURL.c_str());
+    m_logger->error("failed to create HTTP redirect response to {}", strURL);
     return MHD_NO;
   }
 
@@ -733,7 +738,7 @@ int CWebServer::CreateFileDownloadResponse(const std::shared_ptr<IHTTPRequestHan
 
   if (!file->Open(filePath, XFILE::READ_NO_CACHE))
   {
-    CLog::Log(LOGERROR, "CWebServer[%hu]: Failed to open %s", m_port, filePath.c_str());
+    m_logger->error("Failed to open {}", filePath);
     return SendErrorResponse(request, MHD_HTTP_NOT_FOUND, request.method);
   }
 
@@ -823,7 +828,7 @@ int CWebServer::CreateFileDownloadResponse(const std::shared_ptr<IHTTPRequestHan
                                                   &CWebServer::ContentReaderFreeCallback);
     if (response == nullptr)
     {
-      CLog::Log(LOGERROR, "CWebServer[%hu]: failed to create a HTTP response for %s to be filled from %s", m_port, request.pathUrl.c_str(), filePath.c_str());
+      m_logger->error("failed to create a HTTP response for {} to be filled from{}", request.pathUrl, filePath);
       return MHD_NO;
     }
 
@@ -838,11 +843,11 @@ int CWebServer::CreateFileDownloadResponse(const std::shared_ptr<IHTTPRequestHan
     response = create_response(0, nullptr, MHD_NO, MHD_NO);
     if (response == nullptr)
     {
-      CLog::Log(LOGERROR, "CWebServer[%hu]: failed to create a HTTP HEAD response for %s", m_port, request.pathUrl.c_str());
+      m_logger->error("failed to create a HTTP HEAD response for {}", request.pathUrl);
       return MHD_NO;
     }
 
-    handler->AddResponseHeader(MHD_HTTP_HEADER_CONTENT_LENGTH, StringUtils::Format("%" PRId64, fileLength));
+    handler->AddResponseHeader(MHD_HTTP_HEADER_CONTENT_LENGTH, StringUtils::Format("{}", fileLength));
   }
 
   // set the Content-Type header
@@ -876,7 +881,7 @@ int CWebServer::CreateErrorResponse(struct MHD_Connection *connection, int respo
   response = create_response(payloadSize, payload, MHD_NO, MHD_NO);
   if (response == nullptr)
   {
-    CLog::Log(LOGERROR, "CWebServer[%hu]: failed to create a HTTP %d error response", m_port, responseType);
+    m_logger->error("failed to create a HTTP {} error response", responseType);
     return MHD_NO;
   }
 
@@ -888,7 +893,7 @@ int CWebServer::CreateMemoryDownloadResponse(struct MHD_Connection *connection,
   response = create_response(size, const_cast<void*>(data), free ? MHD_YES : MHD_NO, copy ? MHD_YES : MHD_NO);
   if (response == nullptr)
   {
-    CLog::Log(LOGERROR, "CWebServer[%hu]: failed to create a HTTP download response", m_port);
+    m_logger->error("failed to create a HTTP download response");
     return MHD_NO;
   }
 
@@ -921,7 +926,7 @@ void* CWebServer::UriRequestLogger(void *cls, const char *uri)
 
   // log the full URI
   if (webServer == nullptr)
-    CLog::Log(LOGDEBUG, "CWebServer[unknown]: request received for %s", uri);
+    s_logger->debug("request received for {}", uri);
   else
     webServer->LogRequest(uri);
 
@@ -934,7 +939,7 @@ void CWebServer::LogRequest(const char* uri) const
   if (uri == nullptr)
     return;
 
-  CLog::Log(LOGDEBUG, "CWebServer[%hu]: request received for %s", m_port, uri);
+  m_logger->debug("request received for {}", uri);
 }
 
 ssize_t CWebServer::ContentReaderCallback(void *cls, uint64_t pos, char *buf, size_t max)
@@ -943,7 +948,8 @@ ssize_t CWebServer::ContentReaderCallback(void *cls, uint64_t pos, char *buf, si
   if (context == nullptr || context->file == nullptr)
     return -1;
 
-  CLog::Log(LOGDEBUG, LOGWEBSERVER, "CWebServer [OUT] write maximum %zu bytes from %" PRIu64 " (%" PRIu64 ")", max, context->writePosition, pos);
+  if (CServiceBroker::GetLogging().CanLogComponent(LOGWEBSERVER))
+    s_logger->debug("[OUT] write maximum {} bytes from {} ({})", max, context->writePosition, pos);
 
   // check if we need to add the end-boundary
   if (context->rangeCountTotal > 1 && context->ranges.IsEmpty())
@@ -1012,7 +1018,8 @@ ssize_t CWebServer::ContentReaderCallback(void *cls, uint64_t pos, char *buf, si
   // add the number of read bytes to the number of written bytes
   written += res;
 
-  CLog::Log(LOGDEBUG, LOGWEBSERVER, "CWebServer [OUT] wrote %d bytes from %" PRIu64 " in range (%" PRIu64 " - %" PRIu64 ")", written, context->writePosition, start, end);
+  if (CServiceBroker::GetLogging().CanLogComponent(LOGWEBSERVER))
+    s_logger->debug("[OUT] wrote {} bytes from {} in range ({} - {})", written, context->writePosition, start, end);
 
   // update the current write position
   context->writePosition += res;
@@ -1033,13 +1040,21 @@ void CWebServer::ContentReaderFreeCallback(void *cls)
   HttpFileDownloadContext *context = (HttpFileDownloadContext *)cls;
   delete context;
 
-  CLog::Log(LOGDEBUG, LOGWEBSERVER, "CWebServer [OUT] done");
+  if (CServiceBroker::GetLogging().CanLogComponent(LOGWEBSERVER))
+    s_logger->debug("[OUT] done");
+}
+
+// static logger for libmicrohttpd
+static Logger GetMhdLogger()
+{
+  static Logger s_logger_mhd = CServiceBroker::GetLogging().GetLogger("libmicrohttpd");
+  return s_logger_mhd;
 }
 
 // local helper
 static void panicHandlerForMHD(void* unused, const char* file, unsigned int line, const char *reason)
 {
-  CLog::Log(LOGSEVERE, "CWebServer: MHD serious error: reason \"%s\" in file \"%s\" at line %ui", reason ? reason : "",
+  GetMhdLogger()->critical("serious error: reason \"{}\" in file \"{}\" at line {}", reason ? reason : "",
             file ? file : "", line);
   throw std::runtime_error("MHD serious error"); // FIXME: better solution?
 }
@@ -1047,20 +1062,21 @@ static void panicHandlerForMHD(void* unused, const char* file, unsigned int line
 // local helper
 static void logFromMHD(void* unused, const char* fmt, va_list ap)
 {
+  Logger logger = GetMhdLogger();
   if (fmt == nullptr || fmt[0] == 0)
-    CLog::Log(LOGERROR, "CWebServer: MHD reported error with empty string");
+    GetMhdLogger()->error("reported error with empty string");
   else
   {
     std::string errDsc = StringUtils::FormatV(fmt, ap);
     if (errDsc.empty())
-      CLog::Log(LOGERROR, "CWebServer: MHD reported error with unprintable string \"%s\"", fmt);
+      GetMhdLogger()->error("reported error with unprintable string \"{}\"", fmt);
     else
     {
       if (errDsc.at(errDsc.length() - 1) == '\n')
         errDsc.erase(errDsc.length() - 1);
-
+      
       // Most common error is "aborted connection", so log it at LOGDEBUG level
-      CLog::Log(LOGDEBUG, "CWebServer [MHD]: %s", errDsc.c_str());
+      GetMhdLogger()->debug(errDsc);
     }
   }
 }
@@ -1082,7 +1098,7 @@ bool CWebServer::LoadCert(std::string &skey, std::string &scert)
     file.Close();
   }
   else
-    CLog::Log(LOGDEBUG, "WebServer %s: Error loading: %s", __FUNCTION__, keyFile);
+    m_logger->error("{}: Error loading: {}", __FUNCTION__, keyFile);
 
   if (file.LoadFile(certFile, buf) > 0)
   {
@@ -1091,11 +1107,11 @@ bool CWebServer::LoadCert(std::string &skey, std::string &scert)
     file.Close();
   }
   else
-    CLog::Log(LOGDEBUG, "WebServer %s: Error loading: %s", __FUNCTION__, certFile);
+    m_logger->error("{}: Error loading: {}", __FUNCTION__, certFile);
 
   if (!skey.empty() && !scert.empty())
   {
-    CLog::Log(LOGERROR, "WebServer %s: found server key: %s, certificate: %s, HTTPS support enabled", __FUNCTION__, keyFile, certFile);
+    m_logger->info("{}: found server key: {}, certificate: {}, HTTPS support enabled", __FUNCTION__, keyFile, certFile);
     return true;
   }
   return false;
@@ -1169,6 +1185,9 @@ bool CWebServer::Start(uint16_t port, const std::string &username, const std::st
   SetCredentials(username, password);
   if (!m_running)
   {
+    // use a new logger containing the port in the name
+    m_logger = CServiceBroker::GetLogging().GetLogger(StringUtils::Format("CWebserver[{}]", port));
+
     int v6testSock;
     if ((v6testSock = socket(AF_INET6, SOCK_STREAM, 0)) >= 0)
     {
@@ -1181,10 +1200,10 @@ bool CWebServer::Start(uint16_t port, const std::string &username, const std::st
     if (m_running)
     {
       m_port = port;
-      CLog::Log(LOGNOTICE, "CWebServer[%hu]: Started", m_port);
+      m_logger->info("Started");
     }
     else
-      CLog::Log(LOGERROR, "CWebServer[%hu]: Failed to start", port);
+      m_logger->error("Failed to start");
   }
 
   return m_running;
@@ -1202,7 +1221,7 @@ bool CWebServer::Stop()
     MHD_stop_daemon(m_daemon_ip4);
 
   m_running = false;
-  CLog::Log(LOGNOTICE, "CWebServer[%hu]: Stopped", m_port);
+  m_logger->info("Stopped");
   m_port = 0;
 
   return true;
@@ -1251,7 +1270,7 @@ void CWebServer::UnregisterRequestHandler(IHTTPRequestHandler *handler)
 
 void CWebServer::LogRequest(const HTTPRequest& request) const
 {
-  if (!CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(LOGWEBSERVER))
+  if (!CServiceBroker::GetLogging().CanLogComponent(LOGWEBSERVER))
     return;
 
   std::multimap<std::string, std::string> headerValues;
@@ -1259,7 +1278,7 @@ void CWebServer::LogRequest(const HTTPRequest& request) const
   std::multimap<std::string, std::string> getValues;
   HTTPRequestHandlerUtils::GetRequestHeaderValues(request.connection, MHD_GET_ARGUMENT_KIND, getValues);
 
-  CLog::Log(LOGDEBUG, "CWebServer[%hu]  [IN] %s %s %s", m_port, request.version.c_str(), GetHTTPMethod(request.method).c_str(), request.pathUrlFull.c_str());
+  m_logger->debug(" [IN] {} {} {}", request.version, GetHTTPMethod(request.method), request.pathUrlFull);
 
   if (!getValues.empty())
   {
@@ -1267,25 +1286,25 @@ void CWebServer::LogRequest(const HTTPRequest& request) const
     for (const auto get : getValues)
       values.push_back(get.first + " = " + get.second);
 
-    CLog::Log(LOGDEBUG, "CWebServer[%hu]  [IN] Query arguments: %s", m_port, StringUtils::Join(values, "; ").c_str());
+    m_logger->debug(" [IN] Query arguments: {}", StringUtils::Join(values, "; "));
   }
 
   for (const auto header : headerValues)
-    CLog::Log(LOGDEBUG, "CWebServer[%hu]  [IN] %s: %s", m_port, header.first.c_str(), header.second.c_str());
+    m_logger->debug(" [IN] {}: {}", header.first, header.second);
 }
 
 void CWebServer::LogResponse(const HTTPRequest& request, int responseStatus) const
 {
-  if (!CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->CanLogComponent(LOGWEBSERVER))
+  if (!CServiceBroker::GetLogging().CanLogComponent(LOGWEBSERVER))
     return;
 
   std::multimap<std::string, std::string> headerValues;
   HTTPRequestHandlerUtils::GetRequestHeaderValues(request.connection, MHD_HEADER_KIND, headerValues);
 
-  CLog::Log(LOGDEBUG, "CWebServer[%hu] [OUT] %s %d %s", m_port, request.version.c_str(), responseStatus, request.pathUrlFull.c_str());
+  m_logger->debug("[OUT] {} {} {}", request.version, responseStatus, request.pathUrlFull);
 
   for (const auto header : headerValues)
-    CLog::Log(LOGDEBUG, "CWebServer[%hu] [OUT] %s: %s", m_port, header.first.c_str(), header.second.c_str());
+    m_logger->debug("[OUT] {}: {}", header.first, header.second);
 }
 
 std::string CWebServer::CreateMimeTypeFromExtension(const char *ext)
@@ -1303,7 +1322,8 @@ int CWebServer::AddHeader(struct MHD_Response *response, const std::string &name
   if (response == nullptr || name.empty())
     return 0;
 
-  CLog::Log(LOGDEBUG, LOGWEBSERVER, "CWebServer[%hu] [OUT] %s: %s", m_port, name.c_str(), value.c_str());
+  if (CServiceBroker::GetLogging().CanLogComponent(LOGWEBSERVER))
+    m_logger->debug("[OUT] {}: {}", name, value);
 
 #if MHD_VERSION >= 0x00096800
   if (name == MHD_HTTP_HEADER_CONTENT_LENGTH)
diff --git a/xbmc/network/WebServer.h b/xbmc/network/WebServer.h
index b637d90d0de9..70d2853234fc 100644
--- a/xbmc/network/WebServer.h
+++ b/xbmc/network/WebServer.h
@@ -10,6 +10,7 @@
 
 #include "network/httprequesthandler/IHTTPRequestHandler.h"
 #include "threads/CriticalSection.h"
+#include "utils/logtypes.h"
 
 #include <memory>
 #include <vector>
@@ -123,4 +124,7 @@ class CWebServer
   std::string m_cert;
   mutable CCriticalSection m_critSection;
   std::vector<IHTTPRequestHandler *> m_requestHandlers;
+
+  Logger m_logger;
+  static Logger s_logger;
 };

From df26637972efbde783ba16142f39702b465f50db Mon Sep 17 00:00:00 2001
From: montellese <montellese@kodi.tv>
Date: Mon, 13 Apr 2020 14:56:50 +0200
Subject: [PATCH 12/21] ~ follow coding style for 5163bf37fb

---
 xbmc/network/WebServer.cpp | 38 +++++++++++++++++++++++++-------------
 1 file changed, 25 insertions(+), 13 deletions(-)

diff --git a/xbmc/network/WebServer.cpp b/xbmc/network/WebServer.cpp
index ebee861f01a6..3a3bf7dd73f4 100644
--- a/xbmc/network/WebServer.cpp
+++ b/xbmc/network/WebServer.cpp
@@ -414,7 +414,8 @@ int CWebServer::FinalizeRequest(const std::shared_ptr<IHTTPRequestHandler>& hand
 
   // add MHD_HTTP_HEADER_CONTENT_LENGTH
   if (responseDetails.totalLength > 0)
-    handler->AddResponseHeader(MHD_HTTP_HEADER_CONTENT_LENGTH, StringUtils::Format("{}", responseDetails.totalLength));
+    handler->AddResponseHeader(MHD_HTTP_HEADER_CONTENT_LENGTH,
+                               StringUtils::Format("{}", responseDetails.totalLength));
 
   // add all headers set by the request handler
   for (const auto& it : responseDetails.headers)
@@ -521,7 +522,9 @@ bool CWebServer::ProcessPostData(const HTTPRequest& request, ConnectionHandler *
 {
   if (connectionHandler->requestHandler == nullptr)
   {
-    m_logger->error("cannot handle partial HTTP POST for {} request because there is no valid request handler available", request.pathUrl);
+    m_logger->error("cannot handle partial HTTP POST for {} request because there is no valid "
+                    "request handler available",
+                    request.pathUrl);
     connectionHandler->errorStatus = MHD_HTTP_INTERNAL_SERVER_ERROR;
   }
 
@@ -586,7 +589,9 @@ int CWebServer::CreateMemoryDownloadResponse(const std::shared_ptr<IHTTPRequestH
   if ((request.ranges.IsEmpty() && responseRanges.size() > 1) ||
      (!request.ranges.IsEmpty() && responseRanges.size() > request.ranges.Size()))
   {
-    m_logger->warn("response contains more ranges ({}) than the request asked for ({})", static_cast<int>(responseRanges.size()), static_cast<int>(request.ranges.Size()));
+    m_logger->warn("response contains more ranges ({}) than the request asked for ({})",
+                   static_cast<int>(responseRanges.size()),
+                   static_cast<int>(request.ranges.Size()));
     return SendErrorResponse(request, MHD_HTTP_INTERNAL_SERVER_ERROR, request.method);
   }
 
@@ -598,7 +603,8 @@ int CWebServer::CreateMemoryDownloadResponse(const std::shared_ptr<IHTTPRequestH
     // check if the range is valid
     if (!responseRange.IsValid())
     {
-      m_logger->warn("invalid response data with range start at {} and end at {}", responseRange.GetFirstPosition(), responseRange.GetLastPosition());
+      m_logger->warn("invalid response data with range start at {} and end at {}",
+                     responseRange.GetFirstPosition(), responseRange.GetLastPosition());
       return SendErrorResponse(request, MHD_HTTP_INTERNAL_SERVER_ERROR, request.method);
     }
 
@@ -701,7 +707,8 @@ int CWebServer::CreateRangedMemoryDownloadResponse(const std::shared_ptr<IHTTPRe
   result += HttpRangeUtils::GenerateMultipartBoundaryEnd(multipartBoundary);
 
   // add Content-Length header
-  handler->AddResponseHeader(MHD_HTTP_HEADER_CONTENT_LENGTH, StringUtils::Format("{}", static_cast<uint64_t>(result.size())));
+  handler->AddResponseHeader(MHD_HTTP_HEADER_CONTENT_LENGTH,
+                             StringUtils::Format("{}", static_cast<uint64_t>(result.size())));
 
   // finally create the response
   return CreateMemoryDownloadResponse(request.connection, result.c_str(), result.size(), false, true, response);
@@ -828,7 +835,8 @@ int CWebServer::CreateFileDownloadResponse(const std::shared_ptr<IHTTPRequestHan
                                                   &CWebServer::ContentReaderFreeCallback);
     if (response == nullptr)
     {
-      m_logger->error("failed to create a HTTP response for {} to be filled from{}", request.pathUrl, filePath);
+      m_logger->error("failed to create a HTTP response for {} to be filled from{}",
+                      request.pathUrl, filePath);
       return MHD_NO;
     }
 
@@ -847,7 +855,8 @@ int CWebServer::CreateFileDownloadResponse(const std::shared_ptr<IHTTPRequestHan
       return MHD_NO;
     }
 
-    handler->AddResponseHeader(MHD_HTTP_HEADER_CONTENT_LENGTH, StringUtils::Format("{}", fileLength));
+    handler->AddResponseHeader(MHD_HTTP_HEADER_CONTENT_LENGTH,
+                               StringUtils::Format("{}", fileLength));
   }
 
   // set the Content-Type header
@@ -1019,7 +1028,8 @@ ssize_t CWebServer::ContentReaderCallback(void *cls, uint64_t pos, char *buf, si
   written += res;
 
   if (CServiceBroker::GetLogging().CanLogComponent(LOGWEBSERVER))
-    s_logger->debug("[OUT] wrote {} bytes from {} in range ({} - {})", written, context->writePosition, start, end);
+    s_logger->debug("[OUT] wrote {} bytes from {} in range ({} - {})", written,
+                    context->writePosition, start, end);
 
   // update the current write position
   context->writePosition += res;
@@ -1054,8 +1064,8 @@ static Logger GetMhdLogger()
 // local helper
 static void panicHandlerForMHD(void* unused, const char* file, unsigned int line, const char *reason)
 {
-  GetMhdLogger()->critical("serious error: reason \"{}\" in file \"{}\" at line {}", reason ? reason : "",
-            file ? file : "", line);
+  GetMhdLogger()->critical("serious error: reason \"{}\" in file \"{}\" at line {}",
+                           reason ? reason : "", file ? file : "", line);
   throw std::runtime_error("MHD serious error"); // FIXME: better solution?
 }
 
@@ -1074,7 +1084,7 @@ static void logFromMHD(void* unused, const char* fmt, va_list ap)
     {
       if (errDsc.at(errDsc.length() - 1) == '\n')
         errDsc.erase(errDsc.length() - 1);
-      
+
       // Most common error is "aborted connection", so log it at LOGDEBUG level
       GetMhdLogger()->debug(errDsc);
     }
@@ -1111,7 +1121,8 @@ bool CWebServer::LoadCert(std::string &skey, std::string &scert)
 
   if (!skey.empty() && !scert.empty())
   {
-    m_logger->info("{}: found server key: {}, certificate: {}, HTTPS support enabled", __FUNCTION__, keyFile, certFile);
+    m_logger->info("{}: found server key: {}, certificate: {}, HTTPS support enabled", __FUNCTION__,
+                   keyFile, certFile);
     return true;
   }
   return false;
@@ -1278,7 +1289,8 @@ void CWebServer::LogRequest(const HTTPRequest& request) const
   std::multimap<std::string, std::string> getValues;
   HTTPRequestHandlerUtils::GetRequestHeaderValues(request.connection, MHD_GET_ARGUMENT_KIND, getValues);
 
-  m_logger->debug(" [IN] {} {} {}", request.version, GetHTTPMethod(request.method), request.pathUrlFull);
+  m_logger->debug(" [IN] {} {} {}", request.version, GetHTTPMethod(request.method),
+                  request.pathUrlFull);
 
   if (!getValues.empty())
   {

From a0b48429df6889af0bedcc88c862fa0a600c1c39 Mon Sep 17 00:00:00 2001
From: montellese <montellese@kodi.tv>
Date: Sat, 14 Mar 2020 22:33:28 +0100
Subject: [PATCH 13/21] [settings/lib] make use of new logging functionality

---
 xbmc/settings/lib/ISettingControl.cpp   |  9 ++-
 xbmc/settings/lib/ISettingControl.h     |  6 +-
 xbmc/settings/lib/Setting.cpp           | 84 +++++++++++++------------
 xbmc/settings/lib/Setting.h             | 16 ++---
 xbmc/settings/lib/SettingDependency.cpp | 20 +++---
 xbmc/settings/lib/SettingDependency.h   |  5 +-
 xbmc/settings/lib/SettingSection.cpp    | 26 ++++----
 xbmc/settings/lib/SettingSection.h      |  7 ++-
 xbmc/settings/lib/SettingUpdate.cpp     |  9 ++-
 xbmc/settings/lib/SettingUpdate.h       |  6 +-
 xbmc/settings/lib/SettingsManager.cpp   | 36 ++++++-----
 xbmc/settings/lib/SettingsManager.h     |  4 +-
 12 files changed, 133 insertions(+), 95 deletions(-)

diff --git a/xbmc/settings/lib/ISettingControl.cpp b/xbmc/settings/lib/ISettingControl.cpp
index af397215d8e4..ff567d91452a 100644
--- a/xbmc/settings/lib/ISettingControl.cpp
+++ b/xbmc/settings/lib/ISettingControl.cpp
@@ -9,10 +9,15 @@
 #include "ISettingControl.h"
 
 #include "SettingDefinitions.h"
+#include "ServiceBroker.h"
 #include "utils/StringUtils.h"
 #include "utils/XBMCTinyXML.h"
 #include "utils/log.h"
 
+ISettingControl::ISettingControl()
+  : CStaticLoggerBase("ISettingControl")
+{}
+
 bool ISettingControl::Deserialize(const TiXmlNode *node, bool update /* = false */)
 {
   if (node == nullptr)
@@ -28,7 +33,7 @@ bool ISettingControl::Deserialize(const TiXmlNode *node, bool update /* = false
     format = strTmp;
   if (!SetFormat(format))
   {
-    CLog::Log(LOGERROR, "ISettingControl: error reading \"format\" attribute of <control>");
+    s_logger->error("error reading \"{}\" attribute of <control>", SETTING_XML_ATTR_FORMAT);
     return false;
   }
 
@@ -36,7 +41,7 @@ bool ISettingControl::Deserialize(const TiXmlNode *node, bool update /* = false
   {
     if (!StringUtils::EqualsNoCase(strTmp, "false") && !StringUtils::EqualsNoCase(strTmp, "true"))
     {
-      CLog::Log(LOGERROR, "ISettingControl: error reading \"delayed\" attribute of <control>");
+      s_logger->error("error reading \"{}\" attribute of <control>", SETTING_XML_ATTR_DELAYED);
       return false;
     }
     else
diff --git a/xbmc/settings/lib/ISettingControl.h b/xbmc/settings/lib/ISettingControl.h
index 03b9cc3794e5..71a05f00061b 100644
--- a/xbmc/settings/lib/ISettingControl.h
+++ b/xbmc/settings/lib/ISettingControl.h
@@ -8,14 +8,16 @@
 
 #pragma once
 
+#include "utils/StaticLoggerBase.h"
+
 #include <string>
 
 class TiXmlNode;
 
-class ISettingControl
+class ISettingControl : public CStaticLoggerBase
 {
 public:
-  ISettingControl() = default;
+  ISettingControl();
   virtual ~ISettingControl() = default;
 
   virtual std::string GetType() const = 0;
diff --git a/xbmc/settings/lib/Setting.cpp b/xbmc/settings/lib/Setting.cpp
index af2810b17e57..a73019294a71 100644
--- a/xbmc/settings/lib/Setting.cpp
+++ b/xbmc/settings/lib/Setting.cpp
@@ -10,6 +10,7 @@
 
 #include "SettingDefinitions.h"
 #include "SettingsManager.h"
+#include "ServiceBroker.h"
 #include "utils/StringUtils.h"
 #include "utils/XBMCTinyXML.h"
 #include "utils/XMLUtils.h"
@@ -65,12 +66,14 @@ bool DeserializeOptionsSort(const TiXmlElement* optionsElement, SettingOptionsSo
   return true;
 }
 
-CSetting::CSetting(const std::string &id, CSettingsManager *settingsManager /* = nullptr */)
+CSetting::CSetting(const std::string &id, CSettingsManager *settingsManager /* = nullptr */, const std::string& name /* = "CSetting" */)
   : ISetting(id, settingsManager)
+  , CStaticLoggerBase(name)
 { }
 
-CSetting::CSetting(const std::string &id, const CSetting &setting)
+CSetting::CSetting(const std::string &id, const CSetting &setting, const std::string& name /* = "CSetting" */)
   : ISetting(id, setting.m_settingsManager)
+  , CStaticLoggerBase(name)
 {
   m_id = id;
   Copy(setting);
@@ -128,7 +131,7 @@ bool CSetting::Deserialize(const TiXmlNode *node, bool update /* = false */)
       if (dependency.Deserialize(dependencyNode))
         m_dependencies.push_back(dependency);
       else
-        CLog::Log(LOGWARNING, "CSetting: error reading <dependency> tag of \"%s\"", m_id.c_str());
+        s_logger->warn("error reading <{}> tag of \"{}\"", SETTING_XML_ELM_DEPENDENCY, m_id);
 
       dependencyNode = dependencyNode->NextSibling(SETTING_XML_ELM_DEPENDENCY);
     }
@@ -140,20 +143,20 @@ bool CSetting::Deserialize(const TiXmlNode *node, bool update /* = false */)
     auto controlType = control->Attribute(SETTING_XML_ATTR_TYPE);
     if (controlType == nullptr)
     {
-      CLog::Log(LOGERROR, "CSetting: error reading \"type\" attribute of <control> tag of \"%s\"", m_id.c_str());
+      s_logger->error("error reading \"{}\" attribute of <control> tag of \"{}\"", SETTING_XML_ATTR_TYPE, m_id);
       return false;
     }
 
     m_control = m_settingsManager->CreateControl(controlType);
     if (m_control == nullptr || !m_control->Deserialize(control, update))
     {
-      CLog::Log(LOGERROR, "CSetting: error reading <control> tag of \"%s\"", m_id.c_str());
+      s_logger->error("error reading <{}> tag of \"{}\"", SETTING_XML_ELM_CONTROL, m_id);
       return false;
     }
   }
   else if (!update && m_level < SettingLevel::Internal && !IsReference())
   {
-    CLog::Log(LOGERROR, "CSetting: missing <control> tag of \"%s\"", m_id.c_str());
+    s_logger->error("missing <{}> tag of \"{}\"", SETTING_XML_ELM_CONTROL, m_id);
     return false;
   }
 
@@ -167,10 +170,10 @@ bool CSetting::Deserialize(const TiXmlNode *node, bool update /* = false */)
       if (settingUpdate.Deserialize(updateElem))
       {
         if (!m_updates.insert(settingUpdate).second)
-          CLog::Log(LOGWARNING, "CSetting: duplicate <update> definition for \"%s\"", m_id.c_str());
+          s_logger->warn("duplicate <{}> definition for \"{}\"", SETTING_XML_ELM_UPDATE, m_id);
       }
       else
-        CLog::Log(LOGWARNING, "CSetting: error reading <update> tag of \"%s\"", m_id.c_str());
+        s_logger->warn("error reading <{}> tag of \"{}\"", SETTING_XML_ELM_UPDATE, m_id);
 
       updateElem = updateElem->NextSiblingElement(SETTING_XML_ELM_UPDATE);
     }
@@ -312,12 +315,12 @@ void CSetting::Copy(const CSetting &setting)
 }
 
 CSettingList::CSettingList(const std::string &id, std::shared_ptr<CSetting> settingDefinition, CSettingsManager *settingsManager /* = nullptr */)
-  : CSetting(id, settingsManager)
+  : CSetting(id, settingsManager, "CSettingList")
   , m_definition(settingDefinition)
 { }
 
 CSettingList::CSettingList(const std::string &id, std::shared_ptr<CSetting> settingDefinition, int label, CSettingsManager *settingsManager /* = nullptr */)
-  : CSetting(id, settingsManager)
+  : CSetting(id, settingsManager, "CSettingList")
   , m_definition(settingDefinition)
 {
   SetLabel(label);
@@ -358,7 +361,7 @@ bool CSettingList::Deserialize(const TiXmlNode *node, bool update /* = false */)
   auto element = node->ToElement();
   if (element == nullptr)
   {
-    CLog::Log(LOGWARNING, "CSettingList: unable to read type of list setting of %s", m_id.c_str());
+    s_logger->warn("unable to read type of list setting of {}", m_id);
     return false;
   }
 
@@ -383,7 +386,8 @@ bool CSettingList::Deserialize(const TiXmlNode *node, bool update /* = false */)
       m_maximumItems = -1;
     else if (m_maximumItems < m_minimumItems)
     {
-      CLog::Log(LOGWARNING, "CSettingList: invalid <minimum> (%d) and/or <maximum> (%d) of %s", m_minimumItems, m_maximumItems, m_id.c_str());
+      s_logger->warn("invalid <{}> ({}) and/or <{}> ({}) of {}",
+        SETTING_XML_ELM_MINIMUM_ITEMS, m_minimumItems, SETTING_XML_ELM_MAXIMUM_ITEMS, m_maximumItems, m_id);
       return false;
     }
   }
@@ -394,7 +398,7 @@ bool CSettingList::Deserialize(const TiXmlNode *node, bool update /* = false */)
   {
     if (!fromString(values, m_defaults))
     {
-      CLog::Log(LOGWARNING, "CSettingList: invalid <default> definition \"%s\" of %s", values.c_str(), m_id.c_str());
+      s_logger->warn("invalid <{}> definition \"{}\" of {}", SETTING_XML_ELM_DEFAULT, values, m_id);
       return false;
     }
     Reset();
@@ -588,7 +592,7 @@ bool CSettingList::fromValues(const std::vector<std::string> &strValues, Setting
   int index = 0;
   for (auto value : strValues)
   {
-    auto settingValue = m_definition->Clone(StringUtils::Format("%s.%d", m_id.c_str(), index++));
+    auto settingValue = m_definition->Clone(StringUtils::Format("{}.{}", m_id, index++));
     if (settingValue == nullptr ||
         !settingValue->FromString(value))
     {
@@ -618,17 +622,17 @@ std::string CSettingList::toString(const SettingList &values) const
 }
 
 CSettingBool::CSettingBool(const std::string &id, CSettingsManager *settingsManager /* = nullptr */)
-  : CTraitedSetting(id, settingsManager)
+  : CTraitedSetting(id, settingsManager, "CSettingBool")
 { }
 
 CSettingBool::CSettingBool(const std::string &id, const CSettingBool &setting)
-  : CTraitedSetting(id, setting)
+  : CTraitedSetting(id, setting, "CSettingBool")
 {
   copy(setting);
 }
 
 CSettingBool::CSettingBool(const std::string &id, int label, bool value, CSettingsManager *settingsManager /* = nullptr */)
-  : CTraitedSetting(id, settingsManager)
+  : CTraitedSetting(id, settingsManager, "CSettingBool")
   , m_value(value)
   , m_default(value)
 {
@@ -665,7 +669,7 @@ bool CSettingBool::Deserialize(const TiXmlNode *node, bool update /* = false */)
     m_value = m_default = value;
   else if (!update)
   {
-    CLog::Log(LOGERROR, "CSettingBool: error reading the default value of \"%s\"", m_id.c_str());
+    s_logger->error("error reading the default value of \"{}\"", m_id);
     return false;
   }
 
@@ -759,17 +763,17 @@ bool CSettingBool::fromString(const std::string &strValue, bool &value) const
 }
 
 CSettingInt::CSettingInt(const std::string &id, CSettingsManager *settingsManager /* = nullptr */)
-  : CTraitedSetting(id, settingsManager)
+  : CTraitedSetting(id, settingsManager, "CSettingInt")
 { }
 
 CSettingInt::CSettingInt(const std::string &id, const CSettingInt &setting)
-  : CTraitedSetting(id, setting)
+  : CTraitedSetting(id, setting, "CSettingInt")
 {
   copy(setting);
 }
 
 CSettingInt::CSettingInt(const std::string &id, int label, int value, CSettingsManager *settingsManager /* = nullptr */)
-  : CTraitedSetting(id, settingsManager)
+  : CTraitedSetting(id, settingsManager, "CSettingInt")
   , m_value(value)
   , m_default(value)
 {
@@ -777,7 +781,7 @@ CSettingInt::CSettingInt(const std::string &id, int label, int value, CSettingsM
 }
 
 CSettingInt::CSettingInt(const std::string &id, int label, int value, int minimum, int step, int maximum, CSettingsManager *settingsManager /* = nullptr */)
-  : CTraitedSetting(id, settingsManager)
+  : CTraitedSetting(id, settingsManager, "CSettingInt")
   , m_value(value)
   , m_default(value)
   , m_min(minimum)
@@ -788,7 +792,7 @@ CSettingInt::CSettingInt(const std::string &id, int label, int value, int minimu
 }
 
 CSettingInt::CSettingInt(const std::string &id, int label, int value, const TranslatableIntegerSettingOptions &options, CSettingsManager *settingsManager /* = nullptr */)
-  : CTraitedSetting(id, settingsManager)
+  : CTraitedSetting(id, settingsManager, "CSettingInt")
   , m_value(value)
   , m_default(value)
   , m_translatableOptions(options)
@@ -822,7 +826,7 @@ bool CSettingInt::Deserialize(const TiXmlNode *node, bool update /* = false */)
     m_value = m_default = value;
   else if (!update)
   {
-    CLog::Log(LOGERROR, "CSettingInt: error reading the default value of \"%s\"", m_id.c_str());
+    s_logger->error("error reading the default value of \"{}\"", m_id);
     return false;
   }
 
@@ -834,7 +838,7 @@ bool CSettingInt::Deserialize(const TiXmlNode *node, bool update /* = false */)
     if (options != nullptr && options->FirstChild() != nullptr)
     {
       if (!DeserializeOptionsSort(options, m_optionsSort))
-        CLog::Log(LOGWARNING, "CSettingInt: invalid \"sort\" attribute of <" SETTING_XML_ELM_OPTIONS "> for \"%s\"", m_id.c_str());
+        s_logger->warn("invalid \"sort\" attribute of <" SETTING_XML_ELM_OPTIONS "> for \"{}\"", m_id);
 
       if (options->FirstChild()->Type() == TiXmlNode::TINYXML_TEXT)
       {
@@ -1001,7 +1005,7 @@ IntegerSettingOptions CSettingInt::UpdateDynamicOptions()
     m_optionsFiller = reinterpret_cast<IntegerSettingOptionsFiller>(m_settingsManager->GetSettingOptionsFiller(shared_from_base<CSettingInt>()));
     if (m_optionsFiller == nullptr)
     {
-      CLog::Log(LOGERROR, "CSettingInt: unknown options filler \"%s\" of \"%s\"", m_optionsFillerName.c_str(), m_id.c_str());
+      s_logger->warn("unknown options filler \"{}\" of \"{}\"", m_optionsFillerName, m_id);
       return options;
     }
   }
@@ -1068,17 +1072,17 @@ bool CSettingInt::fromString(const std::string &strValue, int &value)
 }
 
 CSettingNumber::CSettingNumber(const std::string &id, CSettingsManager *settingsManager /* = nullptr */)
-  : CTraitedSetting(id, settingsManager)
+  : CTraitedSetting(id, settingsManager, "CSettingNumber")
 { }
 
 CSettingNumber::CSettingNumber(const std::string &id, const CSettingNumber &setting)
-  : CTraitedSetting(id, setting)
+  : CTraitedSetting(id, setting, "CSettingNumber")
 {
   copy(setting);
 }
 
 CSettingNumber::CSettingNumber(const std::string &id, int label, float value, CSettingsManager *settingsManager /* = nullptr */)
-  : CTraitedSetting(id, settingsManager)
+  : CTraitedSetting(id, settingsManager, "CSettingNumber")
   , m_value(value)
   , m_default(value)
 {
@@ -1086,7 +1090,7 @@ CSettingNumber::CSettingNumber(const std::string &id, int label, float value, CS
 }
 
 CSettingNumber::CSettingNumber(const std::string &id, int label, float value, float minimum, float step, float maximum, CSettingsManager *settingsManager /* = nullptr */)
-  : CTraitedSetting(id, settingsManager)
+  : CTraitedSetting(id, settingsManager, "CSettingNumber")
   , m_value(value)
   , m_default(value)
   , m_min(minimum)
@@ -1132,7 +1136,7 @@ bool CSettingNumber::Deserialize(const TiXmlNode *node, bool update /* = false *
     m_value = m_default = value;
   else if (!update)
   {
-    CLog::Log(LOGERROR, "CSettingNumber: error reading the default value of \"%s\"", m_id.c_str());
+    s_logger->error("error reading the default value of \"{}\"", m_id);
     return false;
   }
 
@@ -1258,17 +1262,17 @@ bool CSettingNumber::fromString(const std::string &strValue, double &value)
 }
 
 CSettingString::CSettingString(const std::string &id, CSettingsManager *settingsManager /* = nullptr */)
-  : CTraitedSetting(id, settingsManager)
+  : CTraitedSetting(id, settingsManager, "CSettingString")
 { }
 
 CSettingString::CSettingString(const std::string &id, const CSettingString &setting)
-  : CTraitedSetting(id, setting)
+  : CTraitedSetting(id, setting, "CSettingString")
 {
   copy(setting);
 }
 
 CSettingString::CSettingString(const std::string &id, int label, const std::string &value, CSettingsManager *settingsManager /* = nullptr */)
-  : CTraitedSetting(id, settingsManager)
+  : CTraitedSetting(id, settingsManager, "CSettingString")
   , m_value(value)
   , m_default(value)
 {
@@ -1306,7 +1310,7 @@ bool CSettingString::Deserialize(const TiXmlNode *node, bool update /* = false *
     if (options != nullptr && options->FirstChild() != nullptr)
     {
       if (!DeserializeOptionsSort(options, m_optionsSort))
-        CLog::Log(LOGWARNING, "CSettingInt: invalid \"sort\" attribute of <" SETTING_XML_ELM_OPTIONS "> for \"%s\"", m_id.c_str());
+        s_logger->warn("invalid \"sort\" attribute of <" SETTING_XML_ELM_OPTIONS "> for \"{}\"", m_id);
 
       if (options->FirstChild()->Type() == TiXmlNode::TINYXML_TEXT)
       {
@@ -1351,7 +1355,7 @@ bool CSettingString::Deserialize(const TiXmlNode *node, bool update /* = false *
     m_value = m_default = value;
   else if (!update && !m_allowEmpty)
   {
-    CLog::Log(LOGERROR, "CSettingString: error reading the default value of \"%s\"", m_id.c_str());
+    s_logger->error("error reading the default value of \"{}\"", m_id);
     return false;
   }
 
@@ -1443,7 +1447,7 @@ StringSettingOptions CSettingString::UpdateDynamicOptions()
     m_optionsFiller = reinterpret_cast<StringSettingOptionsFiller>(m_settingsManager->GetSettingOptionsFiller(shared_from_base<CSettingString>()));
     if (m_optionsFiller == nullptr)
     {
-      CLog::Log(LOGERROR, "CSettingString: unknown options filler \"%s\" of \"%s\"", m_optionsFillerName.c_str(), m_id.c_str());
+      s_logger->error("unknown options filler \"{}\" of \"{}\"", m_optionsFillerName, m_id);
       return options;
     }
   }
@@ -1495,17 +1499,17 @@ void CSettingString::copy(const CSettingString &setting)
 }
 
 CSettingAction::CSettingAction(const std::string &id, CSettingsManager *settingsManager /* = nullptr */)
-  : CSetting(id, settingsManager)
+  : CSetting(id, settingsManager, "CSettingAction")
 { }
 
 CSettingAction::CSettingAction(const std::string &id, int label, CSettingsManager *settingsManager /* = nullptr */)
-  : CSetting(id, settingsManager)
+  : CSetting(id, settingsManager, "CSettingAction")
 {
   SetLabel(label);
 }
 
 CSettingAction::CSettingAction(const std::string &id, const CSettingAction &setting)
-  : CSetting(id, setting)
+  : CSetting(id, setting, "CSettingAction")
   , m_data(setting.m_data)
 { }
 
diff --git a/xbmc/settings/lib/Setting.h b/xbmc/settings/lib/Setting.h
index 18abbd84ba83..0a03b163d839 100644
--- a/xbmc/settings/lib/Setting.h
+++ b/xbmc/settings/lib/Setting.h
@@ -17,6 +17,7 @@
 #include "SettingType.h"
 #include "SettingUpdate.h"
 #include "threads/SharedSection.h"
+#include "utils/StaticLoggerBase.h"
 
 #include <memory>
 #include <set>
@@ -42,11 +43,12 @@ using SettingList = std::vector<SettingPtr>;
  */
 class CSetting : public ISetting,
                  protected ISettingCallback,
-                 public std::enable_shared_from_this<CSetting>
+                 public std::enable_shared_from_this<CSetting>,
+                 protected CStaticLoggerBase
 {
 public:
-  CSetting(const std::string &id, CSettingsManager *settingsManager = nullptr);
-  CSetting(const std::string &id, const CSetting &setting);
+  CSetting(const std::string &id, CSettingsManager *settingsManager = nullptr, const std::string& name = "CSetting");
+  CSetting(const std::string &id, const CSetting &setting, const std::string& name = "CSetting");
   ~CSetting() override = default;
 
   virtual std::shared_ptr<CSetting> Clone(const std::string &id) const = 0;
@@ -131,11 +133,11 @@ class CTraitedSetting : public CSetting
   static SettingType Type() { return TSettingType; }
 
 protected:
-  CTraitedSetting(const std::string &id, CSettingsManager *settingsManager = nullptr)
-    : CSetting(id, settingsManager)
+  CTraitedSetting(const std::string &id, CSettingsManager *settingsManager = nullptr, const std::string& name = "CTraitedSetting")
+    : CSetting(id, settingsManager, name)
   { }
-  CTraitedSetting(const std::string &id, const CTraitedSetting &setting)
-    : CSetting(id, setting)
+  CTraitedSetting(const std::string &id, const CTraitedSetting &setting, const std::string& name = "CTraitedSetting")
+    : CSetting(id, setting, name)
   { }
   ~CTraitedSetting() override = default;
 };
diff --git a/xbmc/settings/lib/SettingDependency.cpp b/xbmc/settings/lib/SettingDependency.cpp
index 5fc827976747..fb720ce8b67f 100644
--- a/xbmc/settings/lib/SettingDependency.cpp
+++ b/xbmc/settings/lib/SettingDependency.cpp
@@ -11,6 +11,7 @@
 #include "Setting.h"
 #include "SettingDefinitions.h"
 #include "SettingsManager.h"
+#include "ServiceBroker.h"
 #include "utils/StringUtils.h"
 #include "utils/XBMCTinyXML.h"
 #include "utils/log.h"
@@ -22,12 +23,14 @@
 
 CSettingDependencyCondition::CSettingDependencyCondition(CSettingsManager *settingsManager /* = nullptr */)
   : CSettingConditionItem(settingsManager)
+  , CStaticLoggerBase("CSettingDependencyCondition")
 { }
 
 CSettingDependencyCondition::CSettingDependencyCondition(const std::string &setting, const std::string &value,
                             SettingDependencyOperator op, bool negated /* = false */,
                             CSettingsManager *settingsManager /* = nullptr */)
   : CSettingConditionItem(settingsManager)
+  , CStaticLoggerBase("CSettingDependencyCondition")
   , m_target(SettingDependencyTarget::Setting)
   , m_operator(op)
 {
@@ -40,6 +43,7 @@ CSettingDependencyCondition::CSettingDependencyCondition(const std::string &strP
                             const std::string &setting /* = "" */, bool negated /* = false */,
                             CSettingsManager *settingsManager /* = nullptr */)
   : CSettingConditionItem(settingsManager)
+  , CStaticLoggerBase("CSettingDependencyCondition")
   , m_target(SettingDependencyTarget::Property)
 {
   m_name = strProperty;
@@ -61,13 +65,13 @@ bool CSettingDependencyCondition::Deserialize(const TiXmlNode *node)
   auto strTarget = elem->Attribute(SETTING_XML_ATTR_ON);
   if (strTarget != nullptr && !setTarget(strTarget))
   {
-    CLog::Log(LOGWARNING, "CSettingDependencyCondition: unknown target \"%s\"", strTarget);
+    s_logger->warn("unknown target \"{}\"", strTarget);
     return false;
   }
 
   if (m_target != SettingDependencyTarget::Setting && m_name.empty())
   {
-    CLog::Log(LOGWARNING, "CSettingDependencyCondition: missing name for dependency");
+    s_logger->warn("missing name for dependency");
     return false;
   }
 
@@ -75,7 +79,7 @@ bool CSettingDependencyCondition::Deserialize(const TiXmlNode *node)
   {
     if (m_setting.empty())
     {
-      CLog::Log(LOGWARNING, "CSettingDependencyCondition: missing setting for dependency");
+      s_logger->warn("missing setting for dependency");
       return false;
     }
 
@@ -86,7 +90,7 @@ bool CSettingDependencyCondition::Deserialize(const TiXmlNode *node)
   auto strOperator = elem->Attribute(SETTING_XML_ATTR_OPERATOR);
   if (strOperator != nullptr && !setOperator(strOperator))
   {
-    CLog::Log(LOGWARNING, "CSettingDependencyCondition: unknown operator \"%s\"", strOperator);
+    s_logger->warn("unknown operator \"{}\"", strOperator);
     return false;
   }
 
@@ -112,7 +116,7 @@ bool CSettingDependencyCondition::Check() const
       auto setting = m_settingsManager->GetSetting(m_setting);
       if (setting == nullptr)
       {
-        CLog::Log(LOGWARNING, "CSettingDependencyCondition: unable to check condition on unknown setting \"%s\"", m_setting.c_str());
+        s_logger->warn("unable to check condition on unknown setting \"{}\"", m_setting);
         return false;
       }
 
@@ -162,7 +166,7 @@ bool CSettingDependencyCondition::Check() const
         setting = m_settingsManager->GetSetting(m_setting);
         if (setting == nullptr)
         {
-          CLog::Log(LOGWARNING, "CSettingDependencyCondition: unable to check condition on unknown setting \"%s\"", m_setting.c_str());
+          s_logger->warn("unable to check condition on unknown setting \"{}\"", m_setting);
           return false;
         }
       }
@@ -311,12 +315,14 @@ CSettingDependencyConditionCombination* CSettingDependencyConditionCombination::
 
 CSettingDependency::CSettingDependency(CSettingsManager *settingsManager /* = nullptr */)
   : CSettingCondition(settingsManager)
+  , CStaticLoggerBase("CSettingDependency")
 {
   m_operation = CBooleanLogicOperationPtr(new CSettingDependencyConditionCombination(m_settingsManager));
 }
 
 CSettingDependency::CSettingDependency(SettingDependencyType type, CSettingsManager *settingsManager /* = nullptr */)
   : CSettingCondition(settingsManager)
+  , CStaticLoggerBase("CSettingDependency")
   , m_type(type)
 {
   m_operation = CBooleanLogicOperationPtr(new CSettingDependencyConditionCombination(m_settingsManager));
@@ -334,7 +340,7 @@ bool CSettingDependency::Deserialize(const TiXmlNode *node)
   auto strType = elem->Attribute(SETTING_XML_ATTR_TYPE);
   if (strType == nullptr || strlen(strType) <= 0 || !setType(strType))
   {
-    CLog::Log(LOGWARNING, "CSettingDependency: missing or unknown dependency type definition");
+    s_logger->warn("missing or unknown dependency type definition");
     return false;
   }
 
diff --git a/xbmc/settings/lib/SettingDependency.h b/xbmc/settings/lib/SettingDependency.h
index aaac96d56a62..fd599040a0ac 100644
--- a/xbmc/settings/lib/SettingDependency.h
+++ b/xbmc/settings/lib/SettingDependency.h
@@ -10,6 +10,7 @@
 
 #include "SettingConditions.h"
 #include "utils/BooleanLogic.h"
+#include "utils/StaticLoggerBase.h"
 
 #include <list>
 #include <set>
@@ -36,7 +37,7 @@ enum class SettingDependencyTarget {
   Property
 };
 
-class CSettingDependencyCondition : public CSettingConditionItem
+class CSettingDependencyCondition : public CSettingConditionItem, protected CStaticLoggerBase
 {
 public:
   explicit CSettingDependencyCondition(CSettingsManager *settingsManager = nullptr);
@@ -96,7 +97,7 @@ class CSettingDependencyConditionCombination : public CSettingConditionCombinati
   std::set<std::string> m_settings;
 };
 
-class CSettingDependency : public CSettingCondition
+class CSettingDependency : public CSettingCondition, protected CStaticLoggerBase
 {
 public:
   explicit CSettingDependency(CSettingsManager *settingsManager = nullptr);
diff --git a/xbmc/settings/lib/SettingSection.cpp b/xbmc/settings/lib/SettingSection.cpp
index 3937464d0b26..56f92487cb1e 100644
--- a/xbmc/settings/lib/SettingSection.cpp
+++ b/xbmc/settings/lib/SettingSection.cpp
@@ -10,6 +10,7 @@
 
 #include "SettingDefinitions.h"
 #include "SettingsManager.h"
+#include "ServiceBroker.h"
 #include "utils/StringUtils.h"
 #include "utils/XBMCTinyXML.h"
 #include "utils/log.h"
@@ -54,6 +55,7 @@ template<class T> void addISetting(const TiXmlNode *node, const T &item, std::ve
 
 CSettingGroup::CSettingGroup(const std::string &id, CSettingsManager *settingsManager /* = nullptr */)
   : ISetting(id, settingsManager)
+  , CStaticLoggerBase("CSettingGroup")
 { }
 
 bool CSettingGroup::Deserialize(const TiXmlNode *node, bool update /* = false */)
@@ -68,20 +70,20 @@ bool CSettingGroup::Deserialize(const TiXmlNode *node, bool update /* = false */
     auto controlType = controlElement->Attribute(SETTING_XML_ATTR_TYPE);
     if (controlType == nullptr || strlen(controlType) <= 0)
     {
-      CLog::Log(LOGERROR, "CSettingGroup: unable to read control type");
+      s_logger->error("unable to read control type");
       return false;
     }
 
     m_control = m_settingsManager->CreateControl(controlType);
     if (m_control == nullptr)
     {
-      CLog::Log(LOGERROR, "CSettingGroup: unable to create new control \"%s\"", controlType);
+      s_logger->error("unable to create new control \"{}\"", controlType);
       return false;
     }
 
     if (!m_control->Deserialize(controlElement))
     {
-      CLog::Log(LOGWARNING, "CSettingGroup: unable to read control \"%s\"", controlType);
+      s_logger->warn("unable to read control \"{}\"", controlType);
       m_control.reset();
     }
   }
@@ -108,19 +110,19 @@ bool CSettingGroup::Deserialize(const TiXmlNode *node, bool update /* = false */
         auto settingType = settingElement->Attribute(SETTING_XML_ATTR_TYPE);
         if (settingType == nullptr || strlen(settingType) <= 0)
         {
-          CLog::Log(LOGERROR, "CSettingGroup: unable to read setting type of \"%s\"", settingId.c_str());
+          s_logger->error("unable to read setting type of \"{}\"", settingId);
           return false;
         }
 
         setting = m_settingsManager->CreateSetting(settingType, settingId, m_settingsManager);
         if (setting == nullptr)
-          CLog::Log(LOGERROR, "CSettingGroup: unknown setting type \"%s\" of \"%s\"", settingType, settingId.c_str());
+          s_logger->error("unknown setting type \"{}\" of \"{}\"", settingType, settingId);
       }
 
       if (setting == nullptr)
-        CLog::Log(LOGERROR, "CSettingGroup: unable to create new setting \"%s\"", settingId.c_str());
+        s_logger->error("unable to create new setting \"{}\"", settingId);
       else if (!setting->Deserialize(settingElement, update))
-        CLog::Log(LOGWARNING, "CSettingGroup: unable to read setting \"%s\"", settingId.c_str());
+        s_logger->warn("unable to read setting \"{}\"", settingId);
       else if (!update)
         addISetting(settingElement, setting, m_settings);
     }
@@ -173,8 +175,9 @@ bool CSettingGroup::ReplaceSetting(std::shared_ptr<const CSetting> currentSettin
 }
 
 CSettingCategory::CSettingCategory(const std::string &id, CSettingsManager *settingsManager /* = nullptr */)
-  : ISetting(id, settingsManager),
-    m_accessCondition(settingsManager)
+  : ISetting(id, settingsManager)
+  , CStaticLoggerBase("CSettingCategory")
+  , m_accessCondition(settingsManager)
 { }
 
 bool CSettingCategory::Deserialize(const TiXmlNode *node, bool update /* = false */)
@@ -213,7 +216,7 @@ bool CSettingCategory::Deserialize(const TiXmlNode *node, bool update /* = false
           addISetting(groupNode, group, m_groups);
       }
       else
-        CLog::Log(LOGWARNING, "CSettingCategory: unable to read group \"%s\"", groupId.c_str());
+        s_logger->warn("unable to read group \"{}\"", groupId);
     }
 
     groupNode = groupNode->NextSibling(SETTING_XML_ELM_GROUP);
@@ -252,6 +255,7 @@ void CSettingCategory::AddGroups(const SettingGroupList &groups)
 
 CSettingSection::CSettingSection(const std::string &id, CSettingsManager *settingsManager /* = nullptr */)
   : ISetting(id, settingsManager)
+  , CStaticLoggerBase("CSettingSection")
 { }
 
 bool CSettingSection::Deserialize(const TiXmlNode *node, bool update /* = false */)
@@ -286,7 +290,7 @@ bool CSettingSection::Deserialize(const TiXmlNode *node, bool update /* = false
           addISetting(categoryNode, category, m_categories);
       }
       else
-        CLog::Log(LOGWARNING, "CSettingSection: unable to read category \"%s\"", categoryId.c_str());
+        s_logger->warn("unable to read category \"{}\"", categoryId);
     }
 
     categoryNode = categoryNode->NextSibling(SETTING_XML_ELM_CATEGORY);
diff --git a/xbmc/settings/lib/SettingSection.h b/xbmc/settings/lib/SettingSection.h
index 202e0cfd2ff0..f29fc8d39296 100644
--- a/xbmc/settings/lib/SettingSection.h
+++ b/xbmc/settings/lib/SettingSection.h
@@ -11,6 +11,7 @@
 #include "ISetting.h"
 #include "Setting.h"
 #include "SettingCategoryAccess.h"
+#include "utils/StaticLoggerBase.h"
 
 #include <string>
 #include <vector>
@@ -23,7 +24,7 @@ class CSettingsManager;
  \sa CSettingCategory
  \sa CSetting
  */
-class CSettingGroup : public ISetting
+class CSettingGroup : public ISetting, protected CStaticLoggerBase
 {
 public:
   /*!
@@ -77,7 +78,7 @@ using SettingGroupList = std::vector<SettingGroupPtr>;
  \sa CSettingSection
  \sa CSettingGroup
  */
-class CSettingCategory : public ISetting
+class CSettingCategory : public ISetting, protected CStaticLoggerBase
 {
 public:
   /*!
@@ -133,7 +134,7 @@ using SettingCategoryList = std::vector<SettingCategoryPtr>;
  \sa CSettings
  \sa CSettingCategory
  */
-class CSettingSection : public ISetting
+class CSettingSection : public ISetting, protected CStaticLoggerBase
 {
 public:
   /*!
diff --git a/xbmc/settings/lib/SettingUpdate.cpp b/xbmc/settings/lib/SettingUpdate.cpp
index 51c5dfaeb9bb..092b9c4f236e 100644
--- a/xbmc/settings/lib/SettingUpdate.cpp
+++ b/xbmc/settings/lib/SettingUpdate.cpp
@@ -9,10 +9,15 @@
 #include "SettingUpdate.h"
 
 #include "SettingDefinitions.h"
+#include "ServiceBroker.h"
 #include "utils/StringUtils.h"
 #include "utils/XBMCTinyXML.h"
 #include "utils/log.h"
 
+CSettingUpdate::CSettingUpdate()
+  : CStaticLoggerBase("CSettingUpdate")
+{}
+
 bool CSettingUpdate::Deserialize(const TiXmlNode *node)
 {
   if (node == nullptr)
@@ -25,7 +30,7 @@ bool CSettingUpdate::Deserialize(const TiXmlNode *node)
   auto strType = elem->Attribute(SETTING_XML_ATTR_TYPE);
   if (strType == nullptr || strlen(strType) <= 0 || !setType(strType))
   {
-    CLog::Log(LOGWARNING, "CSettingUpdate: missing or unknown update type definition");
+    s_logger->warn("missing or unknown update type definition");
     return false;
   }
 
@@ -33,7 +38,7 @@ bool CSettingUpdate::Deserialize(const TiXmlNode *node)
   {
     if (node->FirstChild() == nullptr || node->FirstChild()->Type() != TiXmlNode::TINYXML_TEXT)
     {
-      CLog::Log(LOGWARNING, "CSettingUpdate: missing or invalid setting id for rename update definition");
+      s_logger->warn("missing or invalid setting id for rename update definition");
       return false;
     }
 
diff --git a/xbmc/settings/lib/SettingUpdate.h b/xbmc/settings/lib/SettingUpdate.h
index 2ad4337ec0ad..12bd3f5b6ec8 100644
--- a/xbmc/settings/lib/SettingUpdate.h
+++ b/xbmc/settings/lib/SettingUpdate.h
@@ -8,6 +8,8 @@
 
 #pragma once
 
+#include "utils/StaticLoggerBase.h"
+
 #include <string>
 
 class TiXmlNode;
@@ -18,10 +20,10 @@ enum class SettingUpdateType {
   Change
 };
 
-class CSettingUpdate
+class CSettingUpdate : protected CStaticLoggerBase
 {
 public:
-  CSettingUpdate() = default;
+  CSettingUpdate();
   virtual ~CSettingUpdate() = default;
 
   inline bool operator<(const CSettingUpdate& rhs) const
diff --git a/xbmc/settings/lib/SettingsManager.cpp b/xbmc/settings/lib/SettingsManager.cpp
index 4a194ef23cc0..ee11cbb198c2 100644
--- a/xbmc/settings/lib/SettingsManager.cpp
+++ b/xbmc/settings/lib/SettingsManager.cpp
@@ -11,6 +11,7 @@
 #include "Setting.h"
 #include "SettingDefinitions.h"
 #include "SettingSection.h"
+#include "ServiceBroker.h"
 #include "utils/StringUtils.h"
 #include "utils/XBMCTinyXML.h"
 #include "utils/log.h"
@@ -50,6 +51,10 @@ bool ParseSettingIdentifier(const std::string& settingId, std::string& categoryT
   return true;
 }
 
+CSettingsManager::CSettingsManager()
+  : CStaticLoggerBase("CSettingsManager")
+{}
+
 CSettingsManager::~CSettingsManager()
 {
   // first clear all registered settings handler and subsettings
@@ -79,23 +84,23 @@ bool CSettingsManager::Initialize(const TiXmlElement *root)
 
   if (!StringUtils::EqualsNoCase(root->ValueStr(), SETTING_XML_ROOT))
   {
-    CLog::Log(LOGERROR, "CSettingsManager: error reading settings definition: doesn't contain <settings> tag");
+    s_logger->error("error reading settings definition: doesn't contain <" SETTING_XML_ROOT "> tag");
     return false;
   }
 
   // try to get and check the version
   uint32_t version = ParseVersion(root);
   if (version == 0)
-    CLog::Log(LOGWARNING, "CSettingsManager: missing %s attribute", SETTING_XML_ROOT_VERSION);
+    s_logger->warn("missing " SETTING_XML_ROOT_VERSION " attribute", SETTING_XML_ROOT_VERSION);
 
   if (MinimumSupportedVersion >= version+1)
   {
-    CLog::Log(LOGERROR, "CSettingsManager: unable to read setting definitions from version %u (minimum version: %u)", version, MinimumSupportedVersion);
+    s_logger->error("unable to read setting definitions from version {} (minimum version: {})", version, MinimumSupportedVersion);
     return false;
   }
   if (version > Version)
   {
-    CLog::Log(LOGERROR, "CSettingsManager: unable to read setting definitions from version %u (current version: %u)", version, Version);
+    s_logger->error("unable to read setting definitions from version {} (current version: {})", version, Version);
     return false;
   }
 
@@ -117,7 +122,7 @@ bool CSettingsManager::Initialize(const TiXmlElement *root)
         AddSection(section);
       else
       {
-        CLog::Log(LOGWARNING, "CSettingsManager: unable to read section \"%s\"", sectionId.c_str());
+        s_logger->warn("unable to read section \"{}\"", sectionId);
       }
     }
 
@@ -140,16 +145,16 @@ bool CSettingsManager::Load(const TiXmlElement *root, bool &updated, bool trigge
   // try to get and check the version
   uint32_t version = ParseVersion(root);
   if (version == 0)
-    CLog::Log(LOGWARNING, "CSettingsManager: missing %s attribute", SETTING_XML_ROOT_VERSION);
+    s_logger->warn("missing {} attribute", SETTING_XML_ROOT_VERSION);
 
   if (MinimumSupportedVersion >= version+1)
   {
-    CLog::Log(LOGERROR, "CSettingsManager: unable to read setting values from version %u (minimum version: %u)", version, MinimumSupportedVersion);
+    s_logger->error("unable to read setting values from version {} (minimum version: {})", version, MinimumSupportedVersion);
     return false;
   }
   if (version > Version)
   {
-    CLog::Log(LOGERROR, "CSettingsManager: unable to read setting values from version %u (current version: %u)", version, Version);
+    s_logger->error("unable to read setting values from version {} (current version: {})", version, Version);
     return false;
   }
 
@@ -517,7 +522,7 @@ SettingPtr CSettingsManager::GetSetting(const std::string &id) const
     return setting->second.setting;
   }
 
-  CLog::Log(LOGDEBUG, "CSettingsManager: requested setting (%s) was not found.", id.c_str());
+  s_logger->debug("requested setting ({}) was not found.", id);
   return nullptr;
 }
 
@@ -543,7 +548,7 @@ SettingSectionPtr CSettingsManager::GetSection(std::string section) const
   if (sectionIt != m_sections.end())
     return sectionIt->second;
 
-  CLog::Log(LOGDEBUG, "CSettingsManager: requested setting section (%s) was not found.", section.c_str());
+  s_logger->debug("requested setting section ({}) was not found.", section);
   return nullptr;
 }
 
@@ -754,7 +759,7 @@ bool CSettingsManager::Serialize(TiXmlNode *parent) const
 
     if (parent->InsertEndChild(settingElement) == nullptr)
     {
-      CLog::Log(LOGWARNING, "CSetting: unable to write <" SETTING_XML_ELM_SETTING " id=\"%s\"> tag", setting.second.setting->GetId().c_str());
+      s_logger->warn("unable to write <" SETTING_XML_ELM_SETTING " id=\"{}\"> tag", setting.second.setting->GetId());
       continue;
     }
   }
@@ -1087,7 +1092,7 @@ bool CSettingsManager::LoadSetting(const TiXmlNode *node, SettingPtr setting, bo
 
   if (!setting->FromString(settingElement->FirstChild() != nullptr ? settingElement->FirstChild()->ValueStr() : StringUtils::Empty))
   {
-    CLog::Log(LOGWARNING, "CSettingsManager: unable to read value of setting \"%s\"", settingId.c_str());
+    s_logger->warn("unable to read value of setting \"{}\"", settingId);
     return false;
   }
 
@@ -1137,7 +1142,7 @@ bool CSettingsManager::UpdateSetting(const TiXmlNode *node, SettingPtr setting,
     if (setting->FromString(oldSettingNode->FirstChild() != nullptr ? oldSettingNode->FirstChild()->ValueStr() : StringUtils::Empty))
       updated = true;
     else
-      CLog::Log(LOGWARNING, "CSetting: unable to update \"%s\" through automatically renaming from \"%s\"", setting->GetId().c_str(), oldSetting);
+      s_logger->warn("unable to update \"{}\" through automatically renaming from \"{}\"", setting->GetId(), oldSetting);
   }
 
   updated |= OnSettingUpdate(setting, oldSetting, oldSettingNode);
@@ -1246,8 +1251,7 @@ void CSettingsManager::ResolveReferenceSettings(std::shared_ptr<CSettingSection>
             auto itReferencedSetting = FindSetting(referencedSettingId);
             if (itReferencedSetting == m_settings.end())
             {
-              CLog::Log(LOGWARNING, "CSettingsManager: missing referenced setting \"%s\"",
-                referencedSettingId.c_str());
+              s_logger->warn("missing referenced setting \"{}\"", referencedSettingId);
               continue;
             }
 
@@ -1325,7 +1329,7 @@ void CSettingsManager::CleanupIncompleteSettings()
     auto tmpIterator = setting++;
     if (tmpIterator->second.setting == nullptr)
     {
-      CLog::Log(LOGWARNING, "CSettingsManager: removing empty setting \"%s\"", tmpIterator->first.c_str());
+      s_logger->warn("removing empty setting \"{}\"", tmpIterator->first);
       m_settings.erase(tmpIterator);
     }
   }
diff --git a/xbmc/settings/lib/SettingsManager.h b/xbmc/settings/lib/SettingsManager.h
index 0c26624497d3..0a2ab51b82fd 100644
--- a/xbmc/settings/lib/SettingsManager.h
+++ b/xbmc/settings/lib/SettingsManager.h
@@ -18,6 +18,7 @@
 #include "SettingDefinitions.h"
 #include "SettingDependency.h"
 #include "threads/SharedSection.h"
+#include "utils/StaticLoggerBase.h"
 
 #include <map>
 #include <set>
@@ -38,13 +39,14 @@ class TiXmlNode;
  all settings.
  */
 class CSettingsManager : public ISettingCreator, public ISettingControlCreator,
+                         protected CStaticLoggerBase,
                          private ISettingCallback, private ISettingsHandler
 {
 public:
   /*!
    \brief Creates a new (uninitialized) settings manager.
    */
-  CSettingsManager() = default;
+  CSettingsManager();
   ~CSettingsManager() override;
 
   static const uint32_t Version;

From 4fdb92e54c61abbc2ca069af919a33e1ebafecc6 Mon Sep 17 00:00:00 2001
From: montellese <montellese@kodi.tv>
Date: Mon, 13 Apr 2020 14:57:24 +0200
Subject: [PATCH 14/21] ~ follow coding style for e0f2a73316

---
 xbmc/settings/lib/ISettingControl.cpp   |   8 +-
 xbmc/settings/lib/Setting.cpp           | 164 ++++++++++++++----------
 xbmc/settings/lib/Setting.h             |  14 +-
 xbmc/settings/lib/SettingDependency.cpp |  52 ++++----
 xbmc/settings/lib/SettingSection.cpp    |  23 ++--
 xbmc/settings/lib/SettingUpdate.cpp     |   8 +-
 xbmc/settings/lib/SettingsManager.cpp   |  29 +++--
 xbmc/settings/lib/SettingsManager.h     |   6 +-
 8 files changed, 178 insertions(+), 126 deletions(-)

diff --git a/xbmc/settings/lib/ISettingControl.cpp b/xbmc/settings/lib/ISettingControl.cpp
index ff567d91452a..8193aeea38f9 100644
--- a/xbmc/settings/lib/ISettingControl.cpp
+++ b/xbmc/settings/lib/ISettingControl.cpp
@@ -8,15 +8,15 @@
 
 #include "ISettingControl.h"
 
-#include "SettingDefinitions.h"
 #include "ServiceBroker.h"
+#include "SettingDefinitions.h"
 #include "utils/StringUtils.h"
 #include "utils/XBMCTinyXML.h"
 #include "utils/log.h"
 
-ISettingControl::ISettingControl()
-  : CStaticLoggerBase("ISettingControl")
-{}
+ISettingControl::ISettingControl() : CStaticLoggerBase("ISettingControl")
+{
+}
 
 bool ISettingControl::Deserialize(const TiXmlNode *node, bool update /* = false */)
 {
diff --git a/xbmc/settings/lib/Setting.cpp b/xbmc/settings/lib/Setting.cpp
index a73019294a71..8a5a3f239d83 100644
--- a/xbmc/settings/lib/Setting.cpp
+++ b/xbmc/settings/lib/Setting.cpp
@@ -8,9 +8,9 @@
 
 #include "Setting.h"
 
+#include "ServiceBroker.h"
 #include "SettingDefinitions.h"
 #include "SettingsManager.h"
-#include "ServiceBroker.h"
 #include "utils/StringUtils.h"
 #include "utils/XBMCTinyXML.h"
 #include "utils/XMLUtils.h"
@@ -66,14 +66,16 @@ bool DeserializeOptionsSort(const TiXmlElement* optionsElement, SettingOptionsSo
   return true;
 }
 
-CSetting::CSetting(const std::string &id, CSettingsManager *settingsManager /* = nullptr */, const std::string& name /* = "CSetting" */)
-  : ISetting(id, settingsManager)
-  , CStaticLoggerBase(name)
+CSetting::CSetting(const std::string& id,
+                   CSettingsManager* settingsManager /* = nullptr */,
+                   const std::string& name /* = "CSetting" */)
+  : ISetting(id, settingsManager), CStaticLoggerBase(name)
 { }
 
-CSetting::CSetting(const std::string &id, const CSetting &setting, const std::string& name /* = "CSetting" */)
-  : ISetting(id, setting.m_settingsManager)
-  , CStaticLoggerBase(name)
+CSetting::CSetting(const std::string& id,
+                   const CSetting& setting,
+                   const std::string& name /* = "CSetting" */)
+  : ISetting(id, setting.m_settingsManager), CStaticLoggerBase(name)
 {
   m_id = id;
   Copy(setting);
@@ -143,7 +145,8 @@ bool CSetting::Deserialize(const TiXmlNode *node, bool update /* = false */)
     auto controlType = control->Attribute(SETTING_XML_ATTR_TYPE);
     if (controlType == nullptr)
     {
-      s_logger->error("error reading \"{}\" attribute of <control> tag of \"{}\"", SETTING_XML_ATTR_TYPE, m_id);
+      s_logger->error("error reading \"{}\" attribute of <control> tag of \"{}\"",
+                      SETTING_XML_ATTR_TYPE, m_id);
       return false;
     }
 
@@ -314,14 +317,17 @@ void CSetting::Copy(const CSetting &setting)
   m_changed = setting.m_changed;
 }
 
-CSettingList::CSettingList(const std::string &id, std::shared_ptr<CSetting> settingDefinition, CSettingsManager *settingsManager /* = nullptr */)
-  : CSetting(id, settingsManager, "CSettingList")
-  , m_definition(settingDefinition)
+CSettingList::CSettingList(const std::string& id,
+                           std::shared_ptr<CSetting> settingDefinition,
+                           CSettingsManager* settingsManager /* = nullptr */)
+  : CSetting(id, settingsManager, "CSettingList"), m_definition(settingDefinition)
 { }
 
-CSettingList::CSettingList(const std::string &id, std::shared_ptr<CSetting> settingDefinition, int label, CSettingsManager *settingsManager /* = nullptr */)
-  : CSetting(id, settingsManager, "CSettingList")
-  , m_definition(settingDefinition)
+CSettingList::CSettingList(const std::string& id,
+                           std::shared_ptr<CSetting> settingDefinition,
+                           int label,
+                           CSettingsManager* settingsManager /* = nullptr */)
+  : CSetting(id, settingsManager, "CSettingList"), m_definition(settingDefinition)
 {
   SetLabel(label);
 }
@@ -386,8 +392,8 @@ bool CSettingList::Deserialize(const TiXmlNode *node, bool update /* = false */)
       m_maximumItems = -1;
     else if (m_maximumItems < m_minimumItems)
     {
-      s_logger->warn("invalid <{}> ({}) and/or <{}> ({}) of {}",
-        SETTING_XML_ELM_MINIMUM_ITEMS, m_minimumItems, SETTING_XML_ELM_MAXIMUM_ITEMS, m_maximumItems, m_id);
+      s_logger->warn("invalid <{}> ({}) and/or <{}> ({}) of {}", SETTING_XML_ELM_MINIMUM_ITEMS,
+                     m_minimumItems, SETTING_XML_ELM_MAXIMUM_ITEMS, m_maximumItems, m_id);
       return false;
     }
   }
@@ -621,20 +627,21 @@ std::string CSettingList::toString(const SettingList &values) const
   return StringUtils::Join(strValues, m_delimiter);
 }
 
-CSettingBool::CSettingBool(const std::string &id, CSettingsManager *settingsManager /* = nullptr */)
+CSettingBool::CSettingBool(const std::string& id, CSettingsManager* settingsManager /* = nullptr */)
   : CTraitedSetting(id, settingsManager, "CSettingBool")
 { }
 
-CSettingBool::CSettingBool(const std::string &id, const CSettingBool &setting)
+CSettingBool::CSettingBool(const std::string& id, const CSettingBool& setting)
   : CTraitedSetting(id, setting, "CSettingBool")
 {
   copy(setting);
 }
 
-CSettingBool::CSettingBool(const std::string &id, int label, bool value, CSettingsManager *settingsManager /* = nullptr */)
-  : CTraitedSetting(id, settingsManager, "CSettingBool")
-  , m_value(value)
-  , m_default(value)
+CSettingBool::CSettingBool(const std::string& id,
+                           int label,
+                           bool value,
+                           CSettingsManager* settingsManager /* = nullptr */)
+  : CTraitedSetting(id, settingsManager, "CSettingBool"), m_value(value), m_default(value)
 {
   SetLabel(label);
 }
@@ -762,40 +769,51 @@ bool CSettingBool::fromString(const std::string &strValue, bool &value) const
   return false;
 }
 
-CSettingInt::CSettingInt(const std::string &id, CSettingsManager *settingsManager /* = nullptr */)
+CSettingInt::CSettingInt(const std::string& id, CSettingsManager* settingsManager /* = nullptr */)
   : CTraitedSetting(id, settingsManager, "CSettingInt")
 { }
 
-CSettingInt::CSettingInt(const std::string &id, const CSettingInt &setting)
+CSettingInt::CSettingInt(const std::string& id, const CSettingInt& setting)
   : CTraitedSetting(id, setting, "CSettingInt")
 {
   copy(setting);
 }
 
-CSettingInt::CSettingInt(const std::string &id, int label, int value, CSettingsManager *settingsManager /* = nullptr */)
-  : CTraitedSetting(id, settingsManager, "CSettingInt")
-  , m_value(value)
-  , m_default(value)
+CSettingInt::CSettingInt(const std::string& id,
+                         int label,
+                         int value,
+                         CSettingsManager* settingsManager /* = nullptr */)
+  : CTraitedSetting(id, settingsManager, "CSettingInt"), m_value(value), m_default(value)
 {
   SetLabel(label);
 }
 
-CSettingInt::CSettingInt(const std::string &id, int label, int value, int minimum, int step, int maximum, CSettingsManager *settingsManager /* = nullptr */)
-  : CTraitedSetting(id, settingsManager, "CSettingInt")
-  , m_value(value)
-  , m_default(value)
-  , m_min(minimum)
-  , m_step(step)
-  , m_max(maximum)
+CSettingInt::CSettingInt(const std::string& id,
+                         int label,
+                         int value,
+                         int minimum,
+                         int step,
+                         int maximum,
+                         CSettingsManager* settingsManager /* = nullptr */)
+  : CTraitedSetting(id, settingsManager, "CSettingInt"),
+    m_value(value),
+    m_default(value),
+    m_min(minimum),
+    m_step(step),
+    m_max(maximum)
 {
   SetLabel(label);
 }
 
-CSettingInt::CSettingInt(const std::string &id, int label, int value, const TranslatableIntegerSettingOptions &options, CSettingsManager *settingsManager /* = nullptr */)
-  : CTraitedSetting(id, settingsManager, "CSettingInt")
-  , m_value(value)
-  , m_default(value)
-  , m_translatableOptions(options)
+CSettingInt::CSettingInt(const std::string& id,
+                         int label,
+                         int value,
+                         const TranslatableIntegerSettingOptions& options,
+                         CSettingsManager* settingsManager /* = nullptr */)
+  : CTraitedSetting(id, settingsManager, "CSettingInt"),
+    m_value(value),
+    m_default(value),
+    m_translatableOptions(options)
 {
   SetLabel(label);
 }
@@ -838,7 +856,8 @@ bool CSettingInt::Deserialize(const TiXmlNode *node, bool update /* = false */)
     if (options != nullptr && options->FirstChild() != nullptr)
     {
       if (!DeserializeOptionsSort(options, m_optionsSort))
-        s_logger->warn("invalid \"sort\" attribute of <" SETTING_XML_ELM_OPTIONS "> for \"{}\"", m_id);
+        s_logger->warn("invalid \"sort\" attribute of <" SETTING_XML_ELM_OPTIONS "> for \"{}\"",
+                       m_id);
 
       if (options->FirstChild()->Type() == TiXmlNode::TINYXML_TEXT)
       {
@@ -1071,31 +1090,39 @@ bool CSettingInt::fromString(const std::string &strValue, int &value)
   return true;
 }
 
-CSettingNumber::CSettingNumber(const std::string &id, CSettingsManager *settingsManager /* = nullptr */)
+CSettingNumber::CSettingNumber(const std::string& id,
+                               CSettingsManager* settingsManager /* = nullptr */)
   : CTraitedSetting(id, settingsManager, "CSettingNumber")
 { }
 
-CSettingNumber::CSettingNumber(const std::string &id, const CSettingNumber &setting)
+CSettingNumber::CSettingNumber(const std::string& id, const CSettingNumber& setting)
   : CTraitedSetting(id, setting, "CSettingNumber")
 {
   copy(setting);
 }
 
-CSettingNumber::CSettingNumber(const std::string &id, int label, float value, CSettingsManager *settingsManager /* = nullptr */)
-  : CTraitedSetting(id, settingsManager, "CSettingNumber")
-  , m_value(value)
-  , m_default(value)
+CSettingNumber::CSettingNumber(const std::string& id,
+                               int label,
+                               float value,
+                               CSettingsManager* settingsManager /* = nullptr */)
+  : CTraitedSetting(id, settingsManager, "CSettingNumber"), m_value(value), m_default(value)
 {
   SetLabel(label);
 }
 
-CSettingNumber::CSettingNumber(const std::string &id, int label, float value, float minimum, float step, float maximum, CSettingsManager *settingsManager /* = nullptr */)
-  : CTraitedSetting(id, settingsManager, "CSettingNumber")
-  , m_value(value)
-  , m_default(value)
-  , m_min(minimum)
-  , m_step(step)
-  , m_max(maximum)
+CSettingNumber::CSettingNumber(const std::string& id,
+                               int label,
+                               float value,
+                               float minimum,
+                               float step,
+                               float maximum,
+                               CSettingsManager* settingsManager /* = nullptr */)
+  : CTraitedSetting(id, settingsManager, "CSettingNumber"),
+    m_value(value),
+    m_default(value),
+    m_min(minimum),
+    m_step(step),
+    m_max(maximum)
 {
   SetLabel(label);
 }
@@ -1261,20 +1288,22 @@ bool CSettingNumber::fromString(const std::string &strValue, double &value)
   return true;
 }
 
-CSettingString::CSettingString(const std::string &id, CSettingsManager *settingsManager /* = nullptr */)
+CSettingString::CSettingString(const std::string& id,
+                               CSettingsManager* settingsManager /* = nullptr */)
   : CTraitedSetting(id, settingsManager, "CSettingString")
 { }
 
-CSettingString::CSettingString(const std::string &id, const CSettingString &setting)
+CSettingString::CSettingString(const std::string& id, const CSettingString& setting)
   : CTraitedSetting(id, setting, "CSettingString")
 {
   copy(setting);
 }
 
-CSettingString::CSettingString(const std::string &id, int label, const std::string &value, CSettingsManager *settingsManager /* = nullptr */)
-  : CTraitedSetting(id, settingsManager, "CSettingString")
-  , m_value(value)
-  , m_default(value)
+CSettingString::CSettingString(const std::string& id,
+                               int label,
+                               const std::string& value,
+                               CSettingsManager* settingsManager /* = nullptr */)
+  : CTraitedSetting(id, settingsManager, "CSettingString"), m_value(value), m_default(value)
 {
   SetLabel(label);
 }
@@ -1310,7 +1339,8 @@ bool CSettingString::Deserialize(const TiXmlNode *node, bool update /* = false *
     if (options != nullptr && options->FirstChild() != nullptr)
     {
       if (!DeserializeOptionsSort(options, m_optionsSort))
-        s_logger->warn("invalid \"sort\" attribute of <" SETTING_XML_ELM_OPTIONS "> for \"{}\"", m_id);
+        s_logger->warn("invalid \"sort\" attribute of <" SETTING_XML_ELM_OPTIONS "> for \"{}\"",
+                       m_id);
 
       if (options->FirstChild()->Type() == TiXmlNode::TINYXML_TEXT)
       {
@@ -1498,19 +1528,21 @@ void CSettingString::copy(const CSettingString &setting)
   m_dynamicOptions = setting.m_dynamicOptions;
 }
 
-CSettingAction::CSettingAction(const std::string &id, CSettingsManager *settingsManager /* = nullptr */)
+CSettingAction::CSettingAction(const std::string& id,
+                               CSettingsManager* settingsManager /* = nullptr */)
   : CSetting(id, settingsManager, "CSettingAction")
 { }
 
-CSettingAction::CSettingAction(const std::string &id, int label, CSettingsManager *settingsManager /* = nullptr */)
+CSettingAction::CSettingAction(const std::string& id,
+                               int label,
+                               CSettingsManager* settingsManager /* = nullptr */)
   : CSetting(id, settingsManager, "CSettingAction")
 {
   SetLabel(label);
 }
 
-CSettingAction::CSettingAction(const std::string &id, const CSettingAction &setting)
-  : CSetting(id, setting, "CSettingAction")
-  , m_data(setting.m_data)
+CSettingAction::CSettingAction(const std::string& id, const CSettingAction& setting)
+  : CSetting(id, setting, "CSettingAction"), m_data(setting.m_data)
 { }
 
 SettingPtr CSettingAction::Clone(const std::string &id) const
diff --git a/xbmc/settings/lib/Setting.h b/xbmc/settings/lib/Setting.h
index 0a03b163d839..b5f6c6fd88f8 100644
--- a/xbmc/settings/lib/Setting.h
+++ b/xbmc/settings/lib/Setting.h
@@ -47,8 +47,10 @@ class CSetting : public ISetting,
                  protected CStaticLoggerBase
 {
 public:
-  CSetting(const std::string &id, CSettingsManager *settingsManager = nullptr, const std::string& name = "CSetting");
-  CSetting(const std::string &id, const CSetting &setting, const std::string& name = "CSetting");
+  CSetting(const std::string& id,
+           CSettingsManager* settingsManager = nullptr,
+           const std::string& name = "CSetting");
+  CSetting(const std::string& id, const CSetting& setting, const std::string& name = "CSetting");
   ~CSetting() override = default;
 
   virtual std::shared_ptr<CSetting> Clone(const std::string &id) const = 0;
@@ -133,10 +135,14 @@ class CTraitedSetting : public CSetting
   static SettingType Type() { return TSettingType; }
 
 protected:
-  CTraitedSetting(const std::string &id, CSettingsManager *settingsManager = nullptr, const std::string& name = "CTraitedSetting")
+  CTraitedSetting(const std::string& id,
+                  CSettingsManager* settingsManager = nullptr,
+                  const std::string& name = "CTraitedSetting")
     : CSetting(id, settingsManager, name)
   { }
-  CTraitedSetting(const std::string &id, const CTraitedSetting &setting, const std::string& name = "CTraitedSetting")
+  CTraitedSetting(const std::string& id,
+                  const CTraitedSetting& setting,
+                  const std::string& name = "CTraitedSetting")
     : CSetting(id, setting, name)
   { }
   ~CTraitedSetting() override = default;
diff --git a/xbmc/settings/lib/SettingDependency.cpp b/xbmc/settings/lib/SettingDependency.cpp
index fb720ce8b67f..2458cc6095fc 100644
--- a/xbmc/settings/lib/SettingDependency.cpp
+++ b/xbmc/settings/lib/SettingDependency.cpp
@@ -8,10 +8,10 @@
 
 #include "SettingDependency.h"
 
+#include "ServiceBroker.h"
 #include "Setting.h"
 #include "SettingDefinitions.h"
 #include "SettingsManager.h"
-#include "ServiceBroker.h"
 #include "utils/StringUtils.h"
 #include "utils/XBMCTinyXML.h"
 #include "utils/log.h"
@@ -21,30 +21,36 @@
 #include <stdlib.h>
 #include <string>
 
-CSettingDependencyCondition::CSettingDependencyCondition(CSettingsManager *settingsManager /* = nullptr */)
-  : CSettingConditionItem(settingsManager)
-  , CStaticLoggerBase("CSettingDependencyCondition")
+CSettingDependencyCondition::CSettingDependencyCondition(
+    CSettingsManager* settingsManager /* = nullptr */)
+  : CSettingConditionItem(settingsManager), CStaticLoggerBase("CSettingDependencyCondition")
 { }
 
-CSettingDependencyCondition::CSettingDependencyCondition(const std::string &setting, const std::string &value,
-                            SettingDependencyOperator op, bool negated /* = false */,
-                            CSettingsManager *settingsManager /* = nullptr */)
-  : CSettingConditionItem(settingsManager)
-  , CStaticLoggerBase("CSettingDependencyCondition")
-  , m_target(SettingDependencyTarget::Setting)
-  , m_operator(op)
+CSettingDependencyCondition::CSettingDependencyCondition(
+    const std::string& setting,
+    const std::string& value,
+    SettingDependencyOperator op,
+    bool negated /* = false */,
+    CSettingsManager* settingsManager /* = nullptr */)
+  : CSettingConditionItem(settingsManager),
+    CStaticLoggerBase("CSettingDependencyCondition"),
+    m_target(SettingDependencyTarget::Setting),
+    m_operator(op)
 {
   m_setting = m_name = setting;
   m_value = value;
   m_negated = negated;
 }
 
-CSettingDependencyCondition::CSettingDependencyCondition(const std::string &strProperty, const std::string &value,
-                            const std::string &setting /* = "" */, bool negated /* = false */,
-                            CSettingsManager *settingsManager /* = nullptr */)
-  : CSettingConditionItem(settingsManager)
-  , CStaticLoggerBase("CSettingDependencyCondition")
-  , m_target(SettingDependencyTarget::Property)
+CSettingDependencyCondition::CSettingDependencyCondition(
+    const std::string& strProperty,
+    const std::string& value,
+    const std::string& setting /* = "" */,
+    bool negated /* = false */,
+    CSettingsManager* settingsManager /* = nullptr */)
+  : CSettingConditionItem(settingsManager),
+    CStaticLoggerBase("CSettingDependencyCondition"),
+    m_target(SettingDependencyTarget::Property)
 {
   m_name = strProperty;
   m_value = value;
@@ -313,17 +319,15 @@ CSettingDependencyConditionCombination* CSettingDependencyConditionCombination::
   return this;
 }
 
-CSettingDependency::CSettingDependency(CSettingsManager *settingsManager /* = nullptr */)
-  : CSettingCondition(settingsManager)
-  , CStaticLoggerBase("CSettingDependency")
+CSettingDependency::CSettingDependency(CSettingsManager* settingsManager /* = nullptr */)
+  : CSettingCondition(settingsManager), CStaticLoggerBase("CSettingDependency")
 {
   m_operation = CBooleanLogicOperationPtr(new CSettingDependencyConditionCombination(m_settingsManager));
 }
 
-CSettingDependency::CSettingDependency(SettingDependencyType type, CSettingsManager *settingsManager /* = nullptr */)
-  : CSettingCondition(settingsManager)
-  , CStaticLoggerBase("CSettingDependency")
-  , m_type(type)
+CSettingDependency::CSettingDependency(SettingDependencyType type,
+                                       CSettingsManager* settingsManager /* = nullptr */)
+  : CSettingCondition(settingsManager), CStaticLoggerBase("CSettingDependency"), m_type(type)
 {
   m_operation = CBooleanLogicOperationPtr(new CSettingDependencyConditionCombination(m_settingsManager));
 }
diff --git a/xbmc/settings/lib/SettingSection.cpp b/xbmc/settings/lib/SettingSection.cpp
index 56f92487cb1e..db3de8906c07 100644
--- a/xbmc/settings/lib/SettingSection.cpp
+++ b/xbmc/settings/lib/SettingSection.cpp
@@ -8,9 +8,9 @@
 
 #include "SettingSection.h"
 
+#include "ServiceBroker.h"
 #include "SettingDefinitions.h"
 #include "SettingsManager.h"
-#include "ServiceBroker.h"
 #include "utils/StringUtils.h"
 #include "utils/XBMCTinyXML.h"
 #include "utils/log.h"
@@ -53,9 +53,9 @@ template<class T> void addISetting(const TiXmlNode *node, const T &item, std::ve
   items.push_back(item);
 }
 
-CSettingGroup::CSettingGroup(const std::string &id, CSettingsManager *settingsManager /* = nullptr */)
-  : ISetting(id, settingsManager)
-  , CStaticLoggerBase("CSettingGroup")
+CSettingGroup::CSettingGroup(const std::string& id,
+                             CSettingsManager* settingsManager /* = nullptr */)
+  : ISetting(id, settingsManager), CStaticLoggerBase("CSettingGroup")
 { }
 
 bool CSettingGroup::Deserialize(const TiXmlNode *node, bool update /* = false */)
@@ -174,10 +174,11 @@ bool CSettingGroup::ReplaceSetting(std::shared_ptr<const CSetting> currentSettin
   return false;
 }
 
-CSettingCategory::CSettingCategory(const std::string &id, CSettingsManager *settingsManager /* = nullptr */)
-  : ISetting(id, settingsManager)
-  , CStaticLoggerBase("CSettingCategory")
-  , m_accessCondition(settingsManager)
+CSettingCategory::CSettingCategory(const std::string& id,
+                                   CSettingsManager* settingsManager /* = nullptr */)
+  : ISetting(id, settingsManager),
+    CStaticLoggerBase("CSettingCategory"),
+    m_accessCondition(settingsManager)
 { }
 
 bool CSettingCategory::Deserialize(const TiXmlNode *node, bool update /* = false */)
@@ -253,9 +254,9 @@ void CSettingCategory::AddGroups(const SettingGroupList &groups)
     addISetting(nullptr, group, m_groups);
 }
 
-CSettingSection::CSettingSection(const std::string &id, CSettingsManager *settingsManager /* = nullptr */)
-  : ISetting(id, settingsManager)
-  , CStaticLoggerBase("CSettingSection")
+CSettingSection::CSettingSection(const std::string& id,
+                                 CSettingsManager* settingsManager /* = nullptr */)
+  : ISetting(id, settingsManager), CStaticLoggerBase("CSettingSection")
 { }
 
 bool CSettingSection::Deserialize(const TiXmlNode *node, bool update /* = false */)
diff --git a/xbmc/settings/lib/SettingUpdate.cpp b/xbmc/settings/lib/SettingUpdate.cpp
index 092b9c4f236e..2299405b575a 100644
--- a/xbmc/settings/lib/SettingUpdate.cpp
+++ b/xbmc/settings/lib/SettingUpdate.cpp
@@ -8,15 +8,15 @@
 
 #include "SettingUpdate.h"
 
-#include "SettingDefinitions.h"
 #include "ServiceBroker.h"
+#include "SettingDefinitions.h"
 #include "utils/StringUtils.h"
 #include "utils/XBMCTinyXML.h"
 #include "utils/log.h"
 
-CSettingUpdate::CSettingUpdate()
-  : CStaticLoggerBase("CSettingUpdate")
-{}
+CSettingUpdate::CSettingUpdate() : CStaticLoggerBase("CSettingUpdate")
+{
+}
 
 bool CSettingUpdate::Deserialize(const TiXmlNode *node)
 {
diff --git a/xbmc/settings/lib/SettingsManager.cpp b/xbmc/settings/lib/SettingsManager.cpp
index ee11cbb198c2..00645d61f06c 100644
--- a/xbmc/settings/lib/SettingsManager.cpp
+++ b/xbmc/settings/lib/SettingsManager.cpp
@@ -8,10 +8,10 @@
 
 #include "SettingsManager.h"
 
+#include "ServiceBroker.h"
 #include "Setting.h"
 #include "SettingDefinitions.h"
 #include "SettingSection.h"
-#include "ServiceBroker.h"
 #include "utils/StringUtils.h"
 #include "utils/XBMCTinyXML.h"
 #include "utils/log.h"
@@ -51,9 +51,9 @@ bool ParseSettingIdentifier(const std::string& settingId, std::string& categoryT
   return true;
 }
 
-CSettingsManager::CSettingsManager()
-  : CStaticLoggerBase("CSettingsManager")
-{}
+CSettingsManager::CSettingsManager() : CStaticLoggerBase("CSettingsManager")
+{
+}
 
 CSettingsManager::~CSettingsManager()
 {
@@ -84,7 +84,8 @@ bool CSettingsManager::Initialize(const TiXmlElement *root)
 
   if (!StringUtils::EqualsNoCase(root->ValueStr(), SETTING_XML_ROOT))
   {
-    s_logger->error("error reading settings definition: doesn't contain <" SETTING_XML_ROOT "> tag");
+    s_logger->error("error reading settings definition: doesn't contain <" SETTING_XML_ROOT
+                    "> tag");
     return false;
   }
 
@@ -95,12 +96,14 @@ bool CSettingsManager::Initialize(const TiXmlElement *root)
 
   if (MinimumSupportedVersion >= version+1)
   {
-    s_logger->error("unable to read setting definitions from version {} (minimum version: {})", version, MinimumSupportedVersion);
+    s_logger->error("unable to read setting definitions from version {} (minimum version: {})",
+                    version, MinimumSupportedVersion);
     return false;
   }
   if (version > Version)
   {
-    s_logger->error("unable to read setting definitions from version {} (current version: {})", version, Version);
+    s_logger->error("unable to read setting definitions from version {} (current version: {})",
+                    version, Version);
     return false;
   }
 
@@ -149,12 +152,14 @@ bool CSettingsManager::Load(const TiXmlElement *root, bool &updated, bool trigge
 
   if (MinimumSupportedVersion >= version+1)
   {
-    s_logger->error("unable to read setting values from version {} (minimum version: {})", version, MinimumSupportedVersion);
+    s_logger->error("unable to read setting values from version {} (minimum version: {})", version,
+                    MinimumSupportedVersion);
     return false;
   }
   if (version > Version)
   {
-    s_logger->error("unable to read setting values from version {} (current version: {})", version, Version);
+    s_logger->error("unable to read setting values from version {} (current version: {})", version,
+                    Version);
     return false;
   }
 
@@ -759,7 +764,8 @@ bool CSettingsManager::Serialize(TiXmlNode *parent) const
 
     if (parent->InsertEndChild(settingElement) == nullptr)
     {
-      s_logger->warn("unable to write <" SETTING_XML_ELM_SETTING " id=\"{}\"> tag", setting.second.setting->GetId());
+      s_logger->warn("unable to write <" SETTING_XML_ELM_SETTING " id=\"{}\"> tag",
+                     setting.second.setting->GetId());
       continue;
     }
   }
@@ -1142,7 +1148,8 @@ bool CSettingsManager::UpdateSetting(const TiXmlNode *node, SettingPtr setting,
     if (setting->FromString(oldSettingNode->FirstChild() != nullptr ? oldSettingNode->FirstChild()->ValueStr() : StringUtils::Empty))
       updated = true;
     else
-      s_logger->warn("unable to update \"{}\" through automatically renaming from \"{}\"", setting->GetId(), oldSetting);
+      s_logger->warn("unable to update \"{}\" through automatically renaming from \"{}\"",
+                     setting->GetId(), oldSetting);
   }
 
   updated |= OnSettingUpdate(setting, oldSetting, oldSettingNode);
diff --git a/xbmc/settings/lib/SettingsManager.h b/xbmc/settings/lib/SettingsManager.h
index 0a2ab51b82fd..fc0e7b5f474d 100644
--- a/xbmc/settings/lib/SettingsManager.h
+++ b/xbmc/settings/lib/SettingsManager.h
@@ -38,9 +38,11 @@ class TiXmlNode;
  \brief Settings manager responsible for initializing, loading and handling
  all settings.
  */
-class CSettingsManager : public ISettingCreator, public ISettingControlCreator,
+class CSettingsManager : public ISettingCreator,
+                         public ISettingControlCreator,
                          protected CStaticLoggerBase,
-                         private ISettingCallback, private ISettingsHandler
+                         private ISettingCallback,
+                         private ISettingsHandler
 {
 public:
   /*!

From 965c66b8b755466a4ff5ab832f70cdf96529f73b Mon Sep 17 00:00:00 2001
From: montellese <montellese@kodi.tv>
Date: Mon, 23 Mar 2020 21:49:00 +0100
Subject: [PATCH 15/21] [addons] CAddonSettings: make use of new logging
 functionality

---
 xbmc/addons/settings/AddonSettings.cpp | 96 +++++++++++++-------------
 xbmc/addons/settings/AddonSettings.h   |  3 +
 2 files changed, 50 insertions(+), 49 deletions(-)

diff --git a/xbmc/addons/settings/AddonSettings.cpp b/xbmc/addons/settings/AddonSettings.cpp
index 708e1bfbc27c..fdf597b26187 100644
--- a/xbmc/addons/settings/AddonSettings.cpp
+++ b/xbmc/addons/settings/AddonSettings.cpp
@@ -72,7 +72,7 @@ SettingPtr InitializeFromOldSettingWithoutDefinition<CSettingString>(ADDON::CAdd
 }
 
 template<class TSetting>
-SettingPtr AddSettingWithoutDefinition(ADDON::CAddonSettings& settings, const std::string& settingId, typename TSetting::Value defaultValue)
+SettingPtr AddSettingWithoutDefinition(ADDON::CAddonSettings& settings, const std::string& settingId, typename TSetting::Value defaultValue, Logger logger)
 {
   if (settingId.empty())
     return nullptr;
@@ -80,7 +80,7 @@ SettingPtr AddSettingWithoutDefinition(ADDON::CAddonSettings& settings, const st
   // if necessary try to initialize the settings manager on-the-fly without any definitions
   if (!settings.IsInitialized() && !settings.Initialize(CXBMCTinyXML(), true))
   {
-    CLog::Log(LOGWARNING, "CAddonSettings[%s]: failed to initialize settings on-the-fly", settings.GetAddon()->ID().c_str());
+    logger->warn("failed to initialize settings on-the-fly");
     return nullptr;
   }
 
@@ -112,14 +112,14 @@ SettingPtr AddSettingWithoutDefinition(ADDON::CAddonSettings& settings, const st
   auto setting = InitializeFromOldSettingWithoutDefinition<TSetting>(settings, settingId, defaultValue);
   if (setting == nullptr)
   {
-    CLog::Log(LOGWARNING, "CAddonSettings[%s]: failed to create setting \"%s\" on-the-fly", settings.GetAddon()->ID().c_str(), settingId.c_str());
+    logger->warn("failed to create setting \"{}\" on-the-fly", settingId);
     return nullptr;
   }
 
   // add the setting (and if necessary the section, category and/or group)
   if (!settings.GetSettingsManager()->AddSetting(setting, section, category, group))
   {
-    CLog::Log(LOGWARNING, "CAddonSettings[%s]: failed to add setting \"%s\" on-the-fly", settings.GetAddon()->ID().c_str(), settingId.c_str());
+    logger->warn("failed to add setting \"{}\" on-the-fly", settingId);
     return nullptr;
   }
 
@@ -136,6 +136,7 @@ CAddonSettings::CAddonSettings(std::shared_ptr<const IAddon> addon)
   , m_addonProfile(addon->Profile())
   , m_unidentifiedSettingId(0)
   , m_unknownSettingLabelId(UnknownSettingLabelIdStart)
+  , m_logger(CServiceBroker::GetLogging().GetLogger(StringUtils::Format("CAddonSettings[{}]", m_addonId)))
 { }
 
 std::shared_ptr<CSetting> CAddonSettings::CreateSetting(const std::string &settingType, const std::string &settingId, CSettingsManager *settingsManager /* = NULL */) const
@@ -212,15 +213,13 @@ bool CAddonSettings::Load(const CXBMCTinyXML& doc)
   if (!m_initialized)
     return false;
 
-  CLog::Log(LOGDEBUG, "CAddonSettings[%s]: loading setting values",
-    m_addonId.c_str());
+  m_logger->debug("loading setting values");
 
   // figure out the version of the setting definitions
   uint32_t version = 0;
   if (!ParseSettingVersion(doc, version))
   {
-    CLog::Log(LOGERROR, "CAddonSettings[%s]: failed to determine setting values version",
-      m_addonId.c_str());
+    m_logger->error("failed to determine setting values version");
     return false;
   }
 
@@ -278,8 +277,7 @@ bool CAddonSettings::Load(const CXBMCTinyXML& doc)
   // for old setting values do it manually
   else if (!LoadOldSettingValues(doc, settingValues))
   {
-    CLog::Log(LOGERROR, "CAddonSettings[%s]: failed to determine setting values from old format",
-      m_addonId.c_str());
+    m_logger->error("failed to determine setting values from old format");
     return false;
   }
 
@@ -294,23 +292,23 @@ bool CAddonSettings::Load(const CXBMCTinyXML& doc)
     SettingPtr newSetting = GetSetting(setting.first);
     if (newSetting == nullptr)
     {
-      CLog::Log(LOGDEBUG, "CAddonSettings[%s]: failed to find definition for setting %s. Creating a setting on-the-fly...",
-        m_addonId.c_str(), setting.first.c_str());
+      m_logger->debug("failed to find definition for setting {}. Creating a setting on-the-fly...",
+        setting.first);
 
       // create a hidden/internal string setting on-the-fly
-      newSetting = AddSettingWithoutDefinition<CSettingString>(*this, setting.first, setting.second);
+      newSetting = AddSettingWithoutDefinition<CSettingString>(*this, setting.first, setting.second, m_logger);
     }
 
     // try to load the old setting value
     if (!newSetting)
     {
-      CLog::Log(LOGERROR, "CAddonSettings[%s]: had null newSetting for value \"%s\" for setting %s",
-        m_addonId.c_str(), setting.second.c_str(), setting.first.c_str());
+      m_logger->error("had null newSetting for value \"{}\" for setting {}",
+        setting.second, setting.first);
     }
     else if (!newSetting->FromString(setting.second))
     {
-      CLog::Log(LOGWARNING, "CAddonSettings[%s]: failed to load value \"%s\" for setting %s",
-        m_addonId.c_str(), setting.second.c_str(), setting.first.c_str());
+      m_logger->warn("failed to load value \"{}\" for setting {}",
+        setting.second, setting.first);
     }
   }
 
@@ -327,7 +325,7 @@ bool CAddonSettings::Save(CXBMCTinyXML& doc) const
 
   if (!SaveValuesToXml(doc))
   {
-    CLog::Log(LOGERROR, "CAddonSettings[%s]: failed to save settings", m_addonId.c_str());
+    m_logger->error("failed to save settings");
     return false;
   }
 
@@ -353,22 +351,22 @@ std::string CAddonSettings::GetSettingLabel(int label) const
 
 std::shared_ptr<CSetting> CAddonSettings::AddSetting(const std::string& settingId, bool value)
 {
-  return AddSettingWithoutDefinition<CSettingBool>(*this, settingId, value);
+  return AddSettingWithoutDefinition<CSettingBool>(*this, settingId, value, m_logger);
 }
 
 std::shared_ptr<CSetting> CAddonSettings::AddSetting(const std::string& settingId, int value)
 {
-  return AddSettingWithoutDefinition<CSettingInt>(*this, settingId, value);
+  return AddSettingWithoutDefinition<CSettingInt>(*this, settingId, value, m_logger);
 }
 
 std::shared_ptr<CSetting> CAddonSettings::AddSetting(const std::string& settingId, double value)
 {
-  return AddSettingWithoutDefinition<CSettingNumber>(*this, settingId, value);
+  return AddSettingWithoutDefinition<CSettingNumber>(*this, settingId, value, m_logger);
 }
 
 std::shared_ptr<CSetting> CAddonSettings::AddSetting(const std::string& settingId, const std::string& value)
 {
-  return AddSettingWithoutDefinition<CSettingString>(*this, settingId, value);
+  return AddSettingWithoutDefinition<CSettingString>(*this, settingId, value, m_logger);
 }
 
 void CAddonSettings::InitializeSettingTypes()
@@ -406,13 +404,13 @@ void CAddonSettings::InitializeConditions()
 
 bool CAddonSettings::InitializeDefinitions(const CXBMCTinyXML& doc)
 {
-  CLog::Log(LOGDEBUG, "CAddonSettings[%s]: loading setting definitions", m_addonId.c_str());
+  m_logger->debug("loading setting definitions");
 
   // figure out the version of the setting definitions
   uint32_t version = 0;
   if (!ParseSettingVersion(doc, version))
   {
-    CLog::Log(LOGERROR, "CAddonSettings[%s]: failed to determine setting definitions version", m_addonId.c_str());
+    m_logger->error("failed to determine setting definitions version");
     return false;
   }
 
@@ -432,7 +430,7 @@ bool CAddonSettings::ParseSettingVersion(const CXBMCTinyXML& doc, uint32_t& vers
 
   if (!StringUtils::EqualsNoCase(root->ValueStr(), SETTING_XML_ROOT))
   {
-    CLog::Log(LOGERROR, "CAddonSettings[%s]: error reading setting definitions: no <settings> tag", m_addonId.c_str());
+    m_logger->error("error reading setting definitions: no <settings> tag");
     return false;
   }
 
@@ -480,7 +478,7 @@ std::shared_ptr<CSettingGroup> CAddonSettings::ParseOldSettingElement(const TiXm
           category->AddGroup(group);
 
           // and create a new one
-          group.reset(new CSettingGroup(StringUtils::Format("%u", groupId), GetSettingsManager()));
+          group.reset(new CSettingGroup(StringUtils::Format("{}", groupId), GetSettingsManager()));
           groupId += 1;
         }
 
@@ -528,8 +526,8 @@ std::shared_ptr<CSettingGroup> CAddonSettings::ParseOldSettingElement(const TiXm
       }
       else
       {
-        CLog::Log(LOGWARNING, "CAddonSettings[%s]: failed to parse old setting definition for \"%s\" of type \"%s\"",
-          m_addonId.c_str(), settingId.c_str(), settingType.c_str());
+        m_logger->warn("failed to parse old setting definition for \"{}\" of type \"{}\"",
+          settingId, settingType);
       }
 
       // process general properties
@@ -632,8 +630,8 @@ std::shared_ptr<CSettingGroup> CAddonSettings::ParseOldSettingElement(const TiXm
           setting.deps.push_back(dependencyEnable);
         else
         {
-          CLog::Log(LOGWARNING, "CAddonSettings[%s]: failed to parse enable condition \"%s\" of old setting definition for \"%s\"",
-            m_addonId.c_str(), setting.enableCondition.c_str(), setting.setting->GetId().c_str());
+          m_logger->warn("failed to parse enable condition \"{}\" of old setting definition for \"{}\"",
+            setting.enableCondition, setting.setting->GetId());
         }
       }
 
@@ -644,8 +642,8 @@ std::shared_ptr<CSettingGroup> CAddonSettings::ParseOldSettingElement(const TiXm
           setting.deps.push_back(dependencyVisible);
         else
         {
-          CLog::Log(LOGWARNING, "CAddonSettings[%s]: failed to parse visible condition \"%s\" of old setting definition for \"%s\"",
-            m_addonId.c_str(), setting.visibleCondition.c_str(), setting.setting->GetId().c_str());
+          m_logger->warn("failed to parse visible condition \"{}\" of old setting definition for \"{}\"",
+            setting.visibleCondition, setting.setting->GetId());
         }
       }
 
@@ -659,7 +657,7 @@ std::shared_ptr<CSettingGroup> CAddonSettings::ParseOldSettingElement(const TiXm
 std::shared_ptr<CSettingCategory> CAddonSettings::ParseOldCategoryElement(uint32_t &categoryId, const TiXmlElement * categoryElement, std::set<std::string> &settingIds)
 {
   // create the category
-  auto category = std::make_shared<CSettingCategory>(StringUtils::Format("category%u", categoryId), GetSettingsManager());
+  auto category = std::make_shared<CSettingCategory>(StringUtils::Format("category{}", categoryId), GetSettingsManager());
   categoryId += 1;
 
   // try to get the category's label and fall back to "General"
@@ -678,7 +676,7 @@ std::shared_ptr<CSettingCategory> CAddonSettings::ParseOldCategoryElement(uint32
 
 bool CAddonSettings::InitializeFromOldSettingDefinitions(const CXBMCTinyXML& doc)
 {
-  CLog::Log(LOGDEBUG, "CAddonSettings[%s]: trying to load setting definitions from old format...", m_addonId.c_str());
+  m_logger->debug("trying to load setting definitions from old format...");
 
   const TiXmlElement* root = doc.RootElement();
   if (root == nullptr)
@@ -727,7 +725,7 @@ SettingPtr CAddonSettings::InitializeFromOldSettingAction(std::string settingId,
   // action settings don't require a setting id
   if (settingId.empty())
   {
-    auto actionSettingId = StringUtils::Format("action%u", m_unidentifiedSettingId);
+    auto actionSettingId = StringUtils::Format("action{}", m_unidentifiedSettingId);
     m_unidentifiedSettingId += 1;
 
     auto settingAction = std::make_shared<CSettingAction>(actionSettingId, GetSettingsManager());
@@ -761,7 +759,7 @@ SettingPtr CAddonSettings::InitializeFromOldSettingAction(std::string settingId,
 std::shared_ptr<CSetting> CAddonSettings::InitializeFromOldSettingLabel()
 {
   // label settings don't require a setting id
-  auto labelSettingId = StringUtils::Format("label%u", m_unidentifiedSettingId);
+  auto labelSettingId = StringUtils::Format("label{}", m_unidentifiedSettingId);
   m_unidentifiedSettingId += 1;
 
   auto settingLabel = std::make_shared<CSettingString>(labelSettingId, GetSettingsManager());
@@ -973,8 +971,8 @@ SettingPtr CAddonSettings::InitializeFromOldSettingSelect(const std::string& set
     if (!source.empty())
       setting = InitializeFromOldSettingFileWithSource(settingId, settingElement, defaultValue, settingValues);
     else
-      CLog::Log(LOGWARNING, "CAddonSettings[%s]: failed to parse old setting definition for \"%s\" of type \"select\"",
-        m_addonId.c_str(), settingId.c_str());
+      m_logger->warn("failed to parse old setting definition for \"{}\" of type \"select\"",
+        settingId);
   }
 
   if (setting != nullptr)
@@ -1003,14 +1001,14 @@ SettingPtr CAddonSettings::InitializeFromOldSettingAddon(const std::string& sett
 
   if (addonTypes.empty())
   {
-    CLog::Log(LOGERROR, "CAddonSettings[%s]: missing addon type for addon setting \"%s\"", m_addonId.c_str(), settingId.c_str());
+    m_logger->error("missing addon type for addon setting \"{}\"", settingId);
     return nullptr;
   }
 
   // TODO: support multiple addon types
   if (addonTypes.size() > 1)
   {
-    CLog::Log(LOGERROR, "CAddonSettings[%s]: multiple addon types are not supported (addon setting \"%s\")", m_addonId.c_str(), settingId.c_str());
+    m_logger->error("multiple addon types are not supported (addon setting \"{}\")", settingId);
     return nullptr;
   }
 
@@ -1024,7 +1022,7 @@ SettingPtr CAddonSettings::InitializeFromOldSettingAddon(const std::string& sett
   // sanity check
   if (addonIds.size() > 1 && !multiselect)
   {
-    CLog::Log(LOGWARNING, "CAddonSettings[%s]: multiple default addon ids on non-multiselect addon setting \"%s\"", m_addonId.c_str(), settingId.c_str());
+    m_logger->warn("multiple default addon ids on non-multiselect addon setting \"{}\"", settingId);
     addonIds.erase(++addonIds.begin(), addonIds.end());
   }
 
@@ -1269,8 +1267,8 @@ SettingPtr CAddonSettings::InitializeFromOldSettingSlider(const std::string& set
     return setting;
   }
 
-  CLog::Log(LOGWARNING, "CAddonSettings[%s]: ignoring old setting definition for \"%s\" of type \"slider\" because of unknown option \"%s\"",
-    m_addonId.c_str(), settingId.c_str(), option.c_str());
+  m_logger->warn("ignoring old setting definition for \"{}\" of type \"slider\" because of unknown option \"{}\"",
+    settingId, option);
 
   return nullptr;
 }
@@ -1374,8 +1372,8 @@ bool CAddonSettings::ParseOldCondition(std::shared_ptr<const CSetting> setting,
     return setting->GetId() == otherSetting->GetId();
   });
   if (settingIt == settings.cend()) {
-    CLog::Log(LOGWARNING, "CAddonSettings[%s]: failed to parse old setting conditions \"%s\" for \"%s\"",
-      m_addonId.c_str(), condition.c_str(), setting->GetId().c_str());
+    m_logger->warn("failed to parse old setting conditions \"{}\" for \"{}\"",
+      condition, setting->GetId());
     return false;
   }
   int32_t currentSettingIndex = std::distance(settings.cbegin(), settingIt);
@@ -1406,8 +1404,8 @@ bool CAddonSettings::ParseOldCondition(std::shared_ptr<const CSetting> setting,
     // we cannot handle relative indices pointing to settings not belonging to the same category
     if (absoluteSettingIndex < 0 || static_cast<size_t>(absoluteSettingIndex) >= settings.size())
     {
-      CLog::Log(LOGWARNING, "CAddonSettings[%s]: cannot reference setting (relative index: %d; absolute index: %d) in another category in old setting condition \"%s\" for \"%s\"",
-        m_addonId.c_str(), expression.m_relativeSettingIndex, absoluteSettingIndex, cond.c_str(), setting->GetId().c_str());
+      m_logger->warn("cannot reference setting (relative index: {}; absolute index: {}) in another category in old setting condition \"{}\" for \"{}\"",
+        expression.m_relativeSettingIndex, absoluteSettingIndex, cond, setting->GetId());
       error = true;
       continue;
     }
@@ -1415,8 +1413,8 @@ bool CAddonSettings::ParseOldCondition(std::shared_ptr<const CSetting> setting,
     SettingConstPtr referencedSetting = settings.at(absoluteSettingIndex);
     if (referencedSetting == nullptr)
     {
-      CLog::Log(LOGWARNING, "CAddonSettings[%s]: cannot reference separator setting in old setting condition \"%s\" for \"%s\"",
-        m_addonId.c_str(), cond.c_str(), setting->GetId().c_str());
+      m_logger->warn("cannot reference separator setting in old setting condition \"{}\" for \"{}\"",
+        cond, setting->GetId());
       error = true;
       continue;
     }
diff --git a/xbmc/addons/settings/AddonSettings.h b/xbmc/addons/settings/AddonSettings.h
index 753d1633f37f..9676afaede6a 100644
--- a/xbmc/addons/settings/AddonSettings.h
+++ b/xbmc/addons/settings/AddonSettings.h
@@ -15,6 +15,7 @@
 #include "settings/lib/ISettingCallback.h"
 #include "settings/lib/SettingDependency.h"
 #include "settings/lib/SettingSection.h"
+#include "utils/logtypes.h"
 
 #include <map>
 #include <memory>
@@ -121,5 +122,7 @@ namespace ADDON
     uint32_t m_unidentifiedSettingId;
     int m_unknownSettingLabelId;
     std::map<int, std::string> m_unknownSettingLabels;
+
+    Logger m_logger;
   };
 }

From fc2559f78529ad8390a520de5cb415a4ad2c37b4 Mon Sep 17 00:00:00 2001
From: montellese <montellese@kodi.tv>
Date: Mon, 13 Apr 2020 14:58:16 +0200
Subject: [PATCH 16/21] ~ follow coding style for 362f28668f

---
 xbmc/addons/settings/AddonSettings.cpp | 71 +++++++++++++++-----------
 1 file changed, 41 insertions(+), 30 deletions(-)

diff --git a/xbmc/addons/settings/AddonSettings.cpp b/xbmc/addons/settings/AddonSettings.cpp
index fdf597b26187..7e69f25cb105 100644
--- a/xbmc/addons/settings/AddonSettings.cpp
+++ b/xbmc/addons/settings/AddonSettings.cpp
@@ -72,7 +72,10 @@ SettingPtr InitializeFromOldSettingWithoutDefinition<CSettingString>(ADDON::CAdd
 }
 
 template<class TSetting>
-SettingPtr AddSettingWithoutDefinition(ADDON::CAddonSettings& settings, const std::string& settingId, typename TSetting::Value defaultValue, Logger logger)
+SettingPtr AddSettingWithoutDefinition(ADDON::CAddonSettings& settings,
+                                       const std::string& settingId,
+                                       typename TSetting::Value defaultValue,
+                                       Logger logger)
 {
   if (settingId.empty())
     return nullptr;
@@ -129,14 +132,15 @@ SettingPtr AddSettingWithoutDefinition(ADDON::CAddonSettings& settings, const st
 namespace ADDON
 {
 CAddonSettings::CAddonSettings(std::shared_ptr<const IAddon> addon)
-  : CSettingsBase()
-  , m_addon(addon)
-  , m_addonId(addon->ID())
-  , m_addonPath(addon->Path())
-  , m_addonProfile(addon->Profile())
-  , m_unidentifiedSettingId(0)
-  , m_unknownSettingLabelId(UnknownSettingLabelIdStart)
-  , m_logger(CServiceBroker::GetLogging().GetLogger(StringUtils::Format("CAddonSettings[{}]", m_addonId)))
+  : CSettingsBase(),
+    m_addon(addon),
+    m_addonId(addon->ID()),
+    m_addonPath(addon->Path()),
+    m_addonProfile(addon->Profile()),
+    m_unidentifiedSettingId(0),
+    m_unknownSettingLabelId(UnknownSettingLabelIdStart),
+    m_logger(CServiceBroker::GetLogging().GetLogger(
+        StringUtils::Format("CAddonSettings[{}]", m_addonId)))
 { }
 
 std::shared_ptr<CSetting> CAddonSettings::CreateSetting(const std::string &settingType, const std::string &settingId, CSettingsManager *settingsManager /* = NULL */) const
@@ -293,22 +297,22 @@ bool CAddonSettings::Load(const CXBMCTinyXML& doc)
     if (newSetting == nullptr)
     {
       m_logger->debug("failed to find definition for setting {}. Creating a setting on-the-fly...",
-        setting.first);
+                      setting.first);
 
       // create a hidden/internal string setting on-the-fly
-      newSetting = AddSettingWithoutDefinition<CSettingString>(*this, setting.first, setting.second, m_logger);
+      newSetting = AddSettingWithoutDefinition<CSettingString>(*this, setting.first, setting.second,
+                                                               m_logger);
     }
 
     // try to load the old setting value
     if (!newSetting)
     {
-      m_logger->error("had null newSetting for value \"{}\" for setting {}",
-        setting.second, setting.first);
+      m_logger->error("had null newSetting for value \"{}\" for setting {}", setting.second,
+                      setting.first);
     }
     else if (!newSetting->FromString(setting.second))
     {
-      m_logger->warn("failed to load value \"{}\" for setting {}",
-        setting.second, setting.first);
+      m_logger->warn("failed to load value \"{}\" for setting {}", setting.second, setting.first);
     }
   }
 
@@ -527,7 +531,7 @@ std::shared_ptr<CSettingGroup> CAddonSettings::ParseOldSettingElement(const TiXm
       else
       {
         m_logger->warn("failed to parse old setting definition for \"{}\" of type \"{}\"",
-          settingId, settingType);
+                       settingId, settingType);
       }
 
       // process general properties
@@ -630,8 +634,9 @@ std::shared_ptr<CSettingGroup> CAddonSettings::ParseOldSettingElement(const TiXm
           setting.deps.push_back(dependencyEnable);
         else
         {
-          m_logger->warn("failed to parse enable condition \"{}\" of old setting definition for \"{}\"",
-            setting.enableCondition, setting.setting->GetId());
+          m_logger->warn(
+              "failed to parse enable condition \"{}\" of old setting definition for \"{}\"",
+              setting.enableCondition, setting.setting->GetId());
         }
       }
 
@@ -642,8 +647,9 @@ std::shared_ptr<CSettingGroup> CAddonSettings::ParseOldSettingElement(const TiXm
           setting.deps.push_back(dependencyVisible);
         else
         {
-          m_logger->warn("failed to parse visible condition \"{}\" of old setting definition for \"{}\"",
-            setting.visibleCondition, setting.setting->GetId());
+          m_logger->warn(
+              "failed to parse visible condition \"{}\" of old setting definition for \"{}\"",
+              setting.visibleCondition, setting.setting->GetId());
         }
       }
 
@@ -657,7 +663,8 @@ std::shared_ptr<CSettingGroup> CAddonSettings::ParseOldSettingElement(const TiXm
 std::shared_ptr<CSettingCategory> CAddonSettings::ParseOldCategoryElement(uint32_t &categoryId, const TiXmlElement * categoryElement, std::set<std::string> &settingIds)
 {
   // create the category
-  auto category = std::make_shared<CSettingCategory>(StringUtils::Format("category{}", categoryId), GetSettingsManager());
+  auto category = std::make_shared<CSettingCategory>(StringUtils::Format("category{}", categoryId),
+                                                     GetSettingsManager());
   categoryId += 1;
 
   // try to get the category's label and fall back to "General"
@@ -972,7 +979,7 @@ SettingPtr CAddonSettings::InitializeFromOldSettingSelect(const std::string& set
       setting = InitializeFromOldSettingFileWithSource(settingId, settingElement, defaultValue, settingValues);
     else
       m_logger->warn("failed to parse old setting definition for \"{}\" of type \"select\"",
-        settingId);
+                     settingId);
   }
 
   if (setting != nullptr)
@@ -1267,8 +1274,9 @@ SettingPtr CAddonSettings::InitializeFromOldSettingSlider(const std::string& set
     return setting;
   }
 
-  m_logger->warn("ignoring old setting definition for \"{}\" of type \"slider\" because of unknown option \"{}\"",
-    settingId, option);
+  m_logger->warn("ignoring old setting definition for \"{}\" of type \"slider\" because of unknown "
+                 "option \"{}\"",
+                 settingId, option);
 
   return nullptr;
 }
@@ -1372,8 +1380,8 @@ bool CAddonSettings::ParseOldCondition(std::shared_ptr<const CSetting> setting,
     return setting->GetId() == otherSetting->GetId();
   });
   if (settingIt == settings.cend()) {
-    m_logger->warn("failed to parse old setting conditions \"{}\" for \"{}\"",
-      condition, setting->GetId());
+    m_logger->warn("failed to parse old setting conditions \"{}\" for \"{}\"", condition,
+                   setting->GetId());
     return false;
   }
   int32_t currentSettingIndex = std::distance(settings.cbegin(), settingIt);
@@ -1404,8 +1412,10 @@ bool CAddonSettings::ParseOldCondition(std::shared_ptr<const CSetting> setting,
     // we cannot handle relative indices pointing to settings not belonging to the same category
     if (absoluteSettingIndex < 0 || static_cast<size_t>(absoluteSettingIndex) >= settings.size())
     {
-      m_logger->warn("cannot reference setting (relative index: {}; absolute index: {}) in another category in old setting condition \"{}\" for \"{}\"",
-        expression.m_relativeSettingIndex, absoluteSettingIndex, cond, setting->GetId());
+      m_logger->warn("cannot reference setting (relative index: {}; absolute index: {}) in another "
+                     "category in old setting condition \"{}\" for \"{}\"",
+                     expression.m_relativeSettingIndex, absoluteSettingIndex, cond,
+                     setting->GetId());
       error = true;
       continue;
     }
@@ -1413,8 +1423,9 @@ bool CAddonSettings::ParseOldCondition(std::shared_ptr<const CSetting> setting,
     SettingConstPtr referencedSetting = settings.at(absoluteSettingIndex);
     if (referencedSetting == nullptr)
     {
-      m_logger->warn("cannot reference separator setting in old setting condition \"{}\" for \"{}\"",
-        cond, setting->GetId());
+      m_logger->warn(
+          "cannot reference separator setting in old setting condition \"{}\" for \"{}\"", cond,
+          setting->GetId());
       error = true;
       continue;
     }

From acc2de459dc12f0ac6a5cbaa334222b98a59e015 Mon Sep 17 00:00:00 2001
From: montellese <montellese@kodi.tv>
Date: Mon, 23 Mar 2020 22:19:07 +0100
Subject: [PATCH 17/21] [network] HTTP request handlers: make use of new
 logging functionality

---
 .../httprequesthandler/HTTPJsonRpcHandler.cpp |  3 +-
 .../httprequesthandler/HTTPPythonHandler.cpp  |  3 +-
 .../python/HTTPPythonWsgiInvoker.cpp          | 37 ++++++++++---------
 3 files changed, 24 insertions(+), 19 deletions(-)

diff --git a/xbmc/network/httprequesthandler/HTTPJsonRpcHandler.cpp b/xbmc/network/httprequesthandler/HTTPJsonRpcHandler.cpp
index 5ac94cc29286..661f3f0bac6b 100644
--- a/xbmc/network/httprequesthandler/HTTPJsonRpcHandler.cpp
+++ b/xbmc/network/httprequesthandler/HTTPJsonRpcHandler.cpp
@@ -8,6 +8,7 @@
 
 #include "HTTPJsonRpcHandler.h"
 
+#include "ServiceBroker.h"
 #include "URL.h"
 #include "filesystem/File.h"
 #include "interfaces/json-rpc/JSONRPC.h"
@@ -123,7 +124,7 @@ bool CHTTPJsonRpcHandler::appendPostData(const char *data, size_t size)
 {
   if (m_requestData.size() + size > MAX_HTTP_POST_SIZE)
   {
-    CLog::Log(LOGERROR, "WebServer: Stopped uploading POST data since it exceeded size limitations (%d)", MAX_HTTP_POST_SIZE);
+    CServiceBroker::GetLogging().GetLogger("CHTTPJsonRpcHandler")->error("Stopped uploading POST data since it exceeded size limitations ({})", MAX_HTTP_POST_SIZE);
     return false;
   }
 
diff --git a/xbmc/network/httprequesthandler/HTTPPythonHandler.cpp b/xbmc/network/httprequesthandler/HTTPPythonHandler.cpp
index 394e8ff7b0f9..0b700049f1f1 100644
--- a/xbmc/network/httprequesthandler/HTTPPythonHandler.cpp
+++ b/xbmc/network/httprequesthandler/HTTPPythonHandler.cpp
@@ -8,6 +8,7 @@
 
 #include "HTTPPythonHandler.h"
 
+#include "ServiceBroker.h"
 #include "URL.h"
 #include "addons/Webinterface.h"
 #include "filesystem/File.h"
@@ -233,7 +234,7 @@ bool CHTTPPythonHandler::appendPostData(const char *data, size_t size)
 {
   if (m_requestData.size() + size > MAX_STRING_POST_SIZE)
   {
-    CLog::Log(LOGERROR, "WebServer: Stopped uploading post since it exceeded size limitations");
+    CServiceBroker::GetLogging().GetLogger("CHTTPPythonHandler")->error("Stopped uploading post since it exceeded size limitations ({})", MAX_STRING_POST_SIZE);
     return false;
   }
 
diff --git a/xbmc/network/httprequesthandler/python/HTTPPythonWsgiInvoker.cpp b/xbmc/network/httprequesthandler/python/HTTPPythonWsgiInvoker.cpp
index 3badf118522b..fd241d73e91c 100644
--- a/xbmc/network/httprequesthandler/python/HTTPPythonWsgiInvoker.cpp
+++ b/xbmc/network/httprequesthandler/python/HTTPPythonWsgiInvoker.cpp
@@ -8,6 +8,7 @@
 
 #include "HTTPPythonWsgiInvoker.h"
 
+#include "ServiceBroker.h"
 #include "URL.h"
 #include "addons/Webinterface.h"
 #include "interfaces/legacy/wsgi/WsgiErrorStream.h"
@@ -119,10 +120,12 @@ void CHTTPPythonWsgiInvoker::executeScript(FILE* fp, const std::string& script,
       fp == NULL || script.empty() || moduleDict == NULL)
     return;
 
+  auto logger = CServiceBroker::GetLogging().GetLogger(StringUtils::Format("CHTTPPythonWsgiInvoker[{}]", script));
+
   ADDON::CWebinterface* webinterface = static_cast<ADDON::CWebinterface*>(m_addon.get());
   if (webinterface->GetType() != ADDON::WebinterfaceTypeWsgi)
   {
-    CLog::Log(LOGERROR, "CHTTPPythonWsgiInvoker: trying to execute a non-WSGI script at %s", script.c_str());
+    logger->error("trying to execute a non-WSGI script");
     return;
   }
 
@@ -143,34 +146,34 @@ void CHTTPPythonWsgiInvoker::executeScript(FILE* fp, const std::string& script,
   pyScript = PyUnicode_FromStringAndSize(scriptName.c_str(), scriptName.size());
   if (pyScript == NULL)
   {
-    CLog::Log(LOGERROR, "CHTTPPythonWsgiInvoker: failed to convert script \"%s\" to python string", script.c_str());
+    logger->error("failed to convert script to python string");
     return;
   }
 
   // load the script
-  CLog::Log(LOGDEBUG, "CHTTPPythonWsgiInvoker: loading WSGI script \"%s\"", script.c_str());
+  logger->debug("loading script");
   pyModule = PyImport_Import(pyScript);
   Py_DECREF(pyScript);
   if (pyModule == NULL)
   {
-    CLog::Log(LOGERROR, "CHTTPPythonWsgiInvoker: failed to load WSGI script \"%s\"", script.c_str());
+    logger->error("failed to load WSGI script");
     return;
   }
 
   // get the entry point
   const std::string& entryPoint = webinterface->EntryPoint();
-  CLog::Log(LOGDEBUG, "CHTTPPythonWsgiInvoker: loading entry point \"%s\" from WSGI script \"%s\"", entryPoint.c_str(), script.c_str());
+  logger->debug(R"(loading entry point "{}")", entryPoint);
   pyEntryPoint = PyObject_GetAttrString(pyModule, entryPoint.c_str());
   if (pyEntryPoint == NULL)
   {
-    CLog::Log(LOGERROR, "CHTTPPythonWsgiInvoker: failed to entry point \"%s\" from WSGI script \"%s\"", entryPoint.c_str(), script.c_str());
+    logger->error(R"(failed to load entry point "{}")", entryPoint);
     goto cleanup;
   }
 
   // check if the loaded entry point is a callable function
   if (!PyCallable_Check(pyEntryPoint))
   {
-    CLog::Log(LOGERROR, "CHTTPPythonWsgiInvoker: defined entry point \"%s\" from WSGI script \"%s\" is not callable", entryPoint.c_str(), script.c_str());
+    logger->error(R"(defined entry point "{}" is not callable)", entryPoint);
     goto cleanup;
   }
 
@@ -178,7 +181,7 @@ void CHTTPPythonWsgiInvoker::executeScript(FILE* fp, const std::string& script,
   m_wsgiResponse = new XBMCAddon::xbmcwsgi::WsgiResponse();
   if (m_wsgiResponse == NULL)
   {
-    CLog::Log(LOGERROR, "CHTTPPythonWsgiInvoker: failed to create WsgiResponse object for WSGI script \"%s\"", script.c_str());
+    logger->error("failed to create WsgiResponse object");
     goto cleanup;
   }
 
@@ -203,17 +206,17 @@ void CHTTPPythonWsgiInvoker::executeScript(FILE* fp, const std::string& script,
   }
   catch (const XBMCAddon::WrongTypeException& e)
   {
-    CLog::Log(LOGERROR, "CHTTPPythonWsgiInvoker: failed to prepare WsgiResponse object for WSGI script \"%s\" with wrong type exception: %s", script.c_str(), e.GetMessage());
+    logger->error("failed to prepare WsgiResponse object with wrong type exception: {}", e.GetMessage());
     goto cleanup;
   }
   catch (const XbmcCommons::Exception& e)
   {
-    CLog::Log(LOGERROR, "CHTTPPythonWsgiInvoker: failed to prepare WsgiResponse object for WSGI script \"%s\" with exception: %s", script.c_str(), e.GetMessage());
+    logger->error("failed to prepare WsgiResponse object with exception: {}", e.GetMessage());
     goto cleanup;
   }
   catch (...)
   {
-    CLog::Log(LOGERROR, "CHTTPPythonWsgiInvoker: failed to prepare WsgiResponse object for WSGI script \"%s\" with unknown exception", script.c_str());
+    logger->error("failed to prepare WsgiResponse object with unknown exception");
     goto cleanup;
   }
 
@@ -227,7 +230,7 @@ void CHTTPPythonWsgiInvoker::executeScript(FILE* fp, const std::string& script,
   Py_DECREF(pyArgs);
   if (pyResult == NULL)
   {
-    CLog::Log(LOGERROR, "CHTTPPythonWsgiInvoker: no result for WSGI script \"%s\"", script.c_str());
+    logger->error("no result");
     goto cleanup;
   }
 
@@ -235,7 +238,7 @@ void CHTTPPythonWsgiInvoker::executeScript(FILE* fp, const std::string& script,
   pyResultIterator = PyObject_GetIter(pyResult);
   if (pyResultIterator == NULL || !PyIter_Check(pyResultIterator))
   {
-    CLog::Log(LOGERROR, "CHTTPPythonWsgiInvoker: result of WSGI script \"%s\" is not iterable", script.c_str());
+    logger->error("result is not iterable");
     goto cleanup;
   }
 
@@ -249,17 +252,17 @@ void CHTTPPythonWsgiInvoker::executeScript(FILE* fp, const std::string& script,
     }
     catch (const XBMCAddon::WrongTypeException& e)
     {
-      CLog::Log(LOGERROR, "CHTTPPythonWsgiInvoker: failed to parse result iterable object for WSGI script \"%s\" with wrong type exception: %s", script.c_str(), e.GetMessage());
+      logger->error("failed to parse result iterable object with wrong type exception: {}", e.GetMessage());
       goto cleanup;
     }
     catch (const XbmcCommons::Exception& e)
     {
-      CLog::Log(LOGERROR, "CHTTPPythonWsgiInvoker: failed to parse result iterable object for WSGI script \"%s\" with exception: %s", script.c_str(), e.GetMessage());
+      logger->error("failed to parse result iterable object with exception: {}", e.GetMessage());
       goto cleanup;
     }
     catch (...)
     {
-      CLog::Log(LOGERROR, "CHTTPPythonWsgiInvoker: failed to parse result iterable object for WSGI script \"%s\" with unknown exception", script.c_str());
+      logger->error("failed to parse result iterable object with unknown exception");
       goto cleanup;
     }
 
@@ -278,7 +281,7 @@ void CHTTPPythonWsgiInvoker::executeScript(FILE* fp, const std::string& script,
     if (PyObject_HasAttrString(pyResultIterator, "close") == 1)
     {
       if (PyObject_CallMethod(pyResultIterator, "close", NULL) == NULL)
-        CLog::Log(LOGERROR, "CHTTPPythonWsgiInvoker: failed to close iterator object for WSGI script \"%s\"", script.c_str());
+        logger->error("failed to close iterator object");
     }
     Py_DECREF(pyResultIterator);
   }

From 4a42d8bf368ddfd11c359da086f84480d1455f2a Mon Sep 17 00:00:00 2001
From: montellese <montellese@kodi.tv>
Date: Mon, 13 Apr 2020 14:59:11 +0200
Subject: [PATCH 18/21] ~ follow coding style for 7b5518da91

---
 xbmc/network/httprequesthandler/HTTPJsonRpcHandler.cpp   | 5 ++++-
 xbmc/network/httprequesthandler/HTTPPythonHandler.cpp    | 5 ++++-
 .../httprequesthandler/python/HTTPPythonWsgiInvoker.cpp  | 9 ++++++---
 3 files changed, 14 insertions(+), 5 deletions(-)

diff --git a/xbmc/network/httprequesthandler/HTTPJsonRpcHandler.cpp b/xbmc/network/httprequesthandler/HTTPJsonRpcHandler.cpp
index 661f3f0bac6b..49f8d94f95b2 100644
--- a/xbmc/network/httprequesthandler/HTTPJsonRpcHandler.cpp
+++ b/xbmc/network/httprequesthandler/HTTPJsonRpcHandler.cpp
@@ -124,7 +124,10 @@ bool CHTTPJsonRpcHandler::appendPostData(const char *data, size_t size)
 {
   if (m_requestData.size() + size > MAX_HTTP_POST_SIZE)
   {
-    CServiceBroker::GetLogging().GetLogger("CHTTPJsonRpcHandler")->error("Stopped uploading POST data since it exceeded size limitations ({})", MAX_HTTP_POST_SIZE);
+    CServiceBroker::GetLogging()
+        .GetLogger("CHTTPJsonRpcHandler")
+        ->error("Stopped uploading POST data since it exceeded size limitations ({})",
+                MAX_HTTP_POST_SIZE);
     return false;
   }
 
diff --git a/xbmc/network/httprequesthandler/HTTPPythonHandler.cpp b/xbmc/network/httprequesthandler/HTTPPythonHandler.cpp
index 0b700049f1f1..ea15e9f378f8 100644
--- a/xbmc/network/httprequesthandler/HTTPPythonHandler.cpp
+++ b/xbmc/network/httprequesthandler/HTTPPythonHandler.cpp
@@ -234,7 +234,10 @@ bool CHTTPPythonHandler::appendPostData(const char *data, size_t size)
 {
   if (m_requestData.size() + size > MAX_STRING_POST_SIZE)
   {
-    CServiceBroker::GetLogging().GetLogger("CHTTPPythonHandler")->error("Stopped uploading post since it exceeded size limitations ({})", MAX_STRING_POST_SIZE);
+    CServiceBroker::GetLogging()
+        .GetLogger("CHTTPPythonHandler")
+        ->error("Stopped uploading post since it exceeded size limitations ({})",
+                MAX_STRING_POST_SIZE);
     return false;
   }
 
diff --git a/xbmc/network/httprequesthandler/python/HTTPPythonWsgiInvoker.cpp b/xbmc/network/httprequesthandler/python/HTTPPythonWsgiInvoker.cpp
index fd241d73e91c..c856832afaa1 100644
--- a/xbmc/network/httprequesthandler/python/HTTPPythonWsgiInvoker.cpp
+++ b/xbmc/network/httprequesthandler/python/HTTPPythonWsgiInvoker.cpp
@@ -120,7 +120,8 @@ void CHTTPPythonWsgiInvoker::executeScript(FILE* fp, const std::string& script,
       fp == NULL || script.empty() || moduleDict == NULL)
     return;
 
-  auto logger = CServiceBroker::GetLogging().GetLogger(StringUtils::Format("CHTTPPythonWsgiInvoker[{}]", script));
+  auto logger = CServiceBroker::GetLogging().GetLogger(
+      StringUtils::Format("CHTTPPythonWsgiInvoker[{}]", script));
 
   ADDON::CWebinterface* webinterface = static_cast<ADDON::CWebinterface*>(m_addon.get());
   if (webinterface->GetType() != ADDON::WebinterfaceTypeWsgi)
@@ -206,7 +207,8 @@ void CHTTPPythonWsgiInvoker::executeScript(FILE* fp, const std::string& script,
   }
   catch (const XBMCAddon::WrongTypeException& e)
   {
-    logger->error("failed to prepare WsgiResponse object with wrong type exception: {}", e.GetMessage());
+    logger->error("failed to prepare WsgiResponse object with wrong type exception: {}",
+                  e.GetMessage());
     goto cleanup;
   }
   catch (const XbmcCommons::Exception& e)
@@ -252,7 +254,8 @@ void CHTTPPythonWsgiInvoker::executeScript(FILE* fp, const std::string& script,
     }
     catch (const XBMCAddon::WrongTypeException& e)
     {
-      logger->error("failed to parse result iterable object with wrong type exception: {}", e.GetMessage());
+      logger->error("failed to parse result iterable object with wrong type exception: {}",
+                    e.GetMessage());
       goto cleanup;
     }
     catch (const XbmcCommons::Exception& e)

From 0363d497991fd710802fd1c7a3b4dcba4fa66a2f Mon Sep 17 00:00:00 2001
From: montellese <montellese@kodi.tv>
Date: Mon, 23 Mar 2020 23:11:53 +0100
Subject: [PATCH 19/21] [network] UPnP: make use of new logging functionality

---
 xbmc/network/upnp/UPnP.cpp         | 39 ++++++++++++---------
 xbmc/network/upnp/UPnPInternal.cpp | 12 ++++---
 xbmc/network/upnp/UPnPPlayer.cpp   | 55 ++++++++++++++++--------------
 xbmc/network/upnp/UPnPPlayer.h     |  3 ++
 xbmc/network/upnp/UPnPServer.cpp   | 43 +++++++++++------------
 xbmc/network/upnp/UPnPServer.h     |  5 ++-
 xbmc/network/upnp/UPnPSettings.cpp |  6 ++--
 xbmc/network/upnp/UPnPSettings.h   |  3 ++
 8 files changed, 95 insertions(+), 71 deletions(-)

diff --git a/xbmc/network/upnp/UPnP.cpp b/xbmc/network/upnp/UPnP.cpp
index 9d4a4d1c4516..a93e338a1a7a 100644
--- a/xbmc/network/upnp/UPnP.cpp
+++ b/xbmc/network/upnp/UPnP.cpp
@@ -29,6 +29,7 @@
 #include "profiles/ProfileManager.h"
 #include "settings/Settings.h"
 #include "settings/SettingsComponent.h"
+#include "utils/StaticLoggerBase.h"
 #include "utils/SystemInfo.h"
 #include "utils/TimeUtils.h"
 #include "utils/URIUtils.h"
@@ -89,26 +90,28 @@ DLNA_ORG_FLAGS_VAL = '01500000000000000000000000000000'
 void
 NPT_Console::Output(const char* msg) { }
 
-int ConvertLogLevel(int nptLogLevel)
+spdlog::level::level_enum ConvertLogLevel(int nptLogLevel)
 {
     if (nptLogLevel >= NPT_LOG_LEVEL_FATAL)
-        return LOGFATAL;
+        return spdlog::level::critical;
     if (nptLogLevel >= NPT_LOG_LEVEL_SEVERE)
-        return LOGERROR;
+        return spdlog::level::err;
     if (nptLogLevel >= NPT_LOG_LEVEL_WARNING)
-        return LOGWARNING;
-    if (nptLogLevel >= NPT_LOG_LEVEL_INFO)
-        return LOGNOTICE;
+        return spdlog::level::warn;
     if (nptLogLevel >= NPT_LOG_LEVEL_FINE)
-        return LOGINFO;
+      return spdlog::level::info;
+    if (nptLogLevel >= NPT_LOG_LEVEL_FINER)
+      return spdlog::level::debug;
 
-    return LOGDEBUG;
+    return spdlog::level::trace;
 }
 
 void
 UPnPLogger(const NPT_LogRecord* record)
 {
-    CLog::Log(ConvertLogLevel(record->m_Level), LOGUPNP, "Platinum [%s]: %s", record->m_LoggerName, record->m_Message);
+    static Logger logger = CServiceBroker::GetLogging().GetLogger("Platinum");
+    if (CServiceBroker::GetLogging().CanLogComponent(LOGUPNP))
+        logger->log(ConvertLogLevel(record->m_Level), "[{}]: {}", record->m_LoggerName, record->m_Message);
 }
 
 namespace UPNP
@@ -157,11 +160,13 @@ class CUPnPCleaner : public NPT_Thread
 |   CMediaBrowser class
 +---------------------------------------------------------------------*/
 class CMediaBrowser : public PLT_SyncMediaBrowser,
-                      public PLT_MediaContainerChangesListener
+                      public PLT_MediaContainerChangesListener,
+                      protected CStaticLoggerBase
 {
 public:
     explicit CMediaBrowser(PLT_CtrlPointReference& ctrlPoint)
         : PLT_SyncMediaBrowser(ctrlPoint, true)
+        , CStaticLoggerBase("UPNP::CMediaBrowser")
     {
         SetContainerListener(this);
     }
@@ -198,7 +203,7 @@ class CMediaBrowser : public PLT_SyncMediaBrowser,
             path += id.c_str();
         }
 
-        CLog::Log(LOGDEBUG, "UPNP: notified container update %s", (const char*)path);
+        s_logger->debug("notified container update {}", (const char*)path);
         CGUIMessage message(GUI_MSG_NOTIFY_ALL, 0, 0, GUI_MSG_UPDATE_PATH);
         message.SetStringParam(path.GetChars());
         CServiceBroker::GetGUI()->GetWindowManager().SendThreadMessage(message);
@@ -212,7 +217,7 @@ class CMediaBrowser : public PLT_SyncMediaBrowser,
             return SaveFileState(temp, CBookmark(), watched);
         }
         else {
-            CLog::Log(LOGDEBUG, "UPNP: Marking video item %s as watched", item.GetPath().c_str());
+          s_logger->debug("Marking video item {} as watched", item.GetPath());
             return InvokeUpdateObject(item.GetPath().c_str(), "<upnp:playCount>1</upnp:playCount>", "<upnp:playCount>0</upnp:playCount>");
         }
     }
@@ -228,7 +233,7 @@ class CMediaBrowser : public PLT_SyncMediaBrowser,
         NPT_String new_value;
 
         if (item.GetVideoInfoTag()->GetResumePoint().timeInSeconds != bookmark.timeInSeconds) {
-            CLog::Log(LOGDEBUG, "UPNP: Updating resume point for item %s", path.c_str());
+          s_logger->debug("Updating resume point for item {}", path);
             long time = (long)bookmark.timeInSeconds;
             if (time < 0) time = 0;
             curr_value.Append(NPT_String::Format("<upnp:lastPlaybackPosition>%ld</upnp:lastPlaybackPosition>",
@@ -242,7 +247,7 @@ class CMediaBrowser : public PLT_SyncMediaBrowser,
             new_value += "</xbmc:lastPlayerState>";
         }
         if (updatePlayCount) {
-            CLog::Log(LOGDEBUG, "UPNP: Marking video item %s as watched", path.c_str());
+          s_logger->debug("Marking video item {} as watched", path);
             if (!curr_value.IsEmpty()) curr_value.Append(",");
             if (!new_value.IsEmpty()) new_value.Append(",");
             curr_value.Append("<upnp:playCount>0</upnp:playCount>");
@@ -259,7 +264,7 @@ class CMediaBrowser : public PLT_SyncMediaBrowser,
         PLT_Service* cds;
         PLT_ActionReference action;
 
-        CLog::Log(LOGDEBUG, "UPNP: attempting to invoke UpdateObject for %s", id);
+        s_logger->debug("attempting to invoke UpdateObject for {}", id);
 
         // check this server supports UpdateObject action
         NPT_CHECK_LABEL(FindServer(url.GetHostName().c_str(), device),failed);
@@ -277,11 +282,11 @@ class CMediaBrowser : public PLT_SyncMediaBrowser,
 
         NPT_CHECK_LABEL(m_CtrlPoint->InvokeAction(action, NULL),failed);
 
-        CLog::Log(LOGDEBUG, "UPNP: invoked UpdateObject successfully");
+        s_logger->debug("invoked UpdateObject successfully");
         return true;
 
     failed:
-        CLog::Log(LOGINFO, "UPNP: invoking UpdateObject failed");
+        s_logger->info("invoking UpdateObject failed");
         return false;
     }
 };
diff --git a/xbmc/network/upnp/UPnPInternal.cpp b/xbmc/network/upnp/UPnPInternal.cpp
index 9eb149addacd..e1bfb3d5e6e2 100644
--- a/xbmc/network/upnp/UPnPInternal.cpp
+++ b/xbmc/network/upnp/UPnPInternal.cpp
@@ -354,11 +354,13 @@ BuildObject(CFileItem&                    item,
             CUPnPServer*                  upnp_server /* = NULL */,
             UPnPService                   upnp_service /* = UPnPServiceNone */)
 {
+  static Logger logger = CServiceBroker::GetLogging().GetLogger("UPNP::BuildObject");
+
     PLT_MediaItemResource resource;
     PLT_MediaObject*      object = NULL;
     std::string thumb;
 
-    CLog::Log(LOGDEBUG, "UPnP: Building didl for object '%s'", item.GetPath().c_str());
+    logger->debug("Building didl for object '{}'", item.GetPath());
 
     EClientQuirks quirks = GetClientQuirks(context);
 
@@ -1036,6 +1038,8 @@ struct ResourcePrioritySort
 
 bool GetResource(const PLT_MediaObject* entry, CFileItem& item)
 {
+  static Logger logger = CServiceBroker::GetLogging().GetLogger("CUPnPDirectory::GetResource");
+
   PLT_MediaItemResource resource;
 
   // store original path so we remember it
@@ -1061,15 +1065,13 @@ bool GetResource(const PLT_MediaObject* entry, CFileItem& item)
 
   // look for content type in protocol info
   if (resource.m_ProtocolInfo.IsValid()) {
-    CLog::Log(LOGDEBUG, "CUPnPDirectory::GetResource - resource protocol info '%s'",
-              (const char*)(resource.m_ProtocolInfo.ToString()));
+    logger->debug("resource protocol info '{}'", (const char*)(resource.m_ProtocolInfo.ToString()));
 
     if (resource.m_ProtocolInfo.GetContentType().Compare("application/octet-stream") != 0) {
       item.SetMimeType((const char*)resource.m_ProtocolInfo.GetContentType());
     }
   } else {
-    CLog::Log(LOGERROR, "CUPnPDirectory::GetResource - invalid protocol info '%s'",
-              (const char*)(resource.m_ProtocolInfo.ToString()));
+    logger->error("invalid protocol info '{}'", (const char*)(resource.m_ProtocolInfo.ToString()));
   }
 
   // look for subtitles
diff --git a/xbmc/network/upnp/UPnPPlayer.cpp b/xbmc/network/upnp/UPnPPlayer.cpp
index c2f47c2b9c3d..6bd0cf80e614 100644
--- a/xbmc/network/upnp/UPnPPlayer.cpp
+++ b/xbmc/network/upnp/UPnPPlayer.cpp
@@ -24,6 +24,8 @@
 #include "messaging/helpers/DialogHelper.h"
 #include "music/MusicThumbLoader.h"
 #include "threads/Event.h"
+#include "utils/StaticLoggerBase.h"
+#include "utils/StringUtils.h"
 #include "utils/TimeUtils.h"
 #include "utils/Variant.h"
 #include "utils/log.h"
@@ -45,10 +47,12 @@ namespace UPNP
 
 class CUPnPPlayerController
   : public PLT_MediaControllerDelegate
+  , protected CStaticLoggerBase
 {
 public:
   CUPnPPlayerController(PLT_MediaController* control, PLT_DeviceDataReference& device, IPlayerCallback& callback)
-    : m_control(control)
+    : CStaticLoggerBase("CUPnPPlayerController")
+    , m_control(control)
     , m_transport(NULL)
     , m_device(device)
     , m_instance(0)
@@ -62,7 +66,7 @@ class CUPnPPlayerController
   void OnSetAVTransportURIResult(NPT_Result res, PLT_DeviceDataReference& device, void* userdata) override
   {
     if(NPT_FAILED(res))
-      CLog::Log(LOGERROR, "UPNP: CUPnPPlayer : OnSetAVTransportURIResult failed");
+      s_logger->error("OnSetAVTransportURIResult failed");
     m_resstatus = res;
     m_resevent.Set();
   }
@@ -70,7 +74,7 @@ class CUPnPPlayerController
   void OnPlayResult(NPT_Result res, PLT_DeviceDataReference& device, void* userdata) override
   {
     if(NPT_FAILED(res))
-      CLog::Log(LOGERROR, "UPNP: CUPnPPlayer : OnPlayResult failed");
+      s_logger->error("OnPlayResult failed");
     m_resstatus = res;
     m_resevent.Set();
   }
@@ -78,7 +82,7 @@ class CUPnPPlayerController
   void OnStopResult(NPT_Result res, PLT_DeviceDataReference& device, void* userdata) override
   {
     if(NPT_FAILED(res))
-      CLog::Log(LOGERROR, "UPNP: CUPnPPlayer : OnStopResult failed");
+      s_logger->error("OnStopResult failed");
     m_resstatus = res;
     m_resevent.Set();
   }
@@ -86,7 +90,7 @@ class CUPnPPlayerController
   void OnGetMediaInfoResult(NPT_Result res, PLT_DeviceDataReference& device, PLT_MediaInfo* info, void* userdata) override
   {
     if(NPT_FAILED(res) || info == NULL)
-      CLog::Log(LOGERROR, "UPNP: CUPnPPlayer : OnGetMediaInfoResult failed");
+      s_logger->error("OnGetMediaInfoResult failed");
   }
 
   void OnGetTransportInfoResult(NPT_Result res, PLT_DeviceDataReference& device, PLT_TransportInfo* info, void* userdata) override
@@ -95,7 +99,7 @@ class CUPnPPlayerController
 
     if(NPT_FAILED(res))
     {
-      CLog::Log(LOGERROR, "UPNP: CUPnPPlayer : OnGetTransportInfoResult failed");
+      s_logger->error("OnGetTransportInfoResult failed");
       m_trainfo.cur_speed            = "0";
       m_trainfo.cur_transport_state  = "STOPPED";
       m_trainfo.cur_transport_status = "ERROR_OCCURED";
@@ -122,7 +126,7 @@ class CUPnPPlayerController
 
     if(NPT_FAILED(res) || info == NULL)
     {
-      CLog::Log(LOGERROR, "UPNP: CUPnPPlayer : OnGetMediaInfoResult failed");
+      s_logger->error("OnGetMediaInfoResult failed");
       m_posinfo = PLT_PositionInfo();
     }
     else
@@ -159,6 +163,7 @@ CUPnPPlayer::CUPnPPlayer(IPlayerCallback& callback, const char* uuid)
 , m_delegate(NULL)
 , m_started(false)
 , m_stopremote(false)
+, m_logger(CServiceBroker::GetLogging().GetLogger(StringUtils::Format("CUPnPPlayer[{}]", uuid)))
 {
   m_control  = CUPnP::GetInstance()->m_MediaController;
 
@@ -169,7 +174,7 @@ CUPnPPlayer::CUPnPPlayer(IPlayerCallback& callback, const char* uuid)
     CUPnP::RegisterUserdata(m_delegate);
   }
   else
-    CLog::Log(LOGERROR, "UPNP: CUPnPPlayer couldn't find device as %s", uuid);
+    m_logger->error("couldn't find device as {}", uuid);
 
   CServiceBroker::GetWinSystem()->RegisterRenderLoop(this);
 }
@@ -221,7 +226,7 @@ int CUPnPPlayer::PlayFile(const CFileItem& file, const CPlayerOptions& options,
   {
     for (NPT_Cardinal i=0; i< obj->m_Resources.GetItemCount(); i++) {
       if (obj->m_Resources[i].m_ProtocolInfo.GetContentType().Compare("video/x-matroska") == 0) {
-        CLog::Log(LOGDEBUG, "CUPnPPlayer::PlayFile(%s): applying video/x-mkv quirk", file.GetPath().c_str());
+        m_logger->debug("PlayFile({}): applying video/x-mkv quirk", file.GetPath());
         NPT_String protocolInfo = obj->m_Resources[i].m_ProtocolInfo.ToString();
         protocolInfo.Replace(":video/x-matroska:", ":video/x-mkv:");
         obj->m_Resources[i].m_ProtocolInfo = PLT_ProtocolInfo(protocolInfo);
@@ -288,7 +293,7 @@ int CUPnPPlayer::PlayFile(const CFileItem& file, const CPlayerOptions& options,
       if(m_delegate->m_trainfo.cur_transport_state  == "STOPPED"
       && m_delegate->m_trainfo.cur_transport_status != "OK")
       {
-        CLog::Log(LOGERROR, "UPNP: CUPnPPlayer::OpenFile - remote player signalled error %s", file.GetPath().c_str());
+        m_logger->error("OpenFile({}): remote player signalled error", file.GetPath());
         return NPT_FAILURE;
       }
     }
@@ -309,31 +314,31 @@ int CUPnPPlayer::PlayFile(const CFileItem& file, const CPlayerOptions& options,
 
   return NPT_SUCCESS;
 failed_todidl:
-  CLog::Log(LOGERROR, "CUPnPPlayer::PlayFile(%s) failed to serialize item into DIDL-Lite", file.GetPath().c_str());
+  m_logger->error("PlayFile({}) failed to serialize item into DIDL-Lite", file.GetPath());
   return NPT_FAILURE;
 failed_findbestresource:
-  CLog::Log(LOGERROR, "CUPnPPlayer::PlayFile(%s) failed to find a matching resource", file.GetPath().c_str());
+  m_logger->error("PlayFile({}) failed to find a matching resource", file.GetPath());
   return NPT_FAILURE;
 failed_gettransportinfo:
-  CLog::Log(LOGERROR, "CUPnPPlayer::PlayFile(%s): call to GetTransportInfo failed", file.GetPath().c_str());
+  m_logger->error("PlayFile({}): call to GetTransportInfo failed", file.GetPath());
   return NPT_FAILURE;
 failed_stop:
-  CLog::Log(LOGERROR, "CUPnPPlayer::PlayFile(%s) failed to stop current playback", file.GetPath().c_str());
+  m_logger->error("PlayFile({}) failed to stop current playback", file.GetPath());
   return NPT_FAILURE;
 failed_setavtransporturi:
-  CLog::Log(LOGERROR, "CUPnPPlayer::PlayFile(%s) failed to set the playback URI", file.GetPath().c_str());
+  m_logger->error("PlayFile({}) failed to set the playback URI", file.GetPath());
   return NPT_FAILURE;
 failed_play:
-  CLog::Log(LOGERROR, "CUPnPPlayer::PlayFile(%s) failed to start playback", file.GetPath().c_str());
+  m_logger->error("PlayFile({}) failed to start playback", file.GetPath());
   return NPT_FAILURE;
 failed_waitplaying:
-  CLog::Log(LOGERROR, "CUPnPPlayer::PlayFile(%s) failed to wait for PLAYING state", file.GetPath().c_str());
+  m_logger->error("PlayFile({}) failed to wait for PLAYING state", file.GetPath());
   return NPT_FAILURE;
 failed_seek:
-  CLog::Log(LOGERROR, "CUPnPPlayer::PlayFile(%s) failed to seek to start offset", file.GetPath().c_str());
+  m_logger->error("PlayFile({}) failed to seek to start offset", file.GetPath());
   return NPT_FAILURE;
 failed:
-  CLog::Log(LOGERROR, "CUPnPPlayer::PlayFile(%s) failed", file.GetPath().c_str());
+  m_logger->error("PlayFile({}) failed", file.GetPath());
   return NPT_FAILURE;
 }
 
@@ -379,7 +384,7 @@ bool CUPnPPlayer::OpenFile(const CFileItem& file, const CPlayerOptions& options)
 
   return true;
 failed:
-  CLog::Log(LOGERROR, "UPNP: CUPnPPlayer::OpenFile - unable to open file %s", file.GetPath().c_str());
+  m_logger->error("OpenFile({}) failed to open file", file.GetPath());
   if(dialog)
     dialog->Close();
   return false;
@@ -417,7 +422,7 @@ bool CUPnPPlayer::QueueNextFile(const CFileItem& file)
   return true;
 
 failed:
-  CLog::Log(LOGERROR, "UPNP: CUPnPPlayer::QueueNextFile - unable to queue file %s", file.GetPath().c_str());
+  m_logger->error("QueueNextFile({}) failed to queue file", file.GetPath());
   return false;
 }
 
@@ -441,7 +446,7 @@ bool CUPnPPlayer::CloseFile(bool reopen)
 
   return true;
 failed:
-  CLog::Log(LOGERROR, "UPNP: CUPnPPlayer::CloseFile - unable to stop playback");
+  m_logger->error("CloseFile - unable to stop playback");
   return false;
 }
 
@@ -465,7 +470,7 @@ void CUPnPPlayer::Pause()
 
   return;
 failed:
-  CLog::Log(LOGERROR, "UPNP: CUPnPPlayer::CloseFile - unable to pause/unpause playback");
+  m_logger->error("CloseFile - unable to pause/unpause playback");
 }
 
 void CUPnPPlayer::SeekTime(int64_t ms)
@@ -478,7 +483,7 @@ void CUPnPPlayer::SeekTime(int64_t ms)
   CServiceBroker::GetGUI()->GetInfoManager().GetInfoProviders().GetPlayerInfoProvider().SetDisplayAfterSeek();
   return;
 failed:
-  CLog::Log(LOGERROR, "UPNP: CUPnPPlayer::SeekTime - unable to seek playback");
+  m_logger->error("SeekTime - unable to seek playback");
 }
 
 float CUPnPPlayer::GetPercentage()
@@ -562,7 +567,7 @@ void CUPnPPlayer::SetVolume(float volume)
                                      , m_delegate), failed);
   return;
 failed:
-  CLog::Log(LOGERROR, "UPNP: CUPnPPlayer - unable to set volume");
+  m_logger->error("- unable to set volume");
 }
 
 int64_t CUPnPPlayer::GetTime()
diff --git a/xbmc/network/upnp/UPnPPlayer.h b/xbmc/network/upnp/UPnPPlayer.h
index f6d14f409f01..73b687015258 100644
--- a/xbmc/network/upnp/UPnPPlayer.h
+++ b/xbmc/network/upnp/UPnPPlayer.h
@@ -12,6 +12,7 @@
 #include "cores/IPlayer.h"
 #include "guilib/DispResource.h"
 #include "threads/SystemClock.h"
+#include "utils/logtypes.h"
 
 #include <string>
 
@@ -74,6 +75,8 @@ class CUPnPPlayer
   bool m_started;
   bool m_stopremote;
   XbmcThreads::EndTime m_updateTimer;
+
+  Logger m_logger;
 };
 
 } /* namespace UPNP */
diff --git a/xbmc/network/upnp/UPnPServer.cpp b/xbmc/network/upnp/UPnPServer.cpp
index f283f05c0011..f1ddae56c445 100644
--- a/xbmc/network/upnp/UPnPServer.cpp
+++ b/xbmc/network/upnp/UPnPServer.cpp
@@ -66,7 +66,8 @@ const char* video_containers[] = { "library://video/movies/titles.xml/", "librar
 CUPnPServer::CUPnPServer(const char* friendly_name, const char* uuid /*= NULL*/, int port /*= 0*/) :
     PLT_MediaConnect(friendly_name, false, uuid, port),
     PLT_FileMediaConnectDelegate("/", "/"),
-    m_scanning(g_application.IsMusicScanning() || g_application.IsVideoScanning())
+    m_scanning(g_application.IsMusicScanning() || g_application.IsVideoScanning()),
+    m_logger(CServiceBroker::GetLogging().GetLogger(StringUtils::Format("CUPnPServer[{}]", friendly_name)))
 {
 }
 
@@ -190,7 +191,7 @@ CUPnPServer::PropagateUpdates()
 failed:
     // should attempt to start eventing on a failure
     if (service) service->PauseEventing(false);
-    CLog::Log(LOGERROR, "UPNP: Unable to propagate updates");
+    m_logger->error("Unable to propagate updates");
 }
 
 /*----------------------------------------------------------------------
@@ -265,7 +266,7 @@ CUPnPServer::Build(CFileItemPtr                  item,
     //HACK: temporary disabling count as it thrashes HDD
     with_count = false;
 
-    CLog::Log(LOGDEBUG, "Preparing upnp object for item '%s'", (const char*)path);
+    m_logger->debug("Preparing upnp object for item '{}'", (const char*)path);
 
     if (path == "virtualpath://upnproot") {
         path.TrimRight("/");
@@ -484,7 +485,7 @@ CUPnPServer::Announce(AnnouncementFlag flag, const char *sender, const char *mes
 /*----------------------------------------------------------------------
 |   TranslateWMPObjectId
 +---------------------------------------------------------------------*/
-static NPT_String TranslateWMPObjectId(NPT_String id)
+static NPT_String TranslateWMPObjectId(NPT_String id, Logger logger)
 {
     if (id == "0") {
         id = "virtualpath://upnproot/";
@@ -504,7 +505,7 @@ static NPT_String TranslateWMPObjectId(NPT_String id)
         id = "musicdb://songs/";
     }
 
-    CLog::Log(LOGDEBUG, "UPnP Translated id to '%s'", (const char*)id);
+    logger->debug("Translated id to '{}'", (const char*)id);
     return id;
 }
 
@@ -534,11 +535,11 @@ CUPnPServer::OnBrowseMetadata(PLT_ActionReference&          action,
 
     NPT_String                     didl;
     NPT_Reference<PLT_MediaObject> object;
-    NPT_String                     id = TranslateWMPObjectId(object_id);
+    NPT_String                     id = TranslateWMPObjectId(object_id, m_logger);
     CFileItemPtr                   item;
     NPT_Reference<CThumbLoader>    thumb_loader;
 
-    CLog::Log(LOGINFO, "Received UPnP Browse Metadata request for object '%s'", object_id);
+    m_logger->info("Received UPnP Browse Metadata request for object '{}'", object_id);
 
     if(NPT_FAILED(ObjectIDValidate(id))) {
         action->SetError(701, "Incorrect ObjectID.");
@@ -634,9 +635,9 @@ CUPnPServer::OnBrowseDirectChildren(PLT_ActionReference&          action,
                                     const PLT_HttpRequestContext& context)
 {
     CFileItemList items;
-    NPT_String    parent_id = TranslateWMPObjectId(object_id);
+    NPT_String    parent_id = TranslateWMPObjectId(object_id, m_logger);
 
-    CLog::Log(LOGINFO, "UPnP: Received Browse DirectChildren request for object '%s', with sort criteria %s", object_id, sort_criteria);
+   m_logger->info("Received Browse DirectChildren request for object '{}', with sort criteria {}", object_id, sort_criteria);
 
     if(NPT_FAILED(ObjectIDValidate(parent_id))) {
         action->SetError(701, "Incorrect ObjectID.");
@@ -736,7 +737,7 @@ CUPnPServer::BuildResponse(PLT_ActionReference&          action,
 {
     NPT_COMPILER_UNUSED(sort_criteria);
 
-    CLog::Log(LOGDEBUG, "Building UPnP response with filter '%s', starting @ %d with %d requested",
+    m_logger->debug("Building UPnP response with filter '{}', starting @ {} with {} requested",
         filter,
         starting_index,
         requested_count);
@@ -798,7 +799,7 @@ CUPnPServer::BuildResponse(PLT_ActionReference&          action,
 
     didl += didl_footer;
 
-    CLog::Log(LOGDEBUG, "Returning UPnP response with %d items out of %d total matches",
+    m_logger->debug("Returning UPnP response with {} items out of {} total matches",
         count,
         total);
 
@@ -845,7 +846,7 @@ CUPnPServer::OnSearchContainer(PLT_ActionReference&          action,
                                const char*                   sort_criteria,
                                const PLT_HttpRequestContext& context)
 {
-    CLog::Log(LOGDEBUG, "Received Search request for object '%s' with search '%s'",
+  m_logger->debug("Received Search request for object '{}' with search '{}'",
         object_id,
         search_criteria);
 
@@ -1013,8 +1014,8 @@ CUPnPServer::OnUpdateObject(PLT_ActionReference&             action,
     std::string path(CURL::Decode(object_id));
     CFileItem updated;
     updated.SetPath(path);
-    CLog::Log(LOGINFO, "UPnP: OnUpdateObject: %s from %s", path.c_str(),
-                       (const char*) context.GetRemoteAddress().GetIpAddress().ToString());
+    m_logger->info("OnUpdateObject: {} from {}",
+      path, (const char*) context.GetRemoteAddress().GetIpAddress().ToString());
 
     NPT_String playCount, position;
     int err;
@@ -1053,7 +1054,7 @@ CUPnPServer::OnUpdateObject(PLT_ActionReference&             action,
         CVideoInfoTag tag;
         db.LoadVideoInfo(file_path, tag);
         updated.SetFromVideoInfoTag(tag);
-        CLog::Log(LOGINFO, "UPNP: Translated to %s", file_path.c_str());
+        m_logger->info("Translated to {}", file_path);
 
         position = new_vals["lastPlaybackPosition"];
         playCount = new_vals["playCount"];
@@ -1131,7 +1132,7 @@ CUPnPServer::OnUpdateObject(PLT_ActionReference&             action,
     msg = "Internal error";
 
 failure:
-    CLog::Log(LOGERROR, "UPNP: OnUpdateObject failed with err %d:%s", err, msg);
+    m_logger->error("OnUpdateObject failed with err {}: {}", err, msg);
     action->SetError(err, msg);
     service->PauseEventing(false);
     return NPT_FAILURE;
@@ -1151,9 +1152,9 @@ CUPnPServer::ServeFile(const NPT_HttpRequest&              request,
     { NPT_AutoLock lock(m_FileMutex);
       if(NPT_SUCCEEDED(m_FileMap.Get(md5, file_path2))) {
         file_path = *file_path2;
-        CLog::Log(LOGDEBUG, "Received request to serve '%s' = '%s'", (const char*)md5, (const char*)file_path);
+        m_logger->debug("Received request to serve '{}' = '{}'", (const char*)md5, (const char*)file_path);
       } else {
-        CLog::Log(LOGDEBUG, "Received request to serve unknown md5 '%s'", (const char*)md5);
+        m_logger->debug("Received request to serve unknown md5 '{}'", (const char*)md5);
         response.SetStatus(404, "File Not Found");
         return NPT_SUCCESS;
       }
@@ -1227,7 +1228,7 @@ CUPnPServer::ServeFile(const NPT_HttpRequest&              request,
 |   return true if sort criteria was matched
 +---------------------------------------------------------------------*/
 bool
-CUPnPServer::SortItems(CFileItemList& items, const char* sort_criteria)
+CUPnPServer::SortItems(CFileItemList& items, const char* sort_criteria, Logger logger)
 {
   std::string criteria(sort_criteria);
   if (criteria.empty()) {
@@ -1284,11 +1285,11 @@ CUPnPServer::SortItems(CFileItemList& items, const char* sort_criteria)
     else if (StringUtils::EqualsNoCase(method, "xbmc:votes"))
       sorting.sortBy = SortByVotes;
     else {
-      CLog::Log(LOGINFO, "UPnP: unsupported sort criteria '%s' passed", method.c_str());
+      logger->warn("unsupported sort criteria '{}' passed", method.c_str());
       continue; // needed so unidentified sort methods don't re-sort by label
     }
 
-    CLog::Log(LOGINFO, "UPnP: Sorting by method %d, order %d, attributes %d", sorting.sortBy, sorting.sortOrder, sorting.sortAttributes);
+    logger->info("Sorting by method {}, order {}, attributes {}", sorting.sortBy, sorting.sortOrder, sorting.sortAttributes);
     items.Sort(sorting);
     sorted = true;
   }
diff --git a/xbmc/network/upnp/UPnPServer.h b/xbmc/network/upnp/UPnPServer.h
index 000349b9e60d..3c93bd28b578 100644
--- a/xbmc/network/upnp/UPnPServer.h
+++ b/xbmc/network/upnp/UPnPServer.h
@@ -10,6 +10,7 @@
 
 #include "FileItem.h"
 #include "interfaces/IAnnouncer.h"
+#include "utils/logtypes.h"
 
 #include <utility>
 
@@ -115,7 +116,7 @@ class CUPnPServer : public PLT_MediaConnect,
                              const char*                   parent_id /* = NULL */);
 
     // class methods
-    static bool SortItems(CFileItemList& items, const char* sort_criteria);
+    static bool SortItems(CFileItemList& items, const char* sort_criteria, Logger logger);
     static void DefaultSortItems(CFileItemList& items);
     static NPT_String GetParentFolder(NPT_String file_path) {
         int index = file_path.ReverseFind("\\");
@@ -131,6 +132,8 @@ class CUPnPServer : public PLT_MediaConnect,
 
     std::map<std::string, std::pair<bool, unsigned long> > m_UpdateIDs;
     bool m_scanning;
+
+    Logger m_logger;
 public:
     // class members
     static NPT_UInt32 m_MaxReturnedItems;
diff --git a/xbmc/network/upnp/UPnPSettings.cpp b/xbmc/network/upnp/UPnPSettings.cpp
index 753e2bfad8b7..966740afac6a 100644
--- a/xbmc/network/upnp/UPnPSettings.cpp
+++ b/xbmc/network/upnp/UPnPSettings.cpp
@@ -8,6 +8,7 @@
 
 #include "UPnPSettings.h"
 
+#include "ServiceBroker.h"
 #include "filesystem/File.h"
 #include "threads/SingleLock.h"
 #include "utils/StringUtils.h"
@@ -25,6 +26,7 @@
 using namespace XFILE;
 
 CUPnPSettings::CUPnPSettings()
+  : m_logger(CServiceBroker::GetLogging().GetLogger("CUPnPSettings"))
 {
   Clear();
 }
@@ -57,14 +59,14 @@ bool CUPnPSettings::Load(const std::string &file)
   CXBMCTinyXML doc;
   if (!doc.LoadFile(file))
   {
-    CLog::Log(LOGERROR, "CUPnPSettings: error loading %s, Line %d\n%s", file.c_str(), doc.ErrorRow(), doc.ErrorDesc());
+    m_logger->error("error loading {}, Line {}\n{}", file, doc.ErrorRow(), doc.ErrorDesc());
     return false;
   }
 
   TiXmlElement *pRootElement = doc.RootElement();
   if (pRootElement == NULL || !StringUtils::EqualsNoCase(pRootElement->Value(), XML_UPNP))
   {
-    CLog::Log(LOGERROR, "CUPnPSettings: error loading %s, no <upnpserver> node", file.c_str());
+    m_logger->error("error loading {}, no <upnpserver> node", file);
     return false;
   }
 
diff --git a/xbmc/network/upnp/UPnPSettings.h b/xbmc/network/upnp/UPnPSettings.h
index af1b930515f7..7469b06e8ffa 100644
--- a/xbmc/network/upnp/UPnPSettings.h
+++ b/xbmc/network/upnp/UPnPSettings.h
@@ -10,6 +10,7 @@
 
 #include "settings/lib/ISettingsHandler.h"
 #include "threads/CriticalSection.h"
+#include "utils/logtypes.h"
 
 #include <string>
 
@@ -50,4 +51,6 @@ class CUPnPSettings : public ISettingsHandler
   int m_rendererPort;
 
   mutable CCriticalSection m_critical;
+
+  Logger m_logger;
 };

From fc4b37a7cedfee39704ced0c92549de3285dba83 Mon Sep 17 00:00:00 2001
From: montellese <montellese@kodi.tv>
Date: Mon, 13 Apr 2020 14:59:37 +0200
Subject: [PATCH 20/21] ~ follow coding style for ec6cd6ee41

---
 xbmc/network/upnp/UPnP.cpp         |  65 ++++++++-------
 xbmc/network/upnp/UPnPInternal.cpp |  32 ++++----
 xbmc/network/upnp/UPnPPlayer.cpp   |  34 ++++----
 xbmc/network/upnp/UPnPServer.cpp   | 126 +++++++++++++++--------------
 xbmc/network/upnp/UPnPServer.h     |   3 +-
 xbmc/network/upnp/UPnPSettings.cpp |   3 +-
 6 files changed, 140 insertions(+), 123 deletions(-)

diff --git a/xbmc/network/upnp/UPnP.cpp b/xbmc/network/upnp/UPnP.cpp
index a93e338a1a7a..5d2bd43592fc 100644
--- a/xbmc/network/upnp/UPnP.cpp
+++ b/xbmc/network/upnp/UPnP.cpp
@@ -93,11 +93,11 @@ NPT_Console::Output(const char* msg) { }
 spdlog::level::level_enum ConvertLogLevel(int nptLogLevel)
 {
     if (nptLogLevel >= NPT_LOG_LEVEL_FATAL)
-        return spdlog::level::critical;
+      return spdlog::level::critical;
     if (nptLogLevel >= NPT_LOG_LEVEL_SEVERE)
-        return spdlog::level::err;
+      return spdlog::level::err;
     if (nptLogLevel >= NPT_LOG_LEVEL_WARNING)
-        return spdlog::level::warn;
+      return spdlog::level::warn;
     if (nptLogLevel >= NPT_LOG_LEVEL_FINE)
       return spdlog::level::info;
     if (nptLogLevel >= NPT_LOG_LEVEL_FINER)
@@ -109,9 +109,10 @@ spdlog::level::level_enum ConvertLogLevel(int nptLogLevel)
 void
 UPnPLogger(const NPT_LogRecord* record)
 {
-    static Logger logger = CServiceBroker::GetLogging().GetLogger("Platinum");
-    if (CServiceBroker::GetLogging().CanLogComponent(LOGUPNP))
-        logger->log(ConvertLogLevel(record->m_Level), "[{}]: {}", record->m_LoggerName, record->m_Message);
+  static Logger logger = CServiceBroker::GetLogging().GetLogger("Platinum");
+  if (CServiceBroker::GetLogging().CanLogComponent(LOGUPNP))
+    logger->log(ConvertLogLevel(record->m_Level), "[{}]: {}", record->m_LoggerName,
+                record->m_Message);
 }
 
 namespace UPNP
@@ -164,11 +165,10 @@ class CMediaBrowser : public PLT_SyncMediaBrowser,
                       protected CStaticLoggerBase
 {
 public:
-    explicit CMediaBrowser(PLT_CtrlPointReference& ctrlPoint)
-        : PLT_SyncMediaBrowser(ctrlPoint, true)
-        , CStaticLoggerBase("UPNP::CMediaBrowser")
-    {
-        SetContainerListener(this);
+  explicit CMediaBrowser(PLT_CtrlPointReference& ctrlPoint)
+    : PLT_SyncMediaBrowser(ctrlPoint, true), CStaticLoggerBase("UPNP::CMediaBrowser")
+  {
+    SetContainerListener(this);
     }
 
     // PLT_MediaBrowser methods
@@ -218,7 +218,8 @@ class CMediaBrowser : public PLT_SyncMediaBrowser,
         }
         else {
           s_logger->debug("Marking video item {} as watched", item.GetPath());
-            return InvokeUpdateObject(item.GetPath().c_str(), "<upnp:playCount>1</upnp:playCount>", "<upnp:playCount>0</upnp:playCount>");
+          return InvokeUpdateObject(item.GetPath().c_str(), "<upnp:playCount>1</upnp:playCount>",
+                                    "<upnp:playCount>0</upnp:playCount>");
         }
     }
 
@@ -234,24 +235,30 @@ class CMediaBrowser : public PLT_SyncMediaBrowser,
 
         if (item.GetVideoInfoTag()->GetResumePoint().timeInSeconds != bookmark.timeInSeconds) {
           s_logger->debug("Updating resume point for item {}", path);
-            long time = (long)bookmark.timeInSeconds;
-            if (time < 0) time = 0;
-            curr_value.Append(NPT_String::Format("<upnp:lastPlaybackPosition>%ld</upnp:lastPlaybackPosition>",
-                                                 (long)item.GetVideoInfoTag()->GetResumePoint().timeInSeconds));
-            curr_value += "<xbmc:lastPlayerState>";
-            PLT_Didl::AppendXmlEscape(curr_value, item.GetVideoInfoTag()->GetResumePoint().playerState.c_str());
-            curr_value += "</xbmc:lastPlayerState>";
-            new_value.Append(NPT_String::Format("<upnp:lastPlaybackPosition>%ld</upnp:lastPlaybackPosition>", time));
-            new_value += "<xbmc:lastPlayerState>";
-            PLT_Didl::AppendXmlEscape(new_value, bookmark.playerState.c_str());
-            new_value += "</xbmc:lastPlayerState>";
+          long time = (long)bookmark.timeInSeconds;
+          if (time < 0)
+            time = 0;
+          curr_value.Append(
+              NPT_String::Format("<upnp:lastPlaybackPosition>%ld</upnp:lastPlaybackPosition>",
+                                 (long)item.GetVideoInfoTag()->GetResumePoint().timeInSeconds));
+          curr_value += "<xbmc:lastPlayerState>";
+          PLT_Didl::AppendXmlEscape(curr_value,
+                                    item.GetVideoInfoTag()->GetResumePoint().playerState.c_str());
+          curr_value += "</xbmc:lastPlayerState>";
+          new_value.Append(NPT_String::Format(
+              "<upnp:lastPlaybackPosition>%ld</upnp:lastPlaybackPosition>", time));
+          new_value += "<xbmc:lastPlayerState>";
+          PLT_Didl::AppendXmlEscape(new_value, bookmark.playerState.c_str());
+          new_value += "</xbmc:lastPlayerState>";
         }
         if (updatePlayCount) {
           s_logger->debug("Marking video item {} as watched", path);
-            if (!curr_value.IsEmpty()) curr_value.Append(",");
-            if (!new_value.IsEmpty()) new_value.Append(",");
-            curr_value.Append("<upnp:playCount>0</upnp:playCount>");
-            new_value.Append("<upnp:playCount>1</upnp:playCount>");
+          if (!curr_value.IsEmpty())
+            curr_value.Append(",");
+          if (!new_value.IsEmpty())
+            new_value.Append(",");
+          curr_value.Append("<upnp:playCount>0</upnp:playCount>");
+          new_value.Append("<upnp:playCount>1</upnp:playCount>");
         }
 
         return InvokeUpdateObject(path.c_str(), (const char*)curr_value, (const char*)new_value);
@@ -286,8 +293,8 @@ class CMediaBrowser : public PLT_SyncMediaBrowser,
         return true;
 
     failed:
-        s_logger->info("invoking UpdateObject failed");
-        return false;
+      s_logger->info("invoking UpdateObject failed");
+      return false;
     }
 };
 
diff --git a/xbmc/network/upnp/UPnPInternal.cpp b/xbmc/network/upnp/UPnPInternal.cpp
index e1bfb3d5e6e2..44ab0e70dbb3 100644
--- a/xbmc/network/upnp/UPnPInternal.cpp
+++ b/xbmc/network/upnp/UPnPInternal.cpp
@@ -356,25 +356,27 @@ BuildObject(CFileItem&                    item,
 {
   static Logger logger = CServiceBroker::GetLogging().GetLogger("UPNP::BuildObject");
 
-    PLT_MediaItemResource resource;
-    PLT_MediaObject*      object = NULL;
-    std::string thumb;
+  PLT_MediaItemResource resource;
+  PLT_MediaObject* object = NULL;
+  std::string thumb;
 
-    logger->debug("Building didl for object '{}'", item.GetPath());
+  logger->debug("Building didl for object '{}'", item.GetPath());
 
-    EClientQuirks quirks = GetClientQuirks(context);
+  EClientQuirks quirks = GetClientQuirks(context);
 
-    // get list of ip addresses
-    NPT_List<NPT_IpAddress> ips;
-    NPT_HttpUrl rooturi;
-    NPT_CHECK_LABEL(PLT_UPnPMessageHelper::GetIPAddresses(ips), failure);
+  // get list of ip addresses
+  NPT_List<NPT_IpAddress> ips;
+  NPT_HttpUrl rooturi;
+  NPT_CHECK_LABEL(PLT_UPnPMessageHelper::GetIPAddresses(ips), failure);
 
-    // if we're passed an interface where we received the request from
-    // move the ip to the top
-    if (context && context->GetLocalAddress().GetIpAddress().ToString() != "0.0.0.0") {
-        rooturi = NPT_HttpUrl(context->GetLocalAddress().GetIpAddress().ToString(), context->GetLocalAddress().GetPort(), "/");
-        ips.Remove(context->GetLocalAddress().GetIpAddress());
-        ips.Insert(ips.GetFirstItem(), context->GetLocalAddress().GetIpAddress());
+  // if we're passed an interface where we received the request from
+  // move the ip to the top
+  if (context && context->GetLocalAddress().GetIpAddress().ToString() != "0.0.0.0")
+  {
+    rooturi = NPT_HttpUrl(context->GetLocalAddress().GetIpAddress().ToString(),
+                          context->GetLocalAddress().GetPort(), "/");
+    ips.Remove(context->GetLocalAddress().GetIpAddress());
+    ips.Insert(ips.GetFirstItem(), context->GetLocalAddress().GetIpAddress());
     } else if(upnp_server) {
         rooturi = NPT_HttpUrl("localhost", upnp_server->GetPort(), "/");
     }
diff --git a/xbmc/network/upnp/UPnPPlayer.cpp b/xbmc/network/upnp/UPnPPlayer.cpp
index 6bd0cf80e614..726268ce3934 100644
--- a/xbmc/network/upnp/UPnPPlayer.cpp
+++ b/xbmc/network/upnp/UPnPPlayer.cpp
@@ -45,19 +45,19 @@ NPT_SET_LOCAL_LOGGER("xbmc.upnp.player")
 namespace UPNP
 {
 
-class CUPnPPlayerController
-  : public PLT_MediaControllerDelegate
-  , protected CStaticLoggerBase
+class CUPnPPlayerController : public PLT_MediaControllerDelegate, protected CStaticLoggerBase
 {
 public:
-  CUPnPPlayerController(PLT_MediaController* control, PLT_DeviceDataReference& device, IPlayerCallback& callback)
-    : CStaticLoggerBase("CUPnPPlayerController")
-    , m_control(control)
-    , m_transport(NULL)
-    , m_device(device)
-    , m_instance(0)
-    , m_callback(callback)
-    , m_postime(0)
+  CUPnPPlayerController(PLT_MediaController* control,
+                        PLT_DeviceDataReference& device,
+                        IPlayerCallback& callback)
+    : CStaticLoggerBase("CUPnPPlayerController"),
+      m_control(control),
+      m_transport(NULL),
+      m_device(device),
+      m_instance(0),
+      m_callback(callback),
+      m_postime(0)
   {
     m_posinfo = {};
     m_device->FindServiceByType("urn:schemas-upnp-org:service:AVTransport:1", m_transport);
@@ -158,12 +158,12 @@ class CUPnPPlayerController
 };
 
 CUPnPPlayer::CUPnPPlayer(IPlayerCallback& callback, const char* uuid)
-: IPlayer(callback)
-, m_control(NULL)
-, m_delegate(NULL)
-, m_started(false)
-, m_stopremote(false)
-, m_logger(CServiceBroker::GetLogging().GetLogger(StringUtils::Format("CUPnPPlayer[{}]", uuid)))
+  : IPlayer(callback),
+    m_control(NULL),
+    m_delegate(NULL),
+    m_started(false),
+    m_stopremote(false),
+    m_logger(CServiceBroker::GetLogging().GetLogger(StringUtils::Format("CUPnPPlayer[{}]", uuid)))
 {
   m_control  = CUPnP::GetInstance()->m_MediaController;
 
diff --git a/xbmc/network/upnp/UPnPServer.cpp b/xbmc/network/upnp/UPnPServer.cpp
index f1ddae56c445..8ae8bc6543cb 100644
--- a/xbmc/network/upnp/UPnPServer.cpp
+++ b/xbmc/network/upnp/UPnPServer.cpp
@@ -63,11 +63,12 @@ const char* video_containers[] = { "library://video/movies/titles.xml/", "librar
 /*----------------------------------------------------------------------
 |   CUPnPServer::CUPnPServer
 +---------------------------------------------------------------------*/
-CUPnPServer::CUPnPServer(const char* friendly_name, const char* uuid /*= NULL*/, int port /*= 0*/) :
-    PLT_MediaConnect(friendly_name, false, uuid, port),
+CUPnPServer::CUPnPServer(const char* friendly_name, const char* uuid /*= NULL*/, int port /*= 0*/)
+  : PLT_MediaConnect(friendly_name, false, uuid, port),
     PLT_FileMediaConnectDelegate("/", "/"),
     m_scanning(g_application.IsMusicScanning() || g_application.IsVideoScanning()),
-    m_logger(CServiceBroker::GetLogging().GetLogger(StringUtils::Format("CUPnPServer[{}]", friendly_name)))
+    m_logger(CServiceBroker::GetLogging().GetLogger(
+        StringUtils::Format("CUPnPServer[{}]", friendly_name)))
 {
 }
 
@@ -535,7 +536,7 @@ CUPnPServer::OnBrowseMetadata(PLT_ActionReference&          action,
 
     NPT_String                     didl;
     NPT_Reference<PLT_MediaObject> object;
-    NPT_String                     id = TranslateWMPObjectId(object_id, m_logger);
+    NPT_String id = TranslateWMPObjectId(object_id, m_logger);
     CFileItemPtr                   item;
     NPT_Reference<CThumbLoader>    thumb_loader;
 
@@ -635,9 +636,10 @@ CUPnPServer::OnBrowseDirectChildren(PLT_ActionReference&          action,
                                     const PLT_HttpRequestContext& context)
 {
     CFileItemList items;
-    NPT_String    parent_id = TranslateWMPObjectId(object_id, m_logger);
+    NPT_String parent_id = TranslateWMPObjectId(object_id, m_logger);
 
-   m_logger->info("Received Browse DirectChildren request for object '{}', with sort criteria {}", object_id, sort_criteria);
+    m_logger->info("Received Browse DirectChildren request for object '{}', with sort criteria {}",
+                   object_id, sort_criteria);
 
     if(NPT_FAILED(ObjectIDValidate(parent_id))) {
         action->SetError(701, "Incorrect ObjectID.");
@@ -738,9 +740,7 @@ CUPnPServer::BuildResponse(PLT_ActionReference&          action,
     NPT_COMPILER_UNUSED(sort_criteria);
 
     m_logger->debug("Building UPnP response with filter '{}', starting @ {} with {} requested",
-        filter,
-        starting_index,
-        requested_count);
+                    filter, starting_index, requested_count);
 
     // we will reuse this ThumbLoader for all items
     NPT_Reference<CThumbLoader> thumb_loader;
@@ -799,9 +799,7 @@ CUPnPServer::BuildResponse(PLT_ActionReference&          action,
 
     didl += didl_footer;
 
-    m_logger->debug("Returning UPnP response with {} items out of {} total matches",
-        count,
-        total);
+    m_logger->debug("Returning UPnP response with {} items out of {} total matches", count, total);
 
     NPT_CHECK(action->SetArgumentValue("Result", didl));
     NPT_CHECK(action->SetArgumentValue("NumberReturned", NPT_String::FromInteger(count)));
@@ -846,43 +844,52 @@ CUPnPServer::OnSearchContainer(PLT_ActionReference&          action,
                                const char*                   sort_criteria,
                                const PLT_HttpRequestContext& context)
 {
-  m_logger->debug("Received Search request for object '{}' with search '{}'",
-        object_id,
-        search_criteria);
-
-    NPT_String id = object_id;
-    if (id.StartsWith("musicdb://")) {
-        // we browse for all tracks given a genre, artist or album
-        if (NPT_String(search_criteria).Find("object.item.audioItem") >= 0) {
-            if (!id.EndsWith("/")) id += "/";
-            NPT_Cardinal count = id.SubString(10).Split("/").GetItemCount();
-            // remove extra empty node count
-            count = count?count-1:0;
-
-            // genre
-            if (id.StartsWith("musicdb://genres/")) {
-                // all tracks of all genres
-                if (count == 1)
-                    id += "-1/-1/-1/";
-                // all tracks of a specific genre
-                else if (count == 2)
-                    id += "-1/-1/";
-                // all tracks of a specific genre of a specific artist
-                else if (count == 3)
-                    id += "-1/";
-            } else if (id.StartsWith("musicdb://artists/")) {
-                // all tracks by all artists
-                if (count == 1)
-                    id += "-1/-1/";
-                // all tracks of a specific artist
-                else if (count == 2)
-                    id += "-1/";
-            } else if (id.StartsWith("musicdb://albums/")) {
-                // all albums ?
-                if (count == 1) id += "-1/";
-            }
-        }
-        return OnBrowseDirectChildren(action, id, filter, starting_index, requested_count, sort_criteria, context);
+  m_logger->debug("Received Search request for object '{}' with search '{}'", object_id,
+                  search_criteria);
+
+  NPT_String id = object_id;
+  if (id.StartsWith("musicdb://"))
+  {
+    // we browse for all tracks given a genre, artist or album
+    if (NPT_String(search_criteria).Find("object.item.audioItem") >= 0)
+    {
+      if (!id.EndsWith("/"))
+        id += "/";
+      NPT_Cardinal count = id.SubString(10).Split("/").GetItemCount();
+      // remove extra empty node count
+      count = count ? count - 1 : 0;
+
+      // genre
+      if (id.StartsWith("musicdb://genres/"))
+      {
+        // all tracks of all genres
+        if (count == 1)
+          id += "-1/-1/-1/";
+        // all tracks of a specific genre
+        else if (count == 2)
+          id += "-1/-1/";
+        // all tracks of a specific genre of a specific artist
+        else if (count == 3)
+          id += "-1/";
+      }
+      else if (id.StartsWith("musicdb://artists/"))
+      {
+        // all tracks by all artists
+        if (count == 1)
+          id += "-1/-1/";
+        // all tracks of a specific artist
+        else if (count == 2)
+          id += "-1/";
+      }
+      else if (id.StartsWith("musicdb://albums/"))
+      {
+        // all albums ?
+        if (count == 1)
+          id += "-1/";
+      }
+    }
+    return OnBrowseDirectChildren(action, id, filter, starting_index, requested_count,
+                                  sort_criteria, context);
     } else if (NPT_String(search_criteria).Find("object.item.audioItem") >= 0) {
         // look for artist, album & genre filters
         NPT_String genre = FindSubCriteria(search_criteria, "upnp:genre");
@@ -1014,8 +1021,8 @@ CUPnPServer::OnUpdateObject(PLT_ActionReference&             action,
     std::string path(CURL::Decode(object_id));
     CFileItem updated;
     updated.SetPath(path);
-    m_logger->info("OnUpdateObject: {} from {}",
-      path, (const char*) context.GetRemoteAddress().GetIpAddress().ToString());
+    m_logger->info("OnUpdateObject: {} from {}", path,
+                   (const char*)context.GetRemoteAddress().GetIpAddress().ToString());
 
     NPT_String playCount, position;
     int err;
@@ -1132,10 +1139,10 @@ CUPnPServer::OnUpdateObject(PLT_ActionReference&             action,
     msg = "Internal error";
 
 failure:
-    m_logger->error("OnUpdateObject failed with err {}: {}", err, msg);
-    action->SetError(err, msg);
-    service->PauseEventing(false);
-    return NPT_FAILURE;
+  m_logger->error("OnUpdateObject failed with err {}: {}", err, msg);
+  action->SetError(err, msg);
+  service->PauseEventing(false);
+  return NPT_FAILURE;
 }
 
 /*----------------------------------------------------------------------
@@ -1152,7 +1159,8 @@ CUPnPServer::ServeFile(const NPT_HttpRequest&              request,
     { NPT_AutoLock lock(m_FileMutex);
       if(NPT_SUCCEEDED(m_FileMap.Get(md5, file_path2))) {
         file_path = *file_path2;
-        m_logger->debug("Received request to serve '{}' = '{}'", (const char*)md5, (const char*)file_path);
+        m_logger->debug("Received request to serve '{}' = '{}'", (const char*)md5,
+                        (const char*)file_path);
       } else {
         m_logger->debug("Received request to serve unknown md5 '{}'", (const char*)md5);
         response.SetStatus(404, "File Not Found");
@@ -1227,8 +1235,7 @@ CUPnPServer::ServeFile(const NPT_HttpRequest&              request,
 |
 |   return true if sort criteria was matched
 +---------------------------------------------------------------------*/
-bool
-CUPnPServer::SortItems(CFileItemList& items, const char* sort_criteria, Logger logger)
+bool CUPnPServer::SortItems(CFileItemList& items, const char* sort_criteria, Logger logger)
 {
   std::string criteria(sort_criteria);
   if (criteria.empty()) {
@@ -1289,7 +1296,8 @@ CUPnPServer::SortItems(CFileItemList& items, const char* sort_criteria, Logger l
       continue; // needed so unidentified sort methods don't re-sort by label
     }
 
-    logger->info("Sorting by method {}, order {}, attributes {}", sorting.sortBy, sorting.sortOrder, sorting.sortAttributes);
+    logger->info("Sorting by method {}, order {}, attributes {}", sorting.sortBy, sorting.sortOrder,
+                 sorting.sortAttributes);
     items.Sort(sorting);
     sorted = true;
   }
diff --git a/xbmc/network/upnp/UPnPServer.h b/xbmc/network/upnp/UPnPServer.h
index 3c93bd28b578..a75ccabcd01c 100644
--- a/xbmc/network/upnp/UPnPServer.h
+++ b/xbmc/network/upnp/UPnPServer.h
@@ -134,7 +134,8 @@ class CUPnPServer : public PLT_MediaConnect,
     bool m_scanning;
 
     Logger m_logger;
-public:
+
+  public:
     // class members
     static NPT_UInt32 m_MaxReturnedItems;
 };
diff --git a/xbmc/network/upnp/UPnPSettings.cpp b/xbmc/network/upnp/UPnPSettings.cpp
index 966740afac6a..ba9f64bbfa6e 100644
--- a/xbmc/network/upnp/UPnPSettings.cpp
+++ b/xbmc/network/upnp/UPnPSettings.cpp
@@ -25,8 +25,7 @@
 
 using namespace XFILE;
 
-CUPnPSettings::CUPnPSettings()
-  : m_logger(CServiceBroker::GetLogging().GetLogger("CUPnPSettings"))
+CUPnPSettings::CUPnPSettings() : m_logger(CServiceBroker::GetLogging().GetLogger("CUPnPSettings"))
 {
   Clear();
 }

From 3e962d840a64648a3805d466d58272de81497083 Mon Sep 17 00:00:00 2001
From: montellese <montellese@kodi.tv>
Date: Mon, 23 Mar 2020 23:13:57 +0100
Subject: [PATCH 21/21] [network] CUPnPServer: remove unused SortItems() method

---
 xbmc/network/upnp/UPnPServer.cpp | 79 --------------------------------
 xbmc/network/upnp/UPnPServer.h   |  1 -
 2 files changed, 80 deletions(-)

diff --git a/xbmc/network/upnp/UPnPServer.cpp b/xbmc/network/upnp/UPnPServer.cpp
index 8ae8bc6543cb..e7f6890ffa89 100644
--- a/xbmc/network/upnp/UPnPServer.cpp
+++ b/xbmc/network/upnp/UPnPServer.cpp
@@ -1226,85 +1226,6 @@ CUPnPServer::ServeFile(const NPT_HttpRequest&              request,
                                        file_path);
 }
 
-/*----------------------------------------------------------------------
-|   CUPnPServer::SortItems
-|
-|   Only support upnp: & dc: namespaces for now.
-|   Other servers add their own vendor-specific sort methods. This could
-|   possibly be handled with 'quirks' in the long run.
-|
-|   return true if sort criteria was matched
-+---------------------------------------------------------------------*/
-bool CUPnPServer::SortItems(CFileItemList& items, const char* sort_criteria, Logger logger)
-{
-  std::string criteria(sort_criteria);
-  if (criteria.empty()) {
-    return false;
-  }
-
-  bool sorted = false;
-  std::vector<std::string> tokens = StringUtils::Split(criteria, ",");
-  for (std::vector<std::string>::reverse_iterator itr = tokens.rbegin(); itr != tokens.rend(); ++itr) {
-    SortDescription sorting;
-    /* Platinum guarantees 1st char is - or + */
-    sorting.sortOrder = StringUtils::StartsWith(*itr, "+") ? SortOrderAscending : SortOrderDescending;
-    std::string method = itr->substr(1);
-
-    /* resource specific */
-    if (StringUtils::EqualsNoCase(method, "res@duration"))
-      sorting.sortBy = SortByTime;
-    else if (StringUtils::EqualsNoCase(method, "res@size"))
-      sorting.sortBy = SortBySize;
-    else if (StringUtils::EqualsNoCase(method, "res@bitrate"))
-      sorting.sortBy = SortByBitrate;
-
-    /* dc: */
-    else if (StringUtils::EqualsNoCase(method, "dc:date"))
-      sorting.sortBy = SortByDate;
-    else if (StringUtils::EqualsNoCase(method, "dc:title"))
-    {
-      sorting.sortBy = SortByTitle;
-      sorting.sortAttributes = SortAttributeIgnoreArticle;
-    }
-
-    /* upnp: */
-    else if (StringUtils::EqualsNoCase(method, "upnp:album"))
-      sorting.sortBy = SortByAlbum;
-    else if (StringUtils::EqualsNoCase(method, "upnp:artist") ||
-             StringUtils::EqualsNoCase(method, "upnp:albumArtist"))
-      sorting.sortBy = SortByArtist;
-    else if (StringUtils::EqualsNoCase(method, "upnp:episodeNumber"))
-      sorting.sortBy = SortByEpisodeNumber;
-    else if (StringUtils::EqualsNoCase(method, "upnp:episodeCount"))
-      sorting.sortBy = SortByNumberOfEpisodes;
-    else if (StringUtils::EqualsNoCase(method, "upnp:episodeSeason"))
-      sorting.sortBy = SortBySeason;
-    else if (StringUtils::EqualsNoCase(method, "upnp:genre"))
-      sorting.sortBy = SortByGenre;
-    else if (StringUtils::EqualsNoCase(method, "upnp:originalTrackNumber"))
-      sorting.sortBy = SortByTrackNumber;
-    else if(StringUtils::EqualsNoCase(method, "upnp:rating"))
-      sorting.sortBy = SortByMPAA;
-    else if (StringUtils::EqualsNoCase(method, "xbmc:rating"))
-      sorting.sortBy = SortByRating;
-    else if (StringUtils::EqualsNoCase(method, "xbmc:dateadded"))
-      sorting.sortBy = SortByDateAdded;
-    else if (StringUtils::EqualsNoCase(method, "xbmc:votes"))
-      sorting.sortBy = SortByVotes;
-    else {
-      logger->warn("unsupported sort criteria '{}' passed", method.c_str());
-      continue; // needed so unidentified sort methods don't re-sort by label
-    }
-
-    logger->info("Sorting by method {}, order {}, attributes {}", sorting.sortBy, sorting.sortOrder,
-                 sorting.sortAttributes);
-    items.Sort(sorting);
-    sorted = true;
-  }
-
-  return sorted;
-}
-
 void
 CUPnPServer::DefaultSortItems(CFileItemList& items)
 {
diff --git a/xbmc/network/upnp/UPnPServer.h b/xbmc/network/upnp/UPnPServer.h
index a75ccabcd01c..b151801d5a71 100644
--- a/xbmc/network/upnp/UPnPServer.h
+++ b/xbmc/network/upnp/UPnPServer.h
@@ -116,7 +116,6 @@ class CUPnPServer : public PLT_MediaConnect,
                              const char*                   parent_id /* = NULL */);
 
     // class methods
-    static bool SortItems(CFileItemList& items, const char* sort_criteria, Logger logger);
     static void DefaultSortItems(CFileItemList& items);
     static NPT_String GetParentFolder(NPT_String file_path) {
         int index = file_path.ReverseFind("\\");
