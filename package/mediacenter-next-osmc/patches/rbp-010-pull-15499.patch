From ae906da968560fce1385456bb88f56e595305cce Mon Sep 17 00:00:00 2001
From: Joost van den Broek <jvandenbroek@gmail.com>
Date: Tue, 12 Feb 2019 14:09:57 +0100
Subject: [PATCH 1/2] CUtil::ValidatePath fix stripping double (back)slash
 chars

Only used by Python call xbmc.validatePath(). When double slash is found in supplied path, the remaining of the path is stripped of instead of just the double slash. This used to work as intended before the previous change, until Delete(x) got replaced by erase(x). Delete(x) was a function which called erase(x, 1).
---
 xbmc/Util.cpp | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/xbmc/Util.cpp b/xbmc/Util.cpp
index 5ce3e673055e..d6a47237ef31 100644
--- a/xbmc/Util.cpp
+++ b/xbmc/Util.cpp
@@ -1013,7 +1013,7 @@ std::string CUtil::ValidatePath(const std::string &path, bool bFixDoubleSlashes
       for (size_t x = 1; x < result.size() - 1; x++)
       {
         if (result[x] == '\\' && result[x+1] == '\\')
-          result.erase(x);
+          result.erase(x, 1);
       }
     }
   }
@@ -1031,7 +1031,7 @@ std::string CUtil::ValidatePath(const std::string &path, bool bFixDoubleSlashes
       for (size_t x = 2; x < result.size() - 1; x++)
       {
         if ( result[x] == '/' && result[x + 1] == '/' && !(result[x - 1] == ':' || (result[x - 1] == '/' && result[x - 2] == ':')) )
-          result.erase(x);
+          result.erase(x, 1);
       }
     }
   }

From a11b60d064c3fe571f5ee08df55bcd191da852c6 Mon Sep 17 00:00:00 2001
From: Joost van den Broek <jvandenbroek@gmail.com>
Date: Tue, 19 Feb 2019 09:49:18 +0100
Subject: [PATCH 2/2] TestUtil: Added ValidatePath Test

---
 xbmc/test/TestUtil.cpp | 24 ++++++++++++++++++++++++
 1 file changed, 24 insertions(+)

diff --git a/xbmc/test/TestUtil.cpp b/xbmc/test/TestUtil.cpp
index 3df3fc7fd512..bab3a7516ee9 100644
--- a/xbmc/test/TestUtil.cpp
+++ b/xbmc/test/TestUtil.cpp
@@ -102,3 +102,27 @@ TEST(TestUtil, MakeShortenPath)
   EXPECT_EQ(true, CUtil::MakeShortenPath("//test//string/is/long/and/very//much/so", result, 30));
   EXPECT_EQ("/../../../../../so", result);
 }
+
+TEST(TestUtil, ValidatePath)
+{
+  std::string path;
+#ifdef TARGET_WINDOWS
+  path = "C:/foo/bar/";
+  EXPECT_EQ(CUtil::ValidatePath(path), "C:\\foo\\bar\\");
+  path = "C:\\\\foo\\\\bar\\";
+  EXPECT_EQ(CUtil::ValidatePath(path, true), "C:\\foo\\bar\\");
+  path = "\\\\foo\\\\bar\\";
+  EXPECT_EQ(CUtil::ValidatePath(path, true), "\\\\foo\\bar\\");
+#else
+  path = "\\foo\\bar\\";
+  EXPECT_EQ(CUtil::ValidatePath(path), "/foo/bar/");
+  path = "/foo//bar/";
+  EXPECT_EQ(CUtil::ValidatePath(path, true), "/foo/bar/");
+#endif
+  path = "smb://foo/bar/";
+  EXPECT_EQ(CUtil::ValidatePath(path), "smb://foo/bar/");
+  path = "smb://foo//bar/";
+  EXPECT_EQ(CUtil::ValidatePath(path, true), "smb://foo/bar/");
+  path = "smb:\\\\foo\\\\bar\\";
+  EXPECT_EQ(CUtil::ValidatePath(path, true), "smb://foo/bar/");
+}
