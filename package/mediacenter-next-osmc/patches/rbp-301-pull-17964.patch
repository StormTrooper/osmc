From 16fd2f04c1d73030ec015711c98b0a7ce9fb9ab1 Mon Sep 17 00:00:00 2001
From: Kai Sommerfeld <kai.sommerfeld@gmx.com>
Date: Thu, 28 May 2020 18:52:31 +0200
Subject: [PATCH] [PVR] EPG container: Do not fetch EPG updates from the
 clients while system is suspended.

---
 xbmc/pvr/PVRManager.cpp       |  4 ++++
 xbmc/pvr/epg/EpgContainer.cpp | 23 ++++++++++++++++++-----
 xbmc/pvr/epg/EpgContainer.h   | 13 +++++++++++++
 3 files changed, 35 insertions(+), 5 deletions(-)

diff --git a/xbmc/pvr/PVRManager.cpp b/xbmc/pvr/PVRManager.cpp
index 46963383aad0..f90292df1410 100644
--- a/xbmc/pvr/PVRManager.cpp
+++ b/xbmc/pvr/PVRManager.cpp
@@ -587,6 +587,8 @@ void CPVRManager::OnSleep()
 
   SetWakeupCommand();
 
+  m_epgContainer.OnSystemSleep();
+
   m_addons->OnSystemSleep();
 }
 
@@ -594,6 +596,8 @@ void CPVRManager::OnWake()
 {
   m_addons->OnSystemWake();
 
+  m_epgContainer.OnSystemWake();
+
   PublishEvent(PVREvent::SystemWake);
 
   /* start job to search for missing channel icons */
diff --git a/xbmc/pvr/epg/EpgContainer.cpp b/xbmc/pvr/epg/EpgContainer.cpp
index 12ac71092169..fc48cb14e788 100644
--- a/xbmc/pvr/epg/EpgContainer.cpp
+++ b/xbmc/pvr/epg/EpgContainer.cpp
@@ -335,7 +335,7 @@ void CPVREpgContainer::Process()
     CDateTime::GetCurrentDateTime().GetAsUTCDateTime().GetAsTime(iNow);
     {
       CSingleLock lock(m_critSection);
-      bUpdateEpg = (iNow >= m_iNextEpgUpdate);
+      bUpdateEpg = (iNow >= m_iNextEpgUpdate) && !m_bSuspended;
     }
 
     /* update the EPG */
@@ -343,12 +343,15 @@ void CPVREpgContainer::Process()
       m_bIsInitialising = false;
 
     /* clean up old entries */
-    if (!m_bStop && iNow >= m_iLastEpgCleanup + CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->m_iEpgCleanupInterval)
+    if (!m_bStop && !m_bSuspended &&
+        iNow >= m_iLastEpgCleanup + CServiceBroker::GetSettingsComponent()
+                                        ->GetAdvancedSettings()
+                                        ->m_iEpgCleanupInterval)
       RemoveOldEntries();
 
     /* check for pending manual EPG updates */
 
-    while (!m_bStop)
+    while (!m_bStop && !m_bSuspended)
     {
       CEpgUpdateRequest request;
       {
@@ -367,7 +370,7 @@ void CPVREpgContainer::Process()
     /* check for pending EPG tag changes */
 
     // during Kodi startup, addons may push updates very early, even before EPGs are ready to use.
-    if (!m_bStop && CServiceBroker::GetPVRManager().EpgsCreated())
+    if (!m_bStop && !m_bSuspended && CServiceBroker::GetPVRManager().EpgsCreated())
     {
       unsigned int iProcessed = 0;
       XbmcThreads::EndTime processTimeslice(1000); // max 1 sec per cycle, regardless of how many events are in the queue
@@ -396,7 +399,7 @@ void CPVREpgContainer::Process()
       }
     }
 
-    if (!m_bStop)
+    if (!m_bStop && !m_bSuspended)
     {
       {
         CSingleLock lock(m_critSection);
@@ -860,4 +863,14 @@ void CPVREpgContainer::OnPlaybackStopped()
   m_bPlaying = false;
 }
 
+void CPVREpgContainer::OnSystemSleep()
+{
+  m_bSuspended = true;
+}
+
+void CPVREpgContainer::OnSystemWake()
+{
+  m_bSuspended = false;
+}
+
 } // namespace PVR
diff --git a/xbmc/pvr/epg/EpgContainer.h b/xbmc/pvr/epg/EpgContainer.h
index a47f0ee7b7f0..8b1e32beb45f 100644
--- a/xbmc/pvr/epg/EpgContainer.h
+++ b/xbmc/pvr/epg/EpgContainer.h
@@ -16,6 +16,7 @@
 #include "threads/Thread.h"
 #include "utils/EventStream.h"
 
+#include <atomic>
 #include <list>
 #include <map>
 #include <memory>
@@ -196,6 +197,16 @@ namespace PVR
      */
     void OnPlaybackStopped();
 
+    /*!
+     * @brief Inform the epg container that the system is going to sleep
+     */
+    void OnSystemSleep();
+
+    /*!
+     * @brief Inform the epg container that the system gets awake from sleep
+     */
+    void OnSystemWake();
+
   private:
     /*!
      * @brief Notify EPG table observers when the currently active tag changed.
@@ -286,5 +297,7 @@ namespace PVR
     bool m_bUpdateNotificationPending = false; /*!< true while an epg updated notification to observers is pending. */
     CPVRSettings m_settings;
     CEventSource<PVREvent> m_events;
+
+    std::atomic<bool> m_bSuspended = {false};
   };
 }
