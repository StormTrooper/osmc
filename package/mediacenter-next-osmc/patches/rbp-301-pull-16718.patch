From c647af85f640fa89837154a602f822833d35763f Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Sat, 5 Oct 2019 03:48:52 +0200
Subject: [PATCH 1/4] [addons][vis] change AddonInstance_Visualization to use
 pointers

This is intended to maintain backward compatibility when making changes.

Before, all the data was together which made adding things difficult and always required a complete version upgrade.
---
 xbmc/addons/Visualization.cpp                 | 73 +++++++-------
 .../kodi/addon-instance/Visualization.h       | 94 +++++++++----------
 2 files changed, 88 insertions(+), 79 deletions(-)

diff --git a/xbmc/addons/Visualization.cpp b/xbmc/addons/Visualization.cpp
index 6da5033b3a44..e8d700d8a7a7 100644
--- a/xbmc/addons/Visualization.cpp
+++ b/xbmc/addons/Visualization.cpp
@@ -23,18 +23,23 @@ CVisualization::CVisualization(ADDON::BinaryAddonBasePtr addonBase, float x, flo
   m_presetsPath = CSpecialProtocol::TranslatePath(Path());
   m_profilePath = CSpecialProtocol::TranslatePath(Profile());
 
-  m_struct = {{0}};
-  m_struct.props.x = static_cast<int>(x);
-  m_struct.props.y = static_cast<int>(y);
-  m_struct.props.width = static_cast<int>(w);
-  m_struct.props.height = static_cast<int>(h);
-  m_struct.props.device = CServiceBroker::GetWinSystem()->GetHWContext();
-  m_struct.props.pixelRatio = CServiceBroker::GetWinSystem()->GetGfxContext().GetResInfo().fPixelRatio;
-  m_struct.props.name = m_name.c_str();
-  m_struct.props.presets = m_presetsPath.c_str();
-  m_struct.props.profile = m_profilePath.c_str();
-  m_struct.toKodi.kodiInstance = this;
-  m_struct.toKodi.transfer_preset = transfer_preset;
+  m_struct.props = new AddonProps_Visualization;
+  m_struct.props->x = static_cast<int>(x);
+  m_struct.props->y = static_cast<int>(y);
+  m_struct.props->width = static_cast<int>(w);
+  m_struct.props->height = static_cast<int>(h);
+  m_struct.props->device = CServiceBroker::GetWinSystem()->GetHWContext();
+  m_struct.props->pixelRatio = CServiceBroker::GetWinSystem()->GetGfxContext().GetResInfo().fPixelRatio;
+  m_struct.props->name = m_name.c_str();
+  m_struct.props->presets = m_presetsPath.c_str();
+  m_struct.props->profile = m_profilePath.c_str();
+
+  m_struct.toKodi = new AddonToKodiFuncTable_Visualization;
+  m_struct.toKodi->kodiInstance = this;
+  m_struct.toKodi->transfer_preset = transfer_preset;
+
+  m_struct.toAddon = new KodiToAddonFuncTable_Visualization;
+  memset(m_struct.toAddon, 0, sizeof(KodiToAddonFuncTable_Visualization));
 
   /* Open the class "kodi::addon::CInstanceVisualization" on add-on side */
   if (CreateInstance(&m_struct) != ADDON_STATUS_OK)
@@ -44,58 +49,62 @@ CVisualization::CVisualization(ADDON::BinaryAddonBasePtr addonBase, float x, flo
   }
 
   /* presets becomes send with "transfer_preset" during call of function below */
-  if (m_struct.toAddon.get_presets)
-    m_struct.toAddon.get_presets(&m_struct);
+  if (m_struct.toAddon->get_presets)
+    m_struct.toAddon->get_presets(&m_struct);
 }
 
 CVisualization::~CVisualization()
 {
   /* Destroy the class "kodi::addon::CInstanceVisualization" on add-on side */
   DestroyInstance();
+
+  delete m_struct.toAddon;
+  delete m_struct.toKodi;
+  delete m_struct.props;
 }
 
 bool CVisualization::Start(int channels, int samplesPerSec, int bitsPerSample, const std::string& songName)
 {
-  if (m_struct.toAddon.start)
-    return m_struct.toAddon.start(&m_struct, channels, samplesPerSec, bitsPerSample, songName.c_str());
+  if (m_struct.toAddon->start)
+    return m_struct.toAddon->start(&m_struct, channels, samplesPerSec, bitsPerSample, songName.c_str());
   return false;
 }
 
 void CVisualization::Stop()
 {
-  if (m_struct.toAddon.stop)
-    m_struct.toAddon.stop(&m_struct);
+  if (m_struct.toAddon->stop)
+    m_struct.toAddon->stop(&m_struct);
 }
 
 void CVisualization::AudioData(const float* audioData, int audioDataLength, float *freqData, int freqDataLength)
 {
-  if (m_struct.toAddon.audio_data)
-    m_struct.toAddon.audio_data(&m_struct, audioData, audioDataLength, freqData, freqDataLength);
+  if (m_struct.toAddon->audio_data)
+    m_struct.toAddon->audio_data(&m_struct, audioData, audioDataLength, freqData, freqDataLength);
 }
 
 bool CVisualization::IsDirty()
 {
-  if (m_struct.toAddon.is_dirty)
-    return m_struct.toAddon.is_dirty(&m_struct);
+  if (m_struct.toAddon->is_dirty)
+    return m_struct.toAddon->is_dirty(&m_struct);
   return false;
 }
 
 void CVisualization::Render()
 {
-  if (m_struct.toAddon.render)
-    m_struct.toAddon.render(&m_struct);
+  if (m_struct.toAddon->render)
+    m_struct.toAddon->render(&m_struct);
 }
 
 void CVisualization::GetInfo(VIS_INFO *info)
 {
-  if (m_struct.toAddon.get_info)
-    m_struct.toAddon.get_info(&m_struct, info);
+  if (m_struct.toAddon->get_info)
+    m_struct.toAddon->get_info(&m_struct, info);
 }
 
 bool CVisualization::OnAction(VIS_ACTION action, const void *param)
 {
-  if (m_struct.toAddon.on_action)
-    return m_struct.toAddon.on_action(&m_struct, action, param);
+  if (m_struct.toAddon->on_action)
+    return m_struct.toAddon->on_action(&m_struct, action, param);
   return false;
 }
 
@@ -112,8 +121,8 @@ bool CVisualization::GetPresetList(std::vector<std::string> &vecpresets)
 
 int CVisualization::GetActivePreset()
 {
-  if (m_struct.toAddon.get_active_preset)
-    return m_struct.toAddon.get_active_preset(&m_struct);
+  if (m_struct.toAddon->get_active_preset)
+    return m_struct.toAddon->get_active_preset(&m_struct);
   return -1;
 }
 
@@ -126,8 +135,8 @@ std::string CVisualization::GetActivePresetName()
 
 bool CVisualization::IsLocked()
 {
-  if (m_struct.toAddon.is_locked)
-    return m_struct.toAddon.is_locked(&m_struct);
+  if (m_struct.toAddon->is_locked)
+    return m_struct.toAddon->is_locked(&m_struct);
   return false;
 }
 
diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/Visualization.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/Visualization.h
index d7ad1f16aa01..47ce2fb91743 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/Visualization.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/Visualization.h
@@ -79,9 +79,9 @@ typedef struct KodiToAddonFuncTable_Visualization /* internal */
 
 typedef struct AddonInstance_Visualization /* internal */
 {
-  AddonProps_Visualization props;
-  AddonToKodiFuncTable_Visualization toKodi;
-  KodiToAddonFuncTable_Visualization toAddon;
+  AddonProps_Visualization* props;
+  AddonToKodiFuncTable_Visualization* toKodi;
+  KodiToAddonFuncTable_Visualization* toAddon;
 } AddonInstance_Visualization;
 
 //============================================================================
@@ -556,7 +556,7 @@ namespace addon
     /// @note This is only available on **DirectX**, It us unused (`nullptr`) on
     /// **OpenGL**
     ///
-    inline void* Device() { return m_instanceData->props.device; }
+    inline void* Device() { return m_instanceData->props->device; }
     //--------------------------------------------------------------------------
 
     //==========================================================================
@@ -566,7 +566,7 @@ namespace addon
     ///
     /// @return The X position, in pixels
     ///
-    inline int X() { return m_instanceData->props.x; }
+    inline int X() { return m_instanceData->props->x; }
     //--------------------------------------------------------------------------
 
     //==========================================================================
@@ -576,7 +576,7 @@ namespace addon
     ///
     /// @return The Y position, in pixels
     ///
-    inline int Y() { return m_instanceData->props.y; }
+    inline int Y() { return m_instanceData->props->y; }
     //--------------------------------------------------------------------------
 
     //==========================================================================
@@ -586,7 +586,7 @@ namespace addon
     ///
     /// @return The width, in pixels
     ///
-    inline int Width() { return m_instanceData->props.width; }
+    inline int Width() { return m_instanceData->props->width; }
     //--------------------------------------------------------------------------
 
     //==========================================================================
@@ -596,7 +596,7 @@ namespace addon
     ///
     /// @return The height, in pixels
     ///
-    inline int Height() { return m_instanceData->props.height; }
+    inline int Height() { return m_instanceData->props->height; }
     //--------------------------------------------------------------------------
 
     //==========================================================================
@@ -607,7 +607,7 @@ namespace addon
     ///
     /// @return The pixel aspect ratio used by the display
     ///
-    inline float PixelRatio() { return m_instanceData->props.pixelRatio; }
+    inline float PixelRatio() { return m_instanceData->props->pixelRatio; }
     //--------------------------------------------------------------------------
 
     //==========================================================================
@@ -617,7 +617,7 @@ namespace addon
     ///
     /// @return The add-on name
     ///
-    inline std::string Name() { return m_instanceData->props.name; }
+    inline std::string Name() { return m_instanceData->props->name; }
     //--------------------------------------------------------------------------
 
     //==========================================================================
@@ -627,7 +627,7 @@ namespace addon
     ///
     /// @return The add-on installation path
     ///
-    inline std::string Presets() { return m_instanceData->props.presets; }
+    inline std::string Presets() { return m_instanceData->props->presets; }
     //--------------------------------------------------------------------------
 
     //==========================================================================
@@ -641,7 +641,7 @@ namespace addon
     ///
     /// @return Path to the user profile
     ///
-    inline std::string Profile() { return m_instanceData->props.profile; }
+    inline std::string Profile() { return m_instanceData->props->profile; }
     //--------------------------------------------------------------------------
     //@}
 
@@ -652,52 +652,52 @@ namespace addon
         throw std::logic_error("kodi::addon::CInstanceVisualization: Null pointer instance passed.");
 
       m_instanceData = static_cast<AddonInstance_Visualization*>(instance);
-      m_instanceData->toAddon.addonInstance = this;
-      m_instanceData->toAddon.start = ADDON_Start;
-      m_instanceData->toAddon.stop = ADDON_Stop;
-      m_instanceData->toAddon.audio_data = ADDON_AudioData;
-      m_instanceData->toAddon.render = ADDON_Render;
-      m_instanceData->toAddon.get_info = ADDON_GetInfo;
-      m_instanceData->toAddon.on_action = ADDON_OnAction;
-      m_instanceData->toAddon.get_presets = ADDON_GetPresets;
-      m_instanceData->toAddon.get_active_preset = ADDON_GetActivePreset;
-      m_instanceData->toAddon.is_locked = ADDON_IsLocked;
+      m_instanceData->toAddon->addonInstance = this;
+      m_instanceData->toAddon->start = ADDON_Start;
+      m_instanceData->toAddon->stop = ADDON_Stop;
+      m_instanceData->toAddon->audio_data = ADDON_AudioData;
+      m_instanceData->toAddon->render = ADDON_Render;
+      m_instanceData->toAddon->get_info = ADDON_GetInfo;
+      m_instanceData->toAddon->on_action = ADDON_OnAction;
+      m_instanceData->toAddon->get_presets = ADDON_GetPresets;
+      m_instanceData->toAddon->get_active_preset = ADDON_GetActivePreset;
+      m_instanceData->toAddon->is_locked = ADDON_IsLocked;
     }
 
     inline static bool ADDON_Start(const AddonInstance_Visualization* addon, int channels, int samplesPerSec, int bitsPerSample, const char* songName)
     {
-      addon->toAddon.addonInstance->m_renderHelper = kodi::gui::GetRenderHelper();
-      return addon->toAddon.addonInstance->Start(channels, samplesPerSec, bitsPerSample, songName);
+      addon->toAddon->addonInstance->m_renderHelper = kodi::gui::GetRenderHelper();
+      return addon->toAddon->addonInstance->Start(channels, samplesPerSec, bitsPerSample, songName);
     }
 
     inline static void ADDON_Stop(const AddonInstance_Visualization* addon)
     {
-      addon->toAddon.addonInstance->Stop();
-      addon->toAddon.addonInstance->m_renderHelper = nullptr;
+      addon->toAddon->addonInstance->Stop();
+      addon->toAddon->addonInstance->m_renderHelper = nullptr;
     }
 
     inline static void ADDON_AudioData(const AddonInstance_Visualization* addon, const float* audioData, int audioDataLength, float *freqData, int freqDataLength)
     {
-      addon->toAddon.addonInstance->AudioData(audioData, audioDataLength, freqData, freqDataLength);
+      addon->toAddon->addonInstance->AudioData(audioData, audioDataLength, freqData, freqDataLength);
     }
 
     inline static bool ADDON_IsDirty(const AddonInstance_Visualization* addon)
     {
-      return addon->toAddon.addonInstance->IsDirty();
+      return addon->toAddon->addonInstance->IsDirty();
     }
 
     inline static void ADDON_Render(const AddonInstance_Visualization* addon)
     {
-      if (!addon->toAddon.addonInstance->m_renderHelper)
+      if (!addon->toAddon->addonInstance->m_renderHelper)
         return;
-      addon->toAddon.addonInstance->m_renderHelper->Begin();
-      addon->toAddon.addonInstance->Render();
-      addon->toAddon.addonInstance->m_renderHelper->End();
+      addon->toAddon->addonInstance->m_renderHelper->Begin();
+      addon->toAddon->addonInstance->Render();
+      addon->toAddon->addonInstance->m_renderHelper->End();
     }
 
     inline static void ADDON_GetInfo(const AddonInstance_Visualization* addon, VIS_INFO *info)
     {
-      addon->toAddon.addonInstance->GetInfo(info->bWantsFreq, info->iSyncDelay);
+      addon->toAddon->addonInstance->GetInfo(info->bWantsFreq, info->iSyncDelay);
     }
 
     inline static bool ADDON_OnAction(const AddonInstance_Visualization* addon, VIS_ACTION action, const void *param)
@@ -705,24 +705,24 @@ namespace addon
       switch (action)
       {
         case VIS_ACTION_NEXT_PRESET:
-          return addon->toAddon.addonInstance->NextPreset();
+          return addon->toAddon->addonInstance->NextPreset();
         case VIS_ACTION_PREV_PRESET:
-          return addon->toAddon.addonInstance->PrevPreset();
+          return addon->toAddon->addonInstance->PrevPreset();
         case VIS_ACTION_LOAD_PRESET:
-          return addon->toAddon.addonInstance->LoadPreset(*static_cast<const int*>(param));
+          return addon->toAddon->addonInstance->LoadPreset(*static_cast<const int*>(param));
         case VIS_ACTION_RANDOM_PRESET:
-          return addon->toAddon.addonInstance->RandomPreset();
+          return addon->toAddon->addonInstance->RandomPreset();
         case VIS_ACTION_LOCK_PRESET:
-          addon->toAddon.addonInstance->m_presetLockedByUser = !addon->toAddon.addonInstance->m_presetLockedByUser;
-          return addon->toAddon.addonInstance->LockPreset(addon->toAddon.addonInstance->m_presetLockedByUser);
+          addon->toAddon->addonInstance->m_presetLockedByUser = !addon->toAddon->addonInstance->m_presetLockedByUser;
+          return addon->toAddon->addonInstance->LockPreset(addon->toAddon->addonInstance->m_presetLockedByUser);
         case VIS_ACTION_RATE_PRESET_PLUS:
-          return addon->toAddon.addonInstance->RatePreset(true);
+          return addon->toAddon->addonInstance->RatePreset(true);
         case VIS_ACTION_RATE_PRESET_MINUS:
-          return addon->toAddon.addonInstance->RatePreset(false);
+          return addon->toAddon->addonInstance->RatePreset(false);
         case VIS_ACTION_UPDATE_ALBUMART:
-          return addon->toAddon.addonInstance->UpdateAlbumart(static_cast<const char*>(param));
+          return addon->toAddon->addonInstance->UpdateAlbumart(static_cast<const char*>(param));
         case VIS_ACTION_UPDATE_TRACK:
-          return addon->toAddon.addonInstance->UpdateTrack(*static_cast<const VisTrack*>(param));
+          return addon->toAddon->addonInstance->UpdateTrack(*static_cast<const VisTrack*>(param));
         case VIS_ACTION_NONE:
         default:
           break;
@@ -733,10 +733,10 @@ namespace addon
     inline static unsigned int ADDON_GetPresets(const AddonInstance_Visualization* addon)
     {
       std::vector<std::string> presets;
-      if (addon->toAddon.addonInstance->GetPresets(presets))
+      if (addon->toAddon->addonInstance->GetPresets(presets))
       {
         for (auto it : presets)
-          addon->toAddon.addonInstance->m_instanceData->toKodi.transfer_preset(addon->toKodi.kodiInstance, it.c_str());
+          addon->toAddon->addonInstance->m_instanceData->toKodi->transfer_preset(addon->toKodi->kodiInstance, it.c_str());
       }
 
       return static_cast<unsigned int>(presets.size());
@@ -744,12 +744,12 @@ namespace addon
 
     inline static int ADDON_GetActivePreset(const AddonInstance_Visualization* addon)
     {
-      return addon->toAddon.addonInstance->GetActivePreset();
+      return addon->toAddon->addonInstance->GetActivePreset();
     }
 
     inline static bool ADDON_IsLocked(const AddonInstance_Visualization* addon)
     {
-      return addon->toAddon.addonInstance->IsLocked();
+      return addon->toAddon->addonInstance->IsLocked();
     }
 
     std::shared_ptr<kodi::gui::IRenderHelper> m_renderHelper;

From 9031a77a36d4e51588b12af4ab7bf0525e2ea26d Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Tue, 8 Oct 2019 16:19:59 +0200
Subject: [PATCH 2/4] [addons][vis] fix address set of is_dirty function

Before was this address not set and bring mistakes to Kodi.
---
 .../include/kodi/addon-instance/Visualization.h                  | 1 +
 1 file changed, 1 insertion(+)

diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/Visualization.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/Visualization.h
index 47ce2fb91743..f95947abbeb3 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/Visualization.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/Visualization.h
@@ -656,6 +656,7 @@ namespace addon
       m_instanceData->toAddon->start = ADDON_Start;
       m_instanceData->toAddon->stop = ADDON_Stop;
       m_instanceData->toAddon->audio_data = ADDON_AudioData;
+      m_instanceData->toAddon->is_dirty = ADDON_IsDirty;
       m_instanceData->toAddon->render = ADDON_Render;
       m_instanceData->toAddon->get_info = ADDON_GetInfo;
       m_instanceData->toAddon->on_action = ADDON_OnAction;

From 727ad7b414e0a788831c18356759a31d1c83efa0 Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Sat, 5 Oct 2019 04:05:57 +0200
Subject: [PATCH 3/4] [addons][vis][gui] use IsDirty addon call again

Before was the IsDirty never called as it was alone in a unused Function.

This shifts it to the "Process" call and if "IsDirty" returns true the "MarkDirtyRegion" is called. Most addons do not use the IsDirty and therefore is always true as default, so no big changes occur.

However, if needed now, the IsDirty can also be used on the addon.
---
 xbmc/guilib/GUIVisualisationControl.cpp | 10 ++--------
 xbmc/guilib/GUIVisualisationControl.h   |  1 -
 2 files changed, 2 insertions(+), 9 deletions(-)

diff --git a/xbmc/guilib/GUIVisualisationControl.cpp b/xbmc/guilib/GUIVisualisationControl.cpp
index 1eccad219e76..c63751b06610 100644
--- a/xbmc/guilib/GUIVisualisationControl.cpp
+++ b/xbmc/guilib/GUIVisualisationControl.cpp
@@ -183,19 +183,13 @@ void CGUIVisualisationControl::Process(unsigned int currentTime, CDirtyRegionLis
       m_updateTrack = false;
     }
 
-    MarkDirtyRegion();
+    if (m_instance && m_instance->IsDirty())
+      MarkDirtyRegion();
   }
 
   CGUIControl::Process(currentTime, dirtyregions);
 }
 
-bool CGUIVisualisationControl::IsDirty()
-{
-  if (m_instance)
-    return m_instance->IsDirty();
-  return false;
-}
-
 void CGUIVisualisationControl::Render()
 {
   if (m_instance && m_alreadyStarted)
diff --git a/xbmc/guilib/GUIVisualisationControl.h b/xbmc/guilib/GUIVisualisationControl.h
index b1feb55da6f0..207850c44491 100644
--- a/xbmc/guilib/GUIVisualisationControl.h
+++ b/xbmc/guilib/GUIVisualisationControl.h
@@ -50,7 +50,6 @@ class CGUIVisualisationControl : public CGUIControl, public IAudioCallback
   // Child functions related to CGUIControl
   void FreeResources(bool immediately = false) override;
   void Process(unsigned int currentTime, CDirtyRegionList &dirtyregions) override;
-  virtual bool IsDirty();
   void Render() override;
   void UpdateVisibility(const CGUIListItem *item = nullptr) override;
   bool OnAction(const CAction &action) override;

From 9a1b6acc244c4ae62cc861810706618f47ac7e0b Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Sat, 5 Oct 2019 12:15:46 +0200
Subject: [PATCH 4/4] [addons][vis] add function to transfer presets and
 increase version to 2.0.2

This is unfortunately necessary because of a small hen and egg problem. When using Angle to Windows, the GL is only supported at the startup call.

To ProjectM e.g. the presets can only be captured after the `new projectM` call, which in turn requires GL.
Hereby it is possible to transmit this during the "Start" call from the addon.

The new clear function is only used within the headers to avoid flooding on multiple calls.
---
 xbmc/addons/Visualization.cpp                 | 13 ++++++++++++
 xbmc/addons/Visualization.h                   |  1 +
 .../kodi/addon-instance/Visualization.h       | 21 +++++++++++++++++++
 .../include/kodi/versions.h                   |  4 ++--
 4 files changed, 37 insertions(+), 2 deletions(-)

diff --git a/xbmc/addons/Visualization.cpp b/xbmc/addons/Visualization.cpp
index e8d700d8a7a7..4b76848b19d2 100644
--- a/xbmc/addons/Visualization.cpp
+++ b/xbmc/addons/Visualization.cpp
@@ -37,6 +37,7 @@ CVisualization::CVisualization(ADDON::BinaryAddonBasePtr addonBase, float x, flo
   m_struct.toKodi = new AddonToKodiFuncTable_Visualization;
   m_struct.toKodi->kodiInstance = this;
   m_struct.toKodi->transfer_preset = transfer_preset;
+  m_struct.toKodi->clear_presets = clear_presets;
 
   m_struct.toAddon = new KodiToAddonFuncTable_Visualization;
   memset(m_struct.toAddon, 0, sizeof(KodiToAddonFuncTable_Visualization));
@@ -152,4 +153,16 @@ void CVisualization::transfer_preset(void* kodiInstance, const char* preset)
   addon->m_presets.emplace_back(preset);
 }
 
+void CVisualization::clear_presets(void* kodiInstance)
+{
+  CVisualization* addon = static_cast<CVisualization*>(kodiInstance);
+  if (!addon)
+  {
+    CLog::Log(LOGERROR, "CVisualization::%s - invalid handler data", __FUNCTION__);
+    return;
+  }
+
+  addon->m_presets.clear();
+}
+
 } /* namespace ADDON */
diff --git a/xbmc/addons/Visualization.h b/xbmc/addons/Visualization.h
index d5b1812a708d..e0ded9274b0f 100644
--- a/xbmc/addons/Visualization.h
+++ b/xbmc/addons/Visualization.h
@@ -43,6 +43,7 @@ class CVisualization : public IAddonInstanceHandler
 
   // Static function to transfer data from add-on to kodi
   static void transfer_preset(void* kodiInstance, const char* preset);
+  static void clear_presets(void* kodiInstance);
 };
 
 } /* namespace ADDON */
diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/Visualization.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/Visualization.h
index f95947abbeb3..cda71bc020b2 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/Visualization.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/Visualization.h
@@ -60,6 +60,7 @@ typedef struct AddonToKodiFuncTable_Visualization /* internal */
 {
   KODI_HANDLE kodiInstance;
   void (__cdecl* transfer_preset) (void* kodiInstance, const char* preset);
+  void (__cdecl* clear_presets) (void* kodiInstance);
 } AddonToKodiFuncTable_Visualization;
 
 typedef struct KodiToAddonFuncTable_Visualization /* internal */
@@ -546,6 +547,26 @@ namespace addon
     ///
     //@{
 
+    //==========================================================================
+    ///
+    /// @ingroup cpp_kodi_addon_visualization_CB
+    /// @brief To transfer available presets on addon
+    ///
+    /// Used if @ref GetPresets not possible to use, e.g. where available presets
+    /// are only known during @ref Start call.
+    ///
+    /// @param[in] presets List to store available presets.
+    ///
+    /// @note The function should only be called once, if possible
+    ///
+    inline void TransferPresets(const std::vector<std::string>& presets)
+    {
+      m_instanceData->toKodi->clear_presets(m_instanceData->toKodi->kodiInstance);
+      for (auto it : presets)
+        m_instanceData->toKodi->transfer_preset(m_instanceData->toKodi->kodiInstance, it.c_str());
+    }
+    //--------------------------------------------------------------------------
+
     //==========================================================================
     ///
     /// @ingroup cpp_kodi_addon_visualization_CB
diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h
index 0983af735a3a..ae80dfc445dd 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h
@@ -117,8 +117,8 @@
 #define ADDON_INSTANCE_VERSION_VFS_XML_ID             "kodi.binary.instance.vfs"
 #define ADDON_INSTANCE_VERSION_VFS_DEPENDS            "addon-instance/VFS.h"
 
-#define ADDON_INSTANCE_VERSION_VISUALIZATION          "2.0.1"
-#define ADDON_INSTANCE_VERSION_VISUALIZATION_MIN      "2.0.0"
+#define ADDON_INSTANCE_VERSION_VISUALIZATION          "2.0.2"
+#define ADDON_INSTANCE_VERSION_VISUALIZATION_MIN      "2.0.2"
 #define ADDON_INSTANCE_VERSION_VISUALIZATION_XML_ID   "kodi.binary.instance.visualization"
 #define ADDON_INSTANCE_VERSION_VISUALIZATION_DEPENDS  "addon-instance/Visualization.h"
 
