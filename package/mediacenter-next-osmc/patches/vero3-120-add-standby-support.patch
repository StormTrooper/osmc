From 110913561f5123b20b465582e771cfd1a5017f73 Mon Sep 17 00:00:00 2001
From: Sam Nazarko <email@samnazarko.co.uk>
Date: Tue, 27 Feb 2018 23:33:31 +0000
Subject: [PATCH] Vero 4K: add standby support

Signed-off-by: Sam Nazarko <email@samnazarko.co.uk>
---
 xbmc/Application.cpp                  | 57 +++++++++++++++++++++++++++++++++++
 xbmc/Application.h                    |  5 +++
 xbmc/network/Network.cpp              |  5 +++
 xbmc/powermanagement/PowerManager.cpp |  4 ++-
 4 files changed, 70 insertions(+), 1 deletion(-)

diff --git a/xbmc/Application.cpp b/xbmc/Application.cpp
index e64e495..9a28ce2 100644
--- a/xbmc/Application.cpp
+++ b/xbmc/Application.cpp
@@ -186,6 +186,7 @@
 
 #if defined(HAS_LIBAMCODEC)
 #include "utils/AMLUtils.h"
+#include "utils/SysfsUtils.h"
 #endif
 
 //TODO: XInitThreads
@@ -3456,6 +3457,9 @@ bool CApplication::WakeUpScreenSaverAndDPMS(bool bPowerOffKeyPressed /* = false
 
 bool CApplication::WakeUpScreenSaver(bool bPowerOffKeyPressed /* = false */)
 {
+  // was vero in standby?
+  if (m_bVeroStandby)
+        ToggleStandby();
   if (m_iScreenSaveLock == 2)
     return false;
 
@@ -3632,6 +3636,59 @@ void CApplication::CheckScreenSaverAndDPMS()
   }
 }
 
+//activate screensaver for OSMC
+void CApplication::ActivateScreenSaverStandby()
+{
+  CLog::Log(LOGINFO, "Activating Vero standby mode");
+    if (m_appPlayer.IsPlayingVideo())
+      StopPlaying();
+  ToggleStandby();
+  CServiceBroker::GetAnnouncementManager()->Announce(ANNOUNCEMENT::GUI, "xbmc", "OnScreensaverActivated");
+  CServiceBroker::GetGUI()->GetWindowManager().CloseDialogs(true);
+}
+
+void CApplication::ToggleStandby()
+{
+  CLog::Log(LOGINFO, "Toggle standby state is %s", m_bVeroStandby ? "waking" : "sleeping");
+  int sysfs_toggle = m_bVeroStandby;
+  CLog::Log(LOGINFO, "CApplication::ToggleStandby -- Toggle TMDS clock to %d", sysfs_toggle);
+  SysfsUtils::SetInt("/sys/class/amhdmitx/amhdmitx0/phy", sysfs_toggle);
+  CLog::Log(LOGINFO, "CApplication::ToggleStandby -- Toggle LED brightness to %d", sysfs_toggle);
+  SysfsUtils::SetInt("/sys/class/leds/led-sys/brightness", sysfs_toggle);
+  std::string cpu_governor = "powersave";
+  if (m_bVeroStandby)
+        cpu_governor = "ondemand";
+  CLog::Log(LOGINFO, "CApplication::ToggleStandby -- governor will now be %s", cpu_governor.c_str());
+  for (int i = 0; i < 4; i++) {
+	std::stringstream ss_govpath;
+	ss_govpath << "/sys/devices/system/cpu/cpu" << i << "/cpufreq/scaling_governor";
+	SysfsUtils::SetString(ss_govpath.str(), cpu_governor);
+  }
+  std::string hpdlock = "hpd_lock1";
+  if (m_bVeroStandby && ! CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_VIDEOSCREEN_LOCKHPD))
+	hpdlock = "hpd_lock0";
+  CLog::Log(LOGINFO, "CApplication::ToggleStandby -- HPD locking will now be %s", hpdlock.c_str());
+  SysfsUtils::SetString("/sys/class/amhdmitx/amhdmitx0/debug", hpdlock);
+  if (m_bVeroStandby)
+	CApplicationMessenger::GetInstance().PostMsg(TMSG_CECACTIVATESOURCE); // wake cec
+
+  std::string strStandbyScript;
+  if (m_bVeroStandby)
+	strStandbyScript = CSpecialProtocol::TranslatePath("special://profile/wake.py");
+  else
+	strStandbyScript = CSpecialProtocol::TranslatePath("special://profile/standby.py");
+  CLog::Log(LOGNOTICE, "CApplication::ToggleStandby -- checking for existence of %s", strStandbyScript.c_str());
+
+  if (XFILE::CFile::Exists(strStandbyScript)) {
+    CLog::Log(LOGNOTICE, "CApplication::ToggleStandby -- script %s found", strStandbyScript.c_str());
+    CScriptInvocationManager::GetInstance().ExecuteAsync(strStandbyScript);
+  }
+
+  m_bVeroStandby = ! m_bVeroStandby; //invert state
+  m_screensaverActive = m_bVeroStandby;
+  return;
+}
+
 // activate the screensaver.
 // if forceType is true, we ignore the various conditions that can alter
 // the type of screensaver displayed
diff --git a/xbmc/Application.h b/xbmc/Application.h
index 8a54e4a..b8466ba 100644
--- a/xbmc/Application.h
+++ b/xbmc/Application.h
@@ -215,6 +215,8 @@ public:
   // Checks whether the screensaver and / or DPMS should become active.
   void CheckScreenSaverAndDPMS();
   void ActivateScreenSaver(bool forceType = false);
+  void ActivateScreenSaverStandby();
+  void ToggleStandby();
   void CloseNetworkShares();
 
   void ShowAppMigrationMessage();
@@ -372,6 +374,8 @@ public:
 
   void SetRenderGUI(bool renderGUI);
 
+  bool IsVeroStandby() const { return m_bVeroStandby; }
+
 protected:
   bool OnSettingsSaving() const override;
   bool Load(const TiXmlNode *settings) override;
@@ -418,6 +422,7 @@ protected:
 #endif
   // screensaver
   bool m_screensaverActive = false;
+  bool m_bVeroStandby;
   std::string m_screensaverIdInUse;
   ADDON::AddonPtr m_pythonScreenSaver; // @warning: Fallback for Python interface, for binaries not needed!
   // OS screen saver inhibitor that is always active if user selected a Kodi screen saver
diff --git a/xbmc/network/Network.cpp b/xbmc/network/Network.cpp
index 8b7fe93..bfd59c1 100644
--- a/xbmc/network/Network.cpp
+++ b/xbmc/network/Network.cpp
@@ -26,6 +26,7 @@
 #include "platform/linux/XTimeUtils.h"
 #endif
 #include "utils/StringUtils.h"
+#include "Application.h"
 
 using namespace KODI::MESSAGING;
 
@@ -283,6 +284,10 @@ void CNetworkBase::NetworkMessage(EMESSAGE message, int param)
 
 bool CNetworkBase::WakeOnLan(const char* mac)
 {
+  /* Don't do this in standby */
+  if (g_application.IsVeroStandby())
+	return true;
+
   int i, j, packet;
   unsigned char ethaddr[8];
   unsigned char buf [128];
diff --git a/xbmc/powermanagement/PowerManager.cpp b/xbmc/powermanagement/PowerManager.cpp
index 9c13b85..d6fdb24 100644
--- a/xbmc/powermanagement/PowerManager.cpp
+++ b/xbmc/powermanagement/PowerManager.cpp
@@ -110,7 +110,9 @@ bool CPowerManager::Powerdown()
 
 bool CPowerManager::Suspend()
 {
-  return (CanSuspend() && m_instance->Suspend());
+  CLog::Log(LOGNOTICE, "Activating standby mode");
+  g_application.ActivateScreenSaverStandby();
+  return true;
 }
 
 bool CPowerManager::Hibernate()
-- 
2.7.4

