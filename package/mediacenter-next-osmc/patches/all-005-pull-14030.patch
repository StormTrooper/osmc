From 73fe26fe0655b6f83c88d4302d4e29dc3c007f2a Mon Sep 17 00:00:00 2001
From: Lukas Rusak <lorusak@gmail.com>
Date: Wed, 13 Jun 2018 00:38:25 -0700
Subject: [PATCH] LinuxRendererGLES: consolidate custom renderers

---
 .../VideoRenderers/HwDecRender/RendererMediaCodec.cpp    |  2 +-
 .../VideoRenderers/HwDecRender/RendererVTBGLES.cpp       | 13 ++++++-------
 .../VideoPlayer/VideoRenderers/LinuxRendererGLES.cpp     | 16 +++-------------
 .../cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.h |  9 ++-------
 4 files changed, 12 insertions(+), 28 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererMediaCodec.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererMediaCodec.cpp
index f42793fe599e..4f23d2f9b9af 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererMediaCodec.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererMediaCodec.cpp
@@ -116,7 +116,7 @@ bool CRendererMediaCodec::LoadShadersHook()
 {
   CLog::Log(LOGNOTICE, "GL: Using MediaCodec render method");
   m_textureTarget = GL_TEXTURE_2D;
-  m_renderMethod = RENDER_MEDIACODEC;
+  m_renderMethod = RENDER_CUSTOM;
   return true;
 }
 
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVTBGLES.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVTBGLES.cpp
index 4fda7acc0192..396c930013c3 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVTBGLES.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVTBGLES.cpp
@@ -108,7 +108,7 @@ bool CRendererVTB::LoadShadersHook()
   float ios_version = CDarwinUtils::GetIOSVersion();
   CLog::Log(LOGNOTICE, "GL: Using CVBREF render method");
   m_textureTarget = GL_TEXTURE_2D;
-  m_renderMethod = RENDER_CVREF;
+  m_renderMethod = RENDER_CUSTOM;
 
   if (ios_version < 5.0)
   {
@@ -138,15 +138,15 @@ bool CRendererVTB::CreateTexture(int index)
   YUVBUFFER &buf = m_buffers[index];
   YuvImage &im = buf.image;
   YUVPLANE (&planes)[YuvImage::MAX_PLANES] = buf.fields[0];
-  
+
   DeleteTexture(index);
-  
+
   memset(&im    , 0, sizeof(im));
   memset(&planes, 0, sizeof(YUVPLANE[YuvImage::MAX_PLANES]));
-  
+
   im.height = m_sourceHeight;
   im.width = m_sourceWidth;
-  
+
   planes[0].texwidth  = im.width;
   planes[0].texheight = im.height;
   planes[1].texwidth  = planes[0].texwidth >> im.cshift_x;
@@ -239,7 +239,6 @@ bool CRendererVTB::UploadTexture(int index)
   planes[1].id = CVOpenGLESTextureGetName(renderBuf.m_textureUV);
   planes[2].id = CVOpenGLESTextureGetName(renderBuf.m_textureUV);
 
-
   for (int p=0; p<2; p++)
   {
     glBindTexture(m_textureTarget, planes[p].id);
@@ -276,7 +275,7 @@ bool CRendererVTB::NeedBuffer(int idx)
     if (syncState != GL_SIGNALED_APPLE)
       return true;
   }
-  
+
   return false;
 }
 
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.cpp
index 8620e0125764..130a42226c4b 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.cpp
@@ -1047,15 +1047,8 @@ bool CLinuxRendererGLES::RenderCapture(CRenderCapture* capture)
   glDisable(GL_BLEND);
 
   glMatrixModview.Push();
-  // fixme - we know that cvref  & eglimg are already flipped in y direction
-  // but somehow this also effects the rendercapture here
-  // therefore we have to skip the flip here or we get upside down
-  // images
-  if (m_renderMethod != RENDER_CVREF)
-  {
-    glMatrixModview->Translatef(0.0f, capture->GetHeight(), 0.0f);
-    glMatrixModview->Scalef(1.0f, -1.0f, 1.0f);
-  }
+  glMatrixModview->Translatef(0.0f, capture->GetHeight(), 0.0f);
+  glMatrixModview->Scalef(1.0f, -1.0f, 1.0f);
   glMatrixModview.Load();
 
   capture->BeginRender();
@@ -1241,10 +1234,7 @@ bool CLinuxRendererGLES::CreateYV12Texture(int index)
         format = GL_LUMINANCE;
       internalformat = GetInternalFormat(format, im.bpp);
 
-      if(m_renderMethod & RENDER_POT)
-        CLog::Log(LOGDEBUG, "GL: Creating YUV POT texture of size %d x %d",  plane.texwidth, plane.texheight);
-      else
-        CLog::Log(LOGDEBUG,  "GL: Creating YUV NPOT texture of size %d x %d", plane.texwidth, plane.texheight);
+      CLog::Log(LOGDEBUG,  "GL: Creating YUV NPOT texture of size %d x %d", plane.texwidth, plane.texheight);
 
       glTexImage2D(m_textureTarget, 0, internalformat, plane.texwidth, plane.texheight, 0, format, GL_UNSIGNED_BYTE, NULL);
 
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.h b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.h
index 5da862f99c4e..a67f73c9ffaa 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.h
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.h
@@ -64,13 +64,8 @@ struct YUVCOEF
 
 enum RenderMethod
 {
-  RENDER_GLSL   = 0x001,
-  RENDER_SW     = 0x004,
-  RENDER_POT    = 0x010,
-  RENDER_OMXEGL = 0x040,
-  RENDER_CVREF  = 0x080,
-  RENDER_MEDIACODEC = 0x400,
-  RENDER_MEDIACODECSURFACE = 0x800,
+  RENDER_GLSL = 0x01,
+  RENDER_CUSTOM = 0x02,
 };
 
 enum RenderQuality
