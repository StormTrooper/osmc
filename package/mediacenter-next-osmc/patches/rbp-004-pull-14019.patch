From 0eac47320d7d7f86254af0c805e3ed5708712556 Mon Sep 17 00:00:00 2001
From: Garrett Brown <themagnificentmrb@gmail.com>
Date: Fri, 8 Jun 2018 22:09:21 -0700
Subject: [PATCH 1/9] Game OSD: Add video rotation setting

---
 .../resource.language.en_gb/resources/strings.po   |  32 +++++-
 .../skin.estuary/xml/Custom_1101_SettingsList.xml  |  11 +-
 addons/skin.estuary/xml/DialogSelect.xml           |   3 +-
 addons/skin.estuary/xml/GameOSD.xml                |   2 +-
 addons/skin.estuary/xml/Includes_DialogSelect.xml  |   4 +
 .../RetroPlayer/guibridge/GUIGameSettings.cpp      |   2 +
 .../RetroPlayer/guibridge/IGUIRenderSettings.h     |   5 +
 .../RetroPlayer/guicontrols/GUIGameControl.cpp     |  17 +++
 .../cores/RetroPlayer/guicontrols/GUIGameControl.h |   4 +
 .../RetroPlayer/guicontrols/GUIRenderSettings.cpp  |  12 +++
 .../RetroPlayer/guicontrols/GUIRenderSettings.h    |   2 +
 .../RetroPlayer/rendering/RPRenderManager.cpp      |   3 +
 .../RetroPlayer/rendering/RenderVideoSettings.cpp  |   7 +-
 .../RetroPlayer/rendering/RenderVideoSettings.h    |   4 +
 .../rendering/VideoRenderers/RPBaseRenderer.cpp    |  13 ++-
 .../rendering/VideoRenderers/RPBaseRenderer.h      |   1 +
 xbmc/games/dialogs/osd/CMakeLists.txt              |   2 +
 xbmc/games/dialogs/osd/DialogGameVideoRotation.cpp | 114 +++++++++++++++++++++
 xbmc/games/dialogs/osd/DialogGameVideoRotation.h   |  54 ++++++++++
 xbmc/games/dialogs/osd/DialogGameViewMode.h        |   2 +
 xbmc/guilib/GUIControlFactory.cpp                  |   4 +
 xbmc/guilib/GUIWindowManager.cpp                   |   3 +
 xbmc/guilib/WindowIDs.h                            |   1 +
 xbmc/input/WindowTranslator.cpp                    |   1 +
 xbmc/settings/GameSettings.cpp                     |  14 ++-
 xbmc/settings/GameSettings.h                       |   4 +
 xbmc/settings/MediaSettings.cpp                    |   5 +
 27 files changed, 316 insertions(+), 10 deletions(-)
 create mode 100644 xbmc/games/dialogs/osd/DialogGameVideoRotation.cpp
 create mode 100644 xbmc/games/dialogs/osd/DialogGameVideoRotation.h

diff --git a/addons/resource.language.en_gb/resources/strings.po b/addons/resource.language.en_gb/resources/strings.po
index 4d3f46638cec..957f6bf4785f 100644
--- a/addons/resource.language.en_gb/resources/strings.po
+++ b/addons/resource.language.en_gb/resources/strings.po
@@ -17334,7 +17334,37 @@ msgctxt "#35226"
 msgid "Advanced settings"
 msgstr ""
 
-#empty strings from id 35227 to 35249
+#. Label of button in the in-game menu for changing the video rotation
+#: addons/skin.estuary/xml/Custom_1101_SettingsList.xml
+msgctxt "#35227"
+msgid "Rotation"
+msgstr ""
+
+#. Label of the thumbnail for when the video is not rotated and is displayed normally
+#: xbmc/games/dialogs/osd/DialogGameVideoRotation.cpp
+msgctxt "#35228"
+msgid "0째"
+msgstr ""
+
+#. Label of the thumbnail for when the video is rotated to the right
+#: xbmc/games/dialogs/osd/DialogGameVideoRotation.cpp
+msgctxt "#35229"
+msgid "90째"
+msgstr ""
+
+#. Label of the thumbnail for when the video is rotated upside down
+#: xbmc/games/dialogs/osd/DialogGameVideoRotation.cpp
+msgctxt "#35230"
+msgid "180째"
+msgstr ""
+
+#. Label of the thumbnail for when the video is rotated to the left
+#: xbmc/games/dialogs/osd/DialogGameVideoRotation.cpp
+msgctxt "#35231"
+msgid "270째"
+msgstr ""
+
+#empty strings from id 35232 to 35249
 
 #: xbmc/windows/GUIMediaWindow.cpp
 msgctxt "#35250"
diff --git a/addons/skin.estuary/xml/Custom_1101_SettingsList.xml b/addons/skin.estuary/xml/Custom_1101_SettingsList.xml
index 93c308b06c71..785e690171a8 100644
--- a/addons/skin.estuary/xml/Custom_1101_SettingsList.xml
+++ b/addons/skin.estuary/xml/Custom_1101_SettingsList.xml
@@ -8,7 +8,7 @@
 			<height>460</height>
 			<centertop>50%</centertop>
 			<width>700</width>
-			<visible>!Window.IsActive(DialogSettings.xml) + !Window.IsActive(DialogSlider.xml) + !Window.IsActive(GameVideoFilter) + !Window.IsActive(GameViewMode) + !Window.IsActive(GameControllers)</visible>
+			<visible>!Window.IsActive(DialogSettings.xml) + !Window.IsActive(DialogSlider.xml) + !Window.IsActive(GameVideoFilter) + !Window.IsActive(GameViewMode) + !Window.IsActive(GameControllers) + !Window.IsActive(GameVideoRotation)</visible>
 			<animation effect="fade" time="200">VisibleChange</animation>
 			<include content="DialogBackgroundCommons">
 				<param name="width" value="700" />
@@ -110,7 +110,7 @@
 					<defaultcontrol always="true">14101</defaultcontrol>
 					<visible>String.IsEqual(window(home).Property(settingslist_content),games)</visible>
 					<width>700</width>
-					<height>360</height>
+					<height>430</height>
 					<itemgap>0</itemgap>
 					<onup>14100</onup>
 					<ondown>14100</ondown>
@@ -129,6 +129,13 @@
 						<label>$LOCALIZE[629]</label>
 						<onclick>ActivateWindow(GameViewMode)</onclick>
 					</control>
+					<control type="button" id="14106">
+						<description>Video rotation button</description>
+						<width>700</width>
+						<include>DialogSettingButton</include>
+						<label>$LOCALIZE[35227]</label>
+						<onclick>ActivateWindow(GameVideoRotation)</onclick>
+					</control>
 					<control type="button" id="14104">
 						<description>Volume button</description>
 						<width>700</width>
diff --git a/addons/skin.estuary/xml/DialogSelect.xml b/addons/skin.estuary/xml/DialogSelect.xml
index caaba8e1ee4a..0570fcd0b962 100644
--- a/addons/skin.estuary/xml/DialogSelect.xml
+++ b/addons/skin.estuary/xml/DialogSelect.xml
@@ -4,8 +4,9 @@
 	<include>Animation_DialogPopupOpenClose</include>
 	<depth>DepthOSD</depth>
 	<controls>
-		<include condition="![Window.IsActive(gameviewmode) | Window.IsActive(gamevideofilter)]">DefaultDialogSelectLayout</include>
+		<include condition="![Window.IsActive(gameviewmode) | Window.IsActive(gamevideofilter) | Window.IsActive(gamevideorotation)]">DefaultDialogSelectLayout</include>
 		<include condition="Window.IsActive(gamevideofilter)">GameDialogSelectFilterLayout</include>
 		<include condition="Window.IsActive(gameviewmode)">GameDialogSelectViewLayout</include>
+		<include condition="Window.IsActive(gamevideorotation)">GameDialogSelectViewLayout</include>
 	</controls>
 </window>
diff --git a/addons/skin.estuary/xml/GameOSD.xml b/addons/skin.estuary/xml/GameOSD.xml
index 54e89b3acf7e..ad0e0863c168 100644
--- a/addons/skin.estuary/xml/GameOSD.xml
+++ b/addons/skin.estuary/xml/GameOSD.xml
@@ -8,7 +8,7 @@
 			<height>400</height>
 			<centertop>50%</centertop>
 			<width>700</width>
-			<visible>!Window.IsActive(1101) + !Window.IsActive(GameVideoFilter) + !Window.IsActive(GameViewMode) + !Window.IsActive(GameControllers)</visible>
+			<visible>!Window.IsActive(1101) + !Window.IsActive(GameVideoFilter) + !Window.IsActive(GameViewMode) + !Window.IsActive(GameControllers) + !Window.IsActive(GameVideoRotation)</visible>
 			<animation effect="fade" time="200">VisibleChange</animation>
 			<include content="DialogBackgroundCommons">
 				<param name="width" value="700" />
diff --git a/addons/skin.estuary/xml/Includes_DialogSelect.xml b/addons/skin.estuary/xml/Includes_DialogSelect.xml
index d1945bca72a6..9643b3cedd9d 100644
--- a/addons/skin.estuary/xml/Includes_DialogSelect.xml
+++ b/addons/skin.estuary/xml/Includes_DialogSelect.xml
@@ -190,6 +190,7 @@
 							<height>250</height>
 							<scalingmethod>$INFO[ListItem.Property(game.scalingmethod)]</scalingmethod>
 							<viewmode>$INFO[ListItem.Property(game.viewmode)]</viewmode>
+							<rotation>$INFO[ListItem.Property(game.videorotation)]</rotation>
 						</control>
 						<control type="label">
 							<top>250</top>
@@ -220,6 +221,7 @@
 							<height>250</height>
 							<scalingmethod>$INFO[ListItem.Property(game.scalingmethod)]</scalingmethod>
 							<viewmode>$INFO[ListItem.Property(game.viewmode)]</viewmode>
+							<rotation>$INFO[ListItem.Property(game.videorotation)]</rotation>
 						</control>
 						<control type="label">
 							<top>250</top>
@@ -294,6 +296,7 @@
 							<height>250</height>
 							<scalingmethod>$INFO[ListItem.Property(game.scalingmethod)]</scalingmethod>
 							<viewmode>$INFO[ListItem.Property(game.viewmode)]</viewmode>
+							<rotation>$INFO[ListItem.Property(game.videorotation)]</rotation>
 						</control>
 						<control type="label">
 							<top>250</top>
@@ -324,6 +327,7 @@
 							<height>250</height>
 							<scalingmethod>$INFO[ListItem.Property(game.scalingmethod)]</scalingmethod>
 							<viewmode>$INFO[ListItem.Property(game.viewmode)]</viewmode>
+							<rotation>$INFO[ListItem.Property(game.videorotation)]</rotation>
 						</control>
 						<control type="label">
 							<top>250</top>
diff --git a/xbmc/cores/RetroPlayer/guibridge/GUIGameSettings.cpp b/xbmc/cores/RetroPlayer/guibridge/GUIGameSettings.cpp
index 58266afb08b9..e02be1981e0a 100644
--- a/xbmc/cores/RetroPlayer/guibridge/GUIGameSettings.cpp
+++ b/xbmc/cores/RetroPlayer/guibridge/GUIGameSettings.cpp
@@ -72,6 +72,7 @@ void CGUIGameSettings::UpdateSettings()
   // Get settings from GUI
   ESCALINGMETHOD scalingMethod = m_guiSettings.ScalingMethod();
   ViewMode viewMode = m_guiSettings.ViewMode();
+  unsigned int rotationDegCCW = m_guiSettings.RotationDegCCW();
 
   // Save settings for renderer
   if (m_processInfo.HasScalingMethod(scalingMethod))
@@ -79,4 +80,5 @@ void CGUIGameSettings::UpdateSettings()
   else
     m_renderSettings.VideoSettings().SetScalingMethod(m_processInfo.GetDefaultScalingMethod());
   m_renderSettings.VideoSettings().SetRenderViewMode(viewMode);
+  m_renderSettings.VideoSettings().SetRenderRotation(rotationDegCCW);
 }
diff --git a/xbmc/cores/RetroPlayer/guibridge/IGUIRenderSettings.h b/xbmc/cores/RetroPlayer/guibridge/IGUIRenderSettings.h
index bddafaa63a22..28cff2dcb105 100644
--- a/xbmc/cores/RetroPlayer/guibridge/IGUIRenderSettings.h
+++ b/xbmc/cores/RetroPlayer/guibridge/IGUIRenderSettings.h
@@ -44,6 +44,11 @@ namespace RETRO
      */
     virtual bool HasViewMode() const { return true; }
 
+    /*!
+     * \brief Returns true if this render target has a video rotation set
+     */
+    virtual bool HasRotation() const { return true; }
+
     /*!
      * \brief Get the settings used to render this target
      *
diff --git a/xbmc/cores/RetroPlayer/guicontrols/GUIGameControl.cpp b/xbmc/cores/RetroPlayer/guicontrols/GUIGameControl.cpp
index 9671c99920fe..aa6ec26e7632 100644
--- a/xbmc/cores/RetroPlayer/guicontrols/GUIGameControl.cpp
+++ b/xbmc/cores/RetroPlayer/guicontrols/GUIGameControl.cpp
@@ -57,8 +57,10 @@ CGUIGameControl::CGUIGameControl(const CGUIGameControl &other) :
   CGUIControl(other),
   m_scalingMethodInfo(other.m_scalingMethodInfo),
   m_viewModeInfo(other.m_viewModeInfo),
+  m_rotationInfo(other.m_rotationInfo),
   m_bHasScalingMethod(other.m_bHasScalingMethod),
   m_bHasViewMode(other.m_bHasViewMode),
+  m_bHasRotation(other.m_bHasRotation),
   m_renderSettings(new CGUIRenderSettings(*this))
 {
   m_renderSettings->SetSettings(other.m_renderSettings->GetSettings());
@@ -81,6 +83,11 @@ void CGUIGameControl::SetViewMode(const GUILIB::GUIINFO::CGUIInfoLabel &viewMode
   m_viewModeInfo = viewMode;
 }
 
+void CGUIGameControl::SetRotation(const KODI::GUILIB::GUIINFO::CGUIInfoLabel &rotation)
+{
+  m_rotationInfo = rotation;
+}
+
 IGUIRenderSettings *CGUIGameControl::GetRenderSettings() const
 {
   return m_renderSettings.get();
@@ -156,6 +163,15 @@ void CGUIGameControl::UpdateInfo(const CGUIListItem *item /* = nullptr */)
       m_renderSettings->SetViewMode(static_cast<ViewMode>(viewMode));
       m_bHasViewMode = true;
     }
+
+    std::string strRotation = m_rotationInfo.GetItemLabel(item);
+    if (StringUtils::IsNaturalNumber(strRotation))
+    {
+      unsigned int rotation;
+      std::istringstream(std::move(strRotation)) >> rotation;
+      m_renderSettings->SetRotationDegCCW(rotation);
+      m_bHasRotation = true;
+    }
   }
 }
 
@@ -163,6 +179,7 @@ void CGUIGameControl::Reset()
 {
   m_bHasScalingMethod = false;
   m_bHasViewMode = false;
+  m_bHasRotation = false;
   m_renderSettings->Reset();
 }
 
diff --git a/xbmc/cores/RetroPlayer/guicontrols/GUIGameControl.h b/xbmc/cores/RetroPlayer/guicontrols/GUIGameControl.h
index 6464d6dc3da6..bc34a9bda0f5 100644
--- a/xbmc/cores/RetroPlayer/guicontrols/GUIGameControl.h
+++ b/xbmc/cores/RetroPlayer/guicontrols/GUIGameControl.h
@@ -43,10 +43,12 @@ class CGUIGameControl : public CGUIControl
   // GUI functions
   void SetScalingMethod(const KODI::GUILIB::GUIINFO::CGUIInfoLabel &scalingMethod);
   void SetViewMode(const KODI::GUILIB::GUIINFO::CGUIInfoLabel &viewMode);
+  void SetRotation(const KODI::GUILIB::GUIINFO::CGUIInfoLabel &rotation);
 
   // Rendering functions
   bool HasScalingMethod() const { return m_bHasScalingMethod; }
   bool HasViewMode() const { return m_bHasViewMode; }
+  bool HasRotation() const { return m_bHasRotation; }
   IGUIRenderSettings *GetRenderSettings() const;
 
   // implementation of CGUIControl
@@ -69,10 +71,12 @@ class CGUIGameControl : public CGUIControl
   // GUI properties
   KODI::GUILIB::GUIINFO::CGUIInfoLabel m_scalingMethodInfo;
   KODI::GUILIB::GUIINFO::CGUIInfoLabel m_viewModeInfo;
+  KODI::GUILIB::GUIINFO::CGUIInfoLabel m_rotationInfo;
 
   // Rendering properties
   bool m_bHasScalingMethod = false;
   bool m_bHasViewMode = false;
+  bool m_bHasRotation = false;
   std::unique_ptr<CGUIRenderSettings> m_renderSettings;
   std::shared_ptr<CGUIRenderHandle> m_renderHandle;
 };
diff --git a/xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.cpp b/xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.cpp
index 039a4e214638..0b1341fa741c 100644
--- a/xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.cpp
+++ b/xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.cpp
@@ -40,6 +40,11 @@ bool CGUIRenderSettings::HasViewMode() const
   return m_guiControl.HasViewMode();
 }
 
+bool CGUIRenderSettings::HasRotation() const
+{
+  return m_guiControl.HasRotation();
+}
+
 CRenderSettings CGUIRenderSettings::GetSettings() const
 {
   CSingleLock lock(m_mutex);
@@ -81,3 +86,10 @@ void CGUIRenderSettings::SetViewMode(ViewMode viewMode)
 
   m_renderSettings.VideoSettings().SetRenderViewMode(viewMode);
 }
+
+void CGUIRenderSettings::SetRotationDegCCW(unsigned int rotationDegCCW)
+{
+  CSingleLock lock(m_mutex);
+
+  m_renderSettings.VideoSettings().SetRenderRotation(rotationDegCCW);
+}
diff --git a/xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.h b/xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.h
index 7981459a7533..4a40e4163ea8 100644
--- a/xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.h
+++ b/xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.h
@@ -41,6 +41,7 @@ namespace RETRO
     // implementation of IGUIRenderSettings
     bool HasScalingMethod() const override;
     bool HasViewMode() const override;
+    bool HasRotation() const override;
     CRenderSettings GetSettings() const override;
 
     // Render functions
@@ -49,6 +50,7 @@ namespace RETRO
     void SetGeometry(CRenderGeometry geometry);
     void SetScalingMethod(ESCALINGMETHOD scalingMethod);
     void SetViewMode(ViewMode viewMode);
+    void SetRotationDegCCW(unsigned int rotationDegCCW);
 
   private:
     // Construction parameters
diff --git a/xbmc/cores/RetroPlayer/rendering/RPRenderManager.cpp b/xbmc/cores/RetroPlayer/rendering/RPRenderManager.cpp
index 88c6188d47dd..fdddf42df2a8 100644
--- a/xbmc/cores/RetroPlayer/rendering/RPRenderManager.cpp
+++ b/xbmc/cores/RetroPlayer/rendering/RPRenderManager.cpp
@@ -347,6 +347,7 @@ std::shared_ptr<CRPBaseRenderer> CRPRenderManager::GetRenderer(const IGUIRenderS
   {
     renderer->SetScalingMethod(effectiveRenderSettings.VideoSettings().GetScalingMethod());
     renderer->SetViewMode(effectiveRenderSettings.VideoSettings().GetRenderViewMode());
+    renderer->SetRenderRotation(effectiveRenderSettings.VideoSettings().GetRenderRotation());
   }
 
   return renderer;
@@ -537,6 +538,8 @@ CRenderVideoSettings CRPRenderManager::GetEffectiveSettings(const IGUIRenderSett
       effectiveSettings.SetScalingMethod(settings->GetSettings().VideoSettings().GetScalingMethod());
     if (settings->HasViewMode())
       effectiveSettings.SetRenderViewMode(settings->GetSettings().VideoSettings().GetRenderViewMode());
+    if (settings->HasRotation())
+      effectiveSettings.SetRenderRotation(settings->GetSettings().VideoSettings().GetRenderRotation());
   }
 
   // Sanitize settings
diff --git a/xbmc/cores/RetroPlayer/rendering/RenderVideoSettings.cpp b/xbmc/cores/RetroPlayer/rendering/RenderVideoSettings.cpp
index e96e54b59c8c..74c7d2b7ec59 100644
--- a/xbmc/cores/RetroPlayer/rendering/RenderVideoSettings.cpp
+++ b/xbmc/cores/RetroPlayer/rendering/RenderVideoSettings.cpp
@@ -27,12 +27,14 @@ void CRenderVideoSettings::Reset()
 {
   m_scalingMethod = VS_SCALINGMETHOD_AUTO;
   m_viewMode = ViewModeNormal;
+  m_rotationDegCCW = 0;
 }
 
 bool CRenderVideoSettings::operator==(const CRenderVideoSettings &rhs) const
 {
   return m_scalingMethod == rhs.m_scalingMethod &&
-         m_viewMode == rhs.m_viewMode;
+         m_viewMode == rhs.m_viewMode &&
+         m_rotationDegCCW == rhs.m_rotationDegCCW;
 }
 
 bool CRenderVideoSettings::operator<(const CRenderVideoSettings &rhs) const
@@ -43,5 +45,8 @@ bool CRenderVideoSettings::operator<(const CRenderVideoSettings &rhs) const
   if (m_viewMode < rhs.m_viewMode) return true;
   if (m_viewMode > rhs.m_viewMode) return false;
 
+  if (m_rotationDegCCW < rhs.m_rotationDegCCW) return true;
+  if (m_rotationDegCCW > rhs.m_rotationDegCCW) return false;
+
   return false;
 }
diff --git a/xbmc/cores/RetroPlayer/rendering/RenderVideoSettings.h b/xbmc/cores/RetroPlayer/rendering/RenderVideoSettings.h
index ff74eab47bf0..85b20b60e21e 100644
--- a/xbmc/cores/RetroPlayer/rendering/RenderVideoSettings.h
+++ b/xbmc/cores/RetroPlayer/rendering/RenderVideoSettings.h
@@ -47,9 +47,13 @@ namespace RETRO
     ViewMode GetRenderViewMode() const { return m_viewMode; }
     void SetRenderViewMode(ViewMode mode) { m_viewMode = mode; }
 
+    unsigned int GetRenderRotation() const { return m_rotationDegCCW; }
+    void SetRenderRotation(unsigned int rotationDegCCW) { m_rotationDegCCW = rotationDegCCW; }
+
   private:
     ESCALINGMETHOD m_scalingMethod;
     ViewMode m_viewMode;
+    unsigned int m_rotationDegCCW;
   };
 }
 }
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.cpp b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.cpp
index 2bf2130d641c..e95e0c01800e 100644
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.cpp
+++ b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.cpp
@@ -164,6 +164,11 @@ void CRPBaseRenderer::SetViewMode(ViewMode viewMode)
   CalculateViewMode();
 }
 
+void CRPBaseRenderer::SetRenderRotation(unsigned int rotationDegCCW)
+{
+  m_renderSettings.VideoSettings().SetRenderRotation(rotationDegCCW);
+}
+
 void CRPBaseRenderer::CalculateViewMode()
 {
   const ViewMode viewMode = m_renderSettings.VideoSettings().GetRenderViewMode();
@@ -308,6 +313,7 @@ void CRPBaseRenderer::CalculateViewMode()
 inline void CRPBaseRenderer::ReorderDrawPoints()
 {
   const CRect &destRect = m_renderSettings.Geometry().Dimensions();
+  const unsigned int renderRotation = m_renderSettings.VideoSettings().GetRenderRotation();
 
   // 0 - top left, 1 - top right, 2 - bottom right, 3 - bottom left
   float origMat[4][2] =
@@ -321,16 +327,17 @@ inline void CRPBaseRenderer::ReorderDrawPoints()
   bool changeAspect = false;
   int pointOffset = 0;
 
-  switch (m_renderOrientation)
+  const unsigned int renderOrientation = (m_renderOrientation + renderRotation) % 360;
+  switch (renderOrientation)
   {
-  case 90:
+  case 270:
     pointOffset = 1;
     changeAspect = true;
     break;
   case 180:
     pointOffset = 2;
     break;
-  case 270:
+  case 90:
     pointOffset = 3;
     changeAspect = true;
     break;
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.h b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.h
index 9fa68bc8fb59..9ee144b8c164 100644
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.h
+++ b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.h
@@ -74,6 +74,7 @@ namespace RETRO
     // Set render settings
     void SetScalingMethod(ESCALINGMETHOD method);
     void SetViewMode(ViewMode viewMode);
+    void SetRenderRotation(unsigned int rotationDegCCW);
 
     bool IsVisible() const;
 
diff --git a/xbmc/games/dialogs/osd/CMakeLists.txt b/xbmc/games/dialogs/osd/CMakeLists.txt
index 6d630cff935c..68a365e7e55e 100644
--- a/xbmc/games/dialogs/osd/CMakeLists.txt
+++ b/xbmc/games/dialogs/osd/CMakeLists.txt
@@ -1,6 +1,7 @@
 set(SOURCES DialogGameAdvancedSettings.cpp
             DialogGameOSD.cpp
             DialogGameVideoFilter.cpp
+            DialogGameVideoRotation.cpp
             DialogGameVideoSelect.cpp
             DialogGameViewMode.cpp
             DialogGameVolume.cpp
@@ -9,6 +10,7 @@ set(SOURCES DialogGameAdvancedSettings.cpp
 set(HEADERS DialogGameAdvancedSettings.h
             DialogGameOSD.h
             DialogGameVideoFilter.h
+            DialogGameVideoRotation.h
             DialogGameVideoSelect.h
             DialogGameViewMode.h
             DialogGameVolume.h
diff --git a/xbmc/games/dialogs/osd/DialogGameVideoRotation.cpp b/xbmc/games/dialogs/osd/DialogGameVideoRotation.cpp
new file mode 100644
index 000000000000..c0d908e0c72b
--- /dev/null
+++ b/xbmc/games/dialogs/osd/DialogGameVideoRotation.cpp
@@ -0,0 +1,114 @@
+/*
+ *      Copyright (C) 2018 Team Kodi
+ *      http://kodi.tv
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this Program; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "DialogGameVideoRotation.h"
+#include "guilib/LocalizeStrings.h"
+#include "guilib/WindowIDs.h"
+#include "settings/GameSettings.h"
+#include "settings/MediaSettings.h"
+#include "utils/Variant.h"
+#include "FileItem.h"
+
+using namespace KODI;
+using namespace GAME;
+
+CDialogGameVideoRotation::CDialogGameVideoRotation() :
+  CDialogGameVideoSelect(WINDOW_DIALOG_GAME_VIDEO_ROTATION)
+{
+}
+
+std::string CDialogGameVideoRotation::GetHeading()
+{
+  return g_localizeStrings.Get(35227); // "Rotation"
+}
+
+void CDialogGameVideoRotation::PreInit()
+{
+  m_rotations.clear();
+
+  // Present the user with clockwise rotation
+  m_rotations.push_back(0);
+  m_rotations.push_back(270);
+  m_rotations.push_back(180);
+  m_rotations.push_back(90);
+}
+
+void CDialogGameVideoRotation::GetItems(CFileItemList &items)
+{
+  for (unsigned int rotation : m_rotations)
+  {
+    CFileItemPtr item = std::make_shared<CFileItem>(GetRotationLabel(rotation));
+    item->SetProperty("game.videorotation", CVariant{ rotation });
+    items.Add(std::move(item));
+  }
+}
+
+void CDialogGameVideoRotation::OnItemFocus(unsigned int index)
+{
+  if (index < m_rotations.size())
+  {
+    const unsigned int rotationDegCCW = m_rotations[index];
+
+    CGameSettings &gameSettings = CMediaSettings::GetInstance().GetCurrentGameSettings();
+    if (gameSettings.RotationDegCCW() != rotationDegCCW)
+    {
+      gameSettings.SetRotationDegCCW(rotationDegCCW);
+      gameSettings.NotifyObservers(ObservableMessageSettingsChanged);
+    }
+  }
+}
+
+unsigned int CDialogGameVideoRotation::GetFocusedItem() const
+{
+  CGameSettings &gameSettings = CMediaSettings::GetInstance().GetCurrentGameSettings();
+
+  for (unsigned int i = 0; i < m_rotations.size(); i++)
+  {
+    const unsigned int rotationDegCCW = m_rotations[i];
+    if (rotationDegCCW == gameSettings.RotationDegCCW())
+      return i;
+  }
+
+  return 0;
+}
+
+void CDialogGameVideoRotation::PostExit()
+{
+  m_rotations.clear();
+}
+
+std::string CDialogGameVideoRotation::GetRotationLabel(unsigned int rotationDegCCW)
+{
+  switch (rotationDegCCW)
+  {
+  case 0:
+    return g_localizeStrings.Get(35228); // 0
+  case 90:
+    return g_localizeStrings.Get(35231); // 270
+  case 180:
+    return g_localizeStrings.Get(35230); // 180
+  case 270:
+    return g_localizeStrings.Get(35229); // 90
+  default:
+    break;
+  }
+
+  return "";
+}
diff --git a/xbmc/games/dialogs/osd/DialogGameVideoRotation.h b/xbmc/games/dialogs/osd/DialogGameVideoRotation.h
new file mode 100644
index 000000000000..791abd35fc27
--- /dev/null
+++ b/xbmc/games/dialogs/osd/DialogGameVideoRotation.h
@@ -0,0 +1,54 @@
+/*
+ *      Copyright (C) 2018 Team Kodi
+ *      http://kodi.tv
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this Program; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+#pragma once
+
+#include "DialogGameVideoSelect.h"
+
+#include <string>
+#include <vector>
+
+namespace KODI
+{
+namespace GAME
+{
+  class CDialogGameVideoRotation : public CDialogGameVideoSelect
+  {
+  public:
+    CDialogGameVideoRotation();
+    ~CDialogGameVideoRotation() override = default;
+
+  protected:
+    // implementation of CDialogGameVideoSelect
+    std::string GetHeading() override;
+    void PreInit() override;
+    void GetItems(CFileItemList &items) override;
+    void OnItemFocus(unsigned int index) override;
+    unsigned int GetFocusedItem() const override;
+    void PostExit() override;
+
+  private:
+    // Helper functions
+    static std::string GetRotationLabel(unsigned int rotationDegCCW);
+
+    // Dialog parameters
+    std::vector<unsigned int> m_rotations; // Degrees counter-clockwise
+  };
+}
+}
diff --git a/xbmc/games/dialogs/osd/DialogGameViewMode.h b/xbmc/games/dialogs/osd/DialogGameViewMode.h
index a0d23423e59f..f6250cafa545 100644
--- a/xbmc/games/dialogs/osd/DialogGameViewMode.h
+++ b/xbmc/games/dialogs/osd/DialogGameViewMode.h
@@ -23,6 +23,8 @@
 #include "DialogGameVideoSelect.h"
 #include "cores/IPlayer.h"
 
+#include <vector>
+
 namespace KODI
 {
 namespace GAME
diff --git a/xbmc/guilib/GUIControlFactory.cpp b/xbmc/guilib/GUIControlFactory.cpp
index 188d6fda9372..8d60f032acbf 100644
--- a/xbmc/guilib/GUIControlFactory.cpp
+++ b/xbmc/guilib/GUIControlFactory.cpp
@@ -1155,6 +1155,10 @@ CGUIControl* CGUIControlFactory::Create(int parentID, const CRect &rect, TiXmlEl
       GUIINFO::CGUIInfoLabel viewMode;
       GetInfoLabel(pControlNode, "viewmode", viewMode, parentID);
       static_cast<RETRO::CGUIGameControl*>(control)->SetViewMode(viewMode);
+
+      GUIINFO::CGUIInfoLabel rotation;
+      GetInfoLabel(pControlNode, "rotation", rotation, parentID);
+      static_cast<RETRO::CGUIGameControl*>(control)->SetRotation(rotation);
     }
     break;
   case CGUIControl::GUICONTROL_FADELABEL:
diff --git a/xbmc/guilib/GUIWindowManager.cpp b/xbmc/guilib/GUIWindowManager.cpp
index 6dedfa4464e1..f7f2cf84efa9 100644
--- a/xbmc/guilib/GUIWindowManager.cpp
+++ b/xbmc/guilib/GUIWindowManager.cpp
@@ -159,6 +159,7 @@
 #include "games/dialogs/osd/DialogGameAdvancedSettings.h"
 #include "games/dialogs/osd/DialogGameOSD.h"
 #include "games/dialogs/osd/DialogGameVideoFilter.h"
+#include "games/dialogs/osd/DialogGameVideoRotation.h"
 #include "games/dialogs/osd/DialogGameViewMode.h"
 #include "games/dialogs/osd/DialogGameVolume.h"
 
@@ -324,6 +325,7 @@ void CGUIWindowManager::CreateWindows()
   Add(new GAME::CDialogGameViewMode);
   Add(new GAME::CDialogGameVolume);
   Add(new GAME::CDialogGameAdvancedSettings);
+  Add(new GAME::CDialogGameVideoRotation);
   Add(new RETRO::CGameWindowFullScreen);
 }
 
@@ -437,6 +439,7 @@ bool CGUIWindowManager::DestroyWindows()
     DestroyWindow(WINDOW_DIALOG_GAME_VIEW_MODE);
     DestroyWindow(WINDOW_DIALOG_GAME_VOLUME);
     DestroyWindow(WINDOW_DIALOG_GAME_ADVANCED_SETTINGS);
+    DestroyWindow(WINDOW_DIALOG_GAME_VIDEO_ROTATION);
     DestroyWindow(WINDOW_FULLSCREEN_GAME);
 
     Remove(WINDOW_SETTINGS_SERVICE);
diff --git a/xbmc/guilib/WindowIDs.h b/xbmc/guilib/WindowIDs.h
index 99afceaf449e..e5d53be1d082 100644
--- a/xbmc/guilib/WindowIDs.h
+++ b/xbmc/guilib/WindowIDs.h
@@ -161,6 +161,7 @@
 #define WINDOW_DIALOG_GAME_VIEW_MODE      10824
 #define WINDOW_DIALOG_GAME_VOLUME         10825
 #define WINDOW_DIALOG_GAME_ADVANCED_SETTINGS 10826
+#define WINDOW_DIALOG_GAME_VIDEO_ROTATION 10827
 
 //#define WINDOW_VIRTUAL_KEYBOARD           11000
 // WINDOW_ID's from 11100 to 11199 reserved for Skins
diff --git a/xbmc/input/WindowTranslator.cpp b/xbmc/input/WindowTranslator.cpp
index b84b95380a52..a2b9b5c4cda8 100644
--- a/xbmc/input/WindowTranslator.cpp
+++ b/xbmc/input/WindowTranslator.cpp
@@ -160,6 +160,7 @@ const CWindowTranslator::WindowMapByName CWindowTranslator::WindowMappingByName
     { "gameviewmode"             , WINDOW_DIALOG_GAME_VIEW_MODE },
     { "gamevolume"               , WINDOW_DIALOG_GAME_VOLUME },
     { "gameadvancedsettings"     , WINDOW_DIALOG_GAME_ADVANCED_SETTINGS },
+    { "gamevideorotation"        , WINDOW_DIALOG_GAME_VIDEO_ROTATION },
 };
 
 namespace
diff --git a/xbmc/settings/GameSettings.cpp b/xbmc/settings/GameSettings.cpp
index 2289f3d00934..0835fd60d014 100644
--- a/xbmc/settings/GameSettings.cpp
+++ b/xbmc/settings/GameSettings.cpp
@@ -26,6 +26,7 @@ CGameSettings &CGameSettings::operator=(const CGameSettings &rhs)
   {
     m_scalingMethod = rhs.m_scalingMethod;
     m_viewMode = rhs.m_viewMode;
+    m_rotationDegCCW = rhs.m_rotationDegCCW;
   }
   return *this;
 }
@@ -34,12 +35,14 @@ void CGameSettings::Reset()
 {
   m_scalingMethod = VS_SCALINGMETHOD_AUTO;
   m_viewMode = ViewModeNormal;
+  m_rotationDegCCW = 0;
 }
 
 bool CGameSettings::operator==(const CGameSettings &rhs) const
 {
   return m_scalingMethod == rhs.m_scalingMethod &&
-         m_viewMode == rhs.m_viewMode;
+         m_viewMode == rhs.m_viewMode &&
+         m_rotationDegCCW == rhs.m_rotationDegCCW;
 }
 
 void CGameSettings::SetScalingMethod(ESCALINGMETHOD scalingMethod)
@@ -59,3 +62,12 @@ void CGameSettings::SetViewMode(enum ViewMode viewMode)
     SetChanged();
   }
 }
+
+void CGameSettings::SetRotationDegCCW(unsigned int rotation)
+{
+  if (rotation != m_rotationDegCCW)
+  {
+    m_rotationDegCCW = rotation;
+    SetChanged();
+  }
+}
diff --git a/xbmc/settings/GameSettings.h b/xbmc/settings/GameSettings.h
index 01e8c2ce7f6a..434133706880 100644
--- a/xbmc/settings/GameSettings.h
+++ b/xbmc/settings/GameSettings.h
@@ -43,8 +43,12 @@ class CGameSettings : public Observable
   enum ViewMode ViewMode() const { return m_viewMode; }
   void SetViewMode(enum ViewMode viewMode);
 
+  unsigned int RotationDegCCW() const { return m_rotationDegCCW; }
+  void SetRotationDegCCW(unsigned int rotation);
+
 private:
   // Video settings
   ESCALINGMETHOD m_scalingMethod;
   enum ViewMode m_viewMode;
+  unsigned int m_rotationDegCCW;
 };
diff --git a/xbmc/settings/MediaSettings.cpp b/xbmc/settings/MediaSettings.cpp
index 497730bdef99..516d416a4af7 100644
--- a/xbmc/settings/MediaSettings.cpp
+++ b/xbmc/settings/MediaSettings.cpp
@@ -141,6 +141,10 @@ bool CMediaSettings::Load(const TiXmlNode *settings)
     int viewMode;
     if (XMLUtils::GetInt(pElement, "viewmode", viewMode, ViewModeNormal, ViewModeZoom110Width))
       m_defaultGameSettings.SetViewMode(static_cast<ViewMode>(viewMode));
+
+    int rotation;
+    if (XMLUtils::GetInt(pElement, "rotation", rotation, 0, 270) && rotation >= 0)
+      m_defaultGameSettings.SetRotationDegCCW(static_cast<unsigned int>(rotation));
   }
 
   // mymusic settings
@@ -237,6 +241,7 @@ bool CMediaSettings::Save(TiXmlNode *settings) const
 
   XMLUtils::SetInt(pNode, "scalingmethod", m_defaultGameSettings.ScalingMethod());
   XMLUtils::SetInt(pNode, "viewmode", m_defaultGameSettings.ViewMode());
+  XMLUtils::SetInt(pNode, "rotation", m_defaultGameSettings.RotationDegCCW());
 
   // mymusic
   pNode = settings->FirstChild("mymusic");

From 3e76dd7587485dfb8e32088d1a552781cc51bc7f Mon Sep 17 00:00:00 2001
From: Garrett Brown <themagnificentmrb@gmail.com>
Date: Thu, 7 Jun 2018 14:28:55 -0700
Subject: [PATCH 2/9] RetroPlayer: Remove unused code

---
 .../RetroPlayer/buffers/RenderBufferManager.h      |  2 --
 .../rendering/VideoRenderers/RPBaseRenderer.cpp    | 31 ----------------------
 .../rendering/VideoRenderers/RPBaseRenderer.h      | 15 ++---------
 .../rendering/VideoRenderers/RPRendererMMAL.cpp    |  3 +++
 .../rendering/VideoRenderers/RPWinRenderer.cpp     |  1 -
 5 files changed, 5 insertions(+), 47 deletions(-)

diff --git a/xbmc/cores/RetroPlayer/buffers/RenderBufferManager.h b/xbmc/cores/RetroPlayer/buffers/RenderBufferManager.h
index 18618a1e9f40..07d8e5f20095 100644
--- a/xbmc/cores/RetroPlayer/buffers/RenderBufferManager.h
+++ b/xbmc/cores/RetroPlayer/buffers/RenderBufferManager.h
@@ -50,8 +50,6 @@ namespace RETRO
     bool HasScalingMethod(ESCALINGMETHOD scalingMethod) const;
 
   protected:
-    static std::vector<ESCALINGMETHOD> GetScalingMethods();
-
     struct RenderBufferPools
     {
       IRendererFactory* factory;
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.cpp b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.cpp
index e95e0c01800e..677d0c4ec059 100644
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.cpp
+++ b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.cpp
@@ -141,13 +141,6 @@ void CRPBaseRenderer::Flush()
   FlushInternal();
 }
 
-void CRPBaseRenderer::GetVideoRect(CRect &source, CRect &dest, CRect &view) const
-{
-  source = m_sourceRect;
-  dest = m_renderSettings.Geometry().Dimensions();
-  view = m_viewRect;
-}
-
 float CRPBaseRenderer::GetAspectRatio() const
 {
   return m_sourceFrameRatio;
@@ -176,7 +169,6 @@ void CRPBaseRenderer::CalculateViewMode()
   // Parameters to determine
   float &pixelRatio = m_pixelRatio;
   float &zoomAmount = m_zoomAmount;
-  bool &bNonLinearStretch = m_bNonLinearStretch;
 
   // Get our calibrated full screen resolution
   RESOLUTION res = m_context.GetVideoResolution();
@@ -195,8 +187,6 @@ void CRPBaseRenderer::CalculateViewMode()
   screenWidth *= xscale;
   screenHeight *= yscale;
 
-  bNonLinearStretch = false;
-
   switch (viewMode)
   {
   case ViewModeZoom:
@@ -251,12 +241,9 @@ void CRPBaseRenderer::CalculateViewMode()
     pixelRatio = pow(stretchAmount, float(2.0 / 3.0));
     zoomAmount = pow(stretchAmount, float((stretchAmount < 1.0) ? -1.0 / 3.0 : 1.0 / 3.0));
 
-    bNonLinearStretch = true;
-
     break;
   }
   case ViewModeStretch16x9:
-  case ViewModeStretch16x9Nonlin:
   {
     // Stretch image to 16:9 ratio
     zoomAmount = 1.0f;
@@ -273,8 +260,6 @@ void CRPBaseRenderer::CalculateViewMode()
       pixelRatio = (screenWidth / screenHeight) * info.fPixelRatio / sourceFrameRatio;
     }
 
-    bNonLinearStretch = (viewMode == ViewModeStretch16x9Nonlin);
-
     break;
   }
   case ViewModeOriginal:
@@ -483,22 +468,6 @@ void CRPBaseRenderer::CalcNormalRenderRect(float offsetX, float offsetY, float w
   float posY = (height - newHeight) / 2;
   float posX = (width - newWidth) / 2;
 
-  const float verticalShift = 0.0f; //! @todo
-
-  // Vertical shift range -1 to 1 shifts within the top and bottom black bars
-  // If there are no top and bottom black bars, this range does nothing
-  float blackBarSize = std::max((height - newHeight) / 2.0f, 0.0f);
-  posY += blackBarSize * std::max(std::min(verticalShift, 1.0f), -1.0f);
-
-  // Vertical shift ranges -2 to -1 and 1 to 2 will shift the image out of the screen
-  // If vertical shift is -2 it will be completely shifted out the top,
-  // if it's 2 it will be completely shifted out the bottom
-  float shiftRange = std::min(newHeight, newHeight - (newHeight - height) / 2.0f);
-  if (verticalShift > 1.0f)
-    posY += shiftRange * (verticalShift - 1.0f);
-  else if (verticalShift < -1.0f)
-    posY += shiftRange * (verticalShift + 1.0f);
-
   destRect.x1 = static_cast<float>(MathUtils::round_int(posX + offsetX));
   destRect.x2 = destRect.x1 + MathUtils::round_int(newWidth);
   destRect.y1 = static_cast<float>(MathUtils::round_int(posY + offsetY));
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.h b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.h
index 9ee144b8c164..6cfb39e32e2c 100644
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.h
+++ b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.h
@@ -89,14 +89,6 @@ namespace RETRO
      */
     virtual void ManageRenderArea();
 
-    /*!
-     * \brief Get video rectangle and view window
-     *
-     * \param source is original size of the video
-     * \param dest is the target rendering area honoring aspect ratio of source
-     * \param view is the entire target rendering area for the video (including black bars)
-     */
-    void GetVideoRect(CRect &source, CRect &dest, CRect &view) const;
     float GetAspectRatio() const;
 
     // Construction parameters
@@ -123,18 +115,15 @@ namespace RETRO
     CRenderSettings m_renderSettings;
     float m_pixelRatio = 1.0f;
     float m_zoomAmount = 1.0f;
-    bool m_bNonLinearStretch = false;
     IRenderBuffer *m_renderBuffer = nullptr;
 
     // Geometry properties
     CPoint m_rotatedDestCoords[4];
     CRect m_oldDestRect; // destrect of the previous frame
-    CRect m_sourceRect;
-    CRect m_viewRect;
+    CRect m_sourceRect; // original size of the video
+    CRect m_viewRect; // entire target rendering area for the video (including black bars)
 
   private:
-    bool IsNonLinearStretch() const { return m_bNonLinearStretch; }
-
     /*!
      * \brief Performs whatever nessesary after a frame has been rendered
      */
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererMMAL.cpp b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererMMAL.cpp
index 77fb7d7f3375..ed97e8304383 100644
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererMMAL.cpp
+++ b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererMMAL.cpp
@@ -143,10 +143,13 @@ void CRPRendererMMAL::ManageRenderArea()
 
   if (m_renderer)
   {
+    //! @todo
+    /*
     CRect source;
     CRect dest;
     CRect view;
     GetVideoRect(source, dest, view);
     m_renderer->SetDimensions(source, dest);
+    */
   }
 }
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPWinRenderer.cpp b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPWinRenderer.cpp
index 362d3d8bbcfd..620a1e58e3cf 100644
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPWinRenderer.cpp
+++ b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPWinRenderer.cpp
@@ -267,7 +267,6 @@ void CRPWinRenderer::RenderInternal(bool clear, uint8_t alpha)
 bool CRPWinRenderer::Supports(ERENDERFEATURE feature) const
 {
   if (feature == RENDERFEATURE_STRETCH ||
-      //feature == RENDERFEATURE_NONLINSTRETCH ||
       feature == RENDERFEATURE_ZOOM ||
       feature == RENDERFEATURE_VERTICAL_SHIFT ||
       feature == RENDERFEATURE_PIXEL_RATIO ||

From 926b7d7e361f378a99a60b92864ca21d5937600e Mon Sep 17 00:00:00 2001
From: Garrett Brown <themagnificentmrb@gmail.com>
Date: Sat, 9 Jun 2018 01:23:07 -0700
Subject: [PATCH 3/9] RetroPlayer: Separate enums from IPlayer.h

---
 xbmc/cores/CMakeLists.txt                          |  1 +
 xbmc/cores/GameSettings.h                          | 55 ++++++++++++++++++++++
 xbmc/cores/RetroPlayer/RetroPlayerUtils.cpp        | 12 ++---
 xbmc/cores/RetroPlayer/RetroPlayerUtils.h          |  6 ++-
 xbmc/cores/RetroPlayer/buffers/IRenderBuffer.h     |  2 -
 .../RetroPlayer/buffers/RenderBufferManager.cpp    |  2 +-
 .../RetroPlayer/buffers/RenderBufferManager.h      |  4 +-
 .../buffers/video/RenderBufferGuiTexture.cpp       |  8 ++--
 .../buffers/video/RenderBufferGuiTexture.h         |  8 ++--
 .../RetroPlayer/guibridge/GUIGameRenderManager.cpp |  4 +-
 .../RetroPlayer/guibridge/GUIGameRenderManager.h   |  6 +--
 .../RetroPlayer/guibridge/GUIGameSettings.cpp      |  4 +-
 .../RetroPlayer/guibridge/GUIGameVideoHandle.cpp   |  4 +-
 .../RetroPlayer/guibridge/GUIGameVideoHandle.h     |  6 +--
 xbmc/cores/RetroPlayer/guibridge/IRenderCallback.h |  6 +--
 .../RetroPlayer/guicontrols/GUIGameControl.cpp     |  4 +-
 .../RetroPlayer/guicontrols/GUIRenderSettings.cpp  |  4 +-
 .../RetroPlayer/guicontrols/GUIRenderSettings.h    |  6 +--
 xbmc/cores/RetroPlayer/process/RPProcessInfo.cpp   |  8 ++--
 xbmc/cores/RetroPlayer/process/RPProcessInfo.h     | 10 ++--
 .../RetroPlayer/process/windows/RPProcessInfoWin.h |  1 -
 .../RetroPlayer/rendering/RPRenderManager.cpp      |  6 +--
 xbmc/cores/RetroPlayer/rendering/RPRenderManager.h |  4 +-
 xbmc/cores/RetroPlayer/rendering/RenderSettings.h  |  1 -
 .../RetroPlayer/rendering/RenderTranslator.cpp     |  6 +--
 .../cores/RetroPlayer/rendering/RenderTranslator.h |  4 +-
 .../RetroPlayer/rendering/RenderVideoSettings.cpp  |  4 +-
 .../RetroPlayer/rendering/RenderVideoSettings.h    | 14 +++---
 .../rendering/VideoRenderers/RPBaseRenderer.cpp    | 51 ++++----------------
 .../rendering/VideoRenderers/RPBaseRenderer.h      | 12 +++--
 .../VideoRenderers/RPRendererGuiTexture.cpp        | 16 +++----
 .../VideoRenderers/RPRendererGuiTexture.h          | 10 ++--
 .../rendering/VideoRenderers/RPRendererMMAL.cpp    | 19 ++++----
 .../rendering/VideoRenderers/RPRendererMMAL.h      |  7 +--
 .../VideoRenderers/RPRendererOpenGLES.cpp          | 19 ++++----
 .../rendering/VideoRenderers/RPRendererOpenGLES.h  |  7 +--
 .../rendering/VideoRenderers/RPWinRenderer.cpp     | 29 ++++++------
 .../rendering/VideoRenderers/RPWinRenderer.h       | 14 +++---
 .../VideoShaders/windows/RPWinOutputShader.cpp     |  6 +--
 .../VideoShaders/windows/RPWinOutputShader.h       |  3 +-
 xbmc/games/dialogs/osd/DialogGameVideoFilter.cpp   | 18 +++----
 xbmc/games/dialogs/osd/DialogGameVideoFilter.h     |  4 +-
 xbmc/games/dialogs/osd/DialogGameViewMode.cpp      | 36 ++++++--------
 xbmc/games/dialogs/osd/DialogGameViewMode.h        |  4 +-
 xbmc/guilib/guiinfo/GamesGUIInfo.cpp               |  2 +-
 xbmc/settings/GameSettings.cpp                     | 10 ++--
 xbmc/settings/GameSettings.h                       | 14 +++---
 xbmc/settings/MediaSettings.cpp                    | 13 ++---
 xbmc/settings/MediaSettings.h                      |  1 +
 49 files changed, 255 insertions(+), 240 deletions(-)
 create mode 100644 xbmc/cores/GameSettings.h

diff --git a/xbmc/cores/CMakeLists.txt b/xbmc/cores/CMakeLists.txt
index fcf17a91a6f6..0b0389719a70 100644
--- a/xbmc/cores/CMakeLists.txt
+++ b/xbmc/cores/CMakeLists.txt
@@ -4,6 +4,7 @@ set(SOURCES DataCacheCore.cpp
 
 set(HEADERS DataCacheCore.h
             FFmpeg.h
+            GameSettings.h
             IPlayer.h
             IPlayerCallback.h
             VideoSettings.h)
diff --git a/xbmc/cores/GameSettings.h b/xbmc/cores/GameSettings.h
new file mode 100644
index 000000000000..c178b6f05d9e
--- /dev/null
+++ b/xbmc/cores/GameSettings.h
@@ -0,0 +1,55 @@
+/*
+ *      Copyright (C) 2017-2018 Team Kodi
+ *      http://kodi.tv
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this Program; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+#pragma once
+
+namespace KODI
+{
+namespace RETRO
+{
+
+// NOTE: Only append
+enum class SCALINGMETHOD
+{
+  AUTO = 0,
+  NEAREST = 1,
+  LINEAR = 2,
+  MAX = LINEAR
+};
+
+// NOTE: Only append
+enum class VIEWMODE
+{
+  Normal = 0,
+  Stretch4x3 = 1,
+  Stretch16x9 = 2,
+  Original = 3,
+  Max = Original
+};
+
+enum class RENDERFEATURE
+{
+  ROTATION,
+  STRETCH,
+  ZOOM,
+  PIXEL_RATIO,
+};
+
+}
+}
diff --git a/xbmc/cores/RetroPlayer/RetroPlayerUtils.cpp b/xbmc/cores/RetroPlayer/RetroPlayerUtils.cpp
index c91ebe45d9d5..addb4bed2e2a 100644
--- a/xbmc/cores/RetroPlayer/RetroPlayerUtils.cpp
+++ b/xbmc/cores/RetroPlayer/RetroPlayerUtils.cpp
@@ -23,19 +23,17 @@
 using namespace KODI;
 using namespace RETRO;
 
-std::string CRetroPlayerUtils::ViewModeToDescription(ViewMode viewMode)
+std::string CRetroPlayerUtils::ViewModeToDescription(VIEWMODE viewMode)
 {
   switch (viewMode)
   {
-    case ViewModeNormal:
+    case VIEWMODE::Normal:
       return "normal";
-    case ViewModeStretch4x3:
+    case VIEWMODE::Stretch4x3:
       return "4:3";
-    case ViewModeStretch16x9:
+    case VIEWMODE::Stretch16x9:
       return "16:9";
-    case ViewModeStretch16x9Nonlin:
-      return "nonlinear";
-    case ViewModeOriginal:
+    case VIEWMODE::Original:
       return "original";
     default:
       break;
diff --git a/xbmc/cores/RetroPlayer/RetroPlayerUtils.h b/xbmc/cores/RetroPlayer/RetroPlayerUtils.h
index 6aa1a202064f..b31a52d15e65 100644
--- a/xbmc/cores/RetroPlayer/RetroPlayerUtils.h
+++ b/xbmc/cores/RetroPlayer/RetroPlayerUtils.h
@@ -20,7 +20,9 @@
 
 #pragma once
 
-#include "cores/IPlayer.h"
+#include "cores/GameSettings.h"
+
+#include <string>
 
 namespace KODI
 {
@@ -29,7 +31,7 @@ namespace RETRO
   class CRetroPlayerUtils
   {
   public:
-    static std::string ViewModeToDescription(ViewMode viewMode);
+    static std::string ViewModeToDescription(VIEWMODE viewMode);
   };
 }
 }
diff --git a/xbmc/cores/RetroPlayer/buffers/IRenderBuffer.h b/xbmc/cores/RetroPlayer/buffers/IRenderBuffer.h
index b1f702b635f7..41b9e5e98ca4 100644
--- a/xbmc/cores/RetroPlayer/buffers/IRenderBuffer.h
+++ b/xbmc/cores/RetroPlayer/buffers/IRenderBuffer.h
@@ -20,8 +20,6 @@
 
 #pragma once
 
-#include "cores/IPlayer.h"
-
 extern "C" {
 #include "libavutil/pixfmt.h"
 }
diff --git a/xbmc/cores/RetroPlayer/buffers/RenderBufferManager.cpp b/xbmc/cores/RetroPlayer/buffers/RenderBufferManager.cpp
index 15626e36c3d9..3d2aeb7569c7 100644
--- a/xbmc/cores/RetroPlayer/buffers/RenderBufferManager.cpp
+++ b/xbmc/cores/RetroPlayer/buffers/RenderBufferManager.cpp
@@ -101,7 +101,7 @@ std::string CRenderBufferManager::GetRenderSystemName(IRenderBufferPool *renderB
   return "";
 }
 
-bool CRenderBufferManager::HasScalingMethod(ESCALINGMETHOD scalingMethod) const
+bool CRenderBufferManager::HasScalingMethod(SCALINGMETHOD scalingMethod) const
 {
   CRenderVideoSettings videoSettings;
   videoSettings.SetScalingMethod(scalingMethod);
diff --git a/xbmc/cores/RetroPlayer/buffers/RenderBufferManager.h b/xbmc/cores/RetroPlayer/buffers/RenderBufferManager.h
index 07d8e5f20095..72888eb8e26e 100644
--- a/xbmc/cores/RetroPlayer/buffers/RenderBufferManager.h
+++ b/xbmc/cores/RetroPlayer/buffers/RenderBufferManager.h
@@ -21,7 +21,7 @@
 #pragma once
 
 #include "cores/RetroPlayer/RetroPlayerTypes.h"
-#include "cores/IPlayer.h"
+#include "cores/GameSettings.h"
 #include "threads/CriticalSection.h"
 
 #include <memory>
@@ -47,7 +47,7 @@ namespace RETRO
 
     std::string GetRenderSystemName(IRenderBufferPool *renderBufferPool) const;
 
-    bool HasScalingMethod(ESCALINGMETHOD scalingMethod) const;
+    bool HasScalingMethod(SCALINGMETHOD scalingMethod) const;
 
   protected:
     struct RenderBufferPools
diff --git a/xbmc/cores/RetroPlayer/buffers/video/RenderBufferGuiTexture.cpp b/xbmc/cores/RetroPlayer/buffers/video/RenderBufferGuiTexture.cpp
index 535b32835d69..bade73e23d3c 100644
--- a/xbmc/cores/RetroPlayer/buffers/video/RenderBufferGuiTexture.cpp
+++ b/xbmc/cores/RetroPlayer/buffers/video/RenderBufferGuiTexture.cpp
@@ -23,7 +23,7 @@
 using namespace KODI;
 using namespace RETRO;
 
-CRenderBufferGuiTexture::CRenderBufferGuiTexture(ESCALINGMETHOD scalingMethod) :
+CRenderBufferGuiTexture::CRenderBufferGuiTexture(SCALINGMETHOD scalingMethod) :
   m_scalingMethod(scalingMethod)
 {
   m_textureFormat = XB_FMT_A8R8G8B8;
@@ -99,13 +99,13 @@ AVPixelFormat CRenderBufferGuiTexture::TranslateFormat(unsigned int textureForma
   return AV_PIX_FMT_NONE;
 }
 
-TEXTURE_SCALING CRenderBufferGuiTexture::TranslateScalingMethod(ESCALINGMETHOD scalingMethod)
+TEXTURE_SCALING CRenderBufferGuiTexture::TranslateScalingMethod(SCALINGMETHOD scalingMethod)
 {
   switch (scalingMethod)
   {
-  case VS_SCALINGMETHOD_NEAREST:
+  case SCALINGMETHOD::NEAREST:
     return TEXTURE_SCALING::NEAREST;
-  case VS_SCALINGMETHOD_LINEAR:
+  case SCALINGMETHOD::LINEAR:
     return TEXTURE_SCALING::LINEAR;
   default:
     break;
diff --git a/xbmc/cores/RetroPlayer/buffers/video/RenderBufferGuiTexture.h b/xbmc/cores/RetroPlayer/buffers/video/RenderBufferGuiTexture.h
index 6827b7f682cd..aa614dd67bf9 100644
--- a/xbmc/cores/RetroPlayer/buffers/video/RenderBufferGuiTexture.h
+++ b/xbmc/cores/RetroPlayer/buffers/video/RenderBufferGuiTexture.h
@@ -21,7 +21,7 @@
 #pragma once
 
 #include "cores/RetroPlayer/buffers/BaseRenderBuffer.h"
-#include "cores/IPlayer.h"
+#include "cores/GameSettings.h"
 #include "guilib/Texture.h"
 #include "guilib/TextureFormats.h"
 
@@ -34,7 +34,7 @@ namespace RETRO
   class CRenderBufferGuiTexture : public CBaseRenderBuffer
   {
   public:
-    CRenderBufferGuiTexture(ESCALINGMETHOD scalingMethod);
+    CRenderBufferGuiTexture(SCALINGMETHOD scalingMethod);
     virtual ~CRenderBufferGuiTexture() = default;
 
     // implementation of IRenderBuffer via CBaseRenderBuffer
@@ -49,10 +49,10 @@ namespace RETRO
 
   protected:
     AVPixelFormat TranslateFormat(unsigned int textureFormat);
-    TEXTURE_SCALING TranslateScalingMethod(ESCALINGMETHOD scalingMethod);
+    TEXTURE_SCALING TranslateScalingMethod(SCALINGMETHOD scalingMethod);
 
     // Texture parameters
-    ESCALINGMETHOD m_scalingMethod;
+    SCALINGMETHOD m_scalingMethod;
     unsigned int m_textureFormat = XB_FMT_UNKNOWN;
     std::unique_ptr<CTexture> m_texture;
   };
diff --git a/xbmc/cores/RetroPlayer/guibridge/GUIGameRenderManager.cpp b/xbmc/cores/RetroPlayer/guibridge/GUIGameRenderManager.cpp
index 25942f56a3ba..b39f21d2b5ad 100644
--- a/xbmc/cores/RetroPlayer/guibridge/GUIGameRenderManager.cpp
+++ b/xbmc/cores/RetroPlayer/guibridge/GUIGameRenderManager.cpp
@@ -189,7 +189,7 @@ bool CGUIGameRenderManager::IsPlayingGame()
   return m_callback != nullptr;
 }
 
-bool CGUIGameRenderManager::SupportsRenderFeature(ERENDERFEATURE feature)
+bool CGUIGameRenderManager::SupportsRenderFeature(RENDERFEATURE feature)
 {
   CSingleLock lock(m_callbackMutex);
 
@@ -199,7 +199,7 @@ bool CGUIGameRenderManager::SupportsRenderFeature(ERENDERFEATURE feature)
   return false;
 }
 
-bool CGUIGameRenderManager::SupportsScalingMethod(ESCALINGMETHOD method)
+bool CGUIGameRenderManager::SupportsScalingMethod(SCALINGMETHOD method)
 {
   CSingleLock lock(m_callbackMutex);
 
diff --git a/xbmc/cores/RetroPlayer/guibridge/GUIGameRenderManager.h b/xbmc/cores/RetroPlayer/guibridge/GUIGameRenderManager.h
index 5a43f7f3280e..2b4f869cf548 100644
--- a/xbmc/cores/RetroPlayer/guibridge/GUIGameRenderManager.h
+++ b/xbmc/cores/RetroPlayer/guibridge/GUIGameRenderManager.h
@@ -20,7 +20,7 @@
 
 #pragma once
 
-#include "cores/IPlayer.h"
+#include "cores/GameSettings.h"
 #include "threads/CriticalSection.h"
 
 #include <map>
@@ -145,8 +145,8 @@ namespace RETRO
     // Functions exposed to friend class CGUIGameVideoHandle
     void UnregisterHandle(CGUIGameVideoHandle *handle) { }
     bool IsPlayingGame();
-    bool SupportsRenderFeature(ERENDERFEATURE feature);
-    bool SupportsScalingMethod(ESCALINGMETHOD method);
+    bool SupportsRenderFeature(RENDERFEATURE feature);
+    bool SupportsScalingMethod(SCALINGMETHOD method);
 
     // Functions exposed to CGUIGameSettingsHandle
     void UnregisterHandle(CGUIGameSettingsHandle *handle) { }
diff --git a/xbmc/cores/RetroPlayer/guibridge/GUIGameSettings.cpp b/xbmc/cores/RetroPlayer/guibridge/GUIGameSettings.cpp
index e02be1981e0a..19dbae4e515e 100644
--- a/xbmc/cores/RetroPlayer/guibridge/GUIGameSettings.cpp
+++ b/xbmc/cores/RetroPlayer/guibridge/GUIGameSettings.cpp
@@ -70,8 +70,8 @@ void CGUIGameSettings::UpdateSettings()
   CSingleLock lock(m_mutex);
 
   // Get settings from GUI
-  ESCALINGMETHOD scalingMethod = m_guiSettings.ScalingMethod();
-  ViewMode viewMode = m_guiSettings.ViewMode();
+  SCALINGMETHOD scalingMethod = m_guiSettings.ScalingMethod();
+  VIEWMODE viewMode = m_guiSettings.ViewMode();
   unsigned int rotationDegCCW = m_guiSettings.RotationDegCCW();
 
   // Save settings for renderer
diff --git a/xbmc/cores/RetroPlayer/guibridge/GUIGameVideoHandle.cpp b/xbmc/cores/RetroPlayer/guibridge/GUIGameVideoHandle.cpp
index e1875ec726bb..0feefca51422 100644
--- a/xbmc/cores/RetroPlayer/guibridge/GUIGameVideoHandle.cpp
+++ b/xbmc/cores/RetroPlayer/guibridge/GUIGameVideoHandle.cpp
@@ -39,12 +39,12 @@ bool CGUIGameVideoHandle::IsPlayingGame()
   return m_renderManager.IsPlayingGame();
 }
 
-bool CGUIGameVideoHandle::SupportsRenderFeature(ERENDERFEATURE feature)
+bool CGUIGameVideoHandle::SupportsRenderFeature(RENDERFEATURE feature)
 {
   return m_renderManager.SupportsRenderFeature(feature);
 }
 
-bool CGUIGameVideoHandle::SupportsScalingMethod(ESCALINGMETHOD method)
+bool CGUIGameVideoHandle::SupportsScalingMethod(SCALINGMETHOD method)
 {
   return m_renderManager.SupportsScalingMethod(method);
 }
diff --git a/xbmc/cores/RetroPlayer/guibridge/GUIGameVideoHandle.h b/xbmc/cores/RetroPlayer/guibridge/GUIGameVideoHandle.h
index 6e853702e6f8..c20439ecc453 100644
--- a/xbmc/cores/RetroPlayer/guibridge/GUIGameVideoHandle.h
+++ b/xbmc/cores/RetroPlayer/guibridge/GUIGameVideoHandle.h
@@ -20,7 +20,7 @@
 
 #pragma once
 
-#include "cores/IPlayer.h"
+#include "cores/GameSettings.h"
 
 namespace KODI
 {
@@ -35,8 +35,8 @@ namespace RETRO
     virtual ~CGUIGameVideoHandle();
 
     bool IsPlayingGame();
-    bool SupportsRenderFeature(ERENDERFEATURE feature);
-    bool SupportsScalingMethod(ESCALINGMETHOD method);
+    bool SupportsRenderFeature(RENDERFEATURE feature);
+    bool SupportsScalingMethod(SCALINGMETHOD method);
 
   private:
     // Construction parameters
diff --git a/xbmc/cores/RetroPlayer/guibridge/IRenderCallback.h b/xbmc/cores/RetroPlayer/guibridge/IRenderCallback.h
index a09d293ab278..d611a583abe5 100644
--- a/xbmc/cores/RetroPlayer/guibridge/IRenderCallback.h
+++ b/xbmc/cores/RetroPlayer/guibridge/IRenderCallback.h
@@ -20,7 +20,7 @@
 
 #pragma once
 
-#include "cores/IPlayer.h"
+#include "cores/GameSettings.h"
 
 namespace KODI
 {
@@ -31,8 +31,8 @@ namespace RETRO
   public:
     virtual ~IRenderCallback() = default;
 
-    virtual bool SupportsRenderFeature(ERENDERFEATURE feature) const = 0;
-    virtual bool SupportsScalingMethod(ESCALINGMETHOD method) const = 0;
+    virtual bool SupportsRenderFeature(RENDERFEATURE feature) const = 0;
+    virtual bool SupportsScalingMethod(SCALINGMETHOD method) const = 0;
   };
 }
 }
diff --git a/xbmc/cores/RetroPlayer/guicontrols/GUIGameControl.cpp b/xbmc/cores/RetroPlayer/guicontrols/GUIGameControl.cpp
index aa6ec26e7632..1b51dc017863 100644
--- a/xbmc/cores/RetroPlayer/guicontrols/GUIGameControl.cpp
+++ b/xbmc/cores/RetroPlayer/guicontrols/GUIGameControl.cpp
@@ -151,7 +151,7 @@ void CGUIGameControl::UpdateInfo(const CGUIListItem *item /* = nullptr */)
     {
       unsigned int scalingMethod;
       std::istringstream(std::move(strScalingMethod)) >> scalingMethod;
-      m_renderSettings->SetScalingMethod(static_cast<ESCALINGMETHOD>(scalingMethod));
+      m_renderSettings->SetScalingMethod(static_cast<SCALINGMETHOD>(scalingMethod));
       m_bHasScalingMethod = true;
     }
 
@@ -160,7 +160,7 @@ void CGUIGameControl::UpdateInfo(const CGUIListItem *item /* = nullptr */)
     {
       unsigned int viewMode;
       std::istringstream(std::move(strViewMode)) >> viewMode;
-      m_renderSettings->SetViewMode(static_cast<ViewMode>(viewMode));
+      m_renderSettings->SetViewMode(static_cast<VIEWMODE>(viewMode));
       m_bHasViewMode = true;
     }
 
diff --git a/xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.cpp b/xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.cpp
index 0b1341fa741c..722afd63323f 100644
--- a/xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.cpp
+++ b/xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.cpp
@@ -73,14 +73,14 @@ void CGUIRenderSettings::SetGeometry(CRenderGeometry geometry)
   m_renderSettings.Geometry() = std::move(geometry);
 }
 
-void CGUIRenderSettings::SetScalingMethod(ESCALINGMETHOD scalingMethod)
+void CGUIRenderSettings::SetScalingMethod(SCALINGMETHOD scalingMethod)
 {
   CSingleLock lock(m_mutex);
 
   m_renderSettings.VideoSettings().SetScalingMethod(scalingMethod);
 }
 
-void CGUIRenderSettings::SetViewMode(ViewMode viewMode)
+void CGUIRenderSettings::SetViewMode(VIEWMODE viewMode)
 {
   CSingleLock lock(m_mutex);
 
diff --git a/xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.h b/xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.h
index 4a40e4163ea8..305fb66321ae 100644
--- a/xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.h
+++ b/xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.h
@@ -23,7 +23,7 @@
 #include "cores/RetroPlayer/guibridge/IGUIRenderSettings.h"
 #include "cores/RetroPlayer/rendering/RenderGeometry.h"
 #include "cores/RetroPlayer/rendering/RenderSettings.h"
-#include "cores/IPlayer.h"
+#include "cores/GameSettings.h"
 #include "threads/CriticalSection.h"
 
 namespace KODI
@@ -48,8 +48,8 @@ namespace RETRO
     void Reset();
     void SetSettings(CRenderSettings settings);
     void SetGeometry(CRenderGeometry geometry);
-    void SetScalingMethod(ESCALINGMETHOD scalingMethod);
-    void SetViewMode(ViewMode viewMode);
+    void SetScalingMethod(SCALINGMETHOD scalingMethod);
+    void SetViewMode(VIEWMODE viewMode);
     void SetRotationDegCCW(unsigned int rotationDegCCW);
 
   private:
diff --git a/xbmc/cores/RetroPlayer/process/RPProcessInfo.cpp b/xbmc/cores/RetroPlayer/process/RPProcessInfo.cpp
index ec43920964da..962dda8ef0ee 100644
--- a/xbmc/cores/RetroPlayer/process/RPProcessInfo.cpp
+++ b/xbmc/cores/RetroPlayer/process/RPProcessInfo.cpp
@@ -176,16 +176,16 @@ void CRPProcessInfo::ResetInfo()
   }
 }
 
-bool CRPProcessInfo::HasScalingMethod(ESCALINGMETHOD scalingMethod) const
+bool CRPProcessInfo::HasScalingMethod(SCALINGMETHOD scalingMethod) const
 {
   return m_renderBufferManager->HasScalingMethod(scalingMethod);
 }
 
-std::vector<ESCALINGMETHOD> CRPProcessInfo::GetScalingMethods()
+std::vector<SCALINGMETHOD> CRPProcessInfo::GetScalingMethods()
 {
   return {
-    VS_SCALINGMETHOD_NEAREST,
-    VS_SCALINGMETHOD_LINEAR,
+    SCALINGMETHOD::NEAREST,
+    SCALINGMETHOD::LINEAR,
   };
 }
 
diff --git a/xbmc/cores/RetroPlayer/process/RPProcessInfo.h b/xbmc/cores/RetroPlayer/process/RPProcessInfo.h
index 7ca85d27bffa..74c8f83e1ba4 100644
--- a/xbmc/cores/RetroPlayer/process/RPProcessInfo.h
+++ b/xbmc/cores/RetroPlayer/process/RPProcessInfo.h
@@ -20,8 +20,8 @@
 
 #pragma once
 
-#include "cores/IPlayer.h"
 #include "cores/RetroPlayer/RetroPlayerTypes.h"
+#include "cores/GameSettings.h"
 #include "threads/CriticalSection.h"
 
 #include "libavutil/pixfmt.h"
@@ -144,12 +144,12 @@ namespace RETRO
     /*!
      * \brief Check if a buffer pool supports the given scaling method
      */
-    bool HasScalingMethod(ESCALINGMETHOD scalingMethod) const;
+    bool HasScalingMethod(SCALINGMETHOD scalingMethod) const;
 
     /*!
      * \brief Get the default scaling method for this rendering system
      */
-    ESCALINGMETHOD GetDefaultScalingMethod() const { return m_defaultScalingMethod; }
+    SCALINGMETHOD GetDefaultScalingMethod() const { return m_defaultScalingMethod; }
     ///}
 
     /// @name Player video info
@@ -183,7 +183,7 @@ namespace RETRO
     /*!
      * \brief Get all scaling methods available to the rendering system
      */
-    static std::vector<ESCALINGMETHOD> GetScalingMethods();
+    static std::vector<SCALINGMETHOD> GetScalingMethods();
 
     // Static factories
     static CreateRPProcessControl m_processControl;
@@ -202,7 +202,7 @@ namespace RETRO
   private:
     // Rendering parameters
     std::unique_ptr<CRenderContext> m_renderContext;
-    ESCALINGMETHOD m_defaultScalingMethod = VS_SCALINGMETHOD_AUTO;
+    SCALINGMETHOD m_defaultScalingMethod = SCALINGMETHOD::AUTO;
   };
 
 }
diff --git a/xbmc/cores/RetroPlayer/process/windows/RPProcessInfoWin.h b/xbmc/cores/RetroPlayer/process/windows/RPProcessInfoWin.h
index 111c2b943cc1..b51361eca3f2 100644
--- a/xbmc/cores/RetroPlayer/process/windows/RPProcessInfoWin.h
+++ b/xbmc/cores/RetroPlayer/process/windows/RPProcessInfoWin.h
@@ -20,7 +20,6 @@
 
 #pragma once
 
-#include "cores/IPlayer.h"
 #include "../RPProcessInfo.h"
 
 namespace KODI
diff --git a/xbmc/cores/RetroPlayer/rendering/RPRenderManager.cpp b/xbmc/cores/RetroPlayer/rendering/RPRenderManager.cpp
index fdddf42df2a8..1e0669d63896 100644
--- a/xbmc/cores/RetroPlayer/rendering/RPRenderManager.cpp
+++ b/xbmc/cores/RetroPlayer/rendering/RPRenderManager.cpp
@@ -262,7 +262,7 @@ void CRPRenderManager::ClearBackground()
   m_renderContext.Clear(0);
 }
 
-bool CRPRenderManager::SupportsRenderFeature(ERENDERFEATURE feature) const
+bool CRPRenderManager::SupportsRenderFeature(RENDERFEATURE feature) const
 {
   //! @todo Move to ProcessInfo
   for (const auto &renderer : m_renderers)
@@ -274,7 +274,7 @@ bool CRPRenderManager::SupportsRenderFeature(ERENDERFEATURE feature) const
   return false;
 }
 
-bool CRPRenderManager::SupportsScalingMethod(ESCALINGMETHOD method) const
+bool CRPRenderManager::SupportsScalingMethod(SCALINGMETHOD method) const
 {
   //! @todo Move to ProcessInfo
   for (IRenderBufferPool *bufferPool : m_processInfo.GetBufferManager().GetBufferPools())
@@ -543,7 +543,7 @@ CRenderVideoSettings CRPRenderManager::GetEffectiveSettings(const IGUIRenderSett
   }
 
   // Sanitize settings
-  if (effectiveSettings.GetScalingMethod() == VS_SCALINGMETHOD_AUTO)
+  if (effectiveSettings.GetScalingMethod() == SCALINGMETHOD::AUTO)
     effectiveSettings.SetScalingMethod(m_processInfo.GetDefaultScalingMethod());
 
   return effectiveSettings;
diff --git a/xbmc/cores/RetroPlayer/rendering/RPRenderManager.h b/xbmc/cores/RetroPlayer/rendering/RPRenderManager.h
index debece80c328..5eddd6134b35 100644
--- a/xbmc/cores/RetroPlayer/rendering/RPRenderManager.h
+++ b/xbmc/cores/RetroPlayer/rendering/RPRenderManager.h
@@ -104,8 +104,8 @@ namespace RETRO
     void ClearBackground() override;
 
     // Implementation of IRenderCallback
-    bool SupportsRenderFeature(ERENDERFEATURE feature) const override;
-    bool SupportsScalingMethod(ESCALINGMETHOD method) const override;
+    bool SupportsRenderFeature(RENDERFEATURE feature) const override;
+    bool SupportsScalingMethod(SCALINGMETHOD method) const override;
 
   private:
     /*!
diff --git a/xbmc/cores/RetroPlayer/rendering/RenderSettings.h b/xbmc/cores/RetroPlayer/rendering/RenderSettings.h
index 94c25d586a68..073b2edc0a7f 100644
--- a/xbmc/cores/RetroPlayer/rendering/RenderSettings.h
+++ b/xbmc/cores/RetroPlayer/rendering/RenderSettings.h
@@ -22,7 +22,6 @@
 
 #include "RenderGeometry.h"
 #include "RenderVideoSettings.h"
-#include "cores/IPlayer.h"
 
 namespace KODI
 {
diff --git a/xbmc/cores/RetroPlayer/rendering/RenderTranslator.cpp b/xbmc/cores/RetroPlayer/rendering/RenderTranslator.cpp
index 648bccf88358..342de38d8679 100644
--- a/xbmc/cores/RetroPlayer/rendering/RenderTranslator.cpp
+++ b/xbmc/cores/RetroPlayer/rendering/RenderTranslator.cpp
@@ -42,13 +42,13 @@ const char *CRenderTranslator::TranslatePixelFormat(AVPixelFormat format)
   return "unknown";
 }
 
-const char *CRenderTranslator::TranslateScalingMethod(ESCALINGMETHOD scalingMethod)
+const char *CRenderTranslator::TranslateScalingMethod(SCALINGMETHOD scalingMethod)
 {
   switch (scalingMethod)
   {
-  case VS_SCALINGMETHOD_NEAREST:
+  case SCALINGMETHOD::NEAREST:
     return "nearest";
-  case VS_SCALINGMETHOD_LINEAR:
+  case SCALINGMETHOD::LINEAR:
     return "linear";
   default:
     break;
diff --git a/xbmc/cores/RetroPlayer/rendering/RenderTranslator.h b/xbmc/cores/RetroPlayer/rendering/RenderTranslator.h
index 5e72a1035455..72e3982ab3ec 100644
--- a/xbmc/cores/RetroPlayer/rendering/RenderTranslator.h
+++ b/xbmc/cores/RetroPlayer/rendering/RenderTranslator.h
@@ -20,7 +20,7 @@
 
 #pragma once
 
-#include "cores/IPlayer.h"
+#include "cores/GameSettings.h"
 
 #include "libavutil/pixfmt.h"
 
@@ -39,7 +39,7 @@ namespace RETRO
     /*!
      * \brief Translate a scaling method to a string suitable for logging
      */
-    static const char *TranslateScalingMethod(ESCALINGMETHOD scalingMethod);
+    static const char *TranslateScalingMethod(SCALINGMETHOD scalingMethod);
 
     /*!
      * \brief Translate a width in pixels to a width in bytes
diff --git a/xbmc/cores/RetroPlayer/rendering/RenderVideoSettings.cpp b/xbmc/cores/RetroPlayer/rendering/RenderVideoSettings.cpp
index 74c7d2b7ec59..85938b1c8844 100644
--- a/xbmc/cores/RetroPlayer/rendering/RenderVideoSettings.cpp
+++ b/xbmc/cores/RetroPlayer/rendering/RenderVideoSettings.cpp
@@ -25,8 +25,8 @@ using namespace RETRO;
 
 void CRenderVideoSettings::Reset()
 {
-  m_scalingMethod = VS_SCALINGMETHOD_AUTO;
-  m_viewMode = ViewModeNormal;
+  m_scalingMethod = SCALINGMETHOD::AUTO;
+  m_viewMode = VIEWMODE::Normal;
   m_rotationDegCCW = 0;
 }
 
diff --git a/xbmc/cores/RetroPlayer/rendering/RenderVideoSettings.h b/xbmc/cores/RetroPlayer/rendering/RenderVideoSettings.h
index 85b20b60e21e..2cd9b20512a2 100644
--- a/xbmc/cores/RetroPlayer/rendering/RenderVideoSettings.h
+++ b/xbmc/cores/RetroPlayer/rendering/RenderVideoSettings.h
@@ -20,7 +20,7 @@
 
 #pragma once
 
-#include "cores/IPlayer.h"
+#include "cores/GameSettings.h"
 
 namespace KODI
 {
@@ -41,18 +41,18 @@ namespace RETRO
     bool operator<(const CRenderVideoSettings &rhs) const;
     bool operator>(const CRenderVideoSettings &rhs) const { return !(*this == rhs || *this < rhs); }
 
-    ESCALINGMETHOD GetScalingMethod() const { return m_scalingMethod; }
-    void SetScalingMethod(ESCALINGMETHOD method) { m_scalingMethod = method; }
+    SCALINGMETHOD GetScalingMethod() const { return m_scalingMethod; }
+    void SetScalingMethod(SCALINGMETHOD method) { m_scalingMethod = method; }
 
-    ViewMode GetRenderViewMode() const { return m_viewMode; }
-    void SetRenderViewMode(ViewMode mode) { m_viewMode = mode; }
+    VIEWMODE GetRenderViewMode() const { return m_viewMode; }
+    void SetRenderViewMode(VIEWMODE mode) { m_viewMode = mode; }
 
     unsigned int GetRenderRotation() const { return m_rotationDegCCW; }
     void SetRenderRotation(unsigned int rotationDegCCW) { m_rotationDegCCW = rotationDegCCW; }
 
   private:
-    ESCALINGMETHOD m_scalingMethod;
-    ViewMode m_viewMode;
+    SCALINGMETHOD m_scalingMethod;
+    VIEWMODE m_viewMode;
     unsigned int m_rotationDegCCW;
   };
 }
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.cpp b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.cpp
index 677d0c4ec059..10fbbd532769 100644
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.cpp
+++ b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.cpp
@@ -146,12 +146,12 @@ float CRPBaseRenderer::GetAspectRatio() const
   return m_sourceFrameRatio;
 }
 
-void CRPBaseRenderer::SetScalingMethod(ESCALINGMETHOD method)
+void CRPBaseRenderer::SetScalingMethod(SCALINGMETHOD method)
 {
   m_renderSettings.VideoSettings().SetScalingMethod(method);
 }
 
-void CRPBaseRenderer::SetViewMode(ViewMode viewMode)
+void CRPBaseRenderer::SetViewMode(VIEWMODE viewMode)
 {
   m_renderSettings.VideoSettings().SetRenderViewMode(viewMode);
   CalculateViewMode();
@@ -164,7 +164,7 @@ void CRPBaseRenderer::SetRenderRotation(unsigned int rotationDegCCW)
 
 void CRPBaseRenderer::CalculateViewMode()
 {
-  const ViewMode viewMode = m_renderSettings.VideoSettings().GetRenderViewMode();
+  const VIEWMODE viewMode = m_renderSettings.VideoSettings().GetRenderViewMode();
 
   // Parameters to determine
   float &pixelRatio = m_pixelRatio;
@@ -189,32 +189,7 @@ void CRPBaseRenderer::CalculateViewMode()
 
   switch (viewMode)
   {
-  case ViewModeZoom:
-  {
-    // Zoom image so no black bars
-    pixelRatio = 1.0f;
-
-    // Calculate the desired output ratio
-    float outputFrameRatio = sourceFrameRatio * pixelRatio / info.fPixelRatio;
-
-    // Now calculate the correct zoom amount
-    // First zoom to full height
-    float newHeight = screenHeight;
-    float newWidth = newHeight * outputFrameRatio;
-
-    zoomAmount = newWidth / screenWidth;
-
-    if (newWidth < screenWidth)
-    {
-      // Zoom to full width
-      newWidth = screenWidth;
-      newHeight = newWidth / outputFrameRatio;
-      zoomAmount = newHeight / screenHeight;
-    }
-
-    break;
-  }
-  case ViewModeStretch4x3:
+  case VIEWMODE::Stretch4x3:
   {
     // Stretch image to 4:3 ratio
     zoomAmount = 1.0f;
@@ -233,17 +208,7 @@ void CRPBaseRenderer::CalculateViewMode()
 
     break;
   }
-  case ViewModeWideZoom:
-  {
-    // Super zoom
-    float stretchAmount = (screenWidth / screenHeight) * info.fPixelRatio / sourceFrameRatio;
-
-    pixelRatio = pow(stretchAmount, float(2.0 / 3.0));
-    zoomAmount = pow(stretchAmount, float((stretchAmount < 1.0) ? -1.0 / 3.0 : 1.0 / 3.0));
-
-    break;
-  }
-  case ViewModeStretch16x9:
+  case VIEWMODE::Stretch16x9:
   {
     // Stretch image to 16:9 ratio
     zoomAmount = 1.0f;
@@ -262,7 +227,7 @@ void CRPBaseRenderer::CalculateViewMode()
 
     break;
   }
-  case ViewModeOriginal:
+  case VIEWMODE::Original:
   {
     // Zoom image so that the height is the original size
     pixelRatio = 1.0f;
@@ -284,7 +249,7 @@ void CRPBaseRenderer::CalculateViewMode()
 
     break;
   }
-  case ViewModeNormal:
+  case VIEWMODE::Normal:
   {
     pixelRatio = 1.0f;
     zoomAmount = 1.0f;
@@ -330,7 +295,7 @@ inline void CRPBaseRenderer::ReorderDrawPoints()
 
   // If renderer doesn't support rotation, treat orientation as 0 degree so
   // that ffmpeg might handle it
-  if (!Supports(RENDERFEATURE_ROTATION))
+  if (!Supports(RENDERFEATURE::ROTATION))
   {
     pointOffset = 0;
     changeAspect = false;
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.h b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.h
index 6cfb39e32e2c..7f5e84c71b04 100644
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.h
+++ b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.h
@@ -20,11 +20,13 @@
 
 #pragma once
 
-#include "cores/IPlayer.h"
 #include "cores/RetroPlayer/rendering/RenderSettings.h"
+#include "cores/GameSettings.h"
 #include "utils/Geometry.h"
 
+extern "C" {
 #include "libavutil/pixfmt.h"
+}
 
 #include <atomic>
 #include <memory>
@@ -60,9 +62,9 @@ namespace RETRO
     void RenderFrame(bool clear, uint8_t alpha);
 
     // Feature support
-    virtual bool Supports(ERENDERFEATURE feature) const = 0;
+    virtual bool Supports(RENDERFEATURE feature) const = 0;
     bool IsCompatible(const CRenderVideoSettings &settings) const;
-    virtual ESCALINGMETHOD GetDefaultScalingMethod() const = 0;
+    virtual SCALINGMETHOD GetDefaultScalingMethod() const = 0;
 
     // Public renderer interface
     virtual void Flush();
@@ -72,8 +74,8 @@ namespace RETRO
     const CRenderSettings &GetRenderSettings() const { return m_renderSettings; }
 
     // Set render settings
-    void SetScalingMethod(ESCALINGMETHOD method);
-    void SetViewMode(ViewMode viewMode);
+    void SetScalingMethod(SCALINGMETHOD method);
+    void SetViewMode(VIEWMODE viewMode);
     void SetRenderRotation(unsigned int rotationDegCCW);
 
     bool IsVisible() const;
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererGuiTexture.cpp b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererGuiTexture.cpp
index 19732750dc42..686006c9f6a2 100644
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererGuiTexture.cpp
+++ b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererGuiTexture.cpp
@@ -50,15 +50,15 @@ RenderBufferPoolVector CRendererFactoryGuiTexture::CreateBufferPools(CRenderCont
 {
   return {
 #if !defined(HAS_DX)
-    std::make_shared<CRenderBufferPoolGuiTexture>(VS_SCALINGMETHOD_NEAREST),
+    std::make_shared<CRenderBufferPoolGuiTexture>(SCALINGMETHOD::NEAREST),
 #endif
-    std::make_shared<CRenderBufferPoolGuiTexture>(VS_SCALINGMETHOD_LINEAR),
+    std::make_shared<CRenderBufferPoolGuiTexture>(SCALINGMETHOD::LINEAR),
   };
 }
 
 // --- CRenderBufferPoolGuiTexture -----------------------------------------------
 
-CRenderBufferPoolGuiTexture::CRenderBufferPoolGuiTexture(ESCALINGMETHOD scalingMethod) :
+CRenderBufferPoolGuiTexture::CRenderBufferPoolGuiTexture(SCALINGMETHOD scalingMethod) :
   m_scalingMethod(scalingMethod)
 {
 }
@@ -83,12 +83,12 @@ CRPRendererGuiTexture::CRPRendererGuiTexture(const CRenderSettings &renderSettin
 {
 }
 
-bool CRPRendererGuiTexture::Supports(ERENDERFEATURE feature) const
+bool CRPRendererGuiTexture::Supports(RENDERFEATURE feature) const
 {
-  if (feature == RENDERFEATURE_STRETCH         ||
-      feature == RENDERFEATURE_ZOOM            ||
-      feature == RENDERFEATURE_PIXEL_RATIO     ||
-      feature == RENDERFEATURE_ROTATION)
+  if (feature == RENDERFEATURE::STRETCH         ||
+      feature == RENDERFEATURE::ZOOM            ||
+      feature == RENDERFEATURE::PIXEL_RATIO     ||
+      feature == RENDERFEATURE::ROTATION)
   {
     return true;
   }
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererGuiTexture.h b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererGuiTexture.h
index 7cf46b3bc06c..03e657ee45eb 100644
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererGuiTexture.h
+++ b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererGuiTexture.h
@@ -23,7 +23,7 @@
 #include "RPBaseRenderer.h"
 #include "cores/RetroPlayer/buffers/BaseRenderBufferPool.h"
 #include "cores/RetroPlayer/process/RPProcessInfo.h"
-#include "cores/IPlayer.h"
+#include "cores/GameSettings.h"
 
 namespace KODI
 {
@@ -43,7 +43,7 @@ namespace RETRO
   class CRenderBufferPoolGuiTexture : public CBaseRenderBufferPool
   {
   public:
-    CRenderBufferPoolGuiTexture(ESCALINGMETHOD scalingMethod);
+    CRenderBufferPoolGuiTexture(SCALINGMETHOD scalingMethod);
     ~CRenderBufferPoolGuiTexture() override = default;
 
     // implementation of IRenderBufferPool via CBaseRenderBufferPool
@@ -53,7 +53,7 @@ namespace RETRO
     IRenderBuffer *CreateRenderBuffer(void *header = nullptr) override;
 
   private:
-    ESCALINGMETHOD m_scalingMethod;
+    SCALINGMETHOD m_scalingMethod;
   };
 
   class CRPRendererGuiTexture : public CRPBaseRenderer
@@ -63,8 +63,8 @@ namespace RETRO
     ~CRPRendererGuiTexture() override = default;
 
     // public implementation of CRPBaseRenderer
-    bool Supports(ERENDERFEATURE feature) const override;
-    ESCALINGMETHOD GetDefaultScalingMethod() const override { return VS_SCALINGMETHOD_NEAREST; }
+    bool Supports(RENDERFEATURE feature) const override;
+    SCALINGMETHOD GetDefaultScalingMethod() const override { return SCALINGMETHOD::NEAREST; }
 
   protected:
     // protected implementation of CRPBaseRenderer
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererMMAL.cpp b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererMMAL.cpp
index ed97e8304383..61bc2a91ffbd 100644
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererMMAL.cpp
+++ b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererMMAL.cpp
@@ -58,29 +58,28 @@ CRPRendererMMAL::~CRPRendererMMAL()
   Deinitialize();
 }
 
-bool CRPRendererMMAL::Supports(ERENDERFEATURE feature) const
+bool CRPRendererMMAL::Supports(RENDERFEATURE feature) const
 {
-  if (feature == RENDERFEATURE_STRETCH         ||
-      feature == RENDERFEATURE_ZOOM            ||
-      feature == RENDERFEATURE_ROTATION        ||
-      feature == RENDERFEATURE_VERTICAL_SHIFT  ||
-      feature == RENDERFEATURE_PIXEL_RATIO)
+  if (feature == RENDERFEATURE::STRETCH         ||
+      feature == RENDERFEATURE::ZOOM            ||
+      feature == RENDERFEATURE::ROTATION        ||
+      feature == RENDERFEATURE::PIXEL_RATIO)
     return true;
 
   return false;
 }
 
-bool CRPRendererMMAL::SupportsScalingMethod(ESCALINGMETHOD method)
+bool CRPRendererMMAL::SupportsScalingMethod(SCALINGMETHOD method)
 {
-  if (method == VS_SCALINGMETHOD_LINEAR)
+  if (method == SCALINGMETHOD::LINEAR)
     return true;
 
   return false;
 }
 
-ESCALINGMETHOD CRPRendererMMAL::GetDefaultScalingMethod() const
+SCALINGMETHOD CRPRendererMMAL::GetDefaultScalingMethod() const
 {
-  return VS_SCALINGMETHOD_LINEAR; //! @todo Add nearest neighbor support
+  return SCALINGMETHOD::LINEAR; //! @todo Add nearest neighbor support
 }
 
 void CRPRendererMMAL::Deinitialize()
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererMMAL.h b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererMMAL.h
index 27ad56fbd4cd..4da6c0314b2d 100644
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererMMAL.h
+++ b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererMMAL.h
@@ -22,6 +22,7 @@
 
 #include "RPBaseRenderer.h"
 #include "cores/RetroPlayer/process/RPProcessInfo.h"
+#include "cores/GameSettings.h"
 #include "threads/CriticalSection.h"
 
 #include <memory>
@@ -54,11 +55,11 @@ namespace RETRO
     ~CRPRendererMMAL() override;
 
     // public implementation of CRPBaseRenderer
-    bool Supports(ERENDERFEATURE feature) const override;
-    ESCALINGMETHOD GetDefaultScalingMethod() const override;
+    bool Supports(RENDERFEATURE feature) const override;
+    SCALINGMETHOD GetDefaultScalingMethod() const override;
     void Deinitialize() override;
 
-    static bool SupportsScalingMethod(ESCALINGMETHOD method);
+    static bool SupportsScalingMethod(SCALINGMETHOD method);
 
   protected:
     // protected implementation of CRPBaseRenderer
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererOpenGLES.cpp b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererOpenGLES.cpp
index 67b036e3e566..11fddfc5daef 100644
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererOpenGLES.cpp
+++ b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererOpenGLES.cpp
@@ -259,13 +259,12 @@ void CRPRendererOpenGLES::FlushInternal()
   glFinish();
 }
 
-bool CRPRendererOpenGLES::Supports(ERENDERFEATURE feature) const
+bool CRPRendererOpenGLES::Supports(RENDERFEATURE feature) const
 {
-  if (feature == RENDERFEATURE_STRETCH         ||
-      feature == RENDERFEATURE_ZOOM            ||
-      feature == RENDERFEATURE_VERTICAL_SHIFT  ||
-      feature == RENDERFEATURE_PIXEL_RATIO     ||
-      feature == RENDERFEATURE_ROTATION)
+  if (feature == RENDERFEATURE::STRETCH         ||
+      feature == RENDERFEATURE::ZOOM            ||
+      feature == RENDERFEATURE::PIXEL_RATIO     ||
+      feature == RENDERFEATURE::ROTATION)
   {
     return true;
   }
@@ -273,10 +272,10 @@ bool CRPRendererOpenGLES::Supports(ERENDERFEATURE feature) const
   return false;
 }
 
-bool CRPRendererOpenGLES::SupportsScalingMethod(ESCALINGMETHOD method)
+bool CRPRendererOpenGLES::SupportsScalingMethod(SCALINGMETHOD method)
 {
-  if (method == VS_SCALINGMETHOD_NEAREST ||
-      method == VS_SCALINGMETHOD_LINEAR)
+  if (method == SCALINGMETHOD::NEAREST ||
+      method == SCALINGMETHOD::LINEAR)
   {
     return true;
   }
@@ -431,7 +430,7 @@ void CRPRendererOpenGLES::Render(uint8_t alpha)
   glBindTexture(m_textureTarget, renderBuffer->TextureID());
 
   GLint filter = GL_NEAREST;
-  if (GetRenderSettings().VideoSettings().GetScalingMethod() == VS_SCALINGMETHOD_LINEAR)
+  if (GetRenderSettings().VideoSettings().GetScalingMethod() == SCALINGMETHOD::LINEAR)
     filter = GL_LINEAR;
   glTexParameteri(m_textureTarget, GL_TEXTURE_MAG_FILTER, filter);
   glTexParameteri(m_textureTarget, GL_TEXTURE_MIN_FILTER, filter);
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererOpenGLES.h b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererOpenGLES.h
index 92fb76140507..2c0823a31dfe 100644
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererOpenGLES.h
+++ b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererOpenGLES.h
@@ -24,6 +24,7 @@
 #include "cores/RetroPlayer/buffers/video/RenderBufferSysMem.h"
 #include "cores/RetroPlayer/buffers/BaseRenderBufferPool.h"
 #include "cores/RetroPlayer/process/RPProcessInfo.h"
+#include "cores/GameSettings.h"
 
 #include "system_gl.h"
 
@@ -113,10 +114,10 @@ namespace RETRO
     ~CRPRendererOpenGLES() override;
 
     // implementation of CRPBaseRenderer
-    bool Supports(ERENDERFEATURE feature) const override;
-    ESCALINGMETHOD GetDefaultScalingMethod() const override { return VS_SCALINGMETHOD_NEAREST; }
+    bool Supports(RENDERFEATURE feature) const override;
+    SCALINGMETHOD GetDefaultScalingMethod() const override { return SCALINGMETHOD::NEAREST; }
 
-    static bool SupportsScalingMethod(ESCALINGMETHOD method);
+    static bool SupportsScalingMethod(SCALINGMETHOD method);
 
   protected:
     // implementation of CRPBaseRenderer
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPWinRenderer.cpp b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPWinRenderer.cpp
index 620a1e58e3cf..58e63d293d4c 100644
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPWinRenderer.cpp
+++ b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPWinRenderer.cpp
@@ -198,7 +198,7 @@ bool CWinRenderBufferPool::ConfigureDX(DXGI_FORMAT dxFormat)
   return true;
 }
 
-CRPWinOutputShader *CWinRenderBufferPool::GetShader(ESCALINGMETHOD scalingMethod) const
+CRPWinOutputShader *CWinRenderBufferPool::GetShader(SCALINGMETHOD scalingMethod) const
 {
   auto it = m_outputShaders.find(scalingMethod);
 
@@ -208,11 +208,11 @@ CRPWinOutputShader *CWinRenderBufferPool::GetShader(ESCALINGMETHOD scalingMethod
   return nullptr;
 }
 
-const std::vector<ESCALINGMETHOD> &CWinRenderBufferPool::GetScalingMethods()
+const std::vector<SCALINGMETHOD> &CWinRenderBufferPool::GetScalingMethods()
 {
-  static std::vector<ESCALINGMETHOD> scalingMethods = {
-    VS_SCALINGMETHOD_NEAREST,
-    VS_SCALINGMETHOD_LINEAR,
+  static std::vector<SCALINGMETHOD> scalingMethods = {
+    SCALINGMETHOD::NEAREST,
+    SCALINGMETHOD::LINEAR,
   };
 
   return scalingMethods;
@@ -264,22 +264,21 @@ void CRPWinRenderer::RenderInternal(bool clear, uint8_t alpha)
   Render(renderingDx->GetBackBuffer());
 }
 
-bool CRPWinRenderer::Supports(ERENDERFEATURE feature) const
+bool CRPWinRenderer::Supports(RENDERFEATURE feature) const
 {
-  if (feature == RENDERFEATURE_STRETCH ||
-      feature == RENDERFEATURE_ZOOM ||
-      feature == RENDERFEATURE_VERTICAL_SHIFT ||
-      feature == RENDERFEATURE_PIXEL_RATIO ||
-      feature == RENDERFEATURE_ROTATION)
+  if (feature == RENDERFEATURE::STRETCH ||
+      feature == RENDERFEATURE::ZOOM ||
+      feature == RENDERFEATURE::PIXEL_RATIO ||
+      feature == RENDERFEATURE::ROTATION)
     return true;
 
   return false;
 }
 
-bool CRPWinRenderer::SupportsScalingMethod(ESCALINGMETHOD method)
+bool CRPWinRenderer::SupportsScalingMethod(SCALINGMETHOD method)
 {
-  if (method == VS_SCALINGMETHOD_LINEAR ||
-      method == VS_SCALINGMETHOD_NEAREST)
+  if (method == SCALINGMETHOD::LINEAR ||
+      method == SCALINGMETHOD::NEAREST)
     return true;
 
   return false;
@@ -296,7 +295,7 @@ void CRPWinRenderer::Render(CD3DTexture *target)
       m_context.GetViewPort(viewPort);
 
       // Pick appropriate output shader depending on the scaling method of the renderer
-      ESCALINGMETHOD scalingMethod = m_renderSettings.VideoSettings().GetScalingMethod();
+      SCALINGMETHOD scalingMethod = m_renderSettings.VideoSettings().GetScalingMethod();
 
       CWinRenderBufferPool *bufferPool = static_cast<CWinRenderBufferPool*>(m_bufferPool.get());
       CRPWinOutputShader *outputShader = bufferPool->GetShader(scalingMethod);
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPWinRenderer.h b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPWinRenderer.h
index afb290fab232..32bf64042487 100644
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPWinRenderer.h
+++ b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPWinRenderer.h
@@ -98,15 +98,15 @@ namespace RETRO
 
     // DirectX interface
     bool ConfigureDX(DXGI_FORMAT dxFormat);
-    CRPWinOutputShader *GetShader(ESCALINGMETHOD scalingMethod) const;
+    CRPWinOutputShader *GetShader(SCALINGMETHOD scalingMethod) const;
 
   private:
-    static const std::vector<ESCALINGMETHOD> &GetScalingMethods();
+    static const std::vector<SCALINGMETHOD> &GetScalingMethods();
 
     void CompileOutputShaders();
 
     DXGI_FORMAT m_targetDxFormat = DXGI_FORMAT_UNKNOWN;
-    std::map<ESCALINGMETHOD, std::unique_ptr<CRPWinOutputShader>> m_outputShaders;
+    std::map<SCALINGMETHOD, std::unique_ptr<CRPWinOutputShader>> m_outputShaders;
   };
 
   class CRPWinRenderer : public CRPBaseRenderer
@@ -116,15 +116,15 @@ namespace RETRO
     ~CRPWinRenderer() override;
 
     // implementation of CRPBaseRenderer
-    bool Supports(ERENDERFEATURE feature) const override;
-    ESCALINGMETHOD GetDefaultScalingMethod() const override { return DEFAULT_SCALING_METHOD; }
+    bool Supports(RENDERFEATURE feature) const override;
+    SCALINGMETHOD GetDefaultScalingMethod() const override { return DEFAULT_SCALING_METHOD; }
 
-    static bool SupportsScalingMethod(ESCALINGMETHOD method);
+    static bool SupportsScalingMethod(SCALINGMETHOD method);
 
     /*!
      * \brief The default scaling method of the renderer
      */
-    static const ESCALINGMETHOD DEFAULT_SCALING_METHOD = VS_SCALINGMETHOD_NEAREST;
+    static const SCALINGMETHOD DEFAULT_SCALING_METHOD = SCALINGMETHOD::NEAREST;
 
   protected:
     // implementation of CRPBaseRenderer
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoShaders/windows/RPWinOutputShader.cpp b/xbmc/cores/RetroPlayer/rendering/VideoShaders/windows/RPWinOutputShader.cpp
index 24da4f44b9e0..97a6594f3e27 100644
--- a/xbmc/cores/RetroPlayer/rendering/VideoShaders/windows/RPWinOutputShader.cpp
+++ b/xbmc/cores/RetroPlayer/rendering/VideoShaders/windows/RPWinOutputShader.cpp
@@ -23,17 +23,17 @@
 using namespace KODI;
 using namespace RETRO;
 
-bool CRPWinOutputShader::Create(ESCALINGMETHOD scalingMethod)
+bool CRPWinOutputShader::Create(SCALINGMETHOD scalingMethod)
 {
   CWinShader::CreateVertexBuffer(4, sizeof(CUSTOMVERTEX));
 
   DefinesMap defines;
   switch (scalingMethod)
   {
-  case VS_SCALINGMETHOD_NEAREST:
+  case SCALINGMETHOD::NEAREST:
     defines["SAMP_NEAREST"] = "";
     break;
-  case VS_SCALINGMETHOD_LINEAR:
+  case SCALINGMETHOD::LINEAR:
   default:
     break;
   }
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoShaders/windows/RPWinOutputShader.h b/xbmc/cores/RetroPlayer/rendering/VideoShaders/windows/RPWinOutputShader.h
index f1dca0e7a744..1f1d628d9039 100644
--- a/xbmc/cores/RetroPlayer/rendering/VideoShaders/windows/RPWinOutputShader.h
+++ b/xbmc/cores/RetroPlayer/rendering/VideoShaders/windows/RPWinOutputShader.h
@@ -21,6 +21,7 @@
 #pragma once
 
 #include "cores/VideoPlayer/VideoRenderers/VideoShaders/WinVideoFilter.h"
+#include "cores/GameSettings.h"
 
 namespace KODI
 {
@@ -32,7 +33,7 @@ class CRPWinOutputShader : public CWinShader
 public:
   ~CRPWinOutputShader() = default;
 
-  bool Create(ESCALINGMETHOD scalingMethod);
+  bool Create(SCALINGMETHOD scalingMethod);
   void Render(CD3DTexture &sourceTexture, unsigned sourceWidth, unsigned sourceHeight, CRect sourceRect, const CPoint points[4]
     , CRect &viewPort, CD3DTexture *target, unsigned range = 0);
 
diff --git a/xbmc/games/dialogs/osd/DialogGameVideoFilter.cpp b/xbmc/games/dialogs/osd/DialogGameVideoFilter.cpp
index 444c8e62ebce..0443b592e8e3 100644
--- a/xbmc/games/dialogs/osd/DialogGameVideoFilter.cpp
+++ b/xbmc/games/dialogs/osd/DialogGameVideoFilter.cpp
@@ -37,13 +37,13 @@ namespace
     int nameIndex;
     int categoryIndex;
     int descriptionIndex;
-    ESCALINGMETHOD scalingMethod;
+    RETRO::SCALINGMETHOD scalingMethod;
   };
 
   const std::vector<ScalingMethodProperties> scalingMethods =
   {
-    { 16301, 16296, 16298, VS_SCALINGMETHOD_NEAREST },
-    { 16302, 16297, 16299, VS_SCALINGMETHOD_LINEAR },
+    { 16301, 16296, 16298, RETRO::SCALINGMETHOD::NEAREST },
+    { 16302, 16297, 16299, RETRO::SCALINGMETHOD::LINEAR },
   };
 }
 
@@ -82,7 +82,7 @@ void CDialogGameVideoFilter::InitScalingMethods()
       {
         CFileItemPtr item = std::make_shared<CFileItem>(g_localizeStrings.Get(scalingMethodProps.nameIndex));
         item->SetLabel2(g_localizeStrings.Get(scalingMethodProps.categoryIndex));
-        item->SetProperty("game.scalingmethod", CVariant{ scalingMethodProps.scalingMethod });
+        item->SetProperty("game.scalingmethod", CVariant{ static_cast<int>(scalingMethodProps.scalingMethod) });
         item->SetProperty("game.videofilterdescription", CVariant{ g_localizeStrings.Get(scalingMethodProps.descriptionIndex) });
         m_items.Add(std::move(item));
       }
@@ -102,7 +102,7 @@ void CDialogGameVideoFilter::OnItemFocus(unsigned int index)
   {
     CFileItemPtr item = m_items[index];
 
-    ESCALINGMETHOD scalingMethod;
+    RETRO::SCALINGMETHOD scalingMethod;
     std::string description;
     GetProperties(*item, scalingMethod, description);
 
@@ -130,7 +130,7 @@ unsigned int CDialogGameVideoFilter::GetFocusedItem() const
 
   for (int i = 0; i < m_items.Size(); i++)
   {
-    ESCALINGMETHOD scalingMethod;
+    RETRO::SCALINGMETHOD scalingMethod;
     std::string description;
     GetProperties(*m_items[i], scalingMethod, description);
 
@@ -148,12 +148,12 @@ void CDialogGameVideoFilter::PostExit()
   m_items.Clear();
 }
 
-void CDialogGameVideoFilter::GetProperties(const CFileItem &item, ESCALINGMETHOD &scalingMethod, std::string &description)
+void CDialogGameVideoFilter::GetProperties(const CFileItem &item, RETRO::SCALINGMETHOD &scalingMethod, std::string &description)
 {
-  scalingMethod = VS_SCALINGMETHOD_AUTO;
+  scalingMethod = RETRO::SCALINGMETHOD::AUTO;
   description = item.GetProperty("game.videofilterdescription").asString();
 
   std::string strScalingMethod = item.GetProperty("game.scalingmethod").asString();
   if (StringUtils::IsNaturalNumber(strScalingMethod))
-    scalingMethod = static_cast<ESCALINGMETHOD>(item.GetProperty("game.scalingmethod").asUnsignedInteger());
+    scalingMethod = static_cast<RETRO::SCALINGMETHOD>(item.GetProperty("game.scalingmethod").asUnsignedInteger());
 }
diff --git a/xbmc/games/dialogs/osd/DialogGameVideoFilter.h b/xbmc/games/dialogs/osd/DialogGameVideoFilter.h
index f839910e37ee..d0e8e3b98738 100644
--- a/xbmc/games/dialogs/osd/DialogGameVideoFilter.h
+++ b/xbmc/games/dialogs/osd/DialogGameVideoFilter.h
@@ -21,7 +21,7 @@
 #pragma once
 
 #include "DialogGameVideoSelect.h"
-#include "cores/IPlayer.h"
+#include "cores/GameSettings.h"
 #include "FileItem.h"
 
 namespace KODI
@@ -46,7 +46,7 @@ namespace GAME
   private:
     void InitScalingMethods();
 
-    static void GetProperties(const CFileItem &item, ESCALINGMETHOD &scalingMethod, std::string &description);
+    static void GetProperties(const CFileItem &item, RETRO::SCALINGMETHOD &scalingMethod, std::string &description);
 
     CFileItemList m_items;
 
diff --git a/xbmc/games/dialogs/osd/DialogGameViewMode.cpp b/xbmc/games/dialogs/osd/DialogGameViewMode.cpp
index 1d5c4dbce771..ae029cb2d8dd 100644
--- a/xbmc/games/dialogs/osd/DialogGameViewMode.cpp
+++ b/xbmc/games/dialogs/osd/DialogGameViewMode.cpp
@@ -32,12 +32,11 @@ using namespace GAME;
 
 const std::vector<CDialogGameViewMode::ViewModeProperties> CDialogGameViewMode::m_allViewModes =
 {
-  { 630,   ViewModeNormal },
-//  { 631,   ViewModeZoom }, //! @todo RetroArch allows trimming some outer pixels
-  { 632,   ViewModeStretch4x3 },
-  { 634,   ViewModeStretch16x9 },
-  { 644,   ViewModeStretch16x9Nonlin },
-  { 635,   ViewModeOriginal },
+  { 630,   RETRO::VIEWMODE::Normal },
+//  { 631,   RETRO::VIEWMODE::Zoom }, //! @todo RetroArch allows trimming some outer pixels
+  { 632,   RETRO::VIEWMODE::Stretch4x3 },
+  { 634,   RETRO::VIEWMODE::Stretch16x9 },
+  { 635,   RETRO::VIEWMODE::Original },
 };
 
 CDialogGameViewMode::CDialogGameViewMode() :
@@ -60,24 +59,17 @@ void CDialogGameViewMode::PreInit()
 
     switch (viewMode.viewMode)
     {
-      case ViewModeNormal:
-      case ViewModeOriginal:
+      case RETRO::VIEWMODE::Normal:
+      case RETRO::VIEWMODE::Original:
         bSupported = true;
         break;
 
-      case ViewModeStretch4x3:
-      case ViewModeStretch16x9:
+      case RETRO::VIEWMODE::Stretch4x3:
+      case RETRO::VIEWMODE::Stretch16x9:
         if (m_gameVideoHandle)
         {
-          bSupported = m_gameVideoHandle->SupportsRenderFeature(RENDERFEATURE_STRETCH) ||
-                       m_gameVideoHandle->SupportsRenderFeature(RENDERFEATURE_PIXEL_RATIO);
-        }
-        break;
-
-      case ViewModeStretch16x9Nonlin:
-        if (m_gameVideoHandle)
-        {
-          bSupported = m_gameVideoHandle->SupportsRenderFeature(RENDERFEATURE_NONLINSTRETCH);
+          bSupported = m_gameVideoHandle->SupportsRenderFeature(RETRO::RENDERFEATURE::STRETCH) ||
+                       m_gameVideoHandle->SupportsRenderFeature(RETRO::RENDERFEATURE::PIXEL_RATIO);
         }
         break;
 
@@ -95,7 +87,7 @@ void CDialogGameViewMode::GetItems(CFileItemList &items)
   for (const auto &viewMode : m_viewModes)
   {
     CFileItemPtr item = std::make_shared<CFileItem>(g_localizeStrings.Get(viewMode.stringIndex));
-    item->SetProperty("game.viewmode", CVariant{ viewMode.viewMode });
+    item->SetProperty("game.viewmode", CVariant{ static_cast<int>(viewMode.viewMode) });
     items.Add(std::move(item));
   }
 }
@@ -104,7 +96,7 @@ void CDialogGameViewMode::OnItemFocus(unsigned int index)
 {
   if (index < m_viewModes.size())
   {
-    const ViewMode viewMode = m_viewModes[index].viewMode;
+    const RETRO::VIEWMODE viewMode = m_viewModes[index].viewMode;
 
     CGameSettings &gameSettings = CMediaSettings::GetInstance().GetCurrentGameSettings();
     if (gameSettings.ViewMode() != viewMode)
@@ -121,7 +113,7 @@ unsigned int CDialogGameViewMode::GetFocusedItem() const
 
   for (unsigned int i = 0; i < m_viewModes.size(); i++)
   {
-    const ViewMode viewMode = m_viewModes[i].viewMode;
+    const RETRO::VIEWMODE viewMode = m_viewModes[i].viewMode;
     if (viewMode == gameSettings.ViewMode())
       return i;
   }
diff --git a/xbmc/games/dialogs/osd/DialogGameViewMode.h b/xbmc/games/dialogs/osd/DialogGameViewMode.h
index f6250cafa545..e74c797bf0ab 100644
--- a/xbmc/games/dialogs/osd/DialogGameViewMode.h
+++ b/xbmc/games/dialogs/osd/DialogGameViewMode.h
@@ -21,7 +21,7 @@
 #pragma once
 
 #include "DialogGameVideoSelect.h"
-#include "cores/IPlayer.h"
+#include "cores/GameSettings.h"
 
 #include <vector>
 
@@ -48,7 +48,7 @@ namespace GAME
     struct ViewModeProperties
     {
       int stringIndex;
-      ViewMode viewMode;
+      RETRO::VIEWMODE viewMode;
     };
 
     std::vector<ViewModeProperties> m_viewModes;
diff --git a/xbmc/guilib/guiinfo/GamesGUIInfo.cpp b/xbmc/guilib/guiinfo/GamesGUIInfo.cpp
index 0b5d21e0cea7..b6767997e7a9 100644
--- a/xbmc/guilib/guiinfo/GamesGUIInfo.cpp
+++ b/xbmc/guilib/guiinfo/GamesGUIInfo.cpp
@@ -65,7 +65,7 @@ bool CGamesGUIInfo::GetLabel(std::string& value, const CFileItem *item, int cont
     ///////////////////////////////////////////////////////////////////////////////////////////////
     case RETROPLAYER_VIEWMODE:
     {
-      ViewMode viewMode = CMediaSettings::GetInstance().GetCurrentGameSettings().ViewMode();
+      VIEWMODE viewMode = CMediaSettings::GetInstance().GetCurrentGameSettings().ViewMode();
       value = CRetroPlayerUtils::ViewModeToDescription(viewMode);
       return true;
     }
diff --git a/xbmc/settings/GameSettings.cpp b/xbmc/settings/GameSettings.cpp
index 0835fd60d014..934a95199bb2 100644
--- a/xbmc/settings/GameSettings.cpp
+++ b/xbmc/settings/GameSettings.cpp
@@ -20,6 +20,8 @@
 
 #include "GameSettings.h"
 
+using namespace KODI;
+
 CGameSettings &CGameSettings::operator=(const CGameSettings &rhs)
 {
   if (this != &rhs)
@@ -33,8 +35,8 @@ CGameSettings &CGameSettings::operator=(const CGameSettings &rhs)
 
 void CGameSettings::Reset()
 {
-  m_scalingMethod = VS_SCALINGMETHOD_AUTO;
-  m_viewMode = ViewModeNormal;
+  m_scalingMethod = RETRO::SCALINGMETHOD::AUTO;
+  m_viewMode = RETRO::VIEWMODE::Normal;
   m_rotationDegCCW = 0;
 }
 
@@ -45,7 +47,7 @@ bool CGameSettings::operator==(const CGameSettings &rhs) const
          m_rotationDegCCW == rhs.m_rotationDegCCW;
 }
 
-void CGameSettings::SetScalingMethod(ESCALINGMETHOD scalingMethod)
+void CGameSettings::SetScalingMethod(RETRO::SCALINGMETHOD scalingMethod)
 {
   if (scalingMethod != m_scalingMethod)
   {
@@ -54,7 +56,7 @@ void CGameSettings::SetScalingMethod(ESCALINGMETHOD scalingMethod)
   }
 }
 
-void CGameSettings::SetViewMode(enum ViewMode viewMode)
+void CGameSettings::SetViewMode(RETRO::VIEWMODE viewMode)
 {
   if (viewMode != m_viewMode)
   {
diff --git a/xbmc/settings/GameSettings.h b/xbmc/settings/GameSettings.h
index 434133706880..e6c82c3c0e8e 100644
--- a/xbmc/settings/GameSettings.h
+++ b/xbmc/settings/GameSettings.h
@@ -20,7 +20,7 @@
 
 #pragma once
 
-#include "cores/IPlayer.h"
+#include "cores/GameSettings.h"
 #include "utils/Observer.h"
 
 class CGameSettings : public Observable
@@ -37,18 +37,18 @@ class CGameSettings : public Observable
   bool operator==(const CGameSettings &rhs) const;
   bool operator!=(const CGameSettings &rhs) const { return !(*this == rhs); }
 
-  ESCALINGMETHOD ScalingMethod() const { return m_scalingMethod; }
-  void SetScalingMethod(ESCALINGMETHOD scalingMethod);
+  KODI::RETRO::SCALINGMETHOD ScalingMethod() const { return m_scalingMethod; }
+  void SetScalingMethod(KODI::RETRO::SCALINGMETHOD scalingMethod);
 
-  enum ViewMode ViewMode() const { return m_viewMode; }
-  void SetViewMode(enum ViewMode viewMode);
+  KODI::RETRO::VIEWMODE ViewMode() const { return m_viewMode; }
+  void SetViewMode(KODI::RETRO::VIEWMODE viewMode);
 
   unsigned int RotationDegCCW() const { return m_rotationDegCCW; }
   void SetRotationDegCCW(unsigned int rotation);
 
 private:
   // Video settings
-  ESCALINGMETHOD m_scalingMethod;
-  enum ViewMode m_viewMode;
+  KODI::RETRO::SCALINGMETHOD m_scalingMethod;
+  KODI::RETRO::VIEWMODE m_viewMode;
   unsigned int m_rotationDegCCW;
 };
diff --git a/xbmc/settings/MediaSettings.cpp b/xbmc/settings/MediaSettings.cpp
index 516d416a4af7..3829e821053b 100644
--- a/xbmc/settings/MediaSettings.cpp
+++ b/xbmc/settings/MediaSettings.cpp
@@ -46,6 +46,7 @@
 #include "utils/Variant.h"
 #include "video/VideoDatabase.h"
 
+using namespace KODI;
 using namespace KODI::MESSAGING;
 
 using KODI::MESSAGING::HELPERS::DialogResponse;
@@ -135,12 +136,12 @@ bool CMediaSettings::Load(const TiXmlNode *settings)
   if (pElement != nullptr)
   {
     int scalingMethod;
-    if (XMLUtils::GetInt(pElement, "scalingmethod", scalingMethod, VS_SCALINGMETHOD_NEAREST, VS_SCALINGMETHOD_MAX))
-      m_defaultGameSettings.SetScalingMethod(static_cast<ESCALINGMETHOD>(scalingMethod));
+    if (XMLUtils::GetInt(pElement, "scalingmethod", scalingMethod, static_cast<int>(RETRO::SCALINGMETHOD::NEAREST), static_cast<int>(RETRO::SCALINGMETHOD::MAX)))
+      m_defaultGameSettings.SetScalingMethod(static_cast<RETRO::SCALINGMETHOD>(scalingMethod));
 
     int viewMode;
-    if (XMLUtils::GetInt(pElement, "viewmode", viewMode, ViewModeNormal, ViewModeZoom110Width))
-      m_defaultGameSettings.SetViewMode(static_cast<ViewMode>(viewMode));
+    if (XMLUtils::GetInt(pElement, "viewmode", viewMode, static_cast<int>(RETRO::VIEWMODE::Normal), static_cast<int>(RETRO::VIEWMODE::Max)))
+      m_defaultGameSettings.SetViewMode(static_cast<RETRO::VIEWMODE>(viewMode));
 
     int rotation;
     if (XMLUtils::GetInt(pElement, "rotation", rotation, 0, 270) && rotation >= 0)
@@ -239,8 +240,8 @@ bool CMediaSettings::Save(TiXmlNode *settings) const
   if (pNode == nullptr)
     return false;
 
-  XMLUtils::SetInt(pNode, "scalingmethod", m_defaultGameSettings.ScalingMethod());
-  XMLUtils::SetInt(pNode, "viewmode", m_defaultGameSettings.ViewMode());
+  XMLUtils::SetInt(pNode, "scalingmethod", static_cast<int>(m_defaultGameSettings.ScalingMethod()));
+  XMLUtils::SetInt(pNode, "viewmode", static_cast<int>(m_defaultGameSettings.ViewMode()));
   XMLUtils::SetInt(pNode, "rotation", m_defaultGameSettings.RotationDegCCW());
 
   // mymusic
diff --git a/xbmc/settings/MediaSettings.h b/xbmc/settings/MediaSettings.h
index 7764b7cad407..8b59258788cf 100644
--- a/xbmc/settings/MediaSettings.h
+++ b/xbmc/settings/MediaSettings.h
@@ -23,6 +23,7 @@
 #include <map>
 #include <string>
 
+#include "cores/VideoSettings.h"
 #include "settings/lib/ISettingCallback.h"
 #include "settings/lib/ISettingsHandler.h"
 #include "settings/lib/ISubSettings.h"

From 971abc091a2463b07b57fc9d36fd8fcc626a91c8 Mon Sep 17 00:00:00 2001
From: Garrett Brown <themagnificentmrb@gmail.com>
Date: Sat, 9 Jun 2018 16:14:50 -0700
Subject: [PATCH 4/9] Game OSD: Change "Stretch 16:9" to "Fullscreen"

---
 addons/resource.language.en_gb/resources/strings.po               | 8 +++++++-
 xbmc/GUIInfoManager.cpp                                           | 3 +--
 xbmc/cores/GameSettings.h                                         | 2 +-
 xbmc/cores/RetroPlayer/RetroPlayerUtils.cpp                       | 4 ++--
 .../cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.cpp | 2 +-
 xbmc/games/dialogs/osd/DialogGameViewMode.cpp                     | 4 ++--
 6 files changed, 14 insertions(+), 9 deletions(-)

diff --git a/addons/resource.language.en_gb/resources/strings.po b/addons/resource.language.en_gb/resources/strings.po
index 957f6bf4785f..a989bd5d634f 100644
--- a/addons/resource.language.en_gb/resources/strings.po
+++ b/addons/resource.language.en_gb/resources/strings.po
@@ -17364,7 +17364,13 @@ msgctxt "#35231"
 msgid "270째"
 msgstr ""
 
-#empty strings from id 35232 to 35249
+#. Label of thumbnail in the in-game menu for stretching the video to fullscreen
+#: xbmc/games/dialogs/osd/DialogGameViewMode.h
+msgctxt "#35232"
+msgid "Fullscreen"
+msgstr ""
+
+#empty strings from id 35233 to 35249
 
 #: xbmc/windows/GUIMediaWindow.cpp
 msgctxt "#35250"
diff --git a/xbmc/GUIInfoManager.cpp b/xbmc/GUIInfoManager.cpp
index d1bc0bb91f62..15b4b962fe14 100644
--- a/xbmc/GUIInfoManager.cpp
+++ b/xbmc/GUIInfoManager.cpp
@@ -2081,8 +2081,7 @@ const infomap videoplayer[] =    {{ "title",            VIDEOPLAYER_TITLE },
 ///     The following values are possible:
 ///     - normal
 ///     - 4:3
-///     - 16:9
-///     - nonlinear
+///     - fullscreen
 ///     - original
 ///   }
 /// \table_end
diff --git a/xbmc/cores/GameSettings.h b/xbmc/cores/GameSettings.h
index c178b6f05d9e..b8cf0a6aa5fd 100644
--- a/xbmc/cores/GameSettings.h
+++ b/xbmc/cores/GameSettings.h
@@ -38,7 +38,7 @@ enum class VIEWMODE
 {
   Normal = 0,
   Stretch4x3 = 1,
-  Stretch16x9 = 2,
+  Fullscreen = 2,
   Original = 3,
   Max = Original
 };
diff --git a/xbmc/cores/RetroPlayer/RetroPlayerUtils.cpp b/xbmc/cores/RetroPlayer/RetroPlayerUtils.cpp
index addb4bed2e2a..90fefbcd0aa4 100644
--- a/xbmc/cores/RetroPlayer/RetroPlayerUtils.cpp
+++ b/xbmc/cores/RetroPlayer/RetroPlayerUtils.cpp
@@ -31,8 +31,8 @@ std::string CRetroPlayerUtils::ViewModeToDescription(VIEWMODE viewMode)
       return "normal";
     case VIEWMODE::Stretch4x3:
       return "4:3";
-    case VIEWMODE::Stretch16x9:
-      return "16:9";
+    case VIEWMODE::Fullscreen:
+      return "fullscreen";
     case VIEWMODE::Original:
       return "original";
     default:
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.cpp b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.cpp
index 10fbbd532769..6505a1713333 100644
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.cpp
+++ b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.cpp
@@ -208,7 +208,7 @@ void CRPBaseRenderer::CalculateViewMode()
 
     break;
   }
-  case VIEWMODE::Stretch16x9:
+  case VIEWMODE::Fullscreen:
   {
     // Stretch image to 16:9 ratio
     zoomAmount = 1.0f;
diff --git a/xbmc/games/dialogs/osd/DialogGameViewMode.cpp b/xbmc/games/dialogs/osd/DialogGameViewMode.cpp
index ae029cb2d8dd..0a8bc4615a43 100644
--- a/xbmc/games/dialogs/osd/DialogGameViewMode.cpp
+++ b/xbmc/games/dialogs/osd/DialogGameViewMode.cpp
@@ -35,7 +35,7 @@ const std::vector<CDialogGameViewMode::ViewModeProperties> CDialogGameViewMode::
   { 630,   RETRO::VIEWMODE::Normal },
 //  { 631,   RETRO::VIEWMODE::Zoom }, //! @todo RetroArch allows trimming some outer pixels
   { 632,   RETRO::VIEWMODE::Stretch4x3 },
-  { 634,   RETRO::VIEWMODE::Stretch16x9 },
+  { 35232, RETRO::VIEWMODE::Fullscreen },
   { 635,   RETRO::VIEWMODE::Original },
 };
 
@@ -65,7 +65,7 @@ void CDialogGameViewMode::PreInit()
         break;
 
       case RETRO::VIEWMODE::Stretch4x3:
-      case RETRO::VIEWMODE::Stretch16x9:
+      case RETRO::VIEWMODE::Fullscreen:
         if (m_gameVideoHandle)
         {
           bSupported = m_gameVideoHandle->SupportsRenderFeature(RETRO::RENDERFEATURE::STRETCH) ||

From 78632eef6a51958b30fc5dcb260efbdf339b6619 Mon Sep 17 00:00:00 2001
From: Garrett Brown <themagnificentmrb@gmail.com>
Date: Sat, 9 Jun 2018 16:56:51 -0700
Subject: [PATCH 5/9] RetroPlayer: Remove view mode stretch hacks

---
 .../rendering/VideoRenderers/RPBaseRenderer.cpp    | 29 +++-------------------
 1 file changed, 4 insertions(+), 25 deletions(-)

diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.cpp b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.cpp
index 6505a1713333..04f6e85831eb 100644
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.cpp
+++ b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.cpp
@@ -171,7 +171,6 @@ void CRPBaseRenderer::CalculateViewMode()
   float &zoomAmount = m_zoomAmount;
 
   // Get our calibrated full screen resolution
-  RESOLUTION res = m_context.GetVideoResolution();
   RESOLUTION_INFO info = m_context.GetResInfo();
 
   float screenWidth = static_cast<float>(info.Overscan.right - info.Overscan.left);
@@ -191,39 +190,19 @@ void CRPBaseRenderer::CalculateViewMode()
   {
   case VIEWMODE::Stretch4x3:
   {
-    // Stretch image to 4:3 ratio
     zoomAmount = 1.0f;
 
-    if (res == RES_PAL_4x3 || res == RES_PAL60_4x3 || res == RES_NTSC_4x3 || res == RES_HDTV_480p_4x3)
-    {
-      // Stretch to the limits of the 4:3 screen
-      // Incorrect behaviour, but it's what the users want, so...
-      pixelRatio = (screenWidth / screenHeight) * info.fPixelRatio / sourceFrameRatio;
-    }
-    else
-    {
-      // Now we need to set pixelRatio so that fOutputFrameRatio = 4:3
-      pixelRatio = (4.0f / 3.0f) / sourceFrameRatio;
-    }
+    // Stretch image to 4:3 ratio
+    pixelRatio = (4.0f / 3.0f) / sourceFrameRatio;
 
     break;
   }
   case VIEWMODE::Fullscreen:
   {
-    // Stretch image to 16:9 ratio
     zoomAmount = 1.0f;
 
-    if (res == RES_PAL_4x3 || res == RES_PAL60_4x3 || res == RES_NTSC_4x3 || res == RES_HDTV_480p_4x3)
-    {
-      // Now we need to set pixelRatio so that outputFrameRatio = 16:9.
-      pixelRatio = (16.0f / 9.0f) / sourceFrameRatio;
-    }
-    else
-    {
-      // Stretch to the limits of the 16:9 screen
-      // Incorrect behaviour, but it's what the users want, so...
-      pixelRatio = (screenWidth / screenHeight) * info.fPixelRatio / sourceFrameRatio;
-    }
+    // Stretch to the limits of the screen
+    pixelRatio = (screenWidth / screenHeight) * info.fPixelRatio / sourceFrameRatio;
 
     break;
   }

From e3f641a0606263687466c75a8fe33febd04d94a8 Mon Sep 17 00:00:00 2001
From: Garrett Brown <themagnificentmrb@gmail.com>
Date: Sat, 9 Jun 2018 22:38:37 -0700
Subject: [PATCH 6/9] RetroPlayer: Remove aspect ratio error adjustment

---
 .../rendering/VideoRenderers/RPBaseRenderer.cpp       | 19 -------------------
 .../rendering/VideoRenderers/RPBaseRenderer.h         |  1 -
 2 files changed, 20 deletions(-)

diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.cpp b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.cpp
index 04f6e85831eb..5113bad0fff4 100644
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.cpp
+++ b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.cpp
@@ -22,10 +22,8 @@
 #include "cores/RetroPlayer/buffers/IRenderBuffer.h"
 #include "cores/RetroPlayer/buffers/IRenderBufferPool.h"
 #include "cores/RetroPlayer/rendering/RenderContext.h"
-#include "settings/Settings.h"
 #include "utils/log.h"
 #include "utils/MathUtils.h"
-#include "ServiceBroker.h"
 
 #include <cmath>
 #include <cstdlib>
@@ -376,18 +374,6 @@ void CRPBaseRenderer::CalcNormalRenderRect(float offsetX, float offsetY, float w
   // setting and the output pixel ratio setting)
   float outputFrameRatio = inputFrameRatio / m_context.GetResInfo().fPixelRatio;
 
-  // Allow a certain error to maximize size of render area
-  float fCorrection = width / height / outputFrameRatio - 1.0f;
-  float fAllowed = GetAllowedErrorInAspect();
-
-  if (fCorrection > fAllowed)
-    fCorrection = fAllowed;
-
-  if (fCorrection < -fAllowed)
-    fCorrection = -fAllowed;
-
-  outputFrameRatio *= 1.0f + fCorrection;
-
   // Maximize the game width
   float newWidth = width;
   float newHeight = newWidth / outputFrameRatio;
@@ -466,11 +452,6 @@ void CRPBaseRenderer::MarkDirty()
   //CServiceBroker::GetGUI()->GetWindowManager().MarkDirty(m_renderSettings.Geometry().Dimensions()); //! @todo
 }
 
-float CRPBaseRenderer::GetAllowedErrorInAspect() const
-{
-  return CServiceBroker::GetSettings().GetInt(CSettings::SETTING_VIDEOPLAYER_ERRORINASPECT) * 0.01f;
-}
-
 void CRPBaseRenderer::PreRender(bool clear)
 {
   if (!m_bConfigured)
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.h b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.h
index 7f5e84c71b04..5b698f0bb00b 100644
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.h
+++ b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.h
@@ -137,7 +137,6 @@ namespace RETRO
     void UpdateDrawPoints(const CRect &destRect);
     void ReorderDrawPoints();
     void MarkDirty();
-    float GetAllowedErrorInAspect() const;
 
     uint64_t m_renderFrameCount = 0;
     uint64_t m_lastRender = 0;

From cf545263b73a2f177f4acb4d31b5e436e3bb161f Mon Sep 17 00:00:00 2001
From: Garrett Brown <themagnificentmrb@gmail.com>
Date: Sun, 10 Jun 2018 08:51:35 -0700
Subject: [PATCH 7/9] RetroPlayer: Remove geometry information from render
 settings

---
 .../RetroPlayer/guibridge/IGUIRenderSettings.h     | 10 +++++
 .../RetroPlayer/guicontrols/GUIGameControl.cpp     | 10 ++---
 .../RetroPlayer/guicontrols/GUIRenderSettings.cpp  | 11 ++++-
 .../RetroPlayer/guicontrols/GUIRenderSettings.h    |  6 ++-
 xbmc/cores/RetroPlayer/rendering/CMakeLists.txt    |  2 -
 .../RetroPlayer/rendering/RPRenderManager.cpp      |  2 +-
 .../cores/RetroPlayer/rendering/RenderGeometry.cpp | 45 --------------------
 xbmc/cores/RetroPlayer/rendering/RenderGeometry.h  | 49 ----------------------
 .../cores/RetroPlayer/rendering/RenderSettings.cpp |  7 +---
 xbmc/cores/RetroPlayer/rendering/RenderSettings.h  |  5 ---
 .../rendering/VideoRenderers/RPBaseRenderer.cpp    |  6 +--
 .../rendering/VideoRenderers/RPBaseRenderer.h      |  1 +
 12 files changed, 34 insertions(+), 120 deletions(-)
 delete mode 100644 xbmc/cores/RetroPlayer/rendering/RenderGeometry.cpp
 delete mode 100644 xbmc/cores/RetroPlayer/rendering/RenderGeometry.h

diff --git a/xbmc/cores/RetroPlayer/guibridge/IGUIRenderSettings.h b/xbmc/cores/RetroPlayer/guibridge/IGUIRenderSettings.h
index 28cff2dcb105..c063229559c0 100644
--- a/xbmc/cores/RetroPlayer/guibridge/IGUIRenderSettings.h
+++ b/xbmc/cores/RetroPlayer/guibridge/IGUIRenderSettings.h
@@ -21,6 +21,7 @@
 #pragma once
 
 #include "cores/RetroPlayer/rendering/RenderSettings.h"
+#include "utils/Geometry.h"
 
 namespace KODI
 {
@@ -55,6 +56,15 @@ namespace RETRO
      * \return The render settings
      */
     virtual CRenderSettings GetSettings() const = 0;
+
+    /*!
+     * \brief Get the dimensions of this target
+     *
+     * Dimensions are ignored for fullscreen windows.
+     *
+     * \return The destination dimensions, or unused for fullscreen window
+     */
+    virtual CRect GetDimensions() const { return CRect{}; }
   };
 }
 }
diff --git a/xbmc/cores/RetroPlayer/guicontrols/GUIGameControl.cpp b/xbmc/cores/RetroPlayer/guicontrols/GUIGameControl.cpp
index 1b51dc017863..2cdfd280862a 100644
--- a/xbmc/cores/RetroPlayer/guicontrols/GUIGameControl.cpp
+++ b/xbmc/cores/RetroPlayer/guicontrols/GUIGameControl.cpp
@@ -22,7 +22,6 @@
 #include "GUIRenderSettings.h"
 #include "cores/RetroPlayer/guibridge/GUIGameRenderManager.h"
 #include "cores/RetroPlayer/guibridge/GUIRenderHandle.h"
-#include "cores/RetroPlayer/rendering/RenderGeometry.h"
 #include "cores/RetroPlayer/rendering/RenderSettings.h"
 #include "cores/RetroPlayer/rendering/RenderVideoSettings.h"
 #include "games/GameServices.h"
@@ -48,7 +47,7 @@ CGUIGameControl::CGUIGameControl(int parentID, int controlID, float posX, float
   // Initialize CGUIControl
   ControlType = GUICONTROL_GAME;
 
-  m_renderSettings->SetGeometry(CRenderGeometry(CRect(CPoint(posX, posY), CSize(width, height))));
+  m_renderSettings->SetDimensions(CRect(CPoint(posX, posY), CSize(width, height)));
 
   RegisterControl();
 }
@@ -64,6 +63,7 @@ CGUIGameControl::CGUIGameControl(const CGUIGameControl &other) :
   m_renderSettings(new CGUIRenderSettings(*this))
 {
   m_renderSettings->SetSettings(other.m_renderSettings->GetSettings());
+  m_renderSettings->SetDimensions(CRect(CPoint(m_posX, m_posY), CSize(m_width, m_height)));
 
   RegisterControl();
 }
@@ -125,19 +125,19 @@ bool CGUIGameControl::CanFocus() const
 void CGUIGameControl::SetPosition(float posX, float posY)
 {
   CGUIControl::SetPosition(posX, posY);
-  m_renderSettings->SetGeometry(CRenderGeometry(CRect(CPoint(posX, posY), CSize(m_width, m_height))));
+  m_renderSettings->SetDimensions(CRect(CPoint(posX, posY), CSize(m_width, m_height)));
 }
 
 void CGUIGameControl::SetWidth(float width)
 {
   CGUIControl::SetWidth(width);
-  m_renderSettings->SetGeometry(CRenderGeometry(CRect(CPoint(m_posX, m_posY), CSize(width, m_height))));
+  m_renderSettings->SetDimensions(CRect(CPoint(m_posX, m_posY), CSize(width, m_height)));
 }
 
 void CGUIGameControl::SetHeight(float height)
 {
   CGUIControl::SetHeight(height);
-  m_renderSettings->SetGeometry(CRenderGeometry(CRect(CPoint(m_posX, m_posY), CSize(m_width, height))));
+  m_renderSettings->SetDimensions(CRect(CPoint(m_posX, m_posY), CSize(m_width, height)));
 }
 
 void CGUIGameControl::UpdateInfo(const CGUIListItem *item /* = nullptr */)
diff --git a/xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.cpp b/xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.cpp
index 722afd63323f..e3ecf15abeca 100644
--- a/xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.cpp
+++ b/xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.cpp
@@ -52,6 +52,13 @@ CRenderSettings CGUIRenderSettings::GetSettings() const
   return m_renderSettings;
 }
 
+CRect CGUIRenderSettings::GetDimensions() const
+{
+  CSingleLock lock(m_mutex);
+
+  return m_renderDimensions;
+}
+
 void CGUIRenderSettings::Reset()
 {
   CSingleLock lock(m_mutex);
@@ -66,11 +73,11 @@ void CGUIRenderSettings::SetSettings(CRenderSettings settings)
   m_renderSettings = std::move(settings);
 }
 
-void CGUIRenderSettings::SetGeometry(CRenderGeometry geometry)
+void CGUIRenderSettings::SetDimensions(const CRect &dimensions)
 {
   CSingleLock lock(m_mutex);
 
-  m_renderSettings.Geometry() = std::move(geometry);
+  m_renderDimensions = dimensions;
 }
 
 void CGUIRenderSettings::SetScalingMethod(SCALINGMETHOD scalingMethod)
diff --git a/xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.h b/xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.h
index 305fb66321ae..4383a92c3373 100644
--- a/xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.h
+++ b/xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.h
@@ -21,10 +21,10 @@
 #pragma once
 
 #include "cores/RetroPlayer/guibridge/IGUIRenderSettings.h"
-#include "cores/RetroPlayer/rendering/RenderGeometry.h"
 #include "cores/RetroPlayer/rendering/RenderSettings.h"
 #include "cores/GameSettings.h"
 #include "threads/CriticalSection.h"
+#include "utils/Geometry.h"
 
 namespace KODI
 {
@@ -43,11 +43,12 @@ namespace RETRO
     bool HasViewMode() const override;
     bool HasRotation() const override;
     CRenderSettings GetSettings() const override;
+    CRect GetDimensions() const override;
 
     // Render functions
     void Reset();
     void SetSettings(CRenderSettings settings);
-    void SetGeometry(CRenderGeometry geometry);
+    void SetDimensions(const CRect &dimensions);
     void SetScalingMethod(SCALINGMETHOD scalingMethod);
     void SetViewMode(VIEWMODE viewMode);
     void SetRotationDegCCW(unsigned int rotationDegCCW);
@@ -58,6 +59,7 @@ namespace RETRO
 
     // Render parameters
     CRenderSettings m_renderSettings;
+    CRect m_renderDimensions;
 
     // Synchronization parameters
     CCriticalSection m_mutex;
diff --git a/xbmc/cores/RetroPlayer/rendering/CMakeLists.txt b/xbmc/cores/RetroPlayer/rendering/CMakeLists.txt
index 2c00e2d67bf3..b7ab3ff2493a 100644
--- a/xbmc/cores/RetroPlayer/rendering/CMakeLists.txt
+++ b/xbmc/cores/RetroPlayer/rendering/CMakeLists.txt
@@ -1,5 +1,4 @@
 set(SOURCES RenderContext.cpp
-            RenderGeometry.cpp
             RenderSettings.cpp
             RenderTranslator.cpp
             RenderVideoSettings.cpp
@@ -8,7 +7,6 @@ set(SOURCES RenderContext.cpp
 
 set(HEADERS IRenderManager.h
             RenderContext.h
-            RenderGeometry.h
             RenderSettings.h
             RenderTranslator.h
             RenderVideoSettings.h
diff --git a/xbmc/cores/RetroPlayer/rendering/RPRenderManager.cpp b/xbmc/cores/RetroPlayer/rendering/RPRenderManager.cpp
index 1e0669d63896..c0bc29692a50 100644
--- a/xbmc/cores/RetroPlayer/rendering/RPRenderManager.cpp
+++ b/xbmc/cores/RetroPlayer/rendering/RPRenderManager.cpp
@@ -226,7 +226,7 @@ void CRPRenderManager::RenderControl(bool bClear, bool bUseAlpha, const CRect &r
     m_renderContext.SetFullScreenVideo(false);
 
   // Set coordinates
-  CRect coords = renderSettings->GetSettings().Geometry().Dimensions();
+  CRect coords = renderSettings->GetDimensions();
   m_renderContext.SetViewWindow(coords.x1, coords.y1, coords.x2, coords.y2);
   TransformMatrix mat;
   m_renderContext.SetTransform(mat, 1.0, 1.0);
diff --git a/xbmc/cores/RetroPlayer/rendering/RenderGeometry.cpp b/xbmc/cores/RetroPlayer/rendering/RenderGeometry.cpp
deleted file mode 100644
index e612583d8d63..000000000000
--- a/xbmc/cores/RetroPlayer/rendering/RenderGeometry.cpp
+++ /dev/null
@@ -1,45 +0,0 @@
-/*
- *      Copyright (C) 2017 Team Kodi
- *      http://kodi.tv
- *
- *  This Program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2, or (at your option)
- *  any later version.
- *
- *  This Program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- *  GNU General Public License for more details.
- *
- *  You should have received a copy of the GNU General Public License
- *  along with this Program; see the file COPYING.  If not, see
- *  <http://www.gnu.org/licenses/>.
- *
- */
-
-#include "RenderGeometry.h"
-#include "settings/GameSettings.h"
-#include "settings/MediaSettings.h"
-
-using namespace KODI;
-using namespace RETRO;
-
-CRenderGeometry::CRenderGeometry(const CRect &dimensions) :
-  m_dimensions(dimensions)
-{
-}
-
-void CRenderGeometry::Reset()
-{
-}
-
-bool CRenderGeometry::operator==(const CRenderGeometry &rhs) const
-{
-  return m_dimensions == rhs.m_dimensions;
-}
-
-bool CRenderGeometry::operator<(const CRenderGeometry &rhs) const
-{
-  return m_dimensions.Area() < rhs.m_dimensions.Area();
-}
diff --git a/xbmc/cores/RetroPlayer/rendering/RenderGeometry.h b/xbmc/cores/RetroPlayer/rendering/RenderGeometry.h
deleted file mode 100644
index 906901a62564..000000000000
--- a/xbmc/cores/RetroPlayer/rendering/RenderGeometry.h
+++ /dev/null
@@ -1,49 +0,0 @@
-/*
- *      Copyright (C) 2017 Team Kodi
- *      http://kodi.tv
- *
- *  This Program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2, or (at your option)
- *  any later version.
- *
- *  This Program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- *  GNU General Public License for more details.
- *
- *  You should have received a copy of the GNU General Public License
- *  along with this Program; see the file COPYING.  If not, see
- *  <http://www.gnu.org/licenses/>.
- *
- */
-
-#pragma once
-
-#include "utils/Geometry.h"
-
-namespace KODI
-{
-namespace RETRO
-{
-  class CRenderGeometry
-  {
-  public:
-    CRenderGeometry() { Reset(); }
-    CRenderGeometry(const CRect &dimensions);
-
-    void Reset();
-
-    bool operator==(const CRenderGeometry &rhs) const;
-    bool operator!=(const CRenderGeometry &rhs) const { return !(*this == rhs); }
-    bool operator<(const CRenderGeometry &rhs) const;
-    bool operator>(const CRenderGeometry &rhs) const { return !(*this == rhs || *this < rhs); }
-
-    CRect &Dimensions() { return m_dimensions; }
-    const CRect &Dimensions() const { return m_dimensions; }
-
-  private:
-    CRect m_dimensions;
-  };
-}
-}
diff --git a/xbmc/cores/RetroPlayer/rendering/RenderSettings.cpp b/xbmc/cores/RetroPlayer/rendering/RenderSettings.cpp
index 0ffd1a7a0c0f..1559a321b01e 100644
--- a/xbmc/cores/RetroPlayer/rendering/RenderSettings.cpp
+++ b/xbmc/cores/RetroPlayer/rendering/RenderSettings.cpp
@@ -25,21 +25,16 @@ using namespace RETRO;
 
 void CRenderSettings::Reset()
 {
-  m_geometry.Reset();
   m_videoSettings.Reset();
 }
 
 bool CRenderSettings::operator==(const CRenderSettings &rhs) const
 {
-  return m_geometry == rhs.m_geometry &&
-         m_videoSettings == rhs.m_videoSettings;
+  return m_videoSettings == rhs.m_videoSettings;
 }
 
 bool CRenderSettings::operator<(const CRenderSettings &rhs) const
 {
-  if (m_geometry < rhs.m_geometry) return true;
-  if (m_geometry > rhs.m_geometry) return false;
-
   if (m_videoSettings < rhs.m_videoSettings) return true;
   if (m_videoSettings > rhs.m_videoSettings) return false;
 
diff --git a/xbmc/cores/RetroPlayer/rendering/RenderSettings.h b/xbmc/cores/RetroPlayer/rendering/RenderSettings.h
index 073b2edc0a7f..975fe76095d3 100644
--- a/xbmc/cores/RetroPlayer/rendering/RenderSettings.h
+++ b/xbmc/cores/RetroPlayer/rendering/RenderSettings.h
@@ -20,7 +20,6 @@
 
 #pragma once
 
-#include "RenderGeometry.h"
 #include "RenderVideoSettings.h"
 
 namespace KODI
@@ -37,14 +36,10 @@ namespace RETRO
     bool operator==(const CRenderSettings &rhs) const;
     bool operator<(const CRenderSettings &rhs) const;
 
-    CRenderGeometry &Geometry() { return m_geometry; }
-    const CRenderGeometry &Geometry() const { return m_geometry; }
-
     CRenderVideoSettings &VideoSettings() { return m_videoSettings; }
     const CRenderVideoSettings &VideoSettings() const { return m_videoSettings; }
 
   private:
-    CRenderGeometry m_geometry;
     CRenderVideoSettings m_videoSettings;
   };
 }
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.cpp b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.cpp
index 5113bad0fff4..527627cb2beb 100644
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.cpp
+++ b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.cpp
@@ -239,7 +239,7 @@ void CRPBaseRenderer::CalculateViewMode()
 
 inline void CRPBaseRenderer::ReorderDrawPoints()
 {
-  const CRect &destRect = m_renderSettings.Geometry().Dimensions();
+  const CRect &destRect = m_dimensions;
   const unsigned int renderRotation = m_renderSettings.VideoSettings().GetRenderRotation();
 
   // 0 - top left, 1 - top right, 2 - bottom right, 3 - bottom left
@@ -359,7 +359,7 @@ inline void CRPBaseRenderer::ReorderDrawPoints()
 void CRPBaseRenderer::CalcNormalRenderRect(float offsetX, float offsetY, float width, float height, float inputFrameRatio, float zoomAmount)
 {
   CRect &sourceRect = m_sourceRect;
-  CRect &destRect = m_renderSettings.Geometry().Dimensions();
+  CRect &destRect = m_dimensions;
 
   // If view window is empty, set empty destination
   if (height == 0 || width == 0)
@@ -449,7 +449,7 @@ void CRPBaseRenderer::ManageRenderArea()
 
 void CRPBaseRenderer::MarkDirty()
 {
-  //CServiceBroker::GetGUI()->GetWindowManager().MarkDirty(m_renderSettings.Geometry().Dimensions()); //! @todo
+  //CServiceBroker::GetGUI()->GetWindowManager().MarkDirty(m_dimensions); //! @todo
 }
 
 void CRPBaseRenderer::PreRender(bool clear)
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.h b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.h
index 5b698f0bb00b..7878ac4f3367 100644
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.h
+++ b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.h
@@ -115,6 +115,7 @@ namespace RETRO
 
     // Rendering properties
     CRenderSettings m_renderSettings;
+    CRect m_dimensions;
     float m_pixelRatio = 1.0f;
     float m_zoomAmount = 1.0f;
     IRenderBuffer *m_renderBuffer = nullptr;

From 43b66f8b79151be2614a63020eb61f28e7f1b206 Mon Sep 17 00:00:00 2001
From: Garrett Brown <themagnificentmrb@gmail.com>
Date: Sat, 9 Jun 2018 19:07:20 -0700
Subject: [PATCH 8/9] RetroPlayer: Encapsulate scaling method into generalized
 video filter

Scaling method is swapped for a std::string, which allows seamless
integration with shader preset paths.

Video filter logic has been encapsulated within CRenderVideoSettings.
---
 addons/skin.estuary/xml/Includes_DialogSelect.xml  |  8 ++---
 .../RetroPlayer/guibridge/GUIGameSettings.cpp      |  7 ++---
 .../RetroPlayer/guibridge/IGUIRenderSettings.h     |  4 +--
 .../RetroPlayer/guicontrols/GUIGameControl.cpp     | 20 ++++++-------
 .../cores/RetroPlayer/guicontrols/GUIGameControl.h |  8 ++---
 .../RetroPlayer/guicontrols/GUIRenderSettings.cpp  |  8 ++---
 .../RetroPlayer/guicontrols/GUIRenderSettings.h    |  4 +--
 .../RetroPlayer/rendering/RPRenderManager.cpp      |  8 +++--
 .../RetroPlayer/rendering/RenderVideoSettings.cpp  | 34 ++++++++++++++++++++++
 .../RetroPlayer/rendering/RenderVideoSettings.h    |  8 +++++
 xbmc/games/dialogs/osd/DialogGameVideoFilter.cpp   | 32 ++++++++++----------
 xbmc/games/dialogs/osd/DialogGameVideoFilter.h     |  4 +--
 xbmc/guilib/GUIControlFactory.cpp                  |  6 ++--
 xbmc/settings/GameSettings.cpp                     | 12 ++++----
 xbmc/settings/GameSettings.h                       |  8 +++--
 xbmc/settings/MediaSettings.cpp                    |  8 ++---
 16 files changed, 110 insertions(+), 69 deletions(-)

diff --git a/addons/skin.estuary/xml/Includes_DialogSelect.xml b/addons/skin.estuary/xml/Includes_DialogSelect.xml
index 9643b3cedd9d..b0dc5e72c543 100644
--- a/addons/skin.estuary/xml/Includes_DialogSelect.xml
+++ b/addons/skin.estuary/xml/Includes_DialogSelect.xml
@@ -188,7 +188,7 @@
 						<control type="gamewindow">
 							<width>444</width>
 							<height>250</height>
-							<scalingmethod>$INFO[ListItem.Property(game.scalingmethod)]</scalingmethod>
+							<videofilter>$INFO[ListItem.Property(game.videofilter)]</videofilter>
 							<viewmode>$INFO[ListItem.Property(game.viewmode)]</viewmode>
 							<rotation>$INFO[ListItem.Property(game.videorotation)]</rotation>
 						</control>
@@ -219,7 +219,7 @@
 						<control type="gamewindow">
 							<width>444</width>
 							<height>250</height>
-							<scalingmethod>$INFO[ListItem.Property(game.scalingmethod)]</scalingmethod>
+							<videofilter>$INFO[ListItem.Property(game.videofilter)]</videofilter>
 							<viewmode>$INFO[ListItem.Property(game.viewmode)]</viewmode>
 							<rotation>$INFO[ListItem.Property(game.videorotation)]</rotation>
 						</control>
@@ -294,7 +294,7 @@
 						<control type="gamewindow">
 							<width>444</width>
 							<height>250</height>
-							<scalingmethod>$INFO[ListItem.Property(game.scalingmethod)]</scalingmethod>
+							<videofilter>$INFO[ListItem.Property(game.videofilter)]</videofilter>
 							<viewmode>$INFO[ListItem.Property(game.viewmode)]</viewmode>
 							<rotation>$INFO[ListItem.Property(game.videorotation)]</rotation>
 						</control>
@@ -325,7 +325,7 @@
 						<control type="gamewindow">
 							<width>444</width>
 							<height>250</height>
-							<scalingmethod>$INFO[ListItem.Property(game.scalingmethod)]</scalingmethod>
+							<videofilter>$INFO[ListItem.Property(game.videofilter)]</videofilter>
 							<viewmode>$INFO[ListItem.Property(game.viewmode)]</viewmode>
 							<rotation>$INFO[ListItem.Property(game.videorotation)]</rotation>
 						</control>
diff --git a/xbmc/cores/RetroPlayer/guibridge/GUIGameSettings.cpp b/xbmc/cores/RetroPlayer/guibridge/GUIGameSettings.cpp
index 19dbae4e515e..ff1d2249bdc0 100644
--- a/xbmc/cores/RetroPlayer/guibridge/GUIGameSettings.cpp
+++ b/xbmc/cores/RetroPlayer/guibridge/GUIGameSettings.cpp
@@ -70,15 +70,12 @@ void CGUIGameSettings::UpdateSettings()
   CSingleLock lock(m_mutex);
 
   // Get settings from GUI
-  SCALINGMETHOD scalingMethod = m_guiSettings.ScalingMethod();
+  std::string videoFilter = m_guiSettings.VideoFilter();
   VIEWMODE viewMode = m_guiSettings.ViewMode();
   unsigned int rotationDegCCW = m_guiSettings.RotationDegCCW();
 
   // Save settings for renderer
-  if (m_processInfo.HasScalingMethod(scalingMethod))
-    m_renderSettings.VideoSettings().SetScalingMethod(scalingMethod);
-  else
-    m_renderSettings.VideoSettings().SetScalingMethod(m_processInfo.GetDefaultScalingMethod());
+  m_renderSettings.VideoSettings().SetVideoFilter(videoFilter);
   m_renderSettings.VideoSettings().SetRenderViewMode(viewMode);
   m_renderSettings.VideoSettings().SetRenderRotation(rotationDegCCW);
 }
diff --git a/xbmc/cores/RetroPlayer/guibridge/IGUIRenderSettings.h b/xbmc/cores/RetroPlayer/guibridge/IGUIRenderSettings.h
index c063229559c0..6a9ff83e16cd 100644
--- a/xbmc/cores/RetroPlayer/guibridge/IGUIRenderSettings.h
+++ b/xbmc/cores/RetroPlayer/guibridge/IGUIRenderSettings.h
@@ -36,9 +36,9 @@ namespace RETRO
     virtual ~IGUIRenderSettings() = default;
 
     /*!
-     * \brief Returns true if this render target has a scaling method set
+     * \brief Returns true if this render target has a video filter set
      */
-    virtual bool HasScalingMethod() const { return true; }
+    virtual bool HasVideoFilter() const { return true; }
 
     /*!
      * \brief Returns true if this render target has a view mode set
diff --git a/xbmc/cores/RetroPlayer/guicontrols/GUIGameControl.cpp b/xbmc/cores/RetroPlayer/guicontrols/GUIGameControl.cpp
index 2cdfd280862a..a9685fafe347 100644
--- a/xbmc/cores/RetroPlayer/guicontrols/GUIGameControl.cpp
+++ b/xbmc/cores/RetroPlayer/guicontrols/GUIGameControl.cpp
@@ -54,10 +54,10 @@ CGUIGameControl::CGUIGameControl(int parentID, int controlID, float posX, float
 
 CGUIGameControl::CGUIGameControl(const CGUIGameControl &other) :
   CGUIControl(other),
-  m_scalingMethodInfo(other.m_scalingMethodInfo),
+  m_videoFilterInfo(other.m_videoFilterInfo),
   m_viewModeInfo(other.m_viewModeInfo),
   m_rotationInfo(other.m_rotationInfo),
-  m_bHasScalingMethod(other.m_bHasScalingMethod),
+  m_bHasVideoFilter(other.m_bHasVideoFilter),
   m_bHasViewMode(other.m_bHasViewMode),
   m_bHasRotation(other.m_bHasRotation),
   m_renderSettings(new CGUIRenderSettings(*this))
@@ -73,9 +73,9 @@ CGUIGameControl::~CGUIGameControl()
   UnregisterControl();
 }
 
-void CGUIGameControl::SetScalingMethod(const GUILIB::GUIINFO::CGUIInfoLabel &scalingMethod)
+void CGUIGameControl::SetVideoFilter(const GUILIB::GUIINFO::CGUIInfoLabel &videoFilter)
 {
-  m_scalingMethodInfo = scalingMethod;
+  m_videoFilterInfo = videoFilter;
 }
 
 void CGUIGameControl::SetViewMode(const GUILIB::GUIINFO::CGUIInfoLabel &viewMode)
@@ -146,13 +146,11 @@ void CGUIGameControl::UpdateInfo(const CGUIListItem *item /* = nullptr */)
 
   if (item)
   {
-    std::string strScalingMethod = m_scalingMethodInfo.GetItemLabel(item);
-    if (StringUtils::IsNaturalNumber(strScalingMethod))
+    std::string strVideoFilter = m_videoFilterInfo.GetItemLabel(item);
+    if (!strVideoFilter.empty())
     {
-      unsigned int scalingMethod;
-      std::istringstream(std::move(strScalingMethod)) >> scalingMethod;
-      m_renderSettings->SetScalingMethod(static_cast<SCALINGMETHOD>(scalingMethod));
-      m_bHasScalingMethod = true;
+      m_renderSettings->SetVideoFilter(strVideoFilter);
+      m_bHasVideoFilter = true;
     }
 
     std::string strViewMode = m_viewModeInfo.GetItemLabel(item);
@@ -177,7 +175,7 @@ void CGUIGameControl::UpdateInfo(const CGUIListItem *item /* = nullptr */)
 
 void CGUIGameControl::Reset()
 {
-  m_bHasScalingMethod = false;
+  m_bHasVideoFilter = false;
   m_bHasViewMode = false;
   m_bHasRotation = false;
   m_renderSettings->Reset();
diff --git a/xbmc/cores/RetroPlayer/guicontrols/GUIGameControl.h b/xbmc/cores/RetroPlayer/guicontrols/GUIGameControl.h
index bc34a9bda0f5..e45a3e233f1e 100644
--- a/xbmc/cores/RetroPlayer/guicontrols/GUIGameControl.h
+++ b/xbmc/cores/RetroPlayer/guicontrols/GUIGameControl.h
@@ -41,12 +41,12 @@ class CGUIGameControl : public CGUIControl
   ~CGUIGameControl() override;
 
   // GUI functions
-  void SetScalingMethod(const KODI::GUILIB::GUIINFO::CGUIInfoLabel &scalingMethod);
+  void SetVideoFilter(const KODI::GUILIB::GUIINFO::CGUIInfoLabel &videoFilter);
   void SetViewMode(const KODI::GUILIB::GUIINFO::CGUIInfoLabel &viewMode);
   void SetRotation(const KODI::GUILIB::GUIINFO::CGUIInfoLabel &rotation);
 
   // Rendering functions
-  bool HasScalingMethod() const { return m_bHasScalingMethod; }
+  bool HasVideoFilter() const { return m_bHasVideoFilter; }
   bool HasViewMode() const { return m_bHasViewMode; }
   bool HasRotation() const { return m_bHasRotation; }
   IGUIRenderSettings *GetRenderSettings() const;
@@ -69,12 +69,12 @@ class CGUIGameControl : public CGUIControl
   void UnregisterControl();
 
   // GUI properties
-  KODI::GUILIB::GUIINFO::CGUIInfoLabel m_scalingMethodInfo;
+  KODI::GUILIB::GUIINFO::CGUIInfoLabel m_videoFilterInfo;
   KODI::GUILIB::GUIINFO::CGUIInfoLabel m_viewModeInfo;
   KODI::GUILIB::GUIINFO::CGUIInfoLabel m_rotationInfo;
 
   // Rendering properties
-  bool m_bHasScalingMethod = false;
+  bool m_bHasVideoFilter = false;
   bool m_bHasViewMode = false;
   bool m_bHasRotation = false;
   std::unique_ptr<CGUIRenderSettings> m_renderSettings;
diff --git a/xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.cpp b/xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.cpp
index e3ecf15abeca..91a053a82b5e 100644
--- a/xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.cpp
+++ b/xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.cpp
@@ -30,9 +30,9 @@ CGUIRenderSettings::CGUIRenderSettings(CGUIGameControl &guiControl) :
 {
 }
 
-bool CGUIRenderSettings::HasScalingMethod() const
+bool CGUIRenderSettings::HasVideoFilter() const
 {
-  return m_guiControl.HasScalingMethod();
+  return m_guiControl.HasVideoFilter();
 }
 
 bool CGUIRenderSettings::HasViewMode() const
@@ -80,11 +80,11 @@ void CGUIRenderSettings::SetDimensions(const CRect &dimensions)
   m_renderDimensions = dimensions;
 }
 
-void CGUIRenderSettings::SetScalingMethod(SCALINGMETHOD scalingMethod)
+void CGUIRenderSettings::SetVideoFilter(const std::string &videoFilter)
 {
   CSingleLock lock(m_mutex);
 
-  m_renderSettings.VideoSettings().SetScalingMethod(scalingMethod);
+  m_renderSettings.VideoSettings().SetVideoFilter(videoFilter);
 }
 
 void CGUIRenderSettings::SetViewMode(VIEWMODE viewMode)
diff --git a/xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.h b/xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.h
index 4383a92c3373..18f0422cd410 100644
--- a/xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.h
+++ b/xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.h
@@ -39,7 +39,7 @@ namespace RETRO
     ~CGUIRenderSettings() override = default;
 
     // implementation of IGUIRenderSettings
-    bool HasScalingMethod() const override;
+    bool HasVideoFilter() const override;
     bool HasViewMode() const override;
     bool HasRotation() const override;
     CRenderSettings GetSettings() const override;
@@ -49,7 +49,7 @@ namespace RETRO
     void Reset();
     void SetSettings(CRenderSettings settings);
     void SetDimensions(const CRect &dimensions);
-    void SetScalingMethod(SCALINGMETHOD scalingMethod);
+    void SetVideoFilter(const std::string &videoFilter);
     void SetViewMode(VIEWMODE viewMode);
     void SetRotationDegCCW(unsigned int rotationDegCCW);
 
diff --git a/xbmc/cores/RetroPlayer/rendering/RPRenderManager.cpp b/xbmc/cores/RetroPlayer/rendering/RPRenderManager.cpp
index c0bc29692a50..4be278e3bb51 100644
--- a/xbmc/cores/RetroPlayer/rendering/RPRenderManager.cpp
+++ b/xbmc/cores/RetroPlayer/rendering/RPRenderManager.cpp
@@ -534,8 +534,8 @@ CRenderVideoSettings CRPRenderManager::GetEffectiveSettings(const IGUIRenderSett
 
   if (settings != nullptr)
   {
-    if (settings->HasScalingMethod())
-      effectiveSettings.SetScalingMethod(settings->GetSettings().VideoSettings().GetScalingMethod());
+    if (settings->HasVideoFilter())
+      effectiveSettings.SetVideoFilter(settings->GetSettings().VideoSettings().GetVideoFilter());
     if (settings->HasViewMode())
       effectiveSettings.SetRenderViewMode(settings->GetSettings().VideoSettings().GetRenderViewMode());
     if (settings->HasRotation())
@@ -543,8 +543,10 @@ CRenderVideoSettings CRPRenderManager::GetEffectiveSettings(const IGUIRenderSett
   }
 
   // Sanitize settings
-  if (effectiveSettings.GetScalingMethod() == SCALINGMETHOD::AUTO)
+  if (!m_processInfo.HasScalingMethod(effectiveSettings.GetScalingMethod()))
+  {
     effectiveSettings.SetScalingMethod(m_processInfo.GetDefaultScalingMethod());
+  }
 
   return effectiveSettings;
 }
diff --git a/xbmc/cores/RetroPlayer/rendering/RenderVideoSettings.cpp b/xbmc/cores/RetroPlayer/rendering/RenderVideoSettings.cpp
index 85938b1c8844..9ad210cfdc24 100644
--- a/xbmc/cores/RetroPlayer/rendering/RenderVideoSettings.cpp
+++ b/xbmc/cores/RetroPlayer/rendering/RenderVideoSettings.cpp
@@ -23,6 +23,9 @@
 using namespace KODI;
 using namespace RETRO;
 
+#define VIDEO_FILTER_NEAREST  "nearest"
+#define VIDEO_FILTER_LINEAR   "linear"
+
 void CRenderVideoSettings::Reset()
 {
   m_scalingMethod = SCALINGMETHOD::AUTO;
@@ -50,3 +53,34 @@ bool CRenderVideoSettings::operator<(const CRenderVideoSettings &rhs) const
 
   return false;
 }
+
+std::string CRenderVideoSettings::GetVideoFilter() const
+{
+  switch (m_scalingMethod)
+  {
+  case SCALINGMETHOD::NEAREST:
+    return VIDEO_FILTER_NEAREST;
+  case SCALINGMETHOD::LINEAR:
+    return VIDEO_FILTER_LINEAR;
+  default:
+    break;
+  }
+
+  return "";
+}
+
+void CRenderVideoSettings::SetVideoFilter(const std::string &videoFilter)
+{
+  if (videoFilter == VIDEO_FILTER_NEAREST)
+  {
+    m_scalingMethod = SCALINGMETHOD::NEAREST;
+  }
+  else if (videoFilter == VIDEO_FILTER_LINEAR)
+  {
+    m_scalingMethod = SCALINGMETHOD::LINEAR;
+  }
+  else
+  {
+    m_scalingMethod = SCALINGMETHOD::AUTO;
+  }
+}
diff --git a/xbmc/cores/RetroPlayer/rendering/RenderVideoSettings.h b/xbmc/cores/RetroPlayer/rendering/RenderVideoSettings.h
index 2cd9b20512a2..122e57cc19dd 100644
--- a/xbmc/cores/RetroPlayer/rendering/RenderVideoSettings.h
+++ b/xbmc/cores/RetroPlayer/rendering/RenderVideoSettings.h
@@ -22,6 +22,8 @@
 
 #include "cores/GameSettings.h"
 
+#include <string>
+
 namespace KODI
 {
 namespace RETRO
@@ -41,6 +43,12 @@ namespace RETRO
     bool operator<(const CRenderVideoSettings &rhs) const;
     bool operator>(const CRenderVideoSettings &rhs) const { return !(*this == rhs || *this < rhs); }
 
+    /*!
+     * \brief Get a string representation of the video filter parameters
+     */
+    std::string GetVideoFilter() const;
+    void SetVideoFilter(const std::string &videoFilter);
+
     SCALINGMETHOD GetScalingMethod() const { return m_scalingMethod; }
     void SetScalingMethod(SCALINGMETHOD method) { m_scalingMethod = method; }
 
diff --git a/xbmc/games/dialogs/osd/DialogGameVideoFilter.cpp b/xbmc/games/dialogs/osd/DialogGameVideoFilter.cpp
index 0443b592e8e3..06987612b98c 100644
--- a/xbmc/games/dialogs/osd/DialogGameVideoFilter.cpp
+++ b/xbmc/games/dialogs/osd/DialogGameVideoFilter.cpp
@@ -20,6 +20,7 @@
 
 #include "DialogGameVideoFilter.h"
 #include "cores/RetroPlayer/guibridge/GUIGameVideoHandle.h"
+#include "cores/RetroPlayer/rendering/RenderVideoSettings.h"
 #include "guilib/LocalizeStrings.h"
 #include "guilib/WindowIDs.h"
 #include "settings/GameSettings.h"
@@ -61,7 +62,7 @@ void CDialogGameVideoFilter::PreInit()
 {
   m_items.Clear();
 
-  InitScalingMethods();
+  InitVideoFilters();
 
   if (m_items.Size() == 0)
   {
@@ -72,7 +73,7 @@ void CDialogGameVideoFilter::PreInit()
   m_bHasDescription = false;
 }
 
-void CDialogGameVideoFilter::InitScalingMethods()
+void CDialogGameVideoFilter::InitVideoFilters()
 {
   if (m_gameVideoHandle)
   {
@@ -80,9 +81,12 @@ void CDialogGameVideoFilter::InitScalingMethods()
     {
       if (m_gameVideoHandle->SupportsScalingMethod(scalingMethodProps.scalingMethod))
       {
+        RETRO::CRenderVideoSettings videoSettings;
+        videoSettings.SetScalingMethod(scalingMethodProps.scalingMethod);
+
         CFileItemPtr item = std::make_shared<CFileItem>(g_localizeStrings.Get(scalingMethodProps.nameIndex));
         item->SetLabel2(g_localizeStrings.Get(scalingMethodProps.categoryIndex));
-        item->SetProperty("game.scalingmethod", CVariant{ static_cast<int>(scalingMethodProps.scalingMethod) });
+        item->SetProperty("game.videofilter", CVariant{ videoSettings.GetVideoFilter() });
         item->SetProperty("game.videofilterdescription", CVariant{ g_localizeStrings.Get(scalingMethodProps.descriptionIndex) });
         m_items.Add(std::move(item));
       }
@@ -102,15 +106,15 @@ void CDialogGameVideoFilter::OnItemFocus(unsigned int index)
   {
     CFileItemPtr item = m_items[index];
 
-    RETRO::SCALINGMETHOD scalingMethod;
+    std::string videoFilter;
     std::string description;
-    GetProperties(*item, scalingMethod, description);
+    GetProperties(*item, videoFilter, description);
 
     CGameSettings &gameSettings = CMediaSettings::GetInstance().GetCurrentGameSettings();
 
-    if (gameSettings.ScalingMethod() != scalingMethod)
+    if (gameSettings.VideoFilter() != videoFilter)
     {
-      gameSettings.SetScalingMethod(scalingMethod);
+      gameSettings.SetVideoFilter(videoFilter);
       gameSettings.NotifyObservers(ObservableMessageSettingsChanged);
 
       OnDescriptionChange(description);
@@ -130,11 +134,11 @@ unsigned int CDialogGameVideoFilter::GetFocusedItem() const
 
   for (int i = 0; i < m_items.Size(); i++)
   {
-    RETRO::SCALINGMETHOD scalingMethod;
+    std::string videoFilter;
     std::string description;
-    GetProperties(*m_items[i], scalingMethod, description);
+    GetProperties(*m_items[i], videoFilter, description);
 
-    if (scalingMethod == gameSettings.ScalingMethod())
+    if (videoFilter == gameSettings.VideoFilter())
     {
       return i;
     }
@@ -148,12 +152,8 @@ void CDialogGameVideoFilter::PostExit()
   m_items.Clear();
 }
 
-void CDialogGameVideoFilter::GetProperties(const CFileItem &item, RETRO::SCALINGMETHOD &scalingMethod, std::string &description)
+void CDialogGameVideoFilter::GetProperties(const CFileItem &item, std::string &videoFilter, std::string &description)
 {
-  scalingMethod = RETRO::SCALINGMETHOD::AUTO;
+  videoFilter = item.GetProperty("game.videofilter").asString();
   description = item.GetProperty("game.videofilterdescription").asString();
-
-  std::string strScalingMethod = item.GetProperty("game.scalingmethod").asString();
-  if (StringUtils::IsNaturalNumber(strScalingMethod))
-    scalingMethod = static_cast<RETRO::SCALINGMETHOD>(item.GetProperty("game.scalingmethod").asUnsignedInteger());
 }
diff --git a/xbmc/games/dialogs/osd/DialogGameVideoFilter.h b/xbmc/games/dialogs/osd/DialogGameVideoFilter.h
index d0e8e3b98738..0e4ecfa4ef3a 100644
--- a/xbmc/games/dialogs/osd/DialogGameVideoFilter.h
+++ b/xbmc/games/dialogs/osd/DialogGameVideoFilter.h
@@ -44,9 +44,9 @@ namespace GAME
     void PostExit() override;
 
   private:
-    void InitScalingMethods();
+    void InitVideoFilters();
 
-    static void GetProperties(const CFileItem &item, RETRO::SCALINGMETHOD &scalingMethod, std::string &description);
+    static void GetProperties(const CFileItem &item, std::string &videoFilter, std::string &description);
 
     CFileItemList m_items;
 
diff --git a/xbmc/guilib/GUIControlFactory.cpp b/xbmc/guilib/GUIControlFactory.cpp
index 8d60f032acbf..6c24ee14f71e 100644
--- a/xbmc/guilib/GUIControlFactory.cpp
+++ b/xbmc/guilib/GUIControlFactory.cpp
@@ -1148,9 +1148,9 @@ CGUIControl* CGUIControlFactory::Create(int parentID, const CRect &rect, TiXmlEl
     {
       control = new RETRO::CGUIGameControl(parentID, id, posX, posY, width, height);
 
-      GUIINFO::CGUIInfoLabel scalingMethod;
-      GetInfoLabel(pControlNode, "scalingmethod", scalingMethod, parentID);
-      static_cast<RETRO::CGUIGameControl*>(control)->SetScalingMethod(scalingMethod);
+      GUIINFO::CGUIInfoLabel videoFilter;
+      GetInfoLabel(pControlNode, "videofilter", videoFilter, parentID);
+      static_cast<RETRO::CGUIGameControl*>(control)->SetVideoFilter(videoFilter);
 
       GUIINFO::CGUIInfoLabel viewMode;
       GetInfoLabel(pControlNode, "viewmode", viewMode, parentID);
diff --git a/xbmc/settings/GameSettings.cpp b/xbmc/settings/GameSettings.cpp
index 934a95199bb2..1b1073b39079 100644
--- a/xbmc/settings/GameSettings.cpp
+++ b/xbmc/settings/GameSettings.cpp
@@ -26,7 +26,7 @@ CGameSettings &CGameSettings::operator=(const CGameSettings &rhs)
 {
   if (this != &rhs)
   {
-    m_scalingMethod = rhs.m_scalingMethod;
+    m_videoFilter = rhs.m_videoFilter;
     m_viewMode = rhs.m_viewMode;
     m_rotationDegCCW = rhs.m_rotationDegCCW;
   }
@@ -35,23 +35,23 @@ CGameSettings &CGameSettings::operator=(const CGameSettings &rhs)
 
 void CGameSettings::Reset()
 {
-  m_scalingMethod = RETRO::SCALINGMETHOD::AUTO;
+  m_videoFilter.clear();
   m_viewMode = RETRO::VIEWMODE::Normal;
   m_rotationDegCCW = 0;
 }
 
 bool CGameSettings::operator==(const CGameSettings &rhs) const
 {
-  return m_scalingMethod == rhs.m_scalingMethod &&
+  return m_videoFilter == rhs.m_videoFilter &&
          m_viewMode == rhs.m_viewMode &&
          m_rotationDegCCW == rhs.m_rotationDegCCW;
 }
 
-void CGameSettings::SetScalingMethod(RETRO::SCALINGMETHOD scalingMethod)
+void CGameSettings::SetVideoFilter(const std::string &videoFilter)
 {
-  if (scalingMethod != m_scalingMethod)
+  if (videoFilter != m_videoFilter)
   {
-    m_scalingMethod = scalingMethod;
+    m_videoFilter = videoFilter;
     SetChanged();
   }
 }
diff --git a/xbmc/settings/GameSettings.h b/xbmc/settings/GameSettings.h
index e6c82c3c0e8e..744402a4be9d 100644
--- a/xbmc/settings/GameSettings.h
+++ b/xbmc/settings/GameSettings.h
@@ -23,6 +23,8 @@
 #include "cores/GameSettings.h"
 #include "utils/Observer.h"
 
+#include <string>
+
 class CGameSettings : public Observable
 {
 public:
@@ -37,8 +39,8 @@ class CGameSettings : public Observable
   bool operator==(const CGameSettings &rhs) const;
   bool operator!=(const CGameSettings &rhs) const { return !(*this == rhs); }
 
-  KODI::RETRO::SCALINGMETHOD ScalingMethod() const { return m_scalingMethod; }
-  void SetScalingMethod(KODI::RETRO::SCALINGMETHOD scalingMethod);
+  const std::string &VideoFilter() const { return m_videoFilter; }
+  void SetVideoFilter(const std::string &videoFilter);
 
   KODI::RETRO::VIEWMODE ViewMode() const { return m_viewMode; }
   void SetViewMode(KODI::RETRO::VIEWMODE viewMode);
@@ -48,7 +50,7 @@ class CGameSettings : public Observable
 
 private:
   // Video settings
-  KODI::RETRO::SCALINGMETHOD m_scalingMethod;
+  std::string m_videoFilter;
   KODI::RETRO::VIEWMODE m_viewMode;
   unsigned int m_rotationDegCCW;
 };
diff --git a/xbmc/settings/MediaSettings.cpp b/xbmc/settings/MediaSettings.cpp
index 3829e821053b..d2549dca6bc6 100644
--- a/xbmc/settings/MediaSettings.cpp
+++ b/xbmc/settings/MediaSettings.cpp
@@ -135,9 +135,9 @@ bool CMediaSettings::Load(const TiXmlNode *settings)
   pElement = settings->FirstChildElement("defaultgamesettings");
   if (pElement != nullptr)
   {
-    int scalingMethod;
-    if (XMLUtils::GetInt(pElement, "scalingmethod", scalingMethod, static_cast<int>(RETRO::SCALINGMETHOD::NEAREST), static_cast<int>(RETRO::SCALINGMETHOD::MAX)))
-      m_defaultGameSettings.SetScalingMethod(static_cast<RETRO::SCALINGMETHOD>(scalingMethod));
+    std::string videoFilter;
+    if (XMLUtils::GetString(pElement, "videofilter", videoFilter))
+      m_defaultGameSettings.SetVideoFilter(videoFilter);
 
     int viewMode;
     if (XMLUtils::GetInt(pElement, "viewmode", viewMode, static_cast<int>(RETRO::VIEWMODE::Normal), static_cast<int>(RETRO::VIEWMODE::Max)))
@@ -240,7 +240,7 @@ bool CMediaSettings::Save(TiXmlNode *settings) const
   if (pNode == nullptr)
     return false;
 
-  XMLUtils::SetInt(pNode, "scalingmethod", static_cast<int>(m_defaultGameSettings.ScalingMethod()));
+  XMLUtils::SetString(pNode, "videofilter", m_defaultGameSettings.VideoFilter());
   XMLUtils::SetInt(pNode, "viewmode", static_cast<int>(m_defaultGameSettings.ViewMode()));
   XMLUtils::SetInt(pNode, "rotation", m_defaultGameSettings.RotationDegCCW());
 

From 0464a50f60ca44ca83594d7445dc7e61ae3b2949 Mon Sep 17 00:00:00 2001
From: Garrett Brown <themagnificentmrb@gmail.com>
Date: Thu, 7 Jun 2018 17:30:03 -0700
Subject: [PATCH 9/9] =?UTF-8?q?RetroPlayer:=20Fix=2090=C2=B0=20and=20270?=
 =?UTF-8?q?=C2=B0=20rotations?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This fixes the geometry of 90째 and 270째 rotations for all view modes:

* Normal: Fits to screen
* Stretch 4:3: Stretches to 4:3 and fits to screen
* Fullscreen: Stretches to fill the screen
* Original: Original size

Geometry from VideoPlayer was heavy intertwined with local state. This
refactors all geometry math into a new class, CRenderUtils. The
operations have been organized and greatly simplified.
---
 xbmc/cores/RetroPlayer/rendering/CMakeLists.txt    |   2 +
 xbmc/cores/RetroPlayer/rendering/RenderUtils.cpp   | 222 ++++++++++++++
 xbmc/cores/RetroPlayer/rendering/RenderUtils.h     |  40 +++
 .../rendering/VideoRenderers/RPBaseRenderer.cpp    | 329 ++++-----------------
 .../rendering/VideoRenderers/RPBaseRenderer.h      |  17 +-
 .../rendering/VideoRenderers/RPWinRenderer.cpp     |   9 +-
 6 files changed, 329 insertions(+), 290 deletions(-)
 create mode 100644 xbmc/cores/RetroPlayer/rendering/RenderUtils.cpp
 create mode 100644 xbmc/cores/RetroPlayer/rendering/RenderUtils.h

diff --git a/xbmc/cores/RetroPlayer/rendering/CMakeLists.txt b/xbmc/cores/RetroPlayer/rendering/CMakeLists.txt
index b7ab3ff2493a..5e02a7ae3f50 100644
--- a/xbmc/cores/RetroPlayer/rendering/CMakeLists.txt
+++ b/xbmc/cores/RetroPlayer/rendering/CMakeLists.txt
@@ -1,6 +1,7 @@
 set(SOURCES RenderContext.cpp
             RenderSettings.cpp
             RenderTranslator.cpp
+            RenderUtils.cpp
             RenderVideoSettings.cpp
             RPRenderManager.cpp
 )
@@ -9,6 +10,7 @@ set(HEADERS IRenderManager.h
             RenderContext.h
             RenderSettings.h
             RenderTranslator.h
+            RenderUtils.h
             RenderVideoSettings.h
             RPRenderManager.h
 )
diff --git a/xbmc/cores/RetroPlayer/rendering/RenderUtils.cpp b/xbmc/cores/RetroPlayer/rendering/RenderUtils.cpp
new file mode 100644
index 000000000000..04812cb6329a
--- /dev/null
+++ b/xbmc/cores/RetroPlayer/rendering/RenderUtils.cpp
@@ -0,0 +1,222 @@
+/*
+ *      Copyright (C) 2018 Team Kodi
+ *      http://kodi.tv
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this Program; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "RenderUtils.h"
+#include "utils/MathUtils.h"
+
+#include <cmath>
+
+using namespace KODI;
+using namespace RETRO;
+
+void CRenderUtils::CalculateViewMode(VIEWMODE viewMode, unsigned int rotationDegCCW, unsigned int sourceWidth, unsigned int sourceHeight, float screenWidth, float screenHeight, float &pixelRatio, float &zoomAmount)
+{
+  const float sourceFrameRatio = static_cast<float>(sourceWidth) / static_cast<float>(sourceHeight);
+
+  switch (viewMode)
+  {
+  case VIEWMODE::Normal:
+  {
+    switch (rotationDegCCW)
+    {
+      case 90:
+      case 270:
+      {
+        pixelRatio = 1.0f / (sourceFrameRatio * sourceFrameRatio);
+        break;
+      }
+      default:
+        pixelRatio = 1.0f;
+        break;
+    }
+    zoomAmount = 1.0f;
+
+    break;
+  }
+  case VIEWMODE::Stretch4x3:
+  {
+    // Stretch to 4:3 ratio
+    pixelRatio = (4.0f / 3.0f) / sourceFrameRatio;
+    zoomAmount = 1.0f;
+
+    break;
+  }
+  case VIEWMODE::Fullscreen:
+  {
+    // Stretch to the limits of the screen
+    pixelRatio = (screenWidth / screenHeight) / sourceFrameRatio;
+    zoomAmount = 1.0f;
+
+    break;
+  }
+  case VIEWMODE::Original:
+  {
+    switch (rotationDegCCW)
+    {
+      case 90:
+      case 270:
+      {
+        pixelRatio = 1.0f / (sourceFrameRatio * sourceFrameRatio);
+        break;
+      }
+      default:
+        pixelRatio = 1.0f;
+        break;
+    }
+
+    // Calculate the correct zoom amount
+    // First zoom to full width
+    float newHeight = screenWidth / pixelRatio;
+    if (newHeight > screenHeight)
+    {
+      // Zoom to full height
+      newHeight = screenHeight;
+    }
+
+    // Now work out the zoom amount so that no zoom is done
+    zoomAmount = sourceHeight / newHeight;
+
+    switch (rotationDegCCW)
+    {
+      case 90:
+      case 270:
+      {
+        zoomAmount *= sourceFrameRatio;
+        break;
+      }
+      default:
+        break;
+    }
+
+    break;
+  }
+  default:
+    break;
+  }
+}
+
+void CRenderUtils::CalcNormalRenderRect(const CRect &viewRect, float outputFrameRatio, float zoomAmount, CRect &destRect)
+{
+  const float offsetX = viewRect.x1;
+  const float offsetY = viewRect.y1;
+  const float width = viewRect.Width();
+  const float height = viewRect.Height();
+
+  // If view window is empty, set empty destination
+  if (height == 0 || width == 0)
+  {
+    destRect.SetRect(0.0f, 0.0f, 0.0f, 0.0f);
+    return;
+  }
+
+  // Maximize the game width
+  float newWidth = width;
+  float newHeight = newWidth / outputFrameRatio;
+
+  if (newHeight > height)
+  {
+    newHeight = height;
+    newWidth = newHeight * outputFrameRatio;
+  }
+
+  // Scale the game up by set zoom amount
+  newWidth *= zoomAmount;
+  newHeight *= zoomAmount;
+
+  // If we are less than one pixel off use the complete screen instead
+  if (std::fabs(newWidth - width) < 1.0f)
+    newWidth = width;
+  if (std::fabs(newHeight - height) < 1.0f)
+    newHeight = height;
+
+  // Center the game
+  float posY = (height - newHeight) / 2;
+  float posX = (width - newWidth) / 2;
+
+  destRect.x1 = static_cast<float>(MathUtils::round_int(posX + offsetX));
+  destRect.x2 = destRect.x1 + MathUtils::round_int(newWidth);
+  destRect.y1 = static_cast<float>(MathUtils::round_int(posY + offsetY));
+  destRect.y2 = destRect.y1 + MathUtils::round_int(newHeight);
+}
+
+void CRenderUtils::ClipRect(const CRect &viewRect, CRect &sourceRect, CRect &destRect)
+{
+  const float offsetX = viewRect.x1;
+  const float offsetY = viewRect.y1;
+  const float width = viewRect.Width();
+  const float height = viewRect.Height();
+
+  CRect original(destRect);
+  destRect.Intersect(CRect(offsetX, offsetY, offsetX + width, offsetY + height));
+  if (destRect != original)
+  {
+    float scaleX = sourceRect.Width() / original.Width();
+    float scaleY = sourceRect.Height() / original.Height();
+    sourceRect.x1 += (destRect.x1 - original.x1) * scaleX;
+    sourceRect.y1 += (destRect.y1 - original.y1) * scaleY;
+    sourceRect.x2 += (destRect.x2 - original.x2) * scaleX;
+    sourceRect.y2 += (destRect.y2 - original.y2) * scaleY;
+  }
+}
+
+std::array<CPoint, 4> CRenderUtils::ReorderDrawPoints(const CRect &destRect, unsigned int orientationDegCCW, float aspectRatio)
+{
+  std::array<CPoint, 4> rotatedDestCoords{};
+
+  switch (orientationDegCCW)
+  {
+  case 0:
+  {
+    rotatedDestCoords[0] = CPoint{ destRect.x1, destRect.y1 }; // Top left
+    rotatedDestCoords[1] = CPoint{ destRect.x2, destRect.y1 }; // Top right
+    rotatedDestCoords[2] = CPoint{ destRect.x2, destRect.y2 }; // Bottom right
+    rotatedDestCoords[3] = CPoint{ destRect.x1, destRect.y2 }; // Bottom left
+    break;
+  }
+  case 90:
+  {
+    rotatedDestCoords[0] = CPoint{ destRect.x1, destRect.y2 }; // Bottom left
+    rotatedDestCoords[1] = CPoint{ destRect.x1, destRect.y1 }; // Top left
+    rotatedDestCoords[2] = CPoint{ destRect.x2, destRect.y1 }; // Top right
+    rotatedDestCoords[3] = CPoint{ destRect.x2, destRect.y2 }; // Bottom right
+    break;
+  }
+  case 180:
+  {
+    rotatedDestCoords[0] = CPoint{ destRect.x2, destRect.y2 }; // Bottom right
+    rotatedDestCoords[1] = CPoint{ destRect.x1, destRect.y2 }; // Bottom left
+    rotatedDestCoords[2] = CPoint{ destRect.x1, destRect.y1 }; // Top left
+    rotatedDestCoords[3] = CPoint{ destRect.x2, destRect.y1 }; // Top right
+    break;
+  }
+  case 270:
+  {
+    rotatedDestCoords[0] = CPoint{ destRect.x2, destRect.y1 }; // Top right
+    rotatedDestCoords[1] = CPoint{ destRect.x2, destRect.y2 }; // Bottom right
+    rotatedDestCoords[2] = CPoint{ destRect.x1, destRect.y2 }; // Bottom left
+    rotatedDestCoords[3] = CPoint{ destRect.x1, destRect.y1 }; // Top left
+    break;
+  }
+  default:
+    break;
+  }
+
+  return rotatedDestCoords;
+}
diff --git a/xbmc/cores/RetroPlayer/rendering/RenderUtils.h b/xbmc/cores/RetroPlayer/rendering/RenderUtils.h
new file mode 100644
index 000000000000..0e0786b588e3
--- /dev/null
+++ b/xbmc/cores/RetroPlayer/rendering/RenderUtils.h
@@ -0,0 +1,40 @@
+/*
+ *      Copyright (C) 2018 Team Kodi
+ *      http://kodi.tv
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this Program; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+#pragma once
+
+#include "cores/GameSettings.h"
+#include "utils/Geometry.h"
+
+#include <array>
+
+namespace KODI
+{
+namespace RETRO
+{
+  class CRenderUtils
+  {
+  public:
+    static void CalculateViewMode(VIEWMODE viewMode, unsigned int rotationDegCCW, unsigned int sourceWidth, unsigned int sourceHeight, float screenWidth, float screenHeight, float &pixelRatio, float &zoomAmount);
+    static void CalcNormalRenderRect(const CRect &viewRect, float outputFrameRatio, float zoomAmount, CRect &destRect);
+    static void ClipRect(const CRect &viewRect, CRect &sourceRect, CRect &destRect);
+    static std::array<CPoint, 4> ReorderDrawPoints(const CRect &destRect, unsigned int orientationDegCCW, float aspectRatio);
+  };
+}
+}
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.cpp b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.cpp
index 527627cb2beb..698bba8a2516 100644
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.cpp
+++ b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.cpp
@@ -22,12 +22,8 @@
 #include "cores/RetroPlayer/buffers/IRenderBuffer.h"
 #include "cores/RetroPlayer/buffers/IRenderBufferPool.h"
 #include "cores/RetroPlayer/rendering/RenderContext.h"
+#include "cores/RetroPlayer/rendering/RenderUtils.h"
 #include "utils/log.h"
-#include "utils/MathUtils.h"
-
-#include <cmath>
-#include <cstdlib>
-#include <algorithm>
 
 using namespace KODI;
 using namespace RETRO;
@@ -71,7 +67,6 @@ bool CRPBaseRenderer::Configure(AVPixelFormat format, unsigned int width, unsign
   m_format = format;
   m_sourceWidth = width;
   m_sourceHeight = height;
-  m_sourceFrameRatio = static_cast<float>(width) / static_cast<float>(height);
   m_renderOrientation = 0; //! @todo
 
   if (!m_bufferPool->IsConfigured())
@@ -141,7 +136,13 @@ void CRPBaseRenderer::Flush()
 
 float CRPBaseRenderer::GetAspectRatio() const
 {
-  return m_sourceFrameRatio;
+  return static_cast<float>(m_sourceWidth) / static_cast<float>(m_sourceHeight);
+}
+
+unsigned int CRPBaseRenderer::GetRotationDegCCW() const
+{
+  unsigned int renderOrientation = m_renderSettings.VideoSettings().GetRenderRotation();
+  return (renderOrientation + m_renderOrientation) % 360;
 }
 
 void CRPBaseRenderer::SetScalingMethod(SCALINGMETHOD method)
@@ -152,7 +153,6 @@ void CRPBaseRenderer::SetScalingMethod(SCALINGMETHOD method)
 void CRPBaseRenderer::SetViewMode(VIEWMODE viewMode)
 {
   m_renderSettings.VideoSettings().SetRenderViewMode(viewMode);
-  CalculateViewMode();
 }
 
 void CRPBaseRenderer::SetRenderRotation(unsigned int rotationDegCCW)
@@ -160,293 +160,48 @@ void CRPBaseRenderer::SetRenderRotation(unsigned int rotationDegCCW)
   m_renderSettings.VideoSettings().SetRenderRotation(rotationDegCCW);
 }
 
-void CRPBaseRenderer::CalculateViewMode()
+void CRPBaseRenderer::ManageRenderArea()
 {
   const VIEWMODE viewMode = m_renderSettings.VideoSettings().GetRenderViewMode();
+  const unsigned int rotationDegCCW = GetRotationDegCCW();
 
-  // Parameters to determine
-  float &pixelRatio = m_pixelRatio;
-  float &zoomAmount = m_zoomAmount;
-
-  // Get our calibrated full screen resolution
-  RESOLUTION_INFO info = m_context.GetResInfo();
+  // Get screen parameters
+  float screenWidth;
+  float screenHeight;
+  float screenPixelRatio;
+  GetScreenDimensions(screenWidth, screenHeight, screenPixelRatio);
 
-  float screenWidth = static_cast<float>(info.Overscan.right - info.Overscan.left);
-  float screenHeight = static_cast<float>(info.Overscan.bottom - info.Overscan.top);
+  // Entire target rendering area for the video (including black bars)
+  const CRect viewRect = m_context.GetViewWindow();
 
-  // And the source frame ratio
-  float sourceFrameRatio = GetAspectRatio();
-
-  // Splitres scaling factor
-  float xscale = static_cast<float>(info.iScreenWidth) / static_cast<float>(info.iWidth);
-  float yscale = static_cast<float>(info.iScreenHeight) / static_cast<float>(info.iHeight);
-
-  screenWidth *= xscale;
-  screenHeight *= yscale;
+  // Calculate pixel ratio and zoom amount
+  float pixelRatio = 1.0f;
+  float zoomAmount = 1.0f;
+  CRenderUtils::CalculateViewMode(viewMode, rotationDegCCW, m_sourceWidth, m_sourceHeight, screenWidth, screenHeight, pixelRatio, zoomAmount);
 
-  switch (viewMode)
-  {
-  case VIEWMODE::Stretch4x3:
-  {
-    zoomAmount = 1.0f;
-
-    // Stretch image to 4:3 ratio
-    pixelRatio = (4.0f / 3.0f) / sourceFrameRatio;
-
-    break;
-  }
-  case VIEWMODE::Fullscreen:
-  {
-    zoomAmount = 1.0f;
-
-    // Stretch to the limits of the screen
-    pixelRatio = (screenWidth / screenHeight) * info.fPixelRatio / sourceFrameRatio;
-
-    break;
-  }
-  case VIEWMODE::Original:
-  {
-    // Zoom image so that the height is the original size
-    pixelRatio = 1.0f;
-
-    // Get the size of the media file
-    // Calculate the desired output ratio
-    float outputFrameRatio = sourceFrameRatio * pixelRatio / info.fPixelRatio;
-
-    // Now calculate the correct zoom amount.  First zoom to full width.
-    float newHeight = screenWidth / outputFrameRatio;
-    if (newHeight > screenHeight)
-    {
-      // Zoom to full height
-      newHeight = screenHeight;
-    }
+  // Calculate destination dimensions
+  CRenderUtils::CalcNormalRenderRect(viewRect, GetAspectRatio() * pixelRatio, zoomAmount, m_dimensions);
 
-    // Now work out the zoom amount so that no zoom is done
-    zoomAmount = m_sourceHeight / newHeight;
-
-    break;
-  }
-  case VIEWMODE::Normal:
-  {
-    pixelRatio = 1.0f;
-    zoomAmount = 1.0f;
-    break;
-  }
-  default:
-    break;
-  }
-}
-
-inline void CRPBaseRenderer::ReorderDrawPoints()
-{
-  const CRect &destRect = m_dimensions;
-  const unsigned int renderRotation = m_renderSettings.VideoSettings().GetRenderRotation();
-
-  // 0 - top left, 1 - top right, 2 - bottom right, 3 - bottom left
-  float origMat[4][2] =
-    {
-      { destRect.x1, destRect.y1 },
-      { destRect.x2, destRect.y1 },
-      { destRect.x2, destRect.y2 },
-      { destRect.x1, destRect.y2 }
-    };
-
-  bool changeAspect = false;
-  int pointOffset = 0;
-
-  const unsigned int renderOrientation = (m_renderOrientation + renderRotation) % 360;
-  switch (renderOrientation)
-  {
-  case 270:
-    pointOffset = 1;
-    changeAspect = true;
-    break;
-  case 180:
-    pointOffset = 2;
-    break;
-  case 90:
-    pointOffset = 3;
-    changeAspect = true;
-    break;
-  }
-
-  // If renderer doesn't support rotation, treat orientation as 0 degree so
-  // that ffmpeg might handle it
-  if (!Supports(RENDERFEATURE::ROTATION))
-  {
-    pointOffset = 0;
-    changeAspect = false;
-  }
-
-  float diffX = 0.0f;
-  float diffY = 0.0f;
-  float centerX = 0.0f;
-  float centerY = 0.0f;
-
-  if (changeAspect) // We are either rotating by 90 or 270 degrees which inverts aspect ratio
-  {
-    float newWidth = destRect.Height(); // New width is old height
-    float newHeight = destRect.Width(); // New height is old width
-    float diffWidth = newWidth - destRect.Width(); // Difference between old and new width
-    float diffHeight = newHeight - destRect.Height(); // Difference between old and new height
-
-    // If the new width is bigger then the old or the new height is bigger
-    // then the old, we need to scale down
-    if (diffWidth > 0.0f || diffHeight > 0.0f)
-    {
-      float aspectRatio = GetAspectRatio();
-
-      // Scale to fit screen width because the difference in width is bigger
-      // then the difference in height
-      if (diffWidth > diffHeight)
-      {
-        // Clamp to the width of the old dest rect
-        newWidth = destRect.Width();
-        newHeight *= aspectRatio;
-      }
-      else // Scale to fit screen height
-      {
-        // Clamp to the height of the old dest rect
-        newHeight = destRect.Height();
-        newWidth /= aspectRatio;
-      }
-    }
-
-    // Calculate the center point of the view
-    centerX = m_viewRect.x1 + m_viewRect.Width() / 2.0f;
-    centerY = m_viewRect.y1 + m_viewRect.Height() / 2.0f;
-
-    // Calculate the number of pixels we need to go in each x direction from
-    // the center point
-    diffX = newWidth / 2;
-    // Calculate the number of pixels we need to go in each y direction from
-    // the center point
-    diffY = newHeight / 2;
-  }
-
-  for (int destIdx = 0, srcIdx = pointOffset; destIdx < 4; destIdx++)
-  {
-    m_rotatedDestCoords[destIdx].x = origMat[srcIdx][0];
-    m_rotatedDestCoords[destIdx].y = origMat[srcIdx][1];
-
-    if (changeAspect)
-    {
-      switch (srcIdx)
-      {
-      case 0:// top left
-        m_rotatedDestCoords[destIdx].x = centerX - diffX;
-        m_rotatedDestCoords[destIdx].y = centerY - diffY;
-        break;
-      case 1:// top right
-        m_rotatedDestCoords[destIdx].x = centerX + diffX;
-        m_rotatedDestCoords[destIdx].y = centerY - diffY;
-        break;
-      case 2:// bottom right
-        m_rotatedDestCoords[destIdx].x = centerX + diffX;
-        m_rotatedDestCoords[destIdx].y = centerY + diffY;
-        break;
-      case 3:// bottom left
-        m_rotatedDestCoords[destIdx].x = centerX - diffX;
-        m_rotatedDestCoords[destIdx].y = centerY + diffY;
-        break;
-      }
-    }
-    srcIdx++;
-    srcIdx = srcIdx % 4;
-  }
-}
-
-void CRPBaseRenderer::CalcNormalRenderRect(float offsetX, float offsetY, float width, float height, float inputFrameRatio, float zoomAmount)
-{
-  CRect &sourceRect = m_sourceRect;
-  CRect &destRect = m_dimensions;
-
-  // If view window is empty, set empty destination
-  if (height == 0 || width == 0)
-  {
-    destRect.SetRect(0.0f, 0.0f, 0.0f, 0.0f);
-    return;
-  }
-
-  // Scale up image as much as possible and keep the aspect ratio (introduces
-  // with black bars)
-  // Calculate the correct output frame ratio (using the users pixel ratio
-  // setting and the output pixel ratio setting)
-  float outputFrameRatio = inputFrameRatio / m_context.GetResInfo().fPixelRatio;
-
-  // Maximize the game width
-  float newWidth = width;
-  float newHeight = newWidth / outputFrameRatio;
-
-  if (newHeight > height)
-  {
-    newHeight = height;
-    newWidth = newHeight * outputFrameRatio;
-  }
-
-  // Scale the game up by set zoom amount
-  newWidth *= zoomAmount;
-  newHeight *= zoomAmount;
-
-  // If we are less than one pixel off use the complete screen instead
-  if (std::abs(newWidth - width) < 1.0f)
-    newWidth = width;
-  if (std::abs(newHeight - height) < 1.0f)
-    newHeight = height;
-
-  // Center the game
-  float posY = (height - newHeight) / 2;
-  float posX = (width - newWidth) / 2;
-
-  destRect.x1 = static_cast<float>(MathUtils::round_int(posX + offsetX));
-  destRect.x2 = destRect.x1 + MathUtils::round_int(newWidth);
-  destRect.y1 = static_cast<float>(MathUtils::round_int(posY + offsetY));
-  destRect.y2 = destRect.y1 + MathUtils::round_int(newHeight);
+  m_sourceRect.x1 = 0.0f;
+  m_sourceRect.y1 = 0.0f;
+  m_sourceRect.x2 = static_cast<float>(m_sourceWidth);
+  m_sourceRect.y2 = static_cast<float>(m_sourceHeight);
 
   // Clip as needed
   if (!(m_context.IsFullScreenVideo() || m_context.IsCalibrating()))
-  {
-    CRect original(destRect);
-    destRect.Intersect(CRect(offsetX, offsetY, offsetX + width, offsetY + height));
-    if (destRect != original)
-    {
-      float scaleX = sourceRect.Width() / original.Width();
-      float scaleY = sourceRect.Height() / original.Height();
-      sourceRect.x1 += (destRect.x1 - original.x1) * scaleX;
-      sourceRect.y1 += (destRect.y1 - original.y1) * scaleY;
-      sourceRect.x2 += (destRect.x2 - original.x2) * scaleX;
-      sourceRect.y2 += (destRect.y2 - original.y2) * scaleY;
-    }
-  }
+    CRenderUtils::ClipRect(viewRect, m_sourceRect, m_dimensions);
 
-  UpdateDrawPoints(destRect);
-}
-
-void CRPBaseRenderer::UpdateDrawPoints(const CRect &destRect)
-{
-  if (m_oldDestRect != destRect || m_oldRenderOrientation != m_renderOrientation)
+  const CRect &destRect = m_dimensions;
+  if (m_oldDestRect != destRect || m_oldRenderOrientation != rotationDegCCW)
   {
-    // Adapt the drawing rect points if we have to rotate and either destrect
+    // Adapt the drawing rect points if we have to rotate and either destRect
     // or orientation changed
-    ReorderDrawPoints();
+    m_rotatedDestCoords = CRenderUtils::ReorderDrawPoints(destRect, rotationDegCCW, GetAspectRatio());
     m_oldDestRect = destRect;
-    m_oldRenderOrientation = m_renderOrientation;
+    m_oldRenderOrientation = rotationDegCCW;
   }
 }
 
-void CRPBaseRenderer::ManageRenderArea()
-{
-  m_viewRect = m_context.GetViewWindow();
-
-  m_sourceRect.x1 = 0.0f;
-  m_sourceRect.y1 = 0.0f;
-  m_sourceRect.x2 = static_cast<float>(m_sourceWidth);
-  m_sourceRect.y2 = static_cast<float>(m_sourceHeight);
-
-  CalcNormalRenderRect(m_viewRect.x1, m_viewRect.y1, m_viewRect.Width(), m_viewRect.Height(), GetAspectRatio() * m_pixelRatio, m_zoomAmount);
-  CalculateViewMode();
-}
-
 void CRPBaseRenderer::MarkDirty()
 {
   //CServiceBroker::GetGUI()->GetWindowManager().MarkDirty(m_dimensions); //! @todo
@@ -468,3 +223,21 @@ void CRPBaseRenderer::PostRender()
 {
   m_context.ApplyStateBlock();
 }
+
+void CRPBaseRenderer::GetScreenDimensions(float &screenWidth, float &screenHeight, float &screenPixelRatio)
+{
+  // Get our calibrated full screen resolution
+  RESOLUTION_INFO info = m_context.GetResInfo();
+
+  screenWidth = static_cast<float>(info.Overscan.right - info.Overscan.left);
+  screenHeight = static_cast<float>(info.Overscan.bottom - info.Overscan.top);
+
+  // Splitres scaling factor
+  float xscale = static_cast<float>(info.iScreenWidth) / static_cast<float>(info.iWidth);
+  float yscale = static_cast<float>(info.iScreenHeight) / static_cast<float>(info.iHeight);
+
+  screenWidth *= xscale;
+  screenHeight *= yscale;
+
+  screenPixelRatio = info.fPixelRatio;
+}
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.h b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.h
index 7878ac4f3367..f1806d66aa61 100644
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.h
+++ b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPBaseRenderer.h
@@ -28,7 +28,7 @@ extern "C" {
 #include "libavutil/pixfmt.h"
 }
 
-#include <atomic>
+#include <array>
 #include <memory>
 #include <stdint.h>
 
@@ -92,6 +92,7 @@ namespace RETRO
     virtual void ManageRenderArea();
 
     float GetAspectRatio() const;
+    unsigned int GetRotationDegCCW() const;
 
     // Construction parameters
     CRenderContext &m_context;
@@ -102,7 +103,6 @@ namespace RETRO
     AVPixelFormat m_format = AV_PIX_FMT_NONE;
     unsigned int m_sourceWidth = 0;
     unsigned int m_sourceHeight = 0;
-    float m_sourceFrameRatio = 1.0f;
     unsigned int m_renderOrientation = 0; // Degrees counter-clockwise
 
     /*!
@@ -116,15 +116,12 @@ namespace RETRO
     // Rendering properties
     CRenderSettings m_renderSettings;
     CRect m_dimensions;
-    float m_pixelRatio = 1.0f;
-    float m_zoomAmount = 1.0f;
     IRenderBuffer *m_renderBuffer = nullptr;
 
     // Geometry properties
-    CPoint m_rotatedDestCoords[4];
+    std::array<CPoint, 4> m_rotatedDestCoords;
     CRect m_oldDestRect; // destrect of the previous frame
     CRect m_sourceRect; // original size of the video
-    CRect m_viewRect; // entire target rendering area for the video (including black bars)
 
   private:
     /*!
@@ -132,13 +129,11 @@ namespace RETRO
      */
     void PostRender();
 
-    void CalcNormalRenderRect(float offsetX, float offsetY, float width, float height, float inputFrameRatio, float zoomAmount);
-    void CalculateViewMode();
-
-    void UpdateDrawPoints(const CRect &destRect);
-    void ReorderDrawPoints();
     void MarkDirty();
 
+    // Utility functions
+    void GetScreenDimensions(float &screenWidth, float &screenHeight, float &screenPixelRatio);
+
     uint64_t m_renderFrameCount = 0;
     uint64_t m_lastRender = 0;
   };
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPWinRenderer.cpp b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPWinRenderer.cpp
index 58e63d293d4c..426704fe5517 100644
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPWinRenderer.cpp
+++ b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPWinRenderer.cpp
@@ -286,6 +286,13 @@ bool CRPWinRenderer::SupportsScalingMethod(SCALINGMETHOD method)
 
 void CRPWinRenderer::Render(CD3DTexture *target)
 {
+  const CPoint destPoints[4] = {
+    m_rotatedDestCoords[0],
+    m_rotatedDestCoords[1],
+    m_rotatedDestCoords[2],
+    m_rotatedDestCoords[3]
+  };
+
   if (m_renderBuffer != nullptr)
   {
     CD3DTexture *intermediateTarget = static_cast<CWinRenderBuffer*>(m_renderBuffer)->GetTarget();
@@ -304,7 +311,7 @@ void CRPWinRenderer::Render(CD3DTexture *target)
       if (outputShader != nullptr)
       {
         outputShader->Render(*intermediateTarget, m_sourceWidth, m_sourceHeight,
-          m_sourceRect, m_rotatedDestCoords, viewPort, target,
+          m_sourceRect, destPoints, viewPort, target,
           m_context.UseLimitedColor() ? 1 : 0);
       }
     }
