From 6016e040e9efd549e6b3fc8baf90568fbe778e7b Mon Sep 17 00:00:00 2001
From: phunkyfish <phunkyfish@gmail.com>
Date: Thu, 26 Mar 2020 11:21:19 +0000
Subject: [PATCH] [pvr] New, Live, Finale and Premiere for EPG, Recordings and
 Timers

---
 .../resources/strings.po                      | 20 ++++-
 addons/skin.estuary/xml/DialogPVRInfo.xml     |  2 +-
 addons/skin.estuary/xml/Includes_PVR.xml      | 10 +--
 addons/skin.estuary/xml/MyPVRGuide.xml        |  2 +-
 addons/skin.estuary/xml/Variables.xml         | 19 +++-
 xbmc/GUIInfoManager.cpp                       | 27 ++++++
 .../include/kodi/xbmc_epg_types.h             |  9 +-
 .../include/kodi/xbmc_pvr_types.h             |  9 ++
 xbmc/guilib/guiinfo/GUIInfoLabels.h           |  3 +
 xbmc/pvr/epg/EpgInfoTag.cpp                   | 15 ++++
 xbmc/pvr/epg/EpgInfoTag.h                     | 18 ++++
 xbmc/pvr/guilib/guiinfo/PVRGUIInfo.cpp        | 86 ++++++++++++++++++-
 xbmc/pvr/recordings/PVRRecording.cpp          | 26 +++++-
 xbmc/pvr/recordings/PVRRecording.h            | 31 +++++++
 14 files changed, 260 insertions(+), 17 deletions(-)

diff --git a/addons/resource.language.en_gb/resources/strings.po b/addons/resource.language.en_gb/resources/strings.po
index b44b890047dc..2f516b2fd832 100644
--- a/addons/resource.language.en_gb/resources/strings.po
+++ b/addons/resource.language.en_gb/resources/strings.po
@@ -3765,7 +3765,17 @@ msgctxt "#837"
 msgid "Sundays"
 msgstr ""
 
-#empty strings from id 838 to 839
+#. Label for a TV show Premiere
+#: addons/skin.estuary/xml/DialogPVRInfo.xml
+msgctxt "#838"
+msgid "Premi√®re"
+msgstr ""
+
+#. Label for a Live TV show
+#: addons/skin.estuary/xml/DialogPVRInfo.xml
+msgctxt "#839"
+msgid "Live"
+msgstr ""
 
 #. Message in a dialog when a user wants to delete a timer that was scheduled by a timer rule
 #: xbmc/pvr/PVRGUIActions.cpp
@@ -3782,7 +3792,7 @@ msgstr ""
 #. Label for a first aired TV show
 #: addons/skin.estuary/xml/DialogPVRInfo.xml
 msgctxt "#842"
-msgid "New!"
+msgid "New"
 msgstr ""
 
 #. Label for a context menu entry to activate a currently inactive timer
@@ -3821,7 +3831,11 @@ msgctxt "#848"
 msgid "Are you sure you want to stop this recording?"
 msgstr ""
 
-#empty string with id 849
+#. Label for a finale of a TV show
+#: addons/skin.estuary/xml/DialogPVRInfo.xml
+msgctxt "#849"
+msgid "Finale"
+msgstr ""
 
 msgctxt "#850"
 msgid "Invalid port number entered"
diff --git a/addons/skin.estuary/xml/DialogPVRInfo.xml b/addons/skin.estuary/xml/DialogPVRInfo.xml
index 4b463048b03c..f843933bee16 100644
--- a/addons/skin.estuary/xml/DialogPVRInfo.xml
+++ b/addons/skin.estuary/xml/DialogPVRInfo.xml
@@ -117,7 +117,7 @@
 			</control>
 			<include content="InfoDialogTopBarInfo">
 				<param name="main_label" value="$INFO[ListItem.Title] $INFO[ListItem.Year,([COLOR grey],[/COLOR])]" />
-				<param name="sub_label" value="[COLOR grey]$VAR[SeasonEpisodeLabel][/COLOR]$INFO[ListItem.EpisodeName,[COLOR white][B],[/B][/COLOR]]" />
+				<param name="sub_label" value="$VAR[FlagDashLabel][COLOR grey]$VAR[SeasonEpisodeLabel][/COLOR]$INFO[ListItem.EpisodeName,[COLOR white][B],[/B][/COLOR]]" />
 				<param name="posy" value="40" />
 			</include>
 		</control>
diff --git a/addons/skin.estuary/xml/Includes_PVR.xml b/addons/skin.estuary/xml/Includes_PVR.xml
index f5332fe331cd..39b732fc33db 100644
--- a/addons/skin.estuary/xml/Includes_PVR.xml
+++ b/addons/skin.estuary/xml/Includes_PVR.xml
@@ -213,7 +213,7 @@
 					<top>60</top>
 					<height>200</height>
 					<wrapmultiline>true</wrapmultiline>
-					<label>$INFO[ListItem.TimerType,[COLOR grey]$LOCALIZE[803]:[/COLOR] ,[CR]]$INFO[ListItem.Date,[COLOR grey]$LOCALIZE[552]:[/COLOR] ,[CR]]$INFO[ListItem.Duration,[COLOR grey]$LOCALIZE[180]:[/COLOR] ,[CR]]$VAR[ExpirationDateTimeLabel]</label>
+					<label>$INFO[ListItem.TimerType,[COLOR grey]$LOCALIZE[803]:[/COLOR] ,[CR]]$INFO[ListItem.Duration,[COLOR grey]$LOCALIZE[180]:[/COLOR] ,[CR]]$VAR[ExpirationDateTimeLabel,[CR]]$VAR[FlagLabel]</label>
 				</control>
 				<control type="group">
 					<visible>Integer.IsGreater(ListItem.Progress,0)</visible>
@@ -461,7 +461,7 @@
 						<label>$INFO[ListItem.Label]</label>
 					</control>
 					<control type="image">
-						<visible>ListItem.IsNew</visible>
+						<visible>ListItem.IsNew | ListItem.IsPremiere | ListItem.IsFinale | ListItem.IsLive</visible>
 						<left>6</left>
 						<top>35</top>
 						<width>16</width>
@@ -475,7 +475,7 @@
 						<width>16</width>
 						<height>16</height>
 						<texture>$VAR[PVRTimerIcon]</texture>
-						<animation effect="slide" start="0,0" end="19,0" condition="ListItem.IsNew">Conditional</animation>
+						<animation effect="slide" start="0,0" end="19,0" condition="ListItem.IsNew | ListItem.IsPremiere | ListItem.IsFinale | ListItem.IsLive">Conditional</animation>
 					</control>
 				</itemlayout>
 				<focusedlayout height="62" width="60">
@@ -508,7 +508,7 @@
 						<label>$INFO[ListItem.Label]</label>
 					</control>
 					<control type="image">
-						<visible>ListItem.IsNew</visible>
+						<visible>ListItem.IsNew | ListItem.IsPremiere | ListItem.IsFinale | ListItem.IsLive</visible>
 						<left>6</left>
 						<top>35</top>
 						<width>16</width>
@@ -522,7 +522,7 @@
 						<width>16</width>
 						<height>16</height>
 						<texture>$VAR[PVRTimerIcon]</texture>
-						<animation effect="slide" start="0,0" end="19,0" condition="ListItem.IsNew">Conditional</animation>
+						<animation effect="slide" start="0,0" end="19,0" condition="ListItem.IsNew | ListItem.IsPremiere | ListItem.IsFinale | ListItem.IsLive">Conditional</animation>
 					</control>
 				</focusedlayout>
 			</control>
diff --git a/addons/skin.estuary/xml/MyPVRGuide.xml b/addons/skin.estuary/xml/MyPVRGuide.xml
index 48a9bcecdc59..c84b51c15a9e 100644
--- a/addons/skin.estuary/xml/MyPVRGuide.xml
+++ b/addons/skin.estuary/xml/MyPVRGuide.xml
@@ -200,7 +200,7 @@
 							<top>35</top>
 							<width>60%</width>
 							<height>30</height>
-							<label>[I][COLOR grey]$VAR[SeasonEpisodeLabel][/COLOR]$INFO[ListItem.EpisodeName,[COLOR white],[/COLOR]][/I]</label>
+							<label>$VAR[FlagDashLabel][I][COLOR grey]$VAR[SeasonEpisodeLabel][/COLOR]$INFO[ListItem.EpisodeName,[COLOR white],[/COLOR]][/I]</label>
 						</control>
 						<control type="label">
 							<top>35</top>
diff --git a/addons/skin.estuary/xml/Variables.xml b/addons/skin.estuary/xml/Variables.xml
index 5ac5a777f7f9..550cc2695245 100644
--- a/addons/skin.estuary/xml/Variables.xml
+++ b/addons/skin.estuary/xml/Variables.xml
@@ -303,7 +303,7 @@
 		<value>$INFO[ListItem.PictureDateTime]</value>
 	</variable>
 	<variable name="NowPlayingBreadcrumbsVar">
-  		<value condition="MusicPlayer.Content(livetv) + Player.HasAudio">$INFO[MusicPlayer.Title]</value>	
+  		<value condition="MusicPlayer.Content(livetv) + Player.HasAudio">$INFO[MusicPlayer.Title]</value> 
 		<value condition="VideoPlayer.Content(livetv)">$INFO[VideoPlayer.Title]</value>
 		<value condition="VideoPlayer.Content(episodes) + !String.IsEmpty(Player.Art(tvshow.clearlogo))">$INFO[VideoPlayer.Season,[COLOR button_focus]S,[/COLOR]]$INFO[VideoPlayer.Episode,[COLOR button_focus]E,: [/COLOR]]$INFO[VideoPlayer.Title]</value>
 		<value condition="VideoPlayer.Content(episodes) + Window.IsActive(fullscreenvideo)">$INFO[VideoPlayer.TVShowTitle]$INFO[VideoPlayer.Year, ([COLOR button_focus],[/COLOR])]</value>
@@ -470,9 +470,24 @@
 		<value>$INFO[ListItem.Season,S]$INFO[ListItem.Episode,E,: ]</value>
 	</variable>
 	<variable name="PremieredLabel">
-		<value condition="!String.IsEmpty(ListItem.Premiered) + ListItem.IsNew">[COLOR grey]$LOCALIZE[20416]:[/COLOR] $INFO[ListItem.Premiered] [B]([COLOR button_focus]$LOCALIZE[842][/COLOR])[/B][CR]</value>
 		<value>$INFO[ListItem.Premiered,[COLOR grey]$LOCALIZE[20416]:[/COLOR] ,[CR]]</value>
 	</variable>
+	<variable name="FlagLabel">
+		<value condition="ListItem.IsPremiere">[B][[COLOR button_focus]$LOCALIZE[838][/COLOR][/B]</value>
+		<value condition="ListItem.IsFinale">[B][COLOR button_focus]$LOCALIZE[849][/COLOR][/B]</value>
+		<value condition="ListItem.IsLive">[B][COLOR button_focus]$LOCALIZE[839][/COLOR][/B]</value>
+		<value condition="ListItem.IsNew">[B][COLOR button_focus]$LOCALIZE[842][/COLOR][/B]</value>
+	</variable>
+	<variable name="FlagDashLabel">
+		<value condition="ListItem.IsPremiere + String.IsEmpty(ListItem.Season) + String.IsEmpty(ListItem.Episode) + String.IsEmpty(ListItem.EpisodeName)">[B][COLOR button_focus]$LOCALIZE[838][/COLOR][/B]</value>
+		<value condition="ListItem.IsPremiere">[B][[COLOR button_focus]$LOCALIZE[838][/COLOR][/B] - </value>
+		<value condition="ListItem.IsFinale + String.IsEmpty(ListItem.Season) + String.IsEmpty(ListItem.Episode) + String.IsEmpty(ListItem.EpisodeName)">[B][COLOR button_focus]$LOCALIZE[849][/COLOR][/B]</value>
+		<value condition="ListItem.IsFinale">[B][COLOR button_focus]$LOCALIZE[849][/COLOR][/B] - </value>
+		<value condition="ListItem.IsLive + String.IsEmpty(ListItem.Season) + String.IsEmpty(ListItem.Episode) + String.IsEmpty(ListItem.EpisodeName)">[B][COLOR button_focus]$LOCALIZE[839][/COLOR][/B]</value>
+		<value condition="ListItem.IsLive">[B][COLOR button_focus]$LOCALIZE[839][/COLOR][/B] - </value>
+		<value condition="ListItem.IsNew + String.IsEmpty(ListItem.Season) + String.IsEmpty(ListItem.Episode) + String.IsEmpty(ListItem.EpisodeName)">[B][COLOR button_focus]$LOCALIZE[842][/COLOR][/B]</value>
+		<value condition="ListItem.IsNew">[B][COLOR button_focus]$LOCALIZE[842][/COLOR][/B] - </value>
+	</variable>
 	<variable name="ExpirationDateTimeLabel">
 		<value condition="!String.IsEmpty(ListItem.ExpirationDate)">[COLOR grey]$LOCALIZE[19299]:[/COLOR] $INFO[ListItem.ExpirationDate] $INFO[ListItem.ExpirationTime][CR]</value>
 	</variable>
diff --git a/xbmc/GUIInfoManager.cpp b/xbmc/GUIInfoManager.cpp
index ed81fd2167e2..33919f38e2ca 100644
--- a/xbmc/GUIInfoManager.cpp
+++ b/xbmc/GUIInfoManager.cpp
@@ -5815,6 +5815,30 @@ const infomap container_str[]  = {{ "property",         CONTAINER_PROPERTY },
 ///     @skinning_v19 **[New Infolabel]** \link ListItem_IsNew `ListItem.IsNew`\endlink
 ///     <p>
 ///   }
+///   \table_row3{   <b>`ListItem.IsPremiere`</b>,
+///                  \anchor ListItem_IsPremiere
+///                  _boolean_,
+///     @return **True** if the item is a premiere (for example\, a Movie first showing or season first on Live TV).
+///     <p><hr>
+///     @skinning_v19 **[New Infolabel]** \link ListItem_IsPremiere `ListItem.IsPremiere`\endlink
+///     <p>
+///   }
+///   \table_row3{   <b>`ListItem.IsFinale`</b>,
+///                  \anchor ListItem_IsFinale
+///                  _boolean_,
+///     @return **True** if the item is a finale (for example\, a season finale showing on Live TV).
+///     <p><hr>
+///     @skinning_v19 **[New Infolabel]** \link ListItem_IsFinale `ListItem.IsFinale`\endlink
+///     <p>
+///   }
+///   \table_row3{   <b>`ListItem.IsLive`</b>,
+///                  \anchor ListItem_IsLive
+///                  _boolean_,
+///     @return **True** if the item is live (for example\, a Live TV sports event).
+///     <p><hr>
+///     @skinning_v19 **[New Infolabel]** \link ListItem_IsLive `ListItem.IsLive`\endlink
+///     <p>
+///   }
 ///   \table_row3{   <b>`ListItem.DiscTitle`</b>,
 ///                  \anchor ListItem_DiscTitle
 ///                  _string_,
@@ -6096,6 +6120,9 @@ const infomap listitem_labels[]= {{ "thumb",            LISTITEM_THUMB },
                                   { "bitrate",          LISTITEM_BITRATE },
                                   { "samplerate",       LISTITEM_SAMPLERATE },
                                   { "musicchannels",    LISTITEM_MUSICCHANNELS },
+                                  { "ispremiere",       LISTITEM_IS_PREMIERE },
+                                  { "isfinale",         LISTITEM_IS_FINALE },
+                                  { "islive",           LISTITEM_IS_LIVE },
 };
 
 /// \page modules__infolabels_boolean_conditions
diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_epg_types.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_epg_types.h
index cfdf9887dacf..9aa42a7f1c89 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_epg_types.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_epg_types.h
@@ -56,9 +56,12 @@ extern "C" {
 #endif
 
   /* EPG_TAG.iFlags values */
-  const unsigned int EPG_TAG_FLAG_UNDEFINED = 0x00000000; /*!< @brief nothing special to say about this entry */
-  const unsigned int EPG_TAG_FLAG_IS_SERIES = 0x00000001; /*!< @brief this EPG entry is part of a series */
-  const unsigned int EPG_TAG_FLAG_IS_NEW    = 0x00000002; /*!< @brief this EPG entry will be flagged as new */
+  const unsigned int EPG_TAG_FLAG_UNDEFINED   = 0x00000000; /*!< @brief nothing special to say about this entry */
+  const unsigned int EPG_TAG_FLAG_IS_SERIES   = 0x00000001; /*!< @brief this EPG entry is part of a series */
+  const unsigned int EPG_TAG_FLAG_IS_NEW      = 0x00000002; /*!< @brief this EPG entry will be flagged as new */
+  const unsigned int EPG_TAG_FLAG_IS_PREMIERE = 0x00000004; /*!< @brief this EPG entry will be flagged as a premiere */
+  const unsigned int EPG_TAG_FLAG_IS_FINALE   = 0x00000008; /*!< @brief this EPG entry will be flagged as a finale */
+  const unsigned int EPG_TAG_FLAG_IS_LIVE     = 0x00000010; /*!< @brief this EPG entry will be flagged as live */
 
   /* Special EPG_TAG.iUniqueBroadcastId value */
 
diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h
index de05e9197088..d88ce5986def 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h
@@ -528,6 +528,14 @@ extern "C" {
 
   } ATTRIBUTE_PACKED PVR_TIMER;
 
+  /* PVR_RECORDING.iFlags values */
+  const unsigned int PVR_RECORDING_FLAG_UNDEFINED   = 0x00000000; /*!< @brief nothing special to say about this recording */
+  const unsigned int PVR_RECORDING_FLAG_IS_SERIES   = 0x00000001; /*!< @brief this recording is part of a series */
+  const unsigned int PVR_RECORDING_FLAG_IS_NEW      = 0x00000002; /*!< @brief this recording will be flagged as new */
+  const unsigned int PVR_RECORDING_FLAG_IS_PREMIERE = 0x00000004; /*!< @brief this recording will be flagged as a premiere */
+  const unsigned int PVR_RECORDING_FLAG_IS_FINALE   = 0x00000008; /*!< @brief this recording will be flagged as a finale */
+  const unsigned int PVR_RECORDING_FLAG_IS_LIVE     = 0x00000010; /*!< @brief this recording will be flagged as live */
+
   /*!
    * @brief special PVR_RECORDING.iSeriesNumber and PVR_RECORDING.iEpisodeNumber value to indicate it is not to be used
    * 
@@ -566,6 +574,7 @@ extern "C" {
     int    iChannelUid;                                   /*!< @brief (optional) unique identifier of the channel for this recording. PVR_CHANNEL_INVALID_UID denotes that channel uid is not available. */
     PVR_RECORDING_CHANNEL_TYPE channelType;               /*!< @brief (optional) channel type. Set to PVR_RECORDING_CHANNEL_TYPE_UNKNOWN if the type cannot be determined. */
     char   strFirstAired[PVR_ADDON_DATE_STRING_LENGTH];   /*!< @brief (optional) first aired date of this recording. Used only for display purposes. Specify in W3C date format "YYYY-MM-DD". */
+    unsigned int iFlags;                                  /*!< @brief (optional) bit field of independent flags associated with the recording */
   } ATTRIBUTE_PACKED PVR_RECORDING;
 
   /*!
diff --git a/xbmc/guilib/guiinfo/GUIInfoLabels.h b/xbmc/guilib/guiinfo/GUIInfoLabels.h
index 54d0ae6fb17b..9df42523d770 100644
--- a/xbmc/guilib/guiinfo/GUIInfoLabels.h
+++ b/xbmc/guilib/guiinfo/GUIInfoLabels.h
@@ -904,6 +904,9 @@
 #define LISTITEM_BITRATE            (LISTITEM_START + 197)
 #define LISTITEM_SAMPLERATE         (LISTITEM_START + 198)
 #define LISTITEM_MUSICCHANNELS      (LISTITEM_START + 199)
+#define LISTITEM_IS_PREMIERE        (LISTITEM_START + 200)
+#define LISTITEM_IS_FINALE          (LISTITEM_START + 201)
+#define LISTITEM_IS_LIVE            (LISTITEM_START + 202)
 
 #define LISTITEM_END                (LISTITEM_START + 2500)
 
diff --git a/xbmc/pvr/epg/EpgInfoTag.cpp b/xbmc/pvr/epg/EpgInfoTag.cpp
index 8eecd6458368..d98f834f97e8 100644
--- a/xbmc/pvr/epg/EpgInfoTag.cpp
+++ b/xbmc/pvr/epg/EpgInfoTag.cpp
@@ -665,6 +665,21 @@ bool CPVREpgInfoTag::IsNew() const
   return (m_iFlags & EPG_TAG_FLAG_IS_NEW) > 0;
 }
 
+bool CPVREpgInfoTag::IsPremiere() const
+{
+  return (m_iFlags & EPG_TAG_FLAG_IS_PREMIERE) > 0;
+}
+
+bool CPVREpgInfoTag::IsFinale() const
+{
+  return (m_iFlags & EPG_TAG_FLAG_IS_FINALE) > 0;
+}
+
+bool CPVREpgInfoTag::IsLive() const
+{
+  return (m_iFlags & EPG_TAG_FLAG_IS_LIVE) > 0;
+}
+
 const std::vector<std::string> CPVREpgInfoTag::Tokenize(const std::string& str)
 {
   return StringUtils::Split(str.c_str(), EPG_STRING_TOKEN_SEPARATOR);
diff --git a/xbmc/pvr/epg/EpgInfoTag.h b/xbmc/pvr/epg/EpgInfoTag.h
index b8ff2272f3ba..3b26789ccb88 100644
--- a/xbmc/pvr/epg/EpgInfoTag.h
+++ b/xbmc/pvr/epg/EpgInfoTag.h
@@ -393,6 +393,24 @@ namespace PVR
      */
     bool IsNew() const;
 
+    /*!
+     * @brief Check whether this tag will be flagged as a premiere.
+     * @return True if this tag will be flagged as a premiere, false otherwise
+     */
+    bool IsPremiere() const;
+
+    /*!
+     * @brief Check whether this tag will be flagged as a finale.
+     * @return True if this tag will be flagged as a finale, false otherwise
+     */
+    bool IsFinale() const;
+
+    /*!
+     * @brief Check whether this tag will be flagged as live.
+     * @return True if this tag will be flagged as live, false otherwise
+     */
+    bool IsLive() const;
+
     /*!
      * @brief Return the flags (EPG_TAG_FLAG_*) of this event as a bitfield.
      * @return the flags.
diff --git a/xbmc/pvr/guilib/guiinfo/PVRGUIInfo.cpp b/xbmc/pvr/guilib/guiinfo/PVRGUIInfo.cpp
index c8905f19e5ba..b46ba337bfca 100644
--- a/xbmc/pvr/guilib/guiinfo/PVRGUIInfo.cpp
+++ b/xbmc/pvr/guilib/guiinfo/PVRGUIInfo.cpp
@@ -1270,7 +1270,91 @@ bool CPVRGUIInfo::GetListItemAndPlayerBool(const CFileItem* item, const CGUIInfo
     case LISTITEM_IS_NEW:
       if (item->IsEPG())
       {
-        bValue = item->GetEPGInfoTag()->IsNew();
+        if (item->GetEPGInfoTag())
+        {
+          bValue = item->GetEPGInfoTag()->IsNew();
+          return true;
+        }
+      }
+      else if (item->IsPVRRecording())
+      {
+        bValue = item->GetPVRRecordingInfoTag()->IsNew();
+        return true;
+      }
+      else if (item->IsPVRTimer() && item->GetPVRTimerInfoTag()->GetEpgInfoTag())
+      {
+        bValue = item->GetPVRTimerInfoTag()->GetEpgInfoTag()->IsNew();
+        return true;
+      }
+      else if (item->IsPVRChannel() && item->GetPVRChannelInfoTag()->GetEPGNow())
+      {
+        bValue = item->GetPVRChannelInfoTag()->GetEPGNow()->IsNew();
+        return true;
+      }
+      break;
+    case LISTITEM_IS_PREMIERE:
+      if (item->IsEPG())
+      {
+        bValue = item->GetEPGInfoTag()->IsPremiere();
+        return true;
+      }
+      else if (item->IsPVRRecording())
+      {
+        bValue = item->GetPVRRecordingInfoTag()->IsPremiere();
+        return true;
+      }
+      else if (item->IsPVRTimer() && item->GetPVRTimerInfoTag()->GetEpgInfoTag())
+      {
+        bValue = item->GetPVRTimerInfoTag()->GetEpgInfoTag()->IsPremiere();
+        return true;
+      }
+      else if (item->IsPVRChannel() && item->GetPVRChannelInfoTag()->GetEPGNow())
+      {
+        bValue = item->GetPVRChannelInfoTag()->GetEPGNow()->IsPremiere();
+        return true;
+      }
+      break;
+    case LISTITEM_IS_FINALE:
+      if (item->IsEPG())
+      {
+        bValue = item->GetEPGInfoTag()->IsFinale();
+        return true;
+      }
+      else if (item->IsPVRRecording())
+      {
+        bValue = item->GetPVRRecordingInfoTag()->IsFinale();
+        return true;
+      }
+      else if (item->IsPVRTimer() && item->GetPVRTimerInfoTag()->GetEpgInfoTag())
+      {
+        bValue = item->GetPVRTimerInfoTag()->GetEpgInfoTag()->IsFinale();
+        return true;
+      }
+      else if (item->IsPVRChannel() && item->GetPVRChannelInfoTag()->GetEPGNow())
+      {
+        bValue = item->GetPVRChannelInfoTag()->GetEPGNow()->IsFinale();
+        return true;
+      }
+      break;
+    case LISTITEM_IS_LIVE:
+      if (item->IsEPG())
+      {
+        bValue = item->GetEPGInfoTag()->IsLive();
+        return true;
+      }
+      else if (item->IsPVRRecording())
+      {
+        bValue = item->GetPVRRecordingInfoTag()->IsLive();
+        return true;
+      }
+      else if (item->IsPVRTimer() && item->GetPVRTimerInfoTag()->GetEpgInfoTag())
+      {
+        bValue = item->GetPVRTimerInfoTag()->GetEpgInfoTag()->IsLive();
+        return true;
+      }
+      else if (item->IsPVRChannel() && item->GetPVRChannelInfoTag()->GetEPGNow())
+      {
+        bValue = item->GetPVRChannelInfoTag()->GetEPGNow()->IsLive();
         return true;
       }
       break;
diff --git a/xbmc/pvr/recordings/PVRRecording.cpp b/xbmc/pvr/recordings/PVRRecording.cpp
index 2a422f9539a8..394fdc8db9ce 100644
--- a/xbmc/pvr/recordings/PVRRecording.cpp
+++ b/xbmc/pvr/recordings/PVRRecording.cpp
@@ -96,6 +96,7 @@ CPVRRecording::CPVRRecording(const PVR_RECORDING& recording, unsigned int iClien
   m_iChannelUid = recording.iChannelUid;
   if (strlen(recording.strFirstAired) > 0)
     m_firstAired.SetFromW3CDateTime(recording.strFirstAired);
+  m_iFlags = recording.iFlags;
 
   SetGenre(recording.iGenreType, recording.iGenreSubType, recording.strGenreDescription);
   CVideoInfoTag::SetPlayCount(recording.iPlayCount);
@@ -164,7 +165,8 @@ bool CPVRRecording::operator ==(const CPVRRecording& right) const
        m_genre == right.m_genre &&
        m_iGenreType == right.m_iGenreType &&
        m_iGenreSubType == right.m_iGenreSubType &&
-       m_firstAired == right.m_firstAired);
+       m_firstAired == right.m_firstAired &&
+       m_iFlags == right.m_iFlags);
 }
 
 bool CPVRRecording::operator !=(const CPVRRecording& right) const
@@ -217,6 +219,7 @@ void CPVRRecording::Reset()
   m_iEpisode = -1;
   m_iChannelUid = PVR_CHANNEL_INVALID_UID;
   m_bRadio = false;
+  m_iFlags = PVR_RECORDING_FLAG_UNDEFINED;
 
   m_recordingTime.Reset();
   CVideoInfoTag::Reset();
@@ -368,6 +371,7 @@ void CPVRRecording::Update(const CPVRRecording& tag)
   m_iChannelUid = tag.m_iChannelUid;
   m_bRadio = tag.m_bRadio;
   m_firstAired = tag.m_firstAired;
+  m_iFlags = tag.m_iFlags;
 
   CVideoInfoTag::SetPlayCount(tag.GetLocalPlayCount());
   CVideoInfoTag::SetResumePoint(tag.GetLocalResumePoint());
@@ -531,3 +535,23 @@ CDateTime CPVRRecording::FirstAired() const
 {
   return m_firstAired;
 }
+
+bool CPVRRecording::IsNew() const
+{
+  return (m_iFlags & PVR_RECORDING_FLAG_IS_NEW) > 0;
+}
+
+bool CPVRRecording::IsPremiere() const
+{
+  return (m_iFlags & PVR_RECORDING_FLAG_IS_PREMIERE) > 0;
+}
+
+bool CPVRRecording::IsLive() const
+{
+  return (m_iFlags & PVR_RECORDING_FLAG_IS_LIVE) > 0;
+}
+
+bool CPVRRecording::IsFinale() const
+{
+  return (m_iFlags & PVR_RECORDING_FLAG_IS_FINALE) > 0;
+}
diff --git a/xbmc/pvr/recordings/PVRRecording.h b/xbmc/pvr/recordings/PVRRecording.h
index 2354f0636207..599c38fc4536 100644
--- a/xbmc/pvr/recordings/PVRRecording.h
+++ b/xbmc/pvr/recordings/PVRRecording.h
@@ -323,6 +323,36 @@ namespace PVR
     */
    CDateTime FirstAired() const;
 
+   /*!
+    * @brief Check whether this recording will be flagged as new.
+    * @return True if this recording will be flagged as new, false otherwise
+    */
+   bool IsNew() const;
+
+   /*!
+    * @brief Check whether this recording will be flagged as a premiere.
+    * @return True if this recording will be flagged as a premiere, false otherwise
+    */
+   bool IsPremiere() const;
+
+   /*!
+    * @brief Check whether this recording will be flagged as a finale.
+    * @return True if this recording will be flagged as a finale, false otherwise
+    */
+   bool IsFinale() const;
+
+   /*!
+    * @brief Check whether this recording will be flagged as live.
+    * @return True if this recording will be flagged as live, false otherwise
+    */
+   bool IsLive() const;
+
+   /*!
+    * @brief Return the flags (PVR_RECORDING_FLAG_*) of this recording as a bitfield.
+    * @return the flags.
+    */
+   unsigned int Flags() const { return m_iFlags; }
+
   private:
     CDateTime m_recordingTime; /*!< start time of the recording */
     bool m_bGotMetaData;
@@ -333,6 +363,7 @@ namespace PVR
     int m_iGenreType = 0; /*!< genre type */
     int m_iGenreSubType = 0; /*!< genre subtype */
     mutable XbmcThreads::EndTime m_resumePointRefetchTimeout;
+    unsigned int m_iFlags = 0; /*!< the flags applicable to this recording */
 
     void UpdatePath();
   };
