From 2e8f7c3d032fc4fb2cf3df103d4e923e8f408b57 Mon Sep 17 00:00:00 2001
From: Anton Fedchin <anightik@gmail.com>
Date: Mon, 9 Apr 2018 18:10:33 +0300
Subject: [PATCH 1/2] [network] move CNetworkServices to CNetwork as a class
 member.

---
 xbmc/ServiceManager.cpp                          |  10 +-
 xbmc/interfaces/builtins/ProfileBuiltins.cpp     |   2 +-
 xbmc/network/Network.cpp                         |  10 +-
 xbmc/network/Network.h                           |   9 +-
 xbmc/network/NetworkServices.cpp                 | 128 ++++++++++++++---------
 xbmc/network/NetworkServices.h                   |  11 +-
 xbmc/platform/android/network/NetworkAndroid.cpp |   3 +-
 xbmc/platform/android/network/NetworkAndroid.h   |   2 +-
 xbmc/platform/linux/network/NetworkLinux.cpp     |   3 +-
 xbmc/platform/linux/network/NetworkLinux.h       |   2 +-
 xbmc/platform/win10/network/NetworkWin10.cpp     | 115 ++++++++++++++++----
 xbmc/platform/win10/network/NetworkWin10.h       |  15 ++-
 xbmc/platform/win32/network/NetworkWin32.cpp     |  50 ++++-----
 xbmc/platform/win32/network/NetworkWin32.h       |   2 +-
 xbmc/settings/Settings.cpp                       |  30 ------
 15 files changed, 228 insertions(+), 164 deletions(-)

diff --git a/xbmc/ServiceManager.cpp b/xbmc/ServiceManager.cpp
index 6847a6b31750..441ed1891dca 100644
--- a/xbmc/ServiceManager.cpp
+++ b/xbmc/ServiceManager.cpp
@@ -403,15 +403,15 @@ void CServiceManager::delete_favouritesService::operator()(CFavouritesService *p
 CNetwork* CServiceManager::SetupNetwork() const
 {
 #if defined(TARGET_ANDROID)
-  return new CNetworkAndroid();
+  return new CNetworkAndroid(*m_settings);
 #elif defined(HAS_LINUX_NETWORK)
-  return new CNetworkLinux();
+  return new CNetworkLinux(*m_settings);
 #elif defined(HAS_WIN32_NETWORK)
-  return new CNetworkWin32();
+  return new CNetworkWin32(*m_settings);
 #elif defined(HAS_WIN10_NETWORK)
-  return new CNetworkWin10();
+  return new CNetworkWin10(*m_settings);
 #else
-  return new CNetwork();
+  return new CNetwork(*m_settings);
 #endif
 }
 
diff --git a/xbmc/interfaces/builtins/ProfileBuiltins.cpp b/xbmc/interfaces/builtins/ProfileBuiltins.cpp
index b2b8a7339aa4..228d74b6b219 100644
--- a/xbmc/interfaces/builtins/ProfileBuiltins.cpp
+++ b/xbmc/interfaces/builtins/ProfileBuiltins.cpp
@@ -90,7 +90,7 @@ static int LogOff(const std::vector<std::string>& params)
   g_application.WakeUpScreenSaverAndDPMS();
   CServiceBroker::GetGUI()->GetWindowManager().ActivateWindow(WINDOW_LOGIN_SCREEN, {}, false);
 
-  if (!CNetworkServices::GetInstance().StartEventServer()) // event server could be needed in some situations
+  if (!CServiceBroker::GetNetwork().GetServices().StartEventServer()) // event server could be needed in some situations
     CGUIDialogKaiToast::QueueNotification(CGUIDialogKaiToast::Warning, g_localizeStrings.Get(33102), g_localizeStrings.Get(33100));
 
   return 0;
diff --git a/xbmc/network/Network.cpp b/xbmc/network/Network.cpp
index b1284c8fbb17..6c0c50108c9c 100644
--- a/xbmc/network/Network.cpp
+++ b/xbmc/network/Network.cpp
@@ -136,8 +136,8 @@ int NetworkAccessPoint::FreqToChannel(float frequency)
   return 0; // unknown
 }
 
-
-CNetwork::CNetwork()
+CNetwork::CNetwork(CSettings &settings) :
+  m_services(new CNetworkServices(settings))
 {
   CApplicationMessenger::GetInstance().PostMsg(TMSG_NETWORKMESSAGE, SERVICES_UP, 0);
 }
@@ -280,14 +280,14 @@ void CNetwork::NetworkMessage(EMESSAGE message, int param)
   {
     case SERVICES_UP:
       CLog::Log(LOGDEBUG, "%s - Starting network services",__FUNCTION__);
-      CNetworkServices::GetInstance().Start();
+      m_services->Start();
       break;
 
     case SERVICES_DOWN:
       CLog::Log(LOGDEBUG, "%s - Signaling network services to stop",__FUNCTION__);
-      CNetworkServices::GetInstance().Stop(false); // tell network services to stop, but don't wait for them yet
+      m_services->Stop(false); // tell network services to stop, but don't wait for them yet
       CLog::Log(LOGDEBUG, "%s - Waiting for network services to stop",__FUNCTION__);
-      CNetworkServices::GetInstance().Stop(true); // wait for network services to stop
+      m_services->Stop(true); // wait for network services to stop
       break;
   }
 }
diff --git a/xbmc/network/Network.h b/xbmc/network/Network.h
index d970a83cb50f..306a13ea418c 100644
--- a/xbmc/network/Network.h
+++ b/xbmc/network/Network.h
@@ -95,6 +95,9 @@ class CNetworkInterface
    virtual void SetSettings(NetworkAssignment& assignment, std::string& ipAddress, std::string& networkMask, std::string& defaultGateway, std::string& essId, std::string& key, EncMode& encryptionMode) = 0;
 };
 
+class CSettings;
+class CNetworkServices;
+
 class CNetwork
 {
 public:
@@ -104,9 +107,12 @@ class CNetwork
     SERVICES_DOWN
   };
 
-   CNetwork();
+   CNetwork(CSettings &settings);
    virtual ~CNetwork();
 
+   // Get network services
+   CNetworkServices& GetServices() { return *m_services; }
+
    // Return our hostname
    virtual bool GetHostName(std::string& hostname);
 
@@ -150,6 +156,7 @@ class CNetwork
 
    // Waits for the first network interface to become available
    void WaitForNet();
+  std::unique_ptr<CNetworkServices> m_services;
 };
 
 #if defined(TARGET_ANDROID)
diff --git a/xbmc/network/NetworkServices.cpp b/xbmc/network/NetworkServices.cpp
index 8723e5c4e45d..83f629ec3924 100644
--- a/xbmc/network/NetworkServices.cpp
+++ b/xbmc/network/NetworkServices.cpp
@@ -34,6 +34,7 @@
 #include "network/TCPServer.h"
 #include "settings/AdvancedSettings.h"
 #include "settings/lib/Setting.h"
+#include "settings/lib/SettingsManager.h"
 #include "settings/Settings.h"
 #include "utils/log.h"
 #include "utils/RssManager.h"
@@ -87,9 +88,10 @@ using namespace UPNP;
 
 using KODI::MESSAGING::HELPERS::DialogResponse;
 
-CNetworkServices::CNetworkServices()
+CNetworkServices::CNetworkServices(CSettings &settings)
 #ifdef HAS_WEB_SERVER
   :
+  m_settings(settings),
   m_webserver(*new CWebServer),
   m_httpImageHandler(*new CHTTPImageHandler),
   m_httpImageTransformationHandler(*new CHTTPImageTransformationHandler),
@@ -103,7 +105,6 @@ CNetworkServices::CNetworkServices()
   , m_httpWebinterfaceAddonsHandler(*new CHTTPWebinterfaceAddonsHandler)
 #endif // HAS_WEB_INTERFACE
 #endif // HAS_WEB_SERVER
-
 {
 #ifdef HAS_WEB_SERVER
   m_webserver.RegisterRequestHandler(&m_httpImageHandler);
@@ -118,10 +119,39 @@ CNetworkServices::CNetworkServices()
   m_webserver.RegisterRequestHandler(&m_httpWebinterfaceHandler);
 #endif // HAS_WEB_INTERFACE
 #endif // HAS_WEB_SERVER
+  std::set<std::string> settingSet{
+    CSettings::SETTING_SERVICES_WEBSERVER,
+    CSettings::SETTING_SERVICES_WEBSERVERPORT,
+    CSettings::SETTING_SERVICES_WEBSERVERUSERNAME,
+    CSettings::SETTING_SERVICES_WEBSERVERPASSWORD,
+    CSettings::SETTING_SERVICES_WEBSERVERSSL,
+    CSettings::SETTING_SERVICES_ZEROCONF,
+    CSettings::SETTING_SERVICES_AIRPLAY,
+    CSettings::SETTING_SERVICES_AIRPLAYVOLUMECONTROL,
+    CSettings::SETTING_SERVICES_AIRPLAYVIDEOSUPPORT,
+    CSettings::SETTING_SERVICES_USEAIRPLAYPASSWORD,
+    CSettings::SETTING_SERVICES_AIRPLAYPASSWORD,
+    CSettings::SETTING_SERVICES_UPNP,
+    CSettings::SETTING_SERVICES_UPNPSERVER,
+    CSettings::SETTING_SERVICES_UPNPRENDERER,
+    CSettings::SETTING_SERVICES_UPNPCONTROLLER,
+    CSettings::SETTING_SERVICES_ESENABLED,
+    CSettings::SETTING_SERVICES_ESPORT,
+    CSettings::SETTING_SERVICES_ESALLINTERFACES,
+    CSettings::SETTING_SERVICES_ESINITIALDELAY,
+    CSettings::SETTING_SERVICES_ESCONTINUOUSDELAY,
+    CSettings::SETTING_SMB_WINSSERVER,
+    CSettings::SETTING_SMB_WORKGROUP,
+    CSettings::SETTING_SMB_MINPROTOCOL,
+    CSettings::SETTING_SMB_MAXPROTOCOL,
+    CSettings::SETTING_SMB_LEGACYSECURITY
+  };
+  m_settings.GetSettingsManager()->RegisterCallback(this, settingSet);
 }
 
 CNetworkServices::~CNetworkServices()
 {
+  m_settings.GetSettingsManager()->UnregisterCallback(this);
 #ifdef HAS_WEB_SERVER
   m_webserver.UnregisterRequestHandler(&m_httpImageHandler);
   delete &m_httpImageHandler;
@@ -146,12 +176,6 @@ CNetworkServices::~CNetworkServices()
 #endif // HAS_WEB_SERVER
 }
 
-CNetworkServices& CNetworkServices::GetInstance()
-{
-  static CNetworkServices sNetworkServices;
-  return sNetworkServices;
-}
-
 bool CNetworkServices::OnSettingChanging(std::shared_ptr<const CSetting> setting)
 {
   if (setting == NULL)
@@ -166,7 +190,7 @@ bool CNetworkServices::OnSettingChanging(std::shared_ptr<const CSetting> setting
     if (IsWebserverRunning() && !StopWebserver())
       return false;
 
-    if (CServiceBroker::GetSettings().GetBool(CSettings::SETTING_SERVICES_WEBSERVER))
+    if (m_settings.GetBool(CSettings::SETTING_SERVICES_WEBSERVER))
     {
       if (!StartWebserver())
       {
@@ -210,7 +234,7 @@ bool CNetworkServices::OnSettingChanging(std::shared_ptr<const CSetting> setting
     {
 #ifdef HAS_ZEROCONF
       // AirPlay needs zeroconf
-      if (!CServiceBroker::GetSettings().GetBool(CSettings::SETTING_SERVICES_ZEROCONF))
+      if (!m_settings.GetBool(CSettings::SETTING_SERVICES_ZEROCONF))
       {
         HELPERS::ShowOKDialogText(CVariant{1273}, CVariant{34302});
         return false;
@@ -266,11 +290,11 @@ bool CNetworkServices::OnSettingChanging(std::shared_ptr<const CSetting> setting
   else if (settingId == CSettings::SETTING_SERVICES_AIRPLAYPASSWORD ||
            settingId == CSettings::SETTING_SERVICES_USEAIRPLAYPASSWORD)
   {
-    if (!CServiceBroker::GetSettings().GetBool(CSettings::SETTING_SERVICES_AIRPLAY))
+    if (!m_settings.GetBool(CSettings::SETTING_SERVICES_AIRPLAY))
       return false;
 
-    if (!CAirPlayServer::SetCredentials(CServiceBroker::GetSettings().GetBool(CSettings::SETTING_SERVICES_USEAIRPLAYPASSWORD),
-                                        CServiceBroker::GetSettings().GetString(CSettings::SETTING_SERVICES_AIRPLAYPASSWORD)))
+    if (!CAirPlayServer::SetCredentials(m_settings.GetBool(CSettings::SETTING_SERVICES_USEAIRPLAYPASSWORD),
+                                        m_settings.GetString(CSettings::SETTING_SERVICES_AIRPLAYPASSWORD)))
       return false;
   }
   else
@@ -372,7 +396,7 @@ bool CNetworkServices::OnSettingChanging(std::shared_ptr<const CSetting> setting
   }
   else if (settingId == CSettings::SETTING_SERVICES_ESALLINTERFACES)
   {
-    if (CServiceBroker::GetSettings().GetBool(CSettings::SETTING_SERVICES_ESENABLED))
+    if (m_settings.GetBool(CSettings::SETTING_SERVICES_ESENABLED))
     {
       if (!StopEventServer(true, true))
         return false;
@@ -384,7 +408,7 @@ bool CNetworkServices::OnSettingChanging(std::shared_ptr<const CSetting> setting
       }
     }
 
-    if (CServiceBroker::GetSettings().GetBool(CSettings::SETTING_SERVICES_ESENABLED))
+    if (m_settings.GetBool(CSettings::SETTING_SERVICES_ESENABLED))
     {
       if (!StopJSONRPCServer(true))
         return false;
@@ -400,7 +424,7 @@ bool CNetworkServices::OnSettingChanging(std::shared_ptr<const CSetting> setting
   else if (settingId == CSettings::SETTING_SERVICES_ESINITIALDELAY ||
            settingId == CSettings::SETTING_SERVICES_ESCONTINUOUSDELAY)
   {
-    if (CServiceBroker::GetSettings().GetBool(CSettings::SETTING_SERVICES_ESENABLED))
+    if (m_settings.GetBool(CSettings::SETTING_SERVICES_ESENABLED))
       return RefreshEventServer();
   }
 
@@ -417,8 +441,8 @@ void CNetworkServices::OnSettingChanged(std::shared_ptr<const CSetting> setting)
   if (settingId == CSettings::SETTING_SERVICES_WEBSERVERUSERNAME ||
       settingId == CSettings::SETTING_SERVICES_WEBSERVERPASSWORD)
   {
-    m_webserver.SetCredentials(CServiceBroker::GetSettings().GetString(CSettings::SETTING_SERVICES_WEBSERVERUSERNAME),
-                               CServiceBroker::GetSettings().GetString(CSettings::SETTING_SERVICES_WEBSERVERPASSWORD));
+    m_webserver.SetCredentials(m_settings.GetString(CSettings::SETTING_SERVICES_WEBSERVERUSERNAME),
+                               m_settings.GetString(CSettings::SETTING_SERVICES_WEBSERVERPASSWORD));
   }
   else
 #endif // HAS_WEB_SERVER
@@ -432,7 +456,7 @@ void CNetworkServices::OnSettingChanged(std::shared_ptr<const CSetting> setting)
     //! @todo - General way of handling setting changes that require restart
     if (HELPERS::ShowYesNoDialogText(CVariant{14038}, CVariant{14039}) == DialogResponse::YES)
     {
-      CServiceBroker::GetSettings().Save();
+      m_settings.Save();
       CApplicationMessenger::GetInstance().PostMsg(TMSG_RESTARTAPP);
     }
   }
@@ -448,15 +472,15 @@ bool CNetworkServices::OnSettingUpdate(std::shared_ptr<CSetting> setting, const
   {
     // if webserverusername is xbmc and pw is not empty we treat it as altered
     // and don't change the username to kodi - part of rebrand
-    if (CServiceBroker::GetSettings().GetString(CSettings::SETTING_SERVICES_WEBSERVERUSERNAME) == "xbmc" &&
-        !CServiceBroker::GetSettings().GetString(CSettings::SETTING_SERVICES_WEBSERVERPASSWORD).empty())
+    if (m_settings.GetString(CSettings::SETTING_SERVICES_WEBSERVERUSERNAME) == "xbmc" &&
+        !m_settings.GetString(CSettings::SETTING_SERVICES_WEBSERVERPASSWORD).empty())
       return true;
   }
   if (settingId == CSettings::SETTING_SERVICES_WEBSERVERPORT)
   {
     // if webserverport is default but webserver is activated then treat it as altered
     // and don't change the port to new value
-    if (CServiceBroker::GetSettings().GetBool(CSettings::SETTING_SERVICES_WEBSERVER))
+    if (m_settings.GetBool(CSettings::SETTING_SERVICES_WEBSERVER))
       return true;
   }
   return false;
@@ -466,14 +490,14 @@ void CNetworkServices::Start()
 {
   StartZeroconf();
 #ifdef HAS_WEB_SERVER
-  if (CServiceBroker::GetSettings().GetBool(CSettings::SETTING_SERVICES_WEBSERVER) && !StartWebserver())
+  if (m_settings.GetBool(CSettings::SETTING_SERVICES_WEBSERVER) && !StartWebserver())
     CGUIDialogKaiToast::QueueNotification(CGUIDialogKaiToast::Warning, g_localizeStrings.Get(33101), g_localizeStrings.Get(33100));
 #endif // HAS_WEB_SERVER
-  if (CServiceBroker::GetSettings().GetBool(CSettings::SETTING_SERVICES_UPNP))
+  if (m_settings.GetBool(CSettings::SETTING_SERVICES_UPNP))
     StartUPnP();
-  if (CServiceBroker::GetSettings().GetBool(CSettings::SETTING_SERVICES_ESENABLED) && !StartEventServer())
+  if (m_settings.GetBool(CSettings::SETTING_SERVICES_ESENABLED) && !StartEventServer())
     CGUIDialogKaiToast::QueueNotification(CGUIDialogKaiToast::Warning, g_localizeStrings.Get(33102), g_localizeStrings.Get(33100));
-  if (CServiceBroker::GetSettings().GetBool(CSettings::SETTING_SERVICES_ESENABLED) && !StartJSONRPCServer())
+  if (m_settings.GetBool(CSettings::SETTING_SERVICES_ESENABLED) && !StartJSONRPCServer())
     CGUIDialogKaiToast::QueueNotification(CGUIDialogKaiToast::Warning, g_localizeStrings.Get(33103), g_localizeStrings.Get(33100));
   
   // note - airtunesserver has to start before airplay server (ios7 client detection bug)
@@ -504,10 +528,10 @@ bool CNetworkServices::StartWebserver()
   if (!CServiceBroker::GetNetwork().IsAvailable())
     return false;
 
-  if (!CServiceBroker::GetSettings().GetBool(CSettings::SETTING_SERVICES_WEBSERVER))
+  if (!m_settings.GetBool(CSettings::SETTING_SERVICES_WEBSERVER))
     return false;
 
-  int webPort = CServiceBroker::GetSettings().GetInt(CSettings::SETTING_SERVICES_WEBSERVERPORT);
+  int webPort = m_settings.GetInt(CSettings::SETTING_SERVICES_WEBSERVERPORT);
   if (!ValidatePort(webPort))
   {
     CLog::Log(LOGERROR, "Cannot start Web Server on port %i", webPort);
@@ -517,7 +541,7 @@ bool CNetworkServices::StartWebserver()
   if (IsWebserverRunning())
     return true;
 
-  if (!m_webserver.Start(webPort, CServiceBroker::GetSettings().GetString(CSettings::SETTING_SERVICES_WEBSERVERUSERNAME), CServiceBroker::GetSettings().GetString(CSettings::SETTING_SERVICES_WEBSERVERPASSWORD)))
+  if (!m_webserver.Start(webPort, m_settings.GetString(CSettings::SETTING_SERVICES_WEBSERVERUSERNAME), m_settings.GetString(CSettings::SETTING_SERVICES_WEBSERVERPASSWORD)))
     return false;
 
 #ifdef HAS_ZEROCONF
@@ -568,11 +592,11 @@ bool CNetworkServices::StopWebserver()
 
 bool CNetworkServices::StartAirPlayServer()
 {
-  if (!CServiceBroker::GetSettings().GetBool(CSettings::SETTING_SERVICES_AIRPLAYVIDEOSUPPORT))
+  if (!m_settings.GetBool(CSettings::SETTING_SERVICES_AIRPLAYVIDEOSUPPORT))
     return true;
 
 #ifdef HAS_AIRPLAY
-  if (!CServiceBroker::GetNetwork().IsAvailable() || !CServiceBroker::GetSettings().GetBool(CSettings::SETTING_SERVICES_AIRPLAY))
+  if (!CServiceBroker::GetNetwork().IsAvailable() || !m_settings.GetBool(CSettings::SETTING_SERVICES_AIRPLAY))
     return false;
 
   if (IsAirPlayServerRunning())
@@ -581,8 +605,8 @@ bool CNetworkServices::StartAirPlayServer()
   if (!CAirPlayServer::StartServer(g_advancedSettings.m_airPlayPort, true))
     return false;
   
-  if (!CAirPlayServer::SetCredentials(CServiceBroker::GetSettings().GetBool(CSettings::SETTING_SERVICES_USEAIRPLAYPASSWORD),
-                                      CServiceBroker::GetSettings().GetString(CSettings::SETTING_SERVICES_AIRPLAYPASSWORD)))
+  if (!CAirPlayServer::SetCredentials(m_settings.GetBool(CSettings::SETTING_SERVICES_USEAIRPLAYPASSWORD),
+                                      m_settings.GetString(CSettings::SETTING_SERVICES_AIRPLAYPASSWORD)))
     return false;
   
 #ifdef HAS_ZEROCONF
@@ -634,15 +658,15 @@ bool CNetworkServices::StopAirPlayServer(bool bWait)
 bool CNetworkServices::StartAirTunesServer()
 {
 #ifdef HAS_AIRTUNES
-  if (!CServiceBroker::GetNetwork().IsAvailable() || !CServiceBroker::GetSettings().GetBool(CSettings::SETTING_SERVICES_AIRPLAY))
+  if (!CServiceBroker::GetNetwork().IsAvailable() || !m_settings.GetBool(CSettings::SETTING_SERVICES_AIRPLAY))
     return false;
 
   if (IsAirTunesServerRunning())
     return true;
 
   if (!CAirTunesServer::StartServer(g_advancedSettings.m_airTunesPort, true,
-                                    CServiceBroker::GetSettings().GetBool(CSettings::SETTING_SERVICES_USEAIRPLAYPASSWORD),
-                                    CServiceBroker::GetSettings().GetString(CSettings::SETTING_SERVICES_AIRPLAYPASSWORD)))
+                                    m_settings.GetBool(CSettings::SETTING_SERVICES_USEAIRPLAYPASSWORD),
+                                    m_settings.GetString(CSettings::SETTING_SERVICES_AIRPLAYPASSWORD)))
   {
     CLog::Log(LOGERROR, "Failed to start AirTunes Server");
     return false;
@@ -675,13 +699,13 @@ bool CNetworkServices::StopAirTunesServer(bool bWait)
 
 bool CNetworkServices::StartJSONRPCServer()
 {
-  if (!CServiceBroker::GetSettings().GetBool(CSettings::SETTING_SERVICES_ESENABLED))
+  if (!m_settings.GetBool(CSettings::SETTING_SERVICES_ESENABLED))
     return false;
 
   if (IsJSONRPCServerRunning())
     return true;
 
-  if (!CTCPServer::StartServer(g_advancedSettings.m_jsonTcpPort, CServiceBroker::GetSettings().GetBool(CSettings::SETTING_SERVICES_ESALLINTERFACES)))
+  if (!CTCPServer::StartServer(g_advancedSettings.m_jsonTcpPort, m_settings.GetBool(CSettings::SETTING_SERVICES_ESALLINTERFACES)))
     return false;
 
 #ifdef HAS_ZEROCONF
@@ -713,7 +737,7 @@ bool CNetworkServices::StopJSONRPCServer(bool bWait)
 
 bool CNetworkServices::StartEventServer()
 {
-  if (!CServiceBroker::GetSettings().GetBool(CSettings::SETTING_SERVICES_ESENABLED))
+  if (!m_settings.GetBool(CSettings::SETTING_SERVICES_ESENABLED))
     return false;
 
   if (IsEventServerRunning())
@@ -776,7 +800,7 @@ bool CNetworkServices::StopEventServer(bool bWait, bool promptuser)
 
 bool CNetworkServices::RefreshEventServer()
 {
-  if (!CServiceBroker::GetSettings().GetBool(CSettings::SETTING_SERVICES_ESENABLED))
+  if (!m_settings.GetBool(CSettings::SETTING_SERVICES_ESENABLED))
     return false;
 
   if (!IsEventServerRunning())
@@ -791,17 +815,17 @@ bool CNetworkServices::StartUPnP()
   bool ret = false;
 #ifdef HAS_UPNP
   ret |= StartUPnPClient();
-  if (CServiceBroker::GetSettings().GetBool(CSettings::SETTING_SERVICES_UPNPSERVER))
+  if (m_settings.GetBool(CSettings::SETTING_SERVICES_UPNPSERVER))
   {
    ret |= StartUPnPServer();
   }
 
-  if (CServiceBroker::GetSettings().GetBool(CSettings::SETTING_SERVICES_UPNPCONTROLLER))
+  if (m_settings.GetBool(CSettings::SETTING_SERVICES_UPNPCONTROLLER))
   {
     ret |= StartUPnPController();
   }
 
-  if (CServiceBroker::GetSettings().GetBool(CSettings::SETTING_SERVICES_UPNPRENDERER))
+  if (m_settings.GetBool(CSettings::SETTING_SERVICES_UPNPRENDERER))
   {
     ret |= StartUPnPRenderer();
   }
@@ -826,7 +850,7 @@ bool CNetworkServices::StopUPnP(bool bWait)
 bool CNetworkServices::StartUPnPClient()
 {
 #ifdef HAS_UPNP
-  if (!CServiceBroker::GetSettings().GetBool(CSettings::SETTING_SERVICES_UPNP))
+  if (!m_settings.GetBool(CSettings::SETTING_SERVICES_UPNP))
     return false;
 
   CLog::Log(LOGNOTICE, "starting upnp client");
@@ -861,9 +885,9 @@ bool CNetworkServices::StopUPnPClient()
 bool CNetworkServices::StartUPnPController()
 {
 #ifdef HAS_UPNP
-  if (!CServiceBroker::GetSettings().GetBool(CSettings::SETTING_SERVICES_UPNPCONTROLLER) ||
-      !CServiceBroker::GetSettings().GetBool(CSettings::SETTING_SERVICES_UPNPSERVER) ||
-      !CServiceBroker::GetSettings().GetBool(CSettings::SETTING_SERVICES_UPNP))
+  if (!m_settings.GetBool(CSettings::SETTING_SERVICES_UPNPCONTROLLER) ||
+      !m_settings.GetBool(CSettings::SETTING_SERVICES_UPNPSERVER) ||
+      !m_settings.GetBool(CSettings::SETTING_SERVICES_UPNP))
     return false;
 
   CLog::Log(LOGNOTICE, "starting upnp controller");
@@ -898,8 +922,8 @@ bool CNetworkServices::StopUPnPController()
 bool CNetworkServices::StartUPnPRenderer()
 {
 #ifdef HAS_UPNP
-  if (!CServiceBroker::GetSettings().GetBool(CSettings::SETTING_SERVICES_UPNPRENDERER) ||
-      !CServiceBroker::GetSettings().GetBool(CSettings::SETTING_SERVICES_UPNP))
+  if (!m_settings.GetBool(CSettings::SETTING_SERVICES_UPNPRENDERER) ||
+      !m_settings.GetBool(CSettings::SETTING_SERVICES_UPNP))
     return false;
 
   CLog::Log(LOGNOTICE, "starting upnp renderer");
@@ -933,8 +957,8 @@ bool CNetworkServices::StopUPnPRenderer()
 bool CNetworkServices::StartUPnPServer()
 {
 #ifdef HAS_UPNP
-  if (!CServiceBroker::GetSettings().GetBool(CSettings::SETTING_SERVICES_UPNPSERVER) ||
-      !CServiceBroker::GetSettings().GetBool(CSettings::SETTING_SERVICES_UPNP))
+  if (!m_settings.GetBool(CSettings::SETTING_SERVICES_UPNPSERVER) ||
+      !m_settings.GetBool(CSettings::SETTING_SERVICES_UPNP))
     return false;
 
   CLog::Log(LOGNOTICE, "starting upnp server");
@@ -993,7 +1017,7 @@ bool CNetworkServices::StopRss()
 bool CNetworkServices::StartZeroconf()
 {
 #ifdef HAS_ZEROCONF
-  if (!CServiceBroker::GetSettings().GetBool(CSettings::SETTING_SERVICES_ZEROCONF))
+  if (!m_settings.GetBool(CSettings::SETTING_SERVICES_ZEROCONF))
     return false;
 
   if (IsZeroconfRunning())
diff --git a/xbmc/network/NetworkServices.h b/xbmc/network/NetworkServices.h
index 55d06cbde176..305cf3ee2697 100644
--- a/xbmc/network/NetworkServices.h
+++ b/xbmc/network/NetworkServices.h
@@ -21,6 +21,7 @@
 
 #include "settings/lib/ISettingCallback.h"
 
+class CSettings;
 #ifdef HAS_WEB_SERVER
 class CWebServer;
 class CHTTPImageHandler;
@@ -39,7 +40,8 @@ class CHTTPWebinterfaceAddonsHandler;
 class CNetworkServices : public ISettingCallback
 {
 public:
-  static CNetworkServices& GetInstance();
+  CNetworkServices(CSettings &settings);
+  ~CNetworkServices() override;
   
   bool OnSettingChanging(std::shared_ptr<const CSetting> setting) override;
   void OnSettingChanged(std::shared_ptr<const CSetting> setting) override;
@@ -92,15 +94,18 @@ class CNetworkServices : public ISettingCallback
   bool StopZeroconf();
 
 private:
-  CNetworkServices();
   CNetworkServices(const CNetworkServices&);
   CNetworkServices const& operator=(CNetworkServices const&);
-  ~CNetworkServices() override;
 
   bool ValidatePort(int port);
 
+  // Construction parameters
+  CSettings &m_settings;
+
+  // Network services
 #ifdef HAS_WEB_SERVER
   CWebServer& m_webserver;
+  // Handlers
   CHTTPImageHandler& m_httpImageHandler;
   CHTTPImageTransformationHandler& m_httpImageTransformationHandler;
   CHTTPVfsHandler& m_httpVfsHandler;
diff --git a/xbmc/platform/android/network/NetworkAndroid.cpp b/xbmc/platform/android/network/NetworkAndroid.cpp
index d1c503330354..64c678545046 100644
--- a/xbmc/platform/android/network/NetworkAndroid.cpp
+++ b/xbmc/platform/android/network/NetworkAndroid.cpp
@@ -293,7 +293,8 @@ std::string CNetworkInterfaceAndroid::GetHostName()
 
 /*************************/
 
-CNetworkAndroid::CNetworkAndroid()
+CNetworkAndroid::CNetworkAndroid(CSettings &settings)
+ : CNetwork(settings)
 {
   RetrieveInterfaces();
 }
diff --git a/xbmc/platform/android/network/NetworkAndroid.h b/xbmc/platform/android/network/NetworkAndroid.h
index cd9542ae1962..87c5c9075d71 100644
--- a/xbmc/platform/android/network/NetworkAndroid.h
+++ b/xbmc/platform/android/network/NetworkAndroid.h
@@ -68,7 +68,7 @@ class CNetworkAndroid : public CNetwork
   friend class CXBMCApp;
 
 public:
-  CNetworkAndroid();
+  CNetworkAndroid(CSettings &settings);
   ~CNetworkAndroid();
 
   // CNetwork interface
diff --git a/xbmc/platform/linux/network/NetworkLinux.cpp b/xbmc/platform/linux/network/NetworkLinux.cpp
index 13d973f18cbe..6bf6045fb38f 100644
--- a/xbmc/platform/linux/network/NetworkLinux.cpp
+++ b/xbmc/platform/linux/network/NetworkLinux.cpp
@@ -305,7 +305,8 @@ std::string CNetworkInterfaceLinux::GetCurrentDefaultGateway(void)
    return result;
 }
 
-CNetworkLinux::CNetworkLinux(void)
+CNetworkLinux::CNetworkLinux(CSettings &settings)
+ : CNetwork(settings)
 {
    m_sock = socket(AF_INET, SOCK_DGRAM, 0);
    queryInterfaceList();
diff --git a/xbmc/platform/linux/network/NetworkLinux.h b/xbmc/platform/linux/network/NetworkLinux.h
index 031e6f058c50..a636cd3417a9 100644
--- a/xbmc/platform/linux/network/NetworkLinux.h
+++ b/xbmc/platform/linux/network/NetworkLinux.h
@@ -67,7 +67,7 @@ class CNetworkInterfaceLinux : public CNetworkInterface
 class CNetworkLinux : public CNetwork
 {
 public:
-   CNetworkLinux(void);
+   CNetworkLinux(CSettings &settings);
    ~CNetworkLinux(void) override;
 
    // Return the list of interfaces
diff --git a/xbmc/platform/win10/network/NetworkWin10.cpp b/xbmc/platform/win10/network/NetworkWin10.cpp
index ab43eb29515e..2056587fd20b 100644
--- a/xbmc/platform/win10/network/NetworkWin10.cpp
+++ b/xbmc/platform/win10/network/NetworkWin10.cpp
@@ -18,30 +18,31 @@
  *
  */
 
-#include <collection.h>
-#include <errno.h>
+#include "NetworkWin10.h"
 #include "filesystem/SpecialProtocol.h"
-#include <iphlpapi.h>
-#include <string.h>
-#include "PlatformDefs.h"
 #include "platform/win32/WIN32Util.h"
-#include "NetworkWin10.h"
-#include "utils/log.h"
+#include "platform/win32/CharsetConverter.h"
+#include "settings/Settings.h"
 #include "threads/SingleLock.h"
-#include "utils/CharsetConverter.h"
+#include "utils/log.h"
 #include "utils/StringUtils.h"
-#include "utils/CharsetConverter.h"
 
-#pragma pack(push, 8)
+#include <collection.h>
+#include <errno.h>
+#include <iphlpapi.h>
+#include <string.h>
+#include <Ws2tcpip.h>
+#include <ws2ipdef.h>
 
 using namespace Windows::Networking;
 using namespace Windows::Networking::Connectivity;
+using namespace KODI::PLATFORM::WINDOWS;
 
 CNetworkInterfaceWin10::CNetworkInterfaceWin10(CNetworkWin10* network, Windows::Networking::Connectivity::ConnectionProfile^ profile)
 {
   m_network = network;
   m_adapter = profile;
-  g_charsetConverter.wToUTF8(std::wstring(profile->ProfileName->Data()), m_adaptername, false);
+  m_adaptername = FromW(profile->ProfileName->Data());
 }
 
 CNetworkInterfaceWin10::~CNetworkInterfaceWin10(void)
@@ -126,14 +127,44 @@ std::string CNetworkInterfaceWin10::GetCurrentIPAddress(void)
     }
   }
 
-  g_charsetConverter.wToUTF8(std::wstring(ipAddress->Data()), result, false);
+  result = FromW(ipAddress->Data());
 
   return result;
 }
 
 std::string CNetworkInterfaceWin10::GetCurrentNetmask(void)
 {
-  return "";
+  std::string result = "255.255.255.255";
+
+  if (m_adapter->NetworkAdapter != nullptr)
+  {
+    auto  hostnames = NetworkInformation::GetHostNames();
+    for (unsigned int i = 0; i < hostnames->Size; ++i)
+    {
+      auto hostname = hostnames->GetAt(i);
+      if (hostname->Type != HostNameType::Ipv4)
+      {
+        continue;
+      }
+
+      if (hostname->IPInformation != nullptr && hostname->IPInformation->NetworkAdapter != nullptr)
+      {
+        if (hostname->IPInformation->NetworkAdapter->NetworkAdapterId == m_adapter->NetworkAdapter->NetworkAdapterId)
+        {
+          byte prefixLength = hostname->IPInformation->PrefixLength->Value;
+          uint32_t mask = 0xFFFFFFFF << (32 - prefixLength);
+          result = StringUtils::Format("%u.%u.%u.%u"
+                                     , ((mask & 0xFF000000) >> 24)
+                                     , ((mask & 0x00FF0000) >> 16)
+                                     , ((mask & 0x0000FF00) >> 8)
+                                     ,  (mask & 0x000000FF));
+          break;
+        }
+      }
+    }
+  }
+
+  return result;
 }
 
 std::string CNetworkInterfaceWin10::GetCurrentWirelessEssId(void)
@@ -142,8 +173,8 @@ std::string CNetworkInterfaceWin10::GetCurrentWirelessEssId(void)
   if (!IsWireless())
     return result;
 
-  auto ssid = m_adapter->WlanConnectionProfileDetails->GetConnectedSsid();
-  g_charsetConverter.wToUTF8(std::wstring(ssid->Data()), result, false);
+  result = FromW(m_adapter->WlanConnectionProfileDetails->GetConnectedSsid()->Data());
+
   return result;
 }
 
@@ -152,12 +183,13 @@ std::string CNetworkInterfaceWin10::GetCurrentDefaultGateway(void)
   return "";
 }
 
-CNetworkWin10::CNetworkWin10(void)
+CNetworkWin10::CNetworkWin10(CSettings &settings)
+  : CNetwork(settings)
 {
   queryInterfaceList();
   NetworkInformation::NetworkStatusChanged += ref new NetworkStatusChangedEventHandler([this](Platform::Object^) {
-	  CSingleLock lock(m_critSection);
-	  queryInterfaceList();
+    CSingleLock lock(m_critSection);
+    queryInterfaceList();
   });
 }
 
@@ -199,7 +231,50 @@ void CNetworkWin10::queryInterfaceList()
 
 std::vector<std::string> CNetworkWin10::GetNameServers(void)
 {
-  return std::vector<std::string>();
+  std::vector<std::string> result;
+
+  const ULONG flags = GAA_FLAG_SKIP_UNICAST | GAA_FLAG_SKIP_ANYCAST | GAA_FLAG_SKIP_MULTICAST | GAA_FLAG_SKIP_FRIENDLY_NAME;
+  ULONG ulOutBufLen;
+
+  if (GetAdaptersAddresses(AF_UNSPEC, flags, nullptr, nullptr, &ulOutBufLen) != ERROR_BUFFER_OVERFLOW)
+    return result;
+
+  PIP_ADAPTER_ADDRESSES adapterAddresses = static_cast<PIP_ADAPTER_ADDRESSES>(malloc(ulOutBufLen));
+  if (adapterAddresses == nullptr)
+    return result;
+
+  if (GetAdaptersAddresses(AF_UNSPEC, flags, nullptr, adapterAddresses, &ulOutBufLen) == NO_ERROR)
+  {
+    for (PIP_ADAPTER_ADDRESSES adapter = adapterAddresses; adapter; adapter = adapter->Next)
+    {
+      if (adapter->IfType == IF_TYPE_SOFTWARE_LOOPBACK || adapter->OperStatus != IF_OPER_STATUS::IfOperStatusUp)
+        continue;
+      for (PIP_ADAPTER_DNS_SERVER_ADDRESS dnsAddress = adapter->FirstDnsServerAddress; dnsAddress; dnsAddress = dnsAddress->Next)
+      {
+        std::string strIp = "";
+
+        char buffer[INET6_ADDRSTRLEN] = { 0 };
+        struct sockaddr* sa = dnsAddress->Address.lpSockaddr;
+        switch (sa->sa_family)
+        {
+        case AF_INET:
+          inet_ntop(AF_INET, &(reinterpret_cast<const struct sockaddr_in*>(sa)->sin_addr), buffer, INET_ADDRSTRLEN);
+          break;
+        case AF_INET6:
+          inet_ntop(AF_INET6, &(reinterpret_cast<const struct sockaddr_in6*>(sa)->sin6_addr), buffer, INET6_ADDRSTRLEN);
+          break;
+        }
+
+        strIp = buffer;
+
+        if (!strIp.empty())
+          result.push_back(strIp);
+      }
+    }
+  }
+  free(adapterAddresses);
+
+  return result;
 }
 
 void CNetworkWin10::SetNameServers(const std::vector<std::string>& nameServers)
@@ -211,5 +286,3 @@ bool CNetworkWin10::PingHost(unsigned long host, unsigned int timeout_ms /* = 20
 {
   return false;
 }
-
-#pragma pack(pop)
diff --git a/xbmc/platform/win10/network/NetworkWin10.h b/xbmc/platform/win10/network/NetworkWin10.h
index 821c60c068a2..3fb034b32cf7 100644
--- a/xbmc/platform/win10/network/NetworkWin10.h
+++ b/xbmc/platform/win10/network/NetworkWin10.h
@@ -17,16 +17,15 @@
  *  <http://www.gnu.org/licenses/>.
  *
  */
-#ifndef NETWORK_WIN10_H_
-#define NETWORK_WIN10_H_
- 
-#include <string>
-#include <vector>
+#pragma once
+
 #include "network/Network.h"
-#include "Iphlpapi.h"
 #include "utils/stopwatch.h"
 #include "threads/CriticalSection.h"
 
+#include <string>
+#include <vector>
+
 class CNetworkWin10;
 
 
@@ -59,7 +58,6 @@ class CNetworkInterfaceWin10 : public CNetworkInterface
   virtual std::vector<NetworkAccessPoint> GetAccessPoints(void);
 
 private:
-  void WriteSettings(FILE* fw, NetworkAssignment assignment, std::string& ipAddress, std::string& networkMask, std::string& defaultGateway, std::string& essId, std::string& key, EncMode& encryptionMode);
   CNetworkWin10* m_network;
   std::string m_adaptername;
   Windows::Networking::Connectivity::ConnectionProfile^ m_adapter;
@@ -69,7 +67,7 @@ class CNetworkInterfaceWin10 : public CNetworkInterface
 class CNetworkWin10 : public CNetwork
 {
 public:
-    CNetworkWin10(void);
+    CNetworkWin10(CSettings &settings);
     virtual ~CNetworkWin10(void);
 
     // Return the list of interfaces
@@ -93,4 +91,3 @@ class CNetworkWin10 : public CNetwork
     CStopWatch m_netrefreshTimer;
     CCriticalSection m_critSection;
 };
-#endif
diff --git a/xbmc/platform/win32/network/NetworkWin32.cpp b/xbmc/platform/win32/network/NetworkWin32.cpp
index 2f020a324b6b..3d1f25ebb397 100644
--- a/xbmc/platform/win32/network/NetworkWin32.cpp
+++ b/xbmc/platform/win32/network/NetworkWin32.cpp
@@ -18,37 +18,33 @@
  *
  */
 
-#include <errno.h>
-#include <iphlpapi.h>
-#include <IcmpAPI.h>
 #include "PlatformDefs.h"
 #include "NetworkWin32.h"
+#include "platform/win32/CharsetConverter.h"
+#include "platform/win32/WIN32Util.h"
 #include "utils/log.h"
 #include "threads/SingleLock.h"
 #include "utils/CharsetConverter.h"
 #include "utils/StringUtils.h"
-#include "platform/win32/WIN32Util.h"
 
+#include <errno.h>
+#include <iphlpapi.h>
+#include <IcmpAPI.h>
 #include <netinet/in.h>
 #include <Mstcpip.h>
+#include <Wlanapi.h>
 
 #pragma comment(lib, "Ntdll.lib")
-
-// undefine if you want to build without the wlan stuff
-// might be needed for VS2003
-#define HAS_WIN32_WLAN_API
-
-#ifdef HAS_WIN32_WLAN_API
-#include "Wlanapi.h"
 #pragma comment (lib,"Wlanapi.lib")
-#endif
 
+using namespace KODI::PLATFORM::WINDOWS;
 
 CNetworkInterfaceWin32::CNetworkInterfaceWin32(CNetworkWin32* network, const IP_ADAPTER_INFO& adapter) :
    m_adaptername(adapter.Description)
 {
-   m_network = network;
-   m_adapter = adapter;
+  m_network = network;
+  m_adapter = adapter;
+  g_charsetConverter.unknownToUTF8(m_adaptername);
 }
 
 CNetworkInterfaceWin32::~CNetworkInterfaceWin32(void)
@@ -57,7 +53,6 @@ CNetworkInterfaceWin32::~CNetworkInterfaceWin32(void)
 
 std::string& CNetworkInterfaceWin32::GetName(void)
 {
-  g_charsetConverter.unknownToUTF8(m_adaptername);
   return m_adaptername;
 }
 
@@ -103,8 +98,6 @@ std::string CNetworkInterfaceWin32::GetCurrentNetmask(void)
 std::string CNetworkInterfaceWin32::GetCurrentWirelessEssId(void)
 {
   std::string result = "";
-
-#ifdef HAS_WIN32_WLAN_API
   if(IsWireless())
   {
     HANDLE hClientHdl = NULL;
@@ -124,9 +117,8 @@ std::string CNetworkInterfaceWin32::GetCurrentWirelessEssId(void)
           WCHAR wcguid[64];
           StringFromGUID2(guid, (LPOLESTR)&wcguid, 64);
           std::wstring strGuid = wcguid;
-          std::wstring strAdaptername;
-          g_charsetConverter.utf8ToW(m_adapter.AdapterName, strAdaptername);
-          if( strGuid == strAdaptername)
+          std::wstring strAdaptername = ToW(m_adapter.AdapterName);
+          if (strGuid == strAdaptername)
           {
             if(WlanQueryInterface(hClientHdl,&ppInterfaceList->InterfaceInfo[i].InterfaceGuid,wlan_intf_opcode_current_connection, NULL, &dwSize, (PVOID*)&pAttributes, NULL ) == ERROR_SUCCESS)
             {
@@ -143,7 +135,7 @@ std::string CNetworkInterfaceWin32::GetCurrentWirelessEssId(void)
     else
       CLog::Log(LOGERROR, "%s: Can't open wlan handle", __FUNCTION__);
   }
-#endif
+
   return result;
 }
 
@@ -152,7 +144,8 @@ std::string CNetworkInterfaceWin32::GetCurrentDefaultGateway(void)
   return m_adapter.GatewayList.IpAddress.String;
 }
 
-CNetworkWin32::CNetworkWin32(void)
+CNetworkWin32::CNetworkWin32(CSettings &settings)
+ : CNetwork(settings)
 {
   queryInterfaceList();
 }
@@ -333,7 +326,6 @@ bool CNetworkInterfaceWin32::GetHostMacAddress(unsigned long host, std::string&
 std::vector<NetworkAccessPoint> CNetworkInterfaceWin32::GetAccessPoints(void)
 {
    std::vector<NetworkAccessPoint> result;
-#ifdef HAS_WIN32_WLAN_API
   if (!IsWireless())
     return result;
 
@@ -370,8 +362,7 @@ std::vector<NetworkAccessPoint> CNetworkInterfaceWin32::GetAccessPoints(void)
     WCHAR wcguid[64];
     StringFromGUID2(guid, (LPOLESTR)&wcguid, 64);
     std::wstring strGuid = wcguid;
-    std::wstring strAdaptername;
-    g_charsetConverter.utf8ToW(m_adapter.AdapterName, strAdaptername);
+    std::wstring strAdaptername = ToW(m_adapter.AdapterName);
     if (strGuid == strAdaptername)
     {
       WLAN_BSS_LIST *bss_list;
@@ -410,8 +401,6 @@ std::vector<NetworkAccessPoint> CNetworkInterfaceWin32::GetAccessPoints(void)
   // Close the handle
   WlanCloseHandle(wlan_handle, NULL);
 
-#endif
-
   return result;
 }
 
@@ -464,7 +453,6 @@ void CNetworkInterfaceWin32::GetSettings(NetworkAssignment& assignment, std::str
   }
   free(adapterInfo);
 
-#ifdef HAS_WIN32_WLAN_API
   if(IsWireless())
   {
     HANDLE hClientHdl = NULL;
@@ -484,9 +472,8 @@ void CNetworkInterfaceWin32::GetSettings(NetworkAssignment& assignment, std::str
           WCHAR wcguid[64];
           StringFromGUID2(guid, (LPOLESTR)&wcguid, 64);
           std::wstring strGuid = wcguid;
-          std::wstring strAdaptername;
-          g_charsetConverter.utf8ToW(m_adapter.AdapterName, strAdaptername);
-          if( strGuid == strAdaptername)
+          std::wstring strAdaptername = ToW(m_adapter.AdapterName);
+          if (strGuid == strAdaptername)
           {
             if(WlanQueryInterface(hClientHdl,&ppInterfaceList->InterfaceInfo[i].InterfaceGuid,wlan_intf_opcode_current_connection, NULL, &dwSize, (PVOID*)&pAttributes, NULL ) == ERROR_SUCCESS)
             {
@@ -520,7 +507,6 @@ void CNetworkInterfaceWin32::GetSettings(NetworkAssignment& assignment, std::str
       CLog::Log(LOGERROR, "%s: Can't open wlan handle", __FUNCTION__);
   }
   //! @todo get the key (WlanGetProfile, CryptUnprotectData?)
-#endif
 }
 
 void CNetworkInterfaceWin32::SetSettings(NetworkAssignment& assignment, std::string& ipAddress, std::string& networkMask, std::string& defaultGateway, std::string& essId, std::string& key, EncMode& encryptionMode)
diff --git a/xbmc/platform/win32/network/NetworkWin32.h b/xbmc/platform/win32/network/NetworkWin32.h
index c5a58d2c2fcf..1eacdab3071e 100644
--- a/xbmc/platform/win32/network/NetworkWin32.h
+++ b/xbmc/platform/win32/network/NetworkWin32.h
@@ -67,7 +67,7 @@ class CNetworkInterfaceWin32 : public CNetworkInterface
 class CNetworkWin32 : public CNetwork
 {
 public:
-   CNetworkWin32(void);
+   CNetworkWin32(CSettings &settings);
    virtual ~CNetworkWin32(void);
 
    // Return the list of interfaces
diff --git a/xbmc/settings/Settings.cpp b/xbmc/settings/Settings.cpp
index 83f43da3569c..64ea7bdd99a0 100644
--- a/xbmc/settings/Settings.cpp
+++ b/xbmc/settings/Settings.cpp
@@ -808,7 +808,6 @@ void CSettings::UninitializeISettingsHandlers()
   GetSettingsManager()->UnregisterCallback(&g_audioManager);
   GetSettingsManager()->UnregisterCallback(&g_charsetConverter);
   GetSettingsManager()->UnregisterCallback(&g_langInfo);
-  GetSettingsManager()->UnregisterCallback(&CNetworkServices::GetInstance());
   GetSettingsManager()->UnregisterCallback(&g_passwordManager);
   GetSettingsManager()->UnregisterCallback(&CRssManager::GetInstance());
 #if defined(TARGET_LINUX)
@@ -931,34 +930,6 @@ void CSettings::InitializeISettingCallbacks()
   settingSet.insert(CSettings::SETTING_LOCALE_SPEEDUNIT);
   GetSettingsManager()->RegisterCallback(&g_langInfo, settingSet);
 
-  settingSet.clear();
-  settingSet.insert(CSettings::SETTING_SERVICES_WEBSERVER);
-  settingSet.insert(CSettings::SETTING_SERVICES_WEBSERVERPORT);
-  settingSet.insert(CSettings::SETTING_SERVICES_WEBSERVERUSERNAME);
-  settingSet.insert(CSettings::SETTING_SERVICES_WEBSERVERPASSWORD);
-  settingSet.insert(CSettings::SETTING_SERVICES_WEBSERVERSSL);
-  settingSet.insert(CSettings::SETTING_SERVICES_ZEROCONF);
-  settingSet.insert(CSettings::SETTING_SERVICES_AIRPLAY);
-  settingSet.insert(CSettings::SETTING_SERVICES_AIRPLAYVOLUMECONTROL);
-  settingSet.insert(CSettings::SETTING_SERVICES_AIRPLAYVIDEOSUPPORT);
-  settingSet.insert(CSettings::SETTING_SERVICES_USEAIRPLAYPASSWORD);
-  settingSet.insert(CSettings::SETTING_SERVICES_AIRPLAYPASSWORD);
-  settingSet.insert(CSettings::SETTING_SERVICES_UPNP);
-  settingSet.insert(CSettings::SETTING_SERVICES_UPNPSERVER);
-  settingSet.insert(CSettings::SETTING_SERVICES_UPNPRENDERER);
-  settingSet.insert(CSettings::SETTING_SERVICES_UPNPCONTROLLER);
-  settingSet.insert(CSettings::SETTING_SERVICES_ESENABLED);
-  settingSet.insert(CSettings::SETTING_SERVICES_ESPORT);
-  settingSet.insert(CSettings::SETTING_SERVICES_ESALLINTERFACES);
-  settingSet.insert(CSettings::SETTING_SERVICES_ESINITIALDELAY);
-  settingSet.insert(CSettings::SETTING_SERVICES_ESCONTINUOUSDELAY);
-  settingSet.insert(CSettings::SETTING_SMB_WINSSERVER);
-  settingSet.insert(CSettings::SETTING_SMB_WORKGROUP);
-  settingSet.insert(CSettings::SETTING_SMB_MINPROTOCOL);
-  settingSet.insert(CSettings::SETTING_SMB_MAXPROTOCOL);
-  settingSet.insert(CSettings::SETTING_SMB_LEGACYSECURITY);
-  GetSettingsManager()->RegisterCallback(&CNetworkServices::GetInstance(), settingSet);
-
   settingSet.clear();
   settingSet.insert(CSettings::SETTING_MASTERLOCK_LOCKCODE);
   GetSettingsManager()->RegisterCallback(&g_passwordManager, settingSet);
@@ -1008,7 +979,6 @@ void CSettings::UninitializeISettingCallbacks()
   GetSettingsManager()->UnregisterCallback(&g_audioManager);
   GetSettingsManager()->UnregisterCallback(&g_charsetConverter);
   GetSettingsManager()->UnregisterCallback(&g_langInfo);
-  GetSettingsManager()->UnregisterCallback(&CNetworkServices::GetInstance());
   GetSettingsManager()->UnregisterCallback(&g_passwordManager);
   GetSettingsManager()->UnregisterCallback(&CRssManager::GetInstance());
 #if defined(TARGET_LINUX)

From 594d81c79bc3c8b95222d9d73114b9b9f7e341b8 Mon Sep 17 00:00:00 2001
From: notspiff <spiff@kodi.tv>
Date: Fri, 6 Apr 2018 15:00:00 +0200
Subject: [PATCH 2/2] changed: rename CNetwork to CNetworkBase

and add typedefs to CNetwork for specific platforms.
in preparation for rtti'ing the service
---
 cmake/treedata/android/subdirs.txt               |  1 -
 xbmc/ServiceBroker.cpp                           |  2 +-
 xbmc/ServiceBroker.h                             |  4 ++--
 xbmc/ServiceManager.cpp                          | 21 +++---------------
 xbmc/ServiceManager.h                            |  9 +++-----
 xbmc/network/Network.cpp                         | 28 ++++++++++++------------
 xbmc/network/Network.h                           |  8 ++++---
 xbmc/platform/android/activity/XBMCApp.cpp       |  2 +-
 xbmc/platform/android/network/NetworkAndroid.cpp |  2 +-
 xbmc/platform/android/network/NetworkAndroid.h   |  4 +++-
 xbmc/platform/linux/network/NetworkLinux.cpp     |  8 +++----
 xbmc/platform/linux/network/NetworkLinux.h       |  4 +++-
 xbmc/platform/win10/network/NetworkWin10.cpp     |  2 +-
 xbmc/platform/win10/network/NetworkWin10.h       |  6 ++++-
 xbmc/platform/win32/network/NetworkWin32.cpp     |  2 +-
 xbmc/platform/win32/network/NetworkWin32.h       |  5 ++++-
 16 files changed, 51 insertions(+), 57 deletions(-)

diff --git a/cmake/treedata/android/subdirs.txt b/cmake/treedata/android/subdirs.txt
index 7f7fef53e728..a3de758fef00 100644
--- a/cmake/treedata/android/subdirs.txt
+++ b/cmake/treedata/android/subdirs.txt
@@ -6,7 +6,6 @@ xbmc/platform/posix                     platform/posix
 xbmc/platform/posix/filesystem          platform/posix/filesystem
 xbmc/platform/posix/utils               platform/posix/utils
 xbmc/platform/linux                     platform/linux
-xbmc/platform/linux/network             platform/linux/network
 xbmc/platform/linux/peripherals         platform/linux/peripherals
 xbmc/platform/android/activity          platform/android/activity
 xbmc/platform/android/bionic_supplement platform/android/bionicsupplement
diff --git a/xbmc/ServiceBroker.cpp b/xbmc/ServiceBroker.cpp
index f9a2eef3fd69..6bd615dc4455 100644
--- a/xbmc/ServiceBroker.cpp
+++ b/xbmc/ServiceBroker.cpp
@@ -126,7 +126,7 @@ CFileExtensionProvider& CServiceBroker::GetFileExtensionProvider()
   return g_application.m_ServiceManager->GetFileExtensionProvider();
 }
 
-CNetwork& CServiceBroker::GetNetwork()
+CNetworkBase& CServiceBroker::GetNetwork()
 {
   return g_application.m_ServiceManager->GetNetwork();
 }
diff --git a/xbmc/ServiceBroker.h b/xbmc/ServiceBroker.h
index 323d76ec0676..f83f44e97f00 100644
--- a/xbmc/ServiceBroker.h
+++ b/xbmc/ServiceBroker.h
@@ -52,7 +52,7 @@ class IAE;
 class CFavouritesService;
 class CInputManager;
 class CFileExtensionProvider;
-class CNetwork;
+class CNetworkBase;
 class CWinSystemBase;
 class CRenderSystemBase;
 class CPowerManager;
@@ -107,7 +107,7 @@ class CServiceBroker
   static CFileExtensionProvider &GetFileExtensionProvider();
   static bool IsBinaryAddonCacheUp();
   static bool IsServiceManagerUp();
-  static CNetwork& GetNetwork();
+  static CNetworkBase& GetNetwork();
   static CPowerManager& GetPowerManager();
   static CWeatherManager& GetWeatherManager();
   static CPlayerCoreFactory &GetPlayerCoreFactory();
diff --git a/xbmc/ServiceManager.cpp b/xbmc/ServiceManager.cpp
index 441ed1891dca..bec2eca86457 100644
--- a/xbmc/ServiceManager.cpp
+++ b/xbmc/ServiceManager.cpp
@@ -65,7 +65,7 @@ CServiceManager::~CServiceManager()
 bool CServiceManager::InitForTesting()
 {
   m_settings.reset(new CSettings());
-  m_network.reset(SetupNetwork());
+  m_network.reset(new CNetwork(*m_settings));
 
   m_profileManager.reset(new CProfilesManager(*m_settings));
 
@@ -117,7 +117,7 @@ bool CServiceManager::InitStageOne()
   m_playlistPlayer.reset(new PLAYLIST::CPlayListPlayer());
 
   m_settings.reset(new CSettings());
-  m_network.reset(SetupNetwork());
+  m_network.reset(new CNetwork(*m_settings));
 
   init_level = 1;
   return true;
@@ -400,22 +400,7 @@ void CServiceManager::delete_favouritesService::operator()(CFavouritesService *p
   delete p;
 }
 
-CNetwork* CServiceManager::SetupNetwork() const
-{
-#if defined(TARGET_ANDROID)
-  return new CNetworkAndroid(*m_settings);
-#elif defined(HAS_LINUX_NETWORK)
-  return new CNetworkLinux(*m_settings);
-#elif defined(HAS_WIN32_NETWORK)
-  return new CNetworkWin32(*m_settings);
-#elif defined(HAS_WIN10_NETWORK)
-  return new CNetworkWin10(*m_settings);
-#else
-  return new CNetwork(*m_settings);
-#endif
-}
-
-CNetwork& CServiceManager::GetNetwork()
+CNetworkBase& CServiceManager::GetNetwork()
 {
   return *m_network;
 }
diff --git a/xbmc/ServiceManager.h b/xbmc/ServiceManager.h
index c7ec81b399be..8bf8ad9478e8 100644
--- a/xbmc/ServiceManager.h
+++ b/xbmc/ServiceManager.h
@@ -56,7 +56,7 @@ class XBPython;
 class CDataCacheCore;
 class CSettings;
 class CFavouritesService;
-class CNetwork;
+class CNetworkBase;
 class CWinSystemBase;
 class CPowerManager;
 class CWeatherManager;
@@ -110,7 +110,7 @@ class CServiceManager
   ADDON::CServiceAddonManager& GetServiceAddons();
   ADDON::CRepositoryUpdater& GetRepositoryUpdater();
   ANNOUNCEMENT::CAnnouncementManager& GetAnnouncementManager();
-  CNetwork& GetNetwork();
+  CNetworkBase& GetNetwork();
 #ifdef HAS_PYTHON
   XBPython& GetXBPython();
 #endif
@@ -161,9 +161,6 @@ class CServiceManager
     void operator()(CFavouritesService *p) const;
   };
 
-  //! \brief Initialize appropriate networking instance.
-  CNetwork* SetupNetwork() const;
-
   std::unique_ptr<ADDON::CAddonMgr> m_addonMgr;
   std::unique_ptr<ADDON::CBinaryAddonManager> m_binaryAddonManager;
   std::unique_ptr<ADDON::CBinaryAddonCache> m_binaryAddonCache;
@@ -187,7 +184,7 @@ class CServiceManager
   std::unique_ptr<CFavouritesService, delete_favouritesService> m_favouritesService;
   std::unique_ptr<CInputManager> m_inputManager;
   std::unique_ptr<CFileExtensionProvider> m_fileExtensionProvider;
-  std::unique_ptr<CNetwork> m_network;
+  std::unique_ptr<CNetworkBase> m_network;
   std::unique_ptr<CPowerManager> m_powerManager;
   std::unique_ptr<CWeatherManager> m_weatherManager;
   std::unique_ptr<CPlayerCoreFactory> m_playerCoreFactory;
diff --git a/xbmc/network/Network.cpp b/xbmc/network/Network.cpp
index 6c0c50108c9c..2aba990e1c0e 100644
--- a/xbmc/network/Network.cpp
+++ b/xbmc/network/Network.cpp
@@ -136,18 +136,18 @@ int NetworkAccessPoint::FreqToChannel(float frequency)
   return 0; // unknown
 }
 
-CNetwork::CNetwork(CSettings &settings) :
+CNetworkBase::CNetworkBase(CSettings &settings) :
   m_services(new CNetworkServices(settings))
 {
   CApplicationMessenger::GetInstance().PostMsg(TMSG_NETWORKMESSAGE, SERVICES_UP, 0);
 }
 
-CNetwork::~CNetwork()
+CNetworkBase::~CNetworkBase()
 {
   CApplicationMessenger::GetInstance().PostMsg(TMSG_NETWORKMESSAGE, SERVICES_DOWN, 0);
 }
 
-int CNetwork::ParseHex(char *str, unsigned char *addr)
+int CNetworkBase::ParseHex(char *str, unsigned char *addr)
 {
    int len = 0;
 
@@ -166,7 +166,7 @@ int CNetwork::ParseHex(char *str, unsigned char *addr)
    return len;
 }
 
-bool CNetwork::GetHostName(std::string& hostname)
+bool CNetworkBase::GetHostName(std::string& hostname)
 {
   char hostName[128];
   if (gethostname(hostName, sizeof(hostName)))
@@ -182,7 +182,7 @@ bool CNetwork::GetHostName(std::string& hostname)
   return true;
 }
 
-bool CNetwork::IsLocalHost(const std::string& hostname)
+bool CNetworkBase::IsLocalHost(const std::string& hostname)
 {
   if (hostname.empty())
     return false;
@@ -211,7 +211,7 @@ bool CNetwork::IsLocalHost(const std::string& hostname)
   return false;
 }
 
-CNetworkInterface* CNetwork::GetFirstConnectedInterface()
+CNetworkInterface* CNetworkBase::GetFirstConnectedInterface()
 {
    std::vector<CNetworkInterface*>& ifaces = GetInterfaceList();
    std::vector<CNetworkInterface*>::const_iterator iter = ifaces.begin();
@@ -226,7 +226,7 @@ CNetworkInterface* CNetwork::GetFirstConnectedInterface()
    return NULL;
 }
 
-bool CNetwork::HasInterfaceForIP(unsigned long address)
+bool CNetworkBase::HasInterfaceForIP(unsigned long address)
 {
    unsigned long subnet;
    unsigned long local;
@@ -248,18 +248,18 @@ bool CNetwork::HasInterfaceForIP(unsigned long address)
    return false;
 }
 
-bool CNetwork::IsAvailable(void)
+bool CNetworkBase::IsAvailable(void)
 {
   std::vector<CNetworkInterface*>& ifaces = GetInterfaceList();
   return (ifaces.size() != 0);
 }
 
-bool CNetwork::IsConnected()
+bool CNetworkBase::IsConnected()
 {
    return GetFirstConnectedInterface() != NULL;
 }
 
-CNetworkInterface* CNetwork::GetInterfaceByName(const std::string& name)
+CNetworkInterface* CNetworkBase::GetInterfaceByName(const std::string& name)
 {
    std::vector<CNetworkInterface*>& ifaces = GetInterfaceList();
    std::vector<CNetworkInterface*>::const_iterator iter = ifaces.begin();
@@ -274,7 +274,7 @@ CNetworkInterface* CNetwork::GetInterfaceByName(const std::string& name)
    return NULL;
 }
 
-void CNetwork::NetworkMessage(EMESSAGE message, int param)
+void CNetworkBase::NetworkMessage(EMESSAGE message, int param)
 {
   switch( message )
   {
@@ -292,7 +292,7 @@ void CNetwork::NetworkMessage(EMESSAGE message, int param)
   }
 }
 
-bool CNetwork::WakeOnLan(const char* mac)
+bool CNetworkBase::WakeOnLan(const char* mac)
 {
   int i, j, packet;
   unsigned char ethaddr[8];
@@ -427,7 +427,7 @@ static const char* ConnectHostPort(SOCKET soc, const struct sockaddr_in& addr, s
   return 0; // success
 }
 
-bool CNetwork::PingHost(unsigned long ipaddr, unsigned short port, unsigned int timeOutMs, bool readability_check)
+bool CNetworkBase::PingHost(unsigned long ipaddr, unsigned short port, unsigned int timeOutMs, bool readability_check)
 {
   if (port == 0) // use icmp ping
     return PingHost (ipaddr, timeOutMs);
@@ -554,7 +554,7 @@ int CreateTCPServerSocket(const int port, const bool bindLocal, const int backlo
   return sock;
 }
 
-void CNetwork::WaitForNet()
+void CNetworkBase::WaitForNet()
 {
   const int timeout = CServiceBroker::GetSettings().GetInt(CSettings::SETTING_POWERMANAGEMENT_WAITFORNETWORK);
   if (timeout <= 0)
diff --git a/xbmc/network/Network.h b/xbmc/network/Network.h
index 306a13ea418c..03a5c513c57a 100644
--- a/xbmc/network/Network.h
+++ b/xbmc/network/Network.h
@@ -98,7 +98,7 @@ class CNetworkInterface
 class CSettings;
 class CNetworkServices;
 
-class CNetwork
+class CNetworkBase
 {
 public:
   enum EMESSAGE
@@ -107,8 +107,8 @@ class CNetwork
     SERVICES_DOWN
   };
 
-   CNetwork(CSettings &settings);
-   virtual ~CNetwork();
+   CNetworkBase(CSettings &settings);
+   virtual ~CNetworkBase();
 
    // Get network services
    CNetworkServices& GetServices() { return *m_services; }
@@ -167,6 +167,8 @@ class CNetwork
 #include "platform/win32/network/NetworkWin32.h"
 #elif defined(HAS_WIN10_NETWORK)
 #include "platform/win10/network/NetworkWin10.h"
+#else
+using CNetwork = CNetworkBase;
 #endif
 
 //creates, binds and listens a tcp socket on the desired port. Set bindLocal to
diff --git a/xbmc/platform/android/activity/XBMCApp.cpp b/xbmc/platform/android/activity/XBMCApp.cpp
index 5f820109dede..70749d262ce6 100644
--- a/xbmc/platform/android/activity/XBMCApp.cpp
+++ b/xbmc/platform/android/activity/XBMCApp.cpp
@@ -1022,7 +1022,7 @@ void CXBMCApp::onReceive(CJNIIntent intent)
   {
     if (g_application.IsInitialized())
     {
-      CNetwork& net = CServiceBroker::GetNetwork();
+      CNetworkBase& net = CServiceBroker::GetNetwork();
       CNetworkAndroid* netdroid = static_cast<CNetworkAndroid*>(&net);
       netdroid->RetrieveInterfaces();
     }
diff --git a/xbmc/platform/android/network/NetworkAndroid.cpp b/xbmc/platform/android/network/NetworkAndroid.cpp
index 64c678545046..826c5d80709c 100644
--- a/xbmc/platform/android/network/NetworkAndroid.cpp
+++ b/xbmc/platform/android/network/NetworkAndroid.cpp
@@ -294,7 +294,7 @@ std::string CNetworkInterfaceAndroid::GetHostName()
 /*************************/
 
 CNetworkAndroid::CNetworkAndroid(CSettings &settings)
- : CNetwork(settings)
+ : CNetworkBase(settings)
 {
   RetrieveInterfaces();
 }
diff --git a/xbmc/platform/android/network/NetworkAndroid.h b/xbmc/platform/android/network/NetworkAndroid.h
index 87c5c9075d71..8f26153a3b1d 100644
--- a/xbmc/platform/android/network/NetworkAndroid.h
+++ b/xbmc/platform/android/network/NetworkAndroid.h
@@ -63,7 +63,7 @@ class CNetworkInterfaceAndroid : public CNetworkInterface
 };
 
 
-class CNetworkAndroid : public CNetwork
+class CNetworkAndroid : public CNetworkBase
 {
   friend class CXBMCApp;
 
@@ -80,6 +80,7 @@ class CNetworkAndroid : public CNetwork
   virtual void SetNameServers(const std::vector<std::string>& nameServers) override;
 
   // Ping remote host
+  using CNetworkBase::PingHost;
   virtual bool PingHost(unsigned long remote_ip, unsigned int timeout_ms = 2000) override;
 
 protected:
@@ -89,3 +90,4 @@ class CNetworkAndroid : public CNetwork
   CCriticalSection m_refreshMutex;
 };
 
+using CNetwork = CNetworkAndroid;
diff --git a/xbmc/platform/linux/network/NetworkLinux.cpp b/xbmc/platform/linux/network/NetworkLinux.cpp
index 6bf6045fb38f..b541c509cebe 100644
--- a/xbmc/platform/linux/network/NetworkLinux.cpp
+++ b/xbmc/platform/linux/network/NetworkLinux.cpp
@@ -287,7 +287,7 @@ std::string CNetworkInterfaceLinux::GetCurrentDefaultGateway(void)
           strcmp(gateway, "00000000") != 0)
       {
          unsigned char gatewayAddr[4];
-         int len = CNetwork::ParseHex(gateway, gatewayAddr);
+         int len = CNetworkBase::ParseHex(gateway, gatewayAddr);
          if (len == 4)
          {
             struct in_addr in;
@@ -306,7 +306,7 @@ std::string CNetworkInterfaceLinux::GetCurrentDefaultGateway(void)
 }
 
 CNetworkLinux::CNetworkLinux(CSettings &settings)
- : CNetwork(settings)
+ : CNetworkBase(settings)
 {
    m_sock = socket(AF_INET, SOCK_DGRAM, 0);
    queryInterfaceList();
@@ -338,7 +338,7 @@ std::vector<CNetworkInterface*>& CNetworkLinux::GetInterfaceList(void)
 //! and the interface comes up during runtime
 CNetworkInterface* CNetworkLinux::GetFirstConnectedInterface(void)
 {
-    CNetworkInterface *pNetIf=CNetwork::GetFirstConnectedInterface();
+    CNetworkInterface *pNetIf=CNetworkBase::GetFirstConnectedInterface();
     
     // no connected Interfaces found? - requeryInterfaceList
     if (!pNetIf)
@@ -346,7 +346,7 @@ CNetworkInterface* CNetworkLinux::GetFirstConnectedInterface(void)
         CLog::Log(LOGDEBUG,"%s no connected interface found - requery list",__FUNCTION__);        
         queryInterfaceList();        
         //retry finding a connected if
-        pNetIf = CNetwork::GetFirstConnectedInterface();
+        pNetIf = CNetworkBase::GetFirstConnectedInterface();
     }
     
     return pNetIf;
diff --git a/xbmc/platform/linux/network/NetworkLinux.h b/xbmc/platform/linux/network/NetworkLinux.h
index a636cd3417a9..90308706d7f1 100644
--- a/xbmc/platform/linux/network/NetworkLinux.h
+++ b/xbmc/platform/linux/network/NetworkLinux.h
@@ -64,7 +64,7 @@ class CNetworkInterfaceLinux : public CNetworkInterface
    CNetworkLinux* m_network;
 };
 
-class CNetworkLinux : public CNetwork
+class CNetworkLinux : public CNetworkBase
 {
 public:
    CNetworkLinux(CSettings &settings);
@@ -91,5 +91,7 @@ class CNetworkLinux : public CNetwork
    int m_sock;
 };
 
+using CNetwork = CNetworkLinux;
+
 #endif
 
diff --git a/xbmc/platform/win10/network/NetworkWin10.cpp b/xbmc/platform/win10/network/NetworkWin10.cpp
index 2056587fd20b..e29ad39f9dfe 100644
--- a/xbmc/platform/win10/network/NetworkWin10.cpp
+++ b/xbmc/platform/win10/network/NetworkWin10.cpp
@@ -184,7 +184,7 @@ std::string CNetworkInterfaceWin10::GetCurrentDefaultGateway(void)
 }
 
 CNetworkWin10::CNetworkWin10(CSettings &settings)
-  : CNetwork(settings)
+  : CNetworkBase(settings)
 {
   queryInterfaceList();
   NetworkInformation::NetworkStatusChanged += ref new NetworkStatusChangedEventHandler([this](Platform::Object^) {
diff --git a/xbmc/platform/win10/network/NetworkWin10.h b/xbmc/platform/win10/network/NetworkWin10.h
index 3fb034b32cf7..5c7294a3db66 100644
--- a/xbmc/platform/win10/network/NetworkWin10.h
+++ b/xbmc/platform/win10/network/NetworkWin10.h
@@ -64,7 +64,7 @@ class CNetworkInterfaceWin10 : public CNetworkInterface
 };
 
 
-class CNetworkWin10 : public CNetwork
+class CNetworkWin10 : public CNetworkBase
 {
 public:
     CNetworkWin10(CSettings &settings);
@@ -74,6 +74,7 @@ class CNetworkWin10 : public CNetwork
     virtual std::vector<CNetworkInterface*>& GetInterfaceList(void);
 
     // Ping remote host
+    using CNetworkBase::PingHost;
     virtual bool PingHost(unsigned long host, unsigned int timeout_ms = 2000);
 
     // Get/set the nameserver(s)
@@ -91,3 +92,6 @@ class CNetworkWin10 : public CNetwork
     CStopWatch m_netrefreshTimer;
     CCriticalSection m_critSection;
 };
+
+using CNetwork = CNetworkWin10;
+
diff --git a/xbmc/platform/win32/network/NetworkWin32.cpp b/xbmc/platform/win32/network/NetworkWin32.cpp
index 3d1f25ebb397..a76e4811803a 100644
--- a/xbmc/platform/win32/network/NetworkWin32.cpp
+++ b/xbmc/platform/win32/network/NetworkWin32.cpp
@@ -145,7 +145,7 @@ std::string CNetworkInterfaceWin32::GetCurrentDefaultGateway(void)
 }
 
 CNetworkWin32::CNetworkWin32(CSettings &settings)
- : CNetwork(settings)
+ : CNetworkBase(settings)
 {
   queryInterfaceList();
 }
diff --git a/xbmc/platform/win32/network/NetworkWin32.h b/xbmc/platform/win32/network/NetworkWin32.h
index 1eacdab3071e..d40dfa619acf 100644
--- a/xbmc/platform/win32/network/NetworkWin32.h
+++ b/xbmc/platform/win32/network/NetworkWin32.h
@@ -64,7 +64,7 @@ class CNetworkInterfaceWin32 : public CNetworkInterface
    std::string m_adaptername;
 };
 
-class CNetworkWin32 : public CNetwork
+class CNetworkWin32 : public CNetworkBase
 {
 public:
    CNetworkWin32(CSettings &settings);
@@ -74,6 +74,7 @@ class CNetworkWin32 : public CNetwork
    virtual std::vector<CNetworkInterface*>& GetInterfaceList(void);
 
    // Ping remote host
+   using CNetworkBase::PingHost;
    virtual bool PingHost(unsigned long host, unsigned int timeout_ms = 2000);
 
    // Get/set the nameserver(s)
@@ -103,4 +104,6 @@ class CNetworkWin32 : public CNetwork
    CCriticalSection m_critSection;
 };
 
+using CNetwork = CNetworkWin32;
+
 #endif
