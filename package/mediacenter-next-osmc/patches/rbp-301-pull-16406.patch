From a9a38a58fd641f7e86e32473f246a81cbd9d509b Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Sat, 27 Jul 2019 12:47:06 +0200
Subject: [PATCH 1/3] [cmake] add support for install bigger addon dir
 structure

This is an independent change needed on the web browser.

Background is the support of several things at the addon install.

Once the `* _ADDITIONAL_BINARY_EXE` with type 'PROGRAMS' to have the correct settings after the install and to run an EXE is added.

The other is the addition of `* _ADDITIONAL_BINARY_PARTS` and` * _ADDITIONAL_BINARY_DIRS`, which brings a large amount of data to a web browser when you install it.

As addon besides web, a changed inputstream.adaptive was tested with on ZIP install and normal install.
---
 cmake/scripts/common/AddonHelpers.cmake | 33 +++++++++++++++++++++++++
 1 file changed, 33 insertions(+)

diff --git a/cmake/scripts/common/AddonHelpers.cmake b/cmake/scripts/common/AddonHelpers.cmake
index 2f3f302fbd7e..a522312115ab 100644
--- a/cmake/scripts/common/AddonHelpers.cmake
+++ b/cmake/scripts/common/AddonHelpers.cmake
@@ -276,6 +276,18 @@ macro (build_addon target prefix libs)
         install(FILES ${${prefix}_ADDITIONAL_BINARY} DESTINATION ${target}
                 COMPONENT ${target}-${${prefix}_VERSION}-${PLATFORM_TAG})
       endif()
+      if(${prefix}_ADDITIONAL_BINARY_EXE)
+        install(PROGRAMS ${${prefix}_ADDITIONAL_BINARY_EXE} DESTINATION ${target}
+                COMPONENT ${target}-${${prefix}_VERSION}-${PLATFORM_TAG})
+      endif()
+      if(${prefix}_ADDITIONAL_BINARY_PARTS)
+        install(FILES ${${prefix}_ADDITIONAL_BINARY_PARTS} DESTINATION ${target}
+                COMPONENT ${target}-${${prefix}_VERSION}-${PLATFORM_TAG})
+      endif()
+      if(${prefix}_ADDITIONAL_BINARY_DIRS)
+        install(DIRECTORY ${${prefix}_ADDITIONAL_BINARY_DIRS} DESTINATION ${target} USE_SOURCE_PERMISSIONS
+                COMPONENT ${target}-${${prefix}_VERSION}-${PLATFORM_TAG})
+      endif()
     else() # NOT WIN32
       if(NOT CPACK_PACKAGE_DIRECTORY)
         set(CPACK_PACKAGE_DIRECTORY ${CMAKE_BINARY_DIR})
@@ -296,6 +308,18 @@ macro (build_addon target prefix libs)
         install(FILES ${${prefix}_ADDITIONAL_BINARY} DESTINATION ${target}
                 COMPONENT ${target}-${${prefix}_VERSION}-${PLATFORM_TAG})
       endif()
+      if(${prefix}_ADDITIONAL_BINARY_EXE)
+        install(PROGRAMS ${${prefix}_ADDITIONAL_BINARY_EXE} DESTINATION ${target}
+                COMPONENT ${target}-${${prefix}_VERSION}-${PLATFORM_TAG})
+      endif()
+      if(${prefix}_ADDITIONAL_BINARY_PARTS)
+        install(FILES ${${prefix}_ADDITIONAL_BINARY_PARTS} DESTINATION ${target}
+                COMPONENT ${target}-${${prefix}_VERSION}-${PLATFORM_TAG})
+      endif()
+      if(${prefix}_ADDITIONAL_BINARY_DIRS)
+        install(DIRECTORY ${${prefix}_ADDITIONAL_BINARY_DIRS} DESTINATION ${target} USE_SOURCE_PERMISSIONS
+                COMPONENT ${target}-${${prefix}_VERSION}-${PLATFORM_TAG})
+      endif()
     endif()
     add_cpack_workaround(${target} ${${prefix}_VERSION} ${ext})
   else()
@@ -339,6 +363,15 @@ macro (build_addon target prefix libs)
     if(${prefix}_ADDITIONAL_BINARY)
       install(FILES ${${prefix}_ADDITIONAL_BINARY} DESTINATION ${CMAKE_INSTALL_LIBDIR}/addons/${target})
     endif()
+    if(${prefix}_ADDITIONAL_BINARY_EXE)
+      install(PROGRAMS ${${prefix}_ADDITIONAL_BINARY_EXE} DESTINATION ${CMAKE_INSTALL_LIBDIR}/addons/${target})
+    endif()
+    if(${prefix}_ADDITIONAL_BINARY_PARTS)
+      install(FILES ${${prefix}_ADDITIONAL_BINARY_PARTS} DESTINATION ${CMAKE_INSTALL_LIBDIR}/addons/${target})
+    endif()
+    if(${prefix}_ADDITIONAL_BINARY_DIRS)
+      install(DIRECTORY ${${prefix}_ADDITIONAL_BINARY_DIRS} DESTINATION ${CMAKE_INSTALL_LIBDIR}/addons/${target} USE_SOURCE_PERMISSIONS)
+    endif()
   endif()
   if(${APP_NAME_UC}_BUILD_DIR)
     file(GLOB_RECURSE files ${CMAKE_CURRENT_SOURCE_DIR}/${target}/*)

From 5488ae95456e701e09c2138348dcceebda43c971 Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Tue, 6 Aug 2019 23:20:05 +0200
Subject: [PATCH 2/3] [doxygen] add documentation about addon CMake variables

---
 cmake/scripts/common/AddonHelpers.dox         | 59 +++++++++++++++++++
 .../kodi-addon-dev-kit/doxygen/Doxyfile       |  1 +
 .../doxygen/Modules/modules_cpp.dox           |  5 ++
 3 files changed, 65 insertions(+)
 create mode 100644 cmake/scripts/common/AddonHelpers.dox

diff --git a/cmake/scripts/common/AddonHelpers.dox b/cmake/scripts/common/AddonHelpers.dox
new file mode 100644
index 000000000000..d3acec011dba
--- /dev/null
+++ b/cmake/scripts/common/AddonHelpers.dox
@@ -0,0 +1,59 @@
+/*!
+\addtogroup cpp_cmake
+
+Kodi which uses it as a library for its binary addons has a special build
+system for this.
+
+To implement this, a CMake macro brought by Kodi is used, this is
+"build_addon (...)". This processes various definitions passed by the addon to
+process the construction.
+
+
+--------------------------------------------------------------------------------
+
+<b>Here a minmal example of the for addon used CMakeLists.txt:</b>
+
+~~~~~~~~~~~~~{.cmake}
+cmake_minimum_required(VERSION 3.5)
+project(example.addon)
+
+set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR})
+
+find_package(Kodi REQUIRED)
+
+include_directories(${KODI_INCLUDE_DIR}
+
+set(DEPLIBS ) # Here empty
+set(EXAMPLE_SOURCES src/main.cpp)
+set(EXAMPLE_HEADERS src/main.h)
+
+build_addon((example.addon EXAMPLE DEPLIBS)
+
+include(CPack)
+~~~~~~~~~~~~~
+
+
+--------------------------------------------------------------------------------
+
+This is a list of special variables that can be passed to the macro.
+The parts defined with "*" must be given the second name given to the macro.
+
+Here to define the necessary creation and installation files on addon CMakeLists.txt:
+| Name                        | Description
+|-----------------------------|-------------------------------------------------
+| *_SOURCES                   | List of source code files to be complicated.
+| *_HEADERS                   | List of used source code header files.
+| *_CUSTOM_BINARY             | For special cases where an already created library from an external source is inserted, the <b>"* _SOURCES"</b> and <b>"* _HEADERS"</b> are unused in this case.<br>This is currently used primarily on game addons.
+| *_CUSTOM_DATA               | To add additional required data from a folder, which are stored in the shared folder of the addon.<br>With a "/" at the end of the content given to the folder is used, without the folder itself.
+| *_ADDITIONAL_BINARY         | In case the additional library has to be installed for the addon, the path or CMake name can be given here.
+| *_ADDITIONAL_BINARY_EXE     | In case you need to addon an additional application you can give the path or CMake name, it will be in the same folder as the addon library.<br>The mode bits are set there as EXE.
+| *_ADDITIONAL_BINARY_DIRS    | To add complete folders additionally to folders containing the addon library.<br>With a "/" at the end of the content given to the folder is used, without the folder itself.
+
+External creation Options, given by `-D...`:
+| Name                        | Description
+|-----------------------------|-------------------------------------------------
+| PACKAGE_ZIP                 | To create a package as a ZIP file. This is also used to install locally addon together.<br>Default is OFF.
+| PACKAGE_TGZ                 | To create a package as a TGZ file.<br>Default is OFF.
+| BUILD_SHARED_LIBS           | To define if addon library is shared or static.<br>Default is ON to have shared.
+| USE_LTO                     | Use link time optimization.<br>Default is OFF.
+*/
diff --git a/xbmc/addons/kodi-addon-dev-kit/doxygen/Doxyfile b/xbmc/addons/kodi-addon-dev-kit/doxygen/Doxyfile
index 1fba414e965f..97a1bfe58ede 100644
--- a/xbmc/addons/kodi-addon-dev-kit/doxygen/Doxyfile
+++ b/xbmc/addons/kodi-addon-dev-kit/doxygen/Doxyfile
@@ -817,6 +817,7 @@ INPUT                  = main.txt \
                          Modules/modules_cpp.dox \
                          Modules/modules_python.dox \
                          Skin/skin.dox \
+                         ../../../../cmake/scripts/common/AddonHelpers.dox \
                          ../../../guilib/GUIRenderingControl.dox \
                          ../../../guilib/GUIButtonControl.dox \
                          ../../../guilib/GUIEditControl.dox \
diff --git a/xbmc/addons/kodi-addon-dev-kit/doxygen/Modules/modules_cpp.dox b/xbmc/addons/kodi-addon-dev-kit/doxygen/Modules/modules_cpp.dox
index d1c71abf4997..4af69b5afb9f 100644
--- a/xbmc/addons/kodi-addon-dev-kit/doxygen/Modules/modules_cpp.dox
+++ b/xbmc/addons/kodi-addon-dev-kit/doxygen/Modules/modules_cpp.dox
@@ -8,6 +8,11 @@
        \endhtmlonly
 */
 /*!
+\defgroup cpp_cmake CMake addon creation structure
+\ingroup cpp
+\brief **CMake help macros to create addon for Kodi**
+*/
+/*!
 \defgroup cpp_kodi Interface - kodi
 \ingroup cpp
 \brief **General addon interface functions**

From 8f19199320647eb0d28eb84705771b63a1787609 Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Tue, 6 Aug 2019 23:17:23 +0200
Subject: [PATCH 3/3] [doxygen] add addon docs for
 kodi::gui::gl::CShaderProgram

---
 .../include/kodi/gui/gl/GL.h                  |   6 +-
 .../include/kodi/gui/gl/Shader.h              | 257 +++++++++++++++++-
 2 files changed, 253 insertions(+), 10 deletions(-)

diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/gui/gl/GL.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/gui/gl/GL.h
index ad4fe3da0e82..943c7d0b0b12 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/gui/gl/GL.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/gui/gl/GL.h
@@ -10,7 +10,7 @@
 
 //==============================================================================
 ///
-/// \defgroup cpp_kodi_gui_gl Kodi OpenGL helpers
+/// \defgroup cpp_kodi_gui_gl OpenGL helpers
 /// \ingroup cpp_kodi_gui
 /// \brief Auxiliary functions for Open GL
 ///
@@ -31,7 +31,8 @@
 ///
 /// Following \ref GL_TYPE_STRING define can be used, for example, to manage 
 /// different folders for GL and GLES and make the selection easier.
-/// This are on OpenGL **"`GL`"** and on Open GL|ES **"`GLES`"**.
+/// This are on OpenGL <b>"GL"</b> and on Open GL|ES <b>"GLES"</b>.
+///
 /// **Example:**
 /// ~~~~~~~~~~~~~~~~~{.cpp}
 /// kodi::GetAddonPath("resources/shaders/" GL_TYPE_STRING "/frag.glsl");
@@ -42,6 +43,7 @@
 ///
 /// In addition, \ref BUFFER_OFFSET is declared in it which can be used to give an 
 /// offset on the array to GL.
+///
 /// **Example:**
 /// ~~~~~~~~~~~~~~~~~{.cpp}
 /// const struct PackedVertex {
diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/gui/gl/Shader.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/gui/gl/Shader.h
index 350395ad5b53..209f2746f50e 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/gui/gl/Shader.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/gui/gl/Shader.h
@@ -188,23 +188,147 @@ class ATTRIBUTE_HIDDEN CPixelShader : public CShader
 };
 //------------------------------------------------------------------------
 
+//============================================================================
+///
+/// \defgroup cpp_kodi_gui_gl_CShaderProgram GL Shader Program
+/// \ingroup cpp_kodi_gui_gl
+/// @brief \cpp_class{ kodi::gui::gl::CShaderProgram }
+/// **Class to manage an OpenGL shader program**
+///
+/// With this class the used GL shader code can be defined on the GPU and
+/// its variables can be managed between CPU and GPU.
+///
+/// It has the header \ref Shader.h "#include <kodi/gui/gl/Shader.h>"
+/// be included to enjoy it.
+///
+/// ----------------------------------------------------------------------------
+///
+/// <b>Example:</b>
+///
+/// ~~~~~~~~~~~~~{.cpp}
+///
+/// #include <kodi/gui/gl/Shader.h>
+/// ...
+///
+/// class ATTRIBUTE_HIDDEN CExample
+///   : ...,
+///     public kodi::gui::gl::CShaderProgram
+/// {
+/// public:
+///   CExample() = default;
+///
+///   bool Start();
+///   void Render();
+///
+///   // override functions for kodi::gui::gl::CShaderProgram
+///   void OnCompiledAndLinked() override;
+///   bool OnEnabled() override;
+///
+/// private:
+///   ...
+///   GLint m_aPosition = -1;
+///   GLint m_aColor = -1;
+/// };
+///
+/// bool CExample::Start()
+/// {
+///   // Define shaders and load
+///   std::string fraqShader = kodi::GetAddonPath("resources/shaders/" GL_TYPE_STRING "/glsl.frag");
+///   std::string vertShader = kodi::GetAddonPath("resources/shaders/" GL_TYPE_STRING "/glsl.vert");
+///   if (!LoadShaderFiles(vertShader, fraqShader) || !CompileAndLink())
+///     return false;
+///
+///   ...
+///   return true;
+/// }
+///
+/// ...
+///
+/// void CExample::Render()
+/// {
+///   ...
+///
+///   EnableShader();
+///   ...
+///   DO WORK
+///   ...
+///   DisableShader();
+/// }
+///
+/// void CExample::OnCompiledAndLinked()
+/// {
+///   ...
+///   DO YOUR WORK HERE FOR WHAT IS ONE TIME REQUIRED DURING COMPILE OF SHADER, E.G.:
+///
+///   m_aPosition = glGetAttribLocation(ProgramHandle(), "a_position");
+///   m_aColor = glGetAttribLocation(ProgramHandle(), "a_color");
+/// }
+///
+/// bool OnEnabled() override
+/// {
+///   ...
+///   DO YOUR WORK HERE FOR WHAT REQUIRED DURING ENABLE OF SHADER
+///   ...
+///   return true;
+/// }
+///
+/// ADDONCREATOR(CExample);
+/// ~~~~~~~~~~~~~
+///
+
 //========================================================================
 /// CShaderProgram
 class ATTRIBUTE_HIDDEN CShaderProgram
 {
 public:
+  //==========================================================================
+  ///
+  /// \ingroup cpp_kodi_gui_gl_CShaderProgram
+  /// @brief Construct a new shader
+  ///
+  /// Load must be done later with \ref LoadShaderFiles.
+  ///
   CShaderProgram() = default;
-  CShaderProgram(const std::string &vert, const std::string &frag)
+  //--------------------------------------------------------------------------
+
+  //==========================================================================
+  ///
+  /// \ingroup cpp_kodi_gui_gl_CShaderProgram
+  /// @brief Construct a new shader and load defined shader files
+  ///
+  /// @param[in] vert Path to used GL vertext shader
+  /// @param[in] frag Path to used GL fragment shader
+  ///
+  CShaderProgram(const std::string& vert, const std::string& frag)
   {
     LoadShaderFiles(vert, frag);
   }
+  //--------------------------------------------------------------------------
 
+  //==========================================================================
+  ///
+  /// \ingroup cpp_kodi_gui_gl_CShaderProgram
+  /// @brief Destructor
+  ///
   virtual ~CShaderProgram()
   {
     ShaderFree();
   }
-
-  bool LoadShaderFiles(const std::string &vert, const std::string &frag)
+  //--------------------------------------------------------------------------
+
+  //==========================================================================
+  ///
+  /// \ingroup cpp_kodi_gui_gl_CShaderProgram
+  /// @brief To load manually the needed shader files
+  ///
+  /// @param[in] vert Path to used GL vertext shader
+  /// @param[in] frag Path to used GL fragment shader
+  ///
+  ///
+  /// @note The use of the files is optional, but it must either be passed over
+  /// here or via \ref CompileAndLink, or both of the source code.
+  ///
+  bool LoadShaderFiles(const std::string& vert, const std::string& frag)
   {
     if (!kodi::vfs::FileExists(vert) || !m_pVP.LoadSource(vert))
     {
@@ -220,7 +344,36 @@ class ATTRIBUTE_HIDDEN CShaderProgram
 
     return true;
   }
-
+  //--------------------------------------------------------------------------
+
+  //==========================================================================
+  ///
+  /// \ingroup cpp_kodi_gui_gl_CShaderProgram
+  /// @brief To compile and link the shader to the GL interface
+  ///
+  /// Optionally, additional source code can be transferred here, or it can be
+  /// used independently without any files
+  ///
+  /// @param[in] vertexExtraBegin   [opt] To additionally add vextex source
+  ///                               code to the beginning of the loaded file
+  ///                               source code
+  /// @param[in] vertexExtraEnd     [opt] To additionally add vextex source
+  ///                               code to the end of the loaded file
+  ///                               source code
+  /// @param[in] fragmentExtraBegin [opt] To additionally add fragment source
+  ///                               code to the beginning of the loaded file
+  ///                               source code
+  /// @param[in] fragmentExtraEnd   [opt] To additionally add fragment source
+  ///                               code to the end of the loaded file
+  ///                               source code
+  /// @return                       true if compile was successed
+  ///
+  ///
+  /// @note In the case of a compile error, it will be written once into the Kodi
+  /// log and in addition to the console output to quickly detect the errors when
+  /// writing the damage.
+  ///
+  ///
   bool CompileAndLink(const std::string& vertexExtraBegin = "",
                       const std::string& vertexExtraEnd = "",
                       const std::string& fragmentExtraBegin = "",
@@ -278,7 +431,19 @@ class ATTRIBUTE_HIDDEN CShaderProgram
     OnCompiledAndLinked();
     return true;
   }
-
+  //--------------------------------------------------------------------------
+
+  //==========================================================================
+  ///
+  /// \ingroup cpp_kodi_gui_gl_CShaderProgram
+  /// @brief To activate the shader and use it on the GPU
+  ///
+  /// @return true if enable was successfull done
+  ///
+  ///
+  /// @note During this call, the \ref OnEnabled stored in the child is also
+  /// called
+  ///
   bool EnableShader()
   {
     if (ShaderOK())
@@ -312,7 +477,13 @@ class ATTRIBUTE_HIDDEN CShaderProgram
     }
     return false;
   }
+  //--------------------------------------------------------------------------
 
+  //==========================================================================
+  ///
+  /// \ingroup cpp_kodi_gui_gl_CShaderProgram
+  /// @brief To deactivate the shader use on the GPU
+  ///
   void DisableShader()
   {
     if (ShaderOK())
@@ -321,15 +492,85 @@ class ATTRIBUTE_HIDDEN CShaderProgram
       OnDisabled();
     }
   }
-
+  //--------------------------------------------------------------------------
+
+  //==========================================================================
+  ///
+  /// \ingroup cpp_kodi_gui_gl_CShaderProgram
+  /// @brief Used to check if shader has been loaded before.
+  ///
+  /// @return true if enable was successfull done
+  ///
+  /// @note The CompileAndLink call sets these values
+  ///
   ATTRIBUTE_FORCEINLINE bool ShaderOK() const { return m_ok; }
+  //--------------------------------------------------------------------------
+
+  //==========================================================================
+  ///
+  /// \ingroup cpp_kodi_gui_gl_CShaderProgram
+  /// @brief To get the vertex shader class used by Kodi at the addon
+  ///
+  /// @return pointer to vertex shader class
+  ///
   ATTRIBUTE_FORCEINLINE CVertexShader& VertexShader() { return m_pVP; }
+  //--------------------------------------------------------------------------
+
+  //==========================================================================
+  ///
+  /// \ingroup cpp_kodi_gui_gl_CShaderProgram
+  /// @brief To get the fragment shader class used by Kodi at the addon
+  ///
+  /// @return pointer to fragment shader class
+  ///
   ATTRIBUTE_FORCEINLINE CPixelShader& PixelShader() { return m_pFP; }
+  //--------------------------------------------------------------------------
+
+  //==========================================================================
+  ///
+  /// \ingroup cpp_kodi_gui_gl_CShaderProgram
+  /// @brief Used to get the definition created in the OpenGL itself
+  ///
+  /// @return GLuint of GL shader program handler
+  ///
   ATTRIBUTE_FORCEINLINE GLuint ProgramHandle() { return m_shaderProgram; }
-
+  //--------------------------------------------------------------------------
+
+  //==========================================================================
+  ///
+  /// \defgroup cpp_kodi_gui_gl_CShaderProgram_child Child Functions
+  /// \ingroup cpp_kodi_gui_gl_CShaderProgram
+  /// @brief \cpp_class{ kodi::gui::gl::CShaderProgram child functions }
+  ///
+  /// Functions that are added by parent in the child
+  //@{
+  //==========================================================================
+  ///
+  /// \ingroup cpp_kodi_gui_gl_CShaderProgram_child
+  /// @brief Mandatory child function to set the necessary CPU to GPU data
+  ///
   virtual void OnCompiledAndLinked() {};
-  virtual bool OnEnabled() { return false; };
+  //--------------------------------------------------------------------------
+
+  //==========================================================================
+  ///
+  /// \ingroup cpp_kodi_gui_gl_CShaderProgram_child
+  /// @brief Optional function to exchange data between CPU and GPU while
+  /// activating the shader
+  ///
+  /// @return true if enable was successfull done
+  ///
+  virtual bool OnEnabled() { return true; };
+  //--------------------------------------------------------------------------
+
+  //==========================================================================
+  ///
+  /// \ingroup cpp_kodi_gui_gl_CShaderProgram_child
+  /// @brief Optional child function that may have to be performed when
+  /// switching off the shader
   virtual void OnDisabled() {};
+  //--------------------------------------------------------------------------
+  //@}
 
 private:
   void ShaderFree()
