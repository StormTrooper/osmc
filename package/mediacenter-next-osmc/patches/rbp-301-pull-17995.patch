From 59e8681de8a6b185e2bbc87ad7dea5fc33e304d6 Mon Sep 17 00:00:00 2001
From: DaveTBlake <oak99sky@yahoo.co.uk>
Date: Wed, 3 Jun 2020 18:05:58 +0100
Subject: [PATCH] Use more secure snprintf on variable format strings to avoid
 buffer overflow

---
 xbmc/dbwrappers/mysqldataset.cpp  | 52 +++++++++++++++----------------
 xbmc/dbwrappers/sqlitedataset.cpp |  9 ++++--
 2 files changed, 32 insertions(+), 29 deletions(-)

diff --git a/xbmc/dbwrappers/mysqldataset.cpp b/xbmc/dbwrappers/mysqldataset.cpp
index b0ec34e001d8..54f36484ada3 100644
--- a/xbmc/dbwrappers/mysqldataset.cpp
+++ b/xbmc/dbwrappers/mysqldataset.cpp
@@ -218,7 +218,8 @@ int MysqlDatabase::connect(bool create_new) {
         char sqlcmd[512];
         int ret;
 
-        sprintf(sqlcmd, "CREATE DATABASE `%s` CHARACTER SET utf8 COLLATE utf8_general_ci", db.c_str());
+        snprintf(sqlcmd, sizeof(sqlcmd),
+                 "CREATE DATABASE `%s` CHARACTER SET utf8 COLLATE utf8_general_ci", db.c_str());
         if ( (ret=query_with_reconnect(sqlcmd)) != MYSQL_OK )
         {
           throw DbErrors("Can't create new database: '%s' (%d)", db.c_str(), ret);
@@ -276,7 +277,7 @@ int MysqlDatabase::drop() {
     throw DbErrors("Can't drop database: no active connection...");
   char sqlcmd[512];
   int ret;
-  sprintf(sqlcmd,"DROP DATABASE `%s`", db.c_str());
+  snprintf(sqlcmd, sizeof(sqlcmd), "DROP DATABASE `%s`", db.c_str());
   if ( (ret=query_with_reconnect(sqlcmd)) != MYSQL_OK )
   {
     throw DbErrors("Can't drop database: '%s' (%d)", db.c_str(), ret);
@@ -313,7 +314,8 @@ int MysqlDatabase::copy(const char *backup_name) {
     }
 
     // create the new database
-    sprintf(sql, "CREATE DATABASE `%s` CHARACTER SET utf8 COLLATE utf8_general_ci", backup_name);
+    snprintf(sql, sizeof(sql), "CREATE DATABASE `%s` CHARACTER SET utf8 COLLATE utf8_general_ci",
+             backup_name);
     if ( (ret=query_with_reconnect(sql)) != MYSQL_OK )
     {
       mysql_free_result(res);
@@ -326,8 +328,7 @@ int MysqlDatabase::copy(const char *backup_name) {
     while ( (row=mysql_fetch_row(res)) != NULL )
     {
       // copy the table definition
-      sprintf(sql, "CREATE TABLE `%s`.%s LIKE %s",
-              backup_name, row[0], row[0]);
+      snprintf(sql, sizeof(sql), "CREATE TABLE `%s`.%s LIKE %s", backup_name, row[0], row[0]);
 
       if ( (ret=query_with_reconnect(sql)) != MYSQL_OK )
       {
@@ -336,7 +337,7 @@ int MysqlDatabase::copy(const char *backup_name) {
       }
 
       // copy the table data
-      sprintf(sql, "INSERT INTO `%s`.%s SELECT * FROM %s",
+      snprintf(sql, sizeof(sql), "INSERT INTO `%s`.%s SELECT * FROM %s",
               backup_name, row[0], row[0]);
 
       if ( (ret=query_with_reconnect(sql)) != MYSQL_OK )
@@ -366,10 +367,10 @@ int MysqlDatabase::drop_analytics(void) {
     throw DbErrors("Can't connect to database: '%s'",db.c_str());
 
   // getting a list of indexes in the database
-  sprintf(sql, "SELECT DISTINCT table_name, index_name"
-          "  FROM information_schema.statistics"
-          " WHERE index_name != 'PRIMARY' AND"
-          "       table_schema = '%s'", db.c_str());
+  snprintf(sql, sizeof(sql), "SELECT DISTINCT table_name, index_name "
+           "FROM information_schema.statistics "
+           "WHERE index_name != 'PRIMARY' AND table_schema = '%s'",
+           db.c_str());
   if ( (ret=query_with_reconnect(sql)) != MYSQL_OK )
     throw DbErrors("Can't determine list of indexes to drop.");
 
@@ -381,7 +382,7 @@ int MysqlDatabase::drop_analytics(void) {
   {
     while ( (row=mysql_fetch_row(res)) != NULL )
     {
-      sprintf(sql, "ALTER TABLE `%s`.%s DROP INDEX %s", db.c_str(), row[0], row[1]);
+      snprintf(sql, sizeof(sql), "ALTER TABLE `%s`.%s DROP INDEX %s", db.c_str(), row[0], row[1]);
 
       if ( (ret=query_with_reconnect(sql)) != MYSQL_OK )
       {
@@ -393,9 +394,8 @@ int MysqlDatabase::drop_analytics(void) {
   }
 
   // next topic is a views list
-  sprintf(sql, "SELECT table_name"
-          "  FROM information_schema.views"
-          " WHERE table_schema = '%s'", db.c_str());
+  snprintf(sql, sizeof(sql),
+           "SELECT table_name FROM information_schema.views WHERE table_schema = '%s'", db.c_str());
   if ( (ret=query_with_reconnect(sql)) != MYSQL_OK )
     throw DbErrors("Can't determine list of views to drop.");
 
@@ -406,7 +406,7 @@ int MysqlDatabase::drop_analytics(void) {
     while ( (row=mysql_fetch_row(res)) != NULL )
     {
       /* we do not need IF EXISTS because these views are exist */
-      sprintf(sql, "DROP VIEW `%s`.%s", db.c_str(), row[0]);
+      snprintf(sql, sizeof(sql), "DROP VIEW `%s`.%s", db.c_str(), row[0]);
 
       if ( (ret=query_with_reconnect(sql)) != MYSQL_OK )
       {
@@ -418,9 +418,9 @@ int MysqlDatabase::drop_analytics(void) {
   }
 
   // triggers
-  sprintf(sql, "SELECT trigger_name"
-          "  FROM information_schema.triggers"
-          " WHERE event_object_schema = '%s'", db.c_str());
+  snprintf(sql, sizeof(sql),
+           "SELECT trigger_name FROM information_schema.triggers WHERE event_object_schema = '%s'",
+           db.c_str());
   if ( (ret=query_with_reconnect(sql)) != MYSQL_OK )
     throw DbErrors("Can't determine list of triggers to drop.");
 
@@ -430,7 +430,7 @@ int MysqlDatabase::drop_analytics(void) {
   {
     while ( (row=mysql_fetch_row(res)) != NULL )
     {
-      sprintf(sql, "DROP TRIGGER `%s`.%s", db.c_str(), row[0]);
+      snprintf(sql, sizeof(sql), "DROP TRIGGER `%s`.%s", db.c_str(), row[0]);
 
       if ( (ret=query_with_reconnect(sql)) != MYSQL_OK )
       {
@@ -442,9 +442,7 @@ int MysqlDatabase::drop_analytics(void) {
   }
 
   // Native functions
-  sprintf(sql,
-          "SELECT routine_name "
-          "FROM information_schema.routines "
+  snprintf(sql, sizeof(sql), "SELECT routine_name FROM information_schema.routines "
           "WHERE routine_type = 'FUNCTION' and routine_schema = '%s'",
           db.c_str());
   if ((ret = query_with_reconnect(sql)) != MYSQL_OK)
@@ -456,7 +454,7 @@ int MysqlDatabase::drop_analytics(void) {
   {
     while ((row = mysql_fetch_row(res)) != NULL)
     {
-      sprintf(sql, "DROP FUNCTION `%s`.%s", db.c_str(), row[0]);
+      snprintf(sql, sizeof(sql), "DROP FUNCTION `%s`.%s", db.c_str(), row[0]);
 
       if ((ret = query_with_reconnect(sql)) != MYSQL_OK)
       {
@@ -494,7 +492,7 @@ long MysqlDatabase::nextid(const char* sname) {
   int id;/*,nrow,ncol;*/
   MYSQL_RES* res;
   char sqlcmd[512];
-  sprintf(sqlcmd,"select nextid from %s where seq_name = '%s'",seq_table, sname);
+  snprintf(sqlcmd, sizeof(sqlcmd), "SELECT nextid FROM %s WHERE seq_name = '%s'", seq_table, sname);
   CLog::Log(LOGDEBUG,"MysqlDatabase::nextid will request");
   if ((last_err = query_with_reconnect(sqlcmd)) != 0)
   {
@@ -506,7 +504,8 @@ long MysqlDatabase::nextid(const char* sname) {
     if (mysql_num_rows(res) == 0)
     {
       id = 1;
-      sprintf(sqlcmd, "insert into %s (nextid,seq_name) values (%d,'%s')", seq_table, id, sname);
+      snprintf(sqlcmd, sizeof(sqlcmd), "INSERT INTO %s (nextid,seq_name) VALUES (%d,'%s')",
+               seq_table, id, sname);
       mysql_free_result(res);
       if ((last_err = query_with_reconnect(sqlcmd)) != 0) return DB_UNEXPECTED_RESULT;
       return id;
@@ -519,7 +518,8 @@ long MysqlDatabase::nextid(const char* sname) {
       unsigned long *lengths;
       lengths = mysql_fetch_lengths(res);
       CLog::Log(LOGINFO, "Next id is [%.*s] ", (int)lengths[0], row[0]);
-      sprintf(sqlcmd, "update %s set nextid=%d where seq_name = '%s'", seq_table, id, sname);
+      snprintf(sqlcmd, sizeof(sqlcmd), "UPDATE %s SET nextid=%d WHERE seq_name = '%s'", 
+               seq_table, id, sname);
       mysql_free_result(res);
       if ((last_err = query_with_reconnect(sqlcmd)) != 0) return DB_UNEXPECTED_RESULT;
       return id;
diff --git a/xbmc/dbwrappers/sqlitedataset.cpp b/xbmc/dbwrappers/sqlitedataset.cpp
index 803c27fa5275..fe5ba449c5ee 100644
--- a/xbmc/dbwrappers/sqlitedataset.cpp
+++ b/xbmc/dbwrappers/sqlitedataset.cpp
@@ -473,19 +473,22 @@ long SqliteDatabase::nextid(const char* sname) {
   int id;/*,nrow,ncol;*/
   result_set res;
   char sqlcmd[512];
-  sprintf(sqlcmd,"select nextid from %s where seq_name = '%s'",sequence_table.c_str(), sname);
+  snprintf(sqlcmd, sizeof(sqlcmd), "SELECT nextid FROM %s WHERE seq_name = '%s'",
+           sequence_table.c_str(), sname);
   if ((last_err = sqlite3_exec(getHandle(),sqlcmd,&callback,&res,NULL)) != SQLITE_OK) {
     return DB_UNEXPECTED_RESULT;
     }
   if (res.records.empty()) {
     id = 1;
-    sprintf(sqlcmd,"insert into %s (nextid,seq_name) values (%d,'%s')",sequence_table.c_str(),id,sname);
+    snprintf(sqlcmd, sizeof(sqlcmd), "INSERT INTO %s (nextid,seq_name) VALUES (%d,'%s')",
+             sequence_table.c_str(), id, sname);
     if ((last_err = sqlite3_exec(conn,sqlcmd,NULL,NULL,NULL)) != SQLITE_OK) return DB_UNEXPECTED_RESULT;
     return id;
   }
   else {
     id = res.records[0]->at(0).get_asInt()+1;
-    sprintf(sqlcmd,"update %s set nextid=%d where seq_name = '%s'",sequence_table.c_str(),id,sname);
+    snprintf(sqlcmd, sizeof(sqlcmd), "UPDATE %s SET nextid=%d WHERE seq_name = '%s'",
+             sequence_table.c_str(), id, sname);
     if ((last_err = sqlite3_exec(conn,sqlcmd,NULL,NULL,NULL)) != SQLITE_OK) return DB_UNEXPECTED_RESULT;
     return id;
   }
