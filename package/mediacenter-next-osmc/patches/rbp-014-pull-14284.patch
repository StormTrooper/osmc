From 098b43bf27bb3a6d666530c5cf8f705bfb53cedb Mon Sep 17 00:00:00 2001
From: Viktor Richter <vrichter@posteo.de>
Date: Thu, 9 Aug 2018 20:52:20 +0200
Subject: [PATCH 1/2] fix parsing stream playlists as directory

CFileItemList use IsEmpty instead of Size==0
---
 xbmc/interfaces/builtins/PlayerBuiltins.cpp | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/xbmc/interfaces/builtins/PlayerBuiltins.cpp b/xbmc/interfaces/builtins/PlayerBuiltins.cpp
index 73bc70ab9db7..c9f618bb17d2 100644
--- a/xbmc/interfaces/builtins/PlayerBuiltins.cpp
+++ b/xbmc/interfaces/builtins/PlayerBuiltins.cpp
@@ -435,6 +435,8 @@ static int PlayMedia(const std::vector<std::string>& params)
     std::string extensions = CServiceBroker::GetFileExtensionProvider().GetVideoExtensions() + "|" + CServiceBroker::GetFileExtensionProvider().GetMusicExtensions();
     XFILE::CDirectory::GetDirectory(item.GetPath(), items, extensions, XFILE::DIR_FLAG_DEFAULTS);
 
+    if (!items.IsEmpty()) // fall through on non expandable playlist
+    {
     bool containsMusic = false, containsVideo = false;
     for (int i = 0; i < items.Size(); i++)
     {
@@ -466,8 +468,10 @@ static int PlayMedia(const std::vector<std::string>& params)
     CServiceBroker::GetPlaylistPlayer().Add(playlist, items);
     CServiceBroker::GetPlaylistPlayer().SetCurrentPlaylist(playlist);
     CServiceBroker::GetPlaylistPlayer().Play(playOffset, "");
+    return 0;
+    }
   }
-  else if (item.IsAudio() || item.IsVideo())
+  if (item.IsAudio() || item.IsVideo())
     CServiceBroker::GetPlaylistPlayer().Play(std::make_shared<CFileItem>(item), "");
   else
     g_application.PlayMedia(item, "", PLAYLIST_NONE);

From 4386e290e22bfb62955480a6a5f4d7a3c6425fba Mon Sep 17 00:00:00 2001
From: Viktor Richter <vrichter@posteo.de>
Date: Thu, 9 Aug 2018 20:53:24 +0200
Subject: [PATCH 2/2] fix indentation

---
 xbmc/interfaces/builtins/PlayerBuiltins.cpp | 52 ++++++++++-----------
 1 file changed, 26 insertions(+), 26 deletions(-)

diff --git a/xbmc/interfaces/builtins/PlayerBuiltins.cpp b/xbmc/interfaces/builtins/PlayerBuiltins.cpp
index c9f618bb17d2..7a735e01b1f8 100644
--- a/xbmc/interfaces/builtins/PlayerBuiltins.cpp
+++ b/xbmc/interfaces/builtins/PlayerBuiltins.cpp
@@ -437,38 +437,38 @@ static int PlayMedia(const std::vector<std::string>& params)
 
     if (!items.IsEmpty()) // fall through on non expandable playlist
     {
-    bool containsMusic = false, containsVideo = false;
-    for (int i = 0; i < items.Size(); i++)
-    {
-      bool isVideo = items[i]->IsVideo();
-      containsMusic |= !isVideo;
-      containsVideo |= isVideo;
+      bool containsMusic = false, containsVideo = false;
+      for (int i = 0; i < items.Size(); i++)
+      {
+        bool isVideo = items[i]->IsVideo();
+        containsMusic |= !isVideo;
+        containsVideo |= isVideo;
 
-      if (containsMusic && containsVideo)
-        break;
-    }
+        if (containsMusic && containsVideo)
+          break;
+      }
 
-    std::unique_ptr<CGUIViewState> state(CGUIViewState::GetViewState(containsVideo ? WINDOW_VIDEO_NAV : WINDOW_MUSIC_NAV, items));
-    if (state.get())
-      items.Sort(state->GetSortMethod());
-    else
-      items.Sort(SortByLabel, SortOrderAscending);
+      std::unique_ptr<CGUIViewState> state(CGUIViewState::GetViewState(containsVideo ? WINDOW_VIDEO_NAV : WINDOW_MUSIC_NAV, items));
+      if (state.get())
+        items.Sort(state->GetSortMethod());
+      else
+        items.Sort(SortByLabel, SortOrderAscending);
 
-    int playlist = containsVideo? PLAYLIST_VIDEO : PLAYLIST_MUSIC;;
-    if (containsMusic && containsVideo) //mixed content found in the folder
-    {
-      for (int i = items.Size() - 1; i >= 0; i--) //remove music entries
+      int playlist = containsVideo? PLAYLIST_VIDEO : PLAYLIST_MUSIC;;
+      if (containsMusic && containsVideo) //mixed content found in the folder
       {
-        if (!items[i]->IsVideo())
-          items.Remove(i);
+        for (int i = items.Size() - 1; i >= 0; i--) //remove music entries
+        {
+          if (!items[i]->IsVideo())
+            items.Remove(i);
+        }
       }
-    }
 
-    CServiceBroker::GetPlaylistPlayer().ClearPlaylist(playlist);
-    CServiceBroker::GetPlaylistPlayer().Add(playlist, items);
-    CServiceBroker::GetPlaylistPlayer().SetCurrentPlaylist(playlist);
-    CServiceBroker::GetPlaylistPlayer().Play(playOffset, "");
-    return 0;
+      CServiceBroker::GetPlaylistPlayer().ClearPlaylist(playlist);
+      CServiceBroker::GetPlaylistPlayer().Add(playlist, items);
+      CServiceBroker::GetPlaylistPlayer().SetCurrentPlaylist(playlist);
+      CServiceBroker::GetPlaylistPlayer().Play(playOffset, "");
+      return 0;
     }
   }
   if (item.IsAudio() || item.IsVideo())
