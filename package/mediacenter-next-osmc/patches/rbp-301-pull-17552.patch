From 89cdb4d907454e2f1f860495c744a9aac6b0fc6e Mon Sep 17 00:00:00 2001
From: ronie <ronie@kodi.tv>
Date: Tue, 24 Mar 2020 13:15:33 +0100
Subject: [PATCH] [python] revert onAbortRequested removal

---
 .../doxygen/Modules/modules_python.dox        |  5 -----
 .../generic/ILanguageInvocationHandler.h      |  1 +
 xbmc/interfaces/generic/ILanguageInvoker.cpp  |  6 ++++++
 xbmc/interfaces/generic/ILanguageInvoker.h    |  1 +
 xbmc/interfaces/legacy/Monitor.cpp            |  7 +++++++
 xbmc/interfaces/legacy/Monitor.h              | 14 ++++++++++++++
 xbmc/interfaces/python/PythonInvoker.cpp      |  8 ++++++++
 xbmc/interfaces/python/XBPython.cpp           | 19 +++++++++++++++++++
 xbmc/interfaces/python/XBPython.h             |  1 +
 9 files changed, 57 insertions(+), 5 deletions(-)

diff --git a/xbmc/addons/kodi-addon-dev-kit/doxygen/Modules/modules_python.dox b/xbmc/addons/kodi-addon-dev-kit/doxygen/Modules/modules_python.dox
index 27fdf47900ea..6f0e6a144b76 100644
--- a/xbmc/addons/kodi-addon-dev-kit/doxygen/Modules/modules_python.dox
+++ b/xbmc/addons/kodi-addon-dev-kit/doxygen/Modules/modules_python.dox
@@ -158,11 +158,6 @@ web applications or frameworks for the Python programming language.
       "",
       <b>xbmc.monitor().onDatabaseScanStarted()</b> function was removed completely.
 }
-\python_removed_function{
-      onAbortRequested,
-      "",
-      <b>xbmc.monitor().onAbortRequested()</b> function was removed completely.
-}
 \python_removed_function{
       create,
       "",
diff --git a/xbmc/interfaces/generic/ILanguageInvocationHandler.h b/xbmc/interfaces/generic/ILanguageInvocationHandler.h
index 6b311e299d8e..69bfc8b99427 100644
--- a/xbmc/interfaces/generic/ILanguageInvocationHandler.h
+++ b/xbmc/interfaces/generic/ILanguageInvocationHandler.h
@@ -23,6 +23,7 @@ class ILanguageInvocationHandler
 
   virtual bool OnScriptInitialized(ILanguageInvoker *invoker) { return true; }
   virtual void OnScriptStarted(ILanguageInvoker *invoker) { }
+  virtual void OnScriptAbortRequested(ILanguageInvoker *invoker) { }
   virtual void OnExecutionEnded(ILanguageInvoker* invoker) {}
   virtual void OnScriptFinalized(ILanguageInvoker *invoker) { }
 
diff --git a/xbmc/interfaces/generic/ILanguageInvoker.cpp b/xbmc/interfaces/generic/ILanguageInvoker.cpp
index 7a0b999b3135..9918c583ac5e 100644
--- a/xbmc/interfaces/generic/ILanguageInvoker.cpp
+++ b/xbmc/interfaces/generic/ILanguageInvoker.cpp
@@ -63,6 +63,12 @@ bool ILanguageInvoker::onExecutionInitialized()
   return m_invocationHandler->OnScriptInitialized(this);
 }
 
+void ILanguageInvoker::onAbortRequested()
+{
+  if (m_invocationHandler)
+    m_invocationHandler->OnScriptAbortRequested(this);
+}
+
 void ILanguageInvoker::onExecutionFailed()
 {
   if (m_invocationHandler)
diff --git a/xbmc/interfaces/generic/ILanguageInvoker.h b/xbmc/interfaces/generic/ILanguageInvoker.h
index 986ae97ec53b..3881487db50e 100644
--- a/xbmc/interfaces/generic/ILanguageInvoker.h
+++ b/xbmc/interfaces/generic/ILanguageInvoker.h
@@ -55,6 +55,7 @@ class ILanguageInvoker
 
   virtual void pulseGlobalEvent();
   virtual bool onExecutionInitialized();
+  virtual void onAbortRequested();
   virtual void onExecutionFailed();
   virtual void onExecutionDone();
   virtual void onExecutionFinalized();
diff --git a/xbmc/interfaces/legacy/Monitor.cpp b/xbmc/interfaces/legacy/Monitor.cpp
index 701bf2d20f32..a64f038d207d 100644
--- a/xbmc/interfaces/legacy/Monitor.cpp
+++ b/xbmc/interfaces/legacy/Monitor.cpp
@@ -26,6 +26,13 @@ namespace XBMCAddon
       }
     }
 
+    void Monitor::OnAbortRequested()
+    {
+      XBMC_TRACE;
+      abortEvent.Set();
+      invokeCallback(new CallbackFunction<Monitor>(this,&Monitor::onAbortRequested));
+    }
+
     bool Monitor::waitForAbort(double timeout)
     {
       XBMC_TRACE;
diff --git a/xbmc/interfaces/legacy/Monitor.h b/xbmc/interfaces/legacy/Monitor.h
index f8996c443de2..49762025d555 100644
--- a/xbmc/interfaces/legacy/Monitor.h
+++ b/xbmc/interfaces/legacy/Monitor.h
@@ -56,6 +56,8 @@ namespace XBMCAddon
 
       inline const String& GetId() { return Id; }
       inline long GetInvokerId() { return invokerId; }
+
+      void OnAbortRequested();
 #endif
 
 #ifdef DOXYGEN_SHOULD_USE_THIS
@@ -216,6 +218,18 @@ namespace XBMCAddon
       virtual void onCleanFinished(const String library) { XBMC_TRACE; }
 #endif
 
+#ifdef DOXYGEN_SHOULD_USE_THIS
+      ///
+      /// \ingroup python_monitor
+      /// @brief \python_func{ onAbortRequested() }
+      ///-----------------------------------------------------------------------
+      /// @python_v14 Deprecated. Use **waitForAbort()** to be notified about this event.
+      ///
+      onAbortRequested();
+#else
+      virtual void    onAbortRequested() { XBMC_TRACE; }
+#endif
+
 #ifdef DOXYGEN_SHOULD_USE_THIS
       ///
       /// \ingroup python_monitor
diff --git a/xbmc/interfaces/python/PythonInvoker.cpp b/xbmc/interfaces/python/PythonInvoker.cpp
index a11e183129c5..a47ebc3e079c 100644
--- a/xbmc/interfaces/python/PythonInvoker.cpp
+++ b/xbmc/interfaces/python/PythonInvoker.cpp
@@ -491,6 +491,14 @@ bool CPythonInvoker::stop(bool abort)
 
       PyEval_RestoreThread((PyThreadState*)m_threadState);
 
+      //tell xbmc.Monitor to call onAbortRequested()
+      if (m_addon)
+      {
+        CLog::Log(LOGDEBUG, "CPythonInvoker(%d, %s): trigger Monitor abort request", GetId(),
+                  m_sourceFile.c_str());
+        onAbortRequested();
+      }
+
       PyObject* m;
       m = PyImport_AddModule("xbmc");
       if (m == NULL || PyObject_SetAttrString(m, "abortRequested", PyBool_FromLong(1)))
diff --git a/xbmc/interfaces/python/XBPython.cpp b/xbmc/interfaces/python/XBPython.cpp
index a0f6818f6774..1cde60c0b38b 100644
--- a/xbmc/interfaces/python/XBPython.cpp
+++ b/xbmc/interfaces/python/XBPython.cpp
@@ -628,6 +628,25 @@ void XBPython::OnScriptStarted(ILanguageInvoker *invoker)
   m_vecPyList.push_back(inf);
 }
 
+void XBPython::OnScriptAbortRequested(ILanguageInvoker *invoker)
+{
+  XBMC_TRACE;
+
+  long invokerId(-1);
+  if (invoker != NULL)
+    invokerId = invoker->GetId();
+
+  LOCK_AND_COPY(std::vector<XBMCAddon::xbmc::Monitor*>, tmp, m_vecMonitorCallbackList);
+  for (auto& it : tmp)
+  {
+    if (CHECK_FOR_ENTRY(m_vecMonitorCallbackList, it))
+    {
+      if (invokerId < 0 || it->GetInvokerId() == invokerId)
+        it->OnAbortRequested();
+    }
+  }
+}
+
 void XBPython::OnExecutionEnded(ILanguageInvoker* invoker)
 {
   CSingleLock lock(m_vecPyList);
diff --git a/xbmc/interfaces/python/XBPython.h b/xbmc/interfaces/python/XBPython.h
index 1c40d5fe5a64..c236cb215621 100644
--- a/xbmc/interfaces/python/XBPython.h
+++ b/xbmc/interfaces/python/XBPython.h
@@ -90,6 +90,7 @@ class XBPython :
   void Uninitialize() override;
   bool OnScriptInitialized(ILanguageInvoker *invoker) override;
   void OnScriptStarted(ILanguageInvoker *invoker) override;
+  void OnScriptAbortRequested(ILanguageInvoker *invoker) override;
   void OnExecutionEnded(ILanguageInvoker* invoker) override;
   void OnScriptFinalized(ILanguageInvoker *invoker) override;
   ILanguageInvoker* CreateInvoker() override;
