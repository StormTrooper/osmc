From 06b0160414f5a31d81001d453675a273255227b1 Mon Sep 17 00:00:00 2001
From: enen92 <92enen@gmail.com>
Date: Sat, 4 Jul 2020 23:46:31 +0100
Subject: [PATCH 1/2] [Addons] Migration - Hide dependency addons from the
 dialog of disabled addons after the addon migration

---
 xbmc/Application.cpp                | 18 +++++++++++++-----
 xbmc/Application.h                  |  3 ++-
 xbmc/addons/AddonManager.cpp        |  9 +++++----
 xbmc/addons/AddonManager.h          | 18 +++++++++---------
 xbmc/addons/addoninfo/AddonType.cpp | 14 ++++++++++++++
 xbmc/addons/addoninfo/AddonType.h   |  9 +++++++++
 xbmc/filesystem/AddonsDirectory.cpp | 20 ++++----------------
 7 files changed, 56 insertions(+), 35 deletions(-)

diff --git a/xbmc/Application.cpp b/xbmc/Application.cpp
index a82b9a5f2d93..4f6b91f29d55 100644
--- a/xbmc/Application.cpp
+++ b/xbmc/Application.cpp
@@ -789,12 +789,11 @@ bool CApplication::Initialize()
 
     m_confirmSkinChange = false;
 
-    std::vector<std::string> incompatibleAddons;
+    std::vector<AddonInfoPtr> incompatibleAddons;
     event.Reset();
 
     // Addon migration
-    std::vector<AddonInfoPtr> incompatible;
-    if (CServiceBroker::GetAddonMgr().GetIncompatibleEnabledAddonInfos(incompatible))
+    if (CServiceBroker::GetAddonMgr().GetIncompatibleEnabledAddonInfos(incompatibleAddons))
     {
       if (CAddonSystemSettings::GetInstance().GetAddonAutoUpdateMode() == AUTO_UPDATES_ON)
       {
@@ -824,7 +823,7 @@ bool CApplication::Initialize()
       {
         // If no update is active disable all incompatible addons during start
         m_incompatibleAddons =
-            CServiceBroker::GetAddonMgr().DisableIncompatibleAddons(incompatible);
+            CServiceBroker::GetAddonMgr().DisableIncompatibleAddons(incompatibleAddons);
       }
     }
 
@@ -3822,7 +3821,16 @@ bool CApplication::OnMessage(CGUIMessage& message)
 
         if (!m_incompatibleAddons.empty())
         {
-          auto addonList = StringUtils::Join(m_incompatibleAddons, ", ");
+          // filter addons that are not dependencies
+          std::vector<std::string> disabledAddonNames;
+          for (const auto& addoninfo : m_incompatibleAddons)
+          {
+            if (!CAddonType::IsDependencyType(addoninfo->MainType()))
+              disabledAddonNames.emplace_back(addoninfo->Name());
+          }
+
+          // migration (incompatible addons) dialog
+          auto addonList = StringUtils::Join(disabledAddonNames, ", ");
           auto msg = StringUtils::Format(g_localizeStrings.Get(24149).c_str(), addonList.c_str());
           HELPERS::ShowOKDialogText(CVariant{24148}, CVariant{std::move(msg)});
           m_incompatibleAddons.clear();
diff --git a/xbmc/Application.h b/xbmc/Application.h
index eb98a37f78d5..5f94dd3e075a 100644
--- a/xbmc/Application.h
+++ b/xbmc/Application.h
@@ -473,7 +473,8 @@ friend class CAppInboundProtocol;
 
   ReplayGainSettings m_replayGainSettings;
   std::vector<IActionListener *> m_actionListeners;
-  std::vector<std::string> m_incompatibleAddons;  /*!< Result of addon migration */
+  std::vector<ADDON::AddonInfoPtr>
+      m_incompatibleAddons; /*!< Result of addon migration (incompatible addon infos) */
 
 private:
   mutable CCriticalSection m_critSection; /*!< critical section for all changes to this class, except for changes to triggers */
diff --git a/xbmc/addons/AddonManager.cpp b/xbmc/addons/AddonManager.cpp
index b1b62b7cc67b..8efbf5a1ae20 100644
--- a/xbmc/addons/AddonManager.cpp
+++ b/xbmc/addons/AddonManager.cpp
@@ -381,7 +381,7 @@ bool CAddonMgr::GetIncompatibleAddonInfos(std::vector<AddonInfoPtr>& incompatibl
   return !incompatible.empty();
 }
 
-std::vector<std::string> CAddonMgr::MigrateAddons()
+std::vector<AddonInfoPtr> CAddonMgr::MigrateAddons()
 {
   // install all addon updates
   std::lock_guard<std::mutex> lock(m_installAddonsMutex);
@@ -397,10 +397,10 @@ std::vector<std::string> CAddonMgr::MigrateAddons()
   return DisableIncompatibleAddons(incompatible);
 }
 
-std::vector<std::string> CAddonMgr::DisableIncompatibleAddons(
+std::vector<AddonInfoPtr> CAddonMgr::DisableIncompatibleAddons(
     const std::vector<AddonInfoPtr>& incompatible)
 {
-  std::vector<std::string> changed;
+  std::vector<AddonInfoPtr> changed;
   for (const auto& addon : incompatible)
   {
     CLog::Log(LOGINFO, "ADDON: {} version {} is incompatible", addon->ID(),
@@ -415,7 +415,8 @@ std::vector<std::string> CAddonMgr::DisableIncompatibleAddons(
     {
       CLog::Log(LOGWARNING, "ADDON: failed to disable {}", addon->ID());
     }
-    changed.push_back(addon->Name());
+
+    changed.emplace_back(addon);
   }
 
   return changed;
diff --git a/xbmc/addons/AddonManager.h b/xbmc/addons/AddonManager.h
index f02bcbaa1145..a11eb1445585 100644
--- a/xbmc/addons/AddonManager.h
+++ b/xbmc/addons/AddonManager.h
@@ -134,21 +134,21 @@ namespace ADDON
     bool GetIncompatibleEnabledAddonInfos(std::vector<AddonInfoPtr>& incompatible) const;
 
     /*!
-     * @brief Disable addons in given list.
+     * Migrate all the addons (updates all addons that have an update pending and disables those
+     * that got incompatible)
      *
-     * @param[in] incompatible List of incompatible addon infos
-     * @return list of all addon **names** that were disabled
+     * @return list of all addons (infos) that were modified.
      */
-    std::vector<std::string> DisableIncompatibleAddons(
-        const std::vector<AddonInfoPtr>& incompatible);
+    std::vector<AddonInfoPtr> MigrateAddons();
 
     /*!
-     * Migrate all the addons (updates all addons that have an update pending and disables those
-     * that got incompatible)
+     * @brief Try to disable addons in the given list.
      *
-     * @return list of all addons that were modified.
+     * @param[in] incompatible List of incompatible addon infos
+     * @return list of all addon Infos that were disabled
      */
-    std::vector<std::string> MigrateAddons();
+    std::vector<AddonInfoPtr> DisableIncompatibleAddons(
+        const std::vector<AddonInfoPtr>& incompatible);
 
     /*!
      * Install available addon updates, if any.
diff --git a/xbmc/addons/addoninfo/AddonType.cpp b/xbmc/addons/addoninfo/AddonType.cpp
index 19e96bd73fb9..e17d82ed88bc 100644
--- a/xbmc/addons/addoninfo/AddonType.cpp
+++ b/xbmc/addons/addoninfo/AddonType.cpp
@@ -11,6 +11,15 @@
 #include "addons/addoninfo/AddonInfo.h"
 #include "utils/URIUtils.h"
 
+namespace ADDON
+{
+static const std::set<TYPE> dependencyTypes = {
+    ADDON_SCRAPER_LIBRARY,
+    ADDON_SCRIPT_LIBRARY,
+    ADDON_SCRIPT_MODULE,
+};
+} /* namespace ADDON */
+
 using namespace ADDON;
 
 std::string CAddonType::LibPath() const
@@ -42,3 +51,8 @@ void CAddonType::SetProvides(const std::string& content)
     }
   }
 }
+
+bool CAddonType::IsDependencyType(TYPE type)
+{
+  return dependencyTypes.find(type) != dependencyTypes.end();
+}
diff --git a/xbmc/addons/addoninfo/AddonType.h b/xbmc/addons/addoninfo/AddonType.h
index 3d420ccf81ef..34babd9e0657 100644
--- a/xbmc/addons/addoninfo/AddonType.h
+++ b/xbmc/addons/addoninfo/AddonType.h
@@ -97,6 +97,15 @@ class CAddonType : public CAddonExtensions
     return m_providedSubContent.size();
   }
 
+  /*!
+   * @brief Indicates whether a given type is a dependency type (e.g. addons which the main type is
+   * a script.module)
+   *
+   * @param[in] type the provided type
+   * @return true if type is one of the dependency types
+   */
+  static bool IsDependencyType(TYPE type);
+
 private:
   friend class CAddonInfoBuilder;
 
diff --git a/xbmc/filesystem/AddonsDirectory.cpp b/xbmc/filesystem/AddonsDirectory.cpp
index 64b8f0eaac63..f90e68c9123d 100644
--- a/xbmc/filesystem/AddonsDirectory.cpp
+++ b/xbmc/filesystem/AddonsDirectory.cpp
@@ -52,12 +52,6 @@ const auto CATEGORY_GAME_PROVIDERS = "category.gameproviders";
 const auto CATEGORY_GAME_RESOURCES = "category.gameresources";
 const auto CATEGORY_GAME_SUPPORT_ADDONS = "category.gamesupport";
 
-const std::set<TYPE> dependencyTypes = {
-    ADDON_SCRAPER_LIBRARY,
-    ADDON_SCRIPT_LIBRARY,
-    ADDON_SCRIPT_MODULE,
-};
-
 const std::set<TYPE> infoProviderTypes = {
   ADDON_SCRAPER_ALBUMS,
   ADDON_SCRAPER_ARTISTS,
@@ -144,16 +138,9 @@ static bool IsGameAddon(const AddonPtr& addon)
          IsGameSupportAddon(addon);
 }
 
-static bool IsDependencyType(TYPE type)
-{
-  return dependencyTypes.find(type) != dependencyTypes.end();
-}
-
 static bool IsUserInstalled(const AddonPtr& addon)
 {
-  return std::find_if(dependencyTypes.begin(), dependencyTypes.end(), [&](TYPE type) {
-           return addon->MainType() == type;
-         }) == dependencyTypes.end();
+  return !CAddonType::IsDependencyType(addon->MainType());
 }
 
 static bool IsOrphaned(const AddonPtr& addon, const VECADDONS& all)
@@ -350,8 +337,9 @@ static void GenerateMainCategoryListing(const CURL& path, const VECADDONS& addon
      *   subtypes (audio, video, app or/and game) and not needed to show
      *   together in a Script or Plugin list
      */
-    if (!IsInfoProviderType(type) && !IsLookAndFeelType(type) && !IsDependencyType(type) &&
-        !IsGameType(type) && type != ADDON_SCRIPT && type != ADDON_PLUGIN)
+    if (!IsInfoProviderType(type) && !IsLookAndFeelType(type) &&
+        !CAddonType::IsDependencyType(type) && !IsGameType(type) && type != ADDON_SCRIPT &&
+        type != ADDON_PLUGIN)
       uncategorized.insert(static_cast<TYPE>(i));
   }
   GenerateTypeListing(path, uncategorized, addons, items);

From 2bf55fb128b84a0af1e917ad2deb22ec5fdec482 Mon Sep 17 00:00:00 2001
From: enen92 <92enen@gmail.com>
Date: Sun, 5 Jul 2020 15:14:16 +0100
Subject: [PATCH 2/2] [Addons] Remove unused function definition

---
 xbmc/addons/AddonManager.h | 2 --
 1 file changed, 2 deletions(-)

diff --git a/xbmc/addons/AddonManager.h b/xbmc/addons/AddonManager.h
index a11eb1445585..a230bb2e5bbb 100644
--- a/xbmc/addons/AddonManager.h
+++ b/xbmc/addons/AddonManager.h
@@ -117,8 +117,6 @@ namespace ADDON
     /*! Returns true if there is any addon with available updates, otherwise false */
     bool HasAvailableUpdates();
 
-    static AddonPtr AddonFromProps(const AddonInfoPtr& addonInfo);
-
     /*! \brief Checks for new / updated add-ons
      \return True if everything went ok, false otherwise
      */
