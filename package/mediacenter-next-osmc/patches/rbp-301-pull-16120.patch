From 2bc96c5c8783f69114978af5124f3836ddb34e98 Mon Sep 17 00:00:00 2001
From: Lukas Rusak <lorusak@gmail.com>
Date: Sun, 12 May 2019 10:50:49 -0700
Subject: [PATCH] [network] remove class NetworkAccessPoint and unused dialog
 CGUIDialogAccessPoints

---
 .../resources/strings.po                      |  78 +--
 xbmc/guilib/GUIWindowManager.cpp              |   7 -
 xbmc/guilib/WindowIDs.dox                     |   3 +-
 xbmc/guilib/WindowIDs.h                       |   1 -
 xbmc/input/WindowTranslator.cpp               |   1 -
 xbmc/network/CMakeLists.txt                   |   2 -
 xbmc/network/GUIDialogAccessPoints.cpp        | 125 -----
 xbmc/network/GUIDialogAccessPoints.h          |  36 --
 xbmc/network/Network.cpp                      |  54 --
 xbmc/network/Network.h                        |  55 +-
 .../android/network/NetworkAndroid.cpp        |  42 --
 .../platform/android/network/NetworkAndroid.h |   5 -
 xbmc/platform/linux/network/NetworkLinux.cpp  | 505 ------------------
 xbmc/platform/linux/network/NetworkLinux.h    |  11 -
 xbmc/platform/win10/network/NetworkWin10.cpp  | 125 +----
 xbmc/platform/win10/network/NetworkWin10.h    |  19 +-
 xbmc/platform/win32/network/NetworkWin32.cpp  | 248 ---------
 xbmc/platform/win32/network/NetworkWin32.h    |  11 -
 18 files changed, 8 insertions(+), 1320 deletions(-)
 delete mode 100644 xbmc/network/GUIDialogAccessPoints.cpp
 delete mode 100644 xbmc/network/GUIDialogAccessPoints.h

diff --git a/addons/resource.language.en_gb/resources/strings.po b/addons/resource.language.en_gb/resources/strings.po
index 186e8dc0c8ee..42d5a0ceed05 100644
--- a/addons/resource.language.en_gb/resources/strings.po
+++ b/addons/resource.language.en_gb/resources/strings.po
@@ -3481,76 +3481,7 @@ msgctxt "#774"
 msgid "Slideshow folder"
 msgstr ""
 
-#: system/settings/settings.xml
-msgctxt "#775"
-msgid "Network interface"
-msgstr ""
-
-#: system/settings/settings.xml
-msgctxt "#776"
-msgid "Wireless network name (ESSID)"
-msgstr ""
-
-#: system/settings/settings.xml
-msgctxt "#777"
-msgid "Wireless password"
-msgstr ""
-
-#: system/settings/settings.xml
-msgctxt "#778"
-msgid "Wireless security"
-msgstr ""
-
-#: system/settings/settings.xml
-msgctxt "#779"
-msgid "Save and apply network interface settings"
-msgstr ""
-
-#: system/settings/settings.xml
-msgctxt "#780"
-msgid "No encryption"
-msgstr ""
-
-#: system/settings/settings.xml
-msgctxt "#781"
-msgid "WEP"
-msgstr ""
-
-#: system/settings/settings.xml
-msgctxt "#782"
-msgid "WPA"
-msgstr ""
-
-#: system/settings/settings.xml
-msgctxt "#783"
-msgid "WPA2"
-msgstr ""
-
-msgctxt "#784"
-msgid "Applying network interface settings. Please wait."
-msgstr ""
-
-msgctxt "#785"
-msgid "Network interface restarted successfully."
-msgstr ""
-
-msgctxt "#786"
-msgid "Network interface did not start successfully."
-msgstr ""
-
-#: system/settings/settings.xml
-msgctxt "#787"
-msgid "Interface disabled"
-msgstr ""
-
-msgctxt "#788"
-msgid "Network interface disabled successfully."
-msgstr ""
-
-#: xbmc/network/GUIDialogAccessPoints.cpp
-msgctxt "#789"
-msgid "Wireless network name (ESSID)"
-msgstr ""
+#empty strings from id 775 to 789
 
 #: system/settings/settings.xml
 msgctxt "#790"
@@ -4118,10 +4049,7 @@ msgctxt "#1046"
 msgid "Access points"
 msgstr ""
 
-#: xbmc/network/GUIDialogAccessPoints.cpp
-msgctxt "#1047"
-msgid "Other..."
-msgstr ""
+#empty string with id 1047
 
 #: system/settings/settings.xml
 msgctxt "#1048"
@@ -21342,7 +21270,7 @@ msgctxt "#38309"
 msgid "Output information to NFO files"
 msgstr ""
 
-#. See #38309 when NFO and art export disabled so only artist folders 
+#. See #38309 when NFO and art export disabled so only artist folders
 #: xbmc/settings/dialogs/GUIDialogLibExportSettings.cpp
 msgctxt "#38310"
 msgid "Output information to NFO files (currently exporting artist folders only)"
diff --git a/xbmc/guilib/GUIWindowManager.cpp b/xbmc/guilib/GUIWindowManager.cpp
index 3b1e63da05f8..b4f33c164ee6 100644
--- a/xbmc/guilib/GUIWindowManager.cpp
+++ b/xbmc/guilib/GUIWindowManager.cpp
@@ -100,9 +100,6 @@
 #include "pictures/GUIDialogPictureInfo.h"
 #include "addons/settings/GUIDialogAddonSettings.h"
 #include "addons/GUIDialogAddonInfo.h"
-#ifdef HAS_LINUX_NETWORK
-#include "network/GUIDialogAccessPoints.h"
-#endif
 
 /* PVR related include Files */
 #include "pvr/PVRManager.h"
@@ -227,9 +224,6 @@ void CGUIWindowManager::CreateWindows()
   Add(new CGUIDialogPictureInfo);
   Add(new CGUIDialogAddonInfo);
   Add(new CGUIDialogAddonSettings);
-#ifdef HAS_LINUX_NETWORK
-  Add(new CGUIDialogAccessPoints);
-#endif
 
   Add(new CGUIDialogLockSettings);
 
@@ -355,7 +349,6 @@ bool CGUIWindowManager::DestroyWindows()
     DestroyWindow(WINDOW_DIALOG_PICTURE_INFO);
     DestroyWindow(WINDOW_DIALOG_ADDON_INFO);
     DestroyWindow(WINDOW_DIALOG_ADDON_SETTINGS);
-    DestroyWindow(WINDOW_DIALOG_ACCESS_POINTS);
     DestroyWindow(WINDOW_DIALOG_SLIDER);
     DestroyWindow(WINDOW_DIALOG_MEDIA_FILTER);
     DestroyWindow(WINDOW_DIALOG_SUBTITLES);
diff --git a/xbmc/guilib/WindowIDs.dox b/xbmc/guilib/WindowIDs.dox
index dd7e7f694afc..2f8d3b691299 100644
--- a/xbmc/guilib/WindowIDs.dox
+++ b/xbmc/guilib/WindowIDs.dox
@@ -43,7 +43,7 @@ This page shows the window names, the window definition, the window ID and the s
 | PlayerControls          | WINDOW_DIALOG_PLAYER_CONTROLS        | 10114     | PlayerControls.xml                  |
 | SeekBar                 | WINDOW_DIALOG_SEEK_BAR               | 10115     | DialogSeekBar.xml                   |
 | PlayerProcessInfo       | WINDOW_DIALOG_PLAYER_PROCESS_INFO    | 10116     | DialogPlayerProcessInfo.xml         |
-| MusicOSD                | WINDOW_DIALOG_MUSIC_OSD              | 10120     | MusicOSD.xml                        |   
+| MusicOSD                | WINDOW_DIALOG_MUSIC_OSD              | 10120     | MusicOSD.xml                        |
 |                         | WINDOW_DIALOG_VIS_SETTINGS           | 10121     |                                     |
 | VisualisationPresetList | WINDOW_DIALOG_VIS_PRESET_LIST        | 10122     | DialogSelect.xml                    |
 | OSDVideoSettings        | WINDOW_DIALOG_VIDEO_OSD_SETTINGS     | 10123     | DialogSettings.xml                  |
@@ -63,7 +63,6 @@ This page shows the window names, the window definition, the window ID and the s
 | BusyDialog              | WINDOW_DIALOG_BUSY                   | 10138     | DialogBusy.xml                      |
 | PictureInfo             | WINDOW_DIALOG_PICTURE_INFO           | 10139     | DialogPictureInfo.xml               |
 | AddonSettings           | WINDOW_DIALOG_ADDON_SETTINGS         | 10140     | DialogAddonSettings.xml             |
-| AccessPoints            | WINDOW_DIALOG_ACCESS_POINTS          | 10141     | DialogAccessPoints.xml              |
 | FullscreenInfo          | WINDOW_DIALOG_FULLSCREEN_INFO        | 10142     | DialogFullScreenInfo.xml            |
 | SliderDialog            | WINDOW_DIALOG_SLIDER                 | 10145     | DialogSlider.xml                    |
 | AddonInformation        | WINDOW_DIALOG_ADDON_INFO             | 10146     | DialogAddonInfo.xml                 |
diff --git a/xbmc/guilib/WindowIDs.h b/xbmc/guilib/WindowIDs.h
index 83b499b682da..539e676c0623 100644
--- a/xbmc/guilib/WindowIDs.h
+++ b/xbmc/guilib/WindowIDs.h
@@ -77,7 +77,6 @@
 #define WINDOW_DIALOG_BUSY                10138
 #define WINDOW_DIALOG_PICTURE_INFO        10139
 #define WINDOW_DIALOG_ADDON_SETTINGS      10140
-#define WINDOW_DIALOG_ACCESS_POINTS       10141
 #define WINDOW_DIALOG_FULLSCREEN_INFO     10142
 #define WINDOW_DIALOG_SLIDER              10145
 #define WINDOW_DIALOG_ADDON_INFO          10146
diff --git a/xbmc/input/WindowTranslator.cpp b/xbmc/input/WindowTranslator.cpp
index 0238e3c2e6ef..8ffd794099c0 100644
--- a/xbmc/input/WindowTranslator.cpp
+++ b/xbmc/input/WindowTranslator.cpp
@@ -103,7 +103,6 @@ const CWindowTranslator::WindowMapByName CWindowTranslator::WindowMappingByName
     { "busydialog"               , WINDOW_DIALOG_BUSY },
     { "busydialognocancel"       , WINDOW_DIALOG_BUSY_NOCANCEL },
     { "pictureinfo"              , WINDOW_DIALOG_PICTURE_INFO },
-    { "accesspoints"             , WINDOW_DIALOG_ACCESS_POINTS },
     { "fullscreeninfo"           , WINDOW_DIALOG_FULLSCREEN_INFO },
     { "sliderdialog"             , WINDOW_DIALOG_SLIDER },
     { "addoninformation"         , WINDOW_DIALOG_ADDON_INFO },
diff --git a/xbmc/network/CMakeLists.txt b/xbmc/network/CMakeLists.txt
index c8acb897d94c..26574df6066e 100644
--- a/xbmc/network/CMakeLists.txt
+++ b/xbmc/network/CMakeLists.txt
@@ -2,7 +2,6 @@ set(SOURCES DNSNameCache.cpp
             EventClient.cpp
             EventPacket.cpp
             EventServer.cpp
-            GUIDialogAccessPoints.cpp
             GUIDialogNetworkSetup.cpp
             Network.cpp
             NetworkServices.cpp
@@ -17,7 +16,6 @@ set(HEADERS DNSNameCache.h
             EventClient.h
             EventPacket.h
             EventServer.h
-            GUIDialogAccessPoints.h
             GUIDialogNetworkSetup.h
             Network.h
             NetworkServices.h
diff --git a/xbmc/network/GUIDialogAccessPoints.cpp b/xbmc/network/GUIDialogAccessPoints.cpp
deleted file mode 100644
index 8d8256ea8f84..000000000000
--- a/xbmc/network/GUIDialogAccessPoints.cpp
+++ /dev/null
@@ -1,125 +0,0 @@
-/*
- *  Copyright (C) 2005-2018 Team Kodi
- *  This file is part of Kodi - https://kodi.tv
- *
- *  SPDX-License-Identifier: GPL-2.0-or-later
- *  See LICENSES/README.md for more information.
- */
-
-#include "GUIDialogAccessPoints.h"
-#include "guilib/GUIMessage.h"
-#include "guilib/GUIKeyboardFactory.h"
-#if defined(TARGET_ANDROID)
-#include "platform/android/network/NetworkAndroid.h"
-#elif defined(TARGET_POSIX)
-#include "platform/linux/network/NetworkLinux.h"
-#endif
-#include "ServiceBroker.h"
-#include "FileItem.h"
-#include "input/Key.h"
-#include "guilib/LocalizeStrings.h"
-#include "utils/Variant.h"
-
-#define CONTROL_ACCESS_POINTS 3
-
-CGUIDialogAccessPoints::CGUIDialogAccessPoints(void)
-    : CGUIDialog(WINDOW_DIALOG_ACCESS_POINTS, "DialogAccessPoints.xml")
-{
-  m_accessPoints = new CFileItemList;
-}
-
-CGUIDialogAccessPoints::~CGUIDialogAccessPoints(void)
-{
-  delete m_accessPoints;
-}
-
-bool CGUIDialogAccessPoints::OnAction(const CAction &action)
-{
-  if (action.GetID() == ACTION_SELECT_ITEM)
-  {
-    CGUIMessage msg(GUI_MSG_ITEM_SELECTED, GetID(), CONTROL_ACCESS_POINTS);
-    OnMessage(msg);
-    int iItem = msg.GetParam1();
-
-    if (iItem == (int) m_aps.size())
-    {
-       m_selectedAPEssId = "";
-       if (CGUIKeyboardFactory::ShowAndGetInput(m_selectedAPEssId, CVariant{g_localizeStrings.Get(789)}, false))
-       {
-         m_selectedAPEncMode = m_aps[iItem].getEncryptionMode();
-         m_wasItemSelected = true;
-         Close();
-         return true;
-       }
-    }
-    else
-    {
-       m_selectedAPEssId = m_aps[iItem].getEssId();
-       m_selectedAPEncMode = m_aps[iItem].getEncryptionMode();
-       m_wasItemSelected = true;
-       Close();
-       return true;
-    }
-  }
-
-  return CGUIDialog::OnAction(action);
-}
-
-void CGUIDialogAccessPoints::OnInitWindow()
-{
-  m_wasItemSelected = false;
-
-  CGUIDialog::OnInitWindow();
-
-  CGUIMessage msgReset(GUI_MSG_LABEL_RESET, GetID(), CONTROL_ACCESS_POINTS);
-  OnMessage(msgReset);
-
-  m_accessPoints->Clear();
-
-  std::string ifaceName(m_interfaceName);
-  CNetworkInterface* iface = CServiceBroker::GetNetwork().GetInterfaceByName(ifaceName);
-  m_aps = iface->GetAccessPoints();
-
-  for (int i = 0; i < (int) m_aps.size(); i++)
-  {
-      CFileItemPtr item(new CFileItem(m_aps[i].getEssId()));
-
-      int q = m_aps[i].getQuality();
-      if (q <= 20) item->SetArt("thumb", "ap-signal1.png");
-      else if (q <= 40) item->SetArt("thumb", "ap-signal2.png");
-      else if (q <= 60) item->SetArt("thumb", "ap-signal3.png");
-      else if (q <= 80) item->SetArt("thumb", "ap-signal4.png");
-      else if (q <= 100) item->SetArt("thumb", "ap-signal5.png");
-
-      if (m_aps[i].getEncryptionMode() != ENC_NONE)
-         item->SetIconImage("ap-lock.png");
-
-      m_accessPoints->Add(item);
-  }
-
-  CFileItemPtr item(new CFileItem(g_localizeStrings.Get(1047)));
-  m_accessPoints->Add(item);
-
-  CGUIMessage msg(GUI_MSG_LABEL_BIND, GetID(), CONTROL_ACCESS_POINTS, 0, 0, m_accessPoints);
-  OnMessage(msg);
-}
-
-void CGUIDialogAccessPoints::SetInterfaceName(std::string interfaceName)
-{
-  m_interfaceName = interfaceName;
-}
-
-std::string CGUIDialogAccessPoints::GetSelectedAccessPointEssId()
-{
-  return m_selectedAPEssId;
-}
-
-EncMode CGUIDialogAccessPoints::GetSelectedAccessPointEncMode()
-{
-  return m_selectedAPEncMode;
-}
-
-bool CGUIDialogAccessPoints::WasItemSelected()
-{
-  return m_wasItemSelected;
-}
diff --git a/xbmc/network/GUIDialogAccessPoints.h b/xbmc/network/GUIDialogAccessPoints.h
deleted file mode 100644
index dcc0522f5bf5..000000000000
--- a/xbmc/network/GUIDialogAccessPoints.h
+++ /dev/null
@@ -1,36 +0,0 @@
-/*
- *  Copyright (C) 2005-2018 Team Kodi
- *  This file is part of Kodi - https://kodi.tv
- *
- *  SPDX-License-Identifier: GPL-2.0-or-later
- *  See LICENSES/README.md for more information.
- */
-
-#pragma once
-
-#include <vector>
-#include "guilib/GUIDialog.h"
-#include "Network.h"
-
-class CFileItemList;
-
-class CGUIDialogAccessPoints : public CGUIDialog
-{
-public:
-  CGUIDialogAccessPoints(void);
-  ~CGUIDialogAccessPoints(void) override;
-  void OnInitWindow() override;
-  bool OnAction(const CAction &action) override;
-  void SetInterfaceName(std::string interfaceName);
-  std::string GetSelectedAccessPointEssId();
-  EncMode GetSelectedAccessPointEncMode();
-  bool WasItemSelected();
-
-private:
-  std::vector<NetworkAccessPoint> m_aps;
-  std::string m_interfaceName;
-  std::string m_selectedAPEssId;
-  EncMode m_selectedAPEncMode;
-  bool m_wasItemSelected;
-  CFileItemList *m_accessPoints;
-};
diff --git a/xbmc/network/Network.cpp b/xbmc/network/Network.cpp
index 8b7fe93a569b..a49a57f1536c 100644
--- a/xbmc/network/Network.cpp
+++ b/xbmc/network/Network.cpp
@@ -86,45 +86,6 @@ bool in_ether (const char *bufp, unsigned char *addr)
   return true;
 }
 
-int NetworkAccessPoint::getQuality() const
-{
-  // Cisco dBm lookup table (partially nonlinear)
-  // Source: "Converting Signal Strength Percentage to dBm Values, 2002"
-  int quality;
-  if (m_dBm >= -10) quality = 100;
-  else if (m_dBm >= -20) quality = 85 + (m_dBm + 20);
-  else if (m_dBm >= -30) quality = 77 + (m_dBm + 30);
-  else if (m_dBm >= -60) quality = 48 + (m_dBm + 60);
-  else if (m_dBm >= -98) quality = 13 + (m_dBm + 98);
-  else if (m_dBm >= -112) quality = 1 + (m_dBm + 112);
-  else quality = 0;
-  return quality;
-}
-
-int NetworkAccessPoint::FreqToChannel(float frequency)
-{
-  int IEEE80211Freq[] = {2412, 2417, 2422, 2427, 2432,
-                         2437, 2442, 2447, 2452, 2457,
-                         2462, 2467, 2472, 2484,
-                         5180, 5200, 5210, 5220, 5240, 5250,
-                         5260, 5280, 5290, 5300, 5320,
-                         5745, 5760, 5765, 5785, 5800, 5805, 5825};
-  int IEEE80211Ch[] =   {   1,    2,    3,    4,    5,
-                            6,    7,    8,    9,   10,
-                           11,   12,   13,   14,
-                           36,   40,   42,   44,   48,   50,
-                           52,   56,   58,   60,   64,
-                          149,  152,  153,  157,  160,  161,  165};
-  // Round frequency to the nearest MHz
-  int mod_chan = (int)(frequency / 1000000 + 0.5f);
-  for (unsigned int i = 0; i < sizeof(IEEE80211Freq) / sizeof(int); ++i)
-  {
-    if (IEEE80211Freq[i] == mod_chan)
-      return IEEE80211Ch[i];
-  }
-  return 0; // unknown
-}
-
 CNetworkBase::CNetworkBase() :
   m_services(new CNetworkServices())
 {
@@ -248,21 +209,6 @@ bool CNetworkBase::IsConnected()
    return GetFirstConnectedInterface() != NULL;
 }
 
-CNetworkInterface* CNetworkBase::GetInterfaceByName(const std::string& name)
-{
-   std::vector<CNetworkInterface*>& ifaces = GetInterfaceList();
-   std::vector<CNetworkInterface*>::const_iterator iter = ifaces.begin();
-   while (iter != ifaces.end())
-   {
-      CNetworkInterface* iface = *iter;
-      if (iface && iface->GetName() == name)
-         return iface;
-      ++iter;
-   }
-
-   return NULL;
-}
-
 void CNetworkBase::NetworkMessage(EMESSAGE message, int param)
 {
   switch( message )
diff --git a/xbmc/network/Network.h b/xbmc/network/Network.h
index e5d2cba35ea4..eba8941a32b9 100644
--- a/xbmc/network/Network.h
+++ b/xbmc/network/Network.h
@@ -15,56 +15,11 @@
 
 #include "PlatformDefs.h"
 
-enum EncMode { ENC_NONE = 0, ENC_WEP = 1, ENC_WPA = 2, ENC_WPA2 = 3 };
-enum NetworkAssignment { NETWORK_DASH = 0, NETWORK_DHCP = 1, NETWORK_STATIC = 2, NETWORK_DISABLED = 3 };
-
-class NetworkAccessPoint
-{
-public:
-    NetworkAccessPoint(const std::string &essId, const std::string &macAddress, int signalStrength, EncMode encryption, int channel = 0):
-      m_essId(essId),
-      m_macAddress(macAddress)
-    {
-      m_dBm            = signalStrength;
-      m_encryptionMode = encryption;
-      m_channel        = channel;
-   }
-
-   const std::string &getEssId() const { return m_essId; }
-   const std::string &getMacAddress() const { return m_macAddress; }
-   int getSignalStrength() const { return m_dBm; }
-   EncMode getEncryptionMode() const { return m_encryptionMode; }
-   int getChannel() const { return m_channel; }
-
-   /*!
-    \brief  Returns the quality, normalized as a percentage, of the network access point
-    \return The quality as an integer between 0 and 100
-    */
-   int getQuality() const;
-
-   /*!
-    \brief  Translates a 802.11a+g frequency into the corresponding channel
-    \param  frequency  The frequency of the channel in units of Hz
-    \return The channel as an integer between 1 and 14 (802.11b+g) or
-            between 36 and 165 (802.11a), or 0 if unknown.
-    */
-   static int FreqToChannel(float frequency);
-
-private:
-   std::string  m_essId;
-   std::string  m_macAddress;
-   int         m_dBm;
-   EncMode     m_encryptionMode;
-   int         m_channel;
-};
-
 class CNetworkInterface
 {
 public:
    virtual ~CNetworkInterface() = default;
 
-   virtual const std::string& GetName(void) const = 0;
-
    virtual bool IsEnabled(void) const = 0;
    virtual bool IsConnected(void) const = 0;
 
@@ -76,13 +31,6 @@ class CNetworkInterface
    virtual std::string GetCurrentIPAddress() const = 0;
    virtual std::string GetCurrentNetmask() const = 0;
    virtual std::string GetCurrentDefaultGateway(void) const = 0;
-   virtual std::string GetCurrentWirelessEssId(void) const = 0;
-
-   // Returns the list of access points in the area
-   virtual std::vector<NetworkAccessPoint> GetAccessPoints(void) const = 0;
-
-   virtual void GetSettings(NetworkAssignment& assignment, std::string& ipAddress, std::string& networkMask, std::string& defaultGateway, std::string& essId, std::string& key, EncMode& encryptionMode) const = 0;
-   virtual void SetSettings(const NetworkAssignment& assignment, const std::string& ipAddress, const std::string& networkMask, const std::string& defaultGateway, const std::string& essId, const std::string& key, const EncMode& encryptionMode) = 0;
 };
 
 class CSettings;
@@ -109,7 +57,6 @@ class CNetworkBase
 
    // Return the list of interfaces
    virtual std::vector<CNetworkInterface*>& GetInterfaceList(void) = 0;
-   CNetworkInterface* GetInterfaceByName(const std::string& name);
 
    // Return the first interface which is active
    virtual CNetworkInterface* GetFirstConnectedInterface(void);
@@ -158,7 +105,7 @@ class CNetworkBase
    /*!
     \brief  convert prefix length of IPv4 address to IP mask representation
     \param  prefix length
-    \return 
+    \return
    */
    static std::string GetMaskByPrefixLength(uint8_t prefixLength);
 
diff --git a/xbmc/platform/android/network/NetworkAndroid.cpp b/xbmc/platform/android/network/NetworkAndroid.cpp
index d26657fd32af..560f2a76977c 100644
--- a/xbmc/platform/android/network/NetworkAndroid.cpp
+++ b/xbmc/platform/android/network/NetworkAndroid.cpp
@@ -47,11 +47,6 @@ std::vector<std::string> CNetworkInterfaceAndroid::GetNameServers()
   return ret;
 }
 
-const std::string& CNetworkInterfaceAndroid::GetName() const
-{
-  return m_name;
-}
-
 bool CNetworkInterfaceAndroid::IsEnabled() const
 {
   CJNIConnectivityManager connman(CXBMCApp::getSystemService(CJNIContext::CONNECTIVITY_SERVICE));
@@ -210,43 +205,6 @@ std::string CNetworkInterfaceAndroid::GetCurrentDefaultGateway() const
   return "";
 }
 
-std::string CNetworkInterfaceAndroid::GetCurrentWirelessEssId() const
-{
-  std::string ret;
-
-  CJNIConnectivityManager connman(CXBMCApp::getSystemService(CJNIContext::CONNECTIVITY_SERVICE));
-  CJNINetworkInfo ni = connman.getNetworkInfo(m_network);
-  if (!ni)
-    return "";
-
-  if (ni.getType() == CJNIConnectivityManager::TYPE_WIFI)
-  {
-    CJNIWifiManager wm = CXBMCApp::getSystemService("wifi");
-    if (wm.isWifiEnabled())
-    {
-      CJNIWifiInfo wi = wm.getConnectionInfo();
-      ret = wi.getSSID();
-    }
-  }
-  return ret;
-}
-
-std::vector<NetworkAccessPoint> CNetworkInterfaceAndroid::GetAccessPoints() const
-{
-  // TODO
-  return std::vector<NetworkAccessPoint>();
-}
-
-void CNetworkInterfaceAndroid::GetSettings(NetworkAssignment& assignment, std::string& ipAddress, std::string& networkMask, std::string& defaultGateway, std::string& essId, std::string& key, EncMode& encryptionMode) const
-{
-  // Not implemented
-}
-
-void CNetworkInterfaceAndroid::SetSettings(const NetworkAssignment& assignment, const std::string& ipAddress, const std::string& networkMask, const std::string& defaultGateway, const std::string& essId, const std::string& key, const EncMode& encryptionMode)
-{
-  // Not implemented
-}
-
 std::string CNetworkInterfaceAndroid::GetHostName()
 {
   CJNIList<CJNILinkAddress> lla = m_lp.getLinkAddresses();
diff --git a/xbmc/platform/android/network/NetworkAndroid.h b/xbmc/platform/android/network/NetworkAndroid.h
index bcc61ec56e39..832fe62f7a48 100644
--- a/xbmc/platform/android/network/NetworkAndroid.h
+++ b/xbmc/platform/android/network/NetworkAndroid.h
@@ -27,7 +27,6 @@ class CNetworkInterfaceAndroid : public CNetworkInterface
 
   // CNetworkInterface interface
 public:
-  virtual const std::string& GetName() const override;
   virtual bool IsEnabled() const override;
   virtual bool IsConnected() const override;
   virtual std::string GetMacAddress() const override;
@@ -36,10 +35,6 @@ class CNetworkInterfaceAndroid : public CNetworkInterface
   virtual std::string GetCurrentIPAddress() const override;
   virtual std::string GetCurrentNetmask() const override;
   virtual std::string GetCurrentDefaultGateway() const override;
-  virtual std::string GetCurrentWirelessEssId() const override;
-  virtual std::vector<NetworkAccessPoint> GetAccessPoints() const override;
-  virtual void GetSettings(NetworkAssignment& assignment, std::string& ipAddress, std::string& networkMask, std::string& defaultGateway, std::string& essId, std::string& key, EncMode& encryptionMode) const override;
-  virtual void SetSettings(const NetworkAssignment& assignment, const std::string& ipAddress, const std::string& networkMask, const std::string& defaultGateway, const std::string& essId, const std::string& key, const EncMode& encryptionMode) override;
 
   std::string GetHostName();
 
diff --git a/xbmc/platform/linux/network/NetworkLinux.cpp b/xbmc/platform/linux/network/NetworkLinux.cpp
index a960fee9a8f2..35abf126169e 100644
--- a/xbmc/platform/linux/network/NetworkLinux.cpp
+++ b/xbmc/platform/linux/network/NetworkLinux.cpp
@@ -70,25 +70,6 @@ CNetworkInterfaceLinux::CNetworkInterfaceLinux(CNetworkLinux* network, std::stri
 
 CNetworkInterfaceLinux::~CNetworkInterfaceLinux(void) = default;
 
-const std::string& CNetworkInterfaceLinux::GetName(void) const
-{
-   return m_interfaceName;
-}
-
-bool CNetworkInterfaceLinux::IsWireless() const
-{
-#if defined(TARGET_DARWIN) || defined(TARGET_FREEBSD)
-  return false;
-#else
-  struct iwreq wrq;
-   strcpy(wrq.ifr_name, m_interfaceName.c_str());
-   if (ioctl(m_network->GetSocket(), SIOCGIWNAME, &wrq) < 0)
-      return false;
-#endif
-
-   return true;
-}
-
 bool CNetworkInterfaceLinux::IsEnabled() const
 {
    struct ifreq ifr;
@@ -158,28 +139,6 @@ std::string CNetworkInterfaceLinux::GetCurrentNetmask(void) const
    return result;
 }
 
-std::string CNetworkInterfaceLinux::GetCurrentWirelessEssId(void) const
-{
-   std::string result;
-
-#if defined(TARGET_LINUX)
-   char essid[IW_ESSID_MAX_SIZE + 1];
-   memset(&essid, 0, sizeof(essid));
-
-   struct iwreq wrq;
-   strcpy(wrq.ifr_name,  m_interfaceName.c_str());
-   wrq.u.essid.pointer = (caddr_t) essid;
-   wrq.u.essid.length = IW_ESSID_MAX_SIZE;
-   wrq.u.essid.flags = 0;
-   if (ioctl(m_network->GetSocket(), SIOCGIWESSID, &wrq) >= 0)
-   {
-      result = essid;
-   }
-#endif
-
-   return result;
-}
-
 std::string CNetworkInterfaceLinux::GetCurrentDefaultGateway(void) const
 {
    std::string result;
@@ -628,467 +587,3 @@ bool CNetworkInterfaceLinux::GetHostMacAddress(unsigned long host_ip, std::strin
   return false;
 }
 #endif
-
-std::vector<NetworkAccessPoint> CNetworkInterfaceLinux::GetAccessPoints(void) const
-{
-   std::vector<NetworkAccessPoint> result;
-
-   if (!IsWireless())
-      return result;
-
-#if defined(TARGET_LINUX)
-   // Query the wireless extension's version number. It will help us when we
-   // parse the resulting events
-   struct iwreq iwr;
-   char rangebuffer[sizeof(iw_range) * 2];    /* Large enough */
-   struct iw_range*  range = (struct iw_range*) rangebuffer;
-
-   memset(rangebuffer, 0, sizeof(rangebuffer));
-   iwr.u.data.pointer = (caddr_t) rangebuffer;
-   iwr.u.data.length = sizeof(rangebuffer);
-   iwr.u.data.flags = 0;
-   strncpy(iwr.ifr_name, GetName().c_str(), IFNAMSIZ);
-   iwr.ifr_name[IFNAMSIZ - 1] = 0;
-   if (ioctl(m_network->GetSocket(), SIOCGIWRANGE, &iwr) < 0)
-   {
-      CLog::Log(LOGWARNING, "%-8.16s  Driver has no Wireless Extension version information.",
-         GetName().c_str());
-      return result;
-   }
-
-   // Scan for wireless access points
-   memset(&iwr, 0, sizeof(iwr));
-   strncpy(iwr.ifr_name, GetName().c_str(), IFNAMSIZ);
-   iwr.ifr_name[IFNAMSIZ - 1] = 0;
-   if (ioctl(m_network->GetSocket(), SIOCSIWSCAN, &iwr) < 0)
-   {
-      // Triggering scanning is a privileged operation (root only)
-      if (errno == EPERM)
-         CLog::Log(LOGWARNING, "Cannot initiate wireless scan: ioctl[SIOCSIWSCAN]: %s. Try running as root", strerror(errno));
-      else
-         CLog::Log(LOGWARNING, "Cannot initiate wireless scan: ioctl[SIOCSIWSCAN]: %s", strerror(errno));
-      return result;
-   }
-
-   // Get the results of the scanning. Three scenarios:
-   //    1. There's not enough room in the result buffer (E2BIG)
-   //    2. The scanning is not complete (EAGAIN) and we need to try again. We cap this with 15 seconds.
-   //    3. We're good.
-   int duration = 0; // ms
-   unsigned char* res_buf = NULL;
-   int res_buf_len = IW_SCAN_MAX_DATA;
-   while (duration < 15000)
-   {
-      if (!res_buf)
-         res_buf = (unsigned char*) malloc(res_buf_len);
-
-      if (res_buf == NULL)
-      {
-         CLog::Log(LOGWARNING, "Cannot alloc memory for wireless scanning");
-         return result;
-      }
-
-      strncpy(iwr.ifr_name, GetName().c_str(), IFNAMSIZ);
-      iwr.ifr_name[IFNAMSIZ - 1] = 0;
-      iwr.u.data.pointer = res_buf;
-      iwr.u.data.length = res_buf_len;
-      iwr.u.data.flags = 0;
-      int x = ioctl(m_network->GetSocket(), SIOCGIWSCAN, &iwr);
-      if (x == 0)
-         break;
-
-      if (errno == E2BIG && res_buf_len < 100000)
-      {
-         free(res_buf);
-         res_buf = NULL;
-         res_buf_len *= 2;
-         CLog::Log(LOGDEBUG, "Scan results did not fit - trying larger buffer (%lu bytes)",
-                        (unsigned long) res_buf_len);
-      }
-      else if (errno == EAGAIN)
-      {
-         usleep(250000); // sleep for 250ms
-         duration += 250;
-      }
-      else
-      {
-         CLog::Log(LOGWARNING, "Cannot get wireless scan results: ioctl[SIOCGIWSCAN]: %s", strerror(errno));
-         free(res_buf);
-         return result;
-      }
-   }
-
-   size_t len = iwr.u.data.length;           // total length of the wireless events from the scan results
-   unsigned char* pos = res_buf;             // pointer to the current event (about 10 per wireless network)
-   unsigned char* end = res_buf + len;       // marks the end of the scan results
-   unsigned char* custom;                    // pointer to the event payload
-   struct iw_event iwe_buf, *iwe = &iwe_buf; // buffer to hold individual events
-
-   std::string essId;
-   std::string macAddress;
-   int signalLevel = 0;
-   EncMode encryption = ENC_NONE;
-   int channel = 0;
-
-   while (pos + IW_EV_LCP_LEN <= end)
-   {
-      /* Event data may be unaligned, so make a local, aligned copy
-       * before processing. */
-
-      // copy event prefix (size of event minus IOCTL fixed payload)
-      memcpy(&iwe_buf, pos, IW_EV_LCP_LEN);
-      if (iwe->len <= IW_EV_LCP_LEN)
-         break;
-
-      // if the payload is nontrivial (i.e. > 16 octets) assume it comes after a pointer
-      custom = pos + IW_EV_POINT_LEN;
-      if (range->we_version_compiled > 18 &&
-          (iwe->cmd == SIOCGIWESSID ||
-           iwe->cmd == SIOCGIWENCODE ||
-           iwe->cmd == IWEVGENIE ||
-           iwe->cmd == IWEVCUSTOM))
-      {
-         /* Wireless extensions v19 removed the pointer from struct iw_point */
-         char *data_pos = (char *) &iwe_buf.u.data.length;
-         int data_len = data_pos - (char *) &iwe_buf;
-         memcpy(data_pos, pos + IW_EV_LCP_LEN, sizeof(struct iw_event) - data_len);
-      }
-      else
-      {
-         // copy the rest of the event and point custom toward the payload offset
-         memcpy(&iwe_buf, pos, sizeof(struct iw_event));
-         custom += IW_EV_POINT_OFF;
-      }
-
-      // Interpret the payload based on event type. Each access point generates ~12 different events
-      switch (iwe->cmd)
-      {
-         // Get access point MAC addresses
-         case SIOCGIWAP:
-         {
-            // This event marks a new access point, so push back the old information
-            if (!macAddress.empty())
-               result.push_back(NetworkAccessPoint(essId, macAddress, signalLevel, encryption, channel));
-            unsigned char* mac = (unsigned char*)iwe->u.ap_addr.sa_data;
-            // macAddress is big-endian, write in byte chunks
-            macAddress = StringUtils::Format("%02x-%02x-%02x-%02x-%02x-%02x", mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
-            // Reset the remaining fields
-            essId = "";
-            encryption = ENC_NONE;
-            signalLevel = 0;
-            channel = 0;
-            break;
-         }
-
-         // Get operation mode
-         case SIOCGIWMODE:
-         {
-            // Ignore Ad-Hoc networks (1 is the magic number for this)
-            if (iwe->u.mode == 1)
-               macAddress = "";
-            break;
-         }
-
-         // Get ESSID
-         case SIOCGIWESSID:
-         {
-            char essid[IW_ESSID_MAX_SIZE+1];
-            memset(essid, '\0', sizeof(essid));
-            if ((custom) && (iwe->u.essid.length))
-            {
-               memcpy(essid, custom, iwe->u.essid.length);
-               essId = essid;
-            }
-            break;
-         }
-
-         // Quality part of statistics
-         case IWEVQUAL:
-         {
-            // u.qual.qual is scaled to a vendor-specific RSSI_Max, so use u.qual.level
-            signalLevel = iwe->u.qual.level - 0x100; // and remember we use 8-bit arithmetic
-            break;
-         }
-
-         // Get channel/frequency (Hz)
-         // This gets called twice per network, what's the difference between the two?
-         case SIOCGIWFREQ:
-         {
-            float freq = ((float)iwe->u.freq.m) * pow(10.0, iwe->u.freq.e);
-            if (freq > 1000)
-               channel = NetworkAccessPoint::FreqToChannel(freq);
-            else
-               channel = (int)freq; // Some drivers report channel instead of frequency
-            break;
-         }
-
-         // Get encoding token & mode
-         case SIOCGIWENCODE:
-         {
-            if (!(iwe->u.data.flags & IW_ENCODE_DISABLED) && encryption == ENC_NONE)
-               encryption = ENC_WEP;
-            break;
-         }
-
-         // Generic IEEE 802.11 information element (IE) for WPA, RSN, WMM, ...
-         case IWEVGENIE:
-         {
-            int offset = 0;
-            // Loop on each IE, each IE is minimum 2 bytes
-            while (offset <= (iwe_buf.u.data.length - 2))
-            {
-               switch (custom[offset])
-               {
-                  case 0xdd: /* WPA1 */
-                     if (encryption != ENC_WPA2)
-                        encryption = ENC_WPA;
-                     break;
-                  case 0x30: /* WPA2 */
-                     encryption = ENC_WPA2;
-               }
-               // Skip over this IE to the next one in the list
-               offset += custom[offset+1] + 2;
-            }
-         }
-      }
-
-      pos += iwe->len;
-   }
-
-   if (!macAddress.empty())
-      result.push_back(NetworkAccessPoint(essId, macAddress, signalLevel, encryption, channel));
-
-   free(res_buf);
-   res_buf = NULL;
-#endif
-
-   return result;
-}
-
-void CNetworkInterfaceLinux::GetSettings(NetworkAssignment& assignment, std::string& ipAddress, std::string& networkMask, std::string& defaultGateway, std::string& essId, std::string& key, EncMode& encryptionMode)  const
-{
-   ipAddress = "0.0.0.0";
-   networkMask = "0.0.0.0";
-   defaultGateway = "0.0.0.0";
-   essId = "";
-   key = "";
-   encryptionMode = ENC_NONE;
-   assignment = NETWORK_DISABLED;
-
-#if defined(TARGET_LINUX)
-   FILE* fp = fopen("/etc/network/interfaces", "r");
-   if (!fp)
-   {
-      //! @todo implement
-      return;
-   }
-
-   char* line = NULL;
-   size_t linel = 0;
-   std::string s;
-   bool foundInterface = false;
-
-   while (getdelim(&line, &linel, '\n', fp) > 0)
-   {
-      std::vector<std::string> tokens;
-
-      s = line;
-      StringUtils::TrimLeft(s, " \t");
-      StringUtils::TrimRight(s," \n");
-
-      // skip comments
-      if (s.empty() || s[0] == '#')
-         continue;
-
-      // look for "iface <interface name> inet"
-      StringUtils::Tokenize(s, tokens, " ");
-      if (!foundInterface &&
-          tokens.size() >=3 &&
-          StringUtils::EqualsNoCase(tokens[0], "iface") &&
-          StringUtils::EqualsNoCase(tokens[1], GetName()) &&
-          StringUtils::EqualsNoCase(tokens[2], "inet"))
-      {
-         if (StringUtils::EqualsNoCase(tokens[3], "dhcp"))
-         {
-            assignment = NETWORK_DHCP;
-            foundInterface = true;
-         }
-         if (StringUtils::EqualsNoCase(tokens[3], "static"))
-         {
-            assignment = NETWORK_STATIC;
-            foundInterface = true;
-         }
-      }
-
-      if (foundInterface && tokens.size() == 2)
-      {
-         if (StringUtils::EqualsNoCase(tokens[0], "address")) ipAddress = tokens[1];
-         else if (StringUtils::EqualsNoCase(tokens[0], "netmask")) networkMask = tokens[1];
-         else if (StringUtils::EqualsNoCase(tokens[0], "gateway")) defaultGateway = tokens[1];
-         else if (StringUtils::EqualsNoCase(tokens[0], "wireless-essid")) essId = tokens[1];
-         else if (StringUtils::EqualsNoCase(tokens[0], "wireless-key"))
-         {
-            key = tokens[1];
-            if (key.length() > 2 && key[0] == 's' && key[1] == ':')
-               key.erase(0, 2);
-            encryptionMode = ENC_WEP;
-         }
-         else if (StringUtils::EqualsNoCase(tokens[0], "wpa-ssid")) essId = tokens[1];
-         else if (StringUtils::EqualsNoCase(tokens[0], "wpa-proto") && StringUtils::EqualsNoCase(tokens[1], "WPA")) encryptionMode = ENC_WPA;
-         else if (StringUtils::EqualsNoCase(tokens[0], "wpa-proto") && StringUtils::EqualsNoCase(tokens[1], "WPA2")) encryptionMode = ENC_WPA2;
-         else if (StringUtils::EqualsNoCase(tokens[0], "wpa-psk")) key = tokens[1];
-         else if (StringUtils::EqualsNoCase(tokens[0], "auto") || StringUtils::EqualsNoCase(tokens[0], "iface") || StringUtils::EqualsNoCase(tokens[0], "mapping")) break;
-      }
-   }
-   free(line);
-
-   // Fallback in case wpa-proto is not set
-   if (key != "" && encryptionMode == ENC_NONE)
-      encryptionMode = ENC_WPA;
-
-   fclose(fp);
-#endif
-}
-
-void CNetworkInterfaceLinux::SetSettings(const NetworkAssignment& assignment, const std::string& ipAddress, const std::string& networkMask, const std::string& defaultGateway, const std::string& essId, const std::string& key, const EncMode& encryptionMode)
-{
-#if defined(TARGET_LINUX)
-   FILE* fr = fopen("/etc/network/interfaces", "r");
-   if (!fr)
-   {
-      //! @todo implement
-      return;
-   }
-
-   FILE* fw = fopen("/tmp/interfaces.temp", "w");
-   if (!fw)
-   {
-      //! @todo implement
-      fclose(fr);
-      return;
-   }
-
-   char* line = NULL;
-   size_t linel = 0;
-   std::string s;
-   bool foundInterface = false;
-   bool dataWritten = false;
-
-   while (getdelim(&line, &linel, '\n', fr) > 0)
-   {
-      std::vector<std::string> tokens;
-
-      s = line;
-      StringUtils::TrimLeft(s, " \t");
-      StringUtils::TrimRight(s," \n");
-
-      // skip comments
-      if (!foundInterface && (s.empty() || s[0] == '#'))
-      {
-        fprintf(fw, "%s", line);
-        continue;
-      }
-
-      // look for "iface <interface name> inet"
-      StringUtils::Tokenize(s, tokens, " ");
-      if (tokens.size() == 2 &&
-          StringUtils::EqualsNoCase(tokens[0], "auto") &&
-          StringUtils::EqualsNoCase(tokens[1], GetName()))
-      {
-         continue;
-      }
-      else if (!foundInterface &&
-          tokens.size() == 4 &&
-          StringUtils::EqualsNoCase(tokens[0], "iface") &&
-          StringUtils::EqualsNoCase(tokens[1], GetName()) &&
-          StringUtils::EqualsNoCase(tokens[2], "inet"))
-      {
-         foundInterface = true;
-         WriteSettings(fw, assignment, ipAddress, networkMask, defaultGateway, essId, key, encryptionMode);
-         dataWritten = true;
-      }
-      else if (foundInterface &&
-               tokens.size() == 4 &&
-               StringUtils::EqualsNoCase(tokens[0], "iface"))
-      {
-        foundInterface = false;
-        fprintf(fw, "%s", line);
-      }
-      else if (!foundInterface)
-      {
-        fprintf(fw, "%s", line);
-      }
-   }
-   free(line);
-
-   if (!dataWritten && assignment != NETWORK_DISABLED)
-   {
-      fprintf(fw, "\n");
-      WriteSettings(fw, assignment, ipAddress, networkMask, defaultGateway, essId, key, encryptionMode);
-   }
-
-   fclose(fr);
-   fclose(fw);
-
-   // Rename the file
-   if (rename("/tmp/interfaces.temp", "/etc/network/interfaces") < 0)
-   {
-      //! @todo implement
-      return;
-   }
-
-   std::string cmd = "/sbin/ifdown " + GetName();
-   if (system(cmd.c_str()) != 0)
-     CLog::Log(LOGERROR, "Unable to stop interface %s", GetName().c_str());
-   else
-     CLog::Log(LOGINFO, "Stopped interface %s", GetName().c_str());
-
-   if (assignment != NETWORK_DISABLED)
-   {
-      cmd = "/sbin/ifup " + GetName();
-      if (system(cmd.c_str()) != 0)
-        CLog::Log(LOGERROR, "Unable to start interface %s", GetName().c_str());
-      else
-        CLog::Log(LOGINFO, "Started interface %s", GetName().c_str());
-   }
-#endif
-}
-
-void CNetworkInterfaceLinux::WriteSettings(FILE* fw, NetworkAssignment assignment, const std::string& ipAddress, const std::string& networkMask, const std::string& defaultGateway, const std::string& essId, const std::string& key, const EncMode& encryptionMode)
-{
-   if (assignment == NETWORK_DHCP)
-   {
-      fprintf(fw, "iface %s inet dhcp\n", GetName().c_str());
-   }
-   else if (assignment == NETWORK_STATIC)
-   {
-      fprintf(fw, "iface %s inet static\n", GetName().c_str());
-      fprintf(fw, "  address %s\n", ipAddress.c_str());
-      fprintf(fw, "  netmask %s\n", networkMask.c_str());
-      fprintf(fw, "  gateway %s\n", defaultGateway.c_str());
-   }
-
-   if (assignment != NETWORK_DISABLED && IsWireless())
-   {
-      if (encryptionMode == ENC_NONE)
-      {
-         fprintf(fw, "  wireless-essid %s\n", essId.c_str());
-      }
-      else if (encryptionMode == ENC_WEP)
-      {
-         fprintf(fw, "  wireless-essid %s\n", essId.c_str());
-         fprintf(fw, "  wireless-key s:%s\n", key.c_str());
-      }
-      else if (encryptionMode == ENC_WPA || encryptionMode == ENC_WPA2)
-      {
-         fprintf(fw, "  wpa-ssid %s\n", essId.c_str());
-         fprintf(fw, "  wpa-psk %s\n", key.c_str());
-         fprintf(fw, "  wpa-proto %s\n", encryptionMode == ENC_WPA ? "WPA" : "WPA2");
-      }
-   }
-
-   if (assignment != NETWORK_DISABLED)
-      fprintf(fw, "auto %s\n\n", GetName().c_str());
-}
-
-
diff --git a/xbmc/platform/linux/network/NetworkLinux.h b/xbmc/platform/linux/network/NetworkLinux.h
index 317f0193dc08..13d87076aee0 100644
--- a/xbmc/platform/linux/network/NetworkLinux.h
+++ b/xbmc/platform/linux/network/NetworkLinux.h
@@ -21,11 +21,8 @@ class CNetworkInterfaceLinux : public CNetworkInterface
    CNetworkInterfaceLinux(CNetworkLinux* network, std::string interfaceName, char interfaceMacAddrRaw[6]);
    ~CNetworkInterfaceLinux(void) override;
 
-   const std::string& GetName(void) const override;
-
    bool IsEnabled(void) const override;
    bool IsConnected(void) const override;
-   bool IsWireless(void) const;
 
    std::string GetMacAddress(void) const override;
    void GetMacAddressRaw(char rawMac[6]) const override;
@@ -35,16 +32,8 @@ class CNetworkInterfaceLinux : public CNetworkInterface
    std::string GetCurrentIPAddress() const override;
    std::string GetCurrentNetmask() const override;
    std::string GetCurrentDefaultGateway(void) const override;
-   std::string GetCurrentWirelessEssId(void) const override;
-
-   void GetSettings(NetworkAssignment& assignment, std::string& ipAddress, std::string& networkMask, std::string& defaultGateway, std::string& essId, std::string& key, EncMode& encryptionMode) const override;
-   void SetSettings(const NetworkAssignment& assignment, const std::string& ipAddress, const std::string& networkMask, const std::string& defaultGateway, const std::string& essId, const std::string& key, const EncMode& encryptionMode) override;
-
-   // Returns the list of access points in the area
-   std::vector<NetworkAccessPoint> GetAccessPoints(void) const override;
 
 private:
-   void WriteSettings(FILE* fw, NetworkAssignment assignment, const std::string& ipAddress, const std::string& networkMask, const std::string& defaultGateway, const std::string& essId, const std::string& key, const EncMode& encryptionMode);
    std::string     m_interfaceName;
    std::string     m_interfaceMacAdr;
    char           m_interfaceMacAddrRaw[6];
diff --git a/xbmc/platform/win10/network/NetworkWin10.cpp b/xbmc/platform/win10/network/NetworkWin10.cpp
index d387139cd34e..c6ede9a62042 100644
--- a/xbmc/platform/win10/network/NetworkWin10.cpp
+++ b/xbmc/platform/win10/network/NetworkWin10.cpp
@@ -10,7 +10,6 @@
 #include "filesystem/SpecialProtocol.h"
 #include "platform/win10/AsyncHelpers.h"
 #include "platform/win32/WIN32Util.h"
-#include "platform/win32/CharsetConverter.h"
 #include "settings/Settings.h"
 #include "threads/SingleLock.h"
 #include "utils/log.h"
@@ -56,30 +55,15 @@ typedef struct icmp_echo_reply {
 #endif //! IP_STATUS_BASE
 #include <Icmpapi.h>
 
-using namespace winrt::Windows::Networking;
 using namespace winrt::Windows::Networking::Connectivity;
-using namespace KODI::PLATFORM::WINDOWS;
 
-CNetworkInterfaceWin10::CNetworkInterfaceWin10(const PIP_ADAPTER_ADDRESSES address, IUnknown* winRTadapter)
+CNetworkInterfaceWin10::CNetworkInterfaceWin10(const PIP_ADAPTER_ADDRESSES address)
 {
   m_adapterAddr = address;
-  m_adaptername = address->AdapterName;
-  winrt::attach_abi(m_winRT, winRTadapter);
-  m_profile = nullptr;
 }
 
 CNetworkInterfaceWin10::~CNetworkInterfaceWin10(void) = default;
 
-const std::string& CNetworkInterfaceWin10::GetName(void) const
-{
-  return m_adaptername;
-}
-
-bool CNetworkInterfaceWin10::IsWireless() const
-{
-  return m_adapterAddr->IfType == IF_TYPE_IEEE80211;
-}
-
 bool CNetworkInterfaceWin10::IsEnabled() const
 {
   return true;
@@ -110,84 +94,6 @@ bool CNetworkInterfaceWin10::GetHostMacAddress(unsigned long host, std::string&
   return false;
 }
 
-void CNetworkInterfaceWin10::GetSettings(NetworkAssignment& assignment, std::string& ipAddress
-                                       , std::string& networkMask, std::string& defaultGateway
-                                       , std::string& essId, std::string& key, EncMode& encryptionMode) const
-{
-  ipAddress = "0.0.0.0";
-  networkMask = "0.0.0.0";
-  defaultGateway = "0.0.0.0";
-  essId = "";
-  key = "";
-  encryptionMode = ENC_NONE;
-  assignment = NETWORK_DISABLED;
-
-  const ULONG flags = GAA_FLAG_INCLUDE_GATEWAYS | GAA_FLAG_INCLUDE_PREFIX;
-  ULONG ulOutBufLen;
-
-  if (GetAdaptersAddresses(AF_INET, flags, nullptr, nullptr, &ulOutBufLen) != ERROR_BUFFER_OVERFLOW)
-    return;
-
-  PIP_ADAPTER_ADDRESSES adapterAddresses = static_cast<PIP_ADAPTER_ADDRESSES>(malloc(ulOutBufLen));
-  if (adapterAddresses == nullptr)
-    return;
-
-  if (GetAdaptersAddresses(AF_INET, flags, nullptr, adapterAddresses, &ulOutBufLen) == NO_ERROR)
-  {
-    for (PIP_ADAPTER_ADDRESSES adapter = adapterAddresses; adapter; adapter = adapter->Next)
-    {
-      if (adapter->IfIndex != m_adapterAddr->IfIndex)
-        continue;
-
-      if (adapter->Dhcpv4Enabled)
-        assignment = NETWORK_DHCP;
-      else
-        assignment = NETWORK_STATIC;
-
-      PIP_ADAPTER_UNICAST_ADDRESS_LH address = m_adapterAddr->FirstUnicastAddress;
-      while (address)
-      {
-        if (address->Address.lpSockaddr->sa_family == AF_INET)
-        {
-          ipAddress = CNetworkBase::GetIpStr(address->Address.lpSockaddr);
-          networkMask = CNetworkBase::GetMaskByPrefixLength(address->OnLinkPrefixLength);
-
-          break;
-        }
-        address = address->Next;
-      }
-
-      PIP_ADAPTER_GATEWAY_ADDRESS_LH gwAddress = m_adapterAddr->FirstGatewayAddress;
-      while (gwAddress)
-      {
-        if (gwAddress->Address.lpSockaddr->sa_family == AF_INET)
-        {
-          defaultGateway = CNetworkBase::GetIpStr(gwAddress->Address.lpSockaddr);
-          break;
-        }
-        gwAddress = gwAddress->Next;
-      }
-
-      if (adapter->IfType == IF_TYPE_IEEE80211)
-      {
-        //! @todo get WLAN props
-      }
-      break;
-    }
-  }
-  free(adapterAddresses);
-}
-
-void CNetworkInterfaceWin10::SetSettings(const NetworkAssignment& assignment, const std::string& ipAddress, const std::string& networkMask, const std::string& defaultGateway, const std::string& essId, const std::string& key, const EncMode& encryptionMode)
-{
-}
-
-std::vector<NetworkAccessPoint> CNetworkInterfaceWin10::GetAccessPoints(void) const
-{
-  std::vector<NetworkAccessPoint> accessPoints;
-  return accessPoints;
-}
-
 std::string CNetworkInterfaceWin10::GetCurrentIPAddress(void) const
 {
   std::string result = "0.0.0.0";
@@ -224,30 +130,6 @@ std::string CNetworkInterfaceWin10::GetCurrentNetmask(void) const
   return result;
 }
 
-std::string CNetworkInterfaceWin10::GetCurrentWirelessEssId(void) const
-{
-  std::string result = "";
-  if (!IsWireless() || !m_winRT)
-    return result;
-
-  if (IsConnected() && !m_profile)
-  {
-    m_profile = Wait(m_winRT.GetConnectedProfileAsync());
-  }
-
-  if (!m_profile)
-    return result;
-
-  if (!m_profile.IsWlanConnectionProfile())
-    return result;
-
-  auto ssid = m_profile.WlanConnectionProfileDetails().GetConnectedSsid();
-  if (!ssid.empty())
-    result = FromW(ssid.c_str());
-
-  return result;
-}
-
 std::string CNetworkInterfaceWin10::GetCurrentDefaultGateway(void) const
 {
   std::string result = "";
@@ -353,7 +235,6 @@ void CNetworkWin10::queryInterfaceList()
 
   const ULONG flags = GAA_FLAG_INCLUDE_GATEWAYS | GAA_FLAG_INCLUDE_PREFIX;
   ULONG ulOutBufLen;
-  NetworkAdapter winRTAdapter = nullptr;
 
   if (GetAdaptersAddresses(AF_INET, flags, nullptr, nullptr, &ulOutBufLen) != ERROR_BUFFER_OVERFLOW)
     return;
@@ -369,9 +250,7 @@ void CNetworkWin10::queryInterfaceList()
       if (adapter->IfType == IF_TYPE_SOFTWARE_LOOPBACK)
         continue;
 
-      std::wstring name = ToW(adapter->AdapterName);
-      m_interfaces.push_back(new CNetworkInterfaceWin10(adapter, adapters[name]));
-      winRTAdapter = nullptr;
+      m_interfaces.push_back(new CNetworkInterfaceWin10(adapter));
     }
   }
 }
diff --git a/xbmc/platform/win10/network/NetworkWin10.h b/xbmc/platform/win10/network/NetworkWin10.h
index c73a64645718..720f5218bc92 100644
--- a/xbmc/platform/win10/network/NetworkWin10.h
+++ b/xbmc/platform/win10/network/NetworkWin10.h
@@ -22,14 +22,11 @@ class CNetworkWin10;
 class CNetworkInterfaceWin10 : public CNetworkInterface
 {
 public:
-  CNetworkInterfaceWin10(const PIP_ADAPTER_ADDRESSES adapter, ::IUnknown* winRTadapter);
+  CNetworkInterfaceWin10(const PIP_ADAPTER_ADDRESSES adapter);
   ~CNetworkInterfaceWin10(void);
 
-  virtual const std::string& GetName(void) const;
-
   virtual bool IsEnabled(void) const;
   virtual bool IsConnected(void) const;
-  bool IsWireless(void) const;
 
   virtual std::string GetMacAddress(void) const;
   virtual void GetMacAddressRaw(char rawMac[6]) const;
@@ -39,23 +36,9 @@ class CNetworkInterfaceWin10 : public CNetworkInterface
   virtual std::string GetCurrentIPAddress() const;
   virtual std::string GetCurrentNetmask() const;
   virtual std::string GetCurrentDefaultGateway(void) const;
-  virtual std::string GetCurrentWirelessEssId(void) const;
-
-  virtual void GetSettings(NetworkAssignment& assignment, std::string& ipAddress
-                         , std::string& networkMask, std::string& defaultGateway
-                         , std::string& essId, std::string& key, EncMode& encryptionMode) const;
-  virtual void SetSettings(const NetworkAssignment& assignment, const std::string& ipAddress
-                         , const std::string& networkMask, const std::string& defaultGateway
-                         , const std::string& essId, const std::string& key, const EncMode& encryptionMode);
-
-  // Returns the list of access points in the area
-  virtual std::vector<NetworkAccessPoint> GetAccessPoints(void) const;
 
 private:
-  std::string m_adaptername;
   PIP_ADAPTER_ADDRESSES m_adapterAddr;
-  winrt::Windows::Networking::Connectivity::NetworkAdapter m_winRT = nullptr;
-  mutable winrt::Windows::Networking::Connectivity::ConnectionProfile m_profile = nullptr;
 };
 
 
diff --git a/xbmc/platform/win32/network/NetworkWin32.cpp b/xbmc/platform/win32/network/NetworkWin32.cpp
index 008491e5e25e..c2908cc4fe59 100644
--- a/xbmc/platform/win32/network/NetworkWin32.cpp
+++ b/xbmc/platform/win32/network/NetworkWin32.cpp
@@ -8,11 +8,9 @@
 
 #include "PlatformDefs.h"
 #include "NetworkWin32.h"
-#include "platform/win32/CharsetConverter.h"
 #include "platform/win32/WIN32Util.h"
 #include "utils/log.h"
 #include "threads/SingleLock.h"
-#include "utils/CharsetConverter.h"
 #include "utils/StringUtils.h"
 
 #include <errno.h>
@@ -20,34 +18,18 @@
 #include <IcmpAPI.h>
 #include <netinet/in.h>
 #include <Mstcpip.h>
-#include <Wlanapi.h>
 
 #pragma comment(lib, "Ntdll.lib")
-#pragma comment (lib,"Wlanapi.lib")
-
-using namespace KODI::PLATFORM::WINDOWS;
 
 CNetworkInterfaceWin32::CNetworkInterfaceWin32(const IP_ADAPTER_ADDRESSES& adapter)
-  : m_adaptername(adapter.AdapterName)
 {
   m_adapter = adapter;
-  g_charsetConverter.unknownToUTF8(m_adaptername);
 }
 
 CNetworkInterfaceWin32::~CNetworkInterfaceWin32(void)
 {
 }
 
-const std::string& CNetworkInterfaceWin32::GetName(void) const
-{
-  return m_adaptername;
-}
-
-bool CNetworkInterfaceWin32::IsWireless() const
-{
-  return (m_adapter.IfType == IF_TYPE_IEEE80211);
-}
-
 bool CNetworkInterfaceWin32::IsEnabled() const
 {
   return true;
@@ -84,50 +66,6 @@ std::string CNetworkInterfaceWin32::GetCurrentNetmask(void) const
   return StringUtils::Format("%u", m_adapter.FirstUnicastAddress->OnLinkPrefixLength);
 }
 
-std::string CNetworkInterfaceWin32::GetCurrentWirelessEssId(void) const
-{
-  std::string result = "";
-  if(IsWireless())
-  {
-    HANDLE hClientHdl = NULL;
-    DWORD dwVersion = 0;
-    DWORD dwret = 0;
-    PWLAN_CONNECTION_ATTRIBUTES pAttributes;
-    DWORD dwSize = 0;
-
-    if (WlanOpenHandle(2u, nullptr, &dwVersion, &hClientHdl) == ERROR_SUCCESS)
-    {
-      PWLAN_INTERFACE_INFO_LIST ppInterfaceList;
-      if(WlanEnumInterfaces(hClientHdl,NULL, &ppInterfaceList ) == ERROR_SUCCESS)
-      {
-        for(unsigned int i=0; i<ppInterfaceList->dwNumberOfItems;i++)
-        {
-          GUID guid = ppInterfaceList->InterfaceInfo[i].InterfaceGuid;
-          WCHAR wcguid[64];
-          StringFromGUID2(guid, (LPOLESTR)&wcguid, 64);
-          std::wstring strGuid = wcguid;
-          std::wstring strAdaptername = ToW(m_adapter.AdapterName);
-          if (strGuid == strAdaptername)
-          {
-            if(WlanQueryInterface(hClientHdl,&ppInterfaceList->InterfaceInfo[i].InterfaceGuid,wlan_intf_opcode_current_connection, NULL, &dwSize, (PVOID*)&pAttributes, NULL ) == ERROR_SUCCESS)
-            {
-              result = (char*)pAttributes->wlanAssociationAttributes.dot11Ssid.ucSSID;
-              WlanFreeMemory((PVOID*)&pAttributes);
-            }
-            else
-              CLog::Log(LOGERROR, "%s: Can't query wlan interface", __FUNCTION__);
-          }
-        }
-      }
-      WlanCloseHandle(&hClientHdl, NULL);
-    }
-    else
-      CLog::Log(LOGERROR, "%s: Can't open wlan handle", __FUNCTION__);
-  }
-
-  return result;
-}
-
 std::string CNetworkInterfaceWin32::GetCurrentDefaultGateway(void) const
 {
   return m_adapter.FirstGatewayAddress != nullptr ? CNetworkBase::GetIpStr(m_adapter.FirstGatewayAddress->Address.lpSockaddr) : "";
@@ -329,189 +267,3 @@ bool CNetworkInterfaceWin32::GetHostMacAddress(const struct sockaddr& host, std:
 
   return false;
 }
-
-std::vector<NetworkAccessPoint> CNetworkInterfaceWin32::GetAccessPoints(void) const
-{
-  std::vector<NetworkAccessPoint> result;
-  if (!IsWireless())
-    return result;
-
-  DWORD negotiated_version;
-  DWORD dwResult;
-  HANDLE wlan_handle = NULL;
-
-  // Get the handle to the WLAN API
-  dwResult = WlanOpenHandle(2u, nullptr, &negotiated_version, &wlan_handle);
-  if (dwResult != ERROR_SUCCESS || !wlan_handle)
-  {
-    CLog::Log(LOGERROR, "Could not load the client WLAN API");
-    return result;
-  }
-
-  // Get the list of interfaces (WlanEnumInterfaces allocates interface_list)
-  WLAN_INTERFACE_INFO_LIST *interface_list = NULL;
-  dwResult = WlanEnumInterfaces(wlan_handle, NULL, &interface_list);
-  if (dwResult != ERROR_SUCCESS || !interface_list)
-  {
-    WlanCloseHandle(wlan_handle, NULL);
-    CLog::Log(LOGERROR, "Failed to get the list of interfaces");
-    return result;
-  }
-
-  for (unsigned int i = 0; i < interface_list->dwNumberOfItems; ++i)
-  {
-    GUID guid = interface_list->InterfaceInfo[i].InterfaceGuid;
-    WCHAR wcguid[64];
-    StringFromGUID2(guid, (LPOLESTR)&wcguid, 64);
-    std::wstring strGuid = wcguid;
-    std::wstring strAdaptername = ToW(m_adapter.AdapterName);
-    if (strGuid == strAdaptername)
-    {
-      WLAN_BSS_LIST *bss_list;
-      HRESULT rv = WlanGetNetworkBssList(wlan_handle,
-                                         &interface_list->InterfaceInfo[i].InterfaceGuid,
-                                         NULL,               // Get all SSIDs
-                                         dot11_BSS_type_any, // unused
-                                         false,              // bSecurityEnabled - unused
-                                         NULL,               // reserved
-                                         &bss_list);
-      if (rv != ERROR_SUCCESS || !bss_list)
-        break;
-      for (unsigned int j = 0; j < bss_list->dwNumberOfItems; ++j)
-      {
-        const WLAN_BSS_ENTRY bss_entry = bss_list->wlanBssEntries[j];
-        // Add the access point info to the list of results
-        std::string essId((char*)bss_entry.dot11Ssid.ucSSID, (unsigned int)bss_entry.dot11Ssid.uSSIDLength);
-        std::string macAddress;
-        // macAddress is big-endian, write in byte chunks
-        macAddress = StringUtils::Format("%02x-%02x-%02x-%02x-%02x-%02x",
-          bss_entry.dot11Bssid[0], bss_entry.dot11Bssid[1], bss_entry.dot11Bssid[2],
-          bss_entry.dot11Bssid[3], bss_entry.dot11Bssid[4], bss_entry.dot11Bssid[5]);
-        int signalLevel = bss_entry.lRssi;
-        EncMode encryption = ENC_NONE; //! @todo implement
-        int channel = NetworkAccessPoint::FreqToChannel((float)bss_entry.ulChCenterFrequency * 1000);
-        result.push_back(NetworkAccessPoint(essId, macAddress, signalLevel, encryption, channel));
-      }
-      WlanFreeMemory(bss_list);
-      break;
-    }
-  }
-
-  // Free the interface list
-  WlanFreeMemory(interface_list);
-
-  // Close the handle
-  WlanCloseHandle(wlan_handle, NULL);
-
-  return result;
-}
-
-void CNetworkInterfaceWin32::GetSettings(NetworkAssignment& assignment, std::string& ipAddress
-                                       , std::string& networkMask, std::string& defaultGateway
-                                       , std::string& essId, std::string& key, EncMode& encryptionMode) const
-{
-  ipAddress = "0.0.0.0";
-  networkMask = "0.0.0.0";
-  defaultGateway = "0.0.0.0";
-  essId = "";
-  key = "";
-  encryptionMode = ENC_NONE;
-  assignment = NETWORK_DISABLED;
-
-  const ULONG flags = GAA_FLAG_SKIP_ANYCAST | GAA_FLAG_SKIP_MULTICAST | GAA_FLAG_SKIP_DNS_SERVER | GAA_FLAG_INCLUDE_PREFIX | GAA_FLAG_SKIP_FRIENDLY_NAME | GAA_FLAG_INCLUDE_GATEWAYS;
-  ULONG ulOutBufLen;
-
-  if (GetAdaptersAddresses(AF_INET, flags, nullptr, nullptr, &ulOutBufLen) != ERROR_BUFFER_OVERFLOW)
-    return;
-
-  PIP_ADAPTER_ADDRESSES adapterAddresses = static_cast<PIP_ADAPTER_ADDRESSES>(malloc(ulOutBufLen));
-  if (adapterAddresses == nullptr)
-    return;
-
-  if (GetAdaptersAddresses(AF_INET, flags, nullptr, adapterAddresses, &ulOutBufLen) == NO_ERROR)
-  {
-    for (PIP_ADAPTER_ADDRESSES adapter = adapterAddresses; adapter; adapter = adapter->Next)
-    {
-      if(m_adapter.IfIndex == adapter->IfIndex)
-      {
-        ipAddress = CNetworkBase::GetIpStr(adapter->FirstUnicastAddress->Address.lpSockaddr);
-        if (adapter->FirstUnicastAddress->Address.lpSockaddr->sa_family == AF_INET)
-          networkMask = CNetworkBase::GetMaskByPrefixLength(adapter->FirstUnicastAddress->OnLinkPrefixLength);
-        else
-          networkMask = StringUtils::Format("%u", adapter->FirstUnicastAddress->OnLinkPrefixLength);
-        defaultGateway = adapter->FirstGatewayAddress != nullptr ? CNetworkBase::GetIpStr(adapter->FirstGatewayAddress->Address.lpSockaddr) : "";
-        if (adapter->Dhcpv4Enabled)
-          assignment = NETWORK_DHCP;
-        else
-          assignment = NETWORK_STATIC;
-        break;
-      }
-    }
-  }
-  free(adapterAddresses);
-
-  if(IsWireless())
-  {
-    HANDLE hClientHdl = nullptr;
-    DWORD dwVersion = 0;
-    DWORD dwret = 0;
-    PWLAN_CONNECTION_ATTRIBUTES pAttributes;
-    DWORD dwSize = 0;
-
-    if (WlanOpenHandle(2u, nullptr, &dwVersion, &hClientHdl) == ERROR_SUCCESS)
-    {
-      PWLAN_INTERFACE_INFO_LIST ppInterfaceList;
-      if(WlanEnumInterfaces(hClientHdl,NULL, &ppInterfaceList ) == ERROR_SUCCESS)
-      {
-        for(unsigned int i=0; i<ppInterfaceList->dwNumberOfItems;i++)
-        {
-          GUID guid = ppInterfaceList->InterfaceInfo[i].InterfaceGuid;
-          WCHAR wcguid[64];
-          StringFromGUID2(guid, (LPOLESTR)&wcguid, 64);
-          std::wstring strGuid = wcguid;
-          std::wstring strAdaptername = ToW(m_adapter.AdapterName);
-          if (strGuid == strAdaptername)
-          {
-            if (WlanQueryInterface(hClientHdl, &ppInterfaceList->InterfaceInfo[i].InterfaceGuid
-                                 , wlan_intf_opcode_current_connection, nullptr, &dwSize
-                                 , (PVOID*)&pAttributes, nullptr) == ERROR_SUCCESS)
-            {
-              essId = (char*)pAttributes->wlanAssociationAttributes.dot11Ssid.ucSSID;
-              if (pAttributes->wlanSecurityAttributes.bSecurityEnabled)
-              {
-                switch (pAttributes->wlanSecurityAttributes.dot11AuthAlgorithm)
-                {
-                case DOT11_AUTH_ALGO_80211_SHARED_KEY:
-                  encryptionMode = ENC_WEP;
-                  break;
-                case DOT11_AUTH_ALGO_WPA:
-                case DOT11_AUTH_ALGO_WPA_PSK:
-                  encryptionMode = ENC_WPA;
-                  break;
-                case DOT11_AUTH_ALGO_RSNA:
-                case DOT11_AUTH_ALGO_RSNA_PSK:
-                  encryptionMode = ENC_WPA2;
-                  break;
-                }
-              }
-              WlanFreeMemory((PVOID*)&pAttributes);
-            }
-            else
-              CLog::Log(LOGERROR, "%s: Can't query wlan interface", __FUNCTION__);
-          }
-        }
-      }
-      WlanCloseHandle(&hClientHdl, NULL);
-    }
-    else
-      CLog::Log(LOGERROR, "%s: Can't open wlan handle", __FUNCTION__);
-  }
-  //! @todo get the key (WlanGetProfile, CryptUnprotectData?)
-}
-
-void CNetworkInterfaceWin32::SetSettings(const NetworkAssignment& assignment, const std::string& ipAddress
-                                       , const std::string& networkMask, const std::string& defaultGateway
-                                       , const std::string& essId, const std::string& key, const EncMode& encryptionMode)
-{
-  return;
-}
diff --git a/xbmc/platform/win32/network/NetworkWin32.h b/xbmc/platform/win32/network/NetworkWin32.h
index 16de24534b03..f2c203b13743 100644
--- a/xbmc/platform/win32/network/NetworkWin32.h
+++ b/xbmc/platform/win32/network/NetworkWin32.h
@@ -25,11 +25,8 @@ class CNetworkInterfaceWin32 : public CNetworkInterface
    CNetworkInterfaceWin32(const IP_ADAPTER_ADDRESSES& adapter);
    ~CNetworkInterfaceWin32(void) override;
 
-   const std::string& GetName(void) const override;
-
    bool IsEnabled(void) const override;
    bool IsConnected(void) const override;
-   bool IsWireless(void) const;
 
    std::string GetMacAddress(void) const override;
    void GetMacAddressRaw(char rawMac[6]) const override;
@@ -40,17 +37,9 @@ class CNetworkInterfaceWin32 : public CNetworkInterface
    std::string GetCurrentIPAddress() const override;
    std::string GetCurrentNetmask() const override;
    std::string GetCurrentDefaultGateway(void) const override;
-   std::string GetCurrentWirelessEssId(void) const override;
-
-   void GetSettings(NetworkAssignment& assignment, std::string& ipAddress, std::string& networkMask, std::string& defaultGateway, std::string& essId, std::string& key, EncMode& encryptionMode) const override;
-   void SetSettings(const NetworkAssignment& assignment, const std::string& ipAddress, const std::string& networkMask, const std::string& defaultGateway, const std::string& essId, const std::string& key, const EncMode& encryptionMode) override;
-
-   // Returns the list of access points in the area
-   std::vector<NetworkAccessPoint> GetAccessPoints(void) const override;
 
 private:
    IP_ADAPTER_ADDRESSES m_adapter;
-   std::string m_adaptername;
 };
 
 class CNetworkWin32 : public CNetworkBase
