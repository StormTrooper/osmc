From 34d0c4a94ed60174550d1fefbe82c415326f2ca4 Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Wed, 20 Mar 2019 20:49:08 +0100
Subject: [PATCH] [cmake] fix set of APP_RENDER_SYSTEM on KodiConfig.cmake

In the implementation of GLES under Windows found the foolish finding of OpenGL. This seems to exist systematically and makes it a little harder. Then found that "APP_RENDER_SYSTEM" of "KodiConfig.cmake" is not defined correctly (empty defined).

This request fixes this and uses the "platform" folder.
Parts of "Platform.cmake" are also included in PrepareEnv.cmake.

TODO: Refactor on v19 to remove the if/else usage
---
 cmake/platform/android/android.cmake          |  1 +
 cmake/platform/freebsd/x11.cmake              |  1 +
 cmake/platform/ios/ios.cmake                  |  1 +
 cmake/platform/osx/osx.cmake                  |  1 +
 cmake/platform/windows/windows.cmake          |  1 +
 .../platform/windowsstore/windowsstore.cmake  |  1 +
 cmake/scripts/common/Platform.cmake           | 19 +++++++++++++++----
 cmake/scripts/common/PrepareEnv.cmake         |  1 +
 8 files changed, 22 insertions(+), 4 deletions(-)

diff --git a/cmake/platform/android/android.cmake b/cmake/platform/android/android.cmake
index c857cba31017..1450d2816b75 100644
--- a/cmake/platform/android/android.cmake
+++ b/cmake/platform/android/android.cmake
@@ -1 +1,2 @@
 set(PLATFORM_REQUIRED_DEPS OpenGLES EGL Zip)
+set(APP_RENDER_SYSTEM gles)
diff --git a/cmake/platform/freebsd/x11.cmake b/cmake/platform/freebsd/x11.cmake
index 656fd665726f..09cebde3dbb0 100644
--- a/cmake/platform/freebsd/x11.cmake
+++ b/cmake/platform/freebsd/x11.cmake
@@ -1,2 +1,3 @@
 set(PLATFORM_REQUIRED_DEPS OpenGl EGL X XRandR LibDRM)
 set(PLATFORM_OPTIONAL_DEPS VAAPI VDPAU GLX)
+set(APP_RENDER_SYSTEM gl)
diff --git a/cmake/platform/ios/ios.cmake b/cmake/platform/ios/ios.cmake
index ab0f361a9221..75c9b7b80300 100644
--- a/cmake/platform/ios/ios.cmake
+++ b/cmake/platform/ios/ios.cmake
@@ -1 +1,2 @@
 set(PLATFORM_REQUIRED_DEPS OpenGLES)
+set(APP_RENDER_SYSTEM gles)
diff --git a/cmake/platform/osx/osx.cmake b/cmake/platform/osx/osx.cmake
index e81703c70bf7..fbe8d96131e6 100644
--- a/cmake/platform/osx/osx.cmake
+++ b/cmake/platform/osx/osx.cmake
@@ -1 +1,2 @@
 set(PLATFORM_REQUIRED_DEPS OpenGl Sdl)
+set(APP_RENDER_SYSTEM gl)
diff --git a/cmake/platform/windows/windows.cmake b/cmake/platform/windows/windows.cmake
index 56b87a673037..b0c2992d99cb 100644
--- a/cmake/platform/windows/windows.cmake
+++ b/cmake/platform/windows/windows.cmake
@@ -1 +1,2 @@
 set(PLATFORM_REQUIRED_DEPS D3DX11Effects)
+set(APP_RENDER_SYSTEM dx11)
diff --git a/cmake/platform/windowsstore/windowsstore.cmake b/cmake/platform/windowsstore/windowsstore.cmake
index 56b87a673037..b0c2992d99cb 100644
--- a/cmake/platform/windowsstore/windowsstore.cmake
+++ b/cmake/platform/windowsstore/windowsstore.cmake
@@ -1 +1,2 @@
 set(PLATFORM_REQUIRED_DEPS D3DX11Effects)
+set(APP_RENDER_SYSTEM dx11)
diff --git a/cmake/scripts/common/Platform.cmake b/cmake/scripts/common/Platform.cmake
index 5ac233a54d74..6d99c4456356 100644
--- a/cmake/scripts/common/Platform.cmake
+++ b/cmake/scripts/common/Platform.cmake
@@ -1,6 +1,15 @@
 if(NOT CORE_SYSTEM_NAME)
   string(TOLOWER ${CMAKE_SYSTEM_NAME} CORE_SYSTEM_NAME)
 endif()
+# Switch used path, if CORE_SOURCE_DIR is set use it (e.g. on addons build)
+# otherwise use the present source dir
+#
+# TODO: This should be refactored on v19 and the if usage removed!
+if(CORE_SOURCE_DIR)
+  set(PLATFORM_USED_SOURCE_DIR ${CORE_SOURCE_DIR})
+else()
+  set(PLATFORM_USED_SOURCE_DIR ${CMAKE_SOURCE_DIR})
+endif()
 
 if(CORE_SYSTEM_NAME STREQUAL linux OR CORE_SYSTEM_NAME STREQUAL freebsd)
   # Set default CORE_PLATFORM_NAME to X11
@@ -24,14 +33,16 @@ unset(_DEFAULT_PLATFORM)
 string(TOLOWER ${CORE_PLATFORM_NAME} CORE_PLATFORM_NAME_LC)
 
 list(APPEND final_message "Platform: ${CORE_PLATFORM_NAME}")
-if(EXISTS ${CMAKE_SOURCE_DIR}/cmake/platform/${CORE_SYSTEM_NAME}/${CORE_PLATFORM_NAME_LC}.cmake)
-  include(${CMAKE_SOURCE_DIR}/cmake/platform/${CORE_SYSTEM_NAME}/${CORE_PLATFORM_NAME_LC}.cmake)
+if(EXISTS ${PLATFORM_USED_SOURCE_DIR}/cmake/platform/${CORE_SYSTEM_NAME}/${CORE_PLATFORM_NAME_LC}.cmake)
+  include(${PLATFORM_USED_SOURCE_DIR}/cmake/platform/${CORE_SYSTEM_NAME}/${CORE_PLATFORM_NAME_LC}.cmake)
   if(ENABLE_APP_AUTONAME)
     set(APP_BINARY_SUFFIX "-${CORE_PLATFORM_NAME_LC}")
   endif()
 else()
-  file(GLOB _platformnames RELATIVE ${CMAKE_SOURCE_DIR}/cmake/platform/${CORE_SYSTEM_NAME}/
-                                    ${CMAKE_SOURCE_DIR}/cmake/platform/${CORE_SYSTEM_NAME}/*.cmake)
+  file(GLOB _platformnames RELATIVE ${PLATFORM_USED_SOURCE_DIR}/cmake/platform/${CORE_SYSTEM_NAME}/
+                                    ${PLATFORM_USED_SOURCE_DIR}/cmake/platform/${CORE_SYSTEM_NAME}/*.cmake)
   string(REPLACE ".cmake" " " _platformnames ${_platformnames})
   message(FATAL_ERROR "invalid CORE_PLATFORM_NAME: ${CORE_PLATFORM_NAME_LC}\nValid platforms: ${_platformnames}")
 endif()
+
+unset(PLATFORM_USED_SOURCE_DIR)
diff --git a/cmake/scripts/common/PrepareEnv.cmake b/cmake/scripts/common/PrepareEnv.cmake
index 20dbaf60af28..867cd2c36417 100644
--- a/cmake/scripts/common/PrepareEnv.cmake
+++ b/cmake/scripts/common/PrepareEnv.cmake
@@ -1,5 +1,6 @@
 # parse version.txt and versions.h to get the version and API info
 include(${CORE_SOURCE_DIR}/cmake/scripts/common/Macros.cmake)
+include(${CORE_SOURCE_DIR}/cmake/scripts/common/Platform.cmake)
 core_find_versions()
 
 # in case we need to download something, set KODI_MIRROR to the default if not already set
