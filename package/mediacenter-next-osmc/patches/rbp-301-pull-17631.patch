From 6470e9d94bee6d41a0d41b8883462ce7104af992 Mon Sep 17 00:00:00 2001
From: Bas Rieter <basrieter@gmail.com>
Date: Wed, 8 Apr 2020 22:26:53 +0200
Subject: [PATCH 1/2] Added: option to pass arguments to add-on menu callbacks

---
 xbmc/ContextMenuItem.cpp         | 8 +++++---
 xbmc/ContextMenuItem.h           | 6 ++++--
 xbmc/addons/ContextMenuAddon.cpp | 9 ++++++++-
 3 files changed, 17 insertions(+), 6 deletions(-)

diff --git a/xbmc/ContextMenuItem.cpp b/xbmc/ContextMenuItem.cpp
index c3fc577d25eb..a4c07f025132 100644
--- a/xbmc/ContextMenuItem.cpp
+++ b/xbmc/ContextMenuItem.cpp
@@ -52,7 +52,7 @@ bool CContextMenuItem::Execute(const CFileItemPtr& item) const
 
 #ifdef HAS_PYTHON
   LanguageInvokerPtr invoker(new CContextItemAddonInvoker(&g_pythonParser, item));
-  return (CScriptInvocationManager::GetInstance().ExecuteAsync(m_library, invoker, addon) != -1);
+  return (CScriptInvocationManager::GetInstance().ExecuteAsync(m_library, invoker, addon, m_args) != -1);
 #else
   return false;
 #endif
@@ -66,7 +66,8 @@ bool CContextMenuItem::operator==(const CContextMenuItem& other) const
   return (IsGroup() == other.IsGroup())
       && (m_parent == other.m_parent)
       && (m_library == other.m_library)
-      && (m_addonId == other.m_addonId);
+      && (m_addonId == other.m_addonId)
+      && (m_args == other.m_args);
 }
 
 std::string CContextMenuItem::ToString() const
@@ -91,7 +92,7 @@ CContextMenuItem CContextMenuItem::CreateGroup(const std::string& label, const s
 }
 
 CContextMenuItem CContextMenuItem::CreateItem(const std::string& label, const std::string& parent,
-    const std::string& library, const std::string& condition, const std::string& addonId)
+    const std::string& library, const std::string& condition, const std::string& addonId, const std::vector<std::string>& args)
 {
   CContextMenuItem menuItem;
   menuItem.m_label = label;
@@ -99,5 +100,6 @@ CContextMenuItem CContextMenuItem::CreateItem(const std::string& label, const st
   menuItem.m_library = library;
   menuItem.m_visibilityCondition = condition;
   menuItem.m_addonId = addonId;
+  menuItem.m_args = args;
   return menuItem;
 }
diff --git a/xbmc/ContextMenuItem.h b/xbmc/ContextMenuItem.h
index 2ec4e31fa19f..2e70b7f93317 100644
--- a/xbmc/ContextMenuItem.h
+++ b/xbmc/ContextMenuItem.h
@@ -69,8 +69,9 @@ class CContextMenuItem : public IContextMenuItem
     const std::string& parent,
     const std::string& library,
     const std::string& condition,
-    const std::string& addonId);
-
+    const std::string& addonId, 
+    const std::vector<std::string>& args = std::vector<std::string>());
+  
   friend class ADDON::CContextMenuAddon;
 
 private:
@@ -79,6 +80,7 @@ class CContextMenuItem : public IContextMenuItem
   std::string m_groupId;
   std::string m_library;
   std::string m_addonId; // The owner of this menu item
+  std::vector<std::string> m_args;
 
   std::string m_visibilityCondition;
   mutable INFO::InfoPtr m_infoBool;
diff --git a/xbmc/addons/ContextMenuAddon.cpp b/xbmc/addons/ContextMenuAddon.cpp
index fcdb6345080b..d5815873f44c 100644
--- a/xbmc/addons/ContextMenuAddon.cpp
+++ b/xbmc/addons/ContextMenuAddon.cpp
@@ -87,10 +87,17 @@ void CContextMenuAddon::ParseMenu(
     if (StringUtils::IsNaturalNumber(label))
       label = g_localizeStrings.GetAddonString(ID(), atoi(label.c_str()));
 
+    std::vector<std::string> args;
+    args.push_back(ID());
+ 
+    std::string arg = element.second.GetValue("@args").asString();
+    if (!arg.empty())
+      args.push_back(arg);
+
     if (!label.empty() && !library.empty() && !visCondition.empty())
     {
       auto menu = CContextMenuItem::CreateItem(label, menuId,
-          URIUtils::AddFileToFolder(Path(), library), visCondition, ID());
+          URIUtils::AddFileToFolder(Path(), library), visCondition, ID(), args);
       m_items.push_back(menu);
     }
   }

From bcef7ef242cc64675dadb537667257d5b756c08f Mon Sep 17 00:00:00 2001
From: Bas Rieter <basrieter@gmail.com>
Date: Wed, 8 Apr 2020 22:59:34 +0200
Subject: [PATCH 2/2] Changed: see if we can reuse  the language invoker for a
 menu callback

---
 xbmc/ContextMenuItem.cpp | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/xbmc/ContextMenuItem.cpp b/xbmc/ContextMenuItem.cpp
index a4c07f025132..d3b687a054e5 100644
--- a/xbmc/ContextMenuItem.cpp
+++ b/xbmc/ContextMenuItem.cpp
@@ -50,9 +50,13 @@ bool CContextMenuItem::Execute(const CFileItemPtr& item) const
   if (!CServiceBroker::GetAddonMgr().GetAddon(m_addonId, addon))
     return false;
 
+  bool reuseLanguageInvoker = false;
+  if (addon->ExtraInfo().find("reuselanguageinvoker") != addon->ExtraInfo().end())
+    reuseLanguageInvoker = addon->ExtraInfo().at("reuselanguageinvoker") == "true";
+
 #ifdef HAS_PYTHON
   LanguageInvokerPtr invoker(new CContextItemAddonInvoker(&g_pythonParser, item));
-  return (CScriptInvocationManager::GetInstance().ExecuteAsync(m_library, invoker, addon, m_args) != -1);
+  return (CScriptInvocationManager::GetInstance().ExecuteAsync(m_library, invoker, addon, m_args, reuseLanguageInvoker) != -1);
 #else
   return false;
 #endif
