From 9e94011074e3b014c36cb324c17983d5d47f1471 Mon Sep 17 00:00:00 2001
From: Garrett Brown <themagnificentmrb@gmail.com>
Date: Sun, 24 Jun 2018 00:04:12 -0700
Subject: [PATCH 1/4] Game OSD: Rename "View mode" setting label to "Stretch
 mode"

Simplifies wording and better matches the dialog to its functionality.
---
 addons/resource.language.en_gb/resources/strings.po  | 9 ++++++++-
 addons/skin.estuary/xml/Custom_1101_SettingsList.xml | 4 ++--
 xbmc/games/dialogs/osd/DialogGameViewMode.cpp        | 2 +-
 3 files changed, 11 insertions(+), 4 deletions(-)

diff --git a/addons/resource.language.en_gb/resources/strings.po b/addons/resource.language.en_gb/resources/strings.po
index 150fb6c2ca10..1c617b8f9a51 100644
--- a/addons/resource.language.en_gb/resources/strings.po
+++ b/addons/resource.language.en_gb/resources/strings.po
@@ -17411,7 +17411,14 @@ msgctxt "#35232"
 msgid "Fullscreen"
 msgstr ""
 
-#empty strings from id 35233 to 35249
+#. Label of the setting in the in-game menu for stretching the game to fit the monitor
+#: addons/skin.estuary/xml/Custom_1101_SettingsList.xml
+#: xbmc/games/dialogs/osdDialogGameViewMode.cpp
+msgctxt "#35233"
+msgid "Stretch mode"
+msgstr ""
+
+#empty strings from id 35234 to 35249
 
 #: xbmc/windows/GUIMediaWindow.cpp
 msgctxt "#35250"
diff --git a/addons/skin.estuary/xml/Custom_1101_SettingsList.xml b/addons/skin.estuary/xml/Custom_1101_SettingsList.xml
index 785e690171a8..8ee832d343c1 100644
--- a/addons/skin.estuary/xml/Custom_1101_SettingsList.xml
+++ b/addons/skin.estuary/xml/Custom_1101_SettingsList.xml
@@ -123,10 +123,10 @@
 						<onclick>ActivateWindow(GameVideoFilter)</onclick>
 					</control>
 					<control type="button" id="14102">
-						<description>View mode button</description>
+						<description>Stretch mode button</description>
 						<width>700</width>
 						<include>DialogSettingButton</include>
-						<label>$LOCALIZE[629]</label>
+						<label>$LOCALIZE[35233]</label>
 						<onclick>ActivateWindow(GameViewMode)</onclick>
 					</control>
 					<control type="button" id="14106">
diff --git a/xbmc/games/dialogs/osd/DialogGameViewMode.cpp b/xbmc/games/dialogs/osd/DialogGameViewMode.cpp
index 0a8bc4615a43..613a02261ffc 100644
--- a/xbmc/games/dialogs/osd/DialogGameViewMode.cpp
+++ b/xbmc/games/dialogs/osd/DialogGameViewMode.cpp
@@ -46,7 +46,7 @@ CDialogGameViewMode::CDialogGameViewMode() :
 
 std::string CDialogGameViewMode::GetHeading()
 {
-  return g_localizeStrings.Get(629); // "View mode"
+  return g_localizeStrings.Get(35233); // "Stretch mode"
 }
 
 void CDialogGameViewMode::PreInit()

From 2e5caa071565489c94ba54bfffa2dbe52cddf45d Mon Sep 17 00:00:00 2001
From: Garrett Brown <themagnificentmrb@gmail.com>
Date: Sun, 24 Jun 2018 00:11:10 -0700
Subject: [PATCH 2/4] Game OSD: Rename "Input settings" setting label to
 "Controls"

Simplifies wording and better matches dialog to its functionality.
---
 addons/resource.language.en_gb/resources/strings.po  | 14 ++++++++------
 addons/skin.estuary/xml/Custom_1101_SettingsList.xml |  4 ++--
 2 files changed, 10 insertions(+), 8 deletions(-)

diff --git a/addons/resource.language.en_gb/resources/strings.po b/addons/resource.language.en_gb/resources/strings.po
index 1c617b8f9a51..6f5b6f590430 100644
--- a/addons/resource.language.en_gb/resources/strings.po
+++ b/addons/resource.language.en_gb/resources/strings.po
@@ -17351,11 +17351,7 @@ msgctxt "#35222"
 msgid "Exit"
 msgstr ""
 
-#. Label of button in the in-game menu for opening the input configuration window
-#: addons/skin.estuary/xml/GameOSD.xml
-msgctxt "#35223"
-msgid "Input settings"
-msgstr ""
+#empty string with id 35223
 
 #. Label of button in the in-game menu for pausing and resuming playback
 #: addons/skin.estuary/xml/GameOSD.xml
@@ -17418,7 +17414,13 @@ msgctxt "#35233"
 msgid "Stretch mode"
 msgstr ""
 
-#empty strings from id 35234 to 35249
+#. Label of button in the in-game menu for configuring the game's controls
+#: addons/skin.estuary/xml/GameOSD.xml
+msgctxt "#35234"
+msgid "Controls"
+msgstr ""
+
+#empty strings from id 35235 to 35249
 
 #: xbmc/windows/GUIMediaWindow.cpp
 msgctxt "#35250"
diff --git a/addons/skin.estuary/xml/Custom_1101_SettingsList.xml b/addons/skin.estuary/xml/Custom_1101_SettingsList.xml
index 8ee832d343c1..8cb172476aac 100644
--- a/addons/skin.estuary/xml/Custom_1101_SettingsList.xml
+++ b/addons/skin.estuary/xml/Custom_1101_SettingsList.xml
@@ -145,10 +145,10 @@
 						<onclick>ActivateWindow(GameVolume)</onclick>
 					</control>
 					<control type="button" id="14103">
-						<description>Input settings button</description>
+						<description>Controller settings button</description>
 						<width>700</width>
 						<include>DialogSettingButton</include>
-						<label>$LOCALIZE[35223]</label>
+						<label>$LOCALIZE[35234]</label>
 						<onclick>ActivateWindow(GameControllers)</onclick>
 					</control>
 					<control type="button" id="14105">

From 122f77b70a1f462814a439ebd728c96835cc5116 Mon Sep 17 00:00:00 2001
From: Garrett Brown <themagnificentmrb@gmail.com>
Date: Sun, 24 Jun 2018 00:53:06 -0700
Subject: [PATCH 3/4] Controller dialog: Filter controllers by current game
 add-on

---
 xbmc/games/controllers/types/ControllerTree.cpp    | 51 ++++++++++++++++++++++
 xbmc/games/controllers/types/ControllerTree.h      | 19 ++++++++
 .../controllers/windows/GUIControllerList.cpp      | 36 ++++++++++++++-
 xbmc/games/controllers/windows/GUIControllerList.h |  2 +
 .../controllers/windows/GUIControllerWindow.cpp    | 23 +++++++++-
 .../controllers/windows/GUIControllerWindow.h      |  6 ++-
 6 files changed, 134 insertions(+), 3 deletions(-)

diff --git a/xbmc/games/controllers/types/ControllerTree.cpp b/xbmc/games/controllers/types/ControllerTree.cpp
index b3d76005be18..7d24587dff5d 100644
--- a/xbmc/games/controllers/types/ControllerTree.cpp
+++ b/xbmc/games/controllers/types/ControllerTree.cpp
@@ -63,6 +63,22 @@ void CControllerNode::SetHub(CControllerHub hub)
   m_hub.reset(new CControllerHub(std::move(hub)));
 }
 
+bool CControllerNode::IsControllerAccepted(const std::string &controllerId) const
+{
+  bool bAccepted = false;
+
+  for (const auto &port : m_hub->Ports())
+  {
+    if (port.IsControllerAccepted(controllerId))
+    {
+      bAccepted = true;
+      break;
+    }
+  }
+
+  return bAccepted;
+}
+
 bool CControllerNode::IsControllerAccepted(const std::string &portAddress,
                                            const std::string &controllerId) const
 {
@@ -128,6 +144,24 @@ void CControllerPortNode::SetCompatibleControllers(ControllerNodeVec controllers
   m_controllers = std::move(controllers);
 }
 
+bool CControllerPortNode::IsControllerAccepted(const std::string &controllerId) const
+{
+  // Base case
+  CControllerPort port;
+  GetControllerPort(port);
+  if (port.IsCompatible(controllerId))
+    return true;
+
+  // Visit nodes
+  for (const auto &node : m_controllers)
+  {
+    if (node.IsControllerAccepted(controllerId))
+      return true;
+  }
+
+  return false;
+}
+
 bool CControllerPortNode::IsControllerAccepted(const std::string &portAddress,
                                                const std::string &controllerId) const
 {
@@ -143,6 +177,7 @@ bool CControllerPortNode::IsControllerAccepted(const std::string &portAddress,
   }
   else
   {
+    // Visit nodes
     for (const auto &node : m_controllers)
     {
       if (node.IsControllerAccepted(portAddress, controllerId))
@@ -184,6 +219,22 @@ void CControllerHub::SetPorts(ControllerPortVec ports)
   m_ports = std::move(ports);
 }
 
+bool CControllerHub::IsControllerAccepted(const std::string &controllerId) const
+{
+  bool bAccepted = false;
+
+  for (const CControllerPortNode &port : m_ports)
+  {
+    if (port.IsControllerAccepted(controllerId))
+    {
+      bAccepted = true;
+      break;
+    }
+  }
+
+  return bAccepted;
+}
+
 bool CControllerHub::IsControllerAccepted(const std::string &portAddress,
                                           const std::string &controllerId) const
 {
diff --git a/xbmc/games/controllers/types/ControllerTree.h b/xbmc/games/controllers/types/ControllerTree.h
index 4f0d35b56c22..0c96d9048b8a 100644
--- a/xbmc/games/controllers/types/ControllerTree.h
+++ b/xbmc/games/controllers/types/ControllerTree.h
@@ -79,6 +79,15 @@ namespace GAME
      */
     bool IsValid() const { return m_controller.get() != nullptr; }
 
+    /*!
+     * \brief Check to see if a controller is compatible with a controller port
+     *
+     * \param controllerId The ID of the controller
+     *
+     * \return True if the controller is compatible with a port, false otherwise
+     */
+    bool IsControllerAccepted(const std::string &controllerId) const;
+
     /*!
      * \brief Check to see if a controller is compatible with a controller port
      *
@@ -163,6 +172,15 @@ namespace GAME
     const ControllerNodeVec &CompatibleControllers() const { return m_controllers; }
     void SetCompatibleControllers(ControllerNodeVec controllers);
 
+    /*!
+     * \brief Check to see if a controller is compatible with this tree
+     *
+     * \param controllerId The ID of the controller
+     *
+     * \return True if the controller is compatible with the tree, false otherwise
+     */
+    bool IsControllerAccepted(const std::string &controllerId) const;
+
     /*!
      * \brief Check to see if a controller is compatible with this tree
      *
@@ -206,6 +224,7 @@ namespace GAME
     const ControllerPortVec &Ports() const { return m_ports; }
     void SetPorts(ControllerPortVec ports);
 
+    bool IsControllerAccepted(const std::string &controllerId) const;
     bool IsControllerAccepted(const std::string &portAddress,
                               const std::string &controllerId) const;
 
diff --git a/xbmc/games/controllers/windows/GUIControllerList.cpp b/xbmc/games/controllers/windows/GUIControllerList.cpp
index 59a803bd7990..62fa50ad6b4b 100644
--- a/xbmc/games/controllers/windows/GUIControllerList.cpp
+++ b/xbmc/games/controllers/windows/GUIControllerList.cpp
@@ -28,7 +28,12 @@
 #include "GUIControllerWindow.h"
 #include "GUIFeatureList.h"
 #include "addons/AddonManager.h"
+#include "cores/RetroPlayer/guibridge/GUIGameRenderManager.h"
+#include "cores/RetroPlayer/guibridge/GUIGameSettingsHandle.h"
 #include "dialogs/GUIDialogYesNo.h"
+#include "games/addons/input/GameClientInput.h"
+#include "games/addons/GameClient.h"
+#include "games/controllers/types/ControllerTree.h"
 #include "games/controllers/Controller.h"
 #include "games/controllers/ControllerIDs.h"
 #include "games/controllers/ControllerFeature.h"
@@ -68,6 +73,19 @@ bool CGUIControllerList::Initialize(void)
   if (m_controllerButton)
     m_controllerButton->SetVisible(false);
 
+  // Get active game add-on
+  GameClientPtr gameClient;
+  {
+    auto gameSettingsHandle = CServiceBroker::GetGameRenderManager().RegisterGameSettingsDialog();
+    if (gameSettingsHandle)
+    {
+      ADDON::AddonPtr addon;
+      if (CServiceBroker::GetAddonMgr().GetAddon(gameSettingsHandle->GameClientID(), addon, ADDON::ADDON_GAMEDLL))
+        gameClient = std::static_pointer_cast<CGameClient>(addon);
+    }
+  }
+  m_gameClient = std::move(gameClient);
+
   CServiceBroker::GetAddonMgr().Events().Subscribe(this, &CGUIControllerList::OnEvent);
   Refresh();
 
@@ -79,6 +97,8 @@ void CGUIControllerList::Deinitialize(void)
 {
   CServiceBroker::GetAddonMgr().Events().Unsubscribe(this);
 
+  m_gameClient.reset();
+
   CleanupButtons();
 
   m_controllerList = nullptr;
@@ -166,7 +186,7 @@ bool CGUIControllerList::RefreshControllers(void)
   CGameServices& gameServices = CServiceBroker::GetGameServices();
   ControllerVector newControllers = gameServices.GetControllers();
 
-  // Don't show an empty list in the GUI
+  // Don't show an empty feature list in the GUI
   auto HasButtonForFeature = [this](const CControllerFeature &feature)
     {
       return m_featureList->HasButton(feature.Type());
@@ -181,6 +201,20 @@ bool CGUIControllerList::RefreshControllers(void)
 
   newControllers.erase(std::remove_if(newControllers.begin(), newControllers.end(), HasButtonForController), newControllers.end());
 
+  // Filter by current game add-on
+  if (m_gameClient)
+  {
+    const CControllerTree &controllers = m_gameClient->Input().GetControllerTree();
+
+    auto ControllerNotAccepted = [&controllers](const ControllerPtr &controller)
+      {
+        return !controllers.IsControllerAccepted(controller->ID());
+      };
+
+    if (!std::all_of(newControllers.begin(), newControllers.end(), ControllerNotAccepted))
+      newControllers.erase(std::remove_if(newControllers.begin(), newControllers.end(), ControllerNotAccepted), newControllers.end());
+  }
+
   // Check for changes
   std::set<std::string> oldControllerIds;
   std::set<std::string> newControllerIds;
diff --git a/xbmc/games/controllers/windows/GUIControllerList.h b/xbmc/games/controllers/windows/GUIControllerList.h
index 87d374f8e26e..a62333d3f6ef 100644
--- a/xbmc/games/controllers/windows/GUIControllerList.h
+++ b/xbmc/games/controllers/windows/GUIControllerList.h
@@ -23,6 +23,7 @@
 #include "IConfigurationWindow.h"
 #include "addons/AddonEvents.h"
 #include "addons/Addon.h"
+#include "games/GameTypes.h"
 #include "games/controllers/ControllerTypes.h"
 
 #include <set>
@@ -68,6 +69,7 @@ namespace GAME
     // Game stuff
     ControllerVector      m_controllers;
     int                   m_focusedController;
+    GameClientPtr         m_gameClient;
   };
 }
 }
diff --git a/xbmc/games/controllers/windows/GUIControllerWindow.cpp b/xbmc/games/controllers/windows/GUIControllerWindow.cpp
index 6e40a8b4c5fe..88728b714bbb 100644
--- a/xbmc/games/controllers/windows/GUIControllerWindow.cpp
+++ b/xbmc/games/controllers/windows/GUIControllerWindow.cpp
@@ -26,6 +26,9 @@
 #include "addons/GUIWindowAddonBrowser.h"
 #include "addons/IAddon.h"
 #include "addons/AddonManager.h"
+#include "cores/RetroPlayer/guibridge/GUIGameRenderManager.h"
+#include "cores/RetroPlayer/guibridge/GUIGameSettingsHandle.h"
+#include "games/addons/GameClient.h"
 #include "games/controllers/dialogs/GUIDialogIgnoreInput.h"
 #include "guilib/GUIButtonControl.h"
 #include "guilib/GUIControl.h"
@@ -198,6 +201,19 @@ void CGUIControllerWindow::OnEvent(const ADDON::CRepositoryUpdater::RepositoryUp
 
 void CGUIControllerWindow::OnInitWindow(void)
 {
+  // Get active game add-on
+  GameClientPtr gameClient;
+  {
+    auto gameSettingsHandle = CServiceBroker::GetGameRenderManager().RegisterGameSettingsDialog();
+    if (gameSettingsHandle)
+    {
+      ADDON::AddonPtr addon;
+      if (CServiceBroker::GetAddonMgr().GetAddon(gameSettingsHandle->GameClientID(), addon, ADDON::ADDON_GAMEDLL))
+        gameClient = std::static_pointer_cast<CGameClient>(addon);
+    }
+  }
+  m_gameClient = std::move(gameClient);
+
   CGUIDialog::OnInitWindow();
 
   if (!m_featureList)
@@ -247,6 +263,8 @@ void CGUIControllerWindow::OnDeinitWindow(int nextWindowID)
   }
 
   CGUIDialog::OnDeinitWindow(nextWindowID);
+
+  m_gameClient.reset();
 }
 
 void CGUIControllerWindow::OnControllerFocused(unsigned int controllerIndex)
@@ -278,7 +296,10 @@ void CGUIControllerWindow::UpdateButtons(void)
   using namespace ADDON;
 
   VECADDONS addons;
-  CONTROL_ENABLE_ON_CONDITION(CONTROL_GET_MORE, CServiceBroker::GetAddonMgr().GetInstallableAddons(addons, ADDON::ADDON_GAME_CONTROLLER) && !addons.empty());
+  if (m_gameClient)
+    SET_CONTROL_HIDDEN(CONTROL_GET_MORE);
+  else
+    CONTROL_ENABLE_ON_CONDITION(CONTROL_GET_MORE, CServiceBroker::GetAddonMgr().GetInstallableAddons(addons, ADDON::ADDON_GAME_CONTROLLER) && !addons.empty());
 }
 
 void CGUIControllerWindow::GetMoreControllers(void)
diff --git a/xbmc/games/controllers/windows/GUIControllerWindow.h b/xbmc/games/controllers/windows/GUIControllerWindow.h
index b5e110509003..45740fd47935 100644
--- a/xbmc/games/controllers/windows/GUIControllerWindow.h
+++ b/xbmc/games/controllers/windows/GUIControllerWindow.h
@@ -21,6 +21,7 @@
 #pragma once
 
 #include "addons/RepositoryUpdater.h"
+#include "games/GameTypes.h"
 #include "guilib/GUIDialog.h"
 
 namespace KODI
@@ -60,7 +61,10 @@ namespace GAME
     void ShowButtonCaptureDialog(void);
 
     IControllerList* m_controllerList = nullptr;
-    IFeatureList*    m_featureList = nullptr;
+    IFeatureList* m_featureList = nullptr;
+
+    // Game paremeters
+    GameClientPtr m_gameClient;
   };
 }
 }

From 5c8165d3a6dc925ccab094c29c0fd9ce6fa6feb3 Mon Sep 17 00:00:00 2001
From: Garrett Brown <themagnificentmrb@gmail.com>
Date: Mon, 2 Jul 2018 17:30:50 -0700
Subject: [PATCH 4/4] Game OSD: Rename CDialogGameViewMode to
 CDialogGameStretchMode

---
 xbmc/games/dialogs/osd/CMakeLists.txt                |  4 ++--
 ...logGameViewMode.cpp => DialogGameStretchMode.cpp} | 20 ++++++++++----------
 ...{DialogGameViewMode.h => DialogGameStretchMode.h} |  6 +++---
 xbmc/guilib/GUIWindowManager.cpp                     |  6 +++---
 xbmc/guilib/WindowIDs.h                              |  2 +-
 xbmc/input/WindowTranslator.cpp                      |  2 +-
 6 files changed, 20 insertions(+), 20 deletions(-)
 rename xbmc/games/dialogs/osd/{DialogGameViewMode.cpp => DialogGameStretchMode.cpp} (84%)
 rename xbmc/games/dialogs/osd/{DialogGameViewMode.h => DialogGameStretchMode.h} (91%)

diff --git a/xbmc/games/dialogs/osd/CMakeLists.txt b/xbmc/games/dialogs/osd/CMakeLists.txt
index 68a365e7e55e..c0bf01c32398 100644
--- a/xbmc/games/dialogs/osd/CMakeLists.txt
+++ b/xbmc/games/dialogs/osd/CMakeLists.txt
@@ -1,18 +1,18 @@
 set(SOURCES DialogGameAdvancedSettings.cpp
             DialogGameOSD.cpp
+            DialogGameStretchMode.cpp
             DialogGameVideoFilter.cpp
             DialogGameVideoRotation.cpp
             DialogGameVideoSelect.cpp
-            DialogGameViewMode.cpp
             DialogGameVolume.cpp
 )
 
 set(HEADERS DialogGameAdvancedSettings.h
             DialogGameOSD.h
+            DialogGameStretchMode.h
             DialogGameVideoFilter.h
             DialogGameVideoRotation.h
             DialogGameVideoSelect.h
-            DialogGameViewMode.h
             DialogGameVolume.h
 )
 
diff --git a/xbmc/games/dialogs/osd/DialogGameViewMode.cpp b/xbmc/games/dialogs/osd/DialogGameStretchMode.cpp
similarity index 84%
rename from xbmc/games/dialogs/osd/DialogGameViewMode.cpp
rename to xbmc/games/dialogs/osd/DialogGameStretchMode.cpp
index 613a02261ffc..b965a242a8f5 100644
--- a/xbmc/games/dialogs/osd/DialogGameViewMode.cpp
+++ b/xbmc/games/dialogs/osd/DialogGameStretchMode.cpp
@@ -18,7 +18,7 @@
  *
  */
 
-#include "DialogGameViewMode.h"
+#include "DialogGameStretchMode.h"
 #include "cores/RetroPlayer/guibridge/GUIGameVideoHandle.h"
 #include "guilib/LocalizeStrings.h"
 #include "guilib/WindowIDs.h"
@@ -30,7 +30,7 @@
 using namespace KODI;
 using namespace GAME;
 
-const std::vector<CDialogGameViewMode::ViewModeProperties> CDialogGameViewMode::m_allViewModes =
+const std::vector<CDialogGameStretchMode::ViewModeProperties> CDialogGameStretchMode::m_allViewModes =
 {
   { 630,   RETRO::VIEWMODE::Normal },
 //  { 631,   RETRO::VIEWMODE::Zoom }, //! @todo RetroArch allows trimming some outer pixels
@@ -39,17 +39,17 @@ const std::vector<CDialogGameViewMode::ViewModeProperties> CDialogGameViewMode::
   { 635,   RETRO::VIEWMODE::Original },
 };
 
-CDialogGameViewMode::CDialogGameViewMode() :
-  CDialogGameVideoSelect(WINDOW_DIALOG_GAME_VIEW_MODE)
+CDialogGameStretchMode::CDialogGameStretchMode() :
+  CDialogGameVideoSelect(WINDOW_DIALOG_GAME_STRETCH_MODE)
 {
 }
 
-std::string CDialogGameViewMode::GetHeading()
+std::string CDialogGameStretchMode::GetHeading()
 {
   return g_localizeStrings.Get(35233); // "Stretch mode"
 }
 
-void CDialogGameViewMode::PreInit()
+void CDialogGameStretchMode::PreInit()
 {
   m_viewModes.clear();
 
@@ -82,7 +82,7 @@ void CDialogGameViewMode::PreInit()
   }
 }
 
-void CDialogGameViewMode::GetItems(CFileItemList &items)
+void CDialogGameStretchMode::GetItems(CFileItemList &items)
 {
   for (const auto &viewMode : m_viewModes)
   {
@@ -92,7 +92,7 @@ void CDialogGameViewMode::GetItems(CFileItemList &items)
   }
 }
 
-void CDialogGameViewMode::OnItemFocus(unsigned int index)
+void CDialogGameStretchMode::OnItemFocus(unsigned int index)
 {
   if (index < m_viewModes.size())
   {
@@ -107,7 +107,7 @@ void CDialogGameViewMode::OnItemFocus(unsigned int index)
   }
 }
 
-unsigned int CDialogGameViewMode::GetFocusedItem() const
+unsigned int CDialogGameStretchMode::GetFocusedItem() const
 {
   CGameSettings &gameSettings = CMediaSettings::GetInstance().GetCurrentGameSettings();
 
@@ -121,7 +121,7 @@ unsigned int CDialogGameViewMode::GetFocusedItem() const
   return 0;
 }
 
-void CDialogGameViewMode::PostExit()
+void CDialogGameStretchMode::PostExit()
 {
   m_viewModes.clear();
 }
diff --git a/xbmc/games/dialogs/osd/DialogGameViewMode.h b/xbmc/games/dialogs/osd/DialogGameStretchMode.h
similarity index 91%
rename from xbmc/games/dialogs/osd/DialogGameViewMode.h
rename to xbmc/games/dialogs/osd/DialogGameStretchMode.h
index e74c797bf0ab..551a6f8a4ca8 100644
--- a/xbmc/games/dialogs/osd/DialogGameViewMode.h
+++ b/xbmc/games/dialogs/osd/DialogGameStretchMode.h
@@ -29,11 +29,11 @@ namespace KODI
 {
 namespace GAME
 {
-  class CDialogGameViewMode : public CDialogGameVideoSelect
+  class CDialogGameStretchMode : public CDialogGameVideoSelect
   {
   public:
-    CDialogGameViewMode();
-    ~CDialogGameViewMode() override = default;
+    CDialogGameStretchMode();
+    ~CDialogGameStretchMode() override = default;
 
   protected:
     // implementation of CDialogGameVideoSelect
diff --git a/xbmc/guilib/GUIWindowManager.cpp b/xbmc/guilib/GUIWindowManager.cpp
index f7f2cf84efa9..de8d0ebfb8cf 100644
--- a/xbmc/guilib/GUIWindowManager.cpp
+++ b/xbmc/guilib/GUIWindowManager.cpp
@@ -158,9 +158,9 @@
 #include "games/windows/GUIWindowGames.h"
 #include "games/dialogs/osd/DialogGameAdvancedSettings.h"
 #include "games/dialogs/osd/DialogGameOSD.h"
+#include "games/dialogs/osd/DialogGameStretchMode.h"
 #include "games/dialogs/osd/DialogGameVideoFilter.h"
 #include "games/dialogs/osd/DialogGameVideoRotation.h"
-#include "games/dialogs/osd/DialogGameViewMode.h"
 #include "games/dialogs/osd/DialogGameVolume.h"
 
 using namespace KODI;
@@ -322,7 +322,7 @@ void CGUIWindowManager::CreateWindows()
   Add(new GAME::CGUIWindowGames);
   Add(new GAME::CDialogGameOSD);
   Add(new GAME::CDialogGameVideoFilter);
-  Add(new GAME::CDialogGameViewMode);
+  Add(new GAME::CDialogGameStretchMode);
   Add(new GAME::CDialogGameVolume);
   Add(new GAME::CDialogGameAdvancedSettings);
   Add(new GAME::CDialogGameVideoRotation);
@@ -436,7 +436,7 @@ bool CGUIWindowManager::DestroyWindows()
     DestroyWindow(WINDOW_GAMES);
     DestroyWindow(WINDOW_DIALOG_GAME_OSD);
     DestroyWindow(WINDOW_DIALOG_GAME_VIDEO_FILTER);
-    DestroyWindow(WINDOW_DIALOG_GAME_VIEW_MODE);
+    DestroyWindow(WINDOW_DIALOG_GAME_STRETCH_MODE);
     DestroyWindow(WINDOW_DIALOG_GAME_VOLUME);
     DestroyWindow(WINDOW_DIALOG_GAME_ADVANCED_SETTINGS);
     DestroyWindow(WINDOW_DIALOG_GAME_VIDEO_ROTATION);
diff --git a/xbmc/guilib/WindowIDs.h b/xbmc/guilib/WindowIDs.h
index e5d53be1d082..e6b8a37120e1 100644
--- a/xbmc/guilib/WindowIDs.h
+++ b/xbmc/guilib/WindowIDs.h
@@ -158,7 +158,7 @@
 #define WINDOW_GAMES                      10821
 #define WINDOW_DIALOG_GAME_OSD            10822
 #define WINDOW_DIALOG_GAME_VIDEO_FILTER   10823
-#define WINDOW_DIALOG_GAME_VIEW_MODE      10824
+#define WINDOW_DIALOG_GAME_STRETCH_MODE   10824
 #define WINDOW_DIALOG_GAME_VOLUME         10825
 #define WINDOW_DIALOG_GAME_ADVANCED_SETTINGS 10826
 #define WINDOW_DIALOG_GAME_VIDEO_ROTATION 10827
diff --git a/xbmc/input/WindowTranslator.cpp b/xbmc/input/WindowTranslator.cpp
index a2b9b5c4cda8..d8b9ec86bd8e 100644
--- a/xbmc/input/WindowTranslator.cpp
+++ b/xbmc/input/WindowTranslator.cpp
@@ -157,7 +157,7 @@ const CWindowTranslator::WindowMapByName CWindowTranslator::WindowMappingByName
     { "radiotimerrules"          , WINDOW_RADIO_TIMER_RULES},
     { "gameosd"                  , WINDOW_DIALOG_GAME_OSD },
     { "gamevideofilter"          , WINDOW_DIALOG_GAME_VIDEO_FILTER },
-    { "gameviewmode"             , WINDOW_DIALOG_GAME_VIEW_MODE },
+    { "gameviewmode"             , WINDOW_DIALOG_GAME_STRETCH_MODE },
     { "gamevolume"               , WINDOW_DIALOG_GAME_VOLUME },
     { "gameadvancedsettings"     , WINDOW_DIALOG_GAME_ADVANCED_SETTINGS },
     { "gamevideorotation"        , WINDOW_DIALOG_GAME_VIDEO_ROTATION },
