From 136ca3b1bb5edd894d3c2a81a9ab3b493fa1d766 Mon Sep 17 00:00:00 2001
From: the-black-eagle <g.moore@gmx.co.uk>
Date: Sun, 31 May 2020 11:22:37 +0100
Subject: [PATCH 1/2] [Music] read and process musicbrainz album release status
 tag

[scraper] Add musicbrainz album release status to python scraper
---
 .../resources/strings.po                      | 10 ++++--
 xbmc/GUIInfoManager.cpp                       |  9 ++++++
 xbmc/addons/Scraper.cpp                       |  1 +
 xbmc/guilib/guiinfo/GUIInfoLabels.h           |  1 +
 xbmc/guilib/guiinfo/MusicGUIInfo.cpp          |  3 ++
 xbmc/music/Album.cpp                          |  5 +++
 xbmc/music/Album.h                            |  2 ++
 xbmc/music/MusicDatabase.cpp                  | 32 +++++++++++++------
 xbmc/music/MusicDatabase.h                    |  5 +++
 xbmc/music/tags/MusicInfoTag.cpp              | 19 +++++++++++
 xbmc/music/tags/MusicInfoTag.h                |  3 ++
 xbmc/music/tags/TagLoaderTagLib.cpp           | 10 +++++-
 xbmc/playlists/SmartPlayList.cpp              |  2 ++
 xbmc/utils/DatabaseUtils.cpp                  |  4 +++
 xbmc/utils/DatabaseUtils.h                    |  1 +
 15 files changed, 94 insertions(+), 13 deletions(-)

diff --git a/addons/resource.language.en_gb/resources/strings.po b/addons/resource.language.en_gb/resources/strings.po
index 35706f9f079e..3155a5d96f76 100644
--- a/addons/resource.language.en_gb/resources/strings.po
+++ b/addons/resource.language.en_gb/resources/strings.po
@@ -21484,8 +21484,14 @@ msgctxt "#38080"
 msgid "BPM"
 msgstr ""
 
-#empty strings from id 38081 to 38099
-#strings 38081 to 38099 reserved for music library
+#. Music property - Album release status
+#: xbmc/playlists/SmartPlaylist.cpp
+msgctxt "#38081"
+msgid "Release status"
+msgstr ""
+
+#empty strings from id 38082 to 38099
+#strings 38082 to 38099 reserved for music library
 
 #. Description of section #14200 "Player""
 #: system/settings/settings.xml
diff --git a/xbmc/GUIInfoManager.cpp b/xbmc/GUIInfoManager.cpp
index fde6eabc1c5b..3ad39c2e3074 100644
--- a/xbmc/GUIInfoManager.cpp
+++ b/xbmc/GUIInfoManager.cpp
@@ -6435,6 +6435,14 @@ const infomap container_str[]  = {{ "property",         CONTAINER_PROPERTY },
 ///     @skinning_v19 **[New Infolabel]** \link ListItem_TvShowDBID `ListItem.TvShowDBID`\endlink
 ///     <p>
 ///   }
+///   \table_row3{   <b>`ListItem.AlbumStatus`</b>,
+///                  \anchor ListItem_AlbumStatus
+///                  _string_,
+///     @return The Musicbrainz release status of the album (offical, bootleg, promotion etc)
+///     <p><hr>
+///     @skinning_v19 **[New Infolabel]** \link ListItem_AlbumStatus `ListItem.AlbumStatus`\endlink
+///     <p>
+///   }
 /// \table_end
 ///
 /// -----------------------------------------------------------------------------
@@ -6642,6 +6650,7 @@ const infomap listitem_labels[]= {{ "thumb",            LISTITEM_THUMB },
                                   { "isfinale",         LISTITEM_IS_FINALE },
                                   { "islive",           LISTITEM_IS_LIVE },
                                   { "tvshowdbid",       LISTITEM_TVSHOWDBID },
+                                  { "albumstatus",      LISTITEM_ALBUMSTATUS },
 };
 
 /// \page modules__infolabels_boolean_conditions
diff --git a/xbmc/addons/Scraper.cpp b/xbmc/addons/Scraper.cpp
index d4d35af06c47..5d6448753819 100644
--- a/xbmc/addons/Scraper.cpp
+++ b/xbmc/addons/Scraper.cpp
@@ -759,6 +759,7 @@ void DetailsFromFileItem<CAlbum>(const CFileItem &item, CAlbum &album)
     album.strReleaseDate = FromString(item, "album.year");
   album.strLabel = FromString(item, "album.label");
   album.strType = FromString(item, "album.type");
+  album.strReleaseStatus = FromString(item, "album.releasestatus");
   album.SetReleaseType(FromString(item, "album.release_type"));
   album.fRating = item.GetProperty("album.rating").asFloat();
   album.iUserrating = item.GetProperty("album.user_rating").asInteger32();
diff --git a/xbmc/guilib/guiinfo/GUIInfoLabels.h b/xbmc/guilib/guiinfo/GUIInfoLabels.h
index 251ab08e324e..8d634be2c494 100644
--- a/xbmc/guilib/guiinfo/GUIInfoLabels.h
+++ b/xbmc/guilib/guiinfo/GUIInfoLabels.h
@@ -918,6 +918,7 @@
 #define LISTITEM_IS_FINALE          (LISTITEM_START + 201)
 #define LISTITEM_IS_LIVE            (LISTITEM_START + 202)
 #define LISTITEM_TVSHOWDBID         (LISTITEM_START + 203)
+#define LISTITEM_ALBUMSTATUS        (LISTITEM_START + 204)
 
 #define LISTITEM_END                (LISTITEM_START + 2500)
 
diff --git a/xbmc/guilib/guiinfo/MusicGUIInfo.cpp b/xbmc/guilib/guiinfo/MusicGUIInfo.cpp
index 614a4135d3a4..57cfe9297089 100644
--- a/xbmc/guilib/guiinfo/MusicGUIInfo.cpp
+++ b/xbmc/guilib/guiinfo/MusicGUIInfo.cpp
@@ -343,6 +343,9 @@ bool CMusicGUIInfo::GetLabel(std::string& value, const CFileItem *item, int cont
         }
         break;
       }
+      case LISTITEM_ALBUMSTATUS:
+        value = tag->GetAlbumReleaseStatus();
+        return true;
       case LISTITEM_FILENAME:
       case LISTITEM_FILE_EXTENSION:
         if (item->IsMusicDb())
diff --git a/xbmc/music/Album.cpp b/xbmc/music/Album.cpp
index 5a41e5d3f4cd..986000f1c610 100644
--- a/xbmc/music/Album.cpp
+++ b/xbmc/music/Album.cpp
@@ -57,6 +57,7 @@ CAlbum::CAlbum(const CFileItem& item)
   dateAdded.Reset();
   lastPlayed.Reset();
   releaseType = tag.GetAlbumReleaseType();
+  strReleaseStatus = tag.GetAlbumReleaseStatus();
 }
 
 void CAlbum::SetArtistCredits(const std::vector<std::string>& names, const std::vector<std::string>& hints,
@@ -315,6 +316,8 @@ void CAlbum::MergeScrapedAlbum(const CAlbum& source, bool override /* = true */)
   if ((override && !source.strType.empty()) || strType.empty())
     strType = source.strType;
 //  strPath = source.strPath; // don't merge the path
+  if ((override && !source.strReleaseStatus.empty()) || strReleaseStatus.empty())
+    strReleaseStatus = source.strReleaseStatus;
   fRating = source.fRating;
   iUserrating = source.iUserrating;
   iVotes = source.iVotes;
@@ -489,6 +492,7 @@ bool CAlbum::Load(const TiXmlElement *album, bool append, bool prioritise)
   XMLUtils::GetString(album,"review",strReview);
   XMLUtils::GetString(album,"label",strLabel);
   XMLUtils::GetString(album,"type",strType);
+  XMLUtils::GetString(album, "releasestatus", strReleaseStatus);
 
   XMLUtils::GetString(album, "releasedate", strReleaseDate);
   StringUtils::Trim(strReleaseDate);  // @todo: validate ISO8601 format
@@ -613,6 +617,7 @@ bool CAlbum::Save(TiXmlNode *node, const std::string &tag, const std::string& st
 
   XMLUtils::SetString(album,      "review", strReview);
   XMLUtils::SetString(album,        "type", strType);
+  XMLUtils::SetString(album, "releasestatus", strReleaseStatus);
   XMLUtils::SetString(album, "releasedate", strReleaseDate);
   XMLUtils::SetString(album, "originalreleasedate", strOrigReleaseDate);
   XMLUtils::SetString(album,       "label", strLabel);
diff --git a/xbmc/music/Album.h b/xbmc/music/Album.h
index 18eac5b4f71d..9baef2ed33c5 100644
--- a/xbmc/music/Album.h
+++ b/xbmc/music/Album.h
@@ -49,6 +49,7 @@ class CAlbum
     strReview.clear();
     strLabel.clear();
     strType.clear();
+    strReleaseStatus.clear();
     strPath.clear();
     fRating = -1;
     iUserrating = -1;
@@ -151,6 +152,7 @@ class CAlbum
   std::string strReview;
   std::string strLabel;
   std::string strType;
+  std::string strReleaseStatus;
   std::string strPath;
   float fRating = -1;
   int iUserrating = -1;
diff --git a/xbmc/music/MusicDatabase.cpp b/xbmc/music/MusicDatabase.cpp
index 66a5fb6d9bba..3cecad224a1b 100644
--- a/xbmc/music/MusicDatabase.cpp
+++ b/xbmc/music/MusicDatabase.cpp
@@ -153,6 +153,7 @@ void CMusicDatabase::CreateTables()
               " lastScraped varchar(20) default NULL, "
               " bScrapedMBID INTEGER NOT NULL DEFAULT 0, "
               " strReleaseType text, "
+              " strReleaseStatus TEXT, "
               " iDiscTotal INTEGER NOT NULL DEFAULT 0, "
               " idInfoSetting INTEGER NOT NULL DEFAULT 0)");
 
@@ -322,6 +323,7 @@ void CMusicDatabase::CreateViews()
               "        song.idAlbum AS idAlbum, "
               "        strAlbum, "
               "        strPath, "
+              "        album.strReleaseStatus as strReleaseStatus,"
               "        album.bCompilation AS bCompilation,"
               "        album.bBoxedSet AS bBoxedSet, "
               "        album.strArtistDisp AS strAlbumArtists,"
@@ -358,6 +360,7 @@ void CMusicDatabase::CreateViews()
               "        strReview, "
               "        strLabel, "
               "        strType, "
+              "        strReleaseStatus, "
               "        album.strImage as strImage, "
               "        album.fRating, "
               "        album.iUserrating, "
@@ -557,7 +560,7 @@ bool CMusicDatabase::AddAlbum(CAlbum& album, int idSource)
                            album.GetGenreString(),
                            album.strReleaseDate, album.strOrigReleaseDate,
                            album.bBoxedSet,
-                           album.strLabel, album.strType,
+                           album.strLabel, album.strType, album.strReleaseStatus,
                            album.bCompilation, album.releaseType);
 
   // Add the album artists
@@ -711,7 +714,7 @@ bool CMusicDatabase::UpdateAlbum(CAlbum& album)
               StringUtils::Join(album.themes, itemSeparator),
               album.strReview,
               album.thumbURL.GetData(),
-              album.strLabel, album.strType,
+              album.strLabel, album.strType, album.strReleaseStatus,
               album.fRating, album.iUserrating, album.iVotes, 
               album.strReleaseDate, album.strOrigReleaseDate,
               album.bBoxedSet,
@@ -1083,6 +1086,7 @@ int CMusicDatabase::AddAlbum(const std::string& strAlbum, const std::string& str
                              const std::string& strReleaseDate, const std::string& strOrigReleaseDate,
                              bool bBoxedSet,
                              const std::string& strRecordLabel, const std::string& strType,
+                             const std::string& strReleaseStatus,
                              bool bCompilation, CAlbum::ReleaseType releaseType)
 {
   std::string strSQL;
@@ -1112,13 +1116,13 @@ int CMusicDatabase::AddAlbum(const std::string& strAlbum, const std::string& str
       strSQL = PrepareSQL(
           "INSERT INTO album (idAlbum, strAlbum, strArtistDisp, strGenres, "
           "strReleaseDate, strOrigReleaseDate, bBoxedSet, "
-          "strLabel, strType, bCompilation, strReleaseType, strMusicBrainzAlbumID, "
-          "strReleaseGroupMBID, strArtistSort) "
-          "values(NULL, '%s', '%s', '%s', '%s', '%s', %i, '%s', '%s', %i, '%s'",
+          "strLabel, strType, bCompilation, strReleaseType, strReleaseStatus, "
+          "strMusicBrainzAlbumID, strReleaseGroupMBID, strArtistSort) "
+          "values(NULL, '%s', '%s', '%s', '%s', '%s', %i, '%s', '%s', %i, '%s', '%s'",
           strAlbum.c_str(), strArtist.c_str(), strGenre.c_str(), 
           strReleaseDate.c_str(), strOrigReleaseDate.c_str(), bBoxedSet,
           strRecordLabel.c_str(), strType.c_str(), bCompilation,
-          CAlbum::ReleaseTypeToString(releaseType).c_str());
+          CAlbum::ReleaseTypeToString(releaseType).c_str(), strReleaseStatus.c_str());
 
       if (strMusicBrainzAlbumID.empty())
         strSQL += PrepareSQL(", NULL");
@@ -1166,11 +1170,13 @@ int CMusicDatabase::AddAlbum(const std::string& strAlbum, const std::string& str
       strSQL +=
           PrepareSQL(", strGenres = '%s', strReleaseDate= '%s', strOrigReleaseDate= '%s', "
                      "bBoxedSet=%i, strLabel = '%s', strType = '%s', "
-                     "bCompilation=%i, strReleaseType = '%s', lastScraped = NULL "
+                     "bCompilation=%i, strReleaseType = '%s',"
+                     "strReleaseStatus = '%s', lastScraped = NULL "
                      "WHERE idAlbum=%i",
                      strGenre.c_str(), strReleaseDate.c_str(), strOrigReleaseDate.c_str(), 
                      bBoxedSet, strRecordLabel.c_str(), strType.c_str(),
-                     bCompilation, CAlbum::ReleaseTypeToString(releaseType).c_str(), idAlbum);
+                     bCompilation, CAlbum::ReleaseTypeToString(releaseType).c_str(),
+                     strReleaseStatus.c_str(), idAlbum);
       m_pDS->exec(strSQL);
       DeleteAlbumArtistsByAlbum(idAlbum);
       DeleteAlbumSources(idAlbum);
@@ -1199,6 +1205,7 @@ int CMusicDatabase::UpdateAlbum(int idAlbum,
                                 const std::string& strImage,
                                 const std::string& strLabel,
                                 const std::string& strType,
+                                const std::string& strReleaseStatus,
                                 float fRating,
                                 int iUserrating,
                                 int iVotes,
@@ -1220,7 +1227,7 @@ int CMusicDatabase::UpdateAlbum(int idAlbum,
                       " strType = '%s', fRating = %f, iUserrating = %i, iVotes = %i,"
                       " strReleaseDate= '%s', strOrigReleaseDate= '%s', "
                       " bBoxedSet = %i, bCompilation = %i,"
-                      " strReleaseType = '%s',"
+                      " strReleaseType = '%s', strReleaseStatus = '%s', "
                       " lastScraped = '%s', bScrapedMBID = %i",
                       strAlbum.c_str(), strArtist.c_str(), strGenre.c_str(),
                       strMoods.c_str(), strStyles.c_str(), strThemes.c_str(),
@@ -1229,6 +1236,7 @@ int CMusicDatabase::UpdateAlbum(int idAlbum,
                       strReleaseDate.c_str(), strOrigReleaseDate.c_str(),
                       bBoxedSet, bCompilation,
                       CAlbum::ReleaseTypeToString(releaseType).c_str(),
+                      strReleaseStatus.c_str(),
                       CDateTime::GetCurrentDateTime().GetAsDBDateTime().c_str(),
                       bScrapedMBID);
   if (strMusicBrainzAlbumID.empty())
@@ -2596,6 +2604,7 @@ CAlbum CMusicDatabase::GetAlbumFromDataset(const dbiplus::sql_record* const reco
   album.themes = StringUtils::Split(record->at(offset + album_strThemes).get_asString(), itemSeparator);
   album.strLabel = record->at(offset + album_strLabel).get_asString();
   album.strType = record->at(offset + album_strType).get_asString();
+  album.strReleaseStatus = record->at(offset + album_strReleaseStatus).get_asString();
   album.bCompilation = record->at(offset + album_bCompilation).get_asInt() == 1;
   album.bScrapedMBID = record->at(offset + album_bScrapedMBID).get_asInt() == 1;
   album.strLastScraped = record->at(offset + album_lastScraped).get_asString();
@@ -6276,6 +6285,7 @@ static const translateJSONField JSONtoDBAlbum[] = {
   { "lastplayed",                "string", true,  "lastPlayed",             "" },  // Scalar subquery in view
   { "originaldate",              "string", true,  "strOrigReleaseDate",     "" },
   { "releasedate",               "string", true,  "strReleaseDate",         "" },
+  { "albumstatus",               "string", true,  "strReleaseStatus",       "" },
   // Scalar subquery fields
   { "year",                     "integer", true,  "iYear",                  "CAST(<datefield> AS INTEGER) AS iYear" }, //From strReleaseDate or strOrigReleaseDate
   { "sourceid",                  "string", true,  "sourceid",               "(SELECT GROUP_CONCAT(album_source.idSource SEPARATOR '; ') FROM album_source WHERE album_source.idAlbum = albumview.idAlbum) AS sources" },
@@ -8138,6 +8148,8 @@ void CMusicDatabase::UpdateTables(int version)
     m_pDS->exec("ALTER TABLE song ADD iSampleRate INTEGER NOT NULL DEFAULT 0");
     m_pDS->exec("ALTER TABLE song ADD iChannels INTEGER NOT NULL DEFAULT 0");
   }
+  if (version < 77)
+    m_pDS->exec("ALTER TABLE album ADD strReleaseStatus TEXT");
 
   // Set the verion of tag scanning required.
   // Not every schema change requires the tags to be rescanned, set to the highest schema version
@@ -8159,7 +8171,7 @@ void CMusicDatabase::UpdateTables(int version)
 
 int CMusicDatabase::GetSchemaVersion() const
 {
-  return 76; // Bumped for addition of functions to MySQL, SQLite v76 = v75
+  return 77; // Bumped for new tag processing (Musicbrainz album release status)
 }
 
 int CMusicDatabase::GetMusicNeedsTagScan()
diff --git a/xbmc/music/MusicDatabase.h b/xbmc/music/MusicDatabase.h
index a0e5536145aa..3124f1c6b42d 100644
--- a/xbmc/music/MusicDatabase.h
+++ b/xbmc/music/MusicDatabase.h
@@ -248,6 +248,7 @@ class CMusicDatabase : public CDatabase
    \param bBoxedSet if the album is a boxset
    \param strRecordLabel the recording label
    \param strType album type (Musicbrainz release type e.g. "Broadcast, Soundtrack, live"),
+   \param strReleaseStatus (see https://musicbrainz.org/doc/Release#Status)
    \param bCompilation if the album is a compilation
    \param releaseType "album" or "single"
    \return the id of the album
@@ -259,6 +260,7 @@ class CMusicDatabase : public CDatabase
                 const std::string& strReleaseDate, const std::string& strOrigReleaseDate,
                 bool bBoxedSet,
                 const std::string& strRecordLabel, const std::string& strType,
+                const std::string& strReleaseStatus,
                 bool bCompilation, CAlbum::ReleaseType releaseType);
 
   /*! \brief retrieve an album, optionally with all songs.
@@ -277,6 +279,7 @@ class CMusicDatabase : public CDatabase
                    const std::string& strThemes, const std::string& strReview,
                    const std::string& strImage, const std::string& strLabel,
                    const std::string& strType,
+                   const std::string& strReleaseStatus,
                    float fRating, int iUserrating, int iVotes,
                    const std::string& strReleaseDate, const std::string& strOrigReleaseDate,
                    bool bBoxedSet,
@@ -798,6 +801,7 @@ void SetLibraryLastUpdated();
     song_idAlbum,
     song_strAlbum,
     song_strPath,
+    song_strReleaseStatus,
     song_bCompilation,
     song_bBoxedSet,
     song_strAlbumArtists,
@@ -833,6 +837,7 @@ void SetLibraryLastUpdated();
     album_strReview,
     album_strLabel,
     album_strType,
+    album_strReleaseStatus,
     album_strThumbURL,
     album_fRating,
     album_iUserrating,
diff --git a/xbmc/music/tags/MusicInfoTag.cpp b/xbmc/music/tags/MusicInfoTag.cpp
index 5b14e9d4e0df..9706888c9f66 100644
--- a/xbmc/music/tags/MusicInfoTag.cpp
+++ b/xbmc/music/tags/MusicInfoTag.cpp
@@ -306,6 +306,13 @@ const std::string MUSIC_INFO::CMusicInfoTag::GetReleaseYear() const
   return StringUtils::Left(m_strReleaseDate, 4);
 }
 
+// This is the Musicbrainz release status tag. See https://musicbrainz.org/doc/Release#Status
+
+const std::string& CMusicInfoTag::GetAlbumReleaseStatus() const
+{
+  return m_strReleaseStatus;
+}
+
 void CMusicInfoTag::SetURL(const std::string& strURL)
 {
   m_strURL = strURL;
@@ -721,6 +728,13 @@ void CMusicInfoTag::SetType(const MediaType mediaType)
   m_type = mediaType;
 }
 
+// This is the Musicbrainz release status tag. See https://musicbrainz.org/doc/Release#Status
+
+void CMusicInfoTag::SetAlbumReleaseStatus(const std::string& ReleaseStatus)
+{
+  m_strReleaseStatus = ReleaseStatus;
+}
+
 void CMusicInfoTag::SetArtist(const CArtist& artist)
 {
   SetArtist(artist.strArtist);
@@ -755,6 +769,7 @@ void CMusicInfoTag::SetAlbum(const CAlbum& album)
   SetMusicBrainzAlbumID(album.strMusicBrainzAlbumID);
   SetMusicBrainzReleaseGroupID(album.strReleaseGroupMBID);
   SetMusicBrainzReleaseType(album.strType);
+  SetAlbumReleaseStatus(album.strReleaseStatus);
   SetGenre(album.genre);
   SetMood(StringUtils::Join(album.moods, CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->m_musicItemSeparator));
   SetRecordLabel(album.strLabel);
@@ -901,6 +916,7 @@ void CMusicInfoTag::Serialize(CVariant& value) const
   value["disctitle"] = m_strDiscSubtitle;
   value["releasedate"] = m_strReleaseDate;
   value["originaldate"] = m_strOriginalDate;
+  value["albumstatus"] = m_strReleaseStatus;
   value["bpm"] = m_iBPM;
   value["bitrate"] = m_bitrate;
   value["samplerate"] = m_samplerate;
@@ -995,6 +1011,7 @@ void CMusicInfoTag::Archive(CArchive& ar)
     ar << m_iAlbumId;
     ar << m_iDbId;
     ar << m_type;
+    ar << m_strReleaseStatus;
     ar << m_strLyrics;
     ar << m_bCompilation;
     ar << m_listeners;
@@ -1058,6 +1075,7 @@ void CMusicInfoTag::Archive(CArchive& ar)
     ar >> m_iAlbumId;
     ar >> m_iDbId;
     ar >> m_type;
+    ar >> m_strReleaseStatus;
     ar >> m_strLyrics;
     ar >> m_bCompilation;
     ar >> m_listeners;
@@ -1105,6 +1123,7 @@ void CMusicInfoTag::Clear()
   m_cuesheet.clear();
   m_iDbId = -1;
   m_type.clear();
+  m_strReleaseStatus.clear();
   m_iTimesPlayed = 0;
   m_strReleaseDate.clear();
   m_strOriginalDate.clear();
diff --git a/xbmc/music/tags/MusicInfoTag.h b/xbmc/music/tags/MusicInfoTag.h
index e4eccd654cc9..1d93f2f77369 100644
--- a/xbmc/music/tags/MusicInfoTag.h
+++ b/xbmc/music/tags/MusicInfoTag.h
@@ -82,6 +82,7 @@ class CMusicInfoTag final : public IArchivable, public ISerializable, public ISo
   int GetBitRate() const;
   int GetNoOfChannels() const;
   int GetSampleRate() const;
+  const std::string& GetAlbumReleaseStatus() const;
   const EmbeddedArtInfo &GetCoverArtInfo() const;
   const ReplayGain& GetReplayGain() const;
   CAlbum::ReleaseType GetAlbumReleaseType() const;
@@ -147,6 +148,7 @@ class CMusicInfoTag final : public IArchivable, public ISerializable, public ISo
   void SetBitRate(int bitrate);
   void SetNoOfChannels(int channels);
   void SetSampleRate(int samplerate);
+  void SetAlbumReleaseStatus(const std::string& strReleaseStatus);
 
   /*! \brief Append a unique artist to the artist list
    Checks if we have this artist already added, and if not adds it to the songs artist list.
@@ -237,6 +239,7 @@ class CMusicInfoTag final : public IArchivable, public ISerializable, public ISo
   bool m_bBoxset;
   int m_iBPM;
   CAlbum::ReleaseType m_albumReleaseType;
+  std::string m_strReleaseStatus;
   int m_samplerate;
   int m_channels;
   int m_bitrate;
diff --git a/xbmc/music/tags/TagLoaderTagLib.cpp b/xbmc/music/tags/TagLoaderTagLib.cpp
index 432265f6f75f..06f445807890 100644
--- a/xbmc/music/tags/TagLoaderTagLib.cpp
+++ b/xbmc/music/tags/TagLoaderTagLib.cpp
@@ -200,7 +200,7 @@ bool CTagLoaderTagLib::ParseTag(ASF::Tag *asf, EmbeddedArt *art, CMusicInfoTag&
     else if (it->first == "MusicBrainz/Track Id")
       tag.SetMusicBrainzTrackID(it->second.front().toString().to8Bit(true));
     else if (it->first == "MusicBrainz/Album Status")
-    {}
+      tag.SetAlbumReleaseStatus(it->second.front().toString().toCString(true));
     else if (it->first == "MusicBrainz/Album Type")
       SetReleaseType(tag, GetASFStringList(it->second));
     else if (it->first == "MusicIP/PUID")
@@ -361,6 +361,8 @@ bool CTagLoaderTagLib::ParseTag(ID3v2::Tag *id3v2, EmbeddedArt *art, MUSIC_INFO:
           SetAlbumArtist(tag, StringListToVectorString(stringList));
         else if (desc == "MUSICBRAINZ ALBUM TYPE")
           SetReleaseType(tag, StringListToVectorString(stringList));
+        else if (desc == "MUSICBRAINZ ALBUM STATUS")
+          tag.SetAlbumReleaseStatus(stringList.front().to8Bit(true));
         else if (desc == "REPLAYGAIN_TRACK_GAIN")
           replayGainInfo.ParseGain(ReplayGain::TRACK, stringList.front().toCString(true));
         else if (desc == "REPLAYGAIN_ALBUM_GAIN")
@@ -584,6 +586,8 @@ bool CTagLoaderTagLib::ParseTag(APE::Tag *ape, EmbeddedArt *art, CMusicInfoTag&
       SetReleaseType(tag, StringListToVectorString(it->second.toStringList()));
     else if (it->first == "BPM")
       tag.SetBPM(it->second.toString().toInt());
+    else if (it->first == "MUSICBRAINZ_ALBUMSTATUS")
+      tag.SetAlbumReleaseStatus(it->second.toString().to8Bit(true));
     else if (it->first == "COVER ART (FRONT)")
     {
       TagLib::ByteVector tdata = it->second.binaryData();
@@ -724,6 +728,8 @@ bool CTagLoaderTagLib::ParseTag(Ogg::XiphComment *xiph, EmbeddedArt *art, CMusic
       SetReleaseType(tag, StringListToVectorString(it->second));
     else if (it->first == "BPM")
       tag.SetBPM(strtol(it->second.front().toCString(true), nullptr, 10));
+    else if (it->first == "RELEASESTATUS")
+      tag.SetAlbumReleaseStatus(it->second.front().toCString(true));
     else if (it->first == "RATING")
     {
       // Vorbis ratings are a mess because the standard forgot to mention anything about them.
@@ -901,6 +907,8 @@ bool CTagLoaderTagLib::ParseTag(MP4::Tag *mp4, EmbeddedArt *art, CMusicInfoTag&
       tag.SetMusicBrainzTrackID(it->second.toStringList().front().to8Bit(true));
     else if (it->first == "----:com.apple.iTunes:MusicBrainz Album Type")
       SetReleaseType(tag, StringListToVectorString(it->second.toStringList()));
+    else if (it->first == "----:com.apple.iTunes:MusicBrainz Album Status")
+      tag.SetAlbumReleaseStatus(it->second.toStringList().front().to8Bit(true));
     else if (it->first == "tmpo")
       tag.SetBPM(it->second.toIntPair().first);
     else if (it->first == "covr")
diff --git a/xbmc/playlists/SmartPlayList.cpp b/xbmc/playlists/SmartPlayList.cpp
index 834ba6c062ad..de115659aacc 100644
--- a/xbmc/playlists/SmartPlayList.cpp
+++ b/xbmc/playlists/SmartPlayList.cpp
@@ -126,6 +126,7 @@ static const translateField fields[] = {
   { "samplerate",        FieldSampleRate,              CDatabaseQueryRule::NUMERIC_FIELD,  NULL,                                 false, 613 },
   { "bitrate",           FieldMusicBitRate,            CDatabaseQueryRule::NUMERIC_FIELD,  NULL,                                 false, 623 },
   { "channels",          FieldNoOfChannels,            CDatabaseQueryRule::NUMERIC_FIELD,  StringValidation::IsPositiveInteger,  false, 253 },
+  { "albumstatus",       FieldAlbumStatus,             CDatabaseQueryRule::TEXT_FIELD,     NULL,                                 false, 38081 },
 };
 // clang-format on
 
@@ -356,6 +357,7 @@ std::vector<Field> CSmartPlaylistRule::GetFields(const std::string &type)
     fields.push_back(FieldPlaycount);
     fields.push_back(FieldLastPlayed);
     fields.push_back(FieldPath);
+    fields.push_back(FieldAlbumStatus);
   }
   else if (type == "artists")
   {
diff --git a/xbmc/utils/DatabaseUtils.cpp b/xbmc/utils/DatabaseUtils.cpp
index 021e35c2bfb1..ca456e1abb28 100644
--- a/xbmc/utils/DatabaseUtils.cpp
+++ b/xbmc/utils/DatabaseUtils.cpp
@@ -75,6 +75,8 @@ std::string DatabaseUtils::GetField(Field field, const MediaType &mediaType, Dat
     else if (field == FieldLastPlayed) return "albumview.lastPlayed";
     else if (field == FieldTotalDiscs)
       return "albumview.iDiscTotal";
+    else if (field == FieldAlbumStatus)
+        return "albumview.strReleaseStatus";
   }
   else if (mediaType == MediaTypeSong)
   {
@@ -534,6 +536,8 @@ int DatabaseUtils::GetField(Field field, const MediaType &mediaType, bool asInde
       return CMusicDatabase::album_iTotalDiscs;
     else if (field == FieldOrigYear || field == FieldOrigDate)
       return CMusicDatabase::album_strOrigReleaseDate;
+    else if (field == FieldAlbumStatus)
+      return CMusicDatabase::album_strReleaseStatus;
   }
   else if (mediaType == MediaTypeSong)
   {
diff --git a/xbmc/utils/DatabaseUtils.h b/xbmc/utils/DatabaseUtils.h
index 6b8facb26863..75514eb4cbd1 100644
--- a/xbmc/utils/DatabaseUtils.h
+++ b/xbmc/utils/DatabaseUtils.h
@@ -141,6 +141,7 @@ typedef enum {
   FieldMusicBitRate,
   FieldSampleRate,
   FieldNoOfChannels,
+  FieldAlbumStatus,
   FieldMax
 } Field;
 

From 7da59b82e8b39287bccc210bf4455a8809489bb5 Mon Sep 17 00:00:00 2001
From: the-black-eagle <g.moore@gmx.co.uk>
Date: Mon, 1 Jun 2020 11:20:49 +0100
Subject: [PATCH 2/2] [JSON] Add album release status to json-rpc

---
 xbmc/interfaces/json-rpc/AudioLibrary.cpp   |  2 ++
 xbmc/interfaces/json-rpc/schema/types.json  | 10 ++++++----
 xbmc/interfaces/json-rpc/schema/version.txt |  2 +-
 xbmc/music/MusicDatabase.cpp                |  1 +
 4 files changed, 10 insertions(+), 5 deletions(-)

diff --git a/xbmc/interfaces/json-rpc/AudioLibrary.cpp b/xbmc/interfaces/json-rpc/AudioLibrary.cpp
index 5abfafa3ce35..97258b92e64c 100644
--- a/xbmc/interfaces/json-rpc/AudioLibrary.cpp
+++ b/xbmc/interfaces/json-rpc/AudioLibrary.cpp
@@ -782,6 +782,8 @@ JSONRPC_STATUS CAudioLibrary::SetAlbumDetails(const std::string &method, ITransp
     album.strOrigReleaseDate = parameterObject["originaldate"].asString();
   if (ParameterNotNull(parameterObject, "releasedate"))
     album.strReleaseDate = parameterObject["releasedate"].asString();
+  if (ParameterNotNull(parameterObject, "albumstatus"))
+    album.strReleaseStatus = parameterObject["albumstatus"].asString();
 
   // Update existing art. Any existing artwork that isn't specified in this request stays as is.
   // If the value is null then the existing art with that type is removed.
diff --git a/xbmc/interfaces/json-rpc/schema/types.json b/xbmc/interfaces/json-rpc/schema/types.json
index 5a3899b93f06..cd6dadb80255 100644
--- a/xbmc/interfaces/json-rpc/schema/types.json
+++ b/xbmc/interfaces/json-rpc/schema/types.json
@@ -519,7 +519,7 @@
                 "compilation", "releasetype", "dateadded",
                 "sortartist", "musicbrainzreleasegroupid", "songgenres", "art",
                 "lastplayed", "sourceid","isboxset", "totaldiscs",
-                "releasedate", "originaldate"]
+                "releasedate", "originaldate", "albumstatus"]
     }
   },
   "Audio.Fields.Song": {
@@ -647,7 +647,8 @@
       "lastplayed": { "type": "string" },
       "sourceid": { "$ref": "Array.Integer" }, 
       "isboxset" : { "type": "boolean" },
-      "totaldiscs": { "type": "integer" }
+      "totaldiscs": { "type": "integer" },
+      "albumstatus": { "type": "string" }
     }
   },
   "Audio.Details.Song": {
@@ -1513,7 +1514,8 @@
       "bpm": { "type": "integer" },
       "bitrate": { "type": "integer" },
       "samplerate": { "type": "integer" },
-      "channels": { "type": "integer"}
+      "channels": { "type": "integer"},
+      "albumstatus": { "type": "string" },
     }
   },
   "List.Fields.All": {
@@ -1536,7 +1538,7 @@
                 "contributors", "displaycomposer", "displayconductor", "displayorchestra", "displaylyricist",
                 "userrating", "votes", "sortartist", "musicbrainzreleasegroupid", "mediapath", "dynpath",
                 "isboxset", "totaldiscs", "disctitle", "releasedate", "originaldate", "bpm",
-                "bitrate", "samplerate", "channels"]
+                "bitrate", "samplerate", "channels", "albumstatus"]
     }
   },
   "List.Item.All": {
diff --git a/xbmc/interfaces/json-rpc/schema/version.txt b/xbmc/interfaces/json-rpc/schema/version.txt
index 62a6d0e03544..f926d239a02a 100644
--- a/xbmc/interfaces/json-rpc/schema/version.txt
+++ b/xbmc/interfaces/json-rpc/schema/version.txt
@@ -1 +1 @@
-JSONRPC_VERSION 11.9.0
+JSONRPC_VERSION 11.10.0
diff --git a/xbmc/music/MusicDatabase.cpp b/xbmc/music/MusicDatabase.cpp
index 3cecad224a1b..6b4f47058541 100644
--- a/xbmc/music/MusicDatabase.cpp
+++ b/xbmc/music/MusicDatabase.cpp
@@ -6286,6 +6286,7 @@ static const translateJSONField JSONtoDBAlbum[] = {
   { "originaldate",              "string", true,  "strOrigReleaseDate",     "" },
   { "releasedate",               "string", true,  "strReleaseDate",         "" },
   { "albumstatus",               "string", true,  "strReleaseStatus",       "" },
+
   // Scalar subquery fields
   { "year",                     "integer", true,  "iYear",                  "CAST(<datefield> AS INTEGER) AS iYear" }, //From strReleaseDate or strOrigReleaseDate
   { "sourceid",                  "string", true,  "sourceid",               "(SELECT GROUP_CONCAT(album_source.idSource SEPARATOR '; ') FROM album_source WHERE album_source.idAlbum = albumview.idAlbum) AS sources" },
