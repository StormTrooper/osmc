From 71ebcc4b4d048e586162df19690acbb16f4c87d9 Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Sat, 23 May 2020 10:46:39 +0200
Subject: [PATCH 1/2] [addons][filesystem] fix missing set to nullptr

There was on new functions a char* value used, where Kodi gives his string (strdup) to.
But if not available the the value was not set, as previous also no nullptr set, has
it tried to "free" it and makes a crash.
---
 .../kodi-addon-dev-kit/include/kodi/Filesystem.h       | 10 +++++-----
 xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h |  2 +-
 2 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/Filesystem.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/Filesystem.h
index 385c2d49ce64..11a8e7e7a02a 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/Filesystem.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/Filesystem.h
@@ -334,7 +334,7 @@ class HttpHeader
     if (!m_handle.handle)
       return std::vector<std::string>();
 
-    int numValues;
+    int numValues = 0;
     char** res(m_handle.get_values(CAddonBase::m_interface->toKodi->kodiBase, m_handle.handle,
                                    param.c_str(), &numValues));
     if (res)
@@ -1589,7 +1589,7 @@ inline bool GetMimeType(const std::string& url,
 {
   using namespace ::kodi::addon;
 
-  char* cMimeType;
+  char* cMimeType = nullptr;
   bool ret = CAddonBase::m_interface->toKodi->kodi_filesystem->get_mime_type(
       CAddonBase::m_interface->toKodi->kodiBase, url.c_str(), &cMimeType, useragent.c_str());
   if (cMimeType != nullptr)
@@ -1630,7 +1630,7 @@ inline bool GetContentType(const std::string& url,
 {
   using namespace ::kodi::addon;
 
-  char* cContent;
+  char* cContent = nullptr;
   bool ret = CAddonBase::m_interface->toKodi->kodi_filesystem->get_content_type(
       CAddonBase::m_interface->toKodi->kodiBase, url.c_str(), &cContent, useragent.c_str());
   if (cContent != nullptr)
@@ -1670,7 +1670,7 @@ inline bool GetCookies(const std::string& url, std::string& cookies)
 {
   using namespace ::kodi::addon;
 
-  char* cCookies;
+  char* cCookies = nullptr;
   bool ret = CAddonBase::m_interface->toKodi->kodi_filesystem->get_cookies(
       CAddonBase::m_interface->toKodi->kodiBase, url.c_str(), &cCookies);
   if (cCookies != nullptr)
@@ -2224,7 +2224,7 @@ class CFile
                 "kodi::vfs::CURLCreate(...) needed to call before GetPropertyValues!");
       return std::vector<std::string>();
     }
-    int numValues;
+    int numValues = 0;
     char** res(CAddonBase::m_interface->toKodi->kodi_filesystem->get_property_values(
         CAddonBase::m_interface->toKodi->kodiBase, m_file, type, name.c_str(), &numValues));
     if (res)
diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h
index ad3aac0b0e15..218b742418f5 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h
@@ -60,7 +60,7 @@
 #define ADDON_GLOBAL_VERSION_AUDIOENGINE_DEPENDS      "AudioEngine.h" \
                                                       "c-api/audio_engine.h"
 
-#define ADDON_GLOBAL_VERSION_FILESYSTEM               "1.1.1"
+#define ADDON_GLOBAL_VERSION_FILESYSTEM               "1.1.2"
 #define ADDON_GLOBAL_VERSION_FILESYSTEM_MIN           "1.1.0"
 #define ADDON_GLOBAL_VERSION_FILESYSTEM_XML_ID        "kodi.binary.global.filesystem"
 #define ADDON_GLOBAL_VERSION_FILESYSTEM_DEPENDS       "Filesystem.h" \

From cf83d5da6411a0a572b7cdcec8de6cc41a775228 Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Fri, 22 May 2020 19:50:04 +0200
Subject: [PATCH 2/2] [addons][network] add function to get Kodi's network user
 agent

The new function is "kodi::network::GetUserAgent()" where return e.g.
"Kodi/19.0-ALPHA1 (X11; Linux x86_64) Ubuntu/20.04 App_Bitness/64 Version/19.0-ALPHA1-Git:20200522-0076d136d3-dirty"
---
 xbmc/addons/interfaces/Network.cpp            | 19 ++++++++++
 xbmc/addons/interfaces/Network.h              |  1 +
 .../kodi-addon-dev-kit/include/kodi/Network.h | 35 +++++++++++++++++++
 .../include/kodi/c-api/network.h              |  1 +
 .../include/kodi/versions.h                   |  2 +-
 5 files changed, 57 insertions(+), 1 deletion(-)

diff --git a/xbmc/addons/interfaces/Network.cpp b/xbmc/addons/interfaces/Network.cpp
index 1ec7940593af..e77dca12c757 100644
--- a/xbmc/addons/interfaces/Network.cpp
+++ b/xbmc/addons/interfaces/Network.cpp
@@ -14,6 +14,7 @@
 #include "addons/kodi-addon-dev-kit/include/kodi/Network.h"
 #include "network/DNSNameCache.h"
 #include "network/Network.h"
+#include "utils/SystemInfo.h"
 #include "utils/URIUtils.h"
 #include "utils/log.h"
 
@@ -27,6 +28,7 @@ void Interface_Network::Init(AddonGlobalInterface *addonInterface)
   addonInterface->toKodi->kodi_network->wake_on_lan = wake_on_lan;
   addonInterface->toKodi->kodi_network->get_ip_address = get_ip_address;
   addonInterface->toKodi->kodi_network->get_hostname = get_hostname;
+  addonInterface->toKodi->kodi_network->get_user_agent = get_user_agent;
   addonInterface->toKodi->kodi_network->is_local_host = is_local_host;
   addonInterface->toKodi->kodi_network->is_host_on_lan = is_host_on_lan;
   addonInterface->toKodi->kodi_network->dns_lookup = dns_lookup;
@@ -98,6 +100,23 @@ char* Interface_Network::get_hostname(void* kodiBase)
   return buffer;
 }
 
+char* Interface_Network::get_user_agent(void* kodiBase)
+{
+  CAddonDll* addon = static_cast<CAddonDll*>(kodiBase);
+  if (addon == nullptr)
+  {
+    CLog::Log(LOGERROR, "Interface_Network::{} - invalid data (addon='{}')", __FUNCTION__,
+              kodiBase);
+    return nullptr;
+  }
+
+  std::string string = CSysInfo::GetUserAgent();
+  char* buffer = nullptr;
+  if (!string.empty())
+    buffer = strdup(string.c_str());
+  return buffer;
+}
+
 bool Interface_Network::is_local_host(void* kodiBase, const char* hostname)
 {
   CAddonDll* addon = static_cast<CAddonDll*>(kodiBase);
diff --git a/xbmc/addons/interfaces/Network.h b/xbmc/addons/interfaces/Network.h
index 2a0486142eab..ab5f6b53498e 100644
--- a/xbmc/addons/interfaces/Network.h
+++ b/xbmc/addons/interfaces/Network.h
@@ -42,6 +42,7 @@ struct Interface_Network
   static bool wake_on_lan(void* kodiBase, const char* mac);
   static char* get_ip_address(void* kodiBase);
   static char* get_hostname(void* kodiBase);
+  static char* get_user_agent(void* kodiBase);
   static bool is_local_host(void* kodiBase, const char* hostname);
   static bool is_host_on_lan(void* kodiBase, const char* hostname, bool offLineCheck);
   static char* dns_lookup(void* kodiBase, const char* url, bool* ret);
diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/Network.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/Network.h
index 00ef49171add..578c4290db13 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/Network.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/Network.h
@@ -113,6 +113,41 @@ inline std::string GetHostname()
 }
 //----------------------------------------------------------------------------
 
+//============================================================================
+/// @ingroup cpp_kodi_network
+/// @brief Returns Kodi's HTTP UserAgent string.
+///
+/// @return HTTP user agent
+///
+///
+/// ------------------------------------------------------------------------
+///
+/// **Example:**
+/// ~~~~~~~~~~~~~{.py}
+/// ..
+/// std::string agent = kodi::network::GetUserAgent()
+/// ..
+/// ~~~~~~~~~~~~~
+///
+/// example output:
+///   Kodi/19.0-ALPHA1 (X11; Linux x86_64) Ubuntu/20.04 App_Bitness/64 Version/19.0-ALPHA1-Git:20200522-0076d136d3-dirty
+///
+inline std::string GetUserAgent()
+{
+  using namespace ::kodi::addon;
+
+  std::string agent;
+  char* string = CAddonBase::m_interface->toKodi->kodi_network->get_user_agent(
+      CAddonBase::m_interface->toKodi->kodiBase);
+  if (string != nullptr)
+  {
+    agent = string;
+    CAddonBase::m_interface->toKodi->free_string(CAddonBase::m_interface->toKodi->kodiBase, string);
+  }
+  return agent;
+}
+//----------------------------------------------------------------------------
+
 //============================================================================
 /// @ingroup cpp_kodi_network
 /// @brief Check given name or ip address corresponds to localhost.
diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/c-api/network.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/c-api/network.h
index 97f1a3372d11..6c0441f3231e 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/c-api/network.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/c-api/network.h
@@ -35,6 +35,7 @@ extern "C"
     char* (*get_hostname)(void* kodiBase);
     bool (*is_local_host)(void* kodiBase, const char* hostname);
     bool (*is_host_on_lan)(void* kodiBase, const char* hostname, bool offLineCheck);
+    char* (*get_user_agent)(void* kodiBase);
   } AddonToKodiFuncTable_kodi_network;
 
 #ifdef __cplusplus
diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h
index 218b742418f5..0f2475554268 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h
@@ -67,7 +67,7 @@
                                                       "c-api/filesystem.h" \
                                                       "gui/gl/Shader.h"
 
-#define ADDON_GLOBAL_VERSION_NETWORK                  "1.0.2"
+#define ADDON_GLOBAL_VERSION_NETWORK                  "1.0.3"
 #define ADDON_GLOBAL_VERSION_NETWORK_MIN              "1.0.0"
 #define ADDON_GLOBAL_VERSION_NETWORK_XML_ID           "kodi.binary.global.network"
 #define ADDON_GLOBAL_VERSION_NETWORK_DEPENDS          "Network.h" \
