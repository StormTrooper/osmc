From 7faa2756e313942e5f2868c42207d777b6ca0540 Mon Sep 17 00:00:00 2001
From: Rechi <Rechi@users.noreply.github.com>
Date: Tue, 5 Feb 2019 15:11:03 +0100
Subject: [PATCH 1/2] [JsonSchemaBuilder] use std:: instead of using namespace
 std

---
 .../src/JsonSchemaBuilder.cpp                 | 70 +++++++++----------
 1 file changed, 34 insertions(+), 36 deletions(-)

diff --git a/tools/depends/native/JsonSchemaBuilder/src/JsonSchemaBuilder.cpp b/tools/depends/native/JsonSchemaBuilder/src/JsonSchemaBuilder.cpp
index 0e148a174492..066bd34961b6 100644
--- a/tools/depends/native/JsonSchemaBuilder/src/JsonSchemaBuilder.cpp
+++ b/tools/depends/native/JsonSchemaBuilder/src/JsonSchemaBuilder.cpp
@@ -24,26 +24,24 @@
 #include <string>
 #include <regex>
 
-using namespace std;
-
-void print_version(ifstream &in, ofstream &out)
+void print_version(std::ifstream &in, std::ofstream &out)
 {
-  string line;
+  std::string line;
   if (getline(in, line))
-    out << regex_replace(line, regex("(\\s+)?JSONRPC_VERSION\\s+|(\\s+)?#.*"), "");
+    out << std::regex_replace(line, std::regex("(\\s+)?JSONRPC_VERSION\\s+|(\\s+)?#.*"), "");
 }
 
-void print_license(ifstream &in, ofstream &out)
+void print_license(std::ifstream &in, std::ofstream &out)
 {
-  string line;
+  std::string line;
 
   while (getline(in, line, '\n'))
-    out << line << endl;
+    out << line << std::endl;
 }
 
-void print_json(ifstream &in, ofstream &out)
+void print_json(std::ifstream &in, std::ofstream &out)
 {
-  string line;
+  std::string line;
   unsigned int count = 0;
   bool closing = false;
 
@@ -52,18 +50,18 @@ void print_json(ifstream &in, ofstream &out)
     // No need to handle the last line
     if (line == "}")
     {
-      out << endl;
+      out << std::endl;
       continue;
     }
 
     // If we just closed a whole object we need to print the separator
     if (closing)
-      out << "," << endl;
+      out << "," << std::endl;
 
     out << "  ";
     bool started = false;
     closing = false;
-    for (string::iterator itr = line.begin(); itr != line.end(); itr++)
+    for (std::string::iterator itr = line.begin(); itr != line.end(); itr++)
     {
       // Skip \r characters
       if (*itr == '\r') {
@@ -114,13 +112,13 @@ void print_json(ifstream &in, ofstream &out)
 
     // Only print a newline if we haven't just closed a whole object
     if (!closing)
-      out << endl;
+      out << std::endl;
   }
 }
 
 void print_usage(const char *application)
 {
-  cout << application << " version.txt license.txt methods.json types.json notifications.json" << endl;
+  std::cout << application << " version.txt license.txt methods.json types.json notifications.json" << std::endl;
 }
 
 int main(int argc, char* argv[])
@@ -131,48 +129,48 @@ int main(int argc, char* argv[])
     return -1;
   }
 
-  ofstream out ("ServiceDescription.h", ofstream::binary);
+  std::ofstream out ("ServiceDescription.h", std::ofstream::binary);
 
-  ifstream version(argv[1], ios_base::in);
-  ifstream license(argv[2], ios_base::in);
-  ifstream methods(argv[3], ios_base::in);
-  ifstream types(argv[4], ios_base::in);
-  ifstream notifications(argv[5], ios_base::in);
+  std::ifstream version(argv[1], std::ios_base::in);
+  std::ifstream license(argv[2], std::ios_base::in);
+  std::ifstream methods(argv[3], std::ios_base::in);
+  std::ifstream types(argv[4], std::ios_base::in);
+  std::ifstream notifications(argv[5], std::ios_base::in);
 
   if (!(version && license && methods && types && notifications))
   {
-    cout << "Failed to find one or more of version.txt, license.txt, methods.json, types.json or notifications.json" << endl;
+    std::cout << "Failed to find one or more of version.txt, license.txt, methods.json, types.json or notifications.json" << std::endl;
     return -1;
   }
 
-  out << "#pragma once" << endl;
+  out << "#pragma once" << std::endl;
 
   print_license(license, out);
 
-  out << endl;
+  out << std::endl;
 
-  out << "namespace JSONRPC" << endl;
-  out << "{" << endl;
-  out << "  const char* const JSONRPC_SERVICE_ID          = \"http://xbmc.org/jsonrpc/ServiceDescription.json\";" << endl;
-  out << "  const char* const JSONRPC_SERVICE_VERSION     = \""; print_version(version, out); out << "\";" << endl;
-  out << "  const char* const JSONRPC_SERVICE_DESCRIPTION = \"JSON-RPC API of XBMC\";" << endl;
-  out << endl;
+  out << "namespace JSONRPC" << std::endl;
+  out << "{" << std::endl;
+  out << "  const char* const JSONRPC_SERVICE_ID          = \"http://xbmc.org/jsonrpc/ServiceDescription.json\";" << std::endl;
+  out << "  const char* const JSONRPC_SERVICE_VERSION     = \""; print_version(version, out); out << "\";" << std::endl;
+  out << "  const char* const JSONRPC_SERVICE_DESCRIPTION = \"JSON-RPC API of XBMC\";" << std::endl;
+  out << std::endl;
 
   out << "  const char* const JSONRPC_SERVICE_TYPES[] = {";
   print_json(types, out);
-  out << "  };" << endl;
-  out << endl;
+  out << "  };" << std::endl;
+  out << std::endl;
 
   out << "  const char* const JSONRPC_SERVICE_METHODS[] = {";
   print_json(methods, out);
-  out << "  };" << endl;
-  out << endl;
+  out << "  };" << std::endl;
+  out << std::endl;
 
   out << "  const char* const JSONRPC_SERVICE_NOTIFICATIONS[] = {";
   print_json(notifications, out);
-  out << "  };" << endl;
+  out << "  };" << std::endl;
 
-  out << "}" << endl;
+  out << "}" << std::endl;
 
   return 0;
 }

From e122abd78f995fb69e5deb26bdbb28f18b18c05d Mon Sep 17 00:00:00 2001
From: Rechi <Rechi@users.noreply.github.com>
Date: Tue, 5 Feb 2019 15:11:03 +0100
Subject: [PATCH 2/2] [TexturePacker] use std:: instead of using namespace std

---
 .../native/TexturePacker/src/TexturePacker.cpp     | 14 ++++++--------
 1 file changed, 6 insertions(+), 8 deletions(-)

diff --git a/tools/depends/native/TexturePacker/src/TexturePacker.cpp b/tools/depends/native/TexturePacker/src/TexturePacker.cpp
index 1efadd6eb28f..b2de24bf1b20 100644
--- a/tools/depends/native/TexturePacker/src/TexturePacker.cpp
+++ b/tools/depends/native/TexturePacker/src/TexturePacker.cpp
@@ -47,8 +47,6 @@
 #include <lzo/lzo1x.h>
 #include <sys/stat.h>
 
-using namespace std;
-
 #define FLAGS_USE_LZO     1
 
 #define DIR_SEPARATOR "/"
@@ -223,8 +221,8 @@ void Usage()
 }
 
 static bool checkDupe(struct MD5Context* ctx,
-                      map<string,unsigned int>& hashes,
-                      vector<unsigned int>& dupes, unsigned int pos)
+                      std::map<std::string, unsigned int>& hashes,
+                      std::vector<unsigned int>& dupes, unsigned int pos)
 {
   unsigned char digest[17];
   MD5Final(digest,ctx);
@@ -236,14 +234,14 @@ static bool checkDupe(struct MD5Context* ctx,
       digest[9], digest[10], digest[11], digest[12], digest[13], digest[14],
       digest[15]);
   hex[32] = 0;
-  map<string,unsigned int>::iterator it = hashes.find(hex);
+  std::map<std::string, unsigned int>::iterator it = hashes.find(hex);
   if (it != hashes.end())
   {
     dupes[pos] = it->second;
     return true;
   }
 
-  hashes.insert(make_pair(hex,pos));
+  hashes.insert(std::make_pair(hex,pos));
   dupes[pos] = pos;
 
   return false;
@@ -258,8 +256,8 @@ int createBundle(const std::string& InputDir, const std::string& OutputFile, dou
     return 1;
   }
 
-  map<string,unsigned int> hashes;
-  vector<unsigned int> dupes;
+  std::map<std::string, unsigned int> hashes;
+  std::vector<unsigned int> dupes;
   CreateSkeletonHeader(writer, InputDir);
 
   std::vector<CXBTFFile> files = writer.GetFiles();
