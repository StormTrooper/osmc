From 6b04779b80b58bd83bbcdb7468ca479d9bf29bd5 Mon Sep 17 00:00:00 2001
From: Luca Weiss <luca@z3ntu.xyz>
Date: Fri, 10 Jul 2020 20:03:50 +0200
Subject: [PATCH] Fix exception with empty string in field_value::get_asInt64

This issue manifested as the statement 'record->at(song_iStartOffset)
.get_asInt64()' in xbmc/music/MusicDatabase.cpp throwing an exception
leading to the message 'out of memory loading query' being printed in
the log.

Back story: The field iStartOffset in the table song in the music db is
declared as a nullable integer and the addon jellyfin-kodi is inserting
songs into the database but not setting the iStartOffset or iEndOffset
fields meaning they are null (they are represented as an empty string ""
in the field_value type in Kodi). There are also quite a few other
integer rows that are null, and the difference is that those are
converted with .get_asInt() as opposed to .get_asInt64() .

Looking into the former, we can see the function atoi() being used which
does not check for errors and returns 0 in case of failure to convert.

However std::stoll used in get_asInt64() throws an std::invalid_argument
exception in case of an invalid input string which leads to the
conversion not succeeding.

This patch adjusts the behavior of the get_asInt64() function to the
get_asInt() (and others converting a string to a number) function by
replacing the "safe" C++ variant with the "unsafe" C variant.

This fixes the ability to play back music which have an iStartOffset or
iEndOffset of null in the database.

See also https://github.com/jellyfin/jellyfin-kodi/pull/325#issuecomment-645610075
---
 xbmc/dbwrappers/qry_dat.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/xbmc/dbwrappers/qry_dat.cpp b/xbmc/dbwrappers/qry_dat.cpp
index bc68d2d79ef3..032002a9cb1d 100644
--- a/xbmc/dbwrappers/qry_dat.cpp
+++ b/xbmc/dbwrappers/qry_dat.cpp
@@ -533,7 +533,7 @@ double field_value::get_asDouble() const {
 int64_t field_value::get_asInt64() const {
     switch (field_type) {
     case ft_String: {
-      return std::stoll(str_value);
+      return std::atoll(str_value.c_str());
     }
     case ft_Boolean:{
       return (int64_t)bool_value;
