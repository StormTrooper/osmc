From 6ac3495f77dfb30c482198736ab730c1962f479b Mon Sep 17 00:00:00 2001
From: Philipp Kerling <pkerling@casix.org>
Date: Mon, 9 Jul 2018 11:10:51 +0200
Subject: [PATCH] [database] Reset path hashes when cleaning up files in video
 database

By performing a video database clean-up, effectively the state in the
video database is brought in sync with the state of the source in terms
of files that were removed from the source. This has to be reflected by
updating the hash of the path so the next library scan is not operating
on outdated information. However, since added items are not reflected,
it would be wrong to update the path hash to the actual directory
contents. Just resetting the hash for any path that had changes (i.e. saw
removed files) makes sure that the next library update does not miss both
newly added files and files that were removed before a clean-up but later
re-added.
---
 xbmc/video/VideoDatabase.cpp | 14 ++++++++++++++
 1 file changed, 14 insertions(+)

diff --git a/xbmc/video/VideoDatabase.cpp b/xbmc/video/VideoDatabase.cpp
index 70e6e12b099f..a37bd925bd84 100644
--- a/xbmc/video/VideoDatabase.cpp
+++ b/xbmc/video/VideoDatabase.cpp
@@ -8594,6 +8594,20 @@ void CVideoDatabase::CleanDatabase(CGUIDialogProgressBarHandle* handle, const st
     {
       filesToDelete = "(" + StringUtils::TrimRight(filesToDelete, ",") + ")";
 
+      // Clean hashes of all paths that files are deleted from
+      // Otherwise there is a mismatch between the path contents and the hash in the
+      // database, leading to potentially missed items on re-scan (if deleted files are
+      // later re-added to a source)
+      CLog::LogF(LOGDEBUG, LOGDATABASE, "Cleaning path hashes");
+      m_pDS->query("SELECT DISTINCT strPath FROM path JOIN files ON files.idPath=path.idPath WHERE files.idFile IN " + filesToDelete);
+      int pathHashCount = m_pDS->num_rows();
+      while (!m_pDS->eof())
+      {
+        InvalidatePathHash(m_pDS->fv("strPath").get_asString());
+        m_pDS->next();
+      }
+      CLog::LogF(LOGDEBUG, LOGDATABASE, "Cleaned {} path hashes", pathHashCount);
+
       CLog::Log(LOGDEBUG, LOGDATABASE, "%s: Cleaning files table", __FUNCTION__);
       sql = "DELETE FROM files WHERE idFile IN " + filesToDelete;
       m_pDS->exec(sql);
