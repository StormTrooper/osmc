From ca559ec82f24e8c524ee7b3422cae0daafb53f1c Mon Sep 17 00:00:00 2001
From: Kai Sommerfeld <kai.sommerfeld@gmx.com>
Date: Thu, 18 Apr 2019 11:20:46 +0200
Subject: [PATCH 01/10] [pvr][addons] Bump API version to 6.0.0

---
 xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h
index a37dbe014c1b..723f4b2787a9 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h
@@ -98,8 +98,8 @@
 #define ADDON_INSTANCE_VERSION_PERIPHERAL_DEPENDS     "addon-instance/Peripheral.h" \
                                                       "addon-instance/PeripheralUtils.h"
 
-#define ADDON_INSTANCE_VERSION_PVR                    "5.10.4"
-#define ADDON_INSTANCE_VERSION_PVR_MIN                "5.10.0"
+#define ADDON_INSTANCE_VERSION_PVR                    "6.0.0"
+#define ADDON_INSTANCE_VERSION_PVR_MIN                "6.0.0"
 #define ADDON_INSTANCE_VERSION_PVR_XML_ID             "kodi.binary.instance.pvr"
 #define ADDON_INSTANCE_VERSION_PVR_DEPENDS            "xbmc_pvr_dll.h" \
                                                       "xbmc_pvr_types.h" \

From d1cc1f4d45732296d68b807f2f7f2084cee31a4d Mon Sep 17 00:00:00 2001
From: Kai Sommerfeld <kai.sommerfeld@gmx.com>
Date: Wed, 17 Apr 2019 14:36:46 +0200
Subject: [PATCH 02/10] [pvr][addons] PVR Addon API 6.0.0: Add API function
 'FillBuffer'.

---
 xbmc/addons/PVRClient.cpp                     |  8 ++++++
 xbmc/addons/PVRClient.h                       |  8 ++++++
 .../include/kodi/xbmc_pvr_dll.h               |  8 ++++++
 .../include/kodi/xbmc_pvr_types.h             |  1 +
 xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemux.h |  5 ++++
 .../DVDDemuxers/DVDDemuxClient.cpp            |  8 ++++++
 .../VideoPlayer/DVDDemuxers/DVDDemuxClient.h  |  1 +
 .../DVDInputStreams/DVDInputStream.h          |  1 +
 .../DVDInputStreams/InputStreamPVRBase.cpp    |  6 +++++
 .../DVDInputStreams/InputStreamPVRBase.h      |  1 +
 xbmc/cores/VideoPlayer/VideoPlayer.cpp        | 25 +++++++++++++++----
 11 files changed, 67 insertions(+), 5 deletions(-)

diff --git a/xbmc/addons/PVRClient.cpp b/xbmc/addons/PVRClient.cpp
index 364a7f3c424b..e9c0b4b837d6 100644
--- a/xbmc/addons/PVRClient.cpp
+++ b/xbmc/addons/PVRClient.cpp
@@ -1306,6 +1306,14 @@ PVR_ERROR CPVRClient::SetSpeed(int speed)
   });
 }
 
+PVR_ERROR CPVRClient::FillBuffer(bool mode)
+{
+  return DoAddonCall(__FUNCTION__, [mode](const AddonInstance* addon) {
+    addon->FillBuffer(mode);
+    return PVR_ERROR_NO_ERROR;
+  });
+}
+
 PVR_ERROR CPVRClient::CanPauseStream(bool &bCanPause) const
 {
   bCanPause = false;
diff --git a/xbmc/addons/PVRClient.h b/xbmc/addons/PVRClient.h
index 604ad2b16650..0c76811e2ef3 100644
--- a/xbmc/addons/PVRClient.h
+++ b/xbmc/addons/PVRClient.h
@@ -706,6 +706,14 @@ namespace PVR
      */
     PVR_ERROR SetSpeed(int speed);
 
+    /*!
+     * @brief Notify the pvr addon/demuxer that Kodi wishes to fill demux queue
+     * @param mode for setting on/off
+     * @return PVR_ERROR_NO_ERROR on success, respective error code otherwise.
+     * @remarks Optional, and only used if addon has its own demuxer.
+     */
+    PVR_ERROR FillBuffer(bool mode);
+
     //@}
     /** @name PVR recording stream methods */
     //@{
diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_dll.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_dll.h
index 42a2abd779c4..8fc92b570cd1 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_dll.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_dll.h
@@ -640,6 +640,13 @@ extern "C"
    */
   void SetSpeed(int speed);
 
+  /*!
+   * Notify the pvr addon/demuxer that Kodi wishes to fill demux queue
+   * @param mode The requested filling mode
+   * @remarks Optional, and only used if addon has its own demuxer.
+   */
+  void FillBuffer(bool mode);
+
   /*!
    *  Get the hostname of the pvr backend server
    *  @return hostname as ip address or alias. If backend does not utilize a server, return empty string.
@@ -753,6 +760,7 @@ extern "C"
     pClient->toAddon.CanSeekStream                  = CanSeekStream;
     pClient->toAddon.SeekTime                       = SeekTime;
     pClient->toAddon.SetSpeed                       = SetSpeed;
+    pClient->toAddon.FillBuffer                     = FillBuffer;
 
     pClient->toAddon.OpenRecordedStream             = OpenRecordedStream;
     pClient->toAddon.CloseRecordedStream            = CloseRecordedStream;
diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h
index 4752023bacde..511811400bad 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h
@@ -691,6 +691,7 @@ extern "C" {
     bool (__cdecl* CanSeekStream)(void);
     bool (__cdecl* SeekTime)(double, bool, double*);
     void (__cdecl* SetSpeed)(int);
+    void (__cdecl* FillBuffer)(bool);
     const char* (__cdecl* GetBackendHostname)(void);
     bool (__cdecl* IsTimeshifting)(void);
     bool (__cdecl* IsRealTimeStream)(void);
diff --git a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemux.h b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemux.h
index a8a6dd9b247d..65803dc868e6 100644
--- a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemux.h
+++ b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemux.h
@@ -277,6 +277,11 @@ class CDVDDemux
    */
   virtual void SetSpeed(int iSpeed) { }
 
+  /*
+   * Let demuxer know if we want to fill demux queue
+   */
+  virtual void FillBuffer(bool mode) { }
+
   /*
    * returns the total time in msec
    */
diff --git a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxClient.cpp b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxClient.cpp
index 48e8275c221a..994c28c2785e 100644
--- a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxClient.cpp
+++ b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxClient.cpp
@@ -631,6 +631,14 @@ void CDVDDemuxClient::SetSpeed (int speed)
   }
 }
 
+void CDVDDemuxClient::FillBuffer(bool mode)
+{
+  if (m_IDemux)
+  {
+    m_IDemux->FillBuffer(mode);
+  }
+}
+
 void CDVDDemuxClient::EnableStream(int id, bool enable)
 {
   if (m_IDemux)
diff --git a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxClient.h b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxClient.h
index c96a936d348a..9f4ef7e37433 100644
--- a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxClient.h
+++ b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxClient.h
@@ -32,6 +32,7 @@ class CDVDDemuxClient : public CDVDDemux
   DemuxPacket* Read() override;
   bool SeekTime(double time, bool backwards = false, double* startpts = NULL) override;
   void SetSpeed(int iSpeed) override;
+  void FillBuffer(bool mode) override;
   CDemuxStream* GetStream(int iStreamId) const override;
   std::vector<CDemuxStream*> GetStreams() const override;
   int GetNrOfStreams() const override;
diff --git a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStream.h b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStream.h
index 8dc39442c959..bb48694025a8 100644
--- a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStream.h
+++ b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStream.h
@@ -128,6 +128,7 @@ class CDVDInputStream
     virtual bool OpenStream(int iStreamId) { return false; };
     virtual int GetNrOfStreams() const = 0;
     virtual void SetSpeed(int iSpeed) = 0;
+    virtual void FillBuffer(bool mode) {};
     virtual bool SeekTime(double time, bool backward = false, double* startpts = NULL) = 0;
     virtual void AbortDemux() = 0;
     virtual void FlushDemux() = 0;
diff --git a/xbmc/cores/VideoPlayer/DVDInputStreams/InputStreamPVRBase.cpp b/xbmc/cores/VideoPlayer/DVDInputStreams/InputStreamPVRBase.cpp
index ac2fa2fbc8dd..d706bc30d798 100644
--- a/xbmc/cores/VideoPlayer/DVDInputStreams/InputStreamPVRBase.cpp
+++ b/xbmc/cores/VideoPlayer/DVDInputStreams/InputStreamPVRBase.cpp
@@ -217,6 +217,12 @@ void CInputStreamPVRBase::SetSpeed(int Speed)
     m_client->SetSpeed(Speed);
 }
 
+void CInputStreamPVRBase::FillBuffer(bool mode)
+{
+  if (m_client)
+    m_client->FillBuffer(mode);
+}
+
 bool CInputStreamPVRBase::SeekTime(double timems, bool backwards, double *startpts)
 {
   if (m_client)
diff --git a/xbmc/cores/VideoPlayer/DVDInputStreams/InputStreamPVRBase.h b/xbmc/cores/VideoPlayer/DVDInputStreams/InputStreamPVRBase.h
index c339599ccdd4..66e676235449 100644
--- a/xbmc/cores/VideoPlayer/DVDInputStreams/InputStreamPVRBase.h
+++ b/xbmc/cores/VideoPlayer/DVDInputStreams/InputStreamPVRBase.h
@@ -58,6 +58,7 @@ class CInputStreamPVRBase
   std::vector<CDemuxStream*> GetStreams() const override;
   int GetNrOfStreams() const override;
   void SetSpeed(int iSpeed) override;
+  void FillBuffer(bool mode) override;
   bool SeekTime(double time, bool backward = false, double* startpts = NULL) override;
   void AbortDemux() override;
   void FlushDemux() override;
diff --git a/xbmc/cores/VideoPlayer/VideoPlayer.cpp b/xbmc/cores/VideoPlayer/VideoPlayer.cpp
index 4ea7b4581245..c62a26b8608a 100644
--- a/xbmc/cores/VideoPlayer/VideoPlayer.cpp
+++ b/xbmc/cores/VideoPlayer/VideoPlayer.cpp
@@ -1447,6 +1447,24 @@ void CVideoPlayer::Process()
     // make sure we run subtitle process here
     m_VideoPlayerSubtitle->Process(m_clock.GetClock() + m_State.time_offset - m_VideoPlayerVideo->GetSubtitleDelay(), m_State.time_offset);
 
+    // tell demuxer if we want to fill buffers
+    if (m_demuxerSpeed != DVD_PLAYSPEED_PAUSE)
+    {
+      int audioLevel = 90;
+      int videoLevel = 90;
+      bool fillBuffer = false;
+      if (m_CurrentAudio.id >= 0)
+        audioLevel = m_VideoPlayerAudio->GetLevel();
+      if (m_CurrentVideo.id >= 0)
+        videoLevel = m_processInfo->GetLevelVQ();
+      if (videoLevel < 85 && audioLevel < 85)
+      {
+        fillBuffer = true;
+      }
+      if (m_pDemuxer)
+        m_pDemuxer->FillBuffer(fillBuffer);
+    }
+
     // if the queues are full, no need to read more
     if ((!m_VideoPlayerAudio->AcceptsData() && m_CurrentAudio.id >= 0) ||
         (!m_VideoPlayerVideo->AcceptsData() && m_CurrentVideo.id >= 0))
@@ -1472,11 +1490,6 @@ void CVideoPlayer::Process()
       m_demuxerSpeed = m_playSpeed;
     }
 
-    // always yield to players if they have data levels > 50 percent
-    if((m_VideoPlayerAudio->GetLevel() > 50 || m_CurrentAudio.id < 0) &&
-       (m_processInfo->GetLevelVQ() > 50 || m_CurrentVideo.id < 0))
-      Sleep(0);
-
     DemuxPacket* pPacket = NULL;
     CDemuxStream *pStream = NULL;
     ReadPacket(pPacket, pStream);
@@ -3983,6 +3996,8 @@ void CVideoPlayer::FlushBuffers(double pts, bool accurate, bool sync)
     m_clock.Discontinuity(pts);
   UpdatePlayState(0);
 
+  m_demuxerSpeed = DVD_PLAYSPEED_NORMAL;
+
   if (m_omxplayer_mode)
   {
     m_OmxPlayerState.av_clock.OMXFlush();

From 43f3d5eefb6198325e6e35c6cb0598324bd5907f Mon Sep 17 00:00:00 2001
From: Kai Sommerfeld <kai.sommerfeld@gmx.com>
Date: Wed, 17 Apr 2019 14:52:35 +0200
Subject: [PATCH 03/10] [pvr][addons] PVR Addon API 6.0.0: Remove unused API
 function 'IsTimeshifting'.

---
 xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_dll.h | 7 -------
 .../kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h       | 1 -
 2 files changed, 8 deletions(-)

diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_dll.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_dll.h
index 8fc92b570cd1..3ebeedf07257 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_dll.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_dll.h
@@ -653,12 +653,6 @@ extern "C"
    */
   const char* GetBackendHostname();
 
-  /*!
-   *  Check if timeshift is active
-   *  @return true if timeshift is active
-   */
-  bool IsTimeshifting();
-
   /*!
    *  Check for real-time streaming
    *  @return true if current stream is real-time
@@ -775,7 +769,6 @@ extern "C"
 
     pClient->toAddon.GetBackendHostname             = GetBackendHostname;
 
-    pClient->toAddon.IsTimeshifting                 = IsTimeshifting;
     pClient->toAddon.IsRealTimeStream               = IsRealTimeStream;
 
     pClient->toAddon.SetEPGTimeFrame                = SetEPGTimeFrame;
diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h
index 511811400bad..465010d2ed32 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h
@@ -693,7 +693,6 @@ extern "C" {
     void (__cdecl* SetSpeed)(int);
     void (__cdecl* FillBuffer)(bool);
     const char* (__cdecl* GetBackendHostname)(void);
-    bool (__cdecl* IsTimeshifting)(void);
     bool (__cdecl* IsRealTimeStream)(void);
     PVR_ERROR (__cdecl* SetEPGTimeFrame)(int);
     void (__cdecl* OnSystemSleep)(void);

From 44003e5e35f764cf0588d8316ac44525a47f10c7 Mon Sep 17 00:00:00 2001
From: Kai Sommerfeld <kai.sommerfeld@gmx.com>
Date: Wed, 17 Apr 2019 15:14:00 +0200
Subject: [PATCH 04/10] [pvr][addons] PVR Addon API 6.0.0: Change signature for
 API function 'GetEPGForChannel'.

---
 xbmc/addons/PVRClient.cpp                      | 18 +++---------------
 xbmc/addons/PVRClient.h                        |  4 ++--
 .../include/kodi/xbmc_pvr_dll.h                |  4 ++--
 .../include/kodi/xbmc_pvr_types.h              |  2 +-
 xbmc/pvr/epg/Epg.cpp                           |  2 +-
 5 files changed, 9 insertions(+), 21 deletions(-)

diff --git a/xbmc/addons/PVRClient.cpp b/xbmc/addons/PVRClient.cpp
index e9c0b4b837d6..035f8ea85fef 100644
--- a/xbmc/addons/PVRClient.cpp
+++ b/xbmc/addons/PVRClient.cpp
@@ -591,25 +591,13 @@ PVR_ERROR CPVRClient::RenameChannel(const CPVRChannelPtr &channel)
   }, m_clientCapabilities.SupportsChannelSettings());
 }
 
-PVR_ERROR CPVRClient::GetEPGForChannel(const std::shared_ptr<CPVREpgChannelData>& channelData,
+PVR_ERROR CPVRClient::GetEPGForChannel(int iChannelUid,
                                        CPVREpg* epg,
                                        time_t start /* = 0 */,
                                        time_t end /* = 0 */,
                                        bool bSaveInDb /* = false */)
 {
-  return DoAddonCall(__FUNCTION__, [this, channelData, epg, start, end, bSaveInDb](const AddonInstance* addon) {
-
-    //! @todo PVR Addon API Change: Change GetEPGForChannel param from 'PVR_CHANNEL channel' to 'int iUniqueId'.
-    PVR_CHANNEL addonChannel = {0};
-
-    // mandatory
-    addonChannel.iUniqueId = channelData->UniqueClientChannelId();
-    addonChannel.bIsRadio = channelData->IsRadio();
-
-    // optional
-    strncpy(addonChannel.strChannelName, channelData->ChannelName().c_str(), sizeof(addonChannel.strChannelName) - 1);
-    strncpy(addonChannel.strIconPath, channelData->IconPath().c_str(), sizeof(addonChannel.strIconPath) - 1);
-    addonChannel.bIsHidden = channelData->IsHidden();
+  return DoAddonCall(__FUNCTION__, [this, iChannelUid, epg, start, end, bSaveInDb](const AddonInstance* addon) {
 
     ADDON_HANDLE_STRUCT handle;
     handle.callerAddress  = this;
@@ -619,7 +607,7 @@ PVR_ERROR CPVRClient::GetEPGForChannel(const std::shared_ptr<CPVREpgChannelData>
     int iPVRTimeCorrection = CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->m_iPVRTimeCorrection;
 
     return addon->GetEPGForChannel(&handle,
-                                   addonChannel,
+                                   iChannelUid,
                                    start ? start - iPVRTimeCorrection : 0,
                                    end ? end - iPVRTimeCorrection : 0);
   }, m_clientCapabilities.SupportsEPG());
diff --git a/xbmc/addons/PVRClient.h b/xbmc/addons/PVRClient.h
index 0c76811e2ef3..8bf7b0183985 100644
--- a/xbmc/addons/PVRClient.h
+++ b/xbmc/addons/PVRClient.h
@@ -401,14 +401,14 @@ namespace PVR
 
     /*!
      * @brief Request an EPG table for a channel from the client.
-     * @param channelData The data for the channel to get the EPG table for.
+     * @param iChannelUid The UID of the channel to get the EPG table for.
      * @param epg The table to write the data to.
      * @param start The start time to use.
      * @param end The end time to use.
      * @param bSaveInDb If true, tell the callback method to save any new entry in the database or not. see CAddonCallbacksPVR::PVRTransferEpgEntry()
      * @return PVR_ERROR_NO_ERROR if the table has been fetched successfully.
      */
-    PVR_ERROR GetEPGForChannel(const std::shared_ptr<CPVREpgChannelData>& channelData, CPVREpg* epg, time_t start = 0, time_t end = 0, bool bSaveInDb = false);
+    PVR_ERROR GetEPGForChannel(int iChannelUid, CPVREpg* epg, time_t start = 0, time_t end = 0, bool bSaveInDb = false);
 
     /*!
      * Tell the client the time frame to use when notifying epg events back to Kodi. The client might push epg events asynchronously
diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_dll.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_dll.h
index 3ebeedf07257..26e9099a7157 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_dll.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_dll.h
@@ -78,14 +78,14 @@ extern "C"
    * Request the EPG for a channel from the backend.
    * EPG entries are added to Kodi by calling TransferEpgEntry() on the callback.
    * @param handle Handle to pass to the callback method.
-   * @param channel The channel to get the EPG table for.
+   * @param iChannelUid The UID of the channel to get the EPG table for.
    * @param iStart Get events after this time (UTC).
    * @param iEnd Get events before this time (UTC).
    * @return PVR_ERROR_NO_ERROR if the table has been fetched successfully.
    * @remarks Required if bSupportsEPG is set to true.
    *          Return PVR_ERROR_NOT_IMPLEMENTED if this add-on won't provide this function.
    */
-  PVR_ERROR GetEPGForChannel(ADDON_HANDLE handle, const PVR_CHANNEL& channel, time_t iStart, time_t iEnd);
+  PVR_ERROR GetEPGForChannel(ADDON_HANDLE handle, int iChannelUid, time_t iStart, time_t iEnd);
 
   /*
    * Check if the given EPG tag can be recorded.
diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h
index 465010d2ed32..ef90c91dc581 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h
@@ -635,7 +635,7 @@ extern "C" {
     const char* (__cdecl* GetConnectionString)(void);
     PVR_ERROR (__cdecl* GetDriveSpace)(long long*, long long*);
     PVR_ERROR (__cdecl* MenuHook)(const PVR_MENUHOOK&, const PVR_MENUHOOK_DATA&);
-    PVR_ERROR (__cdecl* GetEPGForChannel)(ADDON_HANDLE, const PVR_CHANNEL&, time_t, time_t);
+    PVR_ERROR (__cdecl* GetEPGForChannel)(ADDON_HANDLE, int, time_t, time_t);
     PVR_ERROR (__cdecl* IsEPGTagRecordable)(const EPG_TAG*, bool*);
     PVR_ERROR (__cdecl* IsEPGTagPlayable)(const EPG_TAG*, bool*);
     PVR_ERROR (__cdecl* GetEPGTagEdl)(const EPG_TAG*, PVR_EDL_ENTRY[], int*);
diff --git a/xbmc/pvr/epg/Epg.cpp b/xbmc/pvr/epg/Epg.cpp
index 42ec788c2027..e2a747c37f8f 100644
--- a/xbmc/pvr/epg/Epg.cpp
+++ b/xbmc/pvr/epg/Epg.cpp
@@ -627,7 +627,7 @@ bool CPVREpg::UpdateFromScraper(time_t start, time_t end, bool bForceUpdate)
       {
         CLog::LogFC(LOGDEBUG, LOGEPG, "Updating EPG for channel '%s' from client '%i'",
                     m_channelData->ChannelName().c_str(), m_channelData->ClientId());
-        return (client->GetEPGForChannel(m_channelData, this, start, end) == PVR_ERROR_NO_ERROR);
+        return (client->GetEPGForChannel(m_channelData->UniqueClientChannelId(), this, start, end) == PVR_ERROR_NO_ERROR);
       }
     }
     else

From 417fe333937d0181a64297cd2ff96781b2c74579 Mon Sep 17 00:00:00 2001
From: Kai Sommerfeld <kai.sommerfeld@gmx.com>
Date: Thu, 18 Apr 2019 11:24:43 +0200
Subject: [PATCH 05/10] [pvr][addons] PVR Addon API 6.0.0: Cosmetics.

---
 xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h | 4 +---
 1 file changed, 1 insertion(+), 3 deletions(-)

diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h
index ef90c91dc581..95ca5fff542b 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h
@@ -311,12 +311,10 @@ extern "C" {
     bool bSupportsRecordingsRename;     /*!< @brief true if the backend supports renaming recordings. */
     bool bSupportsRecordingsLifetimeChange; /*!< @brief true if the backend supports changing lifetime for recordings. */
     bool bSupportsDescrambleInfo;       /*!< @brief true if the backend supports descramble information for playing channels. */
+    bool bSupportsAsyncEPGTransfer;     /*!< @brief true if this addon-on supports asynchronous transfer of epg events to Kodi using the callback function EpgEventStateChange. */
 
     unsigned int iRecordingsLifetimesSize; /*!< @brief (required) Count of possible values for PVR_RECORDING.iLifetime. 0 means lifetime is not supported for recordings or no own value definition wanted, but to use Kodi defaults of 1..365. */
     PVR_ATTRIBUTE_INT_VALUE recordingsLifetimeValues[PVR_ADDON_ATTRIBUTE_VALUES_ARRAY_SIZE]; /*!< @brief (optional) Array containing the possible values for PVR_RECORDING.iLifetime. Must be filled if iLifetimesSize > 0 */
-
-    // TODO: cleanup: move this member up after the other bools with the next incompatible pvr addon api change.
-    bool bSupportsAsyncEPGTransfer;     /*!< @brief true if this addon-on supports asynchronous transfer of epg events to Kodi using the callback function EpgEventStateChange. */
   } ATTRIBUTE_PACKED PVR_ADDON_CAPABILITIES;
 
   /*!

From ea769d29812e01bddddb388f115bbdde46574424 Mon Sep 17 00:00:00 2001
From: Kai Sommerfeld <kai.sommerfeld@gmx.com>
Date: Thu, 18 Apr 2019 12:26:22 +0200
Subject: [PATCH 06/10] [pvr][addons] PVR Addon API 6.0.0: EPG_TAG: Removed
 unused member 'bNotify'.

---
 xbmc/addons/PVRClient.cpp                           |  1 -
 .../include/kodi/xbmc_epg_types.h                   |  1 -
 xbmc/pvr/epg/EpgDatabase.cpp                        |  7 +++----
 xbmc/pvr/epg/EpgInfoTag.cpp                         | 13 ++-----------
 xbmc/pvr/epg/EpgInfoTag.h                           |  7 -------
 5 files changed, 5 insertions(+), 24 deletions(-)

diff --git a/xbmc/addons/PVRClient.cpp b/xbmc/addons/PVRClient.cpp
index 035f8ea85fef..1ec29dfe592c 100644
--- a/xbmc/addons/PVRClient.cpp
+++ b/xbmc/addons/PVRClient.cpp
@@ -662,7 +662,6 @@ class CAddonEpgTag : public EPG_TAG
     iFlags = kodiTag->Flags();
     iGenreType = kodiTag->GenreType();
     iGenreSubType = kodiTag->GenreSubType();
-    bNotify = kodiTag->Notify();
     strTitle = m_strTitle.c_str();
     strPlotOutline = m_strPlotOutline.c_str();
     strPlot = m_strPlot.c_str();
diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_epg_types.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_epg_types.h
index 7b11ed834779..30503d56909b 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_epg_types.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_epg_types.h
@@ -100,7 +100,6 @@ extern "C" {
     time_t        firstAired;          /*!< @brief (optional) first aired in UTC */
     int           iParentalRating;     /*!< @brief (optional) parental rating */
     int           iStarRating;         /*!< @brief (optional) star rating */
-    bool          bNotify;             /*!< @brief (optional) notify the user when this event starts */
     int           iSeriesNumber;       /*!< @brief (optional) series number */
     int           iEpisodeNumber;      /*!< @brief (optional) episode number */
     int           iEpisodePartNumber;  /*!< @brief (optional) episode part number */
diff --git a/xbmc/pvr/epg/EpgDatabase.cpp b/xbmc/pvr/epg/EpgDatabase.cpp
index 8d08d45ee477..83e8fcf482ca 100644
--- a/xbmc/pvr/epg/EpgDatabase.cpp
+++ b/xbmc/pvr/epg/EpgDatabase.cpp
@@ -87,7 +87,7 @@ void CPVREpgDatabase::CreateTables(void)
         "iFirstAired     integer, "
         "iParentalRating integer, "
         "iStarRating     integer, "
-        "bNotify         bool, "
+        "bNotify         bool, " // Unused. Could be removed, but beware: sqlite does not support 'ALTER TABLE x DROP COLUMN y'.
         "iSeriesId       integer, "
         "iEpisodeId      integer, "
         "iEpisodePart    integer, "
@@ -275,7 +275,6 @@ std::vector<std::shared_ptr<CPVREpgInfoTag>> CPVREpgDatabase::Get(const CPVREpg
         newTag->m_genre              = newTag->Tokenize(m_pDS->fv("sGenre").get_asString());
         newTag->m_iParentalRating    = m_pDS->fv("iParentalRating").get_asInt();
         newTag->m_iStarRating        = m_pDS->fv("iStarRating").get_asInt();
-        newTag->m_bNotify            = m_pDS->fv("bNotify").get_asBool();
         newTag->m_iEpisodeNumber     = m_pDS->fv("iEpisodeId").get_asInt();
         newTag->m_iEpisodePart       = m_pDS->fv("iEpisodePart").get_asInt();
         newTag->m_strEpisodeName     = m_pDS->fv("sEpisodeName").get_asString().c_str();
@@ -390,7 +389,7 @@ int CPVREpgDatabase::Persist(const CPVREpgInfoTag &tag, bool bSingleUpdate /* =
         tag.OriginalTitle().c_str(), tag.DeTokenize(tag.Cast()).c_str(), tag.DeTokenize(tag.Directors()).c_str(),
         tag.DeTokenize(tag.Writers()).c_str(), tag.Year(), tag.IMDBNumber().c_str(),
         tag.Icon().c_str(), tag.GenreType(), tag.GenreSubType(), strGenre.c_str(),
-        static_cast<unsigned int>(iFirstAired), tag.ParentalRating(), tag.StarRating(), tag.Notify(),
+        static_cast<unsigned int>(iFirstAired), tag.ParentalRating(), tag.StarRating(), false /* unused */,
         tag.SeriesNumber(), tag.EpisodeNumber(), tag.EpisodePart(), tag.EpisodeName().c_str(), tag.Flags(), tag.SeriesLink().c_str(),
         tag.UniqueBroadcastID());
   }
@@ -406,7 +405,7 @@ int CPVREpgDatabase::Persist(const CPVREpgInfoTag &tag, bool bSingleUpdate /* =
         tag.OriginalTitle().c_str(), tag.DeTokenize(tag.Cast()).c_str(), tag.DeTokenize(tag.Directors()).c_str(),
         tag.DeTokenize(tag.Writers()).c_str(), tag.Year(), tag.IMDBNumber().c_str(),
         tag.Icon().c_str(), tag.GenreType(), tag.GenreSubType(), strGenre.c_str(),
-        static_cast<unsigned int>(iFirstAired), tag.ParentalRating(), tag.StarRating(), tag.Notify(),
+        static_cast<unsigned int>(iFirstAired), tag.ParentalRating(), tag.StarRating(), false /* unused */,
         tag.SeriesNumber(), tag.EpisodeNumber(), tag.EpisodePart(), tag.EpisodeName().c_str(), tag.Flags(), tag.SeriesLink().c_str(),
         tag.UniqueBroadcastID(), iBroadcastId);
   }
diff --git a/xbmc/pvr/epg/EpgInfoTag.cpp b/xbmc/pvr/epg/EpgInfoTag.cpp
index 8c37ffe3b710..fee757055e97 100644
--- a/xbmc/pvr/epg/EpgInfoTag.cpp
+++ b/xbmc/pvr/epg/EpgInfoTag.cpp
@@ -41,8 +41,7 @@ CPVREpgInfoTag::CPVREpgInfoTag(const std::shared_ptr<CPVREpgChannelData>& channe
 }
 
 CPVREpgInfoTag::CPVREpgInfoTag(const EPG_TAG& data, int iClientId, const std::shared_ptr<CPVREpgChannelData>& channelData, int iEpgID)
-: m_bNotify(data.bNotify),
-  m_iParentalRating(data.iParentalRating),
+: m_iParentalRating(data.iParentalRating),
   m_iStarRating(data.iStarRating),
   m_iSeriesNumber(data.iSeriesNumber),
   m_iEpisodeNumber(data.iEpisodeNumber),
@@ -116,8 +115,7 @@ bool CPVREpgInfoTag::operator ==(const CPVREpgInfoTag& right) const
     return true;
 
   CSingleLock lock(m_critSection);
-  return (m_bNotify            == right.m_bNotify &&
-          m_iDatabaseID        == right.m_iDatabaseID &&
+  return (m_iDatabaseID        == right.m_iDatabaseID &&
           m_iGenreType         == right.m_iGenreType &&
           m_iGenreSubType      == right.m_iGenreSubType &&
           m_iParentalRating    == right.m_iParentalRating &&
@@ -468,11 +466,6 @@ int CPVREpgInfoTag::StarRating(void) const
   return m_iStarRating;
 }
 
-bool CPVREpgInfoTag::Notify(void) const
-{
-  return m_bNotify;
-}
-
 int CPVREpgInfoTag::SeriesNumber(void) const
 {
   return m_iSeriesNumber;
@@ -528,7 +521,6 @@ bool CPVREpgInfoTag::Update(const CPVREpgInfoTag &tag, bool bUpdateBroadcastId /
       m_firstAired         != tag.m_firstAired ||
       m_iParentalRating    != tag.m_iParentalRating ||
       m_iStarRating        != tag.m_iStarRating ||
-      m_bNotify            != tag.m_bNotify ||
       m_iEpisodeNumber     != tag.m_iEpisodeNumber ||
       m_iEpisodePart       != tag.m_iEpisodePart ||
       m_iSeriesNumber      != tag.m_iSeriesNumber ||
@@ -580,7 +572,6 @@ bool CPVREpgInfoTag::Update(const CPVREpgInfoTag &tag, bool bUpdateBroadcastId /
     m_firstAired         = tag.m_firstAired;
     m_iParentalRating    = tag.m_iParentalRating;
     m_iStarRating        = tag.m_iStarRating;
-    m_bNotify            = tag.m_bNotify;
     m_iEpisodeNumber     = tag.m_iEpisodeNumber;
     m_iEpisodePart       = tag.m_iEpisodePart;
     m_iSeriesNumber      = tag.m_iSeriesNumber;
diff --git a/xbmc/pvr/epg/EpgInfoTag.h b/xbmc/pvr/epg/EpgInfoTag.h
index a61c45930bf9..1486c2e5f36e 100644
--- a/xbmc/pvr/epg/EpgInfoTag.h
+++ b/xbmc/pvr/epg/EpgInfoTag.h
@@ -291,12 +291,6 @@ namespace PVR
      */
     int StarRating(void) const;
 
-    /*!
-     * @brief Notify on start if true.
-     * @return Notify on start.
-     */
-    bool Notify(void) const;
-
     /*!
      * @brief The series number of this event.
      * @return The series number.
@@ -435,7 +429,6 @@ namespace PVR
      */
     CDateTime GetCurrentPlayingTime(void) const;
 
-    bool                     m_bNotify = false;     /*!< notify on start */
     int                      m_iDatabaseID = -1;    /*!< database ID */
     int                      m_iGenreType = 0;      /*!< genre type */
     int                      m_iGenreSubType = 0;   /*!< genre subtype */

From 957ecc3233b7a770ce5a24da3d04de6d160b9b8b Mon Sep 17 00:00:00 2001
From: Kai Sommerfeld <kai.sommerfeld@gmx.com>
Date: Thu, 18 Apr 2019 13:49:46 +0200
Subject: [PATCH 07/10] [pvr][addons] PVR Addon API 6.0.0: Increase size of
 PVR_ADDON_TIMERTYPE_STRING_LENGTH and PVR_ADDON_ATTRIBUTE_DESC_LENGTH. We
 encountered situations where they were to small for localized strings for
 multibyte languages.

---
 xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h
index 95ca5fff542b..787b7addad2b 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h
@@ -55,8 +55,8 @@ struct DemuxPacket;
 #define PVR_ADDON_TIMERTYPE_ARRAY_SIZE        32
 #define PVR_ADDON_TIMERTYPE_VALUES_ARRAY_SIZE 512
 #define PVR_ADDON_TIMERTYPE_VALUES_ARRAY_SIZE_SMALL 128
-#define PVR_ADDON_TIMERTYPE_STRING_LENGTH     64
-#define PVR_ADDON_ATTRIBUTE_DESC_LENGTH 64
+#define PVR_ADDON_TIMERTYPE_STRING_LENGTH     128
+#define PVR_ADDON_ATTRIBUTE_DESC_LENGTH       128
 #define PVR_ADDON_ATTRIBUTE_VALUES_ARRAY_SIZE 512
 #define PVR_ADDON_DESCRAMBLE_INFO_STRING_LENGTH 64
 

From ab9e9e1943d6ae151216a48cabaee4158b649a72 Mon Sep 17 00:00:00 2001
From: Arthur Liberman <arthur_liberman@hotmail.com>
Date: Mon, 29 Oct 2018 01:31:31 +0200
Subject: [PATCH 08/10] [pvr][guilib][json] PVR Addon API 6.0.0: Add
 PVR_CHANNEL::bHasArchive, Add GUI info bools ListItem.HasArchive and
 ListItem.IsPlayable.

---
 xbmc/GUIInfoManager.cpp                       | 18 ++++++++++++++++
 .../include/kodi/xbmc_pvr_types.h             |  1 +
 xbmc/guilib/guiinfo/GUIInfoLabels.h           |  2 ++
 xbmc/interfaces/json-rpc/schema/types.json    | 10 +++++----
 xbmc/interfaces/json-rpc/schema/version.txt   |  2 +-
 xbmc/pvr/PVRDatabase.cpp                      | 21 ++++++++++++-------
 xbmc/pvr/PVRDatabase.h                        |  2 +-
 xbmc/pvr/PVRGUIInfo.cpp                       | 14 +++++++++++++
 xbmc/pvr/channels/PVRChannel.cpp              | 13 +++++++++++-
 xbmc/pvr/channels/PVRChannel.h                |  6 ++++++
 10 files changed, 74 insertions(+), 15 deletions(-)

diff --git a/xbmc/GUIInfoManager.cpp b/xbmc/GUIInfoManager.cpp
index f44a5f55158c..bc533ac54bd7 100644
--- a/xbmc/GUIInfoManager.cpp
+++ b/xbmc/GUIInfoManager.cpp
@@ -3685,6 +3685,22 @@ const infomap container_str[]  = {{ "property",         CONTAINER_PROPERTY },
 ///     @return **True** when the selected programme is being recorded (PVR).
 ///     <p>
 ///   }
+///   \table_row3{   <b>`ListItem.IsPlayable`</b>,
+///                  \anchor ListItem_IsPlayable
+///                  _boolean_,
+///     @return **True** when the selected programme can be played (PVR)
+///     <p><hr>
+///     @skinning_v19 **[New Boolean Condition]** \link ListItem_IsPlayable `ListItem.IsPlayable`\endlink
+///     <p>
+///   }
+///   \table_row3{   <b>`ListItem.HasArchive`</b>,
+///                  \anchor ListItem_HasArchive
+///                  _boolean_,
+///     @return **True** when the selected channel has a server-side back buffer (PVR)
+///     <p><hr>
+///     @skinning_v19 **[New Boolean Condition]** \link ListItem_HasArchive `ListItem.HasArchive`\endlink
+///     <p>
+///   }
 ///   \table_row3{   <b>`ListItem.IsEncrypted`</b>,
 ///                  \anchor ListItem_IsEncrypted
 ///                  _boolean_,
@@ -5814,6 +5830,8 @@ const infomap listitem_labels[]= {{ "thumb",            LISTITEM_THUMB },
                                   { "hasreminderrule",  LISTITEM_HASREMINDERRULE },
                                   { "hasrecording",     LISTITEM_HASRECORDING },
                                   { "isrecording",      LISTITEM_ISRECORDING },
+                                  { "isplayable",       LISTITEM_ISPLAYABLE },
+                                  { "hasarchive",       LISTITEM_HASARCHIVE },
                                   { "inprogress",       LISTITEM_INPROGRESS },
                                   { "isencrypted",      LISTITEM_ISENCRYPTED },
                                   { "progress",         LISTITEM_PROGRESS },
diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h
index 787b7addad2b..999d3b391bd3 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h
@@ -401,6 +401,7 @@ extern "C" {
     unsigned int iEncryptionSystem;                                    /*!< @brief (optional) the encryption ID or CaID of this channel */
     char         strIconPath[PVR_ADDON_URL_STRING_LENGTH];             /*!< @brief (optional) path to the channel icon (if present) */
     bool         bIsHidden;                                            /*!< @brief (optional) true if this channel is marked as hidden */
+    bool         bHasArchive;                                          /*!< @brief (optional) true if this channel has a server-side back buffer */
   } ATTRIBUTE_PACKED PVR_CHANNEL;
 
   typedef struct PVR_CHANNEL_GROUP
diff --git a/xbmc/guilib/guiinfo/GUIInfoLabels.h b/xbmc/guilib/guiinfo/GUIInfoLabels.h
index b6df15b3cc4f..d5c906b89c44 100644
--- a/xbmc/guilib/guiinfo/GUIInfoLabels.h
+++ b/xbmc/guilib/guiinfo/GUIInfoLabels.h
@@ -870,6 +870,8 @@
 #define LISTITEM_PROPERTY           (LISTITEM_START + 182)
 #define LISTITEM_EPG_EVENT_ICON     (LISTITEM_START + 183)
 #define LISTITEM_HASREMINDERRULE    (LISTITEM_START + 184)
+#define LISTITEM_HASARCHIVE         (LISTITEM_START + 185)
+#define LISTITEM_ISPLAYABLE         (LISTITEM_START + 186)
 
 #define LISTITEM_END                (LISTITEM_START + 2500)
 
diff --git a/xbmc/interfaces/json-rpc/schema/types.json b/xbmc/interfaces/json-rpc/schema/types.json
index 6bed04030126..17282f61c859 100644
--- a/xbmc/interfaces/json-rpc/schema/types.json
+++ b/xbmc/interfaces/json-rpc/schema/types.json
@@ -977,7 +977,7 @@
                 "firstaired", "hastimer", "isactive", "parentalrating",
                 "wasactive", "thumbnail", "rating", "originaltitle", "cast",
                 "director", "writer", "year", "imdbnumber", "hastimerrule",
-                "hasrecording", "recording", "isseries" ]
+                "hasrecording", "recording", "isseries", "isplayable" ]
     }
   },
   "PVR.Details.Broadcast": {
@@ -1012,7 +1012,8 @@
       "hastimerrule": { "type": "boolean" },
       "hasrecording": { "type": "boolean" },
       "recording": { "type": "string" },
-      "isseries": { "type": "boolean" }
+      "isseries": { "type": "boolean" },
+      "isplayable": { "type": "boolean" }
     }
   },
   "PVR.Fields.Channel": {
@@ -1020,7 +1021,7 @@
     "items": { "type": "string",
       "enum": [ "thumbnail", "channeltype", "hidden", "locked", "channel", "lastplayed",
                 "broadcastnow", "broadcastnext", "uniqueid", "icon", "channelnumber",
-                "subchannelnumber", "isrecording" ]
+                "subchannelnumber", "isrecording", "hasarchive" ]
     }
   },
   "PVR.Details.Channel": {
@@ -1039,7 +1040,8 @@
       "icon": { "type": "string" },
       "channelnumber": { "type": "integer" },
       "subchannelnumber": { "type": "integer" },
-      "isrecording": { "type": "boolean" }
+      "isrecording": { "type": "boolean" },
+      "hasarchive": { "type": "boolean" }
     }
   },
   "PVR.Details.ChannelGroup": {
diff --git a/xbmc/interfaces/json-rpc/schema/version.txt b/xbmc/interfaces/json-rpc/schema/version.txt
index 4f3c1d9eecef..a028c7d04305 100644
--- a/xbmc/interfaces/json-rpc/schema/version.txt
+++ b/xbmc/interfaces/json-rpc/schema/version.txt
@@ -1 +1 @@
-JSONRPC_VERSION 10.4.0
+JSONRPC_VERSION 10.5.0
diff --git a/xbmc/pvr/PVRDatabase.cpp b/xbmc/pvr/PVRDatabase.cpp
index ee11feda1b10..cb3b3f22e68f 100644
--- a/xbmc/pvr/PVRDatabase.cpp
+++ b/xbmc/pvr/PVRDatabase.cpp
@@ -93,7 +93,8 @@ void CPVRDatabase::CreateTables()
         "sEPGScraper          varchar(32), "
         "iLastWatched         integer, "
         "iClientId            integer, " //! @todo use mapping table
-        "idEpg                integer"
+        "idEpg                integer, "
+        "bHasArchive          bool"
       ")"
   );
 
@@ -191,6 +192,9 @@ void CPVRDatabase::UpdateTables(int iVersion)
 
   if (iVersion < 33)
     m_pDS->exec(sqlCreateTimersTable);
+
+  if (iVersion < 34)
+    m_pDS->exec("ALTER TABLE channels ADD bHasArchive bool");
 }
 
 /********** Client methods **********/
@@ -283,7 +287,7 @@ int CPVRDatabase::Get(CPVRChannelGroup &results, bool bCompressDB)
 
   std::string strQuery = PrepareSQL("SELECT channels.idChannel, channels.iUniqueId, channels.bIsRadio, channels.bIsHidden, channels.bIsUserSetIcon, channels.bIsUserSetName, "
       "channels.sIconPath, channels.sChannelName, channels.bIsVirtual, channels.bEPGEnabled, channels.sEPGScraper, channels.iLastWatched, channels.iClientId, channels.bIsLocked, "
-      "map_channelgroups_channels.iChannelNumber, map_channelgroups_channels.iSubChannelNumber, channels.idEpg "
+      "map_channelgroups_channels.iChannelNumber, map_channelgroups_channels.iSubChannelNumber, channels.idEpg, channels.bHasArchive "
       "FROM map_channelgroups_channels "
       "LEFT JOIN channels ON channels.idChannel = map_channelgroups_channels.idChannel "
       "WHERE map_channelgroups_channels.idGroup = %u", results.GroupID());
@@ -311,6 +315,7 @@ int CPVRDatabase::Get(CPVRChannelGroup &results, bool bCompressDB)
         channel->m_iLastWatched            = static_cast<time_t>(m_pDS->fv("iLastWatched").get_asInt());
         channel->m_iClientId               = m_pDS->fv("iClientId").get_asInt();
         channel->m_iEpgId                  = bIgnoreEpgDB ? -1 : m_pDS->fv("idEpg").get_asInt();
+        channel->m_bHasArchive             = m_pDS->fv("bHasArchive").get_asBool();
         channel->UpdateEncryptionName();
 
         PVRChannelGroupMember newMember(channel,
@@ -798,11 +803,11 @@ bool CPVRDatabase::Persist(CPVRChannel &channel, bool bCommit)
     strQuery = PrepareSQL("INSERT INTO channels ("
         "iUniqueId, bIsRadio, bIsHidden, bIsUserSetIcon, bIsUserSetName, bIsLocked, "
         "sIconPath, sChannelName, bIsVirtual, bEPGEnabled, sEPGScraper, iLastWatched, iClientId, "
-        "idEpg) "
-        "VALUES (%i, %i, %i, %i, %i, %i, '%s', '%s', %i, %i, '%s', %u, %i, %i)",
+        "idEpg, bHasArchive) "
+        "VALUES (%i, %i, %i, %i, %i, %i, '%s', '%s', %i, %i, '%s', %u, %i, %i, %i)",
         channel.UniqueID(), (channel.IsRadio() ? 1 :0), (channel.IsHidden() ? 1 : 0), (channel.IsUserSetIcon() ? 1 : 0), (channel.IsUserSetName() ? 1 : 0), (channel.IsLocked() ? 1 : 0),
         channel.IconPath().c_str(), channel.ChannelName().c_str(), 0, (channel.EPGEnabled() ? 1 : 0), channel.EPGScraper().c_str(), static_cast<unsigned int>(channel.LastWatched()), channel.ClientID(),
-        channel.EpgID());
+        channel.EpgID(), channel.HasArchive());
   }
   else
   {
@@ -810,12 +815,12 @@ bool CPVRDatabase::Persist(CPVRChannel &channel, bool bCommit)
     strQuery = PrepareSQL("REPLACE INTO channels ("
         "iUniqueId, bIsRadio, bIsHidden, bIsUserSetIcon, bIsUserSetName, bIsLocked, "
         "sIconPath, sChannelName, bIsVirtual, bEPGEnabled, sEPGScraper, iLastWatched, iClientId, "
-        "idChannel, idEpg) "
-        "VALUES (%i, %i, %i, %i, %i, %i, '%s', '%s', %i, %i, '%s', %u, %i, %s, %i)",
+        "idChannel, idEpg, bHasArchive) "
+        "VALUES (%i, %i, %i, %i, %i, %i, '%s', '%s', %i, %i, '%s', %u, %i, %s, %i, %i)",
         channel.UniqueID(), (channel.IsRadio() ? 1 :0), (channel.IsHidden() ? 1 : 0), (channel.IsUserSetIcon() ? 1 : 0), (channel.IsUserSetName() ? 1 : 0), (channel.IsLocked() ? 1 : 0),
         channel.IconPath().c_str(), channel.ChannelName().c_str(), 0, (channel.EPGEnabled() ? 1 : 0), channel.EPGScraper().c_str(), static_cast<unsigned int>(channel.LastWatched()), channel.ClientID(),
         strValue.c_str(),
-        channel.EpgID());
+        channel.EpgID(), channel.HasArchive());
   }
 
   if (QueueInsertQuery(strQuery))
diff --git a/xbmc/pvr/PVRDatabase.h b/xbmc/pvr/PVRDatabase.h
index efae17af199d..a801ea6d2c53 100644
--- a/xbmc/pvr/PVRDatabase.h
+++ b/xbmc/pvr/PVRDatabase.h
@@ -51,7 +51,7 @@ namespace PVR
      * @brief Get the minimal database version that is required to operate correctly.
      * @return The minimal database version.
      */
-    int GetSchemaVersion() const override { return 33; }
+    int GetSchemaVersion() const override { return 34; }
 
     /*!
      * @brief Get the default sqlite database filename.
diff --git a/xbmc/pvr/PVRGUIInfo.cpp b/xbmc/pvr/PVRGUIInfo.cpp
index b6ae88c218b5..9be9d3606730 100644
--- a/xbmc/pvr/PVRGUIInfo.cpp
+++ b/xbmc/pvr/PVRGUIInfo.cpp
@@ -1107,6 +1107,20 @@ bool CPVRGUIInfo::GetListItemAndPlayerBool(const CFileItem *item, const CGUIInfo
 {
   switch (info.m_info)
   {
+    case LISTITEM_HASARCHIVE:
+      if (item->IsPVRChannel())
+      {
+        bValue = item->GetPVRChannelInfoTag()->HasArchive();
+        return true;
+      }
+      break;
+    case LISTITEM_ISPLAYABLE:
+      if (item->IsEPG())
+      {
+        bValue = item->GetEPGInfoTag()->IsPlayable();
+        return true;
+      }
+      break;
     case LISTITEM_ISRECORDING:
       if (item->IsPVRChannel())
       {
diff --git a/xbmc/pvr/channels/PVRChannel.cpp b/xbmc/pvr/channels/PVRChannel.cpp
index b33ac83e634f..385a0a0cf1a2 100644
--- a/xbmc/pvr/channels/PVRChannel.cpp
+++ b/xbmc/pvr/channels/PVRChannel.cpp
@@ -46,6 +46,7 @@ CPVRChannel::CPVRChannel(bool bRadio /* = false */)
   m_bIsLocked               = false;
   m_iLastWatched            = 0;
   m_bChanged                = false;
+  m_bHasArchive             = false;
 
   m_iEpgId                  = -1;
   m_bEPGEnabled             = true;
@@ -78,6 +79,7 @@ CPVRChannel::CPVRChannel(const PVR_CHANNEL &channel, unsigned int iClientId)
   m_strEPGScraper           = "client";
   m_iEpgId                  = -1;
   m_bChanged                = false;
+  m_bHasArchive             = channel.bHasArchive;
 
   if (m_strChannelName.empty())
     m_strChannelName = StringUtils::Format("%s %d", g_localizeStrings.Get(19029).c_str(), m_iUniqueId);
@@ -113,6 +115,7 @@ void CPVRChannel::Serialize(CVariant& value) const
     epg->Serialize(value["broadcastnext"]);
 
   value["isrecording"] = false; // compat
+  value["hasarchive"] = m_bHasArchive;
 }
 
 /********** XBMC related channel methods **********/
@@ -178,12 +181,14 @@ bool CPVRChannel::UpdateFromClient(const CPVRChannelPtr &channel)
   if (m_clientChannelNumber     != channel->m_clientChannelNumber ||
       m_strInputFormat          != channel->InputFormat() ||
       m_iClientEncryptionSystem != channel->EncryptionSystem() ||
-      m_strClientChannelName    != channel->ClientChannelName())
+      m_strClientChannelName    != channel->ClientChannelName() ||
+      m_bHasArchive             != channel->HasArchive())
   {
     m_clientChannelNumber     = channel->m_clientChannelNumber;
     m_strInputFormat          = channel->InputFormat();
     m_iClientEncryptionSystem = channel->EncryptionSystem();
     m_strClientChannelName    = channel->ClientChannelName();
+    m_bHasArchive             = channel->HasArchive();
 
     UpdateEncryptionName();
     SetChanged();
@@ -301,6 +306,12 @@ void CPVRChannel::SetRadioRDSInfoTag(const std::shared_ptr<CPVRRadioRDSInfoTag>&
   m_rdsTag = tag;
 }
 
+bool CPVRChannel::HasArchive(void) const
+{
+  CSingleLock lock(m_critSection);
+  return m_bHasArchive;
+}
+
 bool CPVRChannel::SetIconPath(const std::string &strIconPath, bool bIsUserSetIcon /* = false */)
 {
   CSingleLock lock(m_critSection);
diff --git a/xbmc/pvr/channels/PVRChannel.h b/xbmc/pvr/channels/PVRChannel.h
index cf040c3e5828..bd74a4e5bad1 100644
--- a/xbmc/pvr/channels/PVRChannel.h
+++ b/xbmc/pvr/channels/PVRChannel.h
@@ -150,6 +150,11 @@ namespace PVR
      */
     void SetRadioRDSInfoTag(const std::shared_ptr<CPVRRadioRDSInfoTag>& tag);
 
+    /*!
+     * @return True if this channel has archive support, false otherwise
+     */
+    bool HasArchive(void) const;
+
     /*!
      * @return The path to the icon for this channel.
      */
@@ -440,6 +445,7 @@ namespace PVR
     bool             m_bChanged;                /*!< true if anything in this entry was changed that needs to be persisted */
     CPVRChannelNumber m_channelNumber;          /*!< the number this channel has in the currently selected channel group */
     std::shared_ptr<CPVRRadioRDSInfoTag> m_rdsTag; /*! < the radio rds data, if available for the channel. */
+    bool             m_bHasArchive;             /*!< true if this channel supports archive */
     //@}
 
     /*! @name EPG related channel data

From 27e260f9f622fcfb06856ac2cf9ed582b10f123d Mon Sep 17 00:00:00 2001
From: Arthur Liberman <arthur_liberman@hotmail.com>
Date: Sat, 3 Nov 2018 17:48:17 +0200
Subject: [PATCH 09/10] [skin.estuary] Implement HasArchive and IsPlayable
 ListItem API

---
 .../media/icons/pvr/PVR-HasArchive.png            | Bin 0 -> 738 bytes
 addons/skin.estuary/media/windows/pvr/archive.png | Bin 0 -> 417 bytes
 addons/skin.estuary/xml/Variables.xml             |   3 +++
 3 files changed, 3 insertions(+)
 create mode 100644 addons/skin.estuary/media/icons/pvr/PVR-HasArchive.png
 create mode 100644 addons/skin.estuary/media/windows/pvr/archive.png

diff --git a/addons/skin.estuary/media/icons/pvr/PVR-HasArchive.png b/addons/skin.estuary/media/icons/pvr/PVR-HasArchive.png
new file mode 100644
index 0000000000000000000000000000000000000000..1eebcf8a711360a0da3d934d13be2b6191dd699f
GIT binary patch
literal 738
zcmV<80v-K{P)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F800001b5ch_0Itp)
z=>Px#1ZP1_K>z@;j|==^1poj532;bRa{vGi!vFvd!vV){sAK>D02y>eSaefwW^{L9
za%BK;VQFr3E^cLXAT%y8E;2FkAZe8V00L4;L_t(oN9~s}Z_`i|g^eh&lOQo6h(u$@
zDGSVWWr3f77`n7erAllpY-L2Sl>Yz=FjS(V1wR|g+6jr3s#3>p%~B}|<-69M%yaaT
z*AAc_>By06pL^eV_ucCR7x*{vwKErdx*2kfO1`_%fS2{|IpH+D6mEBuC`*=_ruVXy
zr<<)J-Gw>7-$Z%xEHv@MAnRPyH_i}WI=5RUT_@0wcF`YQEf!9zZ0G&o+&^ySy^kca
z9Q?f1(6{}7;3N2r07F~gD$7JnI*3g2x?#F^RAx3Hw2Z~SMAQ~+5_xAt;#+LjqRLGN
zSvi*O+r(X|ZhW9Fx+?1k_FQeBdgWE3F-Ge}d0L!6wPX7_FFNhH3(-4>isZgVm<%~;
zQtdV&AELS8<N}#4)g3h-;^>|%PQ%oI4oB6#vI+PS2adulexQ+RKzrrEO`Cu(ao|Lb
zwMMD|d&EP#HUVFjr@{1|XrvlQ0(n~41bj&Xqh{7y(?~U7s^P#}n}9D#V89@ItdVNK
zNR_F^!`=<3N;D6h+OmvPw&B<&;zPRO4n=-l!%P74oJ_aQ(gn1JOvk6rA1z@XuTTpE
zo7gPG(eL3-yrA+9pcrMIleu?CL}L&Z@v6)iRd>Uc?fJVh&waK+S~?ofWkD)C9XPl5
zu<t!djBNoXQC40Cmk(Gk@G&9tTt=!bP?ZE8mV2II`>ZSf3v@`C=Ll~QV2|q&*Apxr
zi_NlHc-S`m&r<CaaewMPcLIsXNR_E3gGG8f?yO0Nn=|u^<vBn1{|6WNzYqj}00mQT
UGV1g6rT_o{07*qoM6N<$f|~b7(EtDd

literal 0
HcmV?d00001

diff --git a/addons/skin.estuary/media/windows/pvr/archive.png b/addons/skin.estuary/media/windows/pvr/archive.png
new file mode 100644
index 0000000000000000000000000000000000000000..a832a88821aa444b463fd28376eb29b7ee4cf1ce
GIT binary patch
literal 417
zcmV;S0bc%zP)<h;3K|Lk000e1NJLTq001Ze001Zm1^@s6jQ+T700001b5ch_0Itp)
z=>Px#1ZP1_K>z@;j|==^1poj532;bRa{vGi!vFvd!vV){sAK>D02y>eSaefwW^{L9
za%BK;VQFr3E^cLXAT%y8E;2FkAZe8V009w6L_t(oN9~tE4uUWgL^*(aF2IUC3lD-v
z5EH$e7jU6>apNKMP4Y<yDG6W;UHq3!Op(qswf(Jy<2a7v?9bs*m8eDyI@+h&rM<Eb
z44^`1bVqOW9Y}3G*Y}lm*$zTm^g_cyP3ehR>zW?IuIOXobEWrhW|0m;G;>P_*Gv7<
z%_Qbpb8~;zDXD*&HHonnd?<9OI<t%irYa@cm7&0;l26<cgrVx%xRk7wd}_0f1BNQT
zp|G`T%sLJj>Vyadt<}-2<A7oIGnoAv%zGCLOuIqIKf0J@Trkf2BoUbBdlvT)lJ9M%
zhp;90LA`gfuG>MV)}%I$cICJPsjcVx+^B~zfIR<`IF92usVRydLMd<e!5R#|00000
LNkvXXu0mjfn{lme

literal 0
HcmV?d00001

diff --git a/addons/skin.estuary/xml/Variables.xml b/addons/skin.estuary/xml/Variables.xml
index 3c5149e42a10..30910fb630b8 100644
--- a/addons/skin.estuary/xml/Variables.xml
+++ b/addons/skin.estuary/xml/Variables.xml
@@ -3,6 +3,7 @@
 	<variable name="PVRStatusImageVar">
 		<value condition="ListItem.IsRecording">windows/pvr/record.png</value>
 		<value condition="ListItem.HasTimer | ListItem.HasTimerSchedule">windows/pvr/timer.png</value>
+		<value condition="ListItem.HasArchive">windows/pvr/archive.png</value>
 	</variable>
 	<variable name="AutoCompletionContentVar">
 		<value condition="System.HasAddon(plugin.program.autocompletion) + !System.HasHiddenInput">plugin://plugin.program.autocompletion?info=autocomplete&amp;&amp;id=$INFO[Control.GetLabel(312).index(1)]&amp;&amp;limit=9</value>
@@ -337,6 +338,7 @@
 		<value condition="ListItem.IsCollection">overlays/set.png</value>
 		<value condition="ListItem.IsPlaying">overlays/watched/OverlayPlaying-List.png</value>
 		<value condition="ListItem.IsResumable">overlays/watched/resume.png</value>
+		<value condition="ListItem.HasArchive">windows/pvr/archive.png</value>
 		<value condition="Integer.IsGreater(ListItem.Playcount,0)">$INFO[ListItem.Overlay]</value>
 	</variable>
 	<!-- Breadcrumbs -->
@@ -429,6 +431,7 @@
 		<value condition="ListItem.HasTimer + !ListItem.TimerIsActive">icons/pvr/PVR-HasTimerDisabled.png</value>
 		<value condition="ListItem.HasTimerSchedule">icons/pvr/PVR-HasTimerSchedule.png</value>
 		<value condition="ListItem.HasTimer">icons/pvr/PVR-HasTimer.png</value>
+		<value condition="ListItem.IsPlayable">icons/pvr/PVR-HasArchive.png</value>
 	</variable>
 	<variable name="SeasonEpisodeLabel">
 		<value condition="String.IsEmpty(ListItem.EpisodeName)">$INFO[ListItem.Season,S]$INFO[ListItem.Episode,E]</value>

From 7c3661bdd661960e1f64e9568165a01439279efc Mon Sep 17 00:00:00 2001
From: Arthur Liberman <arthur_liberman@hotmail.com>
Date: Mon, 5 Nov 2018 02:29:12 +0200
Subject: [PATCH 10/10] [skin.estouchy] Implement ListItem.IsPlayable API

---
 addons/skin.estouchy/media/epg_archive.png | Bin 0 -> 416 bytes
 addons/skin.estouchy/xml/ViewsPVR.xml      |  16 ++++++++++++++++
 2 files changed, 16 insertions(+)
 create mode 100644 addons/skin.estouchy/media/epg_archive.png

diff --git a/addons/skin.estouchy/media/epg_archive.png b/addons/skin.estouchy/media/epg_archive.png
new file mode 100644
index 0000000000000000000000000000000000000000..bf02128d673bf728f735e00ced4a64bc279c23f2
GIT binary patch
literal 416
zcmV;R0bl-!P)<h;3K|Lk000e1NJLTq0015U0015c1^@s6J20-I00001b5ch_0Itp)
z=>Px#1ZP1_K>z@;j|==^1poj532;bRa{vGi!vFvd!vV){sAK>D02y>eSaefwW^{L9
za%BK;VQFr3E^cLXAT%y8E;2FkAZe8V009t5L_t(YOYN7j4TCTcMWIjOAyUvY4U<qX
zMmi)`$uyaOGEMS-a#kF2A`aN+CSQ6oaOe9%;KNjFI-HMwbf5tpn83Jz*BE1t3+HYY
z3Jl-^uHg0s<}i1V>Awq;TQCF7AO_BDrQEuZNNUgnt=JY=i#5eXktCdeR$vdTS&Pl5
z5KMWeOM0<+7Xo~y+Juz6o;gnZxaUQRWez=gz$K$4=HR*1aKPrkwWlTJfL@Nq>^3pY
zAr<s$Xv|ipCFG=|G5f3*%*jM!HhC?WlksnC#lyJR%T;VS6>A`6TBh{tA|DAq+J6=)
zoY-yzLLp$k^`Q_fw%POMw%glKNVMC~Yr<sPUl<An{FwNst*Y*-ICW^h#_pg10000<
KMNUMnLSTZKCaJyv

literal 0
HcmV?d00001

diff --git a/addons/skin.estouchy/xml/ViewsPVR.xml b/addons/skin.estouchy/xml/ViewsPVR.xml
index a9290088c5a7..4b13e8658497 100644
--- a/addons/skin.estouchy/xml/ViewsPVR.xml
+++ b/addons/skin.estouchy/xml/ViewsPVR.xml
@@ -324,6 +324,14 @@
 					<texture>epg_schedule.png</texture>
 					<visible>ListItem.HasTimer</visible>
 				</control>
+				<control type="image">
+					<posx>5</posx>
+					<posy>45</posy>
+					<width>20</width>
+					<height>20</height>
+					<texture>epg_archive.png</texture>
+					<visible>![ListItem.IsRecording | ListItem.HasTimer] + ListItem.IsPlayable</visible>
+				</control>
 			</itemlayout>
 			<focusedlayout width="40" height="65">
 				<control type="image" id="2">
@@ -370,6 +378,14 @@
 					<texture>epg_schedule.png</texture>
 					<visible>ListItem.HasTimer</visible>
 				</control>
+				<control type="image">
+					<posx>7</posx>
+					<posy>44</posy>
+					<width>15</width>
+					<height>15</height>
+					<texture>epg_archive.png</texture>
+					<visible>![ListItem.IsRecording | ListItem.HasTimer] + ListItem.IsPlayable</visible>
+				</control>
 			</focusedlayout>
 		</control>
 	</include>
