From 17ae355295108961a7c4127230c9f2a85c65e0f9 Mon Sep 17 00:00:00 2001
From: phunkyfish <phunkyfish@gmail.com>
Date: Mon, 23 Sep 2019 21:22:48 +0100
Subject: [PATCH 1/2] [pvr] support group specific channel numbering

---
 xbmc/addons/PVRClient.cpp                     |   4 +-
 xbmc/pvr/PVRDatabase.cpp                      |  37 ++++--
 xbmc/pvr/PVRDatabase.h                        |   2 +-
 xbmc/pvr/channels/PVRChannel.cpp              |  13 ++
 xbmc/pvr/channels/PVRChannel.h                |  10 +-
 xbmc/pvr/channels/PVRChannelGroup.cpp         | 119 ++++++++++++------
 xbmc/pvr/channels/PVRChannelGroup.h           |  42 ++++++-
 xbmc/pvr/channels/PVRChannelGroupInternal.cpp |  11 +-
 xbmc/pvr/channels/PVRChannelGroupInternal.h   |   5 +-
 xbmc/pvr/channels/PVRChannelGroups.cpp        |   8 +-
 xbmc/pvr/channels/PVRChannelGroups.h          |   4 +-
 11 files changed, 187 insertions(+), 68 deletions(-)

diff --git a/xbmc/addons/PVRClient.cpp b/xbmc/addons/PVRClient.cpp
index e14220cadc47..b0dfc58e4d94 100644
--- a/xbmc/addons/PVRClient.cpp
+++ b/xbmc/addons/PVRClient.cpp
@@ -1494,7 +1494,7 @@ void CPVRClient::cb_transfer_channel_group_member(void *kodiInstance, const ADDO
   else if (group->IsRadio() == channel->IsRadio())
   {
     /* transfer this entry to the group */
-    group->AddToGroup(channel, CPVRChannelNumber(member->iChannelNumber, member->iSubChannelNumber), member->iOrder, true);
+    group->AddToGroup(channel, CPVRChannelNumber(), member->iOrder, true, CPVRChannelNumber(member->iChannelNumber, member->iSubChannelNumber));
   }
 }
 
@@ -1536,7 +1536,7 @@ void CPVRClient::cb_transfer_channel_entry(void *kodiInstance, const ADDON_HANDL
 
   /* transfer this entry to the internal channels group */
   CPVRChannelPtr transferChannel(new CPVRChannel(*channel, client->GetID()));
-  kodiChannels->UpdateFromClient(transferChannel, CPVRChannelNumber(), channel->iOrder);
+  kodiChannels->UpdateFromClient(transferChannel, CPVRChannelNumber(), channel->iOrder, transferChannel->ClientChannelNumber());
 }
 
 void CPVRClient::cb_transfer_recording_entry(void *kodiInstance, const ADDON_HANDLE handle, const PVR_RECORDING *recording)
diff --git a/xbmc/pvr/PVRDatabase.cpp b/xbmc/pvr/PVRDatabase.cpp
index e82b17cf3954..da1e53aa15cc 100644
--- a/xbmc/pvr/PVRDatabase.cpp
+++ b/xbmc/pvr/PVRDatabase.cpp
@@ -124,7 +124,9 @@ void CPVRDatabase::CreateTables()
         "idGroup           integer, "
         "iChannelNumber    integer, "
         "iSubChannelNumber integer, "
-        "iOrder            integer"
+        "iOrder            integer, "
+        "iClientChannelNumber    integer, "
+        "iClientSubChannelNumber integer"
       ")"
   );
 
@@ -208,6 +210,14 @@ void CPVRDatabase::UpdateTables(int iVersion)
     m_pDS->exec("ALTER TABLE map_channelgroups_channels ADD iOrder integer");
     m_pDS->exec("UPDATE map_channelgroups_channels SET iOrder = 0");
   }
+
+  if (iVersion < 36)
+  {
+    m_pDS->exec("ALTER TABLE map_channelgroups_channels ADD iClientChannelNumber integer");
+    m_pDS->exec("UPDATE map_channelgroups_channels SET iClientChannelNumber = 0");
+    m_pDS->exec("ALTER TABLE map_channelgroups_channels ADD iClientSubChannelNumber integer");
+    m_pDS->exec("UPDATE map_channelgroups_channels SET iClientSubChannelNumber = 0");
+  }
 }
 
 /********** Client methods **********/
@@ -300,7 +310,8 @@ int CPVRDatabase::Get(CPVRChannelGroup &results, bool bCompressDB)
 
   std::string strQuery = PrepareSQL("SELECT channels.idChannel, channels.iUniqueId, channels.bIsRadio, channels.bIsHidden, channels.bIsUserSetIcon, channels.bIsUserSetName, "
       "channels.sIconPath, channels.sChannelName, channels.bIsVirtual, channels.bEPGEnabled, channels.sEPGScraper, channels.iLastWatched, channels.iClientId, channels.bIsLocked, "
-      "map_channelgroups_channels.iChannelNumber, map_channelgroups_channels.iSubChannelNumber, map_channelgroups_channels.iOrder, channels.idEpg, channels.bHasArchive "
+      "map_channelgroups_channels.iChannelNumber, map_channelgroups_channels.iSubChannelNumber, map_channelgroups_channels.iOrder, map_channelgroups_channels.iClientChannelNumber, "
+      "map_channelgroups_channels.iClientSubChannelNumber, channels.idEpg, channels.bHasArchive "
       "FROM map_channelgroups_channels "
       "LEFT JOIN channels ON channels.idChannel = map_channelgroups_channels.idChannel "
       "WHERE map_channelgroups_channels.idGroup = %u", results.GroupID());
@@ -334,7 +345,9 @@ int CPVRDatabase::Get(CPVRChannelGroup &results, bool bCompressDB)
         PVRChannelGroupMember newMember(channel,
                                         CPVRChannelNumber(static_cast<unsigned int>(m_pDS->fv("iChannelNumber").get_asInt()),
                                                           static_cast<unsigned int>(m_pDS->fv("iSubChannelNumber").get_asInt())),
-                                        0, static_cast<int>(m_pDS->fv("iOrder").get_asInt()));
+                                        0, static_cast<int>(m_pDS->fv("iOrder").get_asInt()),
+                                        CPVRChannelNumber(static_cast<unsigned int>(m_pDS->fv("iClientChannelNumber").get_asInt()),
+                                                          static_cast<unsigned int>(m_pDS->fv("iClientSubChannelNumber").get_asInt())));
         results.m_sortedMembers.emplace_back(newMember);
         results.m_members.insert(std::make_pair(channel->StorageId(), newMember));
 
@@ -617,7 +630,7 @@ int CPVRDatabase::Get(CPVRChannelGroup &group, const CPVRChannelGroup &allGroup)
 
   CSingleLock lock(m_critSection);
 
-  const std::string strQuery = PrepareSQL("SELECT idChannel, iChannelNumber, iSubChannelNumber, iOrder FROM map_channelgroups_channels "
+  const std::string strQuery = PrepareSQL("SELECT idChannel, iChannelNumber, iSubChannelNumber, iOrder, iClientChannelNumber, iClientSubChannelNumber FROM map_channelgroups_channels "
                                           "WHERE idGroup = %u ORDER BY iChannelNumber", group.GroupID());
   if (ResultQuery(strQuery))
   {
@@ -642,7 +655,9 @@ int CPVRDatabase::Get(CPVRChannelGroup &group, const CPVRChannelGroup &allGroup)
           PVRChannelGroupMember newMember(channel->second,
                                           CPVRChannelNumber(static_cast<unsigned int>(m_pDS->fv("iChannelNumber").get_asInt()),
                                                             static_cast<unsigned int>(m_pDS->fv("iSubChannelNumber").get_asInt())),
-                                          0, static_cast<int>(m_pDS->fv("iOrder").get_asInt()));
+                                          0, static_cast<int>(m_pDS->fv("iOrder").get_asInt()),
+                                          CPVRChannelNumber(static_cast<unsigned int>(m_pDS->fv("iClientChannelNumber").get_asInt()),
+                                                            static_cast<unsigned int>(m_pDS->fv("iClientSubChannelNumber").get_asInt())));
           group.m_sortedMembers.emplace_back(newMember);
           group.m_members.insert(std::make_pair(channel->second->StorageId(), newMember));
           ++iReturn;
@@ -724,16 +739,18 @@ bool CPVRDatabase::PersistGroupMembers(const CPVRChannelGroup &group)
   {
     for (const auto& groupMember : group.m_sortedMembers)
     {
-      const std::string strWhereClause = PrepareSQL("idChannel = %u AND idGroup = %u AND iChannelNumber = %u AND iSubChannelNumber = %u AND iOrder = %u",
-          groupMember.channel->ChannelID(), group.GroupID(), groupMember.channelNumber.GetChannelNumber(), groupMember.channelNumber.GetSubChannelNumber());
+      const std::string strWhereClause = PrepareSQL("idChannel = %u AND idGroup = %u AND iChannelNumber = %u AND iSubChannelNumber = %u AND iOrder = %u AND iClientChannelNumber = %u AND iClientSubChannelNumber = %u",
+          groupMember.channel->ChannelID(), group.GroupID(), groupMember.channelNumber.GetChannelNumber(), groupMember.channelNumber.GetSubChannelNumber(), groupMember.iOrder,
+          groupMember.clientChannelNumber.GetChannelNumber(), groupMember.clientChannelNumber.GetSubChannelNumber());
 
       const std::string strValue = GetSingleValue("map_channelgroups_channels", "idChannel", strWhereClause);
       if (strValue.empty())
       {
         strQuery = PrepareSQL("REPLACE INTO map_channelgroups_channels ("
-            "idGroup, idChannel, iChannelNumber, iSubChannelNumber, iOrder) "
-            "VALUES (%i, %i, %i, %i, %i);",
-            group.GroupID(), groupMember.channel->ChannelID(), groupMember.channelNumber.GetChannelNumber(), groupMember.channelNumber.GetSubChannelNumber(), groupMember.iOrder);
+            "idGroup, idChannel, iChannelNumber, iSubChannelNumber, iOrder, iClientChannelNumber, iClientSubChannelNumber) "
+            "VALUES (%i, %i, %i, %i, %i, %i, %i);",
+            group.GroupID(), groupMember.channel->ChannelID(), groupMember.channelNumber.GetChannelNumber(), groupMember.channelNumber.GetSubChannelNumber(), groupMember.iOrder,
+            groupMember.clientChannelNumber.GetChannelNumber(), groupMember.clientChannelNumber.GetSubChannelNumber());
         QueueInsertQuery(strQuery);
       }
     }
diff --git a/xbmc/pvr/PVRDatabase.h b/xbmc/pvr/PVRDatabase.h
index b05b894109fb..05988a9e0e36 100644
--- a/xbmc/pvr/PVRDatabase.h
+++ b/xbmc/pvr/PVRDatabase.h
@@ -46,7 +46,7 @@ namespace PVR
      * @brief Get the minimal database version that is required to operate correctly.
      * @return The minimal database version.
      */
-    int GetSchemaVersion() const override { return 35; }
+    int GetSchemaVersion() const override { return 36; }
 
     /*!
      * @brief Get the default sqlite database filename.
diff --git a/xbmc/pvr/channels/PVRChannel.cpp b/xbmc/pvr/channels/PVRChannel.cpp
index 5c3c89c42d1a..1bf98a3665c9 100644
--- a/xbmc/pvr/channels/PVRChannel.cpp
+++ b/xbmc/pvr/channels/PVRChannel.cpp
@@ -615,6 +615,19 @@ void CPVRChannel::SetChannelNumber(const CPVRChannelNumber& channelNumber)
   }
 }
 
+void CPVRChannel::SetClientChannelNumber(const CPVRChannelNumber& clientChannelNumber)
+{
+  CSingleLock lock(m_critSection);
+  if (m_clientChannelNumber != clientChannelNumber)
+  {
+    m_clientChannelNumber = clientChannelNumber;
+
+    const std::shared_ptr<CPVREpg> epg = GetEPG();
+    if (epg)
+      epg->GetChannelData()->SetSortableClientChannelNumber(m_clientChannelNumber.SortableChannelNumber());
+  }
+}
+
 void CPVRChannel::ToSortable(SortItem& sortable, Field field) const
 {
   CSingleLock lock(m_critSection);
diff --git a/xbmc/pvr/channels/PVRChannel.h b/xbmc/pvr/channels/PVRChannel.h
index 2e8cb208f9af..911f195302f2 100644
--- a/xbmc/pvr/channels/PVRChannel.h
+++ b/xbmc/pvr/channels/PVRChannel.h
@@ -87,6 +87,12 @@ namespace PVR
      */
     void SetChannelNumber(const CPVRChannelNumber& channelNumber);
 
+    /*!
+     * @brief Set the client channel number for this channel.
+     * @param clientChannelNumber The new client channel number
+     */
+    void SetClientChannelNumber(const CPVRChannelNumber& clientChannelNumber);
+
     /*!
      * @brief Get the channel number for this channel.
      * @return The channel number.
@@ -443,7 +449,7 @@ namespace PVR
     std::string m_strChannelName;                  /*!< the name for this channel used by XBMC */
     time_t m_iLastWatched = 0;                     /*!< last time channel has been watched */
     bool m_bChanged = false;                       /*!< true if anything in this entry was changed that needs to be persisted */
-    CPVRChannelNumber m_channelNumber;             /*!< the number this channel has in the currently selected channel group */
+    CPVRChannelNumber m_channelNumber;             /*!< the active channel number this channel has in the currently selected channel group */
     std::shared_ptr<CPVRRadioRDSInfoTag> m_rdsTag; /*! < the radio rds data, if available for the channel. */
     bool m_bHasArchive = false;                    /*!< true if this channel supports archive */
     //@}
@@ -462,7 +468,7 @@ namespace PVR
     //@{
     int m_iUniqueId = -1;                    /*!< the unique identifier for this channel */
     int m_iClientId = -1;                    /*!< the identifier of the client that serves this channel */
-    CPVRChannelNumber m_clientChannelNumber; /*!< the channel number on the client */
+    CPVRChannelNumber m_clientChannelNumber; /*!< the channel number on the client for the currently selected channel group */
     std::string m_strClientChannelName;      /*!< the name of this channel on the client */
     std::string m_strInputFormat;            /*!< the stream input type based on ffmpeg/libavformat/allformats.c */
     std::string m_strFileNameAndPath;        /*!< the filename to be used by PVRManager to open and read the stream */
diff --git a/xbmc/pvr/channels/PVRChannelGroup.cpp b/xbmc/pvr/channels/PVRChannelGroup.cpp
index 2dcfec6c1604..f93704886a69 100644
--- a/xbmc/pvr/channels/PVRChannelGroup.cpp
+++ b/xbmc/pvr/channels/PVRChannelGroup.cpp
@@ -91,7 +91,8 @@ bool CPVRChannelGroup::Load(std::vector<std::shared_ptr<CPVRChannel>>& channelsT
 
   const std::shared_ptr<CSettings> settings = CServiceBroker::GetSettingsComponent()->GetSettings();
   m_bUsingBackendChannelOrder   = settings->GetBool(CSettings::SETTING_PVRMANAGER_BACKENDCHANNELORDER);
-  m_bUsingBackendChannelNumbers = settings->GetBool(CSettings::SETTING_PVRMANAGER_USEBACKENDCHANNELNUMBERS);
+  m_bUsingBackendChannelNumbers = settings->GetBool(CSettings::SETTING_PVRMANAGER_USEBACKENDCHANNELNUMBERS) &&
+                                  CServiceBroker::GetPVRManager().Clients()->EnabledClientAmount() == 1;
 
   int iChannelCount = m_iGroupId > 0 ? LoadFromDb() : 0;
   CLog::LogFC(LOGDEBUG, LOGPVR, "%d channels loaded from the database for group '%s'", iChannelCount, GroupName().c_str());
@@ -185,10 +186,10 @@ struct sortByClientChannelNumber
   {
     if (channel1.iClientPriority == channel2.iClientPriority)
     {
-      if (channel1.channel->ClientChannelNumber() == channel2.channel->ClientChannelNumber())
+      if (channel1.clientChannelNumber == channel2.clientChannelNumber)
         return channel1.channel->ChannelName() < channel2.channel->ChannelName();
 
-      return channel1.channel->ClientChannelNumber() < channel2.channel->ClientChannelNumber();
+      return channel1.clientChannelNumber < channel2.clientChannelNumber;
     }
     return channel1.iClientPriority > channel2.iClientPriority;
   }
@@ -202,16 +203,21 @@ struct sortByChannelNumber
   }
 };
 
+void CPVRChannelGroup::Sort()
+{
+  if (m_bUsingBackendChannelOrder)
+    SortByClientChannelNumber();
+  else
+    SortByChannelNumber();
+}
+
 bool CPVRChannelGroup::SortAndRenumber(void)
 {
   if (PreventSortAndRenumber())
     return true;
 
   CSingleLock lock(m_critSection);
-  if (m_bUsingBackendChannelOrder)
-    SortByClientChannelNumber();
-  else
-    SortByChannelNumber();
+  Sort();
 
   bool bReturn = Renumber();
   return bReturn;
@@ -330,20 +336,28 @@ std::shared_ptr<CPVRChannel> CPVRChannelGroup::GetLastPlayedChannel(int iCurrent
   return returnChannel;
 }
 
-CPVRChannelNumber CPVRChannelGroup::GetChannelNumber(const CPVRChannelPtr &channel) const
+CPVRChannelNumber CPVRChannelGroup::GetChannelNumber(const std::shared_ptr<CPVRChannel>& channel) const
 {
   CSingleLock lock(m_critSection);
   const PVRChannelGroupMember& member(GetByUniqueID(channel->StorageId()));
   return member.channelNumber;
 }
 
+CPVRChannelNumber CPVRChannelGroup::GetClientChannelNumber(const std::shared_ptr<CPVRChannel>& channel) const
+{
+  CSingleLock lock(m_critSection);
+  const PVRChannelGroupMember& member(GetByUniqueID(channel->StorageId()));
+  return member.clientChannelNumber;
+}
+
 std::shared_ptr<CPVRChannel> CPVRChannelGroup::GetByChannelNumber(const CPVRChannelNumber& channelNumber) const
 {
   CSingleLock lock(m_critSection);
 
   for (const auto& groupMember : m_sortedMembers)
   {
-    if (groupMember.channelNumber == channelNumber)
+    CPVRChannelNumber activeChannelNumber = m_bUsingBackendChannelNumbers ? groupMember.clientChannelNumber : groupMember.channelNumber;
+    if (activeChannelNumber == channelNumber)
       return groupMember.channel;
   }
 
@@ -436,7 +450,10 @@ void CPVRChannelGroup::GetChannelNumbers(std::vector<std::string>& channelNumber
 {
   CSingleLock lock(m_critSection);
   for (const auto& member : m_sortedMembers)
-    channelNumbers.emplace_back(member.channelNumber.FormattedChannelNumber());
+  {
+    CPVRChannelNumber activeChannelNumber = m_bUsingBackendChannelNumbers ? member.clientChannelNumber : member.channelNumber;
+    channelNumbers.emplace_back(activeChannelNumber.FormattedChannelNumber());
+  }
 }
 
 int CPVRChannelGroup::LoadFromDb(bool bCompress /* = false */)
@@ -475,9 +492,9 @@ bool CPVRChannelGroup::AddAndUpdateChannels(const CPVRChannelGroup &channels, bo
     if (!IsGroupMember(existingChannel.channel))
     {
       AddToGroup(existingChannel.channel,
-                 bUseBackendChannelNumbers ? it->second.channel->ClientChannelNumber() : CPVRChannelNumber(),
+                 it->second.channelNumber,
                  it->second.iOrder,
-                 bUseBackendChannelNumbers);
+                 bUseBackendChannelNumbers, it->second.clientChannelNumber);
 
       bReturn = true;
       CLog::Log(LOGINFO,"Added %s channel '%s' to group '%s'",
@@ -512,6 +529,17 @@ void CPVRChannelGroup::UpdateClientOrder()
     member.channel->SetClientOrder(member.iOrder);
 }
 
+void CPVRChannelGroup::UpdateChannelNumbers()
+{
+  CSingleLock lock(m_critSection);
+
+  for (const auto& member : GetMembers())
+  {
+    member.channel->SetChannelNumber(m_bUsingBackendChannelNumbers ? member.clientChannelNumber : member.channelNumber);
+    member.channel->SetClientChannelNumber(member.clientChannelNumber);
+  }
+}
+
 std::vector<CPVRChannelPtr> CPVRChannelGroup::RemoveDeletedChannels(const CPVRChannelGroup &channels)
 {
   std::vector<CPVRChannelPtr> removedChannels;
@@ -607,7 +635,7 @@ bool CPVRChannelGroup::RemoveFromGroup(const CPVRChannelPtr &channel)
   return bReturn;
 }
 
-bool CPVRChannelGroup::AddToGroup(const CPVRChannelPtr& channel, const CPVRChannelNumber& channelNumber, int iOrder, bool bUseBackendChannelNumbers)
+bool CPVRChannelGroup::AddToGroup(const std::shared_ptr<CPVRChannel>& channel, const CPVRChannelNumber& channelNumber, int iOrder, bool bUseBackendChannelNumbers, const CPVRChannelNumber& clientChannelNumber /* = {} */)
 {
   bool bReturn(false);
   CSingleLock lock(m_critSection);
@@ -621,12 +649,12 @@ bool CPVRChannelGroup::AddToGroup(const CPVRChannelPtr& channel, const CPVRChann
     if (realChannel.channel)
     {
       unsigned int iChannelNumber = channelNumber.GetChannelNumber();
-      if (!channelNumber.IsValid() ||
-          (!bUseBackendChannelNumbers && (iChannelNumber > m_members.size() + 1)))
-        iChannelNumber = m_members.size() + 1;
+      if (!channelNumber.IsValid())
+        iChannelNumber = realChannel.channelNumber.GetChannelNumber();
 
       PVRChannelGroupMember newMember(realChannel);
       newMember.channelNumber = CPVRChannelNumber(iChannelNumber, channelNumber.GetSubChannelNumber());
+      newMember.clientChannelNumber = clientChannelNumber;
       newMember.iOrder = iOrder;
       m_sortedMembers.push_back(newMember);
       m_members.insert(std::make_pair(realChannel.channel->StorageId(), newMember));
@@ -697,43 +725,49 @@ bool CPVRChannelGroup::Renumber(void)
 
   bool bReturn(false);
   unsigned int iChannelNumber(0);
-  bool bUseBackendChannelNumbers(CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_PVRMANAGER_USEBACKENDCHANNELNUMBERS) &&
-                                 CServiceBroker::GetPVRManager().Clients()->EnabledClientAmount() == 1);
 
   CSingleLock lock(m_critSection);
 
   CPVRChannelNumber currentChannelNumber;
-  for (PVR_CHANNEL_GROUP_SORTED_MEMBERS::iterator it = m_sortedMembers.begin(); it != m_sortedMembers.end(); ++it)
+  CPVRChannelNumber currentClientChannelNumber;
+  for (auto& sortedMember : m_sortedMembers)
   {
-    if ((*it).channel->IsHidden())
+    currentClientChannelNumber = sortedMember.clientChannelNumber;
+
+    if (sortedMember.channel->IsHidden())
     {
       currentChannelNumber = CPVRChannelNumber(0, 0);
     }
-    else if (bUseBackendChannelNumbers)
-    {
-      currentChannelNumber = (*it).channel->ClientChannelNumber();
-    }
     else
     {
       if (IsInternalGroup())
+      {
         currentChannelNumber = CPVRChannelNumber(++iChannelNumber, 0);
+      }
       else
-        currentChannelNumber = m_allChannelsGroup->GetChannelNumber((*it).channel);
+      {
+        currentChannelNumber = m_allChannelsGroup->GetChannelNumber(sortedMember.channel);
+
+        if (!sortedMember.clientChannelNumber.IsValid())
+          currentClientChannelNumber = m_allChannelsGroup->GetClientChannelNumber(sortedMember.channel);
+      }
     }
 
-    if ((*it).channelNumber != currentChannelNumber)
+    if (sortedMember.channelNumber != currentChannelNumber || sortedMember.clientChannelNumber != currentClientChannelNumber)
     {
       bReturn = true;
       m_bChanged = true;
-      (*it).channelNumber = currentChannelNumber;
-    }
+      sortedMember.channelNumber = currentChannelNumber;
+      sortedMember.clientChannelNumber = currentClientChannelNumber;
 
-    //! @todo This is a quick fix for v18. Whole channel number handling should be reworked - code is imo unmaintainable.
-    if (IsInternalGroup())
-      (*it).channel->SetChannelNumber((*it).channelNumber);
+      auto& unsortedMember = GetByUniqueID(sortedMember.channel->StorageId());
+      unsortedMember.channelNumber = sortedMember.channelNumber;
+      unsortedMember.clientChannelNumber = sortedMember.clientChannelNumber;
+    }
   }
 
-  SortByChannelNumber();
+  Sort();
+
   return bReturn;
 }
 
@@ -782,7 +816,8 @@ void CPVRChannelGroup::OnSettingChanged(std::shared_ptr<const CSetting> setting)
   {
     const std::shared_ptr<CSettings> settings = CServiceBroker::GetSettingsComponent()->GetSettings();
     bool bUsingBackendChannelOrder   = settings->GetBool(CSettings::SETTING_PVRMANAGER_BACKENDCHANNELORDER);
-    bool bUsingBackendChannelNumbers = settings->GetBool(CSettings::SETTING_PVRMANAGER_USEBACKENDCHANNELNUMBERS);
+    bool bUsingBackendChannelNumbers = settings->GetBool(CSettings::SETTING_PVRMANAGER_USEBACKENDCHANNELNUMBERS) &&
+                                       CServiceBroker::GetPVRManager().Clients()->EnabledClientAmount() == 1;
 
     CSingleLock lock(m_critSection);
 
@@ -801,8 +836,20 @@ void CPVRChannelGroup::OnSettingChanged(std::shared_ptr<const CSetting> setting)
       if (bChannelOrderChanged)
         UpdateClientPriorities();
 
-      SortAndRenumber();
+      bool bRenumbered = SortAndRenumber();
       Persist();
+
+      if (m_bIsSelectedGroup)
+      {
+        for (const auto& member : GetMembers())
+        {
+          member.channel->SetClientOrder(member.iOrder);
+          member.channel->SetChannelNumber(m_bUsingBackendChannelNumbers ? member.clientChannelNumber : member.channelNumber);
+          member.channel->SetClientChannelNumber(member.clientChannelNumber);
+        }
+      }
+
+      m_events.Publish(bRenumbered ? PVREvent::ChannelGroupInvalidated : PVREvent::ChannelGroup);
     }
   }
 }
@@ -1001,7 +1048,9 @@ bool CPVRChannelGroup::UpdateChannel(const std::pair<int, int>& storageId,
   /* set new values in the channel tag */
   if (bHidden)
   {
-    SortByChannelNumber(); // or previous changes will be overwritten
+    // sort or previous changes will be overwritten
+    Sort();
+
     RemoveFromGroup(member.channel);
   }
   else
diff --git a/xbmc/pvr/channels/PVRChannelGroup.h b/xbmc/pvr/channels/PVRChannelGroup.h
index 5c3acee37527..653a4fba355b 100644
--- a/xbmc/pvr/channels/PVRChannelGroup.h
+++ b/xbmc/pvr/channels/PVRChannelGroup.h
@@ -35,11 +35,16 @@ namespace PVR
   {
     PVRChannelGroupMember() = default;
 
-    PVRChannelGroupMember(const CPVRChannelPtr _channel, const CPVRChannelNumber& _channelNumber, int _iClientPriority, int _iOrder)
-    : channel(_channel), channelNumber(_channelNumber), iClientPriority(_iClientPriority), iOrder(_iOrder) {}
+    PVRChannelGroupMember(const std::shared_ptr<CPVRChannel> _channel, const CPVRChannelNumber& _channelNumber, int _iClientPriority, int _iOrder, const CPVRChannelNumber& _clientChannelNumber)
+      : channel(_channel)
+      , channelNumber(_channelNumber)
+      , clientChannelNumber(_clientChannelNumber)
+      , iClientPriority(_iClientPriority)
+      , iOrder(_iOrder) {}
 
     CPVRChannelPtr channel;
-    CPVRChannelNumber channelNumber; // the number this channel has in the group
+    CPVRChannelNumber channelNumber; // the channel number this channel has in the group
+    CPVRChannelNumber clientChannelNumber; // the client channel number this channel has in the group
     int iClientPriority = 0;
     int iOrder = 0; // The value denoting the order of this member in the group
   };
@@ -143,9 +148,10 @@ namespace PVR
      * @param channelNumber The channel number of the channel to add. Use empty channel number to add it at the end.
      * @param iOrder The value denoting the order of this member in the group, 0 if unknown and needs to be generated
      * @param bUseBackendChannelNumbers True, if channelNumber contains a backend channel number.
+     * @param clientChannelNumber The client channel number of the channel to add. (optional)
      * @return True if the channel was added, false otherwise.
      */
-    virtual bool AddToGroup(const CPVRChannelPtr& channel, const CPVRChannelNumber& channelNumber, int iOrder, bool bUseBackendChannelNumbers);
+    virtual bool AddToGroup(const std::shared_ptr<CPVRChannel>& channel, const CPVRChannelNumber& channelNumber, int iOrder, bool bUseBackendChannelNumbers, const CPVRChannelNumber& clientChannelNumber = {});
 
     /*!
      * @brief Change the name of this group.
@@ -242,6 +248,11 @@ namespace PVR
      */
     //@{
 
+    /*!
+     * @brief Sort the group.
+     */
+    void Sort();
+
     /*!
      * @brief Sort the group and fix up channel numbers.
      * @return True when numbering changed, false otherwise
@@ -273,7 +284,7 @@ namespace PVR
     std::shared_ptr<CPVRChannel> GetLastPlayedChannel(int iCurrentChannel = -1) const;
 
     /*!
-     * @brief Get a channel given it's channel number.
+     * @brief Get a channel given it's active channel number
      * @param channelNumber The channel number.
      * @return The channel or nullptr if it wasn't found.
      */
@@ -286,6 +297,13 @@ namespace PVR
      */
     CPVRChannelNumber GetChannelNumber(const CPVRChannelPtr &channel) const;
 
+    /*!
+     * @brief Get the client channel number in this group of the given channel.
+     * @param channel The channel to get the channel number for.
+     * @return The client channel number in this group.
+     */
+    CPVRChannelNumber GetClientChannelNumber(const std::shared_ptr<CPVRChannel>& channel) const;
+
     /*!
      * @brief Get the next channel in this group.
      * @param channel The current channel.
@@ -322,7 +340,7 @@ namespace PVR
     std::vector<PVRChannelGroupMember> GetMembers(Include eFilter = Include::ALL) const;
 
     /*!
-     * @brief Get the list of channel numbers in a group.
+     * @brief Get the list of active channel numbers in a group.
      * @param channelNumbers The list to store the numbers in.
      */
     void GetChannelNumbers(std::vector<std::string>& channelNumbers) const;
@@ -444,6 +462,17 @@ namespace PVR
      */
     void UpdateClientOrder();
 
+    /*!
+     * @brief For each channel and its corresponding epg channel data update the channel number from the group members
+     */
+    void UpdateChannelNumbers();
+
+    /*!
+     * @brief Update whether or not this group is currently selected
+     * @param isSelectedGroup whether or not this group is the currently selected group.
+     */
+    void SetSelectedGroup(bool isSelectedGroup) { m_bIsSelectedGroup = isSelectedGroup; }
+
   protected:
     /*!
      * @brief Init class
@@ -526,6 +555,7 @@ namespace PVR
     std::vector<int> m_failedClientsForChannels;
     std::vector<int> m_failedClientsForChannelGroupMembers;
     CEventSource<PVREvent> m_events;
+    bool m_bIsSelectedGroup = false; /*!< Whether or not this group is currently selected */
 
   private:
     CDateTime GetEPGDate(EpgDateType epgDateType) const;
diff --git a/xbmc/pvr/channels/PVRChannelGroupInternal.cpp b/xbmc/pvr/channels/PVRChannelGroupInternal.cpp
index 77e1f022ec0c..d20287354f49 100644
--- a/xbmc/pvr/channels/PVRChannelGroupInternal.cpp
+++ b/xbmc/pvr/channels/PVRChannelGroupInternal.cpp
@@ -78,7 +78,7 @@ void CPVRChannelGroupInternal::UpdateChannelPaths(void)
   }
 }
 
-CPVRChannelPtr CPVRChannelGroupInternal::UpdateFromClient(const CPVRChannelPtr& channel, const CPVRChannelNumber& channelNumber, int iOrder)
+std::shared_ptr<CPVRChannel> CPVRChannelGroupInternal::UpdateFromClient(const std::shared_ptr<CPVRChannel>& channel, const CPVRChannelNumber& channelNumber, int iOrder, const CPVRChannelNumber& clientChannelNumber /* = {} */)
 {
   CSingleLock lock(m_critSection);
   const PVRChannelGroupMember& realChannel(GetByUniqueID(channel->StorageId()));
@@ -93,7 +93,7 @@ CPVRChannelPtr CPVRChannelGroupInternal::UpdateFromClient(const CPVRChannelPtr&
     if (iChannelNumber == 0)
       iChannelNumber = static_cast<int>(m_sortedMembers.size()) + 1;
 
-    PVRChannelGroupMember newMember(channel, CPVRChannelNumber(iChannelNumber, channelNumber.GetSubChannelNumber()), 0, iOrder);
+    PVRChannelGroupMember newMember(channel, CPVRChannelNumber(iChannelNumber, channelNumber.GetSubChannelNumber()), 0, iOrder, clientChannelNumber);
     channel->UpdatePath(GroupName());
     m_sortedMembers.push_back(newMember);
     m_members.insert(std::make_pair(channel->StorageId(), newMember));
@@ -113,7 +113,7 @@ bool CPVRChannelGroupInternal::Update(std::vector<std::shared_ptr<CPVRChannel>>&
   return UpdateGroupEntries(PVRChannels_tmp, channelsToRemove);
 }
 
-bool CPVRChannelGroupInternal::AddToGroup(const CPVRChannelPtr& channel, const CPVRChannelNumber& channelNumber, int iOrder, bool bUseBackendChannelNumbers)
+bool CPVRChannelGroupInternal::AddToGroup(const std::shared_ptr<CPVRChannel>& channel, const CPVRChannelNumber& channelNumber, int iOrder, bool bUseBackendChannelNumbers, const CPVRChannelNumber& clientChannelNumber)
 {
   bool bReturn(false);
   CSingleLock lock(m_critSection);
@@ -136,8 +136,7 @@ bool CPVRChannelGroupInternal::AddToGroup(const CPVRChannelPtr& channel, const C
   }
 
   unsigned int iChannelNumber = channelNumber.GetChannelNumber();
-  if (!channelNumber.IsValid() ||
-      (!bUseBackendChannelNumbers && (iChannelNumber > m_members.size() - m_iHiddenChannels)))
+  if (!channelNumber.IsValid() || iChannelNumber > (m_members.size() - m_iHiddenChannels))
     iChannelNumber = m_members.size() - m_iHiddenChannels;
 
   if (groupMember.channelNumber.GetChannelNumber() != iChannelNumber)
@@ -242,7 +241,7 @@ bool CPVRChannelGroupInternal::AddAndUpdateChannels(const CPVRChannelGroup &chan
     else
     {
       /* new channel */
-      UpdateFromClient(it->second.channel, bUseBackendChannelNumbers ? it->second.channel->ClientChannelNumber() : CPVRChannelNumber(), it->second.iOrder);
+      UpdateFromClient(it->second.channel, it->second.channelNumber, it->second.iOrder, it->second.clientChannelNumber);
       if (it->second.channel->CreateEPG())
       {
          CLog::LogFC(LOGDEBUG, LOGPVR, "Created EPG for {} channel '{}' from PVR client", IsRadio() ? "radio" : "TV", it->second.channel->ChannelName());
diff --git a/xbmc/pvr/channels/PVRChannelGroupInternal.h b/xbmc/pvr/channels/PVRChannelGroupInternal.h
index 21dbe65f2fa7..fce4294d9e0d 100644
--- a/xbmc/pvr/channels/PVRChannelGroupInternal.h
+++ b/xbmc/pvr/channels/PVRChannelGroupInternal.h
@@ -43,9 +43,10 @@ namespace PVR
      * @param channel The updated channel.
      * @param channelNumber A new channel number for the channel.
      * @param iOrder The value denoting the order of this member in the group, 0 if unknown and needs to be generated
+     * @param clientChannelNumber The client channel number of the channel to add. (optional)
      * @return The new/updated channel.
      */
-    CPVRChannelPtr UpdateFromClient(const CPVRChannelPtr& channel, const CPVRChannelNumber& channelNumber, int iOrder);
+    std::shared_ptr<CPVRChannel> UpdateFromClient(const std::shared_ptr<CPVRChannel>& channel, const CPVRChannelNumber& channelNumber, int iOrder, const CPVRChannelNumber& clientChannelNumber = {});
 
     /*!
      * @see CPVRChannelGroup::IsGroupMember
@@ -55,7 +56,7 @@ namespace PVR
     /*!
      * @see CPVRChannelGroup::AddToGroup
      */
-    bool AddToGroup(const CPVRChannelPtr& channel, const CPVRChannelNumber& channelNumber, int iOrder, bool bUseBackendChannelNumbers) override;
+    bool AddToGroup(const std::shared_ptr<CPVRChannel>& channel, const CPVRChannelNumber& channelNumber, int iOrder, bool bUseBackendChannelNumbers, const CPVRChannelNumber& clientChannelNumber = {}) override;
 
     /*!
      * @see CPVRChannelGroup::RemoveFromGroup
diff --git a/xbmc/pvr/channels/PVRChannelGroups.cpp b/xbmc/pvr/channels/PVRChannelGroups.cpp
index 3fda13beb02b..b492dfe3a62a 100644
--- a/xbmc/pvr/channels/PVRChannelGroups.cpp
+++ b/xbmc/pvr/channels/PVRChannelGroups.cpp
@@ -468,11 +468,15 @@ CPVRChannelGroupPtr CPVRChannelGroups::GetSelectedGroup(void) const
   return m_selectedGroup;
 }
 
-void CPVRChannelGroups::SetSelectedGroup(const CPVRChannelGroupPtr &group)
+void CPVRChannelGroups::SetSelectedGroup(const std::shared_ptr<CPVRChannelGroup>& selectedGroup)
 {
   CSingleLock lock(m_critSection);
-  m_selectedGroup = group;
+  m_selectedGroup = selectedGroup;
   m_selectedGroup->UpdateClientOrder();
+  m_selectedGroup->UpdateChannelNumbers();
+
+  for (auto& group : m_groups)
+    group->SetSelectedGroup(group == m_selectedGroup);
 }
 
 bool CPVRChannelGroups::AddGroup(const std::string &strName)
diff --git a/xbmc/pvr/channels/PVRChannelGroups.h b/xbmc/pvr/channels/PVRChannelGroups.h
index 0f2b88a238eb..5828f155289e 100644
--- a/xbmc/pvr/channels/PVRChannelGroups.h
+++ b/xbmc/pvr/channels/PVRChannelGroups.h
@@ -153,9 +153,9 @@ namespace PVR
 
     /*!
      * @brief Change the selected group.
-     * @param group The group to select.
+     * @param selectedGroup The group to select.
      */
-    void SetSelectedGroup(const CPVRChannelGroupPtr &group);
+    void SetSelectedGroup(const std::shared_ptr<CPVRChannelGroup>& selectedGroup);
 
     /*!
      * @brief Add a group to this container.

From d098a4f67553e5b72988ac86e2464e95ab15bf2e Mon Sep 17 00:00:00 2001
From: phunkyfish <phunkyfish@gmail.com>
Date: Mon, 23 Sep 2019 21:29:11 +0100
Subject: [PATCH 2/2] [pvr] support numbering all groups from one locally

---
 .../resources/strings.po                      | 17 +++++++++++----
 system/settings/settings.xml                  |  9 ++++++++
 xbmc/pvr/channels/PVRChannelGroup.cpp         | 21 +++++++++++++++----
 xbmc/pvr/channels/PVRChannelGroup.h           |  1 +
 xbmc/settings/Settings.cpp                    |  1 +
 xbmc/settings/Settings.h                      |  1 +
 6 files changed, 42 insertions(+), 8 deletions(-)

diff --git a/addons/resource.language.en_gb/resources/strings.po b/addons/resource.language.en_gb/resources/strings.po
index 3bf06af49f4c..0122938de319 100644
--- a/addons/resource.language.en_gb/resources/strings.po
+++ b/addons/resource.language.en_gb/resources/strings.po
@@ -10971,7 +10971,13 @@ msgctxt "#19315"
 msgid "Backend order"
 msgstr ""
 
-#empty strings from id 19316 to 19498
+#. pvr settings "Start all group channel numbers from 1" setting label
+#: system/settings/settings.xml
+msgctxt "#19316"
+msgid "Start group channel numbers from 1"
+msgstr ""
+
+#empty strings from id 19317 to 19498
 
 #. label for epg genre value
 #: xbmc/pvr/epg/Epg.cpp
@@ -18550,12 +18556,12 @@ msgstr ""
 
 #: system/settings/settings.xml
 msgctxt "#36205"
-msgid "Sort the channels by channel number from the backend, but use own numbering for channels."
+msgid "Sort the channels by channel number from the backend, but use local numbering for channels."
 msgstr ""
 
 #: system/settings/settings.xml
 msgctxt "#36206"
-msgid "Use the channel numbering from the backend, instead of configuring them manually in the channel manager. Only works with one enabled PVR add-on!"
+msgid "Use the channel numbering from the backend. Only works with one enabled PVR add-on!"
 msgstr ""
 
 #: system/settings/settings.xml
@@ -19092,7 +19098,10 @@ msgctxt "#36305"
 msgid "This category contains the settings for how picture file lists are handled."
 msgstr ""
 
-#empty string with id 36306
+#: system/settings/settings.xml
+msgctxt "#36306"
+msgid "If not using backend channel numbers then start all groups channel numbers from 1."
+msgstr ""
 
 #. Description of setting with label #13360 "Automatically generate thumbnails"
 #: system/settings/settings.xml
diff --git a/system/settings/settings.xml b/system/settings/settings.xml
index 27f896d8896e..ec98e18efe95 100755
--- a/system/settings/settings.xml
+++ b/system/settings/settings.xml
@@ -1195,6 +1195,15 @@
           <default>false</default>
           <control type="toggle" />
         </setting>
+        <setting id="pvrmanager.startgroupchannelnumbersfromone" type="boolean" parent="pvrmanager.usebackendchannelnumbers" label="19316" help="36306">
+          <level>2</level>
+          <dependencies>
+            <dependency type="visible" on="property" name="pvrsettingvisible" setting="pvrmanager.usebackendchannelnumbers" operator="is">true</dependency>
+            <dependency type="enable" setting="pvrmanager.usebackendchannelnumbers" operator="is">false</dependency>
+          </dependencies>
+          <default>false</default>
+          <control type="toggle" />
+        </setting>
         <setting id="pvrmanager.clientpriorities" type="action" label="19240" help="36210">
           <level>2</level>
           <dependencies>
diff --git a/xbmc/pvr/channels/PVRChannelGroup.cpp b/xbmc/pvr/channels/PVRChannelGroup.cpp
index f93704886a69..291b153d5f85 100644
--- a/xbmc/pvr/channels/PVRChannelGroup.cpp
+++ b/xbmc/pvr/channels/PVRChannelGroup.cpp
@@ -80,7 +80,8 @@ void CPVRChannelGroup::OnInit(void)
 {
   CServiceBroker::GetSettingsComponent()->GetSettings()->RegisterCallback(this, {
     CSettings::SETTING_PVRMANAGER_BACKENDCHANNELORDER,
-    CSettings::SETTING_PVRMANAGER_USEBACKENDCHANNELNUMBERS
+    CSettings::SETTING_PVRMANAGER_USEBACKENDCHANNELNUMBERS,
+    CSettings::SETTING_PVRMANAGER_STARTGROUPCHANNELNUMBERSFROMONE
   });
 }
 
@@ -93,6 +94,7 @@ bool CPVRChannelGroup::Load(std::vector<std::shared_ptr<CPVRChannel>>& channelsT
   m_bUsingBackendChannelOrder   = settings->GetBool(CSettings::SETTING_PVRMANAGER_BACKENDCHANNELORDER);
   m_bUsingBackendChannelNumbers = settings->GetBool(CSettings::SETTING_PVRMANAGER_USEBACKENDCHANNELNUMBERS) &&
                                   CServiceBroker::GetPVRManager().Clients()->EnabledClientAmount() == 1;
+  m_bStartGroupChannelNumbersFromOne = settings->GetBool(CSettings::SETTING_PVRMANAGER_STARTGROUPCHANNELNUMBERSFROMONE) && !m_bUsingBackendChannelNumbers;
 
   int iChannelCount = m_iGroupId > 0 ? LoadFromDb() : 0;
   CLog::LogFC(LOGDEBUG, LOGPVR, "%d channels loaded from the database for group '%s'", iChannelCount, GroupName().c_str());
@@ -725,6 +727,10 @@ bool CPVRChannelGroup::Renumber(void)
 
   bool bReturn(false);
   unsigned int iChannelNumber(0);
+  bool bUsingBackendChannelNumbers(CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_PVRMANAGER_USEBACKENDCHANNELNUMBERS) &&
+                                 CServiceBroker::GetPVRManager().Clients()->EnabledClientAmount() == 1);
+  bool bStartGroupChannelNumbersFromOne(CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_PVRMANAGER_STARTGROUPCHANNELNUMBERSFROMONE) &&
+                                        !bUsingBackendChannelNumbers);
 
   CSingleLock lock(m_critSection);
 
@@ -746,7 +752,10 @@ bool CPVRChannelGroup::Renumber(void)
       }
       else
       {
-        currentChannelNumber = m_allChannelsGroup->GetChannelNumber(sortedMember.channel);
+        if (bStartGroupChannelNumbersFromOne)
+          currentChannelNumber = CPVRChannelNumber(++iChannelNumber, 0);
+        else
+          currentChannelNumber = m_allChannelsGroup->GetChannelNumber(sortedMember.channel);
 
         if (!sortedMember.clientChannelNumber.IsValid())
           currentClientChannelNumber = m_allChannelsGroup->GetClientChannelNumber(sortedMember.channel);
@@ -812,23 +821,27 @@ void CPVRChannelGroup::OnSettingChanged(std::shared_ptr<const CSetting> setting)
   }
 
   const std::string &settingId = setting->GetId();
-  if (settingId == CSettings::SETTING_PVRMANAGER_BACKENDCHANNELORDER || settingId == CSettings::SETTING_PVRMANAGER_USEBACKENDCHANNELNUMBERS)
+  if (settingId == CSettings::SETTING_PVRMANAGER_BACKENDCHANNELORDER || settingId == CSettings::SETTING_PVRMANAGER_USEBACKENDCHANNELNUMBERS ||
+      settingId == CSettings::SETTING_PVRMANAGER_STARTGROUPCHANNELNUMBERSFROMONE)
   {
     const std::shared_ptr<CSettings> settings = CServiceBroker::GetSettingsComponent()->GetSettings();
     bool bUsingBackendChannelOrder   = settings->GetBool(CSettings::SETTING_PVRMANAGER_BACKENDCHANNELORDER);
     bool bUsingBackendChannelNumbers = settings->GetBool(CSettings::SETTING_PVRMANAGER_USEBACKENDCHANNELNUMBERS) &&
                                        CServiceBroker::GetPVRManager().Clients()->EnabledClientAmount() == 1;
+    bool bStartGroupChannelNumbersFromOne = settings->GetBool(CSettings::SETTING_PVRMANAGER_STARTGROUPCHANNELNUMBERSFROMONE) && !bUsingBackendChannelNumbers;
 
     CSingleLock lock(m_critSection);
 
     bool bChannelNumbersChanged = m_bUsingBackendChannelNumbers != bUsingBackendChannelNumbers;
     bool bChannelOrderChanged = m_bUsingBackendChannelOrder != bUsingBackendChannelOrder;
+    bool bGroupChannelNumbersFromOneChanged = m_bStartGroupChannelNumbersFromOne != bStartGroupChannelNumbersFromOne;
 
     m_bUsingBackendChannelOrder = bUsingBackendChannelOrder;
     m_bUsingBackendChannelNumbers = bUsingBackendChannelNumbers;
+    m_bStartGroupChannelNumbersFromOne = bStartGroupChannelNumbersFromOne;
 
     /* check whether this channel group has to be renumbered */
-    if (bChannelOrderChanged || bChannelNumbersChanged)
+    if (bChannelOrderChanged || bChannelNumbersChanged || bGroupChannelNumbersFromOneChanged)
     {
       CLog::LogFC(LOGDEBUG, LOGPVR, "Renumbering channel group '%s' to use the backend channel order and/or numbers",
                   GroupName().c_str());
diff --git a/xbmc/pvr/channels/PVRChannelGroup.h b/xbmc/pvr/channels/PVRChannelGroup.h
index 653a4fba355b..7cdf96d8343c 100644
--- a/xbmc/pvr/channels/PVRChannelGroup.h
+++ b/xbmc/pvr/channels/PVRChannelGroup.h
@@ -556,6 +556,7 @@ namespace PVR
     std::vector<int> m_failedClientsForChannelGroupMembers;
     CEventSource<PVREvent> m_events;
     bool m_bIsSelectedGroup = false; /*!< Whether or not this group is currently selected */
+    bool m_bStartGroupChannelNumbersFromOne = false; /*!< true if we start group channel numbers from one when not using backend channel numbers, false otherwise */
 
   private:
     CDateTime GetEPGDate(EpgDateType epgDateType) const;
diff --git a/xbmc/settings/Settings.cpp b/xbmc/settings/Settings.cpp
index 2ef97ac9cba2..92d67598f3b0 100644
--- a/xbmc/settings/Settings.cpp
+++ b/xbmc/settings/Settings.cpp
@@ -184,6 +184,7 @@ const std::string CSettings::SETTING_PVRMANAGER_PRESELECTPLAYINGCHANNEL = "pvrma
 const std::string CSettings::SETTING_PVRMANAGER_SYNCCHANNELGROUPS = "pvrmanager.syncchannelgroups";
 const std::string CSettings::SETTING_PVRMANAGER_BACKENDCHANNELORDER = "pvrmanager.backendchannelorder";
 const std::string CSettings::SETTING_PVRMANAGER_USEBACKENDCHANNELNUMBERS = "pvrmanager.usebackendchannelnumbers";
+const std::string CSettings::SETTING_PVRMANAGER_STARTGROUPCHANNELNUMBERSFROMONE = "pvrmanager.startgroupchannelnumbersfromone";
 const std::string CSettings::SETTING_PVRMANAGER_CLIENTPRIORITIES = "pvrmanager.clientpriorities";
 const std::string CSettings::SETTING_PVRMANAGER_CHANNELMANAGER = "pvrmanager.channelmanager";
 const std::string CSettings::SETTING_PVRMANAGER_GROUPMANAGER = "pvrmanager.groupmanager";
diff --git a/xbmc/settings/Settings.h b/xbmc/settings/Settings.h
index 8f3a172f586e..534edd7e7017 100644
--- a/xbmc/settings/Settings.h
+++ b/xbmc/settings/Settings.h
@@ -150,6 +150,7 @@ class CSettings : public CSettingsBase, public CSettingCreator, public CSettingC
   static const std::string SETTING_PVRMANAGER_SYNCCHANNELGROUPS;
   static const std::string SETTING_PVRMANAGER_BACKENDCHANNELORDER;
   static const std::string SETTING_PVRMANAGER_USEBACKENDCHANNELNUMBERS;
+  static const std::string SETTING_PVRMANAGER_STARTGROUPCHANNELNUMBERSFROMONE;
   static const std::string SETTING_PVRMANAGER_CLIENTPRIORITIES;
   static const std::string SETTING_PVRMANAGER_CHANNELMANAGER;
   static const std::string SETTING_PVRMANAGER_GROUPMANAGER;
