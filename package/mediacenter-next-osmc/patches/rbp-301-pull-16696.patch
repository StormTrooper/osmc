From 554fdb11a1f740be9bbf87faf7b3c188c33ca9b6 Mon Sep 17 00:00:00 2001
From: phunkyfish <phunkyfish@gmail.com>
Date: Wed, 2 Oct 2019 07:53:41 +0100
Subject: [PATCH] [pvr] Update and persist channel group members from client on
 boot if changed

---
 xbmc/interfaces/json-rpc/PVROperations.cpp    |   8 +-
 xbmc/pvr/PVRDatabase.cpp                      |  44 +--
 xbmc/pvr/PVRGUIActions.cpp                    |   6 +-
 xbmc/pvr/PVRGUIChannelIconUpdater.cpp         |  18 +-
 xbmc/pvr/PVRGUIDirectory.cpp                  |   6 +-
 xbmc/pvr/channels/PVRChannelGroup.cpp         | 272 ++++++++++--------
 xbmc/pvr/channels/PVRChannelGroup.h           |  15 +-
 xbmc/pvr/channels/PVRChannelGroupInternal.cpp |  65 +++--
 .../dialogs/GUIDialogPVRChannelManager.cpp    |   6 +-
 xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.cpp  |   4 +-
 xbmc/pvr/dialogs/GUIDialogPVRGroupManager.cpp |  18 +-
 xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.cpp  |  10 +-
 .../pvr/dialogs/GUIDialogPVRTimerSettings.cpp |   4 +-
 xbmc/pvr/windows/GUIWindowPVRGuide.cpp        |   4 +-
 14 files changed, 257 insertions(+), 223 deletions(-)

diff --git a/xbmc/interfaces/json-rpc/PVROperations.cpp b/xbmc/interfaces/json-rpc/PVROperations.cpp
index 9ea1fcb5116a..d960920bb93c 100644
--- a/xbmc/interfaces/json-rpc/PVROperations.cpp
+++ b/xbmc/interfaces/json-rpc/PVROperations.cpp
@@ -114,10 +114,10 @@ JSONRPC_STATUS CPVROperations::GetChannels(const std::string &method, ITransport
     return InvalidParams;
 
   CFileItemList channels;
-  const std::vector<PVRChannelGroupMember> groupMembers = channelGroup->GetMembers(CPVRChannelGroup::Include::ONLY_VISIBLE);
+  const std::vector<std::shared_ptr<PVRChannelGroupMember>> groupMembers = channelGroup->GetMembers(CPVRChannelGroup::Include::ONLY_VISIBLE);
   for (const auto& groupMember : groupMembers)
   {
-    channels.Add(std::make_shared<CFileItem>(groupMember.channel));
+    channels.Add(std::make_shared<CFileItem>(groupMember->channel));
   }
 
   HandleFileItemList("channelid", false, "channels", channels, parameterObject, result, true);
@@ -284,10 +284,10 @@ void CPVROperations::FillChannelGroupDetails(const std::shared_ptr<CPVRChannelGr
   else
   {
     CFileItemList channels;
-    const std::vector<PVRChannelGroupMember> groupMembers = channelGroup->GetMembers(CPVRChannelGroup::Include::ONLY_VISIBLE);
+    const std::vector<std::shared_ptr<PVRChannelGroupMember>> groupMembers = channelGroup->GetMembers(CPVRChannelGroup::Include::ONLY_VISIBLE);
     for (const auto& groupMember : groupMembers)
     {
-      channels.Add(std::make_shared<CFileItem>(groupMember.channel));
+      channels.Add(std::make_shared<CFileItem>(groupMember->channel));
     }
 
     object["channels"] = CVariant(CVariant::VariantTypeArray);
diff --git a/xbmc/pvr/PVRDatabase.cpp b/xbmc/pvr/PVRDatabase.cpp
index 59f8a09af191..13ecc74eb6a1 100644
--- a/xbmc/pvr/PVRDatabase.cpp
+++ b/xbmc/pvr/PVRDatabase.cpp
@@ -342,12 +342,13 @@ int CPVRDatabase::Get(CPVRChannelGroup& results, bool bCompressDB)
         channel->m_bHasArchive             = m_pDS->fv("bHasArchive").get_asBool();
         channel->UpdateEncryptionName();
 
-        PVRChannelGroupMember newMember(channel,
-                                        CPVRChannelNumber(static_cast<unsigned int>(m_pDS->fv("iChannelNumber").get_asInt()),
-                                                          static_cast<unsigned int>(m_pDS->fv("iSubChannelNumber").get_asInt())),
-                                        0, static_cast<int>(m_pDS->fv("iOrder").get_asInt()),
-                                        CPVRChannelNumber(static_cast<unsigned int>(m_pDS->fv("iClientChannelNumber").get_asInt()),
-                                                          static_cast<unsigned int>(m_pDS->fv("iClientSubChannelNumber").get_asInt())));
+        auto newMember = std::make_shared<PVRChannelGroupMember>(channel,
+                                                                 CPVRChannelNumber(static_cast<unsigned int>(m_pDS->fv("iChannelNumber").get_asInt()),
+                                                                                   static_cast<unsigned int>(m_pDS->fv("iSubChannelNumber").get_asInt())),
+                                                                 0, static_cast<int>(m_pDS->fv("iOrder").get_asInt()),
+                                                                 CPVRChannelNumber(static_cast<unsigned int>(m_pDS->fv("iClientChannelNumber").get_asInt()),
+                                                                                   static_cast<unsigned int>(m_pDS->fv("iClientSubChannelNumber").get_asInt()))
+        );
         results.m_sortedMembers.emplace_back(newMember);
         results.m_members.insert(std::make_pair(channel->StorageId(), newMember));
 
@@ -638,9 +639,9 @@ int CPVRDatabase::Get(CPVRChannelGroup& group, const CPVRChannelGroup& allGroup)
 
     // create a map to speedup data lookup
     std::map<int, std::shared_ptr<CPVRChannel>> allChannels;
-    for (const auto& groupMember : allGroup.GetMembers())
+    for (const auto& groupMember : allGroup.m_sortedMembers)
     {
-      allChannels.insert(std::make_pair(groupMember.channel->ChannelID(), groupMember.channel));
+      allChannels.insert(std::make_pair(groupMember->channel->ChannelID(), groupMember->channel));
     }
 
     try
@@ -652,12 +653,13 @@ int CPVRDatabase::Get(CPVRChannelGroup& group, const CPVRChannelGroup& allGroup)
 
         if (channel != allChannels.end())
         {
-          PVRChannelGroupMember newMember(channel->second,
-                                          CPVRChannelNumber(static_cast<unsigned int>(m_pDS->fv("iChannelNumber").get_asInt()),
-                                                            static_cast<unsigned int>(m_pDS->fv("iSubChannelNumber").get_asInt())),
-                                          0, static_cast<int>(m_pDS->fv("iOrder").get_asInt()),
-                                          CPVRChannelNumber(static_cast<unsigned int>(m_pDS->fv("iClientChannelNumber").get_asInt()),
-                                                            static_cast<unsigned int>(m_pDS->fv("iClientSubChannelNumber").get_asInt())));
+          auto newMember = std::make_shared<PVRChannelGroupMember>(channel->second,
+                                                                   CPVRChannelNumber(static_cast<unsigned int>(m_pDS->fv("iChannelNumber").get_asInt()),
+                                                                                     static_cast<unsigned int>(m_pDS->fv("iSubChannelNumber").get_asInt())),
+                                                                   0, static_cast<int>(m_pDS->fv("iOrder").get_asInt()),
+                                                                   CPVRChannelNumber(static_cast<unsigned int>(m_pDS->fv("iClientChannelNumber").get_asInt()),
+                                                                                     static_cast<unsigned int>(m_pDS->fv("iClientSubChannelNumber").get_asInt())));
+
           group.m_sortedMembers.emplace_back(newMember);
           group.m_members.insert(std::make_pair(channel->second->StorageId(), newMember));
           ++iReturn;
@@ -698,12 +700,12 @@ bool CPVRDatabase::PersistChannels(CPVRChannelGroup& group)
   std::shared_ptr<CPVRChannel> channel;
   for (const auto& groupMember : group.m_members)
   {
-    channel = groupMember.second.channel;
+    channel = groupMember.second->channel;
     if (channel->IsChanged() || channel->IsNew())
     {
       if (Persist(*channel, false))
       {
-        groupMember.second.channel->Persisted();
+        groupMember.second->channel->Persisted();
         bReturn = true;
       }
     }
@@ -717,7 +719,7 @@ bool CPVRDatabase::PersistChannels(CPVRChannelGroup& group)
     std::string strValue;
     for (const auto& groupMember : group.m_members)
     {
-      channel = groupMember.second.channel;
+      channel = groupMember.second->channel;
       strQuery = PrepareSQL("iUniqueId = %u AND iClientId = %u", channel->UniqueID(), channel->ClientID());
       strValue = GetSingleValue("channels", "idChannel", strQuery);
       if (!strValue.empty() && StringUtils::IsInteger(strValue))
@@ -740,8 +742,8 @@ bool CPVRDatabase::PersistGroupMembers(const CPVRChannelGroup& group)
     for (const auto& groupMember : group.m_sortedMembers)
     {
       const std::string strWhereClause = PrepareSQL("idChannel = %u AND idGroup = %u AND iChannelNumber = %u AND iSubChannelNumber = %u AND iOrder = %u AND iClientChannelNumber = %u AND iClientSubChannelNumber = %u",
-          groupMember.channel->ChannelID(), group.GroupID(), groupMember.channelNumber.GetChannelNumber(), groupMember.channelNumber.GetSubChannelNumber(), groupMember.iOrder,
-          groupMember.clientChannelNumber.GetChannelNumber(), groupMember.clientChannelNumber.GetSubChannelNumber());
+          groupMember->channel->ChannelID(), group.GroupID(), groupMember->channelNumber.GetChannelNumber(), groupMember->channelNumber.GetSubChannelNumber(), groupMember->iOrder,
+          groupMember->clientChannelNumber.GetChannelNumber(), groupMember->clientChannelNumber.GetSubChannelNumber());
 
       const std::string strValue = GetSingleValue("map_channelgroups_channels", "idChannel", strWhereClause);
       if (strValue.empty())
@@ -749,8 +751,8 @@ bool CPVRDatabase::PersistGroupMembers(const CPVRChannelGroup& group)
         strQuery = PrepareSQL("REPLACE INTO map_channelgroups_channels ("
             "idGroup, idChannel, iChannelNumber, iSubChannelNumber, iOrder, iClientChannelNumber, iClientSubChannelNumber) "
             "VALUES (%i, %i, %i, %i, %i, %i, %i);",
-            group.GroupID(), groupMember.channel->ChannelID(), groupMember.channelNumber.GetChannelNumber(), groupMember.channelNumber.GetSubChannelNumber(), groupMember.iOrder,
-            groupMember.clientChannelNumber.GetChannelNumber(), groupMember.clientChannelNumber.GetSubChannelNumber());
+            group.GroupID(), groupMember->channel->ChannelID(), groupMember->channelNumber.GetChannelNumber(), groupMember->channelNumber.GetSubChannelNumber(), groupMember->iOrder,
+            groupMember->clientChannelNumber.GetChannelNumber(), groupMember->clientChannelNumber.GetSubChannelNumber());
         QueueInsertQuery(strQuery);
       }
     }
diff --git a/xbmc/pvr/PVRGUIActions.cpp b/xbmc/pvr/PVRGUIActions.cpp
index 653e8a73123d..70f4b014b37e 100644
--- a/xbmc/pvr/PVRGUIActions.cpp
+++ b/xbmc/pvr/PVRGUIActions.cpp
@@ -1404,10 +1404,10 @@ namespace PVR
       if (channelGroup)
       {
         // try to start playback of first channel in this group
-        std::vector<PVRChannelGroupMember> groupMembers(channelGroup->GetMembers());
+        const std::vector<std::shared_ptr<PVRChannelGroupMember>> groupMembers = channelGroup->GetMembers();
         if (!groupMembers.empty())
         {
-          return SwitchToChannel(CFileItemPtr(new CFileItem((*groupMembers.begin()).channel)), true);
+          return SwitchToChannel(std::make_shared<CFileItem>((*groupMembers.begin())->channel), true);
         }
       }
     }
@@ -1445,7 +1445,7 @@ namespace PVR
       if (channels.empty())
         return false;
 
-      channel = channels.front().channel;
+      channel = channels.front()->channel;
     }
 
     CLog::Log(LOGNOTICE, "PVR is starting playback of channel '%s'", channel->ChannelName().c_str());
diff --git a/xbmc/pvr/PVRGUIChannelIconUpdater.cpp b/xbmc/pvr/PVRGUIChannelIconUpdater.cpp
index 9b4a32712660..533a7e97f3be 100644
--- a/xbmc/pvr/PVRGUIChannelIconUpdater.cpp
+++ b/xbmc/pvr/PVRGUIChannelIconUpdater.cpp
@@ -58,23 +58,23 @@ void CPVRGUIChannelIconUpdater::SearchAndUpdateMissingChannelIcons() const
 
   for (const auto& group : m_groups)
   {
-    const std::vector<PVRChannelGroupMember> members = group->GetMembers();
+    const std::vector<std::shared_ptr<PVRChannelGroupMember>> members = group->GetMembers();
     int channelIndex = 0;
     for (const auto& member : members)
     {
-      progressHandler->UpdateProgress(member.channel->ChannelName(), channelIndex++, members.size());
+      progressHandler->UpdateProgress(member->channel->ChannelName(), channelIndex++, members.size());
 
       // skip if an icon is already set and exists
-      if (XFILE::CFile::Exists(member.channel->IconPath()))
+      if (XFILE::CFile::Exists(member->channel->IconPath()))
         continue;
 
       // reset icon before searching for a new one
-      member.channel->SetIconPath("");
+      member->channel->SetIconPath("");
 
-      const std::string strChannelUid = StringUtils::Format("%08d", member.channel->UniqueID());
-      std::string strLegalClientChannelName = CUtil::MakeLegalFileName(member.channel->ClientChannelName());
+      const std::string strChannelUid = StringUtils::Format("%08d", member->channel->UniqueID());
+      std::string strLegalClientChannelName = CUtil::MakeLegalFileName(member->channel->ClientChannelName());
       StringUtils::ToLower(strLegalClientChannelName);
-      std::string strLegalChannelName = CUtil::MakeLegalFileName(member.channel->ChannelName());
+      std::string strLegalChannelName = CUtil::MakeLegalFileName(member->channel->ChannelName());
       StringUtils::ToLower(strLegalChannelName);
 
       std::map<std::string, std::string>::iterator itItem;
@@ -82,11 +82,11 @@ void CPVRGUIChannelIconUpdater::SearchAndUpdateMissingChannelIcons() const
           (itItem = fileItemMap.find(strLegalChannelName)) != fileItemMap.end() ||
           (itItem = fileItemMap.find(strChannelUid)) != fileItemMap.end())
       {
-        member.channel->SetIconPath(itItem->second, CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->m_bPVRAutoScanIconsUserSet);
+        member->channel->SetIconPath(itItem->second, CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->m_bPVRAutoScanIconsUserSet);
       }
 
       if (m_bUpdateDb)
-        member.channel->Persist();
+        member->channel->Persist();
     }
   }
 
diff --git a/xbmc/pvr/PVRGUIDirectory.cpp b/xbmc/pvr/PVRGUIDirectory.cpp
index 724927204fe0..17fcb01377a5 100644
--- a/xbmc/pvr/PVRGUIDirectory.cpp
+++ b/xbmc/pvr/PVRGUIDirectory.cpp
@@ -370,13 +370,13 @@ bool CPVRGUIDirectory::GetChannelsDirectory(CFileItemList& results) const
 
       if (group)
       {
-        const std::vector<PVRChannelGroupMember> groupMembers = group->GetMembers();
+        const std::vector<std::shared_ptr<PVRChannelGroupMember>> groupMembers = group->GetMembers();
         for (const auto& groupMember : groupMembers)
         {
-          if (bShowHiddenChannels != groupMember.channel->IsHidden())
+          if (bShowHiddenChannels != groupMember->channel->IsHidden())
             continue;
 
-          results.Add(std::make_shared<CFileItem>(groupMember.channel));
+          results.Add(std::make_shared<CFileItem>(groupMember->channel));
         }
       }
       else
diff --git a/xbmc/pvr/channels/PVRChannelGroup.cpp b/xbmc/pvr/channels/PVRChannelGroup.cpp
index 248ba5293fd5..1a8af05f4f09 100644
--- a/xbmc/pvr/channels/PVRChannelGroup.cpp
+++ b/xbmc/pvr/channels/PVRChannelGroup.cpp
@@ -74,7 +74,7 @@ bool CPVRChannelGroup::operator!=(const CPVRChannelGroup& right) const
   return !(*this == right);
 }
 
-PVRChannelGroupMember CPVRChannelGroup::EmptyMember;
+std::shared_ptr<PVRChannelGroupMember> CPVRChannelGroup::EmptyMember = std::make_shared<PVRChannelGroupMember>();
 
 void CPVRChannelGroup::OnInit(void)
 {
@@ -162,16 +162,15 @@ bool CPVRChannelGroup::SetChannelNumber(const std::shared_ptr<CPVRChannel>& chan
   bool bReturn(false);
   CSingleLock lock(m_critSection);
 
-  for (PVR_CHANNEL_GROUP_SORTED_MEMBERS::iterator it = m_sortedMembers.begin(); it != m_sortedMembers.end(); ++it)
+  for (auto& member : m_sortedMembers)
   {
-    PVRChannelGroupMember& member(*it);
-    if (*member.channel == *channel)
+    if (*member->channel == *channel)
     {
-      if (member.channelNumber  != channelNumber)
+      if (member->channelNumber != channelNumber)
       {
         m_bChanged = true;
         bReturn = true;
-        member.channelNumber = channelNumber;
+        member->channelNumber = channelNumber;
       }
       break;
     }
@@ -184,24 +183,24 @@ bool CPVRChannelGroup::SetChannelNumber(const std::shared_ptr<CPVRChannel>& chan
 
 struct sortByClientChannelNumber
 {
-  bool operator()(const PVRChannelGroupMember& channel1, const PVRChannelGroupMember& channel2) const
+  bool operator()(const std::shared_ptr<PVRChannelGroupMember>& channel1, const std::shared_ptr<PVRChannelGroupMember>& channel2) const
   {
-    if (channel1.iClientPriority == channel2.iClientPriority)
+    if (channel1->iClientPriority == channel2->iClientPriority)
     {
-      if (channel1.clientChannelNumber == channel2.clientChannelNumber)
-        return channel1.channel->ChannelName() < channel2.channel->ChannelName();
+      if (channel1->clientChannelNumber == channel2->clientChannelNumber)
+        return channel1->channel->ChannelName() < channel2->channel->ChannelName();
 
-      return channel1.clientChannelNumber < channel2.clientChannelNumber;
+      return channel1->clientChannelNumber < channel2->clientChannelNumber;
     }
-    return channel1.iClientPriority > channel2.iClientPriority;
+    return channel1->iClientPriority > channel2->iClientPriority;
   }
 };
 
 struct sortByChannelNumber
 {
-  bool operator()(const PVRChannelGroupMember& channel1, const PVRChannelGroupMember& channel2) const
+  bool operator()(const std::shared_ptr<PVRChannelGroupMember>& channel1, const std::shared_ptr<PVRChannelGroupMember>& channel2) const
   {
-    return channel1.channelNumber < channel2.channelNumber;
+    return channel1->channelNumber < channel2->channelNumber;
   }
 };
 
@@ -253,7 +252,7 @@ bool CPVRChannelGroup::UpdateClientPriorities()
     if (m_bUsingBackendChannelOrder)
     {
       std::shared_ptr<CPVRClient> client;
-      if (!clients->GetCreatedClient(member.channel->ClientID(), client))
+      if (!clients->GetCreatedClient(member->channel->ClientID(), client))
         continue;
 
       iNewPriority = client->GetPriority();
@@ -263,22 +262,22 @@ bool CPVRChannelGroup::UpdateClientPriorities()
       iNewPriority = 0;
     }
 
-    bChanged |= (member.iClientPriority != iNewPriority);
-    member.iClientPriority = iNewPriority;
+    bChanged |= (member->iClientPriority != iNewPriority);
+    member->iClientPriority = iNewPriority;
   }
 
   return bChanged;
 }
 
 /********** getters **********/
-PVRChannelGroupMember& CPVRChannelGroup::GetByUniqueID(const std::pair<int, int>& id)
+std::shared_ptr<PVRChannelGroupMember>& CPVRChannelGroup::GetByUniqueID(const std::pair<int, int>& id)
 {
   CSingleLock lock(m_critSection);
   const auto it = m_members.find(id);
   return it != m_members.end() ? it->second : CPVRChannelGroup::EmptyMember;
 }
 
-const PVRChannelGroupMember& CPVRChannelGroup::GetByUniqueID(const std::pair<int, int>& id) const
+const std::shared_ptr<PVRChannelGroupMember>& CPVRChannelGroup::GetByUniqueID(const std::pair<int, int>& id) const
 {
   CSingleLock lock(m_critSection);
   const auto it = m_members.find(id);
@@ -287,35 +286,33 @@ const PVRChannelGroupMember& CPVRChannelGroup::GetByUniqueID(const std::pair<int
 
 std::shared_ptr<CPVRChannel> CPVRChannelGroup::GetByUniqueID(int iUniqueChannelId, int iClientID) const
 {
-  return GetByUniqueID(std::make_pair(iClientID, iUniqueChannelId)).channel;
+  return GetByUniqueID(std::make_pair(iClientID, iUniqueChannelId))->channel;
 }
 
 std::shared_ptr<CPVRChannel> CPVRChannelGroup::GetByChannelID(int iChannelID) const
 {
-  std::shared_ptr<CPVRChannel> retval;
   CSingleLock lock(m_critSection);
 
-  for (PVR_CHANNEL_GROUP_MEMBERS::const_iterator it = m_members.begin(); !retval && it != m_members.end(); ++it)
+  for (const auto& memberPair : m_members)
   {
-    if (it->second.channel->ChannelID() == iChannelID)
-      retval = it->second.channel;
+    if (memberPair.second->channel->ChannelID() == iChannelID)
+      return memberPair.second->channel;
   }
 
-  return retval;
+  return {};
 }
 
 std::shared_ptr<CPVRChannel> CPVRChannelGroup::GetByChannelEpgID(int iEpgID) const
 {
-  std::shared_ptr<CPVRChannel> retval;
   CSingleLock lock(m_critSection);
 
-  for (PVR_CHANNEL_GROUP_MEMBERS::const_iterator it = m_members.begin(); !retval && it != m_members.end(); ++it)
+  for (const auto& memberPair : m_members)
   {
-    if (it->second.channel->EpgID() == iEpgID)
-      retval = it->second.channel;
+    if (memberPair.second->channel->EpgID() == iEpgID)
+      return memberPair.second->channel;
   }
 
-  return retval;
+  return {};
 }
 
 std::shared_ptr<CPVRChannel> CPVRChannelGroup::GetLastPlayedChannel(int iCurrentChannel /* = -1 */) const
@@ -323,9 +320,9 @@ std::shared_ptr<CPVRChannel> CPVRChannelGroup::GetLastPlayedChannel(int iCurrent
   CSingleLock lock(m_critSection);
 
   std::shared_ptr<CPVRChannel> returnChannel, channel;
-  for (PVR_CHANNEL_GROUP_MEMBERS::const_iterator it = m_members.begin(); it != m_members.end(); ++it)
+  for (const auto& memberPair : m_members)
   {
-    channel = it->second.channel;
+    channel = memberPair.second->channel;
     if (channel->ChannelID() != iCurrentChannel &&
         CServiceBroker::GetPVRManager().Clients()->IsCreatedClient(channel->ClientID()) &&
         channel->LastWatched() > 0 &&
@@ -341,26 +338,26 @@ std::shared_ptr<CPVRChannel> CPVRChannelGroup::GetLastPlayedChannel(int iCurrent
 CPVRChannelNumber CPVRChannelGroup::GetChannelNumber(const std::shared_ptr<CPVRChannel>& channel) const
 {
   CSingleLock lock(m_critSection);
-  const PVRChannelGroupMember& member(GetByUniqueID(channel->StorageId()));
-  return member.channelNumber;
+  const std::shared_ptr<PVRChannelGroupMember>& member = GetByUniqueID(channel->StorageId());
+  return member->channelNumber;
 }
 
 CPVRChannelNumber CPVRChannelGroup::GetClientChannelNumber(const std::shared_ptr<CPVRChannel>& channel) const
 {
   CSingleLock lock(m_critSection);
-  const PVRChannelGroupMember& member(GetByUniqueID(channel->StorageId()));
-  return member.clientChannelNumber;
+  const std::shared_ptr<PVRChannelGroupMember>& member = GetByUniqueID(channel->StorageId());
+  return member->clientChannelNumber;
 }
 
 std::shared_ptr<CPVRChannel> CPVRChannelGroup::GetByChannelNumber(const CPVRChannelNumber& channelNumber) const
 {
   CSingleLock lock(m_critSection);
 
-  for (const auto& groupMember : m_sortedMembers)
+  for (const auto& member : m_sortedMembers)
   {
-    CPVRChannelNumber activeChannelNumber = m_bUsingBackendChannelNumbers ? groupMember.clientChannelNumber : groupMember.channelNumber;
+    CPVRChannelNumber activeChannelNumber = m_bUsingBackendChannelNumbers ? member->clientChannelNumber : member->channelNumber;
     if (activeChannelNumber == channelNumber)
-      return groupMember.channel;
+      return member->channel;
   }
 
   return {};
@@ -375,15 +372,15 @@ std::shared_ptr<CPVRChannel> CPVRChannelGroup::GetNextChannel(const std::shared_
     CSingleLock lock(m_critSection);
     for (auto it = m_sortedMembers.cbegin(); !nextChannel && it != m_sortedMembers.cend(); ++it)
     {
-      if ((*it).channel == channel)
+      if ((*it)->channel == channel)
       {
         do
         {
           if ((++it) == m_sortedMembers.end())
             it = m_sortedMembers.begin();
-          if ((*it).channel && !(*it).channel->IsHidden())
-            nextChannel = (*it).channel;
-        } while (!nextChannel && (*it).channel != channel);
+          if ((*it)->channel && !(*it)->channel->IsHidden())
+            nextChannel = (*it)->channel;
+        } while (!nextChannel && (*it)->channel != channel);
 
         break;
       }
@@ -402,15 +399,15 @@ std::shared_ptr<CPVRChannel> CPVRChannelGroup::GetPreviousChannel(const std::sha
     CSingleLock lock(m_critSection);
     for (auto it = m_sortedMembers.rbegin(); !previousChannel && it != m_sortedMembers.rend(); ++it)
     {
-      if ((*it).channel == channel)
+      if ((*it)->channel == channel)
       {
         do
         {
           if ((++it) == m_sortedMembers.rend())
             it = m_sortedMembers.rbegin();
-          if ((*it).channel && !(*it).channel->IsHidden())
-            previousChannel = (*it).channel;
-        } while (!previousChannel && (*it).channel != channel);
+          if ((*it)->channel && !(*it)->channel->IsHidden())
+            previousChannel = (*it)->channel;
+        } while (!previousChannel && (*it)->channel != channel);
 
         break;
       }
@@ -419,23 +416,23 @@ std::shared_ptr<CPVRChannel> CPVRChannelGroup::GetPreviousChannel(const std::sha
   return previousChannel;
 }
 
-std::vector<PVRChannelGroupMember> CPVRChannelGroup::GetMembers(Include eFilter /* = Include::ALL */) const
+std::vector<std::shared_ptr<PVRChannelGroupMember>> CPVRChannelGroup::GetMembers(Include eFilter /* = Include::ALL */) const
 {
   CSingleLock lock(m_critSection);
   if (eFilter == Include::ALL)
     return m_sortedMembers;
 
-  std::vector<PVRChannelGroupMember> members;
+  std::vector<std::shared_ptr<PVRChannelGroupMember>> members;
   for (const auto& member : m_sortedMembers)
   {
     switch (eFilter)
     {
       case Include::ONLY_HIDDEN:
-        if (!member.channel->IsHidden())
+        if (!member->channel->IsHidden())
           continue;
         break;
       case Include::ONLY_VISIBLE:
-        if (member.channel->IsHidden())
+        if (member->channel->IsHidden())
           continue;
        break;
       default:
@@ -453,7 +450,7 @@ void CPVRChannelGroup::GetChannelNumbers(std::vector<std::string>& channelNumber
   CSingleLock lock(m_critSection);
   for (const auto& member : m_sortedMembers)
   {
-    CPVRChannelNumber activeChannelNumber = m_bUsingBackendChannelNumbers ? member.clientChannelNumber : member.channelNumber;
+    CPVRChannelNumber activeChannelNumber = m_bUsingBackendChannelNumbers ? member->clientChannelNumber : member->channelNumber;
     channelNumbers.emplace_back(activeChannelNumber.FormattedChannelNumber());
   }
 }
@@ -483,24 +480,43 @@ bool CPVRChannelGroup::AddAndUpdateChannels(const CPVRChannelGroup& channels, bo
 
   /* go through the channel list and check for new channels.
      channels will only by updated in CPVRChannelGroupInternal to prevent dupe updates */
-  for (PVR_CHANNEL_GROUP_MEMBERS::const_iterator it = channels.m_members.begin(); it != channels.m_members.end(); ++it)
+  for (const auto& newMemberPair : channels.m_members)
   {
     /* check whether this channel is known in the internal group */
-    const PVRChannelGroupMember& existingChannel(m_allChannelsGroup->GetByUniqueID(it->first));
-    if (!existingChannel.channel)
+    const std::shared_ptr<PVRChannelGroupMember>& existingAllChannelsMember = m_allChannelsGroup->GetByUniqueID(newMemberPair.first);
+    if (!existingAllChannelsMember->channel)
       continue;
 
+    const std::shared_ptr<PVRChannelGroupMember>& newMember = newMemberPair.second;
     /* if it's found, add the channel to this group */
-    if (!IsGroupMember(existingChannel.channel))
+    if (!IsGroupMember(existingAllChannelsMember->channel))
     {
-      AddToGroup(existingChannel.channel,
-                 it->second.channelNumber,
-                 it->second.iOrder,
-                 bUseBackendChannelNumbers, it->second.clientChannelNumber);
+      AddToGroup(existingAllChannelsMember->channel,
+                 newMember->channelNumber,
+                 newMember->iOrder,
+                 bUseBackendChannelNumbers, newMember->clientChannelNumber);
 
       bReturn = true;
-      CLog::Log(LOGINFO,"Added %s channel '%s' to group '%s'",
-                IsRadio() ? "radio" : "TV", existingChannel.channel->ChannelName().c_str(), GroupName().c_str());
+      CLog::Log(LOGINFO, "Added %s channel '%s' to group '%s'",
+                IsRadio() ? "radio" : "TV", existingAllChannelsMember->channel->ChannelName().c_str(), GroupName().c_str());
+    }
+    else
+    {
+      CSingleLock lock(m_critSection);
+      std::shared_ptr<PVRChannelGroupMember>& existingMember = GetByUniqueID(newMemberPair.first);
+
+      if ((existingMember->channelNumber != newMember->channelNumber && !m_bStartGroupChannelNumbersFromOne) ||
+          existingMember->clientChannelNumber != newMember->clientChannelNumber ||
+          existingMember->iOrder != newMember->iOrder)
+      {
+        existingMember->channelNumber = newMember->channelNumber;
+        existingMember->clientChannelNumber = newMember->clientChannelNumber;
+        existingMember->iOrder = newMember->iOrder;
+        bReturn = true;
+      }
+
+      CLog::Log(LOGINFO, "Updated %s channel '%s' in group '%s'",
+                IsRadio() ? "radio" : "TV", existingMember->channel->ChannelName().c_str(), GroupName().c_str());
     }
   }
 
@@ -527,18 +543,18 @@ void CPVRChannelGroup::UpdateClientOrder()
 {
   CSingleLock lock(m_critSection);
 
-  for (const auto& member : GetMembers())
-    member.channel->SetClientOrder(member.iOrder);
+  for (const auto& member : m_sortedMembers)
+    member->channel->SetClientOrder(member->iOrder);
 }
 
 void CPVRChannelGroup::UpdateChannelNumbers()
 {
   CSingleLock lock(m_critSection);
 
-  for (const auto& member : GetMembers())
+  for (const auto& member : m_sortedMembers)
   {
-    member.channel->SetChannelNumber(m_bUsingBackendChannelNumbers ? member.clientChannelNumber : member.channelNumber);
-    member.channel->SetClientChannelNumber(member.clientChannelNumber);
+    member->channel->SetChannelNumber(m_bUsingBackendChannelNumbers ? member->clientChannelNumber : member->channelNumber);
+    member->channel->SetClientChannelNumber(member->clientChannelNumber);
   }
 }
 
@@ -548,9 +564,9 @@ std::vector<std::shared_ptr<CPVRChannel>> CPVRChannelGroup::RemoveDeletedChannel
   CSingleLock lock(m_critSection);
 
   /* check for deleted channels */
-  for (PVR_CHANNEL_GROUP_SORTED_MEMBERS::iterator it = m_sortedMembers.begin(); it != m_sortedMembers.end();)
+  for (std::vector<std::shared_ptr<PVRChannelGroupMember>>::iterator it = m_sortedMembers.begin(); it != m_sortedMembers.end();)
   {
-    const std::shared_ptr<CPVRChannel> channel = (*it).channel;
+    const std::shared_ptr<CPVRChannel> channel = (*it)->channel;
     if (channels.m_members.find(channel->StorageId()) == channels.m_members.end())
     {
       /* channel was not found */
@@ -596,6 +612,7 @@ bool CPVRChannelGroup::UpdateGroupEntries(const CPVRChannelGroup& channels, std:
        new channels were added at the back, so they'll get the highest numbers */
     bool bRenumbered = SortAndRenumber();
 
+    m_bChanged = true;
     bReturn = Persist();
 
     m_events.Publish(HasNewChannels() || bRemoved || bRenumbered ? PVREvent::ChannelGroupInvalidated : PVREvent::ChannelGroup);
@@ -613,12 +630,12 @@ bool CPVRChannelGroup::RemoveFromGroup(const std::shared_ptr<CPVRChannel>& chann
   bool bReturn(false);
   CSingleLock lock(m_critSection);
 
-  for (PVR_CHANNEL_GROUP_SORTED_MEMBERS::iterator it = m_sortedMembers.begin(); it != m_sortedMembers.end();)
+  for (std::vector<std::shared_ptr<PVRChannelGroupMember>>::iterator it = m_sortedMembers.begin(); it != m_sortedMembers.end();)
   {
-    if (*channel == *((*it).channel))
+    if (*channel == *((*it)->channel))
     {
       //! @todo notify observers
-      m_members.erase((*it).channel->StorageId());
+      m_members.erase((*it)->channel->StorageId());
       it = m_sortedMembers.erase(it);
       bReturn = true;
       m_bChanged = true;
@@ -644,22 +661,23 @@ bool CPVRChannelGroup::AddToGroup(const std::shared_ptr<CPVRChannel>& channel, c
 
   if (!CPVRChannelGroup::IsGroupMember(channel))
   {
-    const PVRChannelGroupMember& realChannel(IsInternalGroup() ?
+    const std::shared_ptr<PVRChannelGroupMember>& realMember = IsInternalGroup() ?
         GetByUniqueID(channel->StorageId()) :
-        m_allChannelsGroup->GetByUniqueID(channel->StorageId()));
+        m_allChannelsGroup->GetByUniqueID(channel->StorageId());
 
-    if (realChannel.channel)
+    if (realMember->channel)
     {
       unsigned int iChannelNumber = channelNumber.GetChannelNumber();
       if (!channelNumber.IsValid())
-        iChannelNumber = realChannel.channelNumber.GetChannelNumber();
-
-      PVRChannelGroupMember newMember(realChannel);
-      newMember.channelNumber = CPVRChannelNumber(iChannelNumber, channelNumber.GetSubChannelNumber());
-      newMember.clientChannelNumber = clientChannelNumber;
-      newMember.iOrder = iOrder;
-      m_sortedMembers.push_back(newMember);
-      m_members.insert(std::make_pair(realChannel.channel->StorageId(), newMember));
+        iChannelNumber = realMember->channelNumber.GetChannelNumber();
+
+      CPVRChannelNumber clientChannelNumberToUse = clientChannelNumber;
+      if (!clientChannelNumber.IsValid())
+        clientChannelNumberToUse = realMember->clientChannelNumber;
+
+      auto newMember = std::make_shared<PVRChannelGroupMember>(realMember->channel, CPVRChannelNumber(iChannelNumber, channelNumber.GetSubChannelNumber()), realMember->iClientPriority, iOrder, clientChannelNumberToUse);
+      m_sortedMembers.emplace_back(newMember);
+      m_members.insert(std::make_pair(realMember->channel->StorageId(), newMember));
       m_bChanged = true;
 
       SortAndRenumber();
@@ -680,13 +698,15 @@ bool CPVRChannelGroup::IsGroupMember(const std::shared_ptr<CPVRChannel>& channel
 
 bool CPVRChannelGroup::IsGroupMember(int iChannelId) const
 {
-  bool bReturn(false);
   CSingleLock lock(m_critSection);
 
-  for (PVR_CHANNEL_GROUP_MEMBERS::const_iterator it = m_members.begin(); !bReturn && it != m_members.end(); ++it)
-    bReturn = (iChannelId == it->second.channel->ChannelID());
+  for (const auto& memberPair : m_members)
+  {
+    if (iChannelId == memberPair.second->channel->ChannelID())
+      return true;
+  }
 
-  return bReturn;
+  return false;
 }
 
 bool CPVRChannelGroup::Persist(void)
@@ -738,9 +758,9 @@ bool CPVRChannelGroup::Renumber(void)
   CPVRChannelNumber currentClientChannelNumber;
   for (auto& sortedMember : m_sortedMembers)
   {
-    currentClientChannelNumber = sortedMember.clientChannelNumber;
+    currentClientChannelNumber = sortedMember->clientChannelNumber;
 
-    if (sortedMember.channel->IsHidden())
+    if (sortedMember->channel->IsHidden())
     {
       currentChannelNumber = CPVRChannelNumber(0, 0);
     }
@@ -755,23 +775,23 @@ bool CPVRChannelGroup::Renumber(void)
         if (bStartGroupChannelNumbersFromOne)
           currentChannelNumber = CPVRChannelNumber(++iChannelNumber, 0);
         else
-          currentChannelNumber = m_allChannelsGroup->GetChannelNumber(sortedMember.channel);
+          currentChannelNumber = m_allChannelsGroup->GetChannelNumber(sortedMember->channel);
 
-        if (!sortedMember.clientChannelNumber.IsValid())
-          currentClientChannelNumber = m_allChannelsGroup->GetClientChannelNumber(sortedMember.channel);
+        if (!sortedMember->clientChannelNumber.IsValid())
+          currentClientChannelNumber = m_allChannelsGroup->GetClientChannelNumber(sortedMember->channel);
       }
     }
 
-    if (sortedMember.channelNumber != currentChannelNumber || sortedMember.clientChannelNumber != currentClientChannelNumber)
+    if (sortedMember->channelNumber != currentChannelNumber || sortedMember->clientChannelNumber != currentClientChannelNumber)
     {
       bReturn = true;
       m_bChanged = true;
-      sortedMember.channelNumber = currentChannelNumber;
-      sortedMember.clientChannelNumber = currentClientChannelNumber;
+      sortedMember->channelNumber = currentChannelNumber;
+      sortedMember->clientChannelNumber = currentClientChannelNumber;
 
-      auto& unsortedMember = GetByUniqueID(sortedMember.channel->StorageId());
-      unsortedMember.channelNumber = sortedMember.channelNumber;
-      unsortedMember.clientChannelNumber = sortedMember.clientChannelNumber;
+      auto& unsortedMember = GetByUniqueID(sortedMember->channel->StorageId());
+      unsortedMember->channelNumber = sortedMember->channelNumber;
+      unsortedMember->clientChannelNumber = sortedMember->clientChannelNumber;
     }
   }
 
@@ -782,24 +802,28 @@ bool CPVRChannelGroup::Renumber(void)
 
 bool CPVRChannelGroup::HasChangedChannels(void) const
 {
-  bool bReturn(false);
   CSingleLock lock(m_critSection);
 
-  for (PVR_CHANNEL_GROUP_MEMBERS::const_iterator it = m_members.begin(); !bReturn && it != m_members.end(); ++it)
-    bReturn = it->second.channel->IsChanged();
+  for (const auto& memberPair : m_members)
+  {
+    if (memberPair.second->channel->IsChanged())
+      return true;
+  }
 
-  return bReturn;
+  return false;
 }
 
 bool CPVRChannelGroup::HasNewChannels(void) const
 {
-  bool bReturn(false);
   CSingleLock lock(m_critSection);
 
-  for (PVR_CHANNEL_GROUP_MEMBERS::const_iterator it = m_members.begin(); !bReturn && it != m_members.end(); ++it)
-    bReturn = it->second.channel->ChannelID() <= 0;
+  for (const auto& memberPair : m_members)
+  {
+    if (memberPair.second->channel->ChannelID() <= 0)
+      return true;
+  }
 
-  return bReturn;
+  return false;
 }
 
 bool CPVRChannelGroup::HasChanges(void) const
@@ -854,11 +878,11 @@ void CPVRChannelGroup::OnSettingChanged(std::shared_ptr<const CSetting> setting)
 
       if (m_bIsSelectedGroup)
       {
-        for (const auto& member : GetMembers())
+        for (const auto& member : m_sortedMembers)
         {
-          member.channel->SetClientOrder(member.iOrder);
-          member.channel->SetChannelNumber(m_bUsingBackendChannelNumbers ? member.clientChannelNumber : member.channelNumber);
-          member.channel->SetClientChannelNumber(member.clientChannelNumber);
+          member->channel->SetClientOrder(member->iOrder);
+          member->channel->SetChannelNumber(m_bUsingBackendChannelNumbers ? member->clientChannelNumber : member->channelNumber);
+          member->channel->SetClientChannelNumber(member->clientChannelNumber);
         }
       }
 
@@ -875,9 +899,9 @@ std::vector<std::shared_ptr<CPVREpgInfoTag>> CPVRChannelGroup::GetEPGAll(bool bI
   std::shared_ptr<CPVRChannel> channel;
   CSingleLock lock(m_critSection);
 
-  for (PVR_CHANNEL_GROUP_SORTED_MEMBERS::const_iterator it = m_sortedMembers.begin(); it != m_sortedMembers.end(); ++it)
+  for (const auto& member : m_sortedMembers)
   {
-    channel = (*it).channel;
+    channel = member->channel;
     if (!channel->IsHidden())
     {
       bool bEmpty = true;
@@ -914,9 +938,9 @@ CDateTime CPVRChannelGroup::GetEPGDate(EpgDateType epgDateType) const
   std::shared_ptr<CPVRChannel> channel;
   CSingleLock lock(m_critSection);
 
-  for (PVR_CHANNEL_GROUP_MEMBERS::const_iterator it = m_members.begin(); it != m_members.end(); ++it)
+  for (const auto& memberPair : m_members)
   {
-    channel = it->second.channel;
+    channel = memberPair.second->channel;
     if (!channel->IsHidden() && (epg = channel->GetEPG()))
     {
       CDateTime epgDate;
@@ -1043,20 +1067,20 @@ bool CPVRChannelGroup::UpdateChannel(const std::pair<int, int>& storageId,
   CSingleLock lock(m_critSection);
 
   /* get the real channel from the group */
-  const PVRChannelGroupMember& member = GetByUniqueID(storageId);
-  if (!member.channel)
+  const std::shared_ptr<PVRChannelGroupMember>& member = GetByUniqueID(storageId);
+  if (!member->channel)
     return false;
 
-  member.channel->SetChannelName(strChannelName, true);
-  member.channel->SetHidden(bHidden);
-  member.channel->SetLocked(bParentalLocked);
-  member.channel->SetIconPath(strIconPath, bUserSetIcon);
+  member->channel->SetChannelName(strChannelName, true);
+  member->channel->SetHidden(bHidden);
+  member->channel->SetLocked(bParentalLocked);
+  member->channel->SetIconPath(strIconPath, bUserSetIcon);
 
   if (iEPGSource == 0)
-    member.channel->SetEPGScraper("client");
+    member->channel->SetEPGScraper("client");
 
   //! @todo add other scrapers
-  member.channel->SetEPGEnabled(bEPGEnabled);
+  member->channel->SetEPGEnabled(bEPGEnabled);
 
   /* set new values in the channel tag */
   if (bHidden)
@@ -1064,11 +1088,11 @@ bool CPVRChannelGroup::UpdateChannel(const std::pair<int, int>& storageId,
     // sort or previous changes will be overwritten
     Sort();
 
-    RemoveFromGroup(member.channel);
+    RemoveFromGroup(member->channel);
   }
   else
   {
-    SetChannelNumber(member.channel, CPVRChannelNumber(iChannelNumber, 0));
+    SetChannelNumber(member->channel, CPVRChannelNumber(iChannelNumber, 0));
   }
 
   return true;
diff --git a/xbmc/pvr/channels/PVRChannelGroup.h b/xbmc/pvr/channels/PVRChannelGroup.h
index 092834638eb5..8ebba3e4f7e1 100644
--- a/xbmc/pvr/channels/PVRChannelGroup.h
+++ b/xbmc/pvr/channels/PVRChannelGroup.h
@@ -51,9 +51,6 @@ namespace PVR
     int iOrder = 0; // The value denoting the order of this member in the group
   };
 
-  typedef std::vector<PVRChannelGroupMember> PVR_CHANNEL_GROUP_SORTED_MEMBERS;
-  typedef std::map<std::pair<int, int>, PVRChannelGroupMember> PVR_CHANNEL_GROUP_MEMBERS;
-
   enum EpgDateType
   {
     EPG_FIRST_DATE = 0,
@@ -93,7 +90,7 @@ namespace PVR
     /**
      * Empty group member
      */
-    static PVRChannelGroupMember EmptyMember;
+    static std::shared_ptr<PVRChannelGroupMember> EmptyMember;
 
     /*!
      * @brief Query the events available for CEventStream
@@ -339,7 +336,7 @@ namespace PVR
      * @param eFilter A filter to apply.
      * @return The group members
      */
-    std::vector<PVRChannelGroupMember> GetMembers(Include eFilter = Include::ALL) const;
+    std::vector<std::shared_ptr<PVRChannelGroupMember>> GetMembers(Include eFilter = Include::ALL) const;
 
     /*!
      * @brief Get the list of active channel numbers in a group.
@@ -436,8 +433,8 @@ namespace PVR
      * @param id The storage id (a pair of client id and unique channel id).
      * @return A reference to the group member or an empty group member if it wasn't found.
      */
-    PVRChannelGroupMember& GetByUniqueID(const std::pair<int, int>& id);
-    const PVRChannelGroupMember& GetByUniqueID(const std::pair<int, int>& id) const;
+    std::shared_ptr<PVRChannelGroupMember>& GetByUniqueID(const std::pair<int, int>& id);
+    const std::shared_ptr<PVRChannelGroupMember>& GetByUniqueID(const std::pair<int, int>& id) const;
 
     void SetHidden(bool bHidden);
     bool IsHidden(void) const;
@@ -551,8 +548,8 @@ namespace PVR
     time_t           m_iLastWatched = 0;                /*!< last time group has been watched */
     bool             m_bHidden = false;                     /*!< true if this group is hidden, false otherwise */
     int              m_iPosition = 0;                   /*!< the position of this group within the group list */
-    PVR_CHANNEL_GROUP_SORTED_MEMBERS m_sortedMembers; /*!< members sorted by channel number */
-    PVR_CHANNEL_GROUP_MEMBERS        m_members;       /*!< members with key clientid+uniqueid */
+    std::vector<std::shared_ptr<PVRChannelGroupMember>> m_sortedMembers; /*!< members sorted by channel number */
+    std::map<std::pair<int, int>, std::shared_ptr<PVRChannelGroupMember>> m_members; /*!< members with key clientid+uniqueid */
     mutable CCriticalSection m_critSection;
     std::vector<int> m_failedClientsForChannels;
     std::vector<int> m_failedClientsForChannelGroupMembers;
diff --git a/xbmc/pvr/channels/PVRChannelGroupInternal.cpp b/xbmc/pvr/channels/PVRChannelGroupInternal.cpp
index 28e152c2a520..db632819af1a 100644
--- a/xbmc/pvr/channels/PVRChannelGroupInternal.cpp
+++ b/xbmc/pvr/channels/PVRChannelGroupInternal.cpp
@@ -69,23 +69,23 @@ void CPVRChannelGroupInternal::UpdateChannelPaths(void)
 {
   CSingleLock lock(m_critSection);
   m_iHiddenChannels = 0;
-  for (PVR_CHANNEL_GROUP_MEMBERS::iterator it = m_members.begin(); it != m_members.end(); ++it)
+  for (auto& groupMemberPair : m_members)
   {
-    if (it->second.channel->IsHidden())
+    if (groupMemberPair.second->channel->IsHidden())
       ++m_iHiddenChannels;
     else
-      it->second.channel->UpdatePath(GroupName());
+      groupMemberPair.second->channel->UpdatePath(GroupName());
   }
 }
 
 std::shared_ptr<CPVRChannel> CPVRChannelGroupInternal::UpdateFromClient(const std::shared_ptr<CPVRChannel>& channel, const CPVRChannelNumber& channelNumber, int iOrder, const CPVRChannelNumber& clientChannelNumber /* = {} */)
 {
   CSingleLock lock(m_critSection);
-  const PVRChannelGroupMember& realChannel(GetByUniqueID(channel->StorageId()));
-  if (realChannel.channel)
+  const std::shared_ptr<PVRChannelGroupMember>& realMember = GetByUniqueID(channel->StorageId());
+  if (realMember->channel)
   {
-    realChannel.channel->UpdateFromClient(channel);
-    return realChannel.channel;
+    realMember->channel->UpdateFromClient(channel);
+    return realMember->channel;
   }
   else
   {
@@ -93,9 +93,9 @@ std::shared_ptr<CPVRChannel> CPVRChannelGroupInternal::UpdateFromClient(const st
     if (iChannelNumber == 0)
       iChannelNumber = static_cast<int>(m_sortedMembers.size()) + 1;
 
-    PVRChannelGroupMember newMember(channel, CPVRChannelNumber(iChannelNumber, channelNumber.GetSubChannelNumber()), 0, iOrder, clientChannelNumber);
     channel->UpdatePath(GroupName());
-    m_sortedMembers.push_back(newMember);
+    auto newMember = std::make_shared<PVRChannelGroupMember>(channel, CPVRChannelNumber(iChannelNumber, channelNumber.GetSubChannelNumber()), 0, iOrder, clientChannelNumber);
+    m_sortedMembers.emplace_back(newMember);
     m_members.insert(std::make_pair(channel->StorageId(), newMember));
     m_bChanged = true;
 
@@ -119,16 +119,16 @@ bool CPVRChannelGroupInternal::AddToGroup(const std::shared_ptr<CPVRChannel>& ch
   CSingleLock lock(m_critSection);
 
   /* get the group member, because we need the channel ID in this group, and the channel from this group */
-  PVRChannelGroupMember& groupMember = GetByUniqueID(channel->StorageId());
-  if (!groupMember.channel)
+  std::shared_ptr<PVRChannelGroupMember>& groupMember = GetByUniqueID(channel->StorageId());
+  if (!groupMember->channel)
     return bReturn;
 
   bool bSort = false;
 
   /* switch the hidden flag */
-  if (groupMember.channel->IsHidden())
+  if (groupMember->channel->IsHidden())
   {
-    groupMember.channel->SetHidden(false);
+    groupMember->channel->SetHidden(false);
     if (m_iHiddenChannels > 0)
       m_iHiddenChannels--;
 
@@ -139,9 +139,9 @@ bool CPVRChannelGroupInternal::AddToGroup(const std::shared_ptr<CPVRChannel>& ch
   if (!channelNumber.IsValid() || iChannelNumber > (m_members.size() - m_iHiddenChannels))
     iChannelNumber = m_members.size() - m_iHiddenChannels;
 
-  if (groupMember.channelNumber.GetChannelNumber() != iChannelNumber)
+  if (groupMember->channelNumber.GetChannelNumber() != iChannelNumber)
   {
-    groupMember.channelNumber = CPVRChannelNumber(iChannelNumber, channelNumber.GetSubChannelNumber());
+    groupMember->channelNumber = CPVRChannelNumber(iChannelNumber, channelNumber.GetSubChannelNumber());
     bSort = true;
   }
 
@@ -151,7 +151,7 @@ bool CPVRChannelGroupInternal::AddToGroup(const std::shared_ptr<CPVRChannel>& ch
   if (m_bLoaded)
   {
     bReturn = Persist();
-    groupMember.channel->Persist();
+    groupMember->channel->Persist();
   }
   return bReturn;
 }
@@ -225,29 +225,40 @@ bool CPVRChannelGroupInternal::AddAndUpdateChannels(const CPVRChannelGroup& chan
   CSingleLock lock(m_critSection);
 
   /* go through the channel list and check for updated or new channels */
-  for (PVR_CHANNEL_GROUP_MEMBERS::const_iterator it = channels.m_members.begin(); it != channels.m_members.end(); ++it)
+  for (auto& newMemberPair : channels.m_members)
   {
     /* check whether this channel is present in this container */
-    const PVRChannelGroupMember& existingChannel(GetByUniqueID(it->first));
-    if (existingChannel.channel)
+    std::shared_ptr<PVRChannelGroupMember>& existingMember = GetByUniqueID(newMemberPair.first);
+    const std::shared_ptr<PVRChannelGroupMember>& newMember = newMemberPair.second;
+    if (existingMember->channel)
     {
       /* if it's present, update the current tag */
-      if (existingChannel.channel->UpdateFromClient(it->second.channel))
+      if (existingMember->channel->UpdateFromClient(newMember->channel))
       {
         bReturn = true;
-        CLog::LogFC(LOGDEBUG, LOGPVR, "Updated {} channel '{}' from PVR client", IsRadio() ? "radio" : "TV", it->second.channel->ChannelName());
+        CLog::LogFC(LOGDEBUG, LOGPVR, "Updated {} channel '{}' from PVR client", IsRadio() ? "radio" : "TV", newMember->channel->ChannelName());
+      }
+
+      if (existingMember->channelNumber != newMember->channelNumber ||
+          existingMember->clientChannelNumber != newMember->clientChannelNumber ||
+          existingMember->iOrder != newMember->iOrder)
+      {
+        existingMember->channelNumber = newMember->channelNumber;
+        existingMember->clientChannelNumber = newMember->clientChannelNumber;
+        existingMember->iOrder = newMember->iOrder;
+        bReturn = true;
       }
     }
     else
     {
       /* new channel */
-      UpdateFromClient(it->second.channel, it->second.channelNumber, it->second.iOrder, it->second.clientChannelNumber);
-      if (it->second.channel->CreateEPG())
+      UpdateFromClient(newMember->channel, newMember->channelNumber, newMember->iOrder, newMember->clientChannelNumber);
+      if (newMember->channel->CreateEPG())
       {
-         CLog::LogFC(LOGDEBUG, LOGPVR, "Created EPG for {} channel '{}' from PVR client", IsRadio() ? "radio" : "TV", it->second.channel->ChannelName());
+        CLog::LogFC(LOGDEBUG, LOGPVR, "Created EPG for {} channel '{}' from PVR client", IsRadio() ? "radio" : "TV", newMember->channel->ChannelName());
       }
       bReturn = true;
-      CLog::LogFC(LOGDEBUG, LOGPVR, "Added {} channel '{}' from PVR client", IsRadio() ? "radio" : "TV", it->second.channel->ChannelName());
+      CLog::LogFC(LOGDEBUG, LOGPVR, "Added {} channel '{}' from PVR client", IsRadio() ? "radio" : "TV", newMember->channel->ChannelName());
     }
   }
 
@@ -301,8 +312,8 @@ bool CPVRChannelGroupInternal::CreateChannelEpgs(bool bForce /* = false */)
 
   {
     CSingleLock lock(m_critSection);
-    for (PVR_CHANNEL_GROUP_MEMBERS::iterator it = m_members.begin(); it != m_members.end(); ++it)
-      CreateChannelEpg(it->second.channel);
+    for (auto& groupMemberPair : m_members)
+      CreateChannelEpg(groupMemberPair.second->channel);
   }
 
   if (HasChangedChannels())
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.cpp b/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.cpp
index a27fcbb15fc6..fb657129e13d 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.cpp
@@ -681,11 +681,11 @@ void CGUIDialogPVRChannelManager::Update()
   if(!channels)
     return;
 
-  std::vector<PVRChannelGroupMember> groupMembers(channels->GetMembers());
-  CFileItemPtr channelFile;
+  const std::vector<std::shared_ptr<PVRChannelGroupMember>> groupMembers = channels->GetMembers();
+  std::shared_ptr<CFileItem> channelFile;
   for (const auto& member : groupMembers)
   {
-    channelFile = CFileItemPtr(new CFileItem(member.channel));
+    channelFile = std::make_shared<CFileItem>(member->channel);
     if (!channelFile || !channelFile->HasPVRChannelInfoTag())
       continue;
     const std::shared_ptr<CPVRChannel> channel(channelFile->GetPVRChannelInfoTag());
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.cpp b/xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.cpp
index b03e41ffb5be..406aeaaab72b 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.cpp
@@ -173,10 +173,10 @@ void CGUIDialogPVRChannelsOSD::Update()
     const std::shared_ptr<CPVRChannelGroup> group = pvrMgr.GetPlayingGroup(channel->IsRadio());
     if (group)
     {
-      const std::vector<PVRChannelGroupMember> groupMembers = group->GetMembers(CPVRChannelGroup::Include::ONLY_VISIBLE);
+      const std::vector<std::shared_ptr<PVRChannelGroupMember>> groupMembers = group->GetMembers(CPVRChannelGroup::Include::ONLY_VISIBLE);
       for (const auto& groupMember : groupMembers)
       {
-        m_vecItems->Add(std::make_shared<CFileItem>(groupMember.channel));
+        m_vecItems->Add(std::make_shared<CFileItem>(groupMember->channel));
       }
 
       m_viewControl.SetItems(*m_vecItems);
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.cpp b/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.cpp
index 82287e127a4d..f8ae44b35362 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.cpp
@@ -477,30 +477,30 @@ void CGUIDialogPVRGroupManager::Update()
     // Slightly different handling for "all" group...
     if (m_selectedGroup->IsInternalGroup())
     {
-      const std::vector<PVRChannelGroupMember> groupMembers = m_selectedGroup->GetMembers(CPVRChannelGroup::Include::ALL);
+      const std::vector<std::shared_ptr<PVRChannelGroupMember>> groupMembers = m_selectedGroup->GetMembers(CPVRChannelGroup::Include::ALL);
       for (const auto& groupMember : groupMembers)
       {
-        if (groupMember.channel->IsHidden())
-          m_ungroupedChannels->Add(std::make_shared<CFileItem>(groupMember.channel));
+        if (groupMember->channel->IsHidden())
+          m_ungroupedChannels->Add(std::make_shared<CFileItem>(groupMember->channel));
         else
-          m_groupMembers->Add(std::make_shared<CFileItem>(groupMember.channel));
+          m_groupMembers->Add(std::make_shared<CFileItem>(groupMember->channel));
       }
     }
     else
     {
-      const std::vector<PVRChannelGroupMember> groupMembers = m_selectedGroup->GetMembers(CPVRChannelGroup::Include::ONLY_VISIBLE);
+      const std::vector<std::shared_ptr<PVRChannelGroupMember>> groupMembers = m_selectedGroup->GetMembers(CPVRChannelGroup::Include::ONLY_VISIBLE);
       for (const auto& groupMember : groupMembers)
       {
-        m_groupMembers->Add(std::make_shared<CFileItem>(groupMember.channel));
+        m_groupMembers->Add(std::make_shared<CFileItem>(groupMember->channel));
       }
 
       /* for the center part, get all channels of the "all" channels group that are not in this group */
       const std::shared_ptr<CPVRChannelGroup> allGroup = CServiceBroker::GetPVRManager().ChannelGroups()->GetGroupAll(m_bIsRadio);
-      const std::vector<PVRChannelGroupMember> allGroupMembers = allGroup->GetMembers(CPVRChannelGroup::Include::ONLY_VISIBLE);
+      const std::vector<std::shared_ptr<PVRChannelGroupMember>> allGroupMembers = allGroup->GetMembers(CPVRChannelGroup::Include::ONLY_VISIBLE);
       for (const auto& groupMember : allGroupMembers)
       {
-        if (!m_selectedGroup->IsGroupMember(groupMember.channel))
-          m_ungroupedChannels->Add(std::make_shared<CFileItem>(groupMember.channel));
+        if (!m_selectedGroup->IsGroupMember(groupMember->channel))
+          m_ungroupedChannels->Add(std::make_shared<CFileItem>(groupMember->channel));
       }
     }
     m_viewGroupMembers.SetItems(*m_groupMembers);
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.cpp b/xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.cpp
index 7a3f140165c9..a631e03b8696 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.cpp
@@ -70,17 +70,17 @@ void CGUIDialogPVRGuideSearch::UpdateChannelSpin(void)
     group = CServiceBroker::GetPVRManager().ChannelGroups()->GetGroupAll(m_searchFilter->IsRadio());
 
   m_channelNumbersMap.clear();
-  const std::vector<PVRChannelGroupMember> groupMembers(group->GetMembers(CPVRChannelGroup::Include::ONLY_VISIBLE));
+  const std::vector<std::shared_ptr<PVRChannelGroupMember>> groupMembers = group->GetMembers(CPVRChannelGroup::Include::ONLY_VISIBLE);
   int iIndex = 0;
   int iSelectedChannel = EPG_SEARCH_UNSET;
   for (const auto& groupMember : groupMembers)
   {
-    if (groupMember.channel)
+    if (groupMember->channel)
     {
-      labels.emplace_back(std::make_pair(groupMember.channel->ChannelName(), iIndex));
-      m_channelNumbersMap.insert(std::make_pair(iIndex, groupMember.channelNumber));
+      labels.emplace_back(std::make_pair(groupMember->channel->ChannelName(), iIndex));
+      m_channelNumbersMap.insert(std::make_pair(iIndex, groupMember->channelNumber));
 
-      if (iSelectedChannel == EPG_SEARCH_UNSET && groupMember.channelNumber == m_searchFilter->GetChannelNumber())
+      if (iSelectedChannel == EPG_SEARCH_UNSET && groupMember->channelNumber == m_searchFilter->GetChannelNumber())
         iSelectedChannel = iIndex;
 
       ++iIndex;
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.cpp b/xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.cpp
index 66ec9e8b62b6..34c13ff5d2ae 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.cpp
@@ -782,10 +782,10 @@ void CGUIDialogPVRTimerSettings::InitializeChannelsList()
 
   // Add regular channels
   const std::shared_ptr<CPVRChannelGroup> allGroup = CServiceBroker::GetPVRManager().ChannelGroups()->GetGroupAll(m_bIsRadio);
-  const std::vector<PVRChannelGroupMember> groupMembers = allGroup->GetMembers(CPVRChannelGroup::Include::ONLY_VISIBLE);
+  const std::vector<std::shared_ptr<PVRChannelGroupMember>> groupMembers = allGroup->GetMembers(CPVRChannelGroup::Include::ONLY_VISIBLE);
   for (const auto& groupMember : groupMembers)
   {
-    const std::shared_ptr<CPVRChannel> channel = groupMember.channel;
+    const std::shared_ptr<CPVRChannel> channel = groupMember->channel;
     const std::string channelDescription
       = StringUtils::Format("%s %s", channel->ChannelNumber().FormattedChannelNumber().c_str(), channel->ChannelName().c_str());
     m_channelEntries.insert({index, ChannelDescriptor(channel->UniqueID(), channel->ClientID(), channelDescription)});
diff --git a/xbmc/pvr/windows/GUIWindowPVRGuide.cpp b/xbmc/pvr/windows/GUIWindowPVRGuide.cpp
index 620141d446a6..8b585e5e484b 100644
--- a/xbmc/pvr/windows/GUIWindowPVRGuide.cpp
+++ b/xbmc/pvr/windows/GUIWindowPVRGuide.cpp
@@ -708,13 +708,13 @@ bool CGUIWindowPVRGuideBase::RefreshTimelineItems()
         m_bFirstOpen = false;
 
         // very first open of the window. come up with some data very fast...
-        const std::vector<PVRChannelGroupMember> groupMembers = group->GetMembers(CPVRChannelGroup::Include::ONLY_VISIBLE);
+        const std::vector<std::shared_ptr<PVRChannelGroupMember>> groupMembers = group->GetMembers(CPVRChannelGroup::Include::ONLY_VISIBLE);
         for (const auto& groupMember : groupMembers)
         {
           // fake a channel without epg
 
           const std::shared_ptr<CPVREpgInfoTag> gapTag
-            = std::make_shared<CPVREpgInfoTag>(std::make_shared<CPVREpgChannelData>(*(groupMember.channel)), -1);
+            = std::make_shared<CPVREpgInfoTag>(std::make_shared<CPVREpgChannelData>(*(groupMember->channel)), -1);
           timeline->Add(std::make_shared<CFileItem>(gapTag));
         }
 
