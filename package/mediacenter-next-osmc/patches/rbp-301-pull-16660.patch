From 6a565700e96597c153a5c813949c6f203cca9e68 Mon Sep 17 00:00:00 2001
From: montellese <montellese@kodi.tv>
Date: Sat, 21 Sep 2019 20:22:54 +0200
Subject: [PATCH 1/9] [settings] support <close> attribute in action button
 <control>

---
 xbmc/settings/SettingControl.cpp | 8 +++++++-
 1 file changed, 7 insertions(+), 1 deletion(-)

diff --git a/xbmc/settings/SettingControl.cpp b/xbmc/settings/SettingControl.cpp
index 2978af56dafe..f2b6e2e1fb1a 100644
--- a/xbmc/settings/SettingControl.cpp
+++ b/xbmc/settings/SettingControl.cpp
@@ -138,7 +138,13 @@ bool CSettingControlButton::Deserialize(const TiXmlNode *node, bool update /* =
   XMLUtils::GetInt(node, SETTING_XML_ELM_CONTROL_HEADING, m_heading);
   XMLUtils::GetBoolean(node, SETTING_XML_ELM_CONTROL_HIDEVALUE, m_hideValue);
 
-  if (m_format == "addon")
+  if (m_format == "action")
+  {
+    bool closeDialog = false;
+    if (XMLUtils::GetBoolean(node, "close", closeDialog))
+      m_closeDialog = closeDialog;
+  }
+  else if (m_format == "addon")
   {
     std::string strShowAddons;
     if (XMLUtils::GetString(node, "show", strShowAddons) && !strShowAddons.empty())

From f38d71ce519d0cf5156815b24ecce19198728602 Mon Sep 17 00:00:00 2001
From: montellese <montellese@kodi.tv>
Date: Sat, 21 Sep 2019 20:51:08 +0200
Subject: [PATCH 2/9] [settings] support pure string based labels for <option>

---
 xbmc/settings/lib/Setting.cpp | 9 +++++++++
 1 file changed, 9 insertions(+)

diff --git a/xbmc/settings/lib/Setting.cpp b/xbmc/settings/lib/Setting.cpp
index 9dfe9b40bbe7..144463bdf3e9 100644
--- a/xbmc/settings/lib/Setting.cpp
+++ b/xbmc/settings/lib/Setting.cpp
@@ -1218,6 +1218,15 @@ bool CSettingString::Deserialize(const TiXmlNode *node, bool update /* = false *
             entry.second = optionElement->FirstChild()->Value();
             m_translatableOptions.push_back(entry);
           }
+          else
+          {
+            const std::string value = optionElement->FirstChild()->Value();
+            // if a specific "label" attribute is present use it otherwise use the value as label
+            std::string label = value;
+            optionElement->QueryStringAttribute(SETTING_XML_ATTR_LABEL, &label);
+
+            m_options.emplace_back(label, value);
+          }
 
           optionElement = optionElement->NextSiblingElement(SETTING_XML_ELM_OPTION);
         }

From 845f8614e33bceb0f63b16d2942d3efb38fc532f Mon Sep 17 00:00:00 2001
From: montellese <montellese@kodi.tv>
Date: Sat, 21 Sep 2019 21:10:06 +0200
Subject: [PATCH 3/9] [settings] extend supported <masking> format in
 CSettingPath with "video", "audio", "image", "executable" and "", "", "", ""

---
 xbmc/addons/settings/AddonSettings.cpp       |  2 +-
 xbmc/settings/SettingPath.cpp                | 36 +++++++++++++++++++-
 xbmc/settings/SettingPath.h                  |  4 ++-
 xbmc/settings/windows/GUIControlSettings.cpp |  4 ++-
 4 files changed, 42 insertions(+), 4 deletions(-)

diff --git a/xbmc/addons/settings/AddonSettings.cpp b/xbmc/addons/settings/AddonSettings.cpp
index cfa23378c516..e6189abbee8f 100644
--- a/xbmc/addons/settings/AddonSettings.cpp
+++ b/xbmc/addons/settings/AddonSettings.cpp
@@ -1513,7 +1513,7 @@ void CAddonSettings::FileEnumSettingOptionsFiller(std::shared_ptr<const CSetting
   if (settingPath->GetSources().empty())
     return;
 
-  const std::string& masking = settingPath->GetMasking();
+  const std::string& masking = settingPath->GetMasking(CServiceBroker::GetFileExtensionProvider());
 
   // fetch the matching files/directories
   CFileItemList items;
diff --git a/xbmc/settings/SettingPath.cpp b/xbmc/settings/SettingPath.cpp
index bef55a8a6e19..23026a231621 100644
--- a/xbmc/settings/SettingPath.cpp
+++ b/xbmc/settings/SettingPath.cpp
@@ -9,6 +9,7 @@
 #include "SettingPath.h"
 
 #include "settings/lib/SettingsManager.h"
+#include "utils/FileExtensionProvider.h"
 #include "utils/StringUtils.h"
 #include "utils/XBMCTinyXML.h"
 #include "utils/XMLUtils.h"
@@ -91,7 +92,40 @@ bool CSettingPath::SetValue(const std::string &value)
   return CSettingString::SetValue(value);
 }
 
-void CSettingPath::copy(const CSettingPath &setting)
+std::string CSettingPath::GetMasking(const CFileExtensionProvider& fileExtensionProvider) const
+{
+  if (m_masking.empty())
+    return m_masking;
+
+  // setup masking
+  const auto audioMask = fileExtensionProvider.GetMusicExtensions();
+  const auto videoMask = fileExtensionProvider.GetVideoExtensions();
+  const auto imageMask = fileExtensionProvider.GetPictureExtensions();
+  auto execMask = "";
+#if defined(TARGET_WINDOWS)
+  execMask = ".exe|.bat|.cmd|.py";
+#endif // defined(TARGET_WINDOWS)
+
+  std::string masking = m_masking;
+  if (masking == "video")
+    return videoMask;
+  if (masking == "audio")
+    return audioMask;
+  if (masking == "image")
+    return imageMask;
+  if (masking == "executable")
+    return execMask;
+
+  // convert mask qualifiers
+  StringUtils::Replace(masking, "$AUDIO", audioMask);
+  StringUtils::Replace(masking, "$VIDEO", videoMask);
+  StringUtils::Replace(masking, "$IMAGE", imageMask);
+  StringUtils::Replace(masking, "$EXECUTABLE", execMask);
+
+  return masking;
+}
+
+void CSettingPath::copy(const CSettingPath& setting)
 {
   CSettingString::Copy(setting);
 
diff --git a/xbmc/settings/SettingPath.h b/xbmc/settings/SettingPath.h
index d8797ea7bfc9..423782a10e40 100644
--- a/xbmc/settings/SettingPath.h
+++ b/xbmc/settings/SettingPath.h
@@ -12,6 +12,8 @@
 
 #include <vector>
 
+class CFileExtensionProvider;
+
 class CSettingPath : public CSettingString
 {
 public:
@@ -31,7 +33,7 @@ class CSettingPath : public CSettingString
   void SetSources(const std::vector<std::string> &sources) { m_sources = sources; }
   bool HideExtension() const { return m_hideExtension; }
   void SetHideExtension(bool hideExtension) { m_hideExtension = hideExtension; }
-  const std::string& GetMasking() const { return m_masking; }
+  std::string GetMasking(const CFileExtensionProvider& fileExtensionProvider) const;
   void SetMasking(const std::string& masking) { m_masking = masking; }
 
 private:
diff --git a/xbmc/settings/windows/GUIControlSettings.cpp b/xbmc/settings/windows/GUIControlSettings.cpp
index 66bec24d72cf..c84a9ff297b2 100644
--- a/xbmc/settings/windows/GUIControlSettings.cpp
+++ b/xbmc/settings/windows/GUIControlSettings.cpp
@@ -817,7 +817,9 @@ bool CGUIControlButtonSetting::GetPath(std::shared_ptr<CSettingPath> pathSetting
   std::shared_ptr<const CSettingControlButton> control = std::static_pointer_cast<const CSettingControlButton>(pathSetting->GetControl());
   const auto heading = ::Localize(control->GetHeading(), localizer);
   if (control->GetFormat() == "file")
-    result = CGUIDialogFileBrowser::ShowAndGetFile(shares, pathSetting->GetMasking(), heading, path, control->UseImageThumbs(), control->UseFileDirectories());
+    result = CGUIDialogFileBrowser::ShowAndGetFile(
+      shares, pathSetting->GetMasking(CServiceBroker::GetFileExtensionProvider()), heading, path,
+      control->UseImageThumbs(), control->UseFileDirectories());
   else if (control->GetFormat() == "image")
     result = CGUIDialogFileBrowser::ShowAndGetImage(shares, heading, path);
   else

From 8404a5e42b285adfce6c3d63ec1f69d2991aca5b Mon Sep 17 00:00:00 2001
From: montellese <montellese@kodi.tv>
Date: Sat, 21 Sep 2019 21:13:17 +0200
Subject: [PATCH 4/9] [settings] fix parsing of path setting with <control
 type="button" format="image">

---
 xbmc/settings/SettingPath.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/xbmc/settings/SettingPath.cpp b/xbmc/settings/SettingPath.cpp
index 23026a231621..9258a0fe07e4 100644
--- a/xbmc/settings/SettingPath.cpp
+++ b/xbmc/settings/SettingPath.cpp
@@ -45,7 +45,7 @@ bool CSettingPath::Deserialize(const TiXmlNode *node, bool update /* = false */)
     return false;
 
   if (m_control != nullptr &&
-     (m_control->GetType() != "button" || (m_control->GetFormat() != "path" && m_control->GetFormat() != "file")))
+     (m_control->GetType() != "button" || (m_control->GetFormat() != "path" && m_control->GetFormat() != "file" && m_control->GetFormat() != "image")))
   {
     CLog::Log(LOGERROR, "CSettingPath: invalid <control> of \"%s\"", m_id.c_str());
     return false;

From 253141723d2684e78d12f783a013a51b1154d5cc Mon Sep 17 00:00:00 2001
From: montellese <montellese@kodi.tv>
Date: Sun, 22 Sep 2019 20:28:30 +0200
Subject: [PATCH 5/9] [settings] support "sort" attribute on <options>
 constraint of integer and string settings

---
 xbmc/addons/settings/AddonSettings.cpp       |  9 ++++-
 xbmc/settings/lib/Setting.cpp                | 33 ++++++++++++++-
 xbmc/settings/lib/Setting.h                  |  6 +++
 xbmc/settings/lib/SettingDefinitions.h       |  7 ++++
 xbmc/settings/windows/GUIControlSettings.cpp | 42 ++++++++++++++++++++
 5 files changed, 94 insertions(+), 3 deletions(-)

diff --git a/xbmc/addons/settings/AddonSettings.cpp b/xbmc/addons/settings/AddonSettings.cpp
index e6189abbee8f..8afb6e4a0a04 100644
--- a/xbmc/addons/settings/AddonSettings.cpp
+++ b/xbmc/addons/settings/AddonSettings.cpp
@@ -1074,9 +1074,10 @@ SettingPtr CAddonSettings::InitializeFromOldSettingEnums(const std::string& sett
   const auto settingEntries = StringUtils::Split(XMLUtils::GetAttribute(settingElement, "entries"), OldSettingValuesSeparator);
 
   // process sort
+  bool sortAscending = false;
   std::string sort = XMLUtils::GetAttribute(settingElement, "sort");
   if (sort == "true" || sort == "yes")
-    std::sort(values.begin(), values.end(), sortstringbyname());
+    sortAscending = true;
 
   SettingPtr setting = nullptr;
   if (settingType == "enum")
@@ -1114,6 +1115,9 @@ SettingPtr CAddonSettings::InitializeFromOldSettingEnums(const std::string& sett
       settingInt->SetTranslatableOptions(options);
     }
 
+    if (sortAscending)
+      settingInt->SetOptionsSort(SettingOptionsSort::Ascending);
+
     // set the default value
     if (settingInt->FromString(defaultValue))
       settingInt->SetDefault(settingInt->GetValue());
@@ -1154,6 +1158,9 @@ SettingPtr CAddonSettings::InitializeFromOldSettingEnums(const std::string& sett
       settingString->SetTranslatableOptions(options);
     }
 
+    if (sortAscending)
+      settingString->SetOptionsSort(SettingOptionsSort::Ascending);
+
     // set the default value
     settingString->SetDefault(defaultValue);
 
diff --git a/xbmc/settings/lib/Setting.cpp b/xbmc/settings/lib/Setting.cpp
index 144463bdf3e9..4d54630d5bc8 100644
--- a/xbmc/settings/lib/Setting.cpp
+++ b/xbmc/settings/lib/Setting.cpp
@@ -42,6 +42,29 @@ bool CheckSettingOptionsValidity(const TValue& value, const std::vector<TKey>& o
   return false;
 }
 
+bool DeserializeOptionsSort(const TiXmlElement* optionsElement, SettingOptionsSort& optionsSort)
+{
+  optionsSort = SettingOptionsSort::NoSorting;
+
+  std::string sort;
+  if (optionsElement->QueryStringAttribute("sort", &sort) != TIXML_SUCCESS)
+    return true;
+
+  if (StringUtils::EqualsNoCase(sort, "false") || StringUtils::EqualsNoCase(sort, "off") ||
+    StringUtils::EqualsNoCase(sort, "no") || StringUtils::EqualsNoCase(sort, "disabled"))
+    optionsSort = SettingOptionsSort::NoSorting;
+  else if (StringUtils::EqualsNoCase(sort, "asc") || StringUtils::EqualsNoCase(sort, "ascending") ||
+    StringUtils::EqualsNoCase(sort, "true") || StringUtils::EqualsNoCase(sort, "on") ||
+    StringUtils::EqualsNoCase(sort, "yes") || StringUtils::EqualsNoCase(sort, "enabled"))
+    optionsSort = SettingOptionsSort::Ascending;
+  else if (StringUtils::EqualsNoCase(sort, "desc") || StringUtils::EqualsNoCase(sort, "descending"))
+    optionsSort = SettingOptionsSort::Descending;
+  else
+    return false;
+
+  return true;
+}
+
 CSetting::CSetting(const std::string &id, CSettingsManager *settingsManager /* = nullptr */)
   : ISetting(id, settingsManager)
 { }
@@ -764,9 +787,12 @@ bool CSettingInt::Deserialize(const TiXmlNode *node, bool update /* = false */)
   if (constraints != nullptr)
   {
     // get the entries
-    auto options = constraints->FirstChild(SETTING_XML_ELM_OPTIONS);
+    auto options = constraints->FirstChildElement(SETTING_XML_ELM_OPTIONS);
     if (options != nullptr && options->FirstChild() != nullptr)
     {
+      if (!DeserializeOptionsSort(options, m_optionsSort))
+        CLog::Log(LOGWARNING, "CSettingInt: invalid \"sort\" attribute of <" SETTING_XML_ELM_OPTIONS "> for \"%s\"", m_id.c_str());
+
       if (options->FirstChild()->Type() == TiXmlNode::TINYXML_TEXT)
       {
         m_optionsFillerName = options->FirstChild()->ValueStr();
@@ -1195,9 +1221,12 @@ bool CSettingString::Deserialize(const TiXmlNode *node, bool update /* = false *
     XMLUtils::GetBoolean(constraints, SETTING_XML_ELM_ALLOWEMPTY, m_allowEmpty);
 
     // get the entries
-    auto options = constraints->FirstChild(SETTING_XML_ELM_OPTIONS);
+    auto options = constraints->FirstChildElement(SETTING_XML_ELM_OPTIONS);
     if (options != nullptr && options->FirstChild() != nullptr)
     {
+      if (!DeserializeOptionsSort(options, m_optionsSort))
+        CLog::Log(LOGWARNING, "CSettingInt: invalid \"sort\" attribute of <" SETTING_XML_ELM_OPTIONS "> for \"%s\"", m_id.c_str());
+
       if (options->FirstChild()->Type() == TiXmlNode::TINYXML_TEXT)
       {
         m_optionsFillerName = options->FirstChild()->ValueStr();
diff --git a/xbmc/settings/lib/Setting.h b/xbmc/settings/lib/Setting.h
index ca78598ecc6e..c7c0e9bc65fc 100644
--- a/xbmc/settings/lib/Setting.h
+++ b/xbmc/settings/lib/Setting.h
@@ -302,6 +302,8 @@ class CSettingInt : public CTraitedSetting<int, SettingType::Integer>
     m_optionsFillerData = data;
   }
   IntegerSettingOptions UpdateDynamicOptions();
+  SettingOptionsSort GetOptionsSort() const { return m_optionsSort; }
+  void SetOptionsSort(SettingOptionsSort optionsSort) { m_optionsSort = optionsSort; }
 
 private:
   void copy(const CSettingInt &setting);
@@ -318,6 +320,7 @@ class CSettingInt : public CTraitedSetting<int, SettingType::Integer>
   IntegerSettingOptionsFiller m_optionsFiller = nullptr;
   void *m_optionsFillerData = nullptr;
   IntegerSettingOptions m_dynamicOptions;
+  SettingOptionsSort m_optionsSort = SettingOptionsSort::NoSorting;
 };
 
 /*!
@@ -416,6 +419,8 @@ class CSettingString : public CTraitedSetting<std::string, SettingType::String>
     m_optionsFillerData = data;
   }
   StringSettingOptions UpdateDynamicOptions();
+  SettingOptionsSort GetOptionsSort() const { return m_optionsSort; }
+  void SetOptionsSort(SettingOptionsSort optionsSort) { m_optionsSort = optionsSort; }
 
 protected:
   virtual void copy(const CSettingString &setting);
@@ -429,6 +434,7 @@ class CSettingString : public CTraitedSetting<std::string, SettingType::String>
   StringSettingOptionsFiller m_optionsFiller = nullptr;
   void *m_optionsFillerData = nullptr;
   StringSettingOptions m_dynamicOptions;
+  SettingOptionsSort m_optionsSort = SettingOptionsSort::NoSorting;
 };
 
 /*!
diff --git a/xbmc/settings/lib/SettingDefinitions.h b/xbmc/settings/lib/SettingDefinitions.h
index 6191778ce21a..22e573923236 100644
--- a/xbmc/settings/lib/SettingDefinitions.h
+++ b/xbmc/settings/lib/SettingDefinitions.h
@@ -98,3 +98,10 @@ using StringSettingOptions = std::vector<StringSettingOption>;
 class CSetting;
 using IntegerSettingOptionsFiller = void (*)(std::shared_ptr<const CSetting> setting, IntegerSettingOptions &list, int &current, void *data);
 using StringSettingOptionsFiller = void (*)(std::shared_ptr<const CSetting> setting, StringSettingOptions &list, std::string &current, void *data);
+
+enum class SettingOptionsSort
+{
+  NoSorting,
+  Ascending,
+  Descending
+};
diff --git a/xbmc/settings/windows/GUIControlSettings.cpp b/xbmc/settings/windows/GUIControlSettings.cpp
index c84a9ff297b2..51eb64dfbd6f 100644
--- a/xbmc/settings/windows/GUIControlSettings.cpp
+++ b/xbmc/settings/windows/GUIControlSettings.cpp
@@ -67,6 +67,18 @@ static CFileItemPtr GetFileItem(const std::string& label, const TValueType& valu
   return item;
 }
 
+template<class SettingOption>
+static bool CompareSettingOptionAseconding(const SettingOption& lhs, const SettingOption& rhs)
+{
+  return StringUtils::CompareNoCase(lhs.label, rhs.label) < 0;
+}
+
+template<class SettingOption>
+static bool CompareSettingOptionDeseconding(const SettingOption& lhs, const SettingOption& rhs)
+{
+  return StringUtils::CompareNoCase(lhs.label, rhs.label) > 0;
+}
+
 static bool GetIntegerOptions(SettingConstPtr setting, IntegerSettingOptions& options, std::set<int>& selectedOptions, ILocalizer* localizer)
 {
   std::shared_ptr<const CSettingInt> pSettingInt = NULL;
@@ -138,6 +150,21 @@ static bool GetIntegerOptions(SettingConstPtr setting, IntegerSettingOptions& op
     }
   }
 
+  switch (pSettingInt->GetOptionsSort())
+  {
+  case SettingOptionsSort::Ascending:
+    std::sort(options.begin(), options.end(), CompareSettingOptionAseconding<IntegerSettingOption>);
+    break;
+
+  case SettingOptionsSort::Descending:
+    std::sort(options.begin(), options.end(), CompareSettingOptionDeseconding<IntegerSettingOption>);
+    break;
+
+  case SettingOptionsSort::NoSorting:
+  default:
+    break;
+  }
+
   return true;
 }
 
@@ -196,6 +223,21 @@ static bool GetStringOptions(SettingConstPtr setting, StringSettingOptions& opti
       return false;
   }
 
+  switch (pSettingString->GetOptionsSort())
+  {
+  case SettingOptionsSort::Ascending:
+    std::sort(options.begin(), options.end(), CompareSettingOptionAseconding<StringSettingOption>);
+    break;
+
+  case SettingOptionsSort::Descending:
+    std::sort(options.begin(), options.end(), CompareSettingOptionDeseconding<StringSettingOption>);
+    break;
+
+  case SettingOptionsSort::NoSorting:
+  default:
+    break;
+  }
+
   return true;
 }
 

From c3927d8a3047af0cc6b07f0d18157320657b7db5 Mon Sep 17 00:00:00 2001
From: montellese <montellese@kodi.tv>
Date: Sun, 22 Sep 2019 22:21:23 +0200
Subject: [PATCH 6/9] [settings] fix missing label for multiselect (list)
 add-on settings (fixes #15423)

---
 xbmc/settings/windows/GUIControlSettings.cpp | 59 ++++++++++++++------
 1 file changed, 41 insertions(+), 18 deletions(-)

diff --git a/xbmc/settings/windows/GUIControlSettings.cpp b/xbmc/settings/windows/GUIControlSettings.cpp
index 51eb64dfbd6f..1a21d93b1a48 100644
--- a/xbmc/settings/windows/GUIControlSettings.cpp
+++ b/xbmc/settings/windows/GUIControlSettings.cpp
@@ -755,33 +755,56 @@ void CGUIControlButtonSetting::Update(bool updateDisplayOnly /* = false */)
   {
     if (!std::static_pointer_cast<const CSettingControlButton>(control)->HideValue())
     {
-      switch (m_pSetting->GetType())
+      auto setting = m_pSetting;
+      if (m_pSetting->GetType() == SettingType::List)
+        setting = std::static_pointer_cast<CSettingList>(m_pSetting)->GetDefinition();
+
+      switch (setting->GetType())
       {
       case SettingType::String:
       {
-        std::string strValue = std::static_pointer_cast<CSettingString>(m_pSetting)->GetValue();
         if (controlFormat == "addon")
         {
-          ADDON::AddonPtr addon;
-          if (CServiceBroker::GetAddonMgr().GetAddon(strValue, addon))
-            strText = addon->Name();
-          if (strText.empty())
+          std::vector<std::string> addonIDs;
+          if (m_pSetting->GetType() == SettingType::List)
+          {
+            for (const auto& addonSetting : std::static_pointer_cast<CSettingList>(m_pSetting)->GetValue())
+              addonIDs.push_back(std::static_pointer_cast<CSettingAddon>(addonSetting)->GetValue());
+          }
+          else
+            addonIDs.push_back(std::static_pointer_cast<CSettingString>(setting)->GetValue());
+
+          std::vector<std::string> addonNames;
+          for (const auto addonID : addonIDs)
+          {
+            ADDON::AddonPtr addon;
+            if (CServiceBroker::GetAddonMgr().GetAddon(addonID, addon))
+              addonNames.push_back(addon->Name());
+          }
+
+          if (addonNames.empty())
             strText = g_localizeStrings.Get(231); // None
+          else
+            strText = StringUtils::Join(addonNames, ", ");
         }
-        else if (controlFormat == "path" || controlFormat == "file" || controlFormat == "image")
-        {
-          std::string shortPath;
-          if (CUtil::MakeShortenPath(strValue, shortPath, 30))
-            strText = shortPath;
-        }
-        else if (controlFormat == "infolabel")
+        else
         {
-          strText = strValue;
-          if (strText.empty())
-            strText = g_localizeStrings.Get(231); // None
+          std::string strValue = std::static_pointer_cast<CSettingString>(setting)->GetValue();
+          if (controlFormat == "path" || controlFormat == "file" || controlFormat == "image")
+          {
+            std::string shortPath;
+            if (CUtil::MakeShortenPath(strValue, shortPath, 30))
+              strText = shortPath;
+          }
+          else if (controlFormat == "infolabel")
+          {
+            strText = strValue;
+            if (strText.empty())
+              strText = g_localizeStrings.Get(231); // None
+          }
+          else
+            strText = strValue;
         }
-        else
-          strText = strValue;
 
         break;
       }

From 272b7333983caac17e8f7f8bd8c7b0f4add4ba1e Mon Sep 17 00:00:00 2001
From: montellese <montellese@kodi.tv>
Date: Sun, 22 Sep 2019 23:22:37 +0200
Subject: [PATCH 7/9] [addons/settings] fix empty labels showing up with wrong
 translated string

---
 xbmc/addons/settings/AddonSettings.cpp | 21 +++++++++++----------
 1 file changed, 11 insertions(+), 10 deletions(-)

diff --git a/xbmc/addons/settings/AddonSettings.cpp b/xbmc/addons/settings/AddonSettings.cpp
index 8afb6e4a0a04..bb2a0145f0ed 100644
--- a/xbmc/addons/settings/AddonSettings.cpp
+++ b/xbmc/addons/settings/AddonSettings.cpp
@@ -1341,18 +1341,19 @@ bool CAddonSettings::ParseOldLabel(const TiXmlElement* element, const std::strin
   std::string labelString;
   element->QueryStringAttribute("label", &labelString);
 
+  bool parsed = !labelString.empty();
 
   // try to parse the label as a pure number, i.e. a localized string
-  char *endptr;
-  labelId = std::strtol(labelString.c_str(), &endptr, 10);
-  if (endptr == nullptr || *endptr == '\0')
-    return true;
-
-
-  // as a last resort use the setting's identifier as a label
-  bool parsed = !labelString.empty();
-  if (!parsed)
-    labelString = settingId;
+  if (parsed)
+  {
+    char* endptr;
+    labelId = std::strtol(labelString.c_str(), &endptr, 10);
+    if (endptr == nullptr || *endptr == '\0')
+      return true;
+  }
+  // make sure the label string is not empty
+  else
+    labelString = " ";
 
   labelId = m_unknownSettingLabelId;
   m_unknownSettingLabelId += 1;

From 84b719c36b4aebc1fd8d92230d051cc0c3c9af41 Mon Sep 17 00:00:00 2001
From: montellese <montellese@kodi.tv>
Date: Tue, 24 Sep 2019 22:28:37 +0200
Subject: [PATCH 8/9] [addons/settings] add missing
 CGUIDialogAddonSettings::OnSettingAction()

---
 xbmc/addons/settings/GUIDialogAddonSettings.cpp | 8 ++++++++
 xbmc/addons/settings/GUIDialogAddonSettings.h   | 3 +++
 2 files changed, 11 insertions(+)

diff --git a/xbmc/addons/settings/GUIDialogAddonSettings.cpp b/xbmc/addons/settings/GUIDialogAddonSettings.cpp
index 39debc8ebb87..79efd9cfb293 100644
--- a/xbmc/addons/settings/GUIDialogAddonSettings.cpp
+++ b/xbmc/addons/settings/GUIDialogAddonSettings.cpp
@@ -249,3 +249,11 @@ CSettingsManager* CGUIDialogAddonSettings::GetSettingsManager() const
 
   return m_addon->GetSettings()->GetSettingsManager();
 }
+
+void CGUIDialogAddonSettings::OnSettingAction(std::shared_ptr<const CSetting> setting)
+{
+  if (m_addon == nullptr || m_addon->GetSettings() == nullptr)
+    return;
+
+  m_addon->GetSettings()->OnSettingAction(setting);
+}
diff --git a/xbmc/addons/settings/GUIDialogAddonSettings.h b/xbmc/addons/settings/GUIDialogAddonSettings.h
index 64c907b02173..bfca9833b62d 100644
--- a/xbmc/addons/settings/GUIDialogAddonSettings.h
+++ b/xbmc/addons/settings/GUIDialogAddonSettings.h
@@ -39,6 +39,9 @@ class CGUIDialogAddonSettings : public CGUIDialogSettingsManagerBase
   void Save() override { }
   CSettingsManager* GetSettingsManager() const override;
 
+  // implementation of ISettingCallback
+  void OnSettingAction(std::shared_ptr<const CSetting> setting) override;
+
 private:
   ADDON::AddonPtr m_addon;
   bool m_saveToDisk = false;

From a2ca3e92e2f4ea8e1e8a04e72f88faa616ff3a89 Mon Sep 17 00:00:00 2001
From: montellese <montellese@kodi.tv>
Date: Tue, 24 Sep 2019 23:16:53 +0200
Subject: [PATCH 9/9] [settings] catch formatting exception in
 CGUIControlSliderSetting::GetText() and fall back to default formatting
 labels (fixes #16663)

---
 xbmc/settings/SettingControl.cpp             | 23 ++++++---
 xbmc/settings/SettingControl.h               |  3 +-
 xbmc/settings/windows/GUIControlSettings.cpp | 53 +++++++++++++++-----
 xbmc/settings/windows/GUIControlSettings.h   |  4 +-
 4 files changed, 62 insertions(+), 21 deletions(-)

diff --git a/xbmc/settings/SettingControl.cpp b/xbmc/settings/SettingControl.cpp
index f2b6e2e1fb1a..e69559e65f18 100644
--- a/xbmc/settings/SettingControl.cpp
+++ b/xbmc/settings/SettingControl.cpp
@@ -260,21 +260,30 @@ bool CSettingControlSlider::Deserialize(const TiXmlNode *node, bool update /* =
 
 bool CSettingControlSlider::SetFormat(const std::string &format)
 {
-  if (StringUtils::EqualsNoCase(format, "percentage"))
-    m_formatString = "%i %%";
-  else if (StringUtils::EqualsNoCase(format, "integer"))
-    m_formatString = "%d";
-  else if (StringUtils::EqualsNoCase(format, "number"))
-    m_formatString = "%.1f";
-  else
+  if (!StringUtils::EqualsNoCase(format, "percentage") &&
+      !StringUtils::EqualsNoCase(format, "integer") &&
+      !StringUtils::EqualsNoCase(format, "number"))
     return false;
 
   m_format = format;
   StringUtils::ToLower(m_format);
+  m_formatString = GetDefaultFormatString();
 
   return true;
 }
 
+std::string CSettingControlSlider::GetDefaultFormatString() const
+{
+  if (m_format == "percentage")
+    return "{} %";
+  if (m_format == "integer")
+    return "{:d}";
+  if (m_format == "number")
+    return "{:.1f}";
+
+  return "{}";
+}
+
 bool CSettingControlRange::Deserialize(const TiXmlNode *node, bool update /* = false */)
 {
   if (!ISettingControl::Deserialize(node, update))
diff --git a/xbmc/settings/SettingControl.h b/xbmc/settings/SettingControl.h
index 3a2da4b93b34..f15095cc43bd 100644
--- a/xbmc/settings/SettingControl.h
+++ b/xbmc/settings/SettingControl.h
@@ -221,6 +221,7 @@ class CSettingControlSlider : public ISettingControl
   void SetFormatLabel(int formatLabel) { m_formatLabel = formatLabel; }
   const std::string& GetFormatString() const { return m_formatString; }
   void SetFormatString(const std::string &formatString) { m_formatString = formatString; }
+  std::string GetDefaultFormatString() const;
 
   SettingControlSliderFormatter GetFormatter() const { return m_formatter; }
   void SetFormatter(SettingControlSliderFormatter formatter) { m_formatter = formatter; }
@@ -229,7 +230,7 @@ class CSettingControlSlider : public ISettingControl
   int m_heading = -1;
   bool m_popup = false;
   int m_formatLabel = -1;
-  std::string m_formatString = "%i";
+  std::string m_formatString;
   SettingControlSliderFormatter m_formatter = nullptr;
 };
 
diff --git a/xbmc/settings/windows/GUIControlSettings.cpp b/xbmc/settings/windows/GUIControlSettings.cpp
index 1a21d93b1a48..da6a141b6d39 100644
--- a/xbmc/settings/windows/GUIControlSettings.cpp
+++ b/xbmc/settings/windows/GUIControlSettings.cpp
@@ -38,6 +38,7 @@
 #include "storage/MediaManager.h"
 #include "utils/StringUtils.h"
 #include "utils/Variant.h"
+#include "utils/log.h"
 
 #include <set>
 #include <utility>
@@ -831,7 +832,7 @@ void CGUIControlButtonSetting::Update(bool updateDisplayOnly /* = false */)
       case SettingType::Integer:
       {
         std::shared_ptr<const CSettingInt> settingInt = std::static_pointer_cast<CSettingInt>(m_pSetting);
-        strText = CGUIControlSliderSetting::GetText(std::static_pointer_cast<const CSettingControlSlider>(m_pSetting->GetControl()),
+        strText = CGUIControlSliderSetting::GetText(m_pSetting,
           settingInt->GetValue(), settingInt->GetMinimum(), settingInt->GetStep(), settingInt->GetMaximum(), m_localizer);
         break;
       }
@@ -839,7 +840,7 @@ void CGUIControlButtonSetting::Update(bool updateDisplayOnly /* = false */)
       case SettingType::Number:
       {
         std::shared_ptr<const CSettingNumber> settingNumber = std::static_pointer_cast<CSettingNumber>(m_pSetting);
-        strText = CGUIControlSliderSetting::GetText(std::static_pointer_cast<const CSettingControlSlider>(m_pSetting->GetControl()),
+        strText = CGUIControlSliderSetting::GetText(m_pSetting,
           settingNumber->GetValue(), settingNumber->GetMinimum(), settingNumber->GetStep(), settingNumber->GetMaximum(), m_localizer);
         break;
       }
@@ -908,7 +909,7 @@ void CGUIControlButtonSetting::OnSliderChange(void *data, CGUISliderControl *sli
     {
       std::shared_ptr<CSettingInt> settingInt = std::static_pointer_cast<CSettingInt>(m_pSetting);
       if (settingInt->SetValue(slider->GetIntValue()))
-        strText = CGUIControlSliderSetting::GetText(std::static_pointer_cast<const CSettingControlSlider>(m_pSetting->GetControl()),
+        strText = CGUIControlSliderSetting::GetText(m_pSetting,
           settingInt->GetValue(), settingInt->GetMinimum(), settingInt->GetStep(), settingInt->GetMaximum(), m_localizer);
       break;
     }
@@ -917,7 +918,7 @@ void CGUIControlButtonSetting::OnSliderChange(void *data, CGUISliderControl *sli
     {
       std::shared_ptr<CSettingNumber> settingNumber = std::static_pointer_cast<CSettingNumber>(m_pSetting);
       if (settingNumber->SetValue(static_cast<double>(slider->GetFloatValue())))
-        strText = CGUIControlSliderSetting::GetText(std::static_pointer_cast<const CSettingControlSlider>(m_pSetting->GetControl()),
+        strText = CGUIControlSliderSetting::GetText(m_pSetting,
           settingNumber->GetValue(), settingNumber->GetMinimum(), settingNumber->GetStep(), settingNumber->GetMaximum(), m_localizer);
       break;
     }
@@ -1110,7 +1111,7 @@ void CGUIControlSliderSetting::Update(bool updateDisplayOnly /* = false */)
         m_pSlider->SetIntValue(value);
       }
 
-      strText = CGUIControlSliderSetting::GetText(std::static_pointer_cast<const CSettingControlSlider>(m_pSetting->GetControl()),
+      strText = CGUIControlSliderSetting::GetText(m_pSetting,
         value, settingInt->GetMinimum(), settingInt->GetStep(), settingInt->GetMaximum(), m_localizer);
       break;
     }
@@ -1127,7 +1128,7 @@ void CGUIControlSliderSetting::Update(bool updateDisplayOnly /* = false */)
         m_pSlider->SetFloatValue((float)value);
       }
 
-      strText = CGUIControlSliderSetting::GetText(std::static_pointer_cast<const CSettingControlSlider>(m_pSetting->GetControl()),
+      strText = CGUIControlSliderSetting::GetText(m_pSetting,
         value, settingNumber->GetMinimum(), settingNumber->GetStep(), settingNumber->GetMaximum(), m_localizer);
       break;
     }
@@ -1140,10 +1141,14 @@ void CGUIControlSliderSetting::Update(bool updateDisplayOnly /* = false */)
     m_pSlider->SetTextValue(strText);
 }
 
-std::string CGUIControlSliderSetting::GetText(std::shared_ptr<const CSettingControlSlider> control, const CVariant &value, const CVariant &minimum, const CVariant &step, const CVariant &maximum, ILocalizer* localizer)
+std::string CGUIControlSliderSetting::GetText(std::shared_ptr<CSetting> setting, const CVariant &value, const CVariant &minimum, const CVariant &step, const CVariant &maximum, ILocalizer* localizer)
 {
-  if (control == NULL ||
-      !(value.isInteger() || value.isDouble()))
+  if (setting == NULL ||
+    !(value.isInteger() || value.isDouble()))
+    return "";
+
+  const auto control = std::static_pointer_cast<const CSettingControlSlider>(setting->GetControl());
+  if (control == NULL)
     return "";
 
   SettingControlSliderFormatter formatter = control->GetFormatter();
@@ -1154,10 +1159,34 @@ std::string CGUIControlSliderSetting::GetText(std::shared_ptr<const CSettingCont
   if (control->GetFormatLabel() > -1)
     formatString = ::Localize(control->GetFormatLabel(), localizer);
 
-  if (value.isDouble())
-    return StringUtils::Format(formatString.c_str(), value.asDouble());
+  std::string formattedString;
+  if (FormatText(formatString, value, setting->GetId(), formattedString))
+    return formattedString;
+
+  // fall back to default formatting
+  formatString = control->GetDefaultFormatString();
+  if (FormatText(formatString, value, setting->GetId(), formattedString))
+    return formattedString;
 
-  return StringUtils::Format(formatString.c_str(), static_cast<int>(value.asInteger()));
+  return "";
+}
+
+bool CGUIControlSliderSetting::FormatText(const std::string& formatString, const CVariant &value, const std::string& settingId, std::string& formattedText)
+{
+  try
+  {
+    if (value.isDouble())
+      formattedText = StringUtils::Format(formatString.c_str(), value.asDouble());
+    else
+      formattedText = StringUtils::Format(formatString.c_str(), static_cast<int>(value.asInteger()));
+  }
+  catch (const std::runtime_error& err)
+  {
+    CLog::Log(LOGERROR, "Invalid formatting with string \"{}\" for setting \"{}\": {}", formatString, settingId, err.what());
+    return false;
+  }
+
+  return true;
 }
 
 CGUIControlRangeSetting::CGUIControlRangeSetting(CGUISettingsSliderControl *pSlider, int id, std::shared_ptr<CSetting> pSetting, ILocalizer* localizer)
diff --git a/xbmc/settings/windows/GUIControlSettings.h b/xbmc/settings/windows/GUIControlSettings.h
index a06238844c57..d673feb227a3 100644
--- a/xbmc/settings/windows/GUIControlSettings.h
+++ b/xbmc/settings/windows/GUIControlSettings.h
@@ -188,9 +188,11 @@ class CGUIControlSliderSetting : public CGUIControlBaseSetting
   void Update(bool updateDisplayOnly = false) override;
   void Clear() override { m_pSlider = NULL; }
 
-  static std::string GetText(std::shared_ptr<const CSettingControlSlider> control, const CVariant &value, const CVariant &minimum, const CVariant &step, const CVariant &maximum, ILocalizer* localizer);
+  static std::string GetText(std::shared_ptr<CSetting> setting, const CVariant &value, const CVariant &minimum, const CVariant &step, const CVariant &maximum, ILocalizer* localizer);
 
 private:
+  static bool FormatText(const std::string& formatString, const CVariant &value, const std::string& settingId, std::string& formattedText);
+
   CGUISettingsSliderControl *m_pSlider;
 };
 
