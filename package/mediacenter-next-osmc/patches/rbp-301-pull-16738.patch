From a1d625ddb87e8e89290a6d907875974a1e0eb2e2 Mon Sep 17 00:00:00 2001
From: Kai Sommerfeld <kai.sommerfeld@gmx.com>
Date: Tue, 8 Oct 2019 17:25:19 +0200
Subject: [PATCH] [PVR] EPG database: Fix persisting/restoring of optional(\!)
 firstAired date.

---
 xbmc/pvr/epg/EpgDatabase.cpp | 18 ++++++++++++------
 1 file changed, 12 insertions(+), 6 deletions(-)

diff --git a/xbmc/pvr/epg/EpgDatabase.cpp b/xbmc/pvr/epg/EpgDatabase.cpp
index 22db957c2743..e7011db7f4c2 100644
--- a/xbmc/pvr/epg/EpgDatabase.cpp
+++ b/xbmc/pvr/epg/EpgDatabase.cpp
@@ -243,7 +243,7 @@ std::vector<std::shared_ptr<CPVREpgInfoTag>> CPVREpgDatabase::Get(const CPVREpg&
       {
         std::shared_ptr<CPVREpgInfoTag> newTag(new CPVREpgInfoTag());
 
-        time_t iStartTime, iEndTime, iFirstAired;
+        time_t iStartTime, iEndTime;
         iStartTime = (time_t) m_pDS->fv("iStartTime").get_asInt();
         CDateTime startTime(iStartTime);
         newTag->m_startTime = startTime;
@@ -252,9 +252,12 @@ std::vector<std::shared_ptr<CPVREpgInfoTag>> CPVREpgDatabase::Get(const CPVREpg&
         CDateTime endTime(iEndTime);
         newTag->m_endTime = endTime;
 
-        iFirstAired = (time_t) m_pDS->fv("iFirstAired").get_asInt();
-        CDateTime firstAired(iFirstAired);
-        newTag->m_firstAired = firstAired;
+        time_t iFirstAired = static_cast<time_t>(m_pDS->fv("iFirstAired").get_asInt());
+        if (iFirstAired > 0)
+        {
+          const CDateTime firstAired(iFirstAired);
+          newTag->m_firstAired = firstAired;
+        }
 
         int iBroadcastUID = m_pDS->fv("iBroadcastUid").get_asInt();
         // Compat: null value for broadcast uid changed from numerical -1 to 0 with PVR Addon API v4.0.0
@@ -364,10 +367,13 @@ int CPVREpgDatabase::Persist(const CPVREpgInfoTag& tag, bool bSingleUpdate /* =
     return iReturn;
   }
 
-  time_t iStartTime, iEndTime, iFirstAired;
+  time_t iStartTime, iEndTime;
   tag.StartAsUTC().GetAsTime(iStartTime);
   tag.EndAsUTC().GetAsTime(iEndTime);
-  tag.FirstAiredAsUTC().GetAsTime(iFirstAired);
+
+  time_t iFirstAired = 0;
+  if (tag.FirstAiredAsUTC().IsValid())
+    tag.FirstAiredAsUTC().GetAsTime(iFirstAired);
 
   int iBroadcastId = tag.DatabaseID();
   std::string strQuery;
