From efd56f35280ba8f774cfe465bfc3dabbab79685c Mon Sep 17 00:00:00 2001
From: Rainer Hochecker <fernetmenta@online.de>
Date: Tue, 14 Aug 2018 09:03:44 +0200
Subject: [PATCH 1/3] VideoPlayer: LinuxRendererGL - cleanup

---
 .../HwDecRender/RendererVAAPIGL.cpp           |  6 +-
 .../HwDecRender/RendererVDPAU.cpp             | 14 ++--
 .../HwDecRender/RendererVTBGL.cpp             |  8 +-
 .../VideoRenderers/LinuxRendererGL.cpp        | 42 +++--------
 .../VideoRenderers/LinuxRendererGL.h          | 75 +++++++++----------
 5 files changed, 61 insertions(+), 84 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVAAPIGL.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVAAPIGL.cpp
index d1d9faf9fd9d..47b488c1fb42 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVAAPIGL.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVAAPIGL.cpp
@@ -152,12 +152,12 @@ bool CRendererVAAPI::CreateTexture(int index)
 
   CPictureBuffer &buf = m_buffers[index];
   YuvImage &im = buf.image;
-  YUVPLANE (&planes)[YuvImage::MAX_PLANES] = buf.fields[0];
+  CYuvPlane (&planes)[YuvImage::MAX_PLANES] = buf.fields[0];
 
   DeleteTexture(index);
 
   memset(&im, 0, sizeof(im));
-  memset(&planes, 0, sizeof(YUVPLANE[YuvImage::MAX_PLANES]));
+  memset(&planes, 0, sizeof(CYuvPlane[YuvImage::MAX_PLANES]));
   im.height = m_sourceHeight;
   im.width  = m_sourceWidth;
   im.cshift_x = 1;
@@ -214,7 +214,7 @@ bool CRendererVAAPI::UploadTexture(int index)
   m_buffers[index].m_srcTextureBits = m_vaapiTextures[index]->GetBits();
 
   YuvImage &im = buf.image;
-  YUVPLANE (&planes)[3] = buf.fields[0];
+  CYuvPlane (&planes)[3] = buf.fields[0];
 
   auto size = m_vaapiTextures[index]->GetTextureSize();
   planes[0].texwidth  = size.Width();
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVDPAU.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVDPAU.cpp
index 68a6e62308bf..ec823c704508 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVDPAU.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVDPAU.cpp
@@ -278,12 +278,12 @@ bool CRendererVDPAU::CreateVDPAUTexture(int index)
 {
   CPictureBuffer &buf = m_buffers[index];
   YuvImage &im = buf.image;
-  YUVPLANE &plane = buf.fields[FIELD_FULL][0];
+  CYuvPlane &plane = buf.fields[FIELD_FULL][0];
 
   DeleteVDPAUTexture(index);
 
   memset(&im, 0, sizeof(im));
-  memset(&plane, 0, sizeof(YUVPLANE));
+  memset(&plane, 0, sizeof(CYuvPlane));
   im.height = m_sourceHeight;
   im.width = m_sourceWidth;
 
@@ -300,7 +300,7 @@ bool CRendererVDPAU::CreateVDPAUTexture(int index)
 void CRendererVDPAU::DeleteVDPAUTexture(int index)
 {
   CPictureBuffer &buf = m_buffers[index];
-  YUVPLANE &plane = buf.fields[FIELD_FULL][0];
+  CYuvPlane &plane = buf.fields[FIELD_FULL][0];
 
   plane.id = 0;
 }
@@ -310,7 +310,7 @@ bool CRendererVDPAU::UploadVDPAUTexture(int index)
   CPictureBuffer &buf = m_buffers[index];
   VDPAU::CVdpauRenderPicture *pic = dynamic_cast<VDPAU::CVdpauRenderPicture*>(buf.videoBuffer);
 
-  YUVPLANE &plane = buf.fields[FIELD_FULL][0];
+  CYuvPlane &plane = buf.fields[FIELD_FULL][0];
 
   if (!pic)
   {
@@ -355,13 +355,13 @@ bool CRendererVDPAU::CreateVDPAUTexture420(int index)
 {
   CPictureBuffer &buf = m_buffers[index];
   YuvImage &im = buf.image;
-  YUVPLANE (&planes)[YuvImage::MAX_PLANES] = buf.fields[0];
+  CYuvPlane (&planes)[YuvImage::MAX_PLANES] = buf.fields[0];
   GLuint *pbo = buf.pbo;
 
   DeleteVDPAUTexture420(index);
 
   memset(&im, 0, sizeof(im));
-  memset(&planes, 0, sizeof(YUVPLANE[YuvImage::MAX_PLANES]));
+  memset(&planes, 0, sizeof(CYuvPlane[YuvImage::MAX_PLANES]));
 
   im.cshift_x = 1;
   im.cshift_y = 1;
@@ -412,7 +412,7 @@ bool CRendererVDPAU::UploadVDPAUTexture420(int index)
   // YUV
   for (int f = FIELD_TOP; f<=FIELD_BOT ; f++)
   {
-    YUVPLANE (&planes)[YuvImage::MAX_PLANES] = buf.fields[f];
+    CYuvPlane (&planes)[YuvImage::MAX_PLANES] = buf.fields[f];
 
     planes[0].texwidth  = im.width;
     planes[0].texheight = im.height >> 1;
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVTBGL.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVTBGL.cpp
index a708a22d7fb1..862dc646b935 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVTBGL.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVTBGL.cpp
@@ -83,13 +83,13 @@ bool CRendererVTB::CreateTexture(int index)
 {
   CPictureBuffer &buf = m_buffers[index];
   YuvImage &im = buf.image;
-  YUVPLANE (&planes)[YuvImage::MAX_PLANES] = buf.fields[0];
+  CYuvPlane (&planes)[YuvImage::MAX_PLANES] = buf.fields[0];
 
   ReleaseBuffer(index);
   DeleteTexture(index);
 
   memset(&im    , 0, sizeof(im));
-  memset(&planes, 0, sizeof(YUVPLANE[YuvImage::MAX_PLANES]));
+  memset(&planes, 0, sizeof(CYuvPlane[YuvImage::MAX_PLANES]));
 
   im.bpp    = 1;
   im.width  = m_sourceWidth;
@@ -121,7 +121,7 @@ bool CRendererVTB::CreateTexture(int index)
 void CRendererVTB::DeleteTexture(int index)
 {
   CPictureBuffer& buf = m_buffers[index];
-  YUVPLANE (&planes)[YuvImage::MAX_PLANES] = buf.fields[0];
+  CYuvPlane (&planes)[YuvImage::MAX_PLANES] = buf.fields[0];
   buf.loaded = false;
 
   if (planes[0].id && glIsTexture(planes[0].id))
@@ -140,7 +140,7 @@ void CRendererVTB::DeleteTexture(int index)
 bool CRendererVTB::UploadTexture(int index)
 {
   CPictureBuffer &buf = m_buffers[index];
-  YUVPLANE (&planes)[YuvImage::MAX_PLANES] = m_buffers[index].fields[0];
+  CYuvPlane (&planes)[YuvImage::MAX_PLANES] = m_buffers[index].fields[0];
 
   VTB::CVideoBufferVTB *vb = dynamic_cast<VTB::CVideoBufferVTB*>(buf.videoBuffer);
   if (!vb)
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGL.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGL.cpp
index 2737b8419134..d78f1e8f90ac 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGL.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGL.cpp
@@ -113,33 +113,15 @@ CLinuxRendererGL::CLinuxRendererGL()
 {
   m_textureTarget = GL_TEXTURE_2D;
 
-  m_renderMethod = RENDER_GLSL;
-  m_renderQuality = RQ_SINGLEPASS;
   m_iFlags = 0;
   m_format = AV_PIX_FMT_NONE;
 
-  m_iYV12RenderBuffer = 0;
-  m_currentField = FIELD_FULL;
-  m_reloadShaders = 0;
-  m_pYUVShader = nullptr;
-  m_pVideoFilterShader = nullptr;
-  m_scalingMethod = VS_SCALINGMETHOD_LINEAR;
-  m_scalingMethodGui = (ESCALINGMETHOD)-1;
   m_useDithering = CServiceBroker::GetSettings().GetBool("videoscreen.dither");
   m_ditherDepth = CServiceBroker::GetSettings().GetInt("videoscreen.ditherdepth");
   m_fullRange = !CServiceBroker::GetWinSystem()->UseLimitedColor();
 
   m_fbo.width = 0.0;
   m_fbo.height = 0.0;
-  m_NumYV12Buffers = 0;
-  m_bConfigured = false;
-  m_bValidated = false;
-  m_clearColour = 0.0f;
-  m_pboSupported = false;
-  m_pboUsed = false;
-  m_nonLinStretch = false;
-  m_nonLinStretchGui = false;
-  m_pixelRatio = 0.0f;
 
   m_ColorManager.reset(new CColorManager());
   m_tCLUTTex = 0;
@@ -323,7 +305,7 @@ void CLinuxRendererGL::ReleaseBuffer(int idx)
   }
 }
 
-void CLinuxRendererGL::GetPlaneTextureSize(YUVPLANE& plane)
+void CLinuxRendererGL::GetPlaneTextureSize(CYuvPlane& plane)
 {
   /* texture is assumed to be bound */
   GLint width  = 0
@@ -353,7 +335,7 @@ void CLinuxRendererGL::CalculateTextureSourceRects(int source, int num_planes)
   {
     for(int plane = 0; plane < num_planes; plane++)
     {
-      YUVPLANE& p = buf.fields[field][plane];
+      CYuvPlane& p = buf.fields[field][plane];
 
       p.rect = m_sourceRect;
       p.width  = im->width;
@@ -415,7 +397,7 @@ void CLinuxRendererGL::CalculateTextureSourceRects(int source, int num_planes)
   }
 }
 
-void CLinuxRendererGL::LoadPlane(YUVPLANE& plane, int type,
+void CLinuxRendererGL::LoadPlane(CYuvPlane& plane, int type,
                                  unsigned width, unsigned height,
                                  int stride, int bpp, void* data)
 {
@@ -1050,7 +1032,7 @@ bool CLinuxRendererGL::Render(unsigned int flags, int renderBuffer)
 void CLinuxRendererGL::RenderSinglePass(int index, int field)
 {
   CPictureBuffer &buf = m_buffers[index];
-  YUVPLANE (&planes)[YuvImage::MAX_PLANES] = m_buffers[index].fields[field];
+  CYuvPlane (&planes)[YuvImage::MAX_PLANES] = m_buffers[index].fields[field];
 
   AVColorPrimaries srcPrim = GetSrcPrimaries(buf.m_srcPrimaries, buf.image.width, buf.image.height);
   if (srcPrim != m_srcPrimaries)
@@ -1216,7 +1198,7 @@ void CLinuxRendererGL::RenderSinglePass(int index, int field)
 void CLinuxRendererGL::RenderToFBO(int index, int field, bool weave /*= false*/)
 {
   CPictureBuffer &buf = m_buffers[index];
-  YUVPLANE (&planes)[YuvImage::MAX_PLANES] = m_buffers[index].fields[field];
+  CYuvPlane (&planes)[YuvImage::MAX_PLANES] = m_buffers[index].fields[field];
 
   AVColorPrimaries srcPrim = GetSrcPrimaries(buf.m_srcPrimaries, buf.image.width, buf.image.height);
   if (srcPrim != m_srcPrimaries)
@@ -1584,7 +1566,7 @@ void CLinuxRendererGL::RenderProgressiveWeave(int index, int field)
 
 void CLinuxRendererGL::RenderRGB(int index, int field)
 {
-  YUVPLANE &plane = m_buffers[index].fields[FIELD_FULL][0];
+  CYuvPlane &plane = m_buffers[index].fields[FIELD_FULL][0];
 
   glActiveTextureARB(GL_TEXTURE0);
 
@@ -1941,7 +1923,7 @@ bool CLinuxRendererGL::CreateYV12Texture(int index)
   for (int f = FIELD_FULL; f<=FIELD_BOT ; f++)
   {
     int fieldshift = (f==FIELD_FULL) ? 0 : 1;
-    YUVPLANE (&planes)[YuvImage::MAX_PLANES] = m_buffers[index].fields[f];
+    CYuvPlane (&planes)[YuvImage::MAX_PLANES] = m_buffers[index].fields[f];
 
     planes[0].texwidth  = im.width;
     planes[0].texheight = im.height >> fieldshift;
@@ -1959,7 +1941,7 @@ bool CLinuxRendererGL::CreateYV12Texture(int index)
 
     for (int p = 0; p < 3; p++)
     {
-      YUVPLANE &plane = planes[p];
+      CYuvPlane &plane = planes[p];
       if (plane.texwidth * plane.texheight == 0)
         continue;
 
@@ -2245,7 +2227,7 @@ bool CLinuxRendererGL::CreateNV12Texture(int index)
   for (int f = FIELD_FULL; f<=FIELD_BOT ; f++)
   {
     int fieldshift = (f==FIELD_FULL) ? 0 : 1;
-    YUVPLANE (&planes)[YuvImage::MAX_PLANES] = buf.fields[f];
+    CYuvPlane (&planes)[YuvImage::MAX_PLANES] = buf.fields[f];
 
     planes[0].texwidth  = im.width;
     planes[0].texheight = im.height >> fieldshift;
@@ -2263,7 +2245,7 @@ bool CLinuxRendererGL::CreateNV12Texture(int index)
 
     for(int p = 0; p < 2; p++)
     {
-      YUVPLANE &plane = planes[p];
+      CYuvPlane &plane = planes[p];
       if (plane.texwidth * plane.texheight == 0)
         continue;
 
@@ -2503,7 +2485,7 @@ bool CLinuxRendererGL::CreateYUV422PackedTexture(int index)
   for (int f = FIELD_FULL; f<=FIELD_BOT ; f++)
   {
     int fieldshift = (f==FIELD_FULL) ? 0 : 1;
-    YUVPLANE (&planes)[YuvImage::MAX_PLANES] = buf.fields[f];
+    CYuvPlane (&planes)[YuvImage::MAX_PLANES] = buf.fields[f];
 
     planes[0].texwidth  = im.width / 2;
     planes[0].texheight = im.height >> fieldshift;
@@ -2518,7 +2500,7 @@ bool CLinuxRendererGL::CreateYUV422PackedTexture(int index)
       planes[p].pixpertex_y = 1;
     }
 
-    YUVPLANE &plane = planes[0];
+    CYuvPlane &plane = planes[0];
     if (plane.texwidth * plane.texheight == 0)
       continue;
 
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGL.h b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGL.h
index 28f264bbc2f0..b48d838403b4 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGL.h
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGL.h
@@ -92,6 +92,7 @@ class CLinuxRendererGL : public CBaseRenderer
   bool Supports(ESCALINGMETHOD method) override;
 
 protected:
+
   bool Render(unsigned int flags, int renderBuffer);
   void ClearBackBuffer();
   void DrawBlackBars();
@@ -129,6 +130,16 @@ class CLinuxRendererGL : public CBaseRenderer
   void RenderRGB(int renderBuffer, int field);      // render using vdpau/vaapi hardware
   void RenderProgressiveWeave(int renderBuffer, int field); // render using vdpau hardware
 
+  struct CYuvPlane;
+  struct CPictureBuffer;
+
+  void BindPbo(CPictureBuffer& buff);
+  void UnBindPbo(CPictureBuffer& buff);
+  void LoadPlane(CYuvPlane& plane, int type,
+                 unsigned width,  unsigned height,
+                 int stride, int bpp, void* data);
+  void GetPlaneTextureSize(CYuvPlane& plane);
+
   // hooks for HwDec Renderer
   virtual bool LoadShadersHook() { return false; };
   virtual bool RenderHook(int idx) { return false; };
@@ -141,33 +152,29 @@ class CLinuxRendererGL : public CBaseRenderer
     float width, height;
   } m_fbo;
 
-  int m_iYV12RenderBuffer;
-  int m_NumYV12Buffers;
+  int m_iYV12RenderBuffer = 0;
+  int m_NumYV12Buffers = 0;
 
-  bool m_bConfigured;
-  bool m_bValidated;
+  bool m_bConfigured = false;
+  bool m_bValidated = false;
   GLenum m_textureTarget;
-  int m_renderMethod;
-  RenderQuality m_renderQuality;
-  CRenderSystemGL *m_renderSystem;
+  int m_renderMethod = RENDER_GLSL;
+  RenderQuality m_renderQuality = RQ_SINGLEPASS;
+  CRenderSystemGL *m_renderSystem = nullptr;
 
   // Raw data used by renderer
-  int m_currentField;
-  int m_reloadShaders;
+  int m_currentField = FIELD_FULL;
+  int m_reloadShaders = 0;
 
-  struct YUVPLANE
+  struct CYuvPlane
   {
     GLuint id;
     GLuint pbo;
-
-    CRect  rect;
-
-    float  width;
-    float  height;
-
+    CRect rect;
+    float width;
+    float height;
     unsigned texwidth;
     unsigned texheight;
-
     //pixels per texel
     unsigned pixpertex_x;
     unsigned pixpertex_y;
@@ -178,7 +185,7 @@ class CLinuxRendererGL : public CBaseRenderer
     CPictureBuffer();
    ~CPictureBuffer();
 
-    YUVPLANE fields[MAX_FIELDS][YuvImage::MAX_PLANES];
+    CYuvPlane fields[MAX_FIELDS][YuvImage::MAX_PLANES];
     YuvImage image;
     GLuint pbo[3]; // one pbo for 3 planes
 
@@ -201,33 +208,21 @@ class CLinuxRendererGL : public CBaseRenderer
   // field index 0 is full image, 1 is odd scanlines, 2 is even scanlines
   CPictureBuffer m_buffers[NUM_BUFFERS];
 
-  void LoadPlane(YUVPLANE& plane, int type,
-                 unsigned width,  unsigned height,
-                 int stride, int bpp, void* data);
-
-  void GetPlaneTextureSize(YUVPLANE& plane);
-
-  Shaders::BaseYUV2RGBGLSLShader *m_pYUVShader;
-  Shaders::BaseVideoFilterShader *m_pVideoFilterShader;
-  ESCALINGMETHOD m_scalingMethod;
-  ESCALINGMETHOD m_scalingMethodGui;
+  Shaders::BaseYUV2RGBGLSLShader *m_pYUVShader = nullptr;
+  Shaders::BaseVideoFilterShader *m_pVideoFilterShader = nullptr;
+  ESCALINGMETHOD m_scalingMethod = VS_SCALINGMETHOD_LINEAR;
+  ESCALINGMETHOD m_scalingMethodGui = VS_SCALINGMETHOD_MAX;
   bool m_useDithering;
   unsigned int m_ditherDepth;
   bool m_fullRange;
   AVColorPrimaries m_srcPrimaries;
   bool m_toneMap = false;
-
-  // clear colour for "black" bars
-  float m_clearColour;
-
-  void BindPbo(CPictureBuffer& buff);
-  void UnBindPbo(CPictureBuffer& buff);
-  bool m_pboSupported;
-  bool m_pboUsed;
-
-  bool  m_nonLinStretch;
-  bool  m_nonLinStretchGui;
-  float m_pixelRatio;
+  float m_clearColour = 0.0f;
+  bool m_pboSupported = true;
+  bool m_pboUsed = false;
+  bool m_nonLinStretch = false;
+  bool m_nonLinStretchGui = false;
+  float m_pixelRatio = 0.0f;
 
   // color management
   std::unique_ptr<CColorManager> m_ColorManager;

From 7e67c5200d13cb9d0548846a809d4876c7265354 Mon Sep 17 00:00:00 2001
From: Rainer Hochecker <fernetmenta@online.de>
Date: Tue, 14 Aug 2018 10:36:46 +0200
Subject: [PATCH 2/3] VideoPlayer: LinuxRendererGL - fix internal texture
 format

---
 .../VideoRenderers/LinuxRendererGL.cpp        | 31 +++++++++++++------
 .../VideoRenderers/LinuxRendererGL.h          |  1 +
 2 files changed, 23 insertions(+), 9 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGL.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGL.cpp
index d78f1e8f90ac..6dbe7779e27d 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGL.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGL.cpp
@@ -1714,22 +1714,32 @@ bool CLinuxRendererGL::RenderCapture(CRenderCapture* capture)
 }
 
 
-static GLint GetInternalFormat(GLint format, int bpp)
+GLint CLinuxRendererGL::GetInternalFormat(GLint format, int bpp)
 {
+  unsigned int major, minor;
+  m_renderSystem->GetRenderVersion(major, minor);
   if (bpp == 2)
   {
-    switch (format)
+    if (format == GL_RED)
     {
-#ifdef GL_R16
-      case GL_RED:
+      if (major > 2)
         return GL_R16;
-#endif
-      default:
-        return format;
+      else
+        return GL_LUMINANCE16;
     }
   }
   else
-    return format;
+  {
+    if (format == GL_RED)
+    {
+      if (major > 2)
+        return GL_RED;
+      else
+        return GL_LUMINANCE;
+    }
+  }
+
+  return format;
 }
 
 //-----------------------------------------------------------------------------
@@ -1948,7 +1958,10 @@ bool CLinuxRendererGL::CreateYV12Texture(int index)
       glBindTexture(m_textureTarget, plane.id);
       GLint internalformat;
       internalformat = GetInternalFormat(GL_RED, im.bpp);
-      glTexImage2D(m_textureTarget, 0, internalformat, plane.texwidth, plane.texheight, 0, GL_RED, GL_UNSIGNED_BYTE, NULL);
+      if (im.bpp == 2)
+        glTexImage2D(m_textureTarget, 0, internalformat, plane.texwidth, plane.texheight, 0, GL_RED, GL_UNSIGNED_SHORT, NULL);
+      else
+        glTexImage2D(m_textureTarget, 0, internalformat, plane.texwidth, plane.texheight, 0, GL_RED, GL_UNSIGNED_BYTE, NULL);
 
       glTexParameteri(m_textureTarget, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
       glTexParameteri(m_textureTarget, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGL.h b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGL.h
index b48d838403b4..9b0039d35a75 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGL.h
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGL.h
@@ -139,6 +139,7 @@ class CLinuxRendererGL : public CBaseRenderer
                  unsigned width,  unsigned height,
                  int stride, int bpp, void* data);
   void GetPlaneTextureSize(CYuvPlane& plane);
+  GLint GetInternalFormat(GLint format, int bpp);
 
   // hooks for HwDec Renderer
   virtual bool LoadShadersHook() { return false; };

From 6248c15f8d6aab5cf8ad80c5629466fdd39bf35c Mon Sep 17 00:00:00 2001
From: Rainer Hochecker <fernetmenta@online.de>
Date: Tue, 14 Aug 2018 11:04:56 +0200
Subject: [PATCH 3/3] VideoPlayer: LinuxRendererGL - update video filters after
 render area has changed

---
 .../VideoRenderers/LinuxRendererGL.cpp        | 36 +++++++++++--------
 .../VideoRenderers/LinuxRendererGL.h          |  2 ++
 2 files changed, 23 insertions(+), 15 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGL.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGL.cpp
index 6dbe7779e27d..d7ea04ee2919 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGL.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGL.cpp
@@ -563,10 +563,10 @@ void CLinuxRendererGL::DrawBlackBars()
     vertices[quad].x = 0.0;
     vertices[quad].y = 0.0;
     vertices[quad].z = 0;
-    vertices[quad+1].x = CServiceBroker::GetWinSystem()->GetGfxContext().GetWidth();
+    vertices[quad+1].x = m_viewRect.Width();
     vertices[quad+1].y = 0;
     vertices[quad+1].z = 0;
-    vertices[quad+2].x = CServiceBroker::GetWinSystem()->GetGfxContext().GetWidth();
+    vertices[quad+2].x = m_viewRect.Width();
     vertices[quad+2].y = m_rotatedDestCoords[0].y;
     vertices[quad+2].z = 0;
     vertices[quad+3] = vertices[quad+2];
@@ -577,28 +577,28 @@ void CLinuxRendererGL::DrawBlackBars()
     count += 6;
   }
 
-  //bottom quad
-  if (m_rotatedDestCoords[2].y < CServiceBroker::GetWinSystem()->GetGfxContext().GetHeight())
+  // bottom quad
+  if (m_rotatedDestCoords[2].y < m_viewRect.Height())
   {
     GLubyte quad = count;
     vertices[quad].x = 0.0;
     vertices[quad].y = m_rotatedDestCoords[2].y;
     vertices[quad].z = 0;
-    vertices[quad+1].x = CServiceBroker::GetWinSystem()->GetGfxContext().GetWidth();
+    vertices[quad+1].x = m_viewRect.Width();
     vertices[quad+1].y = m_rotatedDestCoords[2].y;
     vertices[quad+1].z = 0;
-    vertices[quad+2].x = CServiceBroker::GetWinSystem()->GetGfxContext().GetWidth();
-    vertices[quad+2].y = CServiceBroker::GetWinSystem()->GetGfxContext().GetHeight();
+    vertices[quad+2].x = m_viewRect.Width();
+    vertices[quad+2].y = m_viewRect.Height();
     vertices[quad+2].z = 0;
     vertices[quad+3] = vertices[quad+2];
     vertices[quad+4].x = 0;
-    vertices[quad+4].y = CServiceBroker::GetWinSystem()->GetGfxContext().GetHeight();
+    vertices[quad+4].y = m_viewRect.Height();
     vertices[quad+4].z = 0;
     vertices[quad+5] = vertices[quad];
     count += 6;
   }
 
-  //left quad
+  // left quad
   if (m_rotatedDestCoords[0].x > 0.0)
   {
     GLubyte quad = count;
@@ -620,16 +620,16 @@ void CLinuxRendererGL::DrawBlackBars()
   }
 
   //right quad
-  if (m_rotatedDestCoords[2].x < CServiceBroker::GetWinSystem()->GetGfxContext().GetWidth())
+  if (m_rotatedDestCoords[2].x < m_viewRect.Width())
   {
     GLubyte quad = count;
     vertices[quad].x = m_rotatedDestCoords[1].x;
     vertices[quad].y = m_rotatedDestCoords[1].y;
     vertices[quad].z = 0;
-    vertices[quad+1].x = CServiceBroker::GetWinSystem()->GetGfxContext().GetWidth();
+    vertices[quad+1].x = m_viewRect.Width();
     vertices[quad+1].y = m_rotatedDestCoords[1].y;
     vertices[quad+1].z = 0;
-    vertices[quad+2].x = CServiceBroker::GetWinSystem()->GetGfxContext().GetWidth();
+    vertices[quad+2].x = m_viewRect.Width();
     vertices[quad+2].y = m_rotatedDestCoords[2].y;
     vertices[quad+2].z = 0;
     vertices[quad+3] = vertices[quad+2];
@@ -695,14 +695,19 @@ void CLinuxRendererGL::UpdateVideoFilter()
     }
   }
 
+  CRect srcRect, dstRect, viewRect;
+  GetVideoRect(srcRect, dstRect, viewRect);
+
   if (m_scalingMethodGui == m_videoSettings.m_ScalingMethod &&
+      viewRect.Height() == m_viewRect.Height() &&
+      viewRect.Width() == m_viewRect.Width() &&
       !nonLinStretchChanged && !cmsChanged)
     return;
   else
     m_reloadShaders = 1;
 
-  //recompile YUV shader when non-linear stretch is turned on/off
-  //or when it's on and the scaling method changed
+  // recompile YUV shader when non-linear stretch is turned on/off
+  // or when it's on and the scaling method changed
   if (m_nonLinStretch || nonLinStretchChanged)
     m_reloadShaders = 1;
 
@@ -725,6 +730,7 @@ void CLinuxRendererGL::UpdateVideoFilter()
 
   m_scalingMethodGui = m_videoSettings.m_ScalingMethod;
   m_scalingMethod = m_scalingMethodGui;
+  m_viewRect = viewRect;
 
   if (!Supports(m_scalingMethod))
   {
@@ -744,7 +750,7 @@ void CLinuxRendererGL::UpdateVideoFilter()
   if (m_scalingMethod == VS_SCALINGMETHOD_AUTO)
   {
     bool scaleSD = m_sourceHeight < 720 && m_sourceWidth < 1280;
-    bool scaleUp = (int)m_sourceHeight < CServiceBroker::GetWinSystem()->GetGfxContext().GetHeight() && (int)m_sourceWidth < CServiceBroker::GetWinSystem()->GetGfxContext().GetWidth();
+    bool scaleUp = (int)m_sourceHeight < m_viewRect.Height() && (int)m_sourceWidth < m_viewRect.Width();
     bool scaleFps = m_fps < g_advancedSettings.m_videoAutoScaleMaxFps + 0.01f;
 
     if (Supports(VS_SCALINGMETHOD_LANCZOS3_FAST) && scaleSD && scaleUp && scaleFps)
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGL.h b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGL.h
index 9b0039d35a75..9a4ac8279889 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGL.h
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGL.h
@@ -22,6 +22,7 @@
 #include "ColorManager.h"
 #include "threads/Event.h"
 #include "VideoShaders/ShaderFormats.h"
+#include "utils/Geometry.h"
 
 extern "C" {
 #include "libavutil/mastering_display_metadata.h"
@@ -224,6 +225,7 @@ class CLinuxRendererGL : public CBaseRenderer
   bool m_nonLinStretch = false;
   bool m_nonLinStretchGui = false;
   float m_pixelRatio = 0.0f;
+  CRect m_viewRect;
 
   // color management
   std::unique_ptr<CColorManager> m_ColorManager;
