From 8494c2a1e834d82fb04c24eca81bcc5b32c21e4b Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Tue, 17 Mar 2020 16:35:43 +0100
Subject: [PATCH 1/8] [addons][vfs] clang style cleanup on addon header

---
 .../include/kodi/addon-instance/VFS.h         | 929 +++++++++---------
 1 file changed, 486 insertions(+), 443 deletions(-)

diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/VFS.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/VFS.h
index 216d0a54c16e..9a34c5397f8c 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/VFS.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/VFS.h
@@ -106,509 +106,552 @@ namespace kodi
 {
 namespace addon
 {
-  class CInstanceVFS : public IAddonInstance
+
+class CInstanceVFS : public IAddonInstance
+{
+public:
+  explicit CInstanceVFS(KODI_HANDLE instance) : IAddonInstance(ADDON_INSTANCE_VFS)
+  {
+    if (CAddonBase::m_interface->globalSingleInstance != nullptr)
+      throw std::logic_error("kodi::addon::CInstanceVFS: Creation of multiple together with single "
+                             "instance way is not allowed!");
+
+    SetAddonStruct(instance);
+  }
+
+  ~CInstanceVFS() override = default;
+
+  /// @brief Open a file for input
+  ///
+  /// @param[in] url The URL of the file
+  /// @return Context for the opened file
+  virtual void* Open(const VFSURL& url) { return nullptr; }
+
+  /// @brief Open a file for output
+  ///
+  /// @param[in] url The URL of the file
+  /// @param[in] overWrite Whether or not to overwrite an existing file
+  /// @return Context for the opened file
+  ///
+  virtual void* OpenForWrite(const VFSURL& url, bool overWrite) { return nullptr; }
+
+  /// @brief Read from a file
+  ///
+  /// @param[in] context The context of the file
+  /// @param[out] buffer The buffer to read data into
+  /// @param[in] uiBufSize Number of bytes to read
+  /// @return Number of bytes read
+  ///
+  virtual ssize_t Read(void* context, void* buffer, size_t uiBufSize) { return -1; }
+
+  /// @brief Write to a file
+  ///
+  /// @param[in] context The context of the file
+  /// @param[in] buffer The buffer to read data from
+  /// @param[in] uiBufSize Number of bytes to write
+  /// @return Number of bytes written
+  ///
+  virtual ssize_t Write(void* context, const void* buffer, size_t uiBufSize) { return -1; }
+
+  /// @brief Seek in a file
+  ///
+  /// @param[in] context The context of the file
+  /// @param[in] position The position to seek to
+  /// @param[in] whence Position in file 'position' is relative to (SEEK_CUR, SEEK_SET, SEEK_END)
+  /// @return Offset in file after seek
+  ///
+  virtual int64_t Seek(void* context, int64_t position, int whence) { return -1; }
+
+  /// @brief Truncate a file
+  ///
+  /// @param[in] context The context of the file
+  /// @param[in] size The size to truncate the file to
+  /// @return 0 on success, -1 on error
+  ///
+  virtual int Truncate(void* context, int64_t size) { return -1; }
+
+  /// @brief Get total size of a file
+  ///
+  /// @param[in] context The context of the file
+  /// @return Total file size
+  ///
+  virtual int64_t GetLength(void* context) { return 0; }
+
+  /// @brief Get current position in a file
+  ///
+  /// @param[in] context The context of the file
+  /// @return Current position
+  ///
+  virtual int64_t GetPosition(void* context) { return 0; }
+
+  /// @brief Get chunk size of a file
+  ///
+  /// @param[in] context The context of the file
+  /// @return Chunk size
+  ///
+  virtual int GetChunkSize(void* context) { return 1; }
+
+  /// @brief Perform an IO-control on the file
+  ///
+  /// @param[in] context The context of the file
+  /// @param[in] request The requested IO-control
+  /// @param[in] param Parameter attached to the IO-control
+  /// @return -1 on error, >= 0 on success
+  ///
+  virtual int IoControl(void* context, XFILE::EIoControl request, void* param) { return -1; }
+
+  /// @brief Close a file
+  ///
+  /// @param[in] context The context of the file
+  /// @return True on success, false on failure
+  ///
+  virtual bool Close(void* context) { return false; }
+
+  /// @brief Stat a file
+  ///
+  /// @param[in] url The URL of the file
+  /// @param[in] buffer The buffer to store results in
+  /// @return -1 on error, 0 otherwise
+  ///
+  virtual int Stat(const VFSURL& url, struct __stat64* buffer) { return 0; }
+
+  /// @brief Check for file existence
+  ///
+  /// @param[in] url The URL of the file
+  /// @return True if file exists, false otherwise
+  ///
+  virtual bool Exists(const VFSURL& url) { return false; }
+
+  /// @brief Clear out any idle connections
+  ///
+  virtual void ClearOutIdle() {}
+
+  /// @brief Disconnect all connections
+  ///
+  virtual void DisconnectAll() {}
+
+  /// @brief Delete a file
+  ///
+  /// @param[in] url The URL of the file
+  /// @return True if deletion was successful, false otherwise
+  ///
+  virtual bool Delete(const VFSURL& url) { return false; }
+
+  /// @brief Rename a file
+  ///
+  /// @param[in] url The URL of the source file
+  /// @param[in] url2 The URL of the destination file
+  /// @return True if deletion was successful, false otherwise
+  ///
+  virtual bool Rename(const VFSURL& url, const VFSURL& url2) { return false; }
+
+  /// @brief Check for directory existence
+  ///
+  /// @param[in] url The URL of the file
+  /// @return True if directory exists, false otherwise
+  ///
+  virtual bool DirectoryExists(const VFSURL& url) { return false; }
+
+  /// @brief Remove a directory
+  ///
+  /// @param[in] url The URL of the directory
+  /// @return True if removal was successful, false otherwise
+  ///
+  virtual bool RemoveDirectory(const VFSURL& url) { return false; }
+
+  /// @brief Create a directory
+  ///
+  /// @param[in] url The URL of the file
+  /// @return True if creation was successful, false otherwise
+  ///
+  virtual bool CreateDirectory(const VFSURL& url) { return false; }
+
+  /// @brief Callback functions on GetDirectory()
+  ///
+  /// This functions becomes available during call of GetDirectory() from
+  /// Kodi.
+  ///
+  /// If GetDirectory() returns false becomes the parts from here used on
+  /// next call of the function.
+  ///
+  /// **Example:**
+  /// ~~~~~~~~~~~~~{.cpp}
+  ///
+  /// #include <kodi/addon-instance/VFS.h>
+  ///
+  /// ...
+  ///
+  /// bool CMyFile::GetDirectory(const VFSURL& url, std::vector<kodi::vfs::CDirEntry>& items, CVFSCallbacks callbacks)
+  /// {
+  ///   std::string neededString;
+  ///   callbacks.GetKeyboardInput("Test", neededString, true);
+  ///   if (neededString.empty())
+  ///     return false;
+  ///
+  ///   /* Do the work */
+  ///   ...
+  ///   return true;
+  /// }
+  /// ~~~~~~~~~~~~~
+  ///
+  //@{
+  class CVFSCallbacks
   {
   public:
-    explicit CInstanceVFS(KODI_HANDLE instance)
-      : IAddonInstance(ADDON_INSTANCE_VFS)
-    {
-      if (CAddonBase::m_interface->globalSingleInstance != nullptr)
-        throw std::logic_error("kodi::addon::CInstanceVFS: Creation of multiple together with single instance way is not allowed!");
-
-      SetAddonStruct(instance);
-    }
-
-    ~CInstanceVFS() override = default;
-
-    /// @brief Open a file for input
-    ///
-    /// @param[in] url The URL of the file
-    /// @return Context for the opened file
-    virtual void* Open(const VFSURL& url) { return nullptr; }
-
-    /// @brief Open a file for output
-    ///
-    /// @param[in] url The URL of the file
-    /// @param[in] overWrite Whether or not to overwrite an existing file
-    /// @return Context for the opened file
-    ///
-    virtual void* OpenForWrite(const VFSURL& url, bool overWrite) { return nullptr; }
-
-    /// @brief Read from a file
-    ///
-    /// @param[in] context The context of the file
-    /// @param[out] buffer The buffer to read data into
-    /// @param[in] uiBufSize Number of bytes to read
-    /// @return Number of bytes read
-    ///
-    virtual ssize_t Read(void* context, void* buffer, size_t uiBufSize) { return -1; }
-
-    /// @brief Write to a file
-    ///
-    /// @param[in] context The context of the file
-    /// @param[in] buffer The buffer to read data from
-    /// @param[in] uiBufSize Number of bytes to write
-    /// @return Number of bytes written
-    ///
-    virtual ssize_t Write(void* context, const void* buffer, size_t uiBufSize) { return -1; }
-
-    /// @brief Seek in a file
-    ///
-    /// @param[in] context The context of the file
-    /// @param[in] position The position to seek to
-    /// @param[in] whence Position in file 'position' is relative to (SEEK_CUR, SEEK_SET, SEEK_END)
-    /// @return Offset in file after seek
-    ///
-    virtual int64_t Seek(void* context, int64_t position, int whence) { return -1; }
-
-    /// @brief Truncate a file
-    ///
-    /// @param[in] context The context of the file
-    /// @param[in] size The size to truncate the file to
-    /// @return 0 on success, -1 on error
-    ///
-    virtual int Truncate(void* context, int64_t size) { return -1; }
-
-    /// @brief Get total size of a file
-    ///
-    /// @param[in] context The context of the file
-    /// @return Total file size
-    ///
-    virtual int64_t GetLength(void* context) { return 0; }
-
-    /// @brief Get current position in a file
-    ///
-    /// @param[in] context The context of the file
-    /// @return Current position
-    ///
-    virtual int64_t GetPosition(void* context) { return 0; }
-
-    /// @brief Get chunk size of a file
-    ///
-    /// @param[in] context The context of the file
-    /// @return Chunk size
+    /// @brief Require keyboard input
     ///
-    virtual int GetChunkSize(void* context) { return 1; }
-
-    /// @brief Perform an IO-control on the file
-    ///
-    /// @param[in] context The context of the file
-    /// @param[in] request The requested IO-control
-    /// @param[in] param Parameter attached to the IO-control
-    /// @return -1 on error, >= 0 on success
-    ///
-    virtual int IoControl(void* context, XFILE::EIoControl request, void* param) { return -1; }
-
-    /// @brief Close a file
-    ///
-    /// @param[in] context The context of the file
-    /// @return True on success, false on failure
-    ///
-    virtual bool Close(void* context) { return false; }
-
-    /// @brief Stat a file
-    ///
-    /// @param[in] url The URL of the file
-    /// @param[in] buffer The buffer to store results in
-    /// @return -1 on error, 0 otherwise
-    ///
-    virtual int Stat(const VFSURL& url, struct __stat64* buffer) { return 0; }
-
-    /// @brief Check for file existence
+    /// Becomes called if GetDirectory() returns false and GetDirectory()
+    /// becomes after entry called again.
     ///
-    /// @param[in] url The URL of the file
-    /// @return True if file exists, false otherwise
+    /// @param[in] heading      The heading of the keyboard dialog
+    /// @param[out] input       The resulting string. Returns string after
+    ///                         second call!
+    /// @param[in] hiddenInput  To show input only as "*" on dialog
+    /// @return                 True if input was received, false otherwise
     ///
-    virtual bool Exists(const VFSURL& url) { return false; }
-
-    /// @brief Clear out any idle connections
-    ///
-    virtual void ClearOutIdle() { }
-
-    /// @brief Disconnect all connections
-    ///
-    virtual void DisconnectAll() { }
-
-    /// @brief Delete a file
-    ///
-    /// @param[in] url The URL of the file
-    /// @return True if deletion was successful, false otherwise
-    ///
-    virtual bool Delete(const VFSURL& url) { return false; }
-
-    /// @brief Rename a file
-    ///
-    /// @param[in] url The URL of the source file
-    /// @param[in] url2 The URL of the destination file
-    /// @return True if deletion was successful, false otherwise
-    ///
-    virtual bool Rename(const VFSURL& url, const VFSURL& url2) { return false; }
-
-    /// @brief Check for directory existence
-    ///
-    /// @param[in] url The URL of the file
-    /// @return True if directory exists, false otherwise
-    ///
-    virtual bool DirectoryExists(const VFSURL& url) { return false; }
-
-    /// @brief Remove a directory
-    ///
-    /// @param[in] url The URL of the directory
-    /// @return True if removal was successful, false otherwise
-    ///
-    virtual bool RemoveDirectory(const VFSURL& url) { return false; }
-
-    /// @brief Create a directory
-    ///
-    /// @param[in] url The URL of the file
-    /// @return True if creation was successful, false otherwise
-    ///
-    virtual bool CreateDirectory(const VFSURL& url) { return false; }
-
-    /// @brief Callback functions on GetDirectory()
-    ///
-    /// This functions becomes available during call of GetDirectory() from
-    /// Kodi.
-    ///
-    /// If GetDirectory() returns false becomes the parts from here used on
-    /// next call of the function.
-    ///
-    /// **Example:**
-    /// ~~~~~~~~~~~~~{.cpp}
-    ///
-    /// #include <kodi/addon-instance/VFS.h>
-    ///
-    /// ...
-    ///
-    /// bool CMyFile::GetDirectory(const VFSURL& url, std::vector<kodi::vfs::CDirEntry>& items, CVFSCallbacks callbacks)
-    /// {
-    ///   std::string neededString;
-    ///   callbacks.GetKeyboardInput("Test", neededString, true);
-    ///   if (neededString.empty())
-    ///     return false;
-    ///
-    ///   /* Do the work */
-    ///   ...
-    ///   return true;
-    /// }
-    /// ~~~~~~~~~~~~~
-    ///
-    //@{
-    class CVFSCallbacks
+    bool GetKeyboardInput(const std::string& heading, std::string& input, bool hiddenInput = false)
     {
-    public:
-      /// @brief Require keyboard input
-      ///
-      /// Becomes called if GetDirectory() returns false and GetDirectory()
-      /// becomes after entry called again.
-      ///
-      /// @param[in] heading      The heading of the keyboard dialog
-      /// @param[out] input       The resulting string. Returns string after
-      ///                         second call!
-      /// @param[in] hiddenInput  To show input only as "*" on dialog
-      /// @return                 True if input was received, false otherwise
-      ///
-      bool GetKeyboardInput(const std::string& heading, std::string& input, bool hiddenInput = false)
-      {
-        char* cInput = nullptr;
-        bool ret = m_cb->get_keyboard_input(m_cb->ctx, heading.c_str(), &cInput, hiddenInput);
-        if (cInput)
-        {
-          input = cInput;
-          ::kodi::addon::CAddonBase::m_interface->toKodi->free_string(::kodi::addon::CAddonBase::m_interface->toKodi->kodiBase, cInput);
-        }
-        return ret;
-      }
-
-      /// @brief Display an error dialog
-      ///
-      /// @param[in] heading      The heading of the error dialog
-      /// @param[in] line1        The first line of the error dialog
-      /// @param[in] line2        [opt] The second line of the error dialog
-      /// @param[in] line3        [opt] The third line of the error dialog
-      ///
-      void SetErrorDialog(const std::string& heading, const std::string& line1, const std::string& line2 = "", const std::string& line3 = "")
-      {
-        m_cb->set_error_dialog(m_cb->ctx, heading.c_str(), line1.c_str(), line2.c_str(), line3.c_str());
-      }
-
-      /// @brief Prompt the user for authentication of a URL
-      ///
-      /// @param[in] url The URL
-      void RequireAuthentication(const std::string& url)
+      char* cInput = nullptr;
+      bool ret = m_cb->get_keyboard_input(m_cb->ctx, heading.c_str(), &cInput, hiddenInput);
+      if (cInput)
       {
-        m_cb->require_authentication(m_cb->ctx, url.c_str());
+        input = cInput;
+        ::kodi::addon::CAddonBase::m_interface->toKodi->free_string(
+            ::kodi::addon::CAddonBase::m_interface->toKodi->kodiBase, cInput);
       }
+      return ret;
+    }
 
-      explicit CVFSCallbacks(const VFSGetDirectoryCallbacks* cb) : m_cb(cb) { }
-
-    private:
-      const VFSGetDirectoryCallbacks* m_cb;
-    };
-    //@}
-
-    /// @brief List a directory
-    ///
-    /// @param[in] url The URL of the directory
-    /// @param[out] entries The entries in the directory
-    /// @param[in] callbacks A callback structure
-    /// @return Context for the directory listing
-    ///
-    virtual bool GetDirectory(const VFSURL& url,
-                              std::vector<kodi::vfs::CDirEntry>& entries,
-                              CVFSCallbacks callbacks) { return false; }
-
-    /// @brief Check if file should be presented as a directory (multiple streams)
+    /// @brief Display an error dialog
     ///
-    /// @param[in] url The URL of the file
-    /// @param[out] entries The entries in the directory
-    /// @param[out] rootPath Path to root directory if multiple entries
-    /// @return Context for the directory listing
+    /// @param[in] heading      The heading of the error dialog
+    /// @param[in] line1        The first line of the error dialog
+    /// @param[in] line2        [opt] The second line of the error dialog
+    /// @param[in] line3        [opt] The third line of the error dialog
     ///
-    virtual bool ContainsFiles(const VFSURL& url,
-                               std::vector<kodi::vfs::CDirEntry>& entries,
-                               std::string& rootPath) { return false; }
-
-  private:
-    void SetAddonStruct(KODI_HANDLE instance)
+    void SetErrorDialog(const std::string& heading,
+                        const std::string& line1,
+                        const std::string& line2 = "",
+                        const std::string& line3 = "")
     {
-      if (instance == nullptr)
-        throw std::logic_error("kodi::addon::CInstanceVFS: Creation with empty addon structure not allowed, table must be given from Kodi!");
-
-      m_instanceData = static_cast<AddonInstance_VFSEntry*>(instance);
-      m_instanceData->toAddon.addonInstance = this;
-      m_instanceData->toAddon.open = ADDON_Open;
-      m_instanceData->toAddon.open_for_write = ADDON_OpenForWrite;
-      m_instanceData->toAddon.read = ADDON_Read;
-      m_instanceData->toAddon.write = ADDON_Write;
-      m_instanceData->toAddon.seek = ADDON_Seek;
-      m_instanceData->toAddon.truncate = ADDON_Truncate;
-      m_instanceData->toAddon.get_length = ADDON_GetLength;
-      m_instanceData->toAddon.get_position = ADDON_GetPosition;
-      m_instanceData->toAddon.get_chunk_size = ADDON_GetChunkSize;
-      m_instanceData->toAddon.io_control = ADDON_IoControl;
-      m_instanceData->toAddon.stat = ADDON_Stat;
-      m_instanceData->toAddon.close = ADDON_Close;
-      m_instanceData->toAddon.exists = ADDON_Exists;
-      m_instanceData->toAddon.clear_out_idle = ADDON_ClearOutIdle;
-      m_instanceData->toAddon.disconnect_all = ADDON_DisconnectAll;
-      m_instanceData->toAddon.delete_it = ADDON_Delete;
-      m_instanceData->toAddon.rename = ADDON_Rename;
-      m_instanceData->toAddon.directory_exists = ADDON_DirectoryExists;
-      m_instanceData->toAddon.remove_directory = ADDON_RemoveDirectory;
-      m_instanceData->toAddon.create_directory = ADDON_CreateDirectory;
-      m_instanceData->toAddon.get_directory = ADDON_GetDirectory;
-      m_instanceData->toAddon.free_directory = ADDON_FreeDirectory;
-      m_instanceData->toAddon.contains_files = ADDON_ContainsFiles;
+      m_cb->set_error_dialog(m_cb->ctx, heading.c_str(), line1.c_str(), line2.c_str(),
+                             line3.c_str());
     }
 
-    inline static void* ADDON_Open(const AddonInstance_VFSEntry* instance, const VFSURL* url)
+    /// @brief Prompt the user for authentication of a URL
+    ///
+    /// @param[in] url The URL
+    void RequireAuthentication(const std::string& url)
     {
-      return instance->toAddon.addonInstance->Open(*url);
+      m_cb->require_authentication(m_cb->ctx, url.c_str());
     }
 
-    inline static void* ADDON_OpenForWrite(const AddonInstance_VFSEntry* instance, const VFSURL* url, bool overWrite)
-    {
-      return instance->toAddon.addonInstance->OpenForWrite(*url, overWrite);
-    }
+    explicit CVFSCallbacks(const VFSGetDirectoryCallbacks* cb) : m_cb(cb) {}
 
-    inline static ssize_t ADDON_Read(const AddonInstance_VFSEntry* instance, void* context, void* buffer, size_t uiBufSize)
-    {
-      return instance->toAddon.addonInstance->Read(context, buffer, uiBufSize);
-    }
+  private:
+    const VFSGetDirectoryCallbacks* m_cb;
+  };
+  //@}
+
+  /// @brief List a directory
+  ///
+  /// @param[in] url The URL of the directory
+  /// @param[out] entries The entries in the directory
+  /// @param[in] callbacks A callback structure
+  /// @return Context for the directory listing
+  ///
+  virtual bool GetDirectory(const VFSURL& url,
+                            std::vector<kodi::vfs::CDirEntry>& entries,
+                            CVFSCallbacks callbacks)
+  {
+    return false;
+  }
+
+  /// @brief Check if file should be presented as a directory (multiple streams)
+  ///
+  /// @param[in] url The URL of the file
+  /// @param[out] entries The entries in the directory
+  /// @param[out] rootPath Path to root directory if multiple entries
+  /// @return Context for the directory listing
+  ///
+  virtual bool ContainsFiles(const VFSURL& url,
+                             std::vector<kodi::vfs::CDirEntry>& entries,
+                             std::string& rootPath)
+  {
+    return false;
+  }
 
-    inline static ssize_t ADDON_Write(const AddonInstance_VFSEntry* instance, void* context, const void* buffer, size_t uiBufSize)
-    {
-      return instance->toAddon.addonInstance->Write(context, buffer, uiBufSize);
-    }
+private:
+  void SetAddonStruct(KODI_HANDLE instance)
+  {
+    if (instance == nullptr)
+      throw std::logic_error("kodi::addon::CInstanceVFS: Creation with empty addon structure not "
+                             "allowed, table must be given from Kodi!");
+
+    m_instanceData = static_cast<AddonInstance_VFSEntry*>(instance);
+    m_instanceData->toAddon.addonInstance = this;
+    m_instanceData->toAddon.open = ADDON_Open;
+    m_instanceData->toAddon.open_for_write = ADDON_OpenForWrite;
+    m_instanceData->toAddon.read = ADDON_Read;
+    m_instanceData->toAddon.write = ADDON_Write;
+    m_instanceData->toAddon.seek = ADDON_Seek;
+    m_instanceData->toAddon.truncate = ADDON_Truncate;
+    m_instanceData->toAddon.get_length = ADDON_GetLength;
+    m_instanceData->toAddon.get_position = ADDON_GetPosition;
+    m_instanceData->toAddon.get_chunk_size = ADDON_GetChunkSize;
+    m_instanceData->toAddon.io_control = ADDON_IoControl;
+    m_instanceData->toAddon.stat = ADDON_Stat;
+    m_instanceData->toAddon.close = ADDON_Close;
+    m_instanceData->toAddon.exists = ADDON_Exists;
+    m_instanceData->toAddon.clear_out_idle = ADDON_ClearOutIdle;
+    m_instanceData->toAddon.disconnect_all = ADDON_DisconnectAll;
+    m_instanceData->toAddon.delete_it = ADDON_Delete;
+    m_instanceData->toAddon.rename = ADDON_Rename;
+    m_instanceData->toAddon.directory_exists = ADDON_DirectoryExists;
+    m_instanceData->toAddon.remove_directory = ADDON_RemoveDirectory;
+    m_instanceData->toAddon.create_directory = ADDON_CreateDirectory;
+    m_instanceData->toAddon.get_directory = ADDON_GetDirectory;
+    m_instanceData->toAddon.free_directory = ADDON_FreeDirectory;
+    m_instanceData->toAddon.contains_files = ADDON_ContainsFiles;
+  }
+
+  inline static void* ADDON_Open(const AddonInstance_VFSEntry* instance, const VFSURL* url)
+  {
+    return instance->toAddon.addonInstance->Open(*url);
+  }
 
-    inline static int64_t ADDON_Seek(const AddonInstance_VFSEntry* instance, void* context, int64_t position, int whence)
-    {
-      return instance->toAddon.addonInstance->Seek(context, position, whence);
-    }
+  inline static void* ADDON_OpenForWrite(const AddonInstance_VFSEntry* instance,
+                                         const VFSURL* url,
+                                         bool overWrite)
+  {
+    return instance->toAddon.addonInstance->OpenForWrite(*url, overWrite);
+  }
 
-    inline static int ADDON_Truncate(const AddonInstance_VFSEntry* instance, void* context, int64_t size)
-    {
-      return instance->toAddon.addonInstance->Truncate(context, size);
-    }
+  inline static ssize_t ADDON_Read(const AddonInstance_VFSEntry* instance,
+                                   void* context,
+                                   void* buffer,
+                                   size_t uiBufSize)
+  {
+    return instance->toAddon.addonInstance->Read(context, buffer, uiBufSize);
+  }
 
-    inline static int64_t ADDON_GetLength(const AddonInstance_VFSEntry* instance, void* context)
-    {
-      return instance->toAddon.addonInstance->GetLength(context);
-    }
+  inline static ssize_t ADDON_Write(const AddonInstance_VFSEntry* instance,
+                                    void* context,
+                                    const void* buffer,
+                                    size_t uiBufSize)
+  {
+    return instance->toAddon.addonInstance->Write(context, buffer, uiBufSize);
+  }
 
-    inline static int64_t ADDON_GetPosition(const AddonInstance_VFSEntry* instance, void* context)
-    {
-      return instance->toAddon.addonInstance->GetPosition(context);
-    }
+  inline static int64_t ADDON_Seek(const AddonInstance_VFSEntry* instance,
+                                   void* context,
+                                   int64_t position,
+                                   int whence)
+  {
+    return instance->toAddon.addonInstance->Seek(context, position, whence);
+  }
 
-    inline static int ADDON_GetChunkSize(const AddonInstance_VFSEntry* instance, void* context)
-    {
-      return instance->toAddon.addonInstance->GetChunkSize(context);
-    }
+  inline static int ADDON_Truncate(const AddonInstance_VFSEntry* instance,
+                                   void* context,
+                                   int64_t size)
+  {
+    return instance->toAddon.addonInstance->Truncate(context, size);
+  }
 
-    inline static int ADDON_IoControl(const AddonInstance_VFSEntry* instance, void* context, XFILE::EIoControl request, void* param)
-    {
-      return instance->toAddon.addonInstance->IoControl(context, request, param);
-    }
+  inline static int64_t ADDON_GetLength(const AddonInstance_VFSEntry* instance, void* context)
+  {
+    return instance->toAddon.addonInstance->GetLength(context);
+  }
 
-    inline static int ADDON_Stat(const AddonInstance_VFSEntry* instance, const VFSURL* url, struct __stat64* buffer)
-    {
-      return instance->toAddon.addonInstance->Stat(*url, buffer);
-    }
+  inline static int64_t ADDON_GetPosition(const AddonInstance_VFSEntry* instance, void* context)
+  {
+    return instance->toAddon.addonInstance->GetPosition(context);
+  }
 
-    inline static bool ADDON_Close(const AddonInstance_VFSEntry* instance, void* context)
-    {
-      return instance->toAddon.addonInstance->Close(context);
-    }
+  inline static int ADDON_GetChunkSize(const AddonInstance_VFSEntry* instance, void* context)
+  {
+    return instance->toAddon.addonInstance->GetChunkSize(context);
+  }
 
-    inline static bool ADDON_Exists(const AddonInstance_VFSEntry* instance, const VFSURL* url)
-    {
-      return instance->toAddon.addonInstance->Exists(*url);
-    }
+  inline static int ADDON_IoControl(const AddonInstance_VFSEntry* instance,
+                                    void* context,
+                                    XFILE::EIoControl request,
+                                    void* param)
+  {
+    return instance->toAddon.addonInstance->IoControl(context, request, param);
+  }
 
-    inline static void ADDON_ClearOutIdle(const AddonInstance_VFSEntry* instance)
-    {
-      return instance->toAddon.addonInstance->ClearOutIdle();
-    }
+  inline static int ADDON_Stat(const AddonInstance_VFSEntry* instance,
+                               const VFSURL* url,
+                               struct __stat64* buffer)
+  {
+    return instance->toAddon.addonInstance->Stat(*url, buffer);
+  }
 
-    inline static void ADDON_DisconnectAll(const AddonInstance_VFSEntry* instance)
-    {
-      return instance->toAddon.addonInstance->DisconnectAll();
-    }
+  inline static bool ADDON_Close(const AddonInstance_VFSEntry* instance, void* context)
+  {
+    return instance->toAddon.addonInstance->Close(context);
+  }
 
-    inline static bool ADDON_Delete(const AddonInstance_VFSEntry* instance, const VFSURL* url)
-    {
-      return instance->toAddon.addonInstance->Delete(*url);
-    }
+  inline static bool ADDON_Exists(const AddonInstance_VFSEntry* instance, const VFSURL* url)
+  {
+    return instance->toAddon.addonInstance->Exists(*url);
+  }
 
-    inline static bool ADDON_Rename(const AddonInstance_VFSEntry* instance, const VFSURL* url, const VFSURL* url2)
-    {
-      return instance->toAddon.addonInstance->Rename(*url, *url2);
-    }
+  inline static void ADDON_ClearOutIdle(const AddonInstance_VFSEntry* instance)
+  {
+    return instance->toAddon.addonInstance->ClearOutIdle();
+  }
 
-    inline static bool ADDON_DirectoryExists(const AddonInstance_VFSEntry* instance, const VFSURL* url)
-    {
-      return instance->toAddon.addonInstance->DirectoryExists(*url);
-    }
+  inline static void ADDON_DisconnectAll(const AddonInstance_VFSEntry* instance)
+  {
+    return instance->toAddon.addonInstance->DisconnectAll();
+  }
 
-    inline static bool ADDON_RemoveDirectory(const AddonInstance_VFSEntry* instance, const VFSURL* url)
-    {
-      return instance->toAddon.addonInstance->RemoveDirectory(*url);
-    }
+  inline static bool ADDON_Delete(const AddonInstance_VFSEntry* instance, const VFSURL* url)
+  {
+    return instance->toAddon.addonInstance->Delete(*url);
+  }
 
-    inline static bool ADDON_CreateDirectory(const AddonInstance_VFSEntry* instance, const VFSURL* url)
-    {
-      return instance->toAddon.addonInstance->CreateDirectory(*url);
-    }
+  inline static bool ADDON_Rename(const AddonInstance_VFSEntry* instance,
+                                  const VFSURL* url,
+                                  const VFSURL* url2)
+  {
+    return instance->toAddon.addonInstance->Rename(*url, *url2);
+  }
+
+  inline static bool ADDON_DirectoryExists(const AddonInstance_VFSEntry* instance,
+                                           const VFSURL* url)
+  {
+    return instance->toAddon.addonInstance->DirectoryExists(*url);
+  }
+
+  inline static bool ADDON_RemoveDirectory(const AddonInstance_VFSEntry* instance,
+                                           const VFSURL* url)
+  {
+    return instance->toAddon.addonInstance->RemoveDirectory(*url);
+  }
 
-    inline static bool ADDON_GetDirectory(const AddonInstance_VFSEntry* instance,
-                                          const VFSURL* url,
-                                          VFSDirEntry** retEntries,
-                                          int* num_entries,
-                                          VFSGetDirectoryCallbacks* callbacks)
+  inline static bool ADDON_CreateDirectory(const AddonInstance_VFSEntry* instance,
+                                           const VFSURL* url)
+  {
+    return instance->toAddon.addonInstance->CreateDirectory(*url);
+  }
+
+  inline static bool ADDON_GetDirectory(const AddonInstance_VFSEntry* instance,
+                                        const VFSURL* url,
+                                        VFSDirEntry** retEntries,
+                                        int* num_entries,
+                                        VFSGetDirectoryCallbacks* callbacks)
+  {
+    std::vector<kodi::vfs::CDirEntry> addonEntries;
+    bool ret =
+        instance->toAddon.addonInstance->GetDirectory(*url, addonEntries, CVFSCallbacks(callbacks));
+    if (ret)
     {
-      std::vector<kodi::vfs::CDirEntry> addonEntries;
-      bool ret = instance->toAddon.addonInstance->GetDirectory(*url, addonEntries, CVFSCallbacks(callbacks));
-      if (ret)
+      VFSDirEntry* entries =
+          static_cast<VFSDirEntry*>(malloc(sizeof(VFSDirEntry) * addonEntries.size()));
+      for (unsigned int i = 0; i < addonEntries.size(); ++i)
       {
-        VFSDirEntry* entries = static_cast<VFSDirEntry*>(malloc(sizeof(VFSDirEntry) * addonEntries.size()));
-        for (unsigned int i = 0; i < addonEntries.size(); ++i)
+        entries[i].label = strdup(addonEntries[i].Label().c_str());
+        entries[i].title = strdup(addonEntries[i].Title().c_str());
+        entries[i].path = strdup(addonEntries[i].Path().c_str());
+        entries[i].folder = addonEntries[i].IsFolder();
+        entries[i].size = addonEntries[i].Size();
+        entries[i].date_time = addonEntries[i].DateTime();
+
+        entries[i].num_props = 0;
+        const std::map<std::string, std::string>& props = addonEntries[i].GetProperties();
+        if (!props.empty())
         {
-          entries[i].label = strdup(addonEntries[i].Label().c_str());
-          entries[i].title = strdup(addonEntries[i].Title().c_str());
-          entries[i].path = strdup(addonEntries[i].Path().c_str());
-          entries[i].folder = addonEntries[i].IsFolder();
-          entries[i].size = addonEntries[i].Size();
-          entries[i].date_time = addonEntries[i].DateTime();
-
-          entries[i].num_props = 0;
-          const std::map<std::string, std::string>& props = addonEntries[i].GetProperties();
-          if (!props.empty())
+          entries[i].properties =
+              static_cast<VFSProperty*>(malloc(sizeof(VFSProperty) * props.size()));
+          for (const auto& prop : props)
           {
-            entries[i].properties = static_cast<VFSProperty*>(malloc(sizeof(VFSProperty)*props.size()));
-            for (const auto& prop : props)
-            {
-              entries[i].properties[entries[i].num_props].name = strdup(prop.first.c_str());
-              entries[i].properties[entries[i].num_props].val = strdup(prop.second.c_str());
-              ++entries[i].num_props;
-            }
+            entries[i].properties[entries[i].num_props].name = strdup(prop.first.c_str());
+            entries[i].properties[entries[i].num_props].val = strdup(prop.second.c_str());
+            ++entries[i].num_props;
           }
-          else
-            entries[i].properties = nullptr;
         }
-        *retEntries = entries;
-        *num_entries = static_cast<int>(addonEntries.size());
+        else
+          entries[i].properties = nullptr;
       }
-      return ret;
+      *retEntries = entries;
+      *num_entries = static_cast<int>(addonEntries.size());
     }
+    return ret;
+  }
 
-    inline static void ADDON_FreeDirectory(const AddonInstance_VFSEntry* instance, VFSDirEntry* entries, int num_entries)
+  inline static void ADDON_FreeDirectory(const AddonInstance_VFSEntry* instance,
+                                         VFSDirEntry* entries,
+                                         int num_entries)
+  {
+    for (int i = 0; i < num_entries; ++i)
     {
-      for (int i = 0; i < num_entries; ++i)
+      if (entries[i].properties)
       {
-        if (entries[i].properties)
+        for (unsigned int j = 0; j < entries[i].num_props; ++j)
         {
-          for (unsigned int j = 0; j < entries[i].num_props; ++j)
-          {
-            free(entries[i].properties[j].name);
-            free(entries[i].properties[j].val);
-          }
-          free(entries[i].properties);
+          free(entries[i].properties[j].name);
+          free(entries[i].properties[j].val);
         }
-        free(entries[i].label);
-        free(entries[i].title);
-        free(entries[i].path);
+        free(entries[i].properties);
       }
-      free(entries);
+      free(entries[i].label);
+      free(entries[i].title);
+      free(entries[i].path);
     }
-
-    inline static bool ADDON_ContainsFiles(const AddonInstance_VFSEntry* instance,
-                                           const VFSURL* url,
-                                           VFSDirEntry** retEntries,
-                                           int* num_entries,
-                                           char* rootpath)
+    free(entries);
+  }
+
+  inline static bool ADDON_ContainsFiles(const AddonInstance_VFSEntry* instance,
+                                         const VFSURL* url,
+                                         VFSDirEntry** retEntries,
+                                         int* num_entries,
+                                         char* rootpath)
+  {
+    std::string cppRootPath;
+    std::vector<kodi::vfs::CDirEntry> addonEntries;
+    bool ret = instance->toAddon.addonInstance->ContainsFiles(*url, addonEntries, cppRootPath);
+    if (ret)
     {
-      std::string cppRootPath;
-      std::vector<kodi::vfs::CDirEntry> addonEntries;
-      bool ret = instance->toAddon.addonInstance->ContainsFiles(*url, addonEntries, cppRootPath);
-      if (ret)
-      {
-        strncpy(rootpath, cppRootPath.c_str(), ADDON_STANDARD_STRING_LENGTH);
+      strncpy(rootpath, cppRootPath.c_str(), ADDON_STANDARD_STRING_LENGTH);
 
-        VFSDirEntry* entries = static_cast<VFSDirEntry*>(malloc(sizeof(VFSDirEntry) * addonEntries.size()));
-        for (size_t i = 0; i < addonEntries.size(); ++i)
+      VFSDirEntry* entries =
+          static_cast<VFSDirEntry*>(malloc(sizeof(VFSDirEntry) * addonEntries.size()));
+      for (size_t i = 0; i < addonEntries.size(); ++i)
+      {
+        entries[i].label = strdup(addonEntries[i].Label().c_str());
+        entries[i].title = strdup(addonEntries[i].Title().c_str());
+        entries[i].path = strdup(addonEntries[i].Path().c_str());
+        entries[i].folder = addonEntries[i].IsFolder();
+        entries[i].size = addonEntries[i].Size();
+        entries[i].date_time = addonEntries[i].DateTime();
+
+        entries[i].num_props = 0;
+        const std::map<std::string, std::string>& props = addonEntries[i].GetProperties();
+        if (!props.empty())
         {
-          entries[i].label = strdup(addonEntries[i].Label().c_str());
-          entries[i].title = strdup(addonEntries[i].Title().c_str());
-          entries[i].path = strdup(addonEntries[i].Path().c_str());
-          entries[i].folder = addonEntries[i].IsFolder();
-          entries[i].size = addonEntries[i].Size();
-          entries[i].date_time = addonEntries[i].DateTime();
-
-          entries[i].num_props = 0;
-          const std::map<std::string, std::string>& props = addonEntries[i].GetProperties();
-          if (!props.empty())
+          entries[i].properties =
+              static_cast<VFSProperty*>(malloc(sizeof(VFSProperty) * props.size()));
+          for (const auto& prop : props)
           {
-            entries[i].properties = static_cast<VFSProperty*>(malloc(sizeof(VFSProperty)*props.size()));
-            for (const auto& prop : props)
-            {
-              entries[i].properties[entries[i].num_props].name = strdup(prop.first.c_str());
-              entries[i].properties[entries[i].num_props].val = strdup(prop.second.c_str());
-              ++entries[i].num_props;
-            }
+            entries[i].properties[entries[i].num_props].name = strdup(prop.first.c_str());
+            entries[i].properties[entries[i].num_props].val = strdup(prop.second.c_str());
+            ++entries[i].num_props;
           }
-          else
-            entries[i].properties = nullptr;
         }
-        *retEntries = entries;
-        *num_entries = static_cast<int>(addonEntries.size());
+        else
+          entries[i].properties = nullptr;
       }
-      return ret;
+      *retEntries = entries;
+      *num_entries = static_cast<int>(addonEntries.size());
     }
+    return ret;
+  }
 
-    AddonInstance_VFSEntry* m_instanceData;
-  };
+  AddonInstance_VFSEntry* m_instanceData;
+};
 
 } /* namespace addon */
 } /* namespace kodi */

From 06075ee6de6097e94493cd590ef4c13b96d28b88 Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Tue, 17 Mar 2020 16:41:19 +0100
Subject: [PATCH 2/8] [addons][vfs] do not interact addon class with Kodi

This was before given to Kodi to have on his calls to addon.
That basically not match a "C" ABI where the use of "C++" parts within
"C" not allowed!

With this it becomes given via "void*" to Kodi and with a "static_cast"
changed back to required class on addon.
---
 .../include/kodi/addon-instance/VFS.h         | 56 ++++++++++---------
 1 file changed, 30 insertions(+), 26 deletions(-)

diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/VFS.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/VFS.h
index 9a34c5397f8c..3efe90d51863 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/VFS.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/VFS.h
@@ -17,8 +17,6 @@
 #include "PlatformDefs.h"
 #endif
 
-namespace kodi { namespace addon { class CInstanceVFS; }}
-
 extern "C"
 {
 
@@ -58,7 +56,7 @@ extern "C"
   struct AddonInstance_VFSEntry;
   typedef struct KodiToAddonFuncTable_VFSEntry /* internal */
   {
-    kodi::addon::CInstanceVFS* addonInstance;
+    KODI_HANDLE addonInstance;
 
     void* (__cdecl* open) (const AddonInstance_VFSEntry* instance, const VFSURL* url);
     void* (__cdecl* open_for_write) (const AddonInstance_VFSEntry* instance, const VFSURL* url, bool overwrite);
@@ -417,14 +415,15 @@ class CInstanceVFS : public IAddonInstance
 
   inline static void* ADDON_Open(const AddonInstance_VFSEntry* instance, const VFSURL* url)
   {
-    return instance->toAddon.addonInstance->Open(*url);
+    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)->Open(*url);
   }
 
   inline static void* ADDON_OpenForWrite(const AddonInstance_VFSEntry* instance,
                                          const VFSURL* url,
                                          bool overWrite)
   {
-    return instance->toAddon.addonInstance->OpenForWrite(*url, overWrite);
+    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)
+        ->OpenForWrite(*url, overWrite);
   }
 
   inline static ssize_t ADDON_Read(const AddonInstance_VFSEntry* instance,
@@ -432,7 +431,8 @@ class CInstanceVFS : public IAddonInstance
                                    void* buffer,
                                    size_t uiBufSize)
   {
-    return instance->toAddon.addonInstance->Read(context, buffer, uiBufSize);
+    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)
+        ->Read(context, buffer, uiBufSize);
   }
 
   inline static ssize_t ADDON_Write(const AddonInstance_VFSEntry* instance,
@@ -440,7 +440,8 @@ class CInstanceVFS : public IAddonInstance
                                     const void* buffer,
                                     size_t uiBufSize)
   {
-    return instance->toAddon.addonInstance->Write(context, buffer, uiBufSize);
+    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)
+        ->Write(context, buffer, uiBufSize);
   }
 
   inline static int64_t ADDON_Seek(const AddonInstance_VFSEntry* instance,
@@ -448,29 +449,30 @@ class CInstanceVFS : public IAddonInstance
                                    int64_t position,
                                    int whence)
   {
-    return instance->toAddon.addonInstance->Seek(context, position, whence);
+    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)
+        ->Seek(context, position, whence);
   }
 
   inline static int ADDON_Truncate(const AddonInstance_VFSEntry* instance,
                                    void* context,
                                    int64_t size)
   {
-    return instance->toAddon.addonInstance->Truncate(context, size);
+    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)->Truncate(context, size);
   }
 
   inline static int64_t ADDON_GetLength(const AddonInstance_VFSEntry* instance, void* context)
   {
-    return instance->toAddon.addonInstance->GetLength(context);
+    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)->GetLength(context);
   }
 
   inline static int64_t ADDON_GetPosition(const AddonInstance_VFSEntry* instance, void* context)
   {
-    return instance->toAddon.addonInstance->GetPosition(context);
+    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)->GetPosition(context);
   }
 
   inline static int ADDON_GetChunkSize(const AddonInstance_VFSEntry* instance, void* context)
   {
-    return instance->toAddon.addonInstance->GetChunkSize(context);
+    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)->GetChunkSize(context);
   }
 
   inline static int ADDON_IoControl(const AddonInstance_VFSEntry* instance,
@@ -478,64 +480,65 @@ class CInstanceVFS : public IAddonInstance
                                     XFILE::EIoControl request,
                                     void* param)
   {
-    return instance->toAddon.addonInstance->IoControl(context, request, param);
+    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)
+        ->IoControl(context, request, param);
   }
 
   inline static int ADDON_Stat(const AddonInstance_VFSEntry* instance,
                                const VFSURL* url,
                                struct __stat64* buffer)
   {
-    return instance->toAddon.addonInstance->Stat(*url, buffer);
+    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)->Stat(*url, buffer);
   }
 
   inline static bool ADDON_Close(const AddonInstance_VFSEntry* instance, void* context)
   {
-    return instance->toAddon.addonInstance->Close(context);
+    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)->Close(context);
   }
 
   inline static bool ADDON_Exists(const AddonInstance_VFSEntry* instance, const VFSURL* url)
   {
-    return instance->toAddon.addonInstance->Exists(*url);
+    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)->Exists(*url);
   }
 
   inline static void ADDON_ClearOutIdle(const AddonInstance_VFSEntry* instance)
   {
-    return instance->toAddon.addonInstance->ClearOutIdle();
+    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)->ClearOutIdle();
   }
 
   inline static void ADDON_DisconnectAll(const AddonInstance_VFSEntry* instance)
   {
-    return instance->toAddon.addonInstance->DisconnectAll();
+    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)->DisconnectAll();
   }
 
   inline static bool ADDON_Delete(const AddonInstance_VFSEntry* instance, const VFSURL* url)
   {
-    return instance->toAddon.addonInstance->Delete(*url);
+    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)->Delete(*url);
   }
 
   inline static bool ADDON_Rename(const AddonInstance_VFSEntry* instance,
                                   const VFSURL* url,
                                   const VFSURL* url2)
   {
-    return instance->toAddon.addonInstance->Rename(*url, *url2);
+    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)->Rename(*url, *url2);
   }
 
   inline static bool ADDON_DirectoryExists(const AddonInstance_VFSEntry* instance,
                                            const VFSURL* url)
   {
-    return instance->toAddon.addonInstance->DirectoryExists(*url);
+    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)->DirectoryExists(*url);
   }
 
   inline static bool ADDON_RemoveDirectory(const AddonInstance_VFSEntry* instance,
                                            const VFSURL* url)
   {
-    return instance->toAddon.addonInstance->RemoveDirectory(*url);
+    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)->RemoveDirectory(*url);
   }
 
   inline static bool ADDON_CreateDirectory(const AddonInstance_VFSEntry* instance,
                                            const VFSURL* url)
   {
-    return instance->toAddon.addonInstance->CreateDirectory(*url);
+    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)->CreateDirectory(*url);
   }
 
   inline static bool ADDON_GetDirectory(const AddonInstance_VFSEntry* instance,
@@ -545,8 +548,8 @@ class CInstanceVFS : public IAddonInstance
                                         VFSGetDirectoryCallbacks* callbacks)
   {
     std::vector<kodi::vfs::CDirEntry> addonEntries;
-    bool ret =
-        instance->toAddon.addonInstance->GetDirectory(*url, addonEntries, CVFSCallbacks(callbacks));
+    bool ret = static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)
+                   ->GetDirectory(*url, addonEntries, CVFSCallbacks(callbacks));
     if (ret)
     {
       VFSDirEntry* entries =
@@ -612,7 +615,8 @@ class CInstanceVFS : public IAddonInstance
   {
     std::string cppRootPath;
     std::vector<kodi::vfs::CDirEntry> addonEntries;
-    bool ret = instance->toAddon.addonInstance->ContainsFiles(*url, addonEntries, cppRootPath);
+    bool ret = static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)
+                   ->ContainsFiles(*url, addonEntries, cppRootPath);
     if (ret)
     {
       strncpy(rootpath, cppRootPath.c_str(), ADDON_STANDARD_STRING_LENGTH);

From 4ae8eead898283720b93253f83d81caf12c43565 Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Tue, 17 Mar 2020 16:47:15 +0100
Subject: [PATCH 3/8] [addons][vfs] add "#ifdef __cplusplus" to addon header

Added to separate "C" and "C++" part and further to allow a "C" only
in future.
---
 .../kodi-addon-dev-kit/include/kodi/addon-instance/VFS.h     | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/VFS.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/VFS.h
index 3efe90d51863..f1d626730baa 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/VFS.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/VFS.h
@@ -17,8 +17,10 @@
 #include "PlatformDefs.h"
 #endif
 
+#ifdef __cplusplus
 extern "C"
 {
+#endif /* __cplusplus */
 
   struct VFSURL
   {
@@ -98,6 +100,7 @@ extern "C"
     KodiToAddonFuncTable_VFSEntry toAddon;
   } AddonInstance_VFSEntry;
 
+#ifdef __cplusplus
 } /* extern "C" */
 
 namespace kodi
@@ -659,3 +662,5 @@ class CInstanceVFS : public IAddonInstance
 
 } /* namespace addon */
 } /* namespace kodi */
+
+#endif /* __cplusplus */

From ce95ddd49f32edf8c8351c5703e6c912e0899102 Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Mon, 23 Mar 2020 22:55:45 +0100
Subject: [PATCH 4/8] [addons][vfs] prevent C++ designed Kodi Header
 IFileTypes.h

On this commit becomes them replaced to use independent enum and
structures, to pass related data between Kodi and Addon.

This prevents conflicts when using "C" and ensures a secure ABI interface.

In addition, it is much safer in the event that the Kodi changes what in its
headers. This can easily occur because previously it was not directly visible
that IFileTypes.h was also used on addons.

Only currently still used on libXBMC_addon.h and removed on PVR rework.
---
 xbmc/addons/VFSEntry.cpp                      | 78 ++++++++++++++++++-
 xbmc/addons/VFSEntry.h                        | 12 +++
 .../include/kodi/addon-instance/VFS.h         | 60 +++++++++++---
 xbmc/filesystem/IFileTypes.h                  |  1 +
 4 files changed, 140 insertions(+), 11 deletions(-)

diff --git a/xbmc/addons/VFSEntry.cpp b/xbmc/addons/VFSEntry.cpp
index c26b434a3562..06ce2e16ffb5 100644
--- a/xbmc/addons/VFSEntry.cpp
+++ b/xbmc/addons/VFSEntry.cpp
@@ -11,6 +11,7 @@
 #include "URL.h"
 #include "addons/binary-addons/BinaryAddonBase.h"
 #include "addons/binary-addons/BinaryAddonManager.h"
+#include "addons/interfaces/Filesystem.h"
 #include "network/ZeroconfBrowser.h"
 #include "utils/StringUtils.h"
 #include "utils/log.h"
@@ -276,7 +277,44 @@ int CVFSEntry::IoControl(void* ctx, XFILE::EIoControl request, void* param)
   if (!m_struct.toAddon.io_control)
     return -1;
 
-  return m_struct.toAddon.io_control(&m_struct, ctx, request, param);
+  VFS_IOCTRL ctrl = TranslateIOCTRLToAddon(request);
+  if (ctrl == VFS_IOCTRL_INVALID)
+    return -1;
+
+  /*! @note @ref VFS_IOCTRL_NATIVE a call to addon to give data! */
+  if (ctrl == VFS_IOCTRL_NATIVE)
+  {
+    XFILE::SNativeIoControl* kodiData = static_cast<XFILE::SNativeIoControl*>(param);
+    if (!kodiData)
+      return -1;
+
+    VFS_IOCTRL_NATIVE_DATA data;
+    data.request = kodiData->request;
+    data.param = kodiData->param;
+    return m_struct.toAddon.io_control(&m_struct, ctx, ctrl, &data);
+  }
+
+  /*! @note @ref VFS_IOCTRL_CACHE_STATUS a call to addon to become data from him! */
+  if (ctrl == VFS_IOCTRL_CACHE_STATUS)
+  {
+    XFILE::SCacheStatus* kodiData = static_cast<XFILE::SCacheStatus*>(param);
+    if (!kodiData)
+      return -1;
+
+    VFS_IOCTRL_CACHE_STATUS_DATA data;
+    int ret = m_struct.toAddon.io_control(&m_struct, ctx, ctrl, &data);
+    if (ret >= 0)
+    {
+      kodiData->forward = data.forward;
+      kodiData->maxrate = data.maxrate;
+      kodiData->currate = data.currate;
+      kodiData->lowspeed = data.lowspeed;
+    }
+    return ret;
+  }
+
+  /*! Do the rest for IoControl, the "param" should normally "nullptr" for this. */
+  return m_struct.toAddon.io_control(&m_struct, ctx, ctrl, param);
 }
 
 bool CVFSEntry::Delete(const CURL& url)
@@ -415,6 +453,44 @@ bool CVFSEntry::ContainsFiles(const CURL& url, CFileItemList& items)
   return true;
 }
 
+int CVFSEntry::TranslateIOCTRLToKodi(VFS_IOCTRL ioctrl)
+{
+  switch(ioctrl)
+  {
+    case VFS_IOCTRL_NATIVE:
+      return XFILE::EIoControl::IOCTRL_NATIVE;
+    case VFS_IOCTRL_SEEK_POSSIBLE:
+      return XFILE::EIoControl::IOCTRL_SEEK_POSSIBLE;
+    case VFS_IOCTRL_CACHE_STATUS:
+      return XFILE::EIoControl::IOCTRL_CACHE_STATUS;
+    case VFS_IOCTRL_CACHE_SETRATE:
+      return XFILE::EIoControl::IOCTRL_CACHE_SETRATE;
+    case VFS_IOCTRL_SET_RETRY:
+      return XFILE::EIoControl::IOCTRL_SET_RETRY;
+    default:
+      return XFILE::EIoControl::IOCTRL_INVALID;
+  }
+}
+
+VFS_IOCTRL CVFSEntry::TranslateIOCTRLToAddon(int ioctrl)
+{
+  switch(ioctrl)
+  {
+    case XFILE::EIoControl::IOCTRL_NATIVE:
+      return VFS_IOCTRL_NATIVE;
+    case XFILE::EIoControl::IOCTRL_SEEK_POSSIBLE:
+      return VFS_IOCTRL_SEEK_POSSIBLE;
+    case XFILE::EIoControl::IOCTRL_CACHE_STATUS:
+      return VFS_IOCTRL_CACHE_STATUS;
+    case XFILE::EIoControl::IOCTRL_CACHE_SETRATE:
+      return VFS_IOCTRL_CACHE_SETRATE;
+    case XFILE::EIoControl::IOCTRL_SET_RETRY:
+      return VFS_IOCTRL_SET_RETRY;
+    default:
+      return VFS_IOCTRL_INVALID;
+  }
+}
+
 CVFSEntryIFileWrapper::CVFSEntryIFileWrapper(VFSEntryPtr ptr) :
   m_context(nullptr), m_addon(ptr)
 {
diff --git a/xbmc/addons/VFSEntry.h b/xbmc/addons/VFSEntry.h
index 2fc52b60f717..9b2f7359f858 100644
--- a/xbmc/addons/VFSEntry.h
+++ b/xbmc/addons/VFSEntry.h
@@ -97,6 +97,18 @@ namespace ADDON
     const std::string& GetZeroconfType() const { return m_zeroconf; }
     const ProtocolInfo& GetProtocolInfo() const { return m_protocolInfo; }
   protected:
+    /*!
+     * @brief TO translate `enum XFILE::EIoControl` to/from `enum VFS_IOCTRL`.
+     *
+     * This is meant to interact securely between Kodi and addon.
+     *
+     * @note The `int` there is `enum XFILE::EIoControl`
+     */
+    //@{
+    static int TranslateIOCTRLToKodi(VFS_IOCTRL ioctrl);
+    static VFS_IOCTRL TranslateIOCTRLToAddon(int ioctrl);
+    //@}
+
     std::string m_protocols;  //!< Protocols for VFS entry.
     std::string m_extensions; //!< Extensions for VFS entry.
     std::string m_zeroconf;   //!< Zero conf announce string for VFS protocol.
diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/VFS.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/VFS.h
index f1d626730baa..75088ad2057a 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/VFS.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/VFS.h
@@ -10,13 +10,6 @@
 #include "../AddonBase.h"
 #include "../Filesystem.h"
 
-#ifdef BUILD_KODI_ADDON
-#include "../IFileTypes.h"
-#else
-#include "filesystem/IFileTypes.h"
-#include "PlatformDefs.h"
-#endif
-
 #ifdef __cplusplus
 extern "C"
 {
@@ -37,6 +30,53 @@ extern "C"
     const char* protocol;
   };
 
+  struct VFS_IOCTRL_NATIVE_DATA
+  {
+    unsigned long int request;
+    void* param;
+  };
+
+  struct VFS_IOCTRL_CACHE_STATUS_DATA
+  {
+    /// @brief Number of bytes cached forward of current position.
+    uint64_t forward;
+
+    /// @brief Maximum number of bytes per second cache is allowed to fill.
+    unsigned int maxrate;
+
+    /// @brief Average read rate from source file since last position change.
+    unsigned int currate;
+
+    /// @brief Cache low speed condition detected?
+    bool lowspeed;
+  };
+
+  enum VFS_IOCTRL
+  {
+    /// @brief For cases where not supported control becomes asked.
+    ///
+    /// @note Should normally not given to addon.
+    VFS_IOCTRL_INVALID = 0,
+
+    /// @brief @ref VFS_IOCTRL_NATIVE_DATA structure, containing what should be
+    /// passed to native ioctrl.
+    VFS_IOCTRL_NATIVE = 1,
+
+    /// @brief To check seek is possible.
+    ///
+    //// Return 0 if known not to work, 1 if it should work on related calls.
+    VFS_IOCTRL_SEEK_POSSIBLE = 2,
+
+    /// @brief @ref VFS_IOCTRL_CACHE_STATUS_DATA structure structure on related call
+    VFS_IOCTRL_CACHE_STATUS = 3,
+
+    /// @brief Unsigned int with speed limit for caching in bytes per second
+    VFS_IOCTRL_CACHE_SETRATE = 4,
+
+    /// @brief Enable/disable retry within the protocol handler (if supported)
+    VFS_IOCTRL_SET_RETRY = 16,
+  };
+
   typedef struct VFSGetDirectoryCallbacks /* internal */
   {
     bool (__cdecl* get_keyboard_input)(void* ctx, const char* heading, char** input, bool hidden_input);
@@ -69,7 +109,7 @@ extern "C"
     int64_t (__cdecl* get_length) (const AddonInstance_VFSEntry* instance, void* context);
     int64_t (__cdecl* get_position) (const AddonInstance_VFSEntry* instance, void* context);
     int (__cdecl* get_chunk_size) (const AddonInstance_VFSEntry* instance, void* context);
-    int (__cdecl* io_control) (const AddonInstance_VFSEntry* instance, void* context, XFILE::EIoControl request, void* param);
+    int (__cdecl* io_control) (const AddonInstance_VFSEntry* instance, void* context, enum VFS_IOCTRL request, void* param);
     int (__cdecl* stat) (const AddonInstance_VFSEntry* instance, const VFSURL* url, struct __stat64* buffer);
     bool (__cdecl* close) (const AddonInstance_VFSEntry* instance, void* context);
     bool (__cdecl* exists) (const AddonInstance_VFSEntry* instance, const VFSURL* url);
@@ -199,7 +239,7 @@ class CInstanceVFS : public IAddonInstance
   /// @param[in] param Parameter attached to the IO-control
   /// @return -1 on error, >= 0 on success
   ///
-  virtual int IoControl(void* context, XFILE::EIoControl request, void* param) { return -1; }
+  virtual int IoControl(void* context, VFS_IOCTRL request, void* param) { return -1; }
 
   /// @brief Close a file
   ///
@@ -480,7 +520,7 @@ class CInstanceVFS : public IAddonInstance
 
   inline static int ADDON_IoControl(const AddonInstance_VFSEntry* instance,
                                     void* context,
-                                    XFILE::EIoControl request,
+                                    enum VFS_IOCTRL request,
                                     void* param)
   {
     return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)
diff --git a/xbmc/filesystem/IFileTypes.h b/xbmc/filesystem/IFileTypes.h
index 6817752ccdf6..734b9adb734b 100644
--- a/xbmc/filesystem/IFileTypes.h
+++ b/xbmc/filesystem/IFileTypes.h
@@ -55,6 +55,7 @@ struct SCacheStatus
 };
 
 typedef enum {
+  IOCTRL_INVALID = 0, /**< For cases between addon and Kodi where addon bring not supported part */
   IOCTRL_NATIVE        = 1,  /**< SNativeIoControl structure, containing what should be passed to native ioctrl */
   IOCTRL_SEEK_POSSIBLE = 2,  /**< return 0 if known not to work, 1 if it should work */
   IOCTRL_CACHE_STATUS  = 3,  /**< SCacheStatus structure */

From 67f81400094f6e9c87d8d55c99f79109c1bedb3a Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Tue, 17 Mar 2020 22:13:14 +0100
Subject: [PATCH 5/8] [addons][vfs] make all "C" interface structures to own
 memory

This done to prevent API backward problems if something becomes replaced
e.g. on props or to kodi calls.
---
 xbmc/addons/VFSEntry.cpp                      | 113 ++++++++++--------
 .../include/kodi/addon-instance/VFS.h         | 103 ++++++++--------
 2 files changed, 115 insertions(+), 101 deletions(-)

diff --git a/xbmc/addons/VFSEntry.cpp b/xbmc/addons/VFSEntry.cpp
index 06ce2e16ffb5..590bfe80d346 100644
--- a/xbmc/addons/VFSEntry.cpp
+++ b/xbmc/addons/VFSEntry.cpp
@@ -163,8 +163,12 @@ CVFSEntry::CVFSEntry(BinaryAddonBasePtr addonInfo)
   if (!addonInfo->Type(ADDON_VFS)->GetValue("@supportDialog").asBoolean())
     m_protocolInfo.type.clear();
 
-  m_struct = {{ 0 }};
-  m_struct.toKodi.kodiInstance = this;
+  // Create "C" interface structures, used as own parts to prevent API problems on update
+  m_struct.props = new AddonProps_VFSEntry();
+  m_struct.toAddon = new KodiToAddonFuncTable_VFSEntry();
+  m_struct.toKodi = new AddonToKodiFuncTable_VFSEntry();
+
+  m_struct.toKodi->kodiInstance = this;
   if (CreateInstance(&m_struct) != ADDON_STATUS_OK)
     CLog::Log(LOGFATAL, "CVFSEntry - Couldn't create instance on add-on '%s'", addonInfo->Name().c_str());
 }
@@ -172,109 +176,114 @@ CVFSEntry::CVFSEntry(BinaryAddonBasePtr addonInfo)
 CVFSEntry::~CVFSEntry()
 {
   DestroyInstance();
+
+  // Delete "C" interface structures
+  delete m_struct.toAddon;
+  delete m_struct.toKodi;
+  delete m_struct.props;
 }
 
 void* CVFSEntry::Open(const CURL& url)
 {
-  if (!m_struct.toAddon.open)
+  if (!m_struct.toAddon->open)
     return nullptr;
 
   CVFSURLWrapper url2(url);
-  return m_struct.toAddon.open(&m_struct, &url2.url);
+  return m_struct.toAddon->open(&m_struct, &url2.url);
 }
 
 void* CVFSEntry::OpenForWrite(const CURL& url, bool bOverWrite)
 {
-  if (!m_struct.toAddon.open_for_write)
+  if (!m_struct.toAddon->open_for_write)
     return nullptr;
 
   CVFSURLWrapper url2(url);
-  return m_struct.toAddon.open_for_write(&m_struct, &url2.url, bOverWrite);
+  return m_struct.toAddon->open_for_write(&m_struct, &url2.url, bOverWrite);
 }
 
 bool CVFSEntry::Exists(const CURL& url)
 {
-  if (!m_struct.toAddon.exists)
+  if (!m_struct.toAddon->exists)
     return false;
 
   CVFSURLWrapper url2(url);
-  return m_struct.toAddon.exists(&m_struct, &url2.url);
+  return m_struct.toAddon->exists(&m_struct, &url2.url);
 }
 
 int CVFSEntry::Stat(const CURL& url, struct __stat64* buffer)
 {
-  if (!m_struct.toAddon.stat)
+  if (!m_struct.toAddon->stat)
     return -1;
 
   CVFSURLWrapper url2(url);
-  return m_struct.toAddon.stat(&m_struct, &url2.url, buffer);
+  return m_struct.toAddon->stat(&m_struct, &url2.url, buffer);
 }
 
 ssize_t CVFSEntry::Read(void* ctx, void* lpBuf, size_t uiBufSize)
 {
-  if (!m_struct.toAddon.read)
+  if (!m_struct.toAddon->read)
     return 0;
 
-  return m_struct.toAddon.read(&m_struct, ctx, lpBuf, uiBufSize);
+  return m_struct.toAddon->read(&m_struct, ctx, lpBuf, uiBufSize);
 }
 
 ssize_t CVFSEntry::Write(void* ctx, const void* lpBuf, size_t uiBufSize)
 {
-  if (!m_struct.toAddon.write)
+  if (!m_struct.toAddon->write)
     return 0;
 
-  return m_struct.toAddon.write(&m_struct, ctx, lpBuf, uiBufSize);
+  return m_struct.toAddon->write(&m_struct, ctx, lpBuf, uiBufSize);
 }
 
 int64_t CVFSEntry::Seek(void* ctx, int64_t position, int whence)
 {
-  if (!m_struct.toAddon.seek)
+  if (!m_struct.toAddon->seek)
     return 0;
 
-  return m_struct.toAddon.seek(&m_struct, ctx, position, whence);
+  return m_struct.toAddon->seek(&m_struct, ctx, position, whence);
 }
 
 int CVFSEntry::Truncate(void* ctx, int64_t size)
 {
-  if (!m_struct.toAddon.truncate)
+  if (!m_struct.toAddon->truncate)
     return 0;
 
-  return m_struct.toAddon.truncate(&m_struct, ctx, size);
+  return m_struct.toAddon->truncate(&m_struct, ctx, size);
 }
 
 void CVFSEntry::Close(void* ctx)
 {
-  if (m_struct.toAddon.close)
-    m_struct.toAddon.close(&m_struct, ctx);
+  if (m_struct.toAddon->close)
+    m_struct.toAddon->close(&m_struct, ctx);
 }
 
 int64_t CVFSEntry::GetPosition(void* ctx)
 {
-  if (!m_struct.toAddon.get_position)
+  if (!m_struct.toAddon->get_position)
     return 0;
 
-  return m_struct.toAddon.get_position(&m_struct, ctx);
+  return m_struct.toAddon->get_position(&m_struct, ctx);
 }
 
 int CVFSEntry::GetChunkSize(void* ctx)
 {
-  if (!m_struct.toAddon.get_chunk_size)
+  if (!m_struct.toAddon->get_chunk_size)
     return 0;
 
-  return m_struct.toAddon.get_chunk_size(&m_struct, ctx);
+  return m_struct.toAddon->get_chunk_size(&m_struct, ctx);
 }
 
 int64_t CVFSEntry::GetLength(void* ctx)
 {
-  if (!m_struct.toAddon.get_length)
+  if (!m_struct.toAddon->get_length)
     return 0;
 
-  return m_struct.toAddon.get_length(&m_struct, ctx);
+  return m_struct.toAddon->get_length(&m_struct, ctx);
 }
 
 int CVFSEntry::IoControl(void* ctx, XFILE::EIoControl request, void* param)
 {
-  if (!m_struct.toAddon.io_control)
+  if (!m_struct.toAddon->io_control)
     return -1;
 
   VFS_IOCTRL ctrl = TranslateIOCTRLToAddon(request);
@@ -291,7 +300,7 @@ int CVFSEntry::IoControl(void* ctx, XFILE::EIoControl request, void* param)
     VFS_IOCTRL_NATIVE_DATA data;
     data.request = kodiData->request;
     data.param = kodiData->param;
-    return m_struct.toAddon.io_control(&m_struct, ctx, ctrl, &data);
+    return m_struct.toAddon->io_control(&m_struct, ctx, ctrl, &data);
   }
 
   /*! @note @ref VFS_IOCTRL_CACHE_STATUS a call to addon to become data from him! */
@@ -301,8 +310,8 @@ int CVFSEntry::IoControl(void* ctx, XFILE::EIoControl request, void* param)
     if (!kodiData)
       return -1;
 
-    VFS_IOCTRL_CACHE_STATUS_DATA data;
-    int ret = m_struct.toAddon.io_control(&m_struct, ctx, ctrl, &data);
+    VFS_IOCTRL_CACHE_STATUS_DATA data = {0};
+    int ret = m_struct.toAddon->io_control(&m_struct, ctx, ctrl, &data);
     if (ret >= 0)
     {
       kodiData->forward = data.forward;
@@ -314,65 +323,65 @@ int CVFSEntry::IoControl(void* ctx, XFILE::EIoControl request, void* param)
   }
 
   /*! Do the rest for IoControl, the "param" should normally "nullptr" for this. */
-  return m_struct.toAddon.io_control(&m_struct, ctx, ctrl, param);
+  return m_struct.toAddon->io_control(&m_struct, ctx, ctrl, param);
 }
 
 bool CVFSEntry::Delete(const CURL& url)
 {
-  if (!m_struct.toAddon.delete_it)
+  if (!m_struct.toAddon->delete_it)
     return false;
 
   CVFSURLWrapper url2(url);
-  return m_struct.toAddon.delete_it(&m_struct, &url2.url);
+  return m_struct.toAddon->delete_it(&m_struct, &url2.url);
 }
 
 bool CVFSEntry::Rename(const CURL& url, const CURL& url2)
 {
-  if (!m_struct.toAddon.rename)
+  if (!m_struct.toAddon->rename)
     return false;
 
   CVFSURLWrapper url3(url);
   CVFSURLWrapper url4(url2);
-  return m_struct.toAddon.rename(&m_struct, &url3.url, &url4.url);
+  return m_struct.toAddon->rename(&m_struct, &url3.url, &url4.url);
 }
 
 void CVFSEntry::ClearOutIdle()
 {
-  if (m_struct.toAddon.clear_out_idle)
-    m_struct.toAddon.clear_out_idle(&m_struct);
+  if (m_struct.toAddon->clear_out_idle)
+    m_struct.toAddon->clear_out_idle(&m_struct);
 }
 
 void CVFSEntry::DisconnectAll()
 {
-  if (m_struct.toAddon.disconnect_all)
-    m_struct.toAddon.disconnect_all(&m_struct);
+  if (m_struct.toAddon->disconnect_all)
+    m_struct.toAddon->disconnect_all(&m_struct);
 }
 
 bool CVFSEntry::DirectoryExists(const CURL& url)
 {
-  if (!m_struct.toAddon.directory_exists)
+  if (!m_struct.toAddon->directory_exists)
     return false;
 
   CVFSURLWrapper url2(url);
-  return m_struct.toAddon.directory_exists(&m_struct, &url2.url);
+  return m_struct.toAddon->directory_exists(&m_struct, &url2.url);
 }
 
 bool CVFSEntry::RemoveDirectory(const CURL& url)
 {
-  if (!m_struct.toAddon.remove_directory)
+  if (!m_struct.toAddon->remove_directory)
     return false;
 
   CVFSURLWrapper url2(url);
-  return m_struct.toAddon.remove_directory(&m_struct, &url2.url);
+  return m_struct.toAddon->remove_directory(&m_struct, &url2.url);
 }
 
 bool CVFSEntry::CreateDirectory(const CURL& url)
 {
-  if (!m_struct.toAddon.create_directory)
+  if (!m_struct.toAddon->create_directory)
     return false;
 
   CVFSURLWrapper url2(url);
-  return m_struct.toAddon.create_directory(&m_struct, &url2.url);
+  return m_struct.toAddon->create_directory(&m_struct, &url2.url);
 }
 
 static void VFSDirEntriesToCFileItemList(int num_entries,
@@ -408,7 +417,7 @@ static void VFSDirEntriesToCFileItemList(int num_entries,
 bool CVFSEntry::GetDirectory(const CURL& url, CFileItemList& items,
                              void* ctx)
 {
-  if (!m_struct.toAddon.get_directory || !m_struct.toAddon.free_directory)
+  if (!m_struct.toAddon->get_directory || !m_struct.toAddon->free_directory)
     return false;
 
   VFSGetDirectoryCallbacks callbacks;
@@ -420,11 +429,12 @@ bool CVFSEntry::GetDirectory(const CURL& url, CFileItemList& items,
   VFSDirEntry* entries = nullptr;
   int num_entries = 0;
   CVFSURLWrapper url2(url);
-  bool ret = m_struct.toAddon.get_directory(&m_struct, &url2.url, &entries, &num_entries, &callbacks);
+  bool ret =
+      m_struct.toAddon->get_directory(&m_struct, &url2.url, &entries, &num_entries, &callbacks);
   if (ret)
   {
     VFSDirEntriesToCFileItemList(num_entries, entries, items);
-    m_struct.toAddon.free_directory(&m_struct, entries, num_entries);
+    m_struct.toAddon->free_directory(&m_struct, entries, num_entries);
   }
 
   return ret;
@@ -432,7 +442,7 @@ bool CVFSEntry::GetDirectory(const CURL& url, CFileItemList& items,
 
 bool CVFSEntry::ContainsFiles(const CURL& url, CFileItemList& items)
 {
-  if (!m_struct.toAddon.contains_files || !m_struct.toAddon.free_directory)
+  if (!m_struct.toAddon->contains_files || !m_struct.toAddon->free_directory)
     return false;
 
   VFSDirEntry* entries = nullptr;
@@ -441,12 +451,13 @@ bool CVFSEntry::ContainsFiles(const CURL& url, CFileItemList& items)
   CVFSURLWrapper url2(url);
   char rootpath[ADDON_STANDARD_STRING_LENGTH];
   rootpath[0] = 0;
-  bool ret = m_struct.toAddon.contains_files(&m_struct, &url2.url, &entries, &num_entries, rootpath);
+  bool ret =
+      m_struct.toAddon->contains_files(&m_struct, &url2.url, &entries, &num_entries, rootpath);
   if (!ret)
     return false;
 
   VFSDirEntriesToCFileItemList(num_entries, entries, items);
-  m_struct.toAddon.free_directory(&m_struct, entries, num_entries);
+  m_struct.toAddon->free_directory(&m_struct, entries, num_entries);
   if (strlen(rootpath))
     items.SetPath(rootpath);
 
diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/VFS.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/VFS.h
index 75088ad2057a..aa03ff6c0394 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/VFS.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/VFS.h
@@ -109,7 +109,10 @@ extern "C"
     int64_t (__cdecl* get_length) (const AddonInstance_VFSEntry* instance, void* context);
     int64_t (__cdecl* get_position) (const AddonInstance_VFSEntry* instance, void* context);
     int (__cdecl* get_chunk_size) (const AddonInstance_VFSEntry* instance, void* context);
-    int (__cdecl* io_control) (const AddonInstance_VFSEntry* instance, void* context, enum VFS_IOCTRL request, void* param);
+    int(__cdecl* io_control)(const AddonInstance_VFSEntry* instance,
+                             void* context,
+                             enum VFS_IOCTRL request,
+                             void* param);
     int (__cdecl* stat) (const AddonInstance_VFSEntry* instance, const VFSURL* url, struct __stat64* buffer);
     bool (__cdecl* close) (const AddonInstance_VFSEntry* instance, void* context);
     bool (__cdecl* exists) (const AddonInstance_VFSEntry* instance, const VFSURL* url);
@@ -135,9 +138,9 @@ extern "C"
 
   typedef struct AddonInstance_VFSEntry /* internal */
   {
-    AddonProps_VFSEntry props;
-    AddonToKodiFuncTable_VFSEntry toKodi;
-    KodiToAddonFuncTable_VFSEntry toAddon;
+    AddonProps_VFSEntry* props;
+    AddonToKodiFuncTable_VFSEntry* toKodi;
+    KodiToAddonFuncTable_VFSEntry* toAddon;
   } AddonInstance_VFSEntry;
 
 #ifdef __cplusplus
@@ -430,42 +433,42 @@ class CInstanceVFS : public IAddonInstance
                              "allowed, table must be given from Kodi!");
 
     m_instanceData = static_cast<AddonInstance_VFSEntry*>(instance);
-    m_instanceData->toAddon.addonInstance = this;
-    m_instanceData->toAddon.open = ADDON_Open;
-    m_instanceData->toAddon.open_for_write = ADDON_OpenForWrite;
-    m_instanceData->toAddon.read = ADDON_Read;
-    m_instanceData->toAddon.write = ADDON_Write;
-    m_instanceData->toAddon.seek = ADDON_Seek;
-    m_instanceData->toAddon.truncate = ADDON_Truncate;
-    m_instanceData->toAddon.get_length = ADDON_GetLength;
-    m_instanceData->toAddon.get_position = ADDON_GetPosition;
-    m_instanceData->toAddon.get_chunk_size = ADDON_GetChunkSize;
-    m_instanceData->toAddon.io_control = ADDON_IoControl;
-    m_instanceData->toAddon.stat = ADDON_Stat;
-    m_instanceData->toAddon.close = ADDON_Close;
-    m_instanceData->toAddon.exists = ADDON_Exists;
-    m_instanceData->toAddon.clear_out_idle = ADDON_ClearOutIdle;
-    m_instanceData->toAddon.disconnect_all = ADDON_DisconnectAll;
-    m_instanceData->toAddon.delete_it = ADDON_Delete;
-    m_instanceData->toAddon.rename = ADDON_Rename;
-    m_instanceData->toAddon.directory_exists = ADDON_DirectoryExists;
-    m_instanceData->toAddon.remove_directory = ADDON_RemoveDirectory;
-    m_instanceData->toAddon.create_directory = ADDON_CreateDirectory;
-    m_instanceData->toAddon.get_directory = ADDON_GetDirectory;
-    m_instanceData->toAddon.free_directory = ADDON_FreeDirectory;
-    m_instanceData->toAddon.contains_files = ADDON_ContainsFiles;
+    m_instanceData->toAddon->addonInstance = this;
+    m_instanceData->toAddon->open = ADDON_Open;
+    m_instanceData->toAddon->open_for_write = ADDON_OpenForWrite;
+    m_instanceData->toAddon->read = ADDON_Read;
+    m_instanceData->toAddon->write = ADDON_Write;
+    m_instanceData->toAddon->seek = ADDON_Seek;
+    m_instanceData->toAddon->truncate = ADDON_Truncate;
+    m_instanceData->toAddon->get_length = ADDON_GetLength;
+    m_instanceData->toAddon->get_position = ADDON_GetPosition;
+    m_instanceData->toAddon->get_chunk_size = ADDON_GetChunkSize;
+    m_instanceData->toAddon->io_control = ADDON_IoControl;
+    m_instanceData->toAddon->stat = ADDON_Stat;
+    m_instanceData->toAddon->close = ADDON_Close;
+    m_instanceData->toAddon->exists = ADDON_Exists;
+    m_instanceData->toAddon->clear_out_idle = ADDON_ClearOutIdle;
+    m_instanceData->toAddon->disconnect_all = ADDON_DisconnectAll;
+    m_instanceData->toAddon->delete_it = ADDON_Delete;
+    m_instanceData->toAddon->rename = ADDON_Rename;
+    m_instanceData->toAddon->directory_exists = ADDON_DirectoryExists;
+    m_instanceData->toAddon->remove_directory = ADDON_RemoveDirectory;
+    m_instanceData->toAddon->create_directory = ADDON_CreateDirectory;
+    m_instanceData->toAddon->get_directory = ADDON_GetDirectory;
+    m_instanceData->toAddon->free_directory = ADDON_FreeDirectory;
+    m_instanceData->toAddon->contains_files = ADDON_ContainsFiles;
   }
 
   inline static void* ADDON_Open(const AddonInstance_VFSEntry* instance, const VFSURL* url)
   {
-    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)->Open(*url);
+    return static_cast<CInstanceVFS*>(instance->toAddon->addonInstance)->Open(*url);
   }
 
   inline static void* ADDON_OpenForWrite(const AddonInstance_VFSEntry* instance,
                                          const VFSURL* url,
                                          bool overWrite)
   {
-    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)
+    return static_cast<CInstanceVFS*>(instance->toAddon->addonInstance)
         ->OpenForWrite(*url, overWrite);
   }
 
@@ -474,7 +477,7 @@ class CInstanceVFS : public IAddonInstance
                                    void* buffer,
                                    size_t uiBufSize)
   {
-    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)
+    return static_cast<CInstanceVFS*>(instance->toAddon->addonInstance)
         ->Read(context, buffer, uiBufSize);
   }
 
@@ -483,7 +486,7 @@ class CInstanceVFS : public IAddonInstance
                                     const void* buffer,
                                     size_t uiBufSize)
   {
-    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)
+    return static_cast<CInstanceVFS*>(instance->toAddon->addonInstance)
         ->Write(context, buffer, uiBufSize);
   }
 
@@ -492,7 +495,7 @@ class CInstanceVFS : public IAddonInstance
                                    int64_t position,
                                    int whence)
   {
-    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)
+    return static_cast<CInstanceVFS*>(instance->toAddon->addonInstance)
         ->Seek(context, position, whence);
   }
 
@@ -500,22 +503,22 @@ class CInstanceVFS : public IAddonInstance
                                    void* context,
                                    int64_t size)
   {
-    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)->Truncate(context, size);
+    return static_cast<CInstanceVFS*>(instance->toAddon->addonInstance)->Truncate(context, size);
   }
 
   inline static int64_t ADDON_GetLength(const AddonInstance_VFSEntry* instance, void* context)
   {
-    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)->GetLength(context);
+    return static_cast<CInstanceVFS*>(instance->toAddon->addonInstance)->GetLength(context);
   }
 
   inline static int64_t ADDON_GetPosition(const AddonInstance_VFSEntry* instance, void* context)
   {
-    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)->GetPosition(context);
+    return static_cast<CInstanceVFS*>(instance->toAddon->addonInstance)->GetPosition(context);
   }
 
   inline static int ADDON_GetChunkSize(const AddonInstance_VFSEntry* instance, void* context)
   {
-    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)->GetChunkSize(context);
+    return static_cast<CInstanceVFS*>(instance->toAddon->addonInstance)->GetChunkSize(context);
   }
 
   inline static int ADDON_IoControl(const AddonInstance_VFSEntry* instance,
@@ -523,7 +526,7 @@ class CInstanceVFS : public IAddonInstance
                                     enum VFS_IOCTRL request,
                                     void* param)
   {
-    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)
+    return static_cast<CInstanceVFS*>(instance->toAddon->addonInstance)
         ->IoControl(context, request, param);
   }
 
@@ -531,57 +534,57 @@ class CInstanceVFS : public IAddonInstance
                                const VFSURL* url,
                                struct __stat64* buffer)
   {
-    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)->Stat(*url, buffer);
+    return static_cast<CInstanceVFS*>(instance->toAddon->addonInstance)->Stat(*url, buffer);
   }
 
   inline static bool ADDON_Close(const AddonInstance_VFSEntry* instance, void* context)
   {
-    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)->Close(context);
+    return static_cast<CInstanceVFS*>(instance->toAddon->addonInstance)->Close(context);
   }
 
   inline static bool ADDON_Exists(const AddonInstance_VFSEntry* instance, const VFSURL* url)
   {
-    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)->Exists(*url);
+    return static_cast<CInstanceVFS*>(instance->toAddon->addonInstance)->Exists(*url);
   }
 
   inline static void ADDON_ClearOutIdle(const AddonInstance_VFSEntry* instance)
   {
-    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)->ClearOutIdle();
+    return static_cast<CInstanceVFS*>(instance->toAddon->addonInstance)->ClearOutIdle();
   }
 
   inline static void ADDON_DisconnectAll(const AddonInstance_VFSEntry* instance)
   {
-    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)->DisconnectAll();
+    return static_cast<CInstanceVFS*>(instance->toAddon->addonInstance)->DisconnectAll();
   }
 
   inline static bool ADDON_Delete(const AddonInstance_VFSEntry* instance, const VFSURL* url)
   {
-    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)->Delete(*url);
+    return static_cast<CInstanceVFS*>(instance->toAddon->addonInstance)->Delete(*url);
   }
 
   inline static bool ADDON_Rename(const AddonInstance_VFSEntry* instance,
                                   const VFSURL* url,
                                   const VFSURL* url2)
   {
-    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)->Rename(*url, *url2);
+    return static_cast<CInstanceVFS*>(instance->toAddon->addonInstance)->Rename(*url, *url2);
   }
 
   inline static bool ADDON_DirectoryExists(const AddonInstance_VFSEntry* instance,
                                            const VFSURL* url)
   {
-    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)->DirectoryExists(*url);
+    return static_cast<CInstanceVFS*>(instance->toAddon->addonInstance)->DirectoryExists(*url);
   }
 
   inline static bool ADDON_RemoveDirectory(const AddonInstance_VFSEntry* instance,
                                            const VFSURL* url)
   {
-    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)->RemoveDirectory(*url);
+    return static_cast<CInstanceVFS*>(instance->toAddon->addonInstance)->RemoveDirectory(*url);
   }
 
   inline static bool ADDON_CreateDirectory(const AddonInstance_VFSEntry* instance,
                                            const VFSURL* url)
   {
-    return static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)->CreateDirectory(*url);
+    return static_cast<CInstanceVFS*>(instance->toAddon->addonInstance)->CreateDirectory(*url);
   }
 
   inline static bool ADDON_GetDirectory(const AddonInstance_VFSEntry* instance,
@@ -591,7 +594,7 @@ class CInstanceVFS : public IAddonInstance
                                         VFSGetDirectoryCallbacks* callbacks)
   {
     std::vector<kodi::vfs::CDirEntry> addonEntries;
-    bool ret = static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)
+    bool ret = static_cast<CInstanceVFS*>(instance->toAddon->addonInstance)
                    ->GetDirectory(*url, addonEntries, CVFSCallbacks(callbacks));
     if (ret)
     {
@@ -658,7 +661,7 @@ class CInstanceVFS : public IAddonInstance
   {
     std::string cppRootPath;
     std::vector<kodi::vfs::CDirEntry> addonEntries;
-    bool ret = static_cast<CInstanceVFS*>(instance->toAddon.addonInstance)
+    bool ret = static_cast<CInstanceVFS*>(instance->toAddon->addonInstance)
                    ->ContainsFiles(*url, addonEntries, cppRootPath);
     if (ret)
     {

From fd38f5625e9bfe868cdcdaab7cd0bd6a0de6fa44 Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Tue, 17 Mar 2020 23:03:19 +0100
Subject: [PATCH 6/8] [addons][vfs] change ABI interface to match pure "C"

This changes the interface to pure "C" and no "C++" dependencies in it.
---
 .../include/kodi/addon-instance/VFS.h         | 83 ++++++++++++-------
 1 file changed, 53 insertions(+), 30 deletions(-)

diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/VFS.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/VFS.h
index aa03ff6c0394..8043f6cb2995 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/VFS.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/VFS.h
@@ -100,40 +100,63 @@ extern "C"
   {
     KODI_HANDLE addonInstance;
 
-    void* (__cdecl* open) (const AddonInstance_VFSEntry* instance, const VFSURL* url);
-    void* (__cdecl* open_for_write) (const AddonInstance_VFSEntry* instance, const VFSURL* url, bool overwrite);
-    ssize_t (__cdecl* read) (const AddonInstance_VFSEntry* instance, void* context, void* buffer, size_t buf_size);
-    ssize_t (__cdecl* write) (const AddonInstance_VFSEntry* instance, void* context, const void* buffer, size_t buf_size);
-    int64_t (__cdecl* seek) (const AddonInstance_VFSEntry* instance, void* context, int64_t position, int whence);
-    int (__cdecl* truncate) (const AddonInstance_VFSEntry* instance, void* context, int64_t size);
-    int64_t (__cdecl* get_length) (const AddonInstance_VFSEntry* instance, void* context);
-    int64_t (__cdecl* get_position) (const AddonInstance_VFSEntry* instance, void* context);
-    int (__cdecl* get_chunk_size) (const AddonInstance_VFSEntry* instance, void* context);
-    int(__cdecl* io_control)(const AddonInstance_VFSEntry* instance,
+    void*(__cdecl* open)(const struct AddonInstance_VFSEntry* instance, const struct VFSURL* url);
+    void*(__cdecl* open_for_write)(const struct AddonInstance_VFSEntry* instance,
+                                   const struct VFSURL* url,
+                                   bool overwrite);
+    ssize_t(__cdecl* read)(const struct AddonInstance_VFSEntry* instance,
+                           void* context,
+                           void* buffer,
+                           size_t buf_size);
+    ssize_t(__cdecl* write)(const struct AddonInstance_VFSEntry* instance,
+                            void* context,
+                            const void* buffer,
+                            size_t buf_size);
+    int64_t(__cdecl* seek)(const struct AddonInstance_VFSEntry* instance,
+                           void* context,
+                           int64_t position,
+                           int whence);
+    int(__cdecl* truncate)(const struct AddonInstance_VFSEntry* instance,
+                           void* context,
+                           int64_t size);
+    int64_t(__cdecl* get_length)(const struct AddonInstance_VFSEntry* instance, void* context);
+    int64_t(__cdecl* get_position)(const struct AddonInstance_VFSEntry* instance, void* context);
+    int(__cdecl* get_chunk_size)(const struct AddonInstance_VFSEntry* instance, void* context);
+    int(__cdecl* io_control)(const struct AddonInstance_VFSEntry* instance,
                              void* context,
                              enum VFS_IOCTRL request,
                              void* param);
-    int (__cdecl* stat) (const AddonInstance_VFSEntry* instance, const VFSURL* url, struct __stat64* buffer);
-    bool (__cdecl* close) (const AddonInstance_VFSEntry* instance, void* context);
-    bool (__cdecl* exists) (const AddonInstance_VFSEntry* instance, const VFSURL* url);
-    void (__cdecl* clear_out_idle) (const AddonInstance_VFSEntry* instance);
-    void (__cdecl* disconnect_all) (const AddonInstance_VFSEntry* instance);
-    bool (__cdecl* delete_it) (const AddonInstance_VFSEntry* instance, const VFSURL* url);
-    bool (__cdecl* rename) (const AddonInstance_VFSEntry* instance, const VFSURL* url, const VFSURL* url2);
-    bool (__cdecl* directory_exists) (const AddonInstance_VFSEntry* instance, const VFSURL* url);
-    bool (__cdecl* remove_directory) (const AddonInstance_VFSEntry* instance, const VFSURL* url);
-    bool (__cdecl* create_directory) (const AddonInstance_VFSEntry* instance, const VFSURL* url);
-    bool (__cdecl* get_directory) (const AddonInstance_VFSEntry* instance,
-                                  const VFSURL* url,
-                                  VFSDirEntry** entries,
+    int(__cdecl* stat)(const struct AddonInstance_VFSEntry* instance,
+                       const struct VFSURL* url,
+                       struct __stat64* buffer);
+    bool(__cdecl* close)(const struct AddonInstance_VFSEntry* instance, void* context);
+    bool(__cdecl* exists)(const struct AddonInstance_VFSEntry* instance, const struct VFSURL* url);
+    void(__cdecl* clear_out_idle)(const struct AddonInstance_VFSEntry* instance);
+    void(__cdecl* disconnect_all)(const struct AddonInstance_VFSEntry* instance);
+    bool(__cdecl* delete_it)(const struct AddonInstance_VFSEntry* instance,
+                             const struct VFSURL* url);
+    bool(__cdecl* rename)(const struct AddonInstance_VFSEntry* instance,
+                          const struct VFSURL* url,
+                          const struct VFSURL* url2);
+    bool(__cdecl* directory_exists)(const struct AddonInstance_VFSEntry* instance,
+                                    const struct VFSURL* url);
+    bool(__cdecl* remove_directory)(const struct AddonInstance_VFSEntry* instance,
+                                    const struct VFSURL* url);
+    bool(__cdecl* create_directory)(const struct AddonInstance_VFSEntry* instance,
+                                    const struct VFSURL* url);
+    bool(__cdecl* get_directory)(const struct AddonInstance_VFSEntry* instance,
+                                 const struct VFSURL* url,
+                                 struct VFSDirEntry** entries,
+                                 int* num_entries,
+                                 VFSGetDirectoryCallbacks* callbacks);
+    bool(__cdecl* contains_files)(const struct AddonInstance_VFSEntry* instance,
+                                  const struct VFSURL* url,
+                                  struct VFSDirEntry** entries,
                                   int* num_entries,
-                                  VFSGetDirectoryCallbacks* callbacks);
-    bool (__cdecl* contains_files) (const AddonInstance_VFSEntry* instance,
-                                   const VFSURL* url,
-                                   VFSDirEntry** entries,
-                                   int* num_entries,
-                                   char* rootpath);
-    void (__cdecl* free_directory) (const AddonInstance_VFSEntry* instance, VFSDirEntry* entries, int num_entries);
+                                  char* rootpath);
+    void(__cdecl* free_directory)(const struct AddonInstance_VFSEntry* instance,
+                                  struct VFSDirEntry* entries,
+                                  int num_entries);
   } KodiToAddonFuncTable_VFSEntry;
 
   typedef struct AddonInstance_VFSEntry /* internal */

From 8d52f4c2930e1c686fc91d10a6ba47a71a654c06 Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Sat, 21 Mar 2020 14:57:36 +0100
Subject: [PATCH 7/8] [addons][vfs] rework documentation

With this change the whole VFS documentation becomes reworked and to have
usable on doxygen.

There are much parts added to understand his usage.
---
 .../Modules/cpp_kodi_addon_vfs_protocol_1.png | Bin 0 -> 47796 bytes
 .../Modules/cpp_kodi_addon_vfs_protocol_2.png | Bin 0 -> 36079 bytes
 .../include/kodi/addon-instance/VFS.h         | 593 ++++++++++++++++--
 3 files changed, 557 insertions(+), 36 deletions(-)
 create mode 100644 xbmc/addons/kodi-addon-dev-kit/doxygen/Modules/cpp_kodi_addon_vfs_protocol_1.png
 create mode 100644 xbmc/addons/kodi-addon-dev-kit/doxygen/Modules/cpp_kodi_addon_vfs_protocol_2.png

diff --git a/xbmc/addons/kodi-addon-dev-kit/doxygen/Modules/cpp_kodi_addon_vfs_protocol_1.png b/xbmc/addons/kodi-addon-dev-kit/doxygen/Modules/cpp_kodi_addon_vfs_protocol_1.png
new file mode 100644
index 0000000000000000000000000000000000000000..46f9b8cf55e8411efb587d96957ab1f765032c02
GIT binary patch
literal 47796
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

literal 0
HcmV?d00001

diff --git a/xbmc/addons/kodi-addon-dev-kit/doxygen/Modules/cpp_kodi_addon_vfs_protocol_2.png b/xbmc/addons/kodi-addon-dev-kit/doxygen/Modules/cpp_kodi_addon_vfs_protocol_2.png
new file mode 100644
index 0000000000000000000000000000000000000000..7af0abfc84485f45896cc5aa04dff0f1df65043a
GIT binary patch
literal 36079
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
Z1EMZ0DsOqy2E3-1!PC{xWt~$(69CGd@f!dD

literal 0
HcmV?d00001

diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/VFS.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/VFS.h
index 8043f6cb2995..7a33d4b79429 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/VFS.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/addon-instance/VFS.h
@@ -15,42 +15,84 @@ extern "C"
 {
 #endif /* __cplusplus */
 
+  //============================================================================
+  /// @ingroup cpp_kodi_addon_vfs_Defs
+  /// @brief **VFS add-on URL data**\n
+  /// This class is used to inform the addon of the desired wanted connection.
+  ///
+  /// Used on mostly all addon functions to identify related target.
+  ///
   struct VFSURL
   {
+    /// @brief Desired URL of the file system to be edited
+    ///
+    /// This includes all available parts of the access and is structured as
+    /// follows:
+    /// - <b>`<PROTOCOL>`://`<USERNAME>`:`<PASSWORD>``@``<HOSTNAME>`:`<PORT>`/`<FILENAME>`?`<OPTIONS>`</b>
     const char* url;
+
+    /// @brief The associated domain name, which is optional and not available
+    /// in all cases.
     const char* domain;
+
+    /// @brief This includes the network address (e.g. `192.168.0.123`) or if
+    /// the addon refers to file packages the path to it
+    /// (e.g. `/home/by_me/MyPacket.rar`).
     const char* hostname;
+
+    /// @brief With this variable the desired path to a folder or file within
+    /// the hostname is given (e.g. `storage/videos/00001.ts`).
     const char* filename;
+
+    /// @brief [Networking port](https://en.wikipedia.org/wiki/Port_(computer_networking))
+    /// to use for protocol.
     unsigned int port;
+
+    /// @brief Special options on opened URL, this can e.g. on RAR packages
+    /// <b>`?flags=8&nextvalue=123`</b> to inform about to not cache a read.
+    ///
+    /// Available options from Kodi:
+    /// | Value:    | Description:
+    /// |-----------|-------------------
+    /// | flags=8   | Used on RAR packages so that no data is cached from the requested source.
+    /// | cache=no  | Used on ZIP packages so that no data from the requested source is stored in the cache. However, this is currently not available from addons!
+    ///
+    /// In addition, other addons can use the URLs given by them to give options
+    /// that fit the respective VFS addon and allow special operations.
+    ///
+    /// @note This procedure is not yet standardized and is currently not
+    /// exactly available which are handed over.
     const char* options;
-    const char* username;
-    const char* password;
-    const char* redacted;
-    const char* sharename;
-    const char* protocol;
-  };
 
-  struct VFS_IOCTRL_NATIVE_DATA
-  {
-    unsigned long int request;
-    void* param;
-  };
+    /// @brief Desired username.
+    const char* username;
 
-  struct VFS_IOCTRL_CACHE_STATUS_DATA
-  {
-    /// @brief Number of bytes cached forward of current position.
-    uint64_t forward;
+    /// @brief Desired password.
+    const char* password;
 
-    /// @brief Maximum number of bytes per second cache is allowed to fill.
-    unsigned int maxrate;
+    /// @brief The complete URL is passed on here, but the user name and
+    /// password are not shown and only appear to there as `USERNAME:PASSWORD`.
+    ///
+    /// As example <b>`sftp://USERNAME:PASSWORD@192.168.178.123/storage/videos/00001.ts`</b>.
+    const char* redacted;
 
-    /// @brief Average read rate from source file since last position change.
-    unsigned int currate;
+    /// @brief The name which is taken as the basis by source and would be first
+    /// in folder view.
+    ///
+    /// As example on <b>`sftp://dudu:isprivate@192.168.178.123/storage/videos/00001.ts`</b>
+    /// becomes then <b>`storage`</b> used here.
+    const char* sharename;
 
-    /// @brief Cache low speed condition detected?
-    bool lowspeed;
+    /// @brief Protocol name used on this stream, e.g. <b>`sftp`</b>.
+    const char* protocol;
   };
+  //----------------------------------------------------------------------------
 
+  //============================================================================
+  /// @ingroup cpp_kodi_addon_vfs_Defs
+  /// @brief <b>In/out value which is queried at @ref kodi::addon::CInstanceVFS::IoControl.</b>\n
+  /// This declares the requested value on the addon, this gets or has to
+  /// transfer data depending on the value.
   enum VFS_IOCTRL
   {
     /// @brief For cases where not supported control becomes asked.
@@ -76,6 +118,43 @@ extern "C"
     /// @brief Enable/disable retry within the protocol handler (if supported)
     VFS_IOCTRL_SET_RETRY = 16,
   };
+  //----------------------------------------------------------------------------
+
+  //============================================================================
+  /// @ingroup cpp_kodi_addon_vfs_Defs
+  /// @brief <b>Structure used in @ref kodi::addon::CInstanceVFS::IoControl
+  /// if question value for @ref VFS_IOCTRL_NATIVE is set</b>\n
+  /// With this structure, data is transmitted to the Kodi addon.
+  ///
+  /// This corresponds to POSIX systems with regard to [ioctl](https://en.wikipedia.org/wiki/Ioctl)
+  /// data (emulated with Windows).
+  struct VFS_IOCTRL_NATIVE_DATA
+  {
+    unsigned long int request;
+    void* param;
+  };
+  //----------------------------------------------------------------------------
+
+  //============================================================================
+  /// @ingroup cpp_kodi_addon_vfs_Defs
+  /// @brief <b>Structure used in @ref kodi::addon::CInstanceVFS::IoControl
+  /// if question value for @ref VFS_IOCTRL_CACHE_STATUS is set</b>\n
+  /// This data is filled by the addon and returned to Kodi
+  struct VFS_IOCTRL_CACHE_STATUS_DATA
+  {
+    /// @brief Number of bytes cached forward of current position.
+    uint64_t forward;
+
+    /// @brief Maximum number of bytes per second cache is allowed to fill.
+    unsigned int maxrate;
+
+    /// @brief Average read rate from source file since last position change.
+    unsigned int currate;
+
+    /// @brief Cache low speed condition detected?
+    bool lowspeed;
+  };
+  //----------------------------------------------------------------------------
 
   typedef struct VFSGetDirectoryCallbacks /* internal */
   {
@@ -174,26 +253,361 @@ namespace kodi
 namespace addon
 {
 
+//##############################################################################
+/// @defgroup cpp_kodi_addon_vfs_Defs Definitions, structures and enumerators
+/// \ingroup cpp_kodi_addon_vfs
+/// @brief **VFS add-on general variables**
+///
+/// Used to exchange the available options between Kodi and addon.
+///
+///
+
+//==============================================================================
+///
+/// \addtogroup cpp_kodi_addon_vfs
+/// @brief \cpp_class{ kodi::addon::CInstanceVFS }
+/// **Virtual Filesystem (VFS) add-on instance**
+///
+/// This instance type is used to allow Kodi various additional file system
+/// types. Be it a special file system, a compressed package or a system
+/// available over the network, everything is possible with it.
+///
+/// This usage can be requested under various conditions, for example explicitly
+/// by another addon, by a Mimetype protocol defined in <b>`addon.xml`</b> or supported
+/// file extensions.
+///
+/// Include the header @ref VFS.h "#include <kodi/addon-instance/VFS.h>"
+/// to use this class.
+///
+/// ----------------------------------------------------------------------------
+///
+/// Here is an example of what the <b>`addon.xml.in`</b> would look like for an VFS addon:
+///
+/// ~~~~~~~~~~~~~{.xml}
+/// <?xml version="1.0" encoding="UTF-8"?>
+/// <addon
+///   id="vfs.myspecialnamefor"
+///   version="1.0.0"
+///   name="My VFS addon"
+///   provider-name="Your Name">
+///   <requires>@ADDON_DEPENDS@</requires>
+///   <extension
+///     point="kodi.vfs"
+///     protocols="myprot"
+///     extensions=".abc|.def"
+///     files="true"
+///     filedirectories="true"
+///     directories="true"
+///     encodedhostname="true"
+///     supportDialog="true"
+///     supportPath="true"
+///     supportUsername="true"
+///     supportPassword="true"
+///     supportPort="true"
+///     supportBrowsing="true"
+///     supportWrite="true"
+///     defaultPort="1234"
+///     label="30000"
+///     zeroconf="your_special_zeroconf_allowed_identifier"
+///     library_@PLATFORM@="@LIBRARY_FILENAME@"/>
+///   <extension point="xbmc.addon.metadata">
+///     <summary lang="en_GB">My VFS addon summary</summary>
+///     <description lang="en_GB">My VFS description</description>
+///     <platform>@PLATFORM@</platform>
+///   </extension>
+/// </addon>
+/// ~~~~~~~~~~~~~
+///
+/// @note Regarding boolean values with "false", these can also be omitted,
+/// since this would be the default.
+///
+///
+/// ### Standard values that can be declared for processing in `addon.xml`.
+///
+/// These values are used by Kodi to identify associated streams and file
+/// extensions and then to select the associated addon.
+///
+/// \table_start
+///   \table_h3{ Labels, Type,   Description }
+///   \table_row3{   <b>`point`</b>,
+///                  \anchor cpp_kodi_addon_vfs_point
+///                  string,
+///     The identification of the addon instance to VFS is mandatory <b>`kodi.vfs`</b>.
+///     In addition\, the instance declared in the first <b>`<extension ... />`</b> is also the main type of addon.
+///   }
+///   \table_row3{   <b>`defaultPort`</b>,
+///                  \anchor cpp_kodi_addon_vfs_defaultPort
+///                  integer,
+///     Default [networking port](https://en.wikipedia.org/wiki/Port_(computer_networking))
+///     to use for protocol.
+///   }
+///   \table_row3{   <b>`directories`</b>,
+///                  \anchor cpp_kodi_addon_vfs_directories
+///                  boolean,
+///     VFS entry can list directories.
+///   }
+///   \table_row3{   <b>`extensions`</b>,
+///                  \anchor cpp_kodi_addon_vfs_extensions
+///                  string,
+///     Extensions for VFS entry.\n
+///     It is possible to declare several using <b>`|`</b>\, e.g. <b>`.abc|.def|.ghi`</b>.
+///   }
+///   \table_row3{   <b>`encodedhostname`</b>,
+///                  \anchor cpp_kodi_addon_vfs_encodedhostname
+///                  boolean,
+///     URL protocol from add-ons use encoded hostnames.
+///   }
+///   \table_row3{   <b>`filedirectories`</b>,
+///                  \anchor cpp_kodi_addon_vfs_filedirectories
+///                  boolean,
+///     VFS entry contains file directories.
+///   }
+///   \table_row3{   <b>`files`</b>,
+///                  \anchor cpp_kodi_addon_vfs_directories
+///                  boolean,
+///     Set to declare that VFS provides files.
+///   }
+///   \table_row3{   <b>`protocols`</b>,
+///                  \anchor cpp_kodi_addon_vfs_protocols
+///                  boolean,
+///     Protocols for VFS entry.\n
+///     It is possible to declare several using <b>`|`</b>\, e.g. <b>`myprot1|myprot2`</b>.\n
+///     @note This field also used to show on GUI\, see <b>`supportBrowsing`</b> below about <b>*2:</b>.
+///     When used there\, however\, only a **single** protocol is possible!
+///   }
+///   \table_row3{   <b>`supportWrite`</b>,
+///                  \anchor cpp_kodi_addon_vfs_supportWrite
+///                  boolean,
+///     Protocol supports write operations.
+///   }
+///   \table_row3{   <b>`zeroconf`</b>,
+///                  \anchor cpp_kodi_addon_vfs_zeroconf
+///                  string,
+///     [Zero conf](https://en.wikipedia.org/wiki/Zero-configuration_networking) announce string for VFS protocol.
+///   }
+///   \table_row3{   <b>`library_@PLATFORM@`</b>,
+///                  \anchor cpp_kodi_addon_vfs_library
+///                  string,
+///     The runtime library used for the addon. This is usually declared by `cmake` and correctly displayed in the translated <b>`addon.xml`</b>.
+///   }
+/// \table_end
+///
+///
+/// ### User selectable parts of the addon.
+///
+/// The following table describes the values that can be defined by <b>`addon.xml`</b>
+/// and which part they relate to for user input.
+///
+/// \table_start
+///   \table_h3{ Labels, Type, Description }
+///   \table_row3{   <b>`supportBrowsing`</b>,
+///                  \anchor cpp_kodi_addon_vfs_protocol_supportBrowsing
+///                  boolean,
+///     Protocol supports server browsing. Used to open related sources by users in the window.\n\n
+///     | Associated places in Kodi: |
+///     | :---- |
+///     | \image html cpp_kodi_addon_vfs_protocol_1.png |
+///     <br>
+///     <b>*1:</b> The entry in the menu represented by this option corresponds to the text given with <b>`label`</b>.
+///     When the button is pressed\, @ref CInstanceVFS::GetDirectory is called on the add-on to get its content.\n
+///     <b>*2:</b> Protocol name of the stream defined with <b>`protocols`</b> in xml.\n
+///     @remark See also <b>`supportDialog`</b> about <b>*3:</b>.
+///   }
+///   \table_row3{   <b>`supportDialog`</b>,
+///                  \anchor cpp_kodi_addon_vfs_protocol_supportDialog
+///                  boolean,
+///     To point out that Kodi assigns a dialog to this VFS in order to compare it with other values e.g. query supportPassword in it.\n
+///     This will be available when adding sources in Kodi under <b>"Add network location..."</b>.\n\n
+///     | Associated places in Kodi: |
+///     | :---- |
+///     | \image html cpp_kodi_addon_vfs_protocol_2.png |
+///     <br>
+///     <b>*1:</b> Field for selecting the VFS handler\, the addon will be available if <b>`supportDialog`</b> is set to <b>`true`</b>.\n
+///     <b>*2:</b> To set the associated server address. **Note:** *This field is always activated and cannot be changed by the addon.*\n
+///     <b>*3:</b> If <b>`supportBrowsing`</b> is set to <b>`true`</b>\, the button for opening a file selection dialog is given here too\, as in the file window.\n
+///     <b>*4:</b> This field is available if <b>`supportPath`</b> is set to <b>`true`</b>.\n
+///     <b>*5:</b> To edit the connection port. This field is available if <b>`supportPort`</b> is set to <b>`true`</b>.\n
+///     <b>*6:</b> This sets the required username and is available when <b>`supportUsername`</b> is set to <b>`true`</b>.\n
+///     <b>*7:</b> This sets the required password and is available when <b>`supportPassword`</b> is set to <b>`true`</b>.
+///   }
+///   \table_row3{   <b>`supportPath`</b>,
+///                  \anchor cpp_kodi_addon_vfs_protocol_supportPath
+///                  boolean,
+///     Protocol has path in addition to server name (see <b>`supportDialog`</b> about <b>*4:</b>).
+///   }
+///   \table_row3{   <b>`supportPort`</b>,
+///                  \anchor cpp_kodi_addon_vfs_protocol_supportPort
+///                  boolean,
+///     Protocol supports port customization (see <b>`supportDialog`</b> about <b>*5:</b>).
+///   }
+///   \table_row3{   <b>`supportUsername`</b>,
+///                  \anchor cpp_kodi_addon_vfs_protocol_supportUsername
+///                  boolean,
+///     Protocol uses logins (see <b>`supportDialog`</b> about <b>*6:</b>).
+///   }
+///   \table_row3{   <b>`supportPassword`</b>,
+///                  \anchor cpp_kodi_addon_vfs_protocol_supportPassword
+///                  boolean,
+///     Protocol supports passwords (see <b>`supportDialog`</b> about <b>*7:</b>).
+///   }
+///   \table_row3{   <b>`protocols`</b>,
+///                  \anchor cpp_kodi_addon_vfs_protocol_protocols
+///                  string,
+///     Protocols for VFS entry.
+///     @note This field is not editable and only used on GUI to show his name\, see <b>`supportBrowsing`</b> about <b>*2:</b>
+///   }
+///   \table_row3{   <b>`label`</b>,
+///                  \anchor cpp_kodi_addon_vfs_protocol_label
+///                  integer,
+///     The text identification number used in Kodi for display in the menu at <b>`supportDialog`</b>
+///     as a selection option and at <b>`supportBrowsing`</b> (see his image reference <b>*1</b>) as a menu entry.\n
+///     This can be a text identifier in Kodi or from addon.\n
+///     @remark For addon within <b>30000</b>-<b>30999</b> or <b>32000</b>-<b>32999</b>.
+///   }
+/// \table_end
+///
+/// @remark For more detailed description of the <b>`addon.xml`</b>, see also https://kodi.wiki/view/Addon.xml.
+///
+///
+/// --------------------------------------------------------------------------
+///
+///
+/// **Example:**
+///
+/// ~~~~~~~~~~~~~{.cpp}
+/// #include <kodi/addon-instance/VFS.h>
+///
+/// class CMyVFS : public kodi::addon::CInstanceVFS
+/// {
+/// public:
+///   CMyVFS(KODI_HANDLE instance, const std::string& kodiVersion);
+///
+///   // Add all your required functions, the most CInstanceVFS functions of
+///   // must be included to have addon working correctly.
+///   ...
+/// };
+///
+/// CMyVFS::CMyVFS(KODI_HANDLE instance, const std::string& kodiVersion)
+///   : CInstanceVFS(instance, kodiVersion)
+/// {
+///   ...
+/// }
+///
+/// ...
+///
+/// /*----------------------------------------------------------------------*/
+///
+/// class CMyAddon : public kodi::addon::CAddonBase
+/// {
+/// public:
+///   CMyAddon() { }
+///   ADDON_STATUS CreateInstanceEx(int instanceType,
+///                                 std::string instanceID,
+///                                 KODI_HANDLE instance,
+///                                 KODI_HANDLE& addonInstance,
+///                                 const std::string& version) override;
+/// };
+///
+/// // If you use only one instance in your add-on, can be instanceType and
+/// // instanceID ignored
+/// ADDON_STATUS CMyAddon::CreateInstanceEx(int instanceType,
+///                                         std::string instanceID,
+///                                         KODI_HANDLE instance,
+///                                         KODI_HANDLE& addonInstance,
+///                                         const std::string& version)
+/// {
+///   if (instanceType == ADDON_INSTANCE_VFS)
+///   {
+///     kodi::Log(ADDON_LOG_NOTICE, "Creating my VFS instance");
+///     addonInstance = new CMyVFS(instance, version);
+///     return ADDON_STATUS_OK;
+///   }
+///   else if (...)
+///   {
+///     ...
+///   }
+///   return ADDON_STATUS_UNKNOWN;
+/// }
+///
+/// ADDONCREATOR(CMyAddon)
+/// ~~~~~~~~~~~~~
+///
+/// The destruction of the example class `CMyVFS` is called from
+/// Kodi's header. Manually deleting the add-on instance is not required.
+///
+//----------------------------------------------------------------------------
 class CInstanceVFS : public IAddonInstance
 {
 public:
-  explicit CInstanceVFS(KODI_HANDLE instance) : IAddonInstance(ADDON_INSTANCE_VFS)
+  //==========================================================================
+  ///
+  /// @ingroup cpp_kodi_addon_vfs
+  /// @brief VFS class constructor used to support multiple instance
+  /// types
+  ///
+  /// @param[in] instance               The instance value given to
+  ///                                   <b>`kodi::addon::CAddonBase::CreateInstance(...)`</b>.
+  /// @param[in] kodiVersion            [opt] given from Kodi by @ref CAddonBase::CreateInstanceEx
+  ///                                   to identify his instance API version
+  ///
+  /// @note Instance path as a single is not supported by this type. It must
+  /// ensure that it can be called up several times.
+  ///
+  /// @warning Only use `instance` from the @ref CAddonBase::CreateInstance or
+  /// @ref CAddonBase::CreateInstanceEx call.
+  ///
+  explicit CInstanceVFS(KODI_HANDLE instance, const std::string& kodiVersion = "0.0.0")
+    : IAddonInstance(ADDON_INSTANCE_VFS)
   {
     if (CAddonBase::m_interface->globalSingleInstance != nullptr)
       throw std::logic_error("kodi::addon::CInstanceVFS: Creation of multiple together with single "
                              "instance way is not allowed!");
 
-    SetAddonStruct(instance);
+    SetAddonStruct(instance, kodiVersion);
   }
+  //--------------------------------------------------------------------------
 
+  //==========================================================================
+  ///
+  /// @ingroup cpp_kodi_addon_vfs
+  /// @brief Destructor
+  ///
   ~CInstanceVFS() override = default;
+  //--------------------------------------------------------------------------
+
+  //==========================================================================
+  ///
+  /// @defgroup cpp_kodi_addon_vfs_general **1. General access functions**
+  /// @ingroup cpp_kodi_addon_vfs
+  /// @brief **General access functions**
+  ///
+  /// This functions which are intended for getting folders, editing storage
+  /// locations and file system queries.
+  ///
+
+  //==========================================================================
+  ///
+  /// @defgroup cpp_kodi_addon_vfs_filecontrol **2. File editing functions**
+  /// @ingroup cpp_kodi_addon_vfs
+  /// @brief **File editing functions.**
+  ///
+  /// This value represents the addon-side handlers and to be able to identify
+  /// his own parts in the event of further access.
+  ///
 
+  //@{
+  //==========================================================================
+  ///
+  /// @ingroup cpp_kodi_addon_vfs_filecontrol
   /// @brief Open a file for input
   ///
   /// @param[in] url The URL of the file
   /// @return Context for the opened file
   virtual void* Open(const VFSURL& url) { return nullptr; }
 
+  //==========================================================================
+  ///
+  /// @ingroup cpp_kodi_addon_vfs_filecontrol
   /// @brief Open a file for output
   ///
   /// @param[in] url The URL of the file
@@ -201,7 +615,22 @@ class CInstanceVFS : public IAddonInstance
   /// @return Context for the opened file
   ///
   virtual void* OpenForWrite(const VFSURL& url, bool overWrite) { return nullptr; }
+  //--------------------------------------------------------------------------
 
+  //==========================================================================
+  ///
+  /// @ingroup cpp_kodi_addon_vfs_filecontrol
+  /// @brief Close a file
+  ///
+  /// @param[in] context The context of the file
+  /// @return True on success, false on failure
+  ///
+  virtual bool Close(void* context) { return false; }
+  //--------------------------------------------------------------------------
+
+  //==========================================================================
+  ///
+  /// @ingroup cpp_kodi_addon_vfs_filecontrol
   /// @brief Read from a file
   ///
   /// @param[in] context The context of the file
@@ -210,7 +639,11 @@ class CInstanceVFS : public IAddonInstance
   /// @return Number of bytes read
   ///
   virtual ssize_t Read(void* context, void* buffer, size_t uiBufSize) { return -1; }
+  //--------------------------------------------------------------------------
 
+  //==========================================================================
+  ///
+  /// @ingroup cpp_kodi_addon_vfs_filecontrol
   /// @brief Write to a file
   ///
   /// @param[in] context The context of the file
@@ -219,7 +652,11 @@ class CInstanceVFS : public IAddonInstance
   /// @return Number of bytes written
   ///
   virtual ssize_t Write(void* context, const void* buffer, size_t uiBufSize) { return -1; }
+  //--------------------------------------------------------------------------
 
+  //==========================================================================
+  ///
+  /// @ingroup cpp_kodi_addon_vfs_filecontrol
   /// @brief Seek in a file
   ///
   /// @param[in] context The context of the file
@@ -228,7 +665,11 @@ class CInstanceVFS : public IAddonInstance
   /// @return Offset in file after seek
   ///
   virtual int64_t Seek(void* context, int64_t position, int whence) { return -1; }
+  //--------------------------------------------------------------------------
 
+  //==========================================================================
+  ///
+  /// @ingroup cpp_kodi_addon_vfs_filecontrol
   /// @brief Truncate a file
   ///
   /// @param[in] context The context of the file
@@ -236,28 +677,44 @@ class CInstanceVFS : public IAddonInstance
   /// @return 0 on success, -1 on error
   ///
   virtual int Truncate(void* context, int64_t size) { return -1; }
+  //--------------------------------------------------------------------------
 
+  //==========================================================================
+  ///
+  /// @ingroup cpp_kodi_addon_vfs_filecontrol
   /// @brief Get total size of a file
   ///
   /// @param[in] context The context of the file
   /// @return Total file size
   ///
   virtual int64_t GetLength(void* context) { return 0; }
+  //--------------------------------------------------------------------------
 
+  //==========================================================================
+  ///
+  /// @ingroup cpp_kodi_addon_vfs_filecontrol
   /// @brief Get current position in a file
   ///
   /// @param[in] context The context of the file
   /// @return Current position
   ///
   virtual int64_t GetPosition(void* context) { return 0; }
+  //--------------------------------------------------------------------------
 
+  //==========================================================================
+  ///
+  /// @ingroup cpp_kodi_addon_vfs_filecontrol
   /// @brief Get chunk size of a file
   ///
   /// @param[in] context The context of the file
   /// @return Chunk size
   ///
   virtual int GetChunkSize(void* context) { return 1; }
+  //--------------------------------------------------------------------------
 
+  //==========================================================================
+  ///
+  /// @ingroup cpp_kodi_addon_vfs_filecontrol
   /// @brief Perform an IO-control on the file
   ///
   /// @param[in] context The context of the file
@@ -266,14 +723,13 @@ class CInstanceVFS : public IAddonInstance
   /// @return -1 on error, >= 0 on success
   ///
   virtual int IoControl(void* context, VFS_IOCTRL request, void* param) { return -1; }
+  //--------------------------------------------------------------------------
+  //@}
 
-  /// @brief Close a file
-  ///
-  /// @param[in] context The context of the file
-  /// @return True on success, false on failure
+  //@{
+  //==========================================================================
   ///
-  virtual bool Close(void* context) { return false; }
-
+  /// @ingroup cpp_kodi_addon_vfs_general
   /// @brief Stat a file
   ///
   /// @param[in] url The URL of the file
@@ -281,29 +737,49 @@ class CInstanceVFS : public IAddonInstance
   /// @return -1 on error, 0 otherwise
   ///
   virtual int Stat(const VFSURL& url, struct __stat64* buffer) { return 0; }
+  //--------------------------------------------------------------------------
 
+  //==========================================================================
+  ///
+  /// @ingroup cpp_kodi_addon_vfs_general
   /// @brief Check for file existence
   ///
   /// @param[in] url The URL of the file
   /// @return True if file exists, false otherwise
   ///
   virtual bool Exists(const VFSURL& url) { return false; }
+  //--------------------------------------------------------------------------
 
+  //==========================================================================
+  ///
+  /// @ingroup cpp_kodi_addon_vfs_general
   /// @brief Clear out any idle connections
   ///
   virtual void ClearOutIdle() {}
+  //--------------------------------------------------------------------------
 
+  //==========================================================================
+  ///
+  /// @ingroup cpp_kodi_addon_vfs_general
   /// @brief Disconnect all connections
   ///
   virtual void DisconnectAll() {}
+  //--------------------------------------------------------------------------
 
+  //==========================================================================
+  ///
+  /// @ingroup cpp_kodi_addon_vfs_general
   /// @brief Delete a file
   ///
   /// @param[in] url The URL of the file
   /// @return True if deletion was successful, false otherwise
   ///
   virtual bool Delete(const VFSURL& url) { return false; }
+  //--------------------------------------------------------------------------
 
+  //==========================================================================
+  ///
+  /// @ingroup cpp_kodi_addon_vfs_general
   /// @brief Rename a file
   ///
   /// @param[in] url The URL of the source file
@@ -311,28 +787,45 @@ class CInstanceVFS : public IAddonInstance
   /// @return True if deletion was successful, false otherwise
   ///
   virtual bool Rename(const VFSURL& url, const VFSURL& url2) { return false; }
+  //--------------------------------------------------------------------------
 
+  //==========================================================================
+  ///
+  /// @ingroup cpp_kodi_addon_vfs_general
   /// @brief Check for directory existence
   ///
   /// @param[in] url The URL of the file
   /// @return True if directory exists, false otherwise
   ///
   virtual bool DirectoryExists(const VFSURL& url) { return false; }
+  //--------------------------------------------------------------------------
 
+  //==========================================================================
+  ///
+  /// @ingroup cpp_kodi_addon_vfs_general
   /// @brief Remove a directory
   ///
   /// @param[in] url The URL of the directory
   /// @return True if removal was successful, false otherwise
   ///
   virtual bool RemoveDirectory(const VFSURL& url) { return false; }
+  //--------------------------------------------------------------------------
 
+  //==========================================================================
+  ///
+  /// @ingroup cpp_kodi_addon_vfs_general
   /// @brief Create a directory
   ///
   /// @param[in] url The URL of the file
   /// @return True if creation was successful, false otherwise
   ///
   virtual bool CreateDirectory(const VFSURL& url) { return false; }
+  //--------------------------------------------------------------------------
 
+  //==========================================================================
+  ///
+  /// @defgroup cpp_kodi_addon_vfs_general_cb_GetDirectory **Callbacks GetDirectory()**
+  /// @ingroup cpp_kodi_addon_vfs_general
   /// @brief Callback functions on GetDirectory()
   ///
   /// This functions becomes available during call of GetDirectory() from
@@ -348,23 +841,23 @@ class CInstanceVFS : public IAddonInstance
   ///
   /// ...
   ///
-  /// bool CMyFile::GetDirectory(const VFSURL& url, std::vector<kodi::vfs::CDirEntry>& items, CVFSCallbacks callbacks)
+  /// bool CMyVFS::GetDirectory(const VFSURL& url, std::vector<kodi::vfs::CDirEntry>& items, CVFSCallbacks callbacks)
   /// {
   ///   std::string neededString;
   ///   callbacks.GetKeyboardInput("Test", neededString, true);
   ///   if (neededString.empty())
   ///     return false;
   ///
-  ///   /* Do the work */
+  ///   // Do the work
   ///   ...
   ///   return true;
   /// }
   /// ~~~~~~~~~~~~~
   ///
-  //@{
   class CVFSCallbacks
   {
   public:
+    /// @ingroup cpp_kodi_addon_vfs_general_cb_GetDirectory
     /// @brief Require keyboard input
     ///
     /// Becomes called if GetDirectory() returns false and GetDirectory()
@@ -389,6 +882,7 @@ class CInstanceVFS : public IAddonInstance
       return ret;
     }
 
+    /// @ingroup cpp_kodi_addon_vfs_general_cb_GetDirectory
     /// @brief Display an error dialog
     ///
     /// @param[in] heading      The heading of the error dialog
@@ -405,6 +899,7 @@ class CInstanceVFS : public IAddonInstance
                              line3.c_str());
     }
 
+    /// @ingroup cpp_kodi_addon_vfs_general_cb_GetDirectory
     /// @brief Prompt the user for authentication of a URL
     ///
     /// @param[in] url The URL
@@ -418,26 +913,50 @@ class CInstanceVFS : public IAddonInstance
   private:
     const VFSGetDirectoryCallbacks* m_cb;
   };
-  //@}
+  //--------------------------------------------------------------------------
 
+  //==========================================================================
+  ///
+  /// @ingroup cpp_kodi_addon_vfs_general
   /// @brief List a directory
   ///
   /// @param[in] url The URL of the directory
-  /// @param[out] entries The entries in the directory
+  /// @param[out] entries The entries in the directory, see
+  ///                     @ref cpp_kodi_vfs_CDirEntry "kodi::vfs::CDirEntry"
+  ///                     about his content
   /// @param[in] callbacks A callback structure
   /// @return Context for the directory listing
   ///
+  ///
+  /// --------------------------------------------------------------------------
+  ///
+  /// ### Callbacks:
+  /// @copydetails cpp_kodi_addon_vfs_general_cb_GetDirectory
+  ///
+  /// **Available callback functions**
+  /// | Function: | Description
+  /// |--|--
+  /// | CVFSCallbacks::GetKeyboardInput | @copybrief CVFSCallbacks::GetKeyboardInput @copydetails CVFSCallbacks::GetKeyboardInput
+  /// | CVFSCallbacks::SetErrorDialog | @copybrief CVFSCallbacks::SetErrorDialog @copydetails CVFSCallbacks::SetErrorDialog
+  /// | CVFSCallbacks::RequireAuthentication | @copybrief CVFSCallbacks::RequireAuthentication @copydetails CVFSCallbacks::RequireAuthentication
+  ///
   virtual bool GetDirectory(const VFSURL& url,
                             std::vector<kodi::vfs::CDirEntry>& entries,
                             CVFSCallbacks callbacks)
   {
     return false;
   }
+  //--------------------------------------------------------------------------
 
+  //==========================================================================
+  ///
+  /// @ingroup cpp_kodi_addon_vfs_general
   /// @brief Check if file should be presented as a directory (multiple streams)
   ///
   /// @param[in] url The URL of the file
-  /// @param[out] entries The entries in the directory
+  /// @param[out] entries The entries in the directory, see
+  ///                     @ref cpp_kodi_vfs_CDirEntry "kodi::vfs::CDirEntry"
+  ///                     about his content
   /// @param[out] rootPath Path to root directory if multiple entries
   /// @return Context for the directory listing
   ///
@@ -447,9 +966,11 @@ class CInstanceVFS : public IAddonInstance
   {
     return false;
   }
+  //--------------------------------------------------------------------------
+  //@}
 
 private:
-  void SetAddonStruct(KODI_HANDLE instance)
+  void SetAddonStruct(KODI_HANDLE instance, const std::string& kodiVersion)
   {
     if (instance == nullptr)
       throw std::logic_error("kodi::addon::CInstanceVFS: Creation with empty addon structure not "

From 26ab79e4a48a312b67278520593fc4a003eb2f4e Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Fri, 20 Mar 2020 22:57:46 +0100
Subject: [PATCH 8/8] [addons][vfs] increase API version to 2.3.0

---
 xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h
index ec49ed114776..66601b0aa81a 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h
@@ -109,8 +109,8 @@
 #define ADDON_INSTANCE_VERSION_SCREENSAVER_XML_ID     "kodi.binary.instance.screensaver"
 #define ADDON_INSTANCE_VERSION_SCREENSAVER_DEPENDS    "addon-instance/Screensaver.h"
 
-#define ADDON_INSTANCE_VERSION_VFS                    "2.2.0"
-#define ADDON_INSTANCE_VERSION_VFS_MIN                "2.1.0"
+#define ADDON_INSTANCE_VERSION_VFS                    "2.3.0"
+#define ADDON_INSTANCE_VERSION_VFS_MIN                "2.3.0"
 #define ADDON_INSTANCE_VERSION_VFS_XML_ID             "kodi.binary.instance.vfs"
 #define ADDON_INSTANCE_VERSION_VFS_DEPENDS            "addon-instance/VFS.h"
 
