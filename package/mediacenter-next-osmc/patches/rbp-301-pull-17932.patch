From d00716c5cdd886d982ce44d89e35ba8b20be1d20 Mon Sep 17 00:00:00 2001
From: AhmedAdelAbouzeid <ahmed.adel.abouzeid@gmail.com>
Date: Sun, 24 May 2020 02:05:29 +0200
Subject: [PATCH] Prevent crashing when visualToLogicalMap contains garbage
 values * Initialize visualToLogicalMap before passing it to Fribidi to
 prevent crashing when the mapping contain invalid values * Correct the values
 in visualToLogicalMap when the visual string is shorter than the original
 logical string (due to multiple code points possibly representing a single
 grapheme)

---
 xbmc/guilib/GUITextLayout.cpp   | 2 +-
 xbmc/utils/CharsetConverter.cpp | 7 +++++--
 2 files changed, 6 insertions(+), 3 deletions(-)

diff --git a/xbmc/guilib/GUITextLayout.cpp b/xbmc/guilib/GUITextLayout.cpp
index 02e20a3d877e..9e5ccd2a1dd2 100644
--- a/xbmc/guilib/GUITextLayout.cpp
+++ b/xbmc/guilib/GUITextLayout.cpp
@@ -276,7 +276,7 @@ void CGUITextLayout::BidiTransform(std::vector<CGUIString>& lines, bool forceLTR
     }
 
     // Allocate memory for visual to logical map and call bidi
-    int* visualToLogicalMap = new int[lineLength + 1];
+    int* visualToLogicalMap = new (std::nothrow) int[lineLength + 1]();
     std::wstring visualText = BidiFlip(logicalText, forceLTRReadingOrder, visualToLogicalMap);
 
     vecText styledVisualText;
diff --git a/xbmc/utils/CharsetConverter.cpp b/xbmc/utils/CharsetConverter.cpp
index 49c557c9c031..8dffd65e1b97 100644
--- a/xbmc/utils/CharsetConverter.cpp
+++ b/xbmc/utils/CharsetConverter.cpp
@@ -505,10 +505,13 @@ bool CCharsetConverter::CInnerConverter::logicalToVisualBiDi(
     bool bidiFailed = false;
     FriBidiCharType baseCopy = base; // preserve same value for all lines, required because fribidi_log2vis will modify parameter value
     if (fribidi_log2vis(reinterpret_cast<const FriBidiChar*>(stringSrc.c_str() + lineStart),
-                        lineLen, &baseCopy, visual, nullptr, visualToLogicalMap, nullptr))
+                        lineLen, &baseCopy, visual, nullptr,
+                        !visualToLogicalMap ? nullptr : visualToLogicalMap + lineStart, nullptr))
     {
       // Removes bidirectional marks
-      const int newLen = fribidi_remove_bidi_marks(visual, lineLen, NULL, NULL, NULL);
+      const int newLen = fribidi_remove_bidi_marks(
+          visual, lineLen, nullptr, !visualToLogicalMap ? nullptr : visualToLogicalMap + lineStart,
+          nullptr);
       if (newLen > 0)
         stringDst.append((const char32_t*)visual, (size_t)newLen);
       else if (newLen < 0)
