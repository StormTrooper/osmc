From 3a372a28196a240995ba271b10e6e4b1e23a103c Mon Sep 17 00:00:00 2001
From: Wolfgang Haupt <haupt.wolfgang@gmail.com>
Date: Fri, 15 Feb 2019 21:33:48 +0100
Subject: [PATCH 1/2] Add new infolabel ListItem.CurrentItem

This infolabel allows a skinner to print the current
index of an item in within it's container.
---
 xbmc/GUIInfoManager.cpp             | 13 ++++++++++++-
 xbmc/guilib/GUIBaseContainer.cpp    |  2 ++
 xbmc/guilib/GUIListItem.cpp         | 12 ++++++++++++
 xbmc/guilib/GUIListItem.h           | 15 +++++++++++++++
 xbmc/guilib/GUIPanelContainer.cpp   |  2 ++
 xbmc/guilib/guiinfo/GUIInfoLabels.h |  1 +
 6 files changed, 44 insertions(+), 1 deletion(-)

diff --git a/xbmc/GUIInfoManager.cpp b/xbmc/GUIInfoManager.cpp
index cac115a23655..757b6c1a3bc2 100644
--- a/xbmc/GUIInfoManager.cpp
+++ b/xbmc/GUIInfoManager.cpp
@@ -5687,6 +5687,14 @@ const infomap container_str[]  = {{ "property",         CONTAINER_PROPERTY },
 ///     @return The parental rating of the list item (PVR).
 ///     <p>
 ///   }
+///   \table_row3{   <b>`ListItem.CurrentItem`</b>,
+///                  \anchor ListItem_CurrentItem
+///                  _string_,
+///     @return The current index of the item in a container starting at 1.
+///     <p><hr>
+///     @skinning_v19 **[New Infolabel]** \link ListItem_CurrentItem `ListItem.CurrentItem`\endlink
+///     <p>
+///   }
 /// \table_end
 ///
 /// -----------------------------------------------------------------------------
@@ -5877,7 +5885,8 @@ const infomap listitem_labels[]= {{ "thumb",            LISTITEM_THUMB },
                                   { "expirationtime",   LISTITEM_EXPIRATION_TIME },
                                   { "art",              LISTITEM_ART },
                                   { "property",         LISTITEM_PROPERTY },
-                                  { "parentalrating",   LISTITEM_PARENTAL_RATING }
+                                  { "parentalrating",   LISTITEM_PARENTAL_RATING },
+                                  { "currentitem",      LISTITEM_CURRENTITEM }
 };
 
 /// \page modules__infolabels_boolean_conditions
@@ -9825,6 +9834,8 @@ std::string CGUIInfoManager::GetMultiInfoItemLabel(const CFileItem *item, int co
           return item->m_dateTime.GetAsLocalizedDate(true);
         break;
       }
+      case LISTITEM_CURRENTITEM:
+        return std::to_string(item->GetCurrentItem());
     }
   }
 
diff --git a/xbmc/guilib/GUIBaseContainer.cpp b/xbmc/guilib/GUIBaseContainer.cpp
index 91402a3178fd..24f00cb545c0 100644
--- a/xbmc/guilib/GUIBaseContainer.cpp
+++ b/xbmc/guilib/GUIBaseContainer.cpp
@@ -126,6 +126,8 @@ void CGUIBaseContainer::Process(unsigned int currentTime, CDirtyRegionList &dirt
     if (itemNo >= 0)
     {
       CGUIListItemPtr item = m_items[itemNo];
+      item->SetCurrentItem(itemNo + 1);
+
       // render our item
       if (m_orientation == VERTICAL)
         ProcessItem(origin.x, pos, item, focused, currentTime, dirtyregions);
diff --git a/xbmc/guilib/GUIListItem.cpp b/xbmc/guilib/GUIListItem.cpp
index e62a017023f9..977f0b3d9b95 100644
--- a/xbmc/guilib/GUIListItem.cpp
+++ b/xbmc/guilib/GUIListItem.cpp
@@ -32,6 +32,7 @@ CGUIListItem::CGUIListItem(void)
   m_bIsFolder = false;
   m_bSelected = false;
   m_overlayIcon = ICON_OVERLAY_NONE;
+  m_currentItem = 1;
 }
 
 CGUIListItem::CGUIListItem(const std::string& strLabel):
@@ -41,6 +42,7 @@ CGUIListItem::CGUIListItem(const std::string& strLabel):
   SetSortLabel(strLabel);
   m_bSelected = false;
   m_overlayIcon = ICON_OVERLAY_NONE;
+  m_currentItem = 1;
 }
 
 CGUIListItem::~CGUIListItem(void)
@@ -442,3 +444,13 @@ void CGUIListItem::AppendProperties(const CGUIListItem &item)
   for (PropertyMap::const_iterator i = item.m_mapProperties.begin(); i != item.m_mapProperties.end(); ++i)
     SetProperty(i->first, i->second);
 }
+
+void CGUIListItem::SetCurrentItem(unsigned int position)
+{
+  m_currentItem = position;
+}
+
+unsigned int CGUIListItem::GetCurrentItem() const
+{
+  return m_currentItem;
+}
diff --git a/xbmc/guilib/GUIListItem.h b/xbmc/guilib/GUIListItem.h
index 06633cc09e1d..e1a7f9422a76 100644
--- a/xbmc/guilib/GUIListItem.h
+++ b/xbmc/guilib/GUIListItem.h
@@ -164,6 +164,20 @@ class CGUIListItem
 
   const CVariant &GetProperty(const std::string &strKey) const;
 
+  /*! \brief Set the current item number within it's container
+   Our container classes will set this member with the items position
+   in the container starting at 1.
+   \param position Position of the item in the container starting at 1.
+   */
+  void SetCurrentItem(unsigned int position);
+
+  /*! \brief Get the current item number within it's container
+   Retrieve the items position in a container, this is useful to show
+   for example numbering in front of entities in an arbitrary list of entities,
+   like songs of a playlist.
+   */
+  unsigned int GetCurrentItem() const;
+
 protected:
   std::string m_strLabel2;     // text of column2
   std::string m_strIcon;      // filename of icon
@@ -172,6 +186,7 @@ class CGUIListItem
   CGUIListItemLayoutPtr m_layout;
   CGUIListItemLayoutPtr m_focusedLayout;
   bool m_bSelected;     // item is selected or not
+  unsigned int m_currentItem; // current item number within container (starting at 1)
 
   struct icompare
   {
diff --git a/xbmc/guilib/GUIPanelContainer.cpp b/xbmc/guilib/GUIPanelContainer.cpp
index 2d97f710e1fb..8938a2b0fdd5 100644
--- a/xbmc/guilib/GUIPanelContainer.cpp
+++ b/xbmc/guilib/GUIPanelContainer.cpp
@@ -8,6 +8,7 @@
 
 #include "GUIPanelContainer.h"
 
+#include "FileItem.h"
 #include "GUIListItemLayout.h"
 #include "GUIMessage.h"
 #include "guilib/guiinfo/GUIInfoLabels.h"
@@ -61,6 +62,7 @@ void CGUIPanelContainer::Process(unsigned int currentTime, CDirtyRegionList &dir
     if (current >= 0)
     {
       CGUIListItemPtr item = m_items[current];
+      item->SetCurrentItem(current + 1);
       bool focused = (current == GetOffset() * m_itemsPerRow + GetCursor()) && m_bHasFocus;
 
       if (m_orientation == VERTICAL)
diff --git a/xbmc/guilib/guiinfo/GUIInfoLabels.h b/xbmc/guilib/guiinfo/GUIInfoLabels.h
index 128a1003fef3..61f7b8782c5b 100644
--- a/xbmc/guilib/guiinfo/GUIInfoLabels.h
+++ b/xbmc/guilib/guiinfo/GUIInfoLabels.h
@@ -874,6 +874,7 @@
 #define LISTITEM_HASARCHIVE         (LISTITEM_START + 185)
 #define LISTITEM_ISPLAYABLE         (LISTITEM_START + 186)
 #define LISTITEM_FILENAME_NO_EXTENSION (LISTITEM_START + 187)
+#define LISTITEM_CURRENTITEM        (LISTITEM_START + 188)
 
 #define LISTITEM_END                (LISTITEM_START + 2500)
 

From 13b1667f39067c92efca71207ef4bedf795f89bc Mon Sep 17 00:00:00 2001
From: Wolfgang Haupt <haupt.wolfgang@gmail.com>
Date: Tue, 16 Jul 2019 17:57:34 +0200
Subject: [PATCH 2/2] Guilib: Add IsOdd/IsEven boolean condition

---
 xbmc/GUIInfoManager.cpp             | 30 ++++++++++++++++++++++++++++-
 xbmc/guilib/guiinfo/GUIInfoLabels.h |  2 ++
 2 files changed, 31 insertions(+), 1 deletion(-)

diff --git a/xbmc/GUIInfoManager.cpp b/xbmc/GUIInfoManager.cpp
index 757b6c1a3bc2..94c40f7534d6 100644
--- a/xbmc/GUIInfoManager.cpp
+++ b/xbmc/GUIInfoManager.cpp
@@ -274,6 +274,26 @@ const infomap string_bools[] =   {{ "isempty",          STRING_IS_EMPTY },
 ///     @skinning_v17 **[New Boolean Condition]** \link Integer_IsLessOrEqual `Integer.IsLessOrEqual(info\,number)`\endlink
 ///     <p>
 ///   }
+///   \table_row3{   <b>`Integer.IsEven(info)`</b>,
+///                  \anchor Integer_IsEven
+///                  _boolean_,
+///     @return **True** if the value of the infolabel is odd
+///     @param info - infolabel
+///     @note **Example:** `Integer.IsEven(ListItem.CurrentItem)`
+///     <p><hr>
+///     @skinning_v19 **[New Boolean Condition]** \link Integer_IsEven `Integer.IsEven(info)`\endlink
+///     <p>
+///   }
+///   \table_row3{   <b>`Integer.IsOdd(info)`</b>,
+///                  \anchor Integer_IsOdd
+///                  _boolean_,
+///     @return **True** if the value of the infolabel is odd
+///     @param info - infolabel
+///     @note **Example:** `Integer.IsOdd(ListItem.CurrentItem)`
+///     <p><hr>
+///     @skinning_v19 **[New Boolean Condition]** \link Integer_IsOdd `Integer.IsOdd(info)`\endlink
+///     <p>
+///   }
 /// \table_end
 ///
 /// -----------------------------------------------------------------------------
@@ -283,7 +303,9 @@ const infomap integer_bools[] =  {{ "isequal",          INTEGER_IS_EQUAL },
                                   { "isgreater",        INTEGER_GREATER_THAN },
                                   { "isgreaterorequal", INTEGER_GREATER_OR_EQUAL },
                                   { "isless",           INTEGER_LESS_THAN },
-                                  { "islessorequal",    INTEGER_LESS_OR_EQUAL }};
+                                  { "islessorequal",    INTEGER_LESS_OR_EQUAL },
+                                  { "iseven",           INTEGER_EVEN },
+                                  { "isodd",            INTEGER_ODD }};
 
 
 /// \page modules__infolabels_boolean_conditions
@@ -9444,6 +9466,8 @@ bool CGUIInfoManager::GetMultiInfoBool(const CGUIInfo &info, int contextWindow,
       case INTEGER_GREATER_OR_EQUAL:
       case INTEGER_LESS_THAN:
       case INTEGER_LESS_OR_EQUAL:
+      case INTEGER_EVEN:
+      case INTEGER_ODD:
         {
           int integer = 0;
           if (!GetInt(integer, info.GetData1(), contextWindow, item))
@@ -9473,6 +9497,10 @@ bool CGUIInfoManager::GetMultiInfoBool(const CGUIInfo &info, int contextWindow,
             bReturn = integer < info.GetData2();
           else if (condition == INTEGER_LESS_OR_EQUAL)
             bReturn = integer <= info.GetData2();
+          else if (condition == INTEGER_EVEN)
+            bReturn = integer % 2 == 0;
+          else if (condition == INTEGER_ODD)
+            bReturn = integer % 2 != 0;
         }
         break;
       case STRING_STARTS_WITH:
diff --git a/xbmc/guilib/guiinfo/GUIInfoLabels.h b/xbmc/guilib/guiinfo/GUIInfoLabels.h
index 61f7b8782c5b..de027949b97b 100644
--- a/xbmc/guilib/guiinfo/GUIInfoLabels.h
+++ b/xbmc/guilib/guiinfo/GUIInfoLabels.h
@@ -352,6 +352,8 @@
 #define INTEGER_GREATER_OR_EQUAL    452
 #define INTEGER_LESS_THAN           453
 #define INTEGER_LESS_OR_EQUAL       454
+#define INTEGER_EVEN                455
+#define INTEGER_ODD                 456
 
 #define SKIN_BOOL                   600
 #define SKIN_STRING                 601
