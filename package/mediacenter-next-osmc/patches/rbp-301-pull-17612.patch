From 419627e55038f9375aff617da0b0393a411177fe Mon Sep 17 00:00:00 2001
From: Lukas Rusak <lorusak@gmail.com>
Date: Fri, 3 Apr 2020 15:12:59 -0700
Subject: [PATCH 1/3] [depends] add libudfread

---
 .../scripts/0_package.target-win10-arm.list   |  1 +
 .../scripts/0_package.target-win10-win32.list |  1 +
 .../scripts/0_package.target-win10-x64.list   |  1 +
 .../scripts/0_package.target-win32.list       |  1 +
 .../scripts/0_package.target-x64.list         |  1 +
 tools/depends/target/Makefile                 |  2 +-
 tools/depends/target/libudfread/Makefile      | 33 +++++++++++++++++++
 .../depends/target/libudfread/UDFREAD-VERSION |  3 ++
 8 files changed, 42 insertions(+), 1 deletion(-)
 create mode 100644 tools/depends/target/libudfread/Makefile
 create mode 100644 tools/depends/target/libudfread/UDFREAD-VERSION

diff --git a/project/BuildDependencies/scripts/0_package.target-win10-arm.list b/project/BuildDependencies/scripts/0_package.target-win10-arm.list
index 006e62032c2d..fb7e72b03b97 100644
--- a/project/BuildDependencies/scripts/0_package.target-win10-arm.list
+++ b/project/BuildDependencies/scripts/0_package.target-win10-arm.list
@@ -23,6 +23,7 @@ libfribidi-1.0.8-win10-arm-v141-20200105.7z
 libiconv-1.16-win10-arm-v141-20200105.7z
 libmicrohttpd-0.9.69-win10-arm-v141-20200105.7z
 libnfs-4.0.0-win10-arm-v141-20200105.7z
+libudfread-1.0.0-win10-arm-v141-20200411.7z
 libxml2-2.9.9-win10-arm-v141-20200105.7z
 libxslt-1.1.34-win10-arm-v141-20200105.7z
 lzo2-2.10-win10-arm-v141-20200105.7z
diff --git a/project/BuildDependencies/scripts/0_package.target-win10-win32.list b/project/BuildDependencies/scripts/0_package.target-win10-win32.list
index d436c98662de..52e38e93aad9 100644
--- a/project/BuildDependencies/scripts/0_package.target-win10-win32.list
+++ b/project/BuildDependencies/scripts/0_package.target-win10-win32.list
@@ -23,6 +23,7 @@ libfribidi-1.0.8-win10-win32-v141-20200105.7z
 libiconv-1.16-win10-win32-v141-20200105.7z
 libmicrohttpd-0.9.69-win10-win32-v141-20200105.7z
 libnfs-4.0.0-win10-win32-v141-20200105.7z
+libudfread-1.0.0-win10-win32-v141-20200411.7z
 libxml2-2.9.9-win10-win32-v141-20200105.7z
 libxslt-1.1.34-win10-win32-v141-20200105.7z
 lzo2-2.10-win10-win32-v141-20200105.7z
diff --git a/project/BuildDependencies/scripts/0_package.target-win10-x64.list b/project/BuildDependencies/scripts/0_package.target-win10-x64.list
index d641de4a0370..99cef44952df 100644
--- a/project/BuildDependencies/scripts/0_package.target-win10-x64.list
+++ b/project/BuildDependencies/scripts/0_package.target-win10-x64.list
@@ -23,6 +23,7 @@ libfribidi-1.0.8-win10-x64-v141-20200105.7z
 libiconv-1.16-win10-x64-v141-20200105.7z
 libmicrohttpd-0.9.69-win10-x64-v141-20200105.7z
 libnfs-4.0.0-win10-x64-v141-20200105.7z
+libudfread-1.0.0-win10-x64-v141-20200411.7z
 libxml2-2.9.9-win10-x64-v141-20200105.7z
 libxslt-1.1.34-win10-x64-v141-20200105.7z
 lzo2-2.10-win10-x64-v141-20200105.7z
diff --git a/project/BuildDependencies/scripts/0_package.target-win32.list b/project/BuildDependencies/scripts/0_package.target-win32.list
index fd184070ff69..fb690a3c4e61 100644
--- a/project/BuildDependencies/scripts/0_package.target-win32.list
+++ b/project/BuildDependencies/scripts/0_package.target-win32.list
@@ -30,6 +30,7 @@ libmicrohttpd-0.9.69-win32-v141-20200105.7z
 libnfs-4.0.0-win32-v141-20200105.7z
 libplist-2.1.0-win32-v141-20200105.7z
 libpng-1.6.37-win32-v141-20200105.7z
+libudfread-1.0.0-win32-v141-20200411.7z
 libxml2-2.9.9-win32-v141-20200105.7z
 libxslt-1.1.34-win32-v141-20200105.7z
 lzo2-2.10-win32-v141-20200105.7z
diff --git a/project/BuildDependencies/scripts/0_package.target-x64.list b/project/BuildDependencies/scripts/0_package.target-x64.list
index 72e2a601b421..25794a669071 100644
--- a/project/BuildDependencies/scripts/0_package.target-x64.list
+++ b/project/BuildDependencies/scripts/0_package.target-x64.list
@@ -27,6 +27,7 @@ libiconv-1.16-x64-v141-20200105.7z
 libmicrohttpd-0.9.69-x64-v141-20200105.7z
 libnfs-4.0.0-x64-v141-20200105.7z
 libplist-2.1.0-x64-v141-20200105.7z
+libudfread-1.0.0-x64-v141-20200411.7z
 libxml2-2.9.9-x64-v141-20200105.7z
 libxslt-1.1.34-x64-v141-20200105.7z
 lzo2-2.10-x64-v141-20200105.7z
diff --git a/tools/depends/target/Makefile b/tools/depends/target/Makefile
index 840c1a7111dd..41b39a273512 100644
--- a/tools/depends/target/Makefile
+++ b/tools/depends/target/Makefile
@@ -14,7 +14,7 @@ DEPENDS = \
 	libplist libcec libbluray tinyxml \
 	taglib libusb libnfs meson-cross-file \
 	pythonmodule-pil pythonmodule-pycryptodome pythonmodule-setuptools \
-	libxslt ffmpeg crossguid \
+	libxslt ffmpeg crossguid libudfread \
 	libdvdread libdvdnav libdvdcss p8-platform flatbuffers dav1d
 
 ifeq ($(ENABLE_GPLV3),yes)
diff --git a/tools/depends/target/libudfread/Makefile b/tools/depends/target/libudfread/Makefile
new file mode 100644
index 000000000000..1e2c67b71266
--- /dev/null
+++ b/tools/depends/target/libudfread/Makefile
@@ -0,0 +1,33 @@
+include ../../Makefile.include
+include UDFREAD-VERSION
+DEPS = ../../Makefile.include Makefile UDFREAD-VERSION
+
+# configuration settings
+CONFIGURE = ./configure --prefix=$(PREFIX) --disable-shared --enable-static
+
+LIBDYLIB=$(PLATFORM)/lib/lib$(LIBNAME).a
+
+all: .installed-$(PLATFORM)
+
+$(TARBALLS_LOCATION)/$(ARCHIVE):
+	cd $(TARBALLS_LOCATION); $(RETRIEVE_TOOL) $(RETRIEVE_TOOL_FLAGS) $(BASE_URL)/$(ARCHIVE)
+
+$(PLATFORM): $(TARBALLS_LOCATION)/$(ARCHIVE) $(DEPS)
+	rm -rf $(PLATFORM)/*; mkdir -p $(PLATFORM)
+	cd $(PLATFORM); $(ARCHIVE_TOOL) $(ARCHIVE_TOOL_FLAGS) $(TARBALLS_LOCATION)/$(ARCHIVE)
+	cd $(PLATFORM); $(AUTORECONF) -vif
+	cd $(PLATFORM); $(CONFIGURE)
+
+$(LIBDYLIB): $(PLATFORM)
+	$(MAKE) -C $(PLATFORM)
+
+.installed-$(PLATFORM): $(LIBDYLIB)
+	$(MAKE) -C $(PLATFORM) install
+	touch $@
+
+clean:
+	$(MAKE) -C $(PLATFORM) clean
+	rm -f .installed-$(PLATFORM)
+
+distclean:
+	rm -rf $(PLATFORM) .installed-$(PLATFORM)
diff --git a/tools/depends/target/libudfread/UDFREAD-VERSION b/tools/depends/target/libudfread/UDFREAD-VERSION
new file mode 100644
index 000000000000..9a13b55e1e68
--- /dev/null
+++ b/tools/depends/target/libudfread/UDFREAD-VERSION
@@ -0,0 +1,3 @@
+LIBNAME=libudfread
+VERSION=1.0.0
+ARCHIVE=$(LIBNAME)-$(VERSION).tar.gz

From 2436179acea74da95390bee22830b9d9827646b7 Mon Sep 17 00:00:00 2001
From: Lukas Rusak <lorusak@gmail.com>
Date: Fri, 3 Apr 2020 14:22:34 -0700
Subject: [PATCH 2/3] CUDFFile: switch to using libudfread

---
 CMakeLists.txt                           |  3 +-
 cmake/modules/FindUdf.cmake              | 36 ---------
 cmake/modules/FindUdfread.cmake          | 78 ++++++++++++++++++++
 xbmc/filesystem/CMakeLists.txt           |  8 +-
 xbmc/filesystem/DirectoryFactory.cpp     |  4 +-
 xbmc/filesystem/FileDirectoryFactory.cpp |  4 +-
 xbmc/filesystem/FileFactory.cpp          |  4 +-
 xbmc/filesystem/UDFBlockInput.cpp        | 71 ++++++++++++++++++
 xbmc/filesystem/UDFBlockInput.h          | 39 ++++++++++
 xbmc/filesystem/UDFDirectory.cpp         | 46 +++++++-----
 xbmc/filesystem/UDFFile.cpp              | 93 +++++++-----------------
 xbmc/filesystem/UDFFile.h                | 17 +++--
 12 files changed, 263 insertions(+), 140 deletions(-)
 delete mode 100644 cmake/modules/FindUdf.cmake
 create mode 100644 cmake/modules/FindUdfread.cmake
 create mode 100644 xbmc/filesystem/UDFBlockInput.cpp
 create mode 100644 xbmc/filesystem/UDFBlockInput.h

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 69d6c697dfb7..6e5fad9f4925 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -59,6 +59,7 @@ if(UNIX)
   option(ENABLE_INTERNAL_FLATBUFFERS "Enable internal flatbuffers?" OFF)
   option(ENABLE_INTERNAL_DAV1D "Enable internal dav1d?" OFF)
   option(ENABLE_INTERNAL_GTEST "Enable internal gtest?" OFF)
+  option(ENABLE_INTERNAL_UDFREAD "Enable internal udfread?" OFF)
 endif()
 # System options
 if(NOT WIN32)
@@ -156,7 +157,7 @@ set(optional_deps Alsa
                   SmbClient
                   Sndio
                   UDEV
-                  Udf
+                  Udfread
                   XSLT
                   ${PLATFORM_OPTIONAL_DEPS})
 
diff --git a/cmake/modules/FindUdf.cmake b/cmake/modules/FindUdf.cmake
deleted file mode 100644
index 3b08dc213fbf..000000000000
--- a/cmake/modules/FindUdf.cmake
+++ /dev/null
@@ -1,36 +0,0 @@
-#.rst:
-# FindUdf
-# --------
-# Finds the udf library
-#
-# This will define the following variables::
-#
-# UDF_FOUND - system has udf
-# UDF_INCLUDE_DIRS - the udf include directory
-# UDF_LIBRARIES - the udf libraries
-# UDF_DEFINITIONS - the udf definitions
-
-if(PKG_CONFIG_FOUND)
-  pkg_check_modules(PC_UDF libudf>=0.94 QUIET)
-endif()
-
-find_path(UDF_INCLUDE_DIR NAMES cdio/udf.h
-                          PATHS ${PC_UDF_INCLUDEDIR})
-
-find_library(UDF_LIBRARY NAMES udf libudf
-                         PATHS ${PC_UDF_LIBDIR})
-
-set(UDF_VERSION ${PC_UDF_VERSION})
-
-include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(Udf
-                                  REQUIRED_VARS UDF_LIBRARY UDF_INCLUDE_DIR
-                                  VERSION_VAR UDF_VERSION)
-
-if(UDF_FOUND)
-  set(UDF_LIBRARIES ${UDF_LIBRARY})
-  set(UDF_INCLUDE_DIRS ${UDF_INCLUDE_DIR})
-  set(UDF_DEFINITIONS -DHAS_UDF=1)
-endif()
-
-mark_as_advanced(UDF_INCLUDE_DIR UDF_LIBRARY)
diff --git a/cmake/modules/FindUdfread.cmake b/cmake/modules/FindUdfread.cmake
new file mode 100644
index 000000000000..20fb3226c9c9
--- /dev/null
+++ b/cmake/modules/FindUdfread.cmake
@@ -0,0 +1,78 @@
+#.rst:
+# FindUdfread
+# --------
+# Finds the udfread library
+#
+# This will define the following variables::
+#
+# UDFREAD_FOUND - system has udfread
+# UDFREAD_INCLUDE_DIRS - the udfread include directory
+# UDFREAD_LIBRARIES - the udfread libraries
+# UDFREAD_DEFINITIONS - the udfread definitions
+
+if(PKG_CONFIG_FOUND)
+  pkg_check_modules(PC_UDFREAD udfread>=1.0.0 QUIET)
+endif()
+
+find_path(UDFREAD_INCLUDE_DIR NAMES udfread/udfread.h
+                          PATHS ${PC_UDFREAD_INCLUDEDIR})
+
+find_library(UDFREAD_LIBRARY NAMES udfread libudfread
+                         PATHS ${PC_UDFREAD_LIBDIR})
+
+set(UDFREAD_VERSION ${PC_UDFREAD_VERSION})
+
+if(ENABLE_INTERNAL_UDFREAD)
+  include(ExternalProject)
+
+  # Extract version
+  file(STRINGS ${CMAKE_SOURCE_DIR}/tools/depends/target/libudfread/UDFREAD-VERSION VER)
+
+  string(REGEX MATCH "VERSION=[^ ]*$.*" UDFREAD_VER "${VER}")
+  list(GET UDFREAD_VER 0 UDFREAD_VER)
+  string(SUBSTRING "${UDFREAD_VER}" 8 -1 UDFREAD_VER)
+
+  # allow user to override the download URL with a local tarball
+  # needed for offline build envs
+  if(UDFREAD_URL)
+    get_filename_component(UDFREAD_URL "${UDFREAD_URL}" ABSOLUTE)
+  else()
+    set(UDFREAD_URL http://mirrors.kodi.tv/build-deps/sources/libudfread-${UDFREAD_VER}.tar.gz)
+  endif()
+
+  if(VERBOSE)
+    message(STATUS "UDFREAD_URL: ${UDFREAD_URL}")
+  endif()
+
+  set(UDFREAD_LIBRARY ${CMAKE_BINARY_DIR}/${CORE_BUILD_DIR}/lib/libudfread.a)
+  set(UDFREAD_INCLUDE_DIR ${CMAKE_BINARY_DIR}/${CORE_BUILD_DIR}/include)
+  set(UDFREAD_VERSION ${UDFREAD_VER})
+
+  externalproject_add(udfread
+                      URL ${UDFREAD_URL}
+                      DOWNLOAD_NAME libudfread-${UDFREAD_VER}.tar.gz
+                      DOWNLOAD_DIR ${CMAKE_BINARY_DIR}/${CORE_BUILD_DIR}/download
+                      PREFIX ${CORE_BUILD_DIR}/libudfread
+                      CONFIGURE_COMMAND autoreconf -vif &&
+                                        ./configure
+                                        --enable-static
+                                        --disable-shared
+                                        --prefix=${CMAKE_BINARY_DIR}/${CORE_BUILD_DIR}
+                      BUILD_BYPRODUCTS ${UDFREAD_LIBRARY}
+                      BUILD_IN_SOURCE 1)
+
+  set_target_properties(udfread PROPERTIES FOLDER "External Projects")
+endif()
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(Udfread
+                                  REQUIRED_VARS UDFREAD_LIBRARY UDFREAD_INCLUDE_DIR
+                                  VERSION_VAR UDFREAD_VERSION)
+
+if(UDFREAD_FOUND)
+  set(UDFREAD_LIBRARIES ${UDFREAD_LIBRARY})
+  set(UDFREAD_INCLUDE_DIRS ${UDFREAD_INCLUDE_DIR})
+  set(UDFREAD_DEFINITIONS -DHAS_UDFREAD=1)
+endif()
+
+mark_as_advanced(UDFREAD_INCLUDE_DIR UDFREAD_LIBRARY)
diff --git a/xbmc/filesystem/CMakeLists.txt b/xbmc/filesystem/CMakeLists.txt
index c83cfad43772..78aa59b298fd 100644
--- a/xbmc/filesystem/CMakeLists.txt
+++ b/xbmc/filesystem/CMakeLists.txt
@@ -130,10 +130,12 @@ if(ISO9660PP_FOUND)
                       ISO9660File.h)
 endif()
 
-if(UDF_FOUND)
-  list(APPEND SOURCES UDFDirectory.cpp
+if(UDFREAD_FOUND)
+  list(APPEND SOURCES UDFBlockInput.cpp
+                      UDFDirectory.cpp
                       UDFFile.cpp)
-  list(APPEND HEADERS UDFDirectory.h
+  list(APPEND HEADERS UDFBlockInput.h
+                      UDFDirectory.h
                       UDFFile.h)
 endif()
 
diff --git a/xbmc/filesystem/DirectoryFactory.cpp b/xbmc/filesystem/DirectoryFactory.cpp
index ac2fbc4a814a..4e5d373964fe 100644
--- a/xbmc/filesystem/DirectoryFactory.cpp
+++ b/xbmc/filesystem/DirectoryFactory.cpp
@@ -25,7 +25,7 @@
 #include "FTPDirectory.h"
 #include "HTTPDirectory.h"
 #include "DAVDirectory.h"
-#if defined(HAS_UDF)
+#if defined(HAS_UDFREAD)
 #include "UDFDirectory.h"
 #endif
 #include "utils/log.h"
@@ -135,7 +135,7 @@ IDirectory* CDirectoryFactory::Create(const CURL& url)
 #if defined(HAS_ISO9660PP)
   if (url.IsProtocol("iso9660")) return new CISO9660Directory();
 #endif
-#if defined(HAS_UDF)
+#if defined(HAS_UDFREAD)
   if (url.IsProtocol("udf")) return new CUDFDirectory();
 #endif
   if (url.IsProtocol("plugin")) return new CPluginDirectory();
diff --git a/xbmc/filesystem/FileDirectoryFactory.cpp b/xbmc/filesystem/FileDirectoryFactory.cpp
index 1078f1aa2d9c..4a6e17ad9ce8 100644
--- a/xbmc/filesystem/FileDirectoryFactory.cpp
+++ b/xbmc/filesystem/FileDirectoryFactory.cpp
@@ -11,7 +11,7 @@
 #if defined(HAS_ISO9660PP)
 #include "ISO9660Directory.h"
 #endif
-#if defined(HAS_UDF)
+#if defined(HAS_UDFREAD)
 #include "UDFDirectory.h"
 #endif
 #include "RSSDirectory.h"
@@ -130,7 +130,7 @@ IFileDirectory* CFileDirectoryFactory::Create(const CURL& url, CFileItem* pItem,
     delete iso;
 #endif
 
-#if defined(HAS_UDF)
+#if defined(HAS_UDFREAD)
     return new CUDFDirectory();
 #endif
 
diff --git a/xbmc/filesystem/FileFactory.cpp b/xbmc/filesystem/FileFactory.cpp
index 73d544dd8534..570062c59fab 100644
--- a/xbmc/filesystem/FileFactory.cpp
+++ b/xbmc/filesystem/FileFactory.cpp
@@ -56,7 +56,7 @@
 #include "PluginFile.h"
 #include "SpecialProtocolFile.h"
 #include "MultiPathFile.h"
-#if defined(HAS_UDF)
+#if defined(HAS_UDFREAD)
 #include "UDFFile.h"
 #endif
 #include "ImageFile.h"
@@ -136,7 +136,7 @@ IFile* CFileFactory::CreateLoader(const CURL& url)
   else if (url.IsProtocol("iso9660"))
     return new CISO9660File();
 #endif
-#if defined(HAS_UDF)
+#if defined(HAS_UDFREAD)
   else if(url.IsProtocol("udf"))
     return new CUDFFile();
 #endif
diff --git a/xbmc/filesystem/UDFBlockInput.cpp b/xbmc/filesystem/UDFBlockInput.cpp
new file mode 100644
index 000000000000..e25df6f4d4e0
--- /dev/null
+++ b/xbmc/filesystem/UDFBlockInput.cpp
@@ -0,0 +1,71 @@
+/*
+ *  Copyright (C) 2005-2018 Team Kodi
+ *  This file is part of Kodi - https://kodi.tv
+ *
+ *  SPDX-License-Identifier: GPL-2.0-or-later
+ *  See LICENSES/README.md for more information.
+ */
+
+#include "UDFBlockInput.h"
+
+#include "threads/SingleLock.h"
+
+#include <udfread/udfread.h>
+
+int CUDFBlockInput::Close(udfread_block_input* bi)
+{
+  auto m_bi = reinterpret_cast<UDF_BI*>(bi);
+
+  m_bi->fp->Close();
+
+  return 0;
+}
+
+uint32_t CUDFBlockInput::Size(udfread_block_input* bi)
+{
+  auto m_bi = reinterpret_cast<UDF_BI*>(bi);
+
+  return static_cast<uint32_t>(m_bi->fp->GetLength() / UDF_BLOCK_SIZE);
+}
+
+int CUDFBlockInput::Read(
+    udfread_block_input* bi, uint32_t lba, void* buf, uint32_t blocks, int flags)
+{
+  auto m_bi = reinterpret_cast<UDF_BI*>(bi);
+  CSingleLock lock(m_bi->lock);
+
+  int64_t pos = static_cast<int64_t>(lba) * UDF_BLOCK_SIZE;
+
+  if (m_bi->fp->Seek(pos, SEEK_SET) != pos)
+    return -1;
+
+  ssize_t size = blocks * UDF_BLOCK_SIZE;
+  ssize_t read = m_bi->fp->Read(buf, size);
+  if (read > 0)
+    return static_cast<int>(read / UDF_BLOCK_SIZE);
+
+  return static_cast<int>(read);
+}
+
+udfread_block_input* CUDFBlockInput::GetBlockInput(std::string file)
+{
+  auto fp = std::make_shared<XFILE::CFile>();
+
+  if (fp->Open(file))
+  {
+    m_bi = std::make_unique<UDF_BI>();
+    if (m_bi)
+    {
+      m_bi->fp = fp;
+      m_bi->bi.close = CUDFBlockInput::Close;
+      m_bi->bi.read = CUDFBlockInput::Read;
+      m_bi->bi.size = CUDFBlockInput::Size;
+
+      return &m_bi->bi;
+    }
+
+    fp->Close();
+  }
+
+  return nullptr;
+}
diff --git a/xbmc/filesystem/UDFBlockInput.h b/xbmc/filesystem/UDFBlockInput.h
new file mode 100644
index 000000000000..0506077ecb85
--- /dev/null
+++ b/xbmc/filesystem/UDFBlockInput.h
@@ -0,0 +1,39 @@
+/*
+ *  Copyright (C) 2005-2018 Team Kodi
+ *  This file is part of Kodi - https://kodi.tv
+ *
+ *  SPDX-License-Identifier: GPL-2.0-or-later
+ *  See LICENSES/README.md for more information.
+ */
+
+#pragma once
+
+#include "filesystem/File.h"
+#include "threads/CriticalSection.h"
+
+#include <memory>
+
+#include <udfread/blockinput.h>
+
+class CUDFBlockInput
+{
+public:
+  CUDFBlockInput() = default;
+  ~CUDFBlockInput() = default;
+
+  udfread_block_input* GetBlockInput(std::string file);
+
+private:
+  static int Close(udfread_block_input* bi);
+  static uint32_t Size(udfread_block_input* bi);
+  static int Read(udfread_block_input* bi, uint32_t lba, void* buf, uint32_t nblocks, int flags);
+
+  struct UDF_BI
+  {
+    struct udfread_block_input bi;
+    std::shared_ptr<XFILE::CFile> fp{nullptr};
+    CCriticalSection lock;
+  };
+
+  std::unique_ptr<UDF_BI> m_bi{nullptr};
+};
diff --git a/xbmc/filesystem/UDFDirectory.cpp b/xbmc/filesystem/UDFDirectory.cpp
index ccecd1849b0d..236b281303c5 100644
--- a/xbmc/filesystem/UDFDirectory.cpp
+++ b/xbmc/filesystem/UDFDirectory.cpp
@@ -14,9 +14,10 @@
 #include "FileItem.h"
 #include "URL.h"
 #include "Util.h"
+#include "filesystem/UDFBlockInput.h"
 #include "utils/URIUtils.h"
 
-#include <cdio/udf.h>
+#include <udfread/udfread.h>
 
 using namespace XFILE;
 
@@ -36,36 +37,35 @@ bool CUDFDirectory::GetDirectory(const CURL& url, CFileItemList& items)
   URIUtils::AddSlashAtEnd(strRoot);
   URIUtils::AddSlashAtEnd(strSub);
 
-  udf_t* udf = udf_open(url2.GetHostName().c_str());
+  auto udf = udfread_init();
 
   if (!udf)
     return false;
 
-  udf_dirent_t* root = udf_get_root(udf, true, 0);
+  CUDFBlockInput udfbi;
 
-  if (!root)
+  auto bi = udfbi.GetBlockInput(url2.GetHostName());
+
+  if (udfread_open_input(udf, bi) < 0)
   {
-    udf_close(udf);
+    udfread_close(udf);
     return false;
   }
 
-  udf_dirent_t* path = udf_fopen(root, strSub.c_str());
-
+  auto path = udfread_opendir(udf, strSub.c_str());
   if (!path)
   {
-    udf_dirent_free(root);
-    udf_close(udf);
+    udfread_close(udf);
     return false;
   }
 
-  while (udf_readdir(path))
-  {
-    if (path->b_parent)
-      continue;
+  struct udfread_dirent dirent;
 
-    if (udf_is_dir(path))
+  while (udfread_readdir(path, &dirent))
+  {
+    if (dirent.d_type == UDF_DT_DIR)
     {
-      std::string filename = udf_get_filename(path);
+      std::string filename = dirent.d_name;
       if (filename != "." && filename != "..")
       {
         CFileItemPtr pItem(new CFileItem(filename));
@@ -79,18 +79,24 @@ bool CUDFDirectory::GetDirectory(const CURL& url, CFileItemList& items)
     }
     else
     {
-      std::string filename = udf_get_filename(path);
+      std::string filename = dirent.d_name;
+      std::string filenameWithPath{strSub + filename};
+      auto file = udfread_file_open(udf, filenameWithPath.c_str());
+      if (!file)
+        continue;
+
       CFileItemPtr pItem(new CFileItem(filename));
       pItem->SetPath(strRoot + filename);
       pItem->m_bIsFolder = false;
-      pItem->m_dwSize = udf_get_file_length(path);
-
+      pItem->m_dwSize = udfread_file_size(file);
       items.Add(pItem);
+
+      udfread_file_close(file);
     }
   }
 
-  udf_dirent_free(root);
-  udf_close(udf);
+  udfread_closedir(path);
+  udfread_close(udf);
 
   return true;
 }
diff --git a/xbmc/filesystem/UDFFile.cpp b/xbmc/filesystem/UDFFile.cpp
index c4e43215ccc2..c276af4a7eea 100644
--- a/xbmc/filesystem/UDFFile.cpp
+++ b/xbmc/filesystem/UDFFile.cpp
@@ -9,136 +9,97 @@
 #include "UDFFile.h"
 
 #include "URL.h"
-#include "utils/log.h"
 
-#include <cmath>
-
-#include <cdio/udf.h>
-#include <sys/stat.h>
+#include <udfread/udfread.h>
 
 using namespace XFILE;
 
+CUDFFile::CUDFFile() : m_bi{std::make_unique<CUDFBlockInput>()}
+{
+}
+
 bool CUDFFile::Open(const CURL& url)
 {
-  if (m_udf && m_path)
+  if (m_udf && m_file)
     return true;
 
-  m_udf = udf_open(url.GetHostName().c_str());
+  m_udf = udfread_init();
 
   if (!m_udf)
     return false;
 
-  udf_dirent_t* root = udf_get_root(m_udf, true, 0);
+  auto bi = m_bi->GetBlockInput(url.GetHostName());
 
-  if (!root)
+  if (!bi)
   {
-    Close();
+    udfread_close(m_udf);
     return false;
   }
 
-  m_path = udf_fopen(root, url.GetFileName().c_str());
-
-  udf_dirent_free(root);
+  if (udfread_open_input(m_udf, bi) < 0)
+  {
+    bi->close(bi);
+    udfread_close(m_udf);
+    return false;
+  }
 
-  if (!m_path)
+  m_file = udfread_file_open(m_udf, url.GetFileName().c_str());
+  if (!m_file)
   {
     Close();
     return false;
   }
 
-  m_current = 0;
-
   return true;
 }
 
 void CUDFFile::Close()
 {
-  if (m_path)
+  if (m_file)
   {
-    udf_dirent_free(m_path);
-    m_path = nullptr;
+    udfread_file_close(m_file);
+    m_file = nullptr;
   }
 
   if (m_udf)
   {
-    udf_close(m_udf);
+    udfread_close(m_udf);
     m_udf = nullptr;
   }
 }
 
 int CUDFFile::Stat(const CURL& url, struct __stat64* buffer)
 {
-  if (!m_udf || !m_path)
+  if (!m_udf || !m_file)
     return -1;
 
   buffer = {};
   buffer->st_size = GetLength();
 
-  if (m_path->b_dir)
-  {
-    buffer->st_mode = S_IFDIR;
-  }
-  else
-  {
-    buffer->st_mode = S_IFREG;
-  }
-
   return 0;
 }
 
 ssize_t CUDFFile::Read(void* buffer, size_t size)
 {
-  const int maxSize = std::min(size, static_cast<size_t>(GetLength()));
-  const int blocks = std::ceil(maxSize / UDF_BLOCKSIZE);
-
-  if (m_current > std::ceil(GetLength() / UDF_BLOCKSIZE))
-  {
-    return -1;
-  }
-
-  auto read = udf_read_block(m_path, buffer, blocks);
-
-  m_current += blocks;
-
-  return read;
+  return udfread_file_read(m_file, buffer, size);
 }
 
 int64_t CUDFFile::Seek(int64_t filePosition, int whence)
 {
-  int block = std::floor(filePosition / UDF_BLOCKSIZE);
-
-  switch (whence)
-  {
-    case SEEK_SET:
-      m_current = block;
-      break;
-    case SEEK_CUR:
-      m_current += block;
-      break;
-    case SEEK_END:
-      m_current = std::ceil(GetLength() / UDF_BLOCKSIZE) + block;
-      break;
-  }
-
-  return m_current * UDF_BLOCKSIZE;
+  return udfread_file_seek(m_file, filePosition, whence);
 }
 
 int64_t CUDFFile::GetLength()
 {
-  return udf_get_file_length(m_path);
+  return udfread_file_size(m_file);
 }
 
 int64_t CUDFFile::GetPosition()
 {
-  return m_current * UDF_BLOCKSIZE;
+  return udfread_file_tell(m_file);
 }
 
 bool CUDFFile::Exists(const CURL& url)
 {
   return Open(url);
 }
-
-int CUDFFile::GetChunkSize()
-{
-  return UDF_BLOCKSIZE;
-}
diff --git a/xbmc/filesystem/UDFFile.h b/xbmc/filesystem/UDFFile.h
index be51b91d908b..1617a1f1ce8c 100644
--- a/xbmc/filesystem/UDFFile.h
+++ b/xbmc/filesystem/UDFFile.h
@@ -9,9 +9,12 @@
 #pragma once
 
 #include "IFile.h"
+#include "filesystem/UDFBlockInput.h"
 
-typedef struct udf_s udf_t;
-typedef struct udf_dirent_s udf_dirent_t;
+#include <memory>
+
+class udfread;
+typedef struct udfread_file UDFFILE;
 
 namespace XFILE
 {
@@ -19,7 +22,7 @@ namespace XFILE
 class CUDFFile : public IFile
 {
 public:
-  CUDFFile() = default;
+  CUDFFile();
   ~CUDFFile() override = default;
 
   bool Open(const CURL& url) override;
@@ -35,13 +38,11 @@ class CUDFFile : public IFile
 
   bool Exists(const CURL& url) override;
 
-  int GetChunkSize() override;
-
 private:
-  udf_t* m_udf{nullptr};
-  udf_dirent_t* m_path{nullptr};
+  std::unique_ptr<CUDFBlockInput> m_bi{nullptr};
 
-  uint32_t m_current;
+  udfread* m_udf{nullptr};
+  UDFFILE* m_file{nullptr};
 };
 
 } // namespace XFILE

From 856221fdc533164607712b5a14072b2db9dbae00 Mon Sep 17 00:00:00 2001
From: wsnipex <wsnipex@a1.net>
Date: Fri, 10 Apr 2020 09:40:37 +0200
Subject: [PATCH 3/3] libudfread: add download target

---
 tools/depends/target/libudfread/Makefile | 15 +++++++++++++--
 1 file changed, 13 insertions(+), 2 deletions(-)

diff --git a/tools/depends/target/libudfread/Makefile b/tools/depends/target/libudfread/Makefile
index 1e2c67b71266..11ebf831dba9 100644
--- a/tools/depends/target/libudfread/Makefile
+++ b/tools/depends/target/libudfread/Makefile
@@ -1,6 +1,16 @@
-include ../../Makefile.include
+-include ../../Makefile.include
 include UDFREAD-VERSION
-DEPS = ../../Makefile.include Makefile UDFREAD-VERSION
+DEPS = Makefile UDFREAD-VERSION
+
+ifeq ($(CROSS_COMPILING), yes)
+  DEPS += ../../Makefile.include
+else
+  ROOT_DIR := $(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))
+  TARBALLS_LOCATION ?= $(ROOT_DIR)
+  BASE_URL ?= http://mirrors.kodi.tv/build-deps/sources
+  RETRIEVE_TOOL := curl -Ls --retry 10 --retry-delay 3 -o $(ARCHIVE)
+  ARCHIVE_TOOL := tar --strip-components=1 -xf
+endif
 
 # configuration settings
 CONFIGURE = ./configure --prefix=$(PREFIX) --disable-shared --enable-static
@@ -8,6 +18,7 @@ CONFIGURE = ./configure --prefix=$(PREFIX) --disable-shared --enable-static
 LIBDYLIB=$(PLATFORM)/lib/lib$(LIBNAME).a
 
 all: .installed-$(PLATFORM)
+download: $(TARBALLS_LOCATION)/$(ARCHIVE)
 
 $(TARBALLS_LOCATION)/$(ARCHIVE):
 	cd $(TARBALLS_LOCATION); $(RETRIEVE_TOOL) $(RETRIEVE_TOOL_FLAGS) $(BASE_URL)/$(ARCHIVE)
