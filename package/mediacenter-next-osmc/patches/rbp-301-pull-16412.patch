From ec78e5337c05645725f6b285fafe7438b1d874fc Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Sun, 28 Jul 2019 14:07:25 +0200
Subject: [PATCH 1/3] [addons] change the use of CBinaryAddonBase

Data is now given by the new CAddonInfo.
---
 xbmc/addons/binary-addons/BinaryAddonBase.cpp | 111 ------------------
 xbmc/addons/binary-addons/BinaryAddonBase.h   |  15 +--
 .../binary-addons/BinaryAddonManager.cpp      |   6 -
 3 files changed, 4 insertions(+), 128 deletions(-)

diff --git a/xbmc/addons/binary-addons/BinaryAddonBase.cpp b/xbmc/addons/binary-addons/BinaryAddonBase.cpp
index 54b3bd845765..2543673dd103 100644
--- a/xbmc/addons/binary-addons/BinaryAddonBase.cpp
+++ b/xbmc/addons/binary-addons/BinaryAddonBase.cpp
@@ -17,60 +17,6 @@
 
 using namespace ADDON;
 
-bool CBinaryAddonBase::Create()
-{
-  std::string path = CSpecialProtocol::TranslatePath(m_addonInfo->Path());
-
-  StringUtils::TrimRight(path, "/\\");
-
-  auto addonXmlPath = URIUtils::AddFileToFolder(path, "addon.xml");
-
-  CXBMCTinyXML xmlDoc;
-  if (!xmlDoc.LoadFile(addonXmlPath))
-  {
-    CLog::Log(LOGERROR, "CBinaryAddonBase::%s: Unable to load '%s', Line %d\n%s",
-                                               __FUNCTION__,
-                                               path.c_str(),
-                                               xmlDoc.ErrorRow(),
-                                               xmlDoc.ErrorDesc());
-    return false;
-  }
-
-  return LoadAddonXML(xmlDoc.RootElement(), path);
-}
-
-bool CBinaryAddonBase::IsType(TYPE type) const
-{
-  return (m_addonInfo->MainType() == type || ProvidesSubContent(type));
-}
-
-bool CBinaryAddonBase::ProvidesSubContent(const TYPE& content, const TYPE& mainType/* = ADDON_UNKNOWN*/) const
-{
-  if (content == ADDON_UNKNOWN)
-    return false;
-
-  for (auto addonType : m_types)
-  {
-    if ((mainType == ADDON_UNKNOWN || addonType.Type() == mainType) && addonType.ProvidesSubContent(content))
-      return true;
-  }
-
-  return false;
-}
-
-bool CBinaryAddonBase::ProvidesSeveralSubContents() const
-{
-  int contents = 0;
-  for (auto addonType : m_types)
-    contents += addonType.ProvidedSubContents();
-  return (contents > 0);
-}
-
-bool CBinaryAddonBase::MeetsVersion(const AddonVersion &version) const
-{
-  return m_addonInfo->MinVersion() <= version && version <= m_addonInfo->Version();
-}
-
 AddonDllPtr CBinaryAddonBase::GetAddon(const IAddonInstanceHandler* handler)
 {
   if (handler == nullptr)
@@ -120,60 +66,3 @@ AddonDllPtr CBinaryAddonBase::GetActiveAddon()
   return m_activeAddon;
 }
 
-const CBinaryAddonType* CBinaryAddonBase::Type(TYPE type) const
-{
-  if (type == ADDON_UNKNOWN)
-    return &m_types[0];
-
-  for (auto& addonType : m_types)
-  {
-    if (addonType.Type() == type)
-      return &addonType;
-  }
-  return nullptr;
-}
-
-bool CBinaryAddonBase::LoadAddonXML(const TiXmlElement* baseElement, const std::string& addonPath)
-{
-  if (!StringUtils::EqualsNoCase(baseElement->Value(), "addon"))
-  {
-    CLog::Log(LOGERROR, "CBinaryAddonBase::%s: file from '%s' doesnt contain <addon>", __FUNCTION__, addonPath.c_str());
-    return false;
-  }
-
-  /*
-   * Parse addon.xml:
-   * <extension>
-   *   ...
-   * </extension>
-   */
-  for (const TiXmlElement* child = baseElement->FirstChildElement("extension"); child != nullptr; child = child->NextSiblingElement("extension"))
-  {
-    const char* cstring = child->Attribute("point");
-    std::string point = cstring ? cstring : "";
-
-    if (point != "kodi.addon.metadata" && point != "xbmc.addon.metadata")
-    {
-      TYPE type = CAddonInfo::TranslateType(point);
-      if (type == ADDON_UNKNOWN || type >= ADDON_MAX)
-      {
-        CLog::Log(LOGERROR, "CBinaryAddonBase::%s: file '%s' doesn't contain a valid add-on type name (%s)", __FUNCTION__, addonPath.c_str(), point.c_str());
-        return false;
-      }
-
-      m_types.push_back(CBinaryAddonType(type, this, child));
-    }
-  }
-
-  /*
-   * If nothing is defined in addon.xml set this as unknown to have minimum one
-   * instance type present.
-   */
-  if (m_types.empty())
-    m_types.push_back(CBinaryAddonType(ADDON_UNKNOWN, this, nullptr));
-
-  m_addonInfo->SetMainType(m_types[0].Type());
-  m_addonInfo->SetLibName(m_types[0].LibName());
-
-  return true;
-}
diff --git a/xbmc/addons/binary-addons/BinaryAddonBase.h b/xbmc/addons/binary-addons/BinaryAddonBase.h
index ebd4fce0d42f..07d2295b82de 100644
--- a/xbmc/addons/binary-addons/BinaryAddonBase.h
+++ b/xbmc/addons/binary-addons/BinaryAddonBase.h
@@ -32,17 +32,15 @@ namespace ADDON
   public:
     explicit CBinaryAddonBase(const AddonInfoPtr& addonInfo) : m_addonInfo(addonInfo) { }
 
-    bool Create();
-
     const std::string& ID() const { return m_addonInfo->ID(); }
     const std::string& Path() const { return m_addonInfo->Path(); }
 
     TYPE MainType() const { return m_addonInfo->MainType(); }
     const std::string& MainLibName() const { return m_addonInfo->LibName(); }
 
-    bool IsType(TYPE type) const;
-    const std::vector<CBinaryAddonType>& Types() const { return m_types; }
-    const CBinaryAddonType* Type(TYPE type) const;
+    bool IsType(TYPE type) const { return m_addonInfo->IsType(type); }
+    const std::vector<CAddonType>& Types() const { return m_addonInfo->Types(); }
+    const CAddonType* Type(TYPE type) const { return m_addonInfo->Type(type); }
 
     const AddonVersion& Version() const { return m_addonInfo->Version(); }
     const AddonVersion& MinVersion() const { return m_addonInfo->MinVersion(); }
@@ -55,10 +53,7 @@ namespace ADDON
     const ArtMap& Art() const { return m_addonInfo->Art(); }
     const std::string& Disclaimer() const { return m_addonInfo->Disclaimer(); }
 
-    bool ProvidesSubContent(const TYPE& content, const TYPE& mainType = ADDON_UNKNOWN) const;
-    bool ProvidesSeveralSubContents() const;
-
-    bool MeetsVersion(const AddonVersion &version) const;
+    bool MeetsVersion(const AddonVersion& version) const { return m_addonInfo->MeetsVersion(version); }
 
     AddonDllPtr GetAddon(const IAddonInstanceHandler* handler);
     void ReleaseAddon(const IAddonInstanceHandler* handler);
@@ -66,8 +61,6 @@ namespace ADDON
     AddonDllPtr GetActiveAddon();
 
   private:
-    bool LoadAddonXML(const TiXmlElement* element, const std::string& addonPath);
-
     AddonInfoPtr m_addonInfo;
     std::vector<CBinaryAddonType> m_types;
 
diff --git a/xbmc/addons/binary-addons/BinaryAddonManager.cpp b/xbmc/addons/binary-addons/BinaryAddonManager.cpp
index 1e145550c15f..1a361f80059f 100644
--- a/xbmc/addons/binary-addons/BinaryAddonManager.cpp
+++ b/xbmc/addons/binary-addons/BinaryAddonManager.cpp
@@ -149,12 +149,6 @@ AddonPtr CBinaryAddonManager::GetRunningAddon(const std::string& addonId) const
 bool CBinaryAddonManager::AddAddonBaseEntry(BINARY_ADDON_LIST_ENTRY& entry)
 {
   BinaryAddonBasePtr base = std::make_shared<CBinaryAddonBase>(entry.second);
-  if (!base->Create())
-  {
-    CLog::Log(LOGERROR, "CBinaryAddonManager::%s: Failed to create base for '%s' and addon not usable", __FUNCTION__, base->ID().c_str());
-    return false;
-  }
-
   m_installedAddons[base->ID()] = base;
   if (entry.first)
     m_enabledAddons[base->ID()] = base;

From e4b54566c83d575a1325164c46537a556540e74a Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Sun, 28 Jul 2019 14:16:12 +0200
Subject: [PATCH 2/3] [addons] remove the no more needed files

---
 xbmc/addons/binary-addons/BinaryAddonBase.h   |   4 -
 .../binary-addons/BinaryAddonExtensions.cpp   | 143 ------------------
 .../binary-addons/BinaryAddonExtensions.h     |  47 ------
 xbmc/addons/binary-addons/BinaryAddonType.cpp |  90 -----------
 xbmc/addons/binary-addons/BinaryAddonType.h   |  59 --------
 xbmc/addons/binary-addons/CMakeLists.txt      |   6 +-
 6 files changed, 1 insertion(+), 348 deletions(-)
 delete mode 100644 xbmc/addons/binary-addons/BinaryAddonExtensions.cpp
 delete mode 100644 xbmc/addons/binary-addons/BinaryAddonExtensions.h
 delete mode 100644 xbmc/addons/binary-addons/BinaryAddonType.cpp
 delete mode 100644 xbmc/addons/binary-addons/BinaryAddonType.h

diff --git a/xbmc/addons/binary-addons/BinaryAddonBase.h b/xbmc/addons/binary-addons/BinaryAddonBase.h
index 07d2295b82de..20a09ca44237 100644
--- a/xbmc/addons/binary-addons/BinaryAddonBase.h
+++ b/xbmc/addons/binary-addons/BinaryAddonBase.h
@@ -9,7 +9,6 @@
 #pragma once
 
 #include "AddonInstanceHandler.h"
-#include "BinaryAddonType.h"
 #include "addons/addoninfo/AddonInfo.h"
 #include "threads/CriticalSection.h"
 
@@ -17,8 +16,6 @@
 #include <string>
 #include <unordered_set>
 
-class TiXmlElement;
-
 namespace ADDON
 {
 
@@ -62,7 +59,6 @@ namespace ADDON
 
   private:
     AddonInfoPtr m_addonInfo;
-    std::vector<CBinaryAddonType> m_types;
 
     CCriticalSection m_critSection;
     AddonDllPtr m_activeAddon;
diff --git a/xbmc/addons/binary-addons/BinaryAddonExtensions.cpp b/xbmc/addons/binary-addons/BinaryAddonExtensions.cpp
deleted file mode 100644
index 51989ae31f4b..000000000000
--- a/xbmc/addons/binary-addons/BinaryAddonExtensions.cpp
+++ /dev/null
@@ -1,143 +0,0 @@
-/*
- *  Copyright (C) 2005-2018 Team Kodi
- *  This file is part of Kodi - https://kodi.tv
- *
- *  SPDX-License-Identifier: GPL-2.0-or-later
- *  See LICENSES/README.md for more information.
- */
-
-#include "BinaryAddonExtensions.h"
-
-#include "utils/XMLUtils.h"
-
-using namespace ADDON;
-
-bool CBinaryAddonExtensions::ParseExtension(const TiXmlElement* element)
-{
-  const char* cstring; /* "C" string point where parts from TinyXML becomes
-                          stored, is used as this to prevent double use of
-                          calls and to prevent not wanted "C++" throws if
-                          std::string want to become set with nullptr! */
-
-  cstring = element->Attribute("point");
-  m_point = cstring ? cstring : "";
-
-  EXT_VALUE extension;
-  const TiXmlAttribute* attribute = element->FirstAttribute();
-  while (attribute)
-  {
-    std::string name = attribute->Name();
-    if (name != "point")
-    {
-      cstring = attribute->Value();
-      if (cstring)
-      {
-        std::string value = cstring;
-        name = "@" + name;
-        extension.push_back(std::make_pair(name, SExtValue(value)));
-      }
-    }
-    attribute = attribute->Next();
-  }
-  if (!extension.empty())
-    m_values.push_back(std::pair<std::string, EXT_VALUE>("", extension));
-
-  const TiXmlElement* childElement = element->FirstChildElement();
-  while (childElement)
-  {
-    cstring = childElement->Value();
-    if (cstring)
-    {
-      std::string id = cstring;
-
-      EXT_VALUE extension;
-      const TiXmlAttribute* attribute = childElement->FirstAttribute();
-      while (attribute)
-      {
-        std::string name = attribute->Name();
-        if (name != "point")
-        {
-          cstring = attribute->Value();
-          if (cstring)
-          {
-            std::string value = cstring;
-            name = id + "@" + name;
-            extension.push_back(std::make_pair(name, SExtValue(value)));
-          }
-        }
-        attribute = attribute->Next();
-      }
-
-      cstring = childElement->GetText();
-      if (cstring)
-        extension.push_back(std::make_pair(id, SExtValue(cstring)));
-
-      if (!extension.empty())
-        m_values.push_back(std::make_pair(id, extension));
-
-      if (!cstring)
-      {
-        const TiXmlElement* childSubElement = childElement->FirstChildElement();
-        if (childSubElement)
-        {
-          CBinaryAddonExtensions subElement;
-          if (subElement.ParseExtension(childElement))
-            m_children.push_back(std::make_pair(id, subElement));
-        }
-      }
-    }
-    childElement = childElement->NextSiblingElement();
-  }
-
-  return true;
-}
-
-const SExtValue CBinaryAddonExtensions::GetValue(const std::string& id) const
-{
-  for (auto values : m_values)
-  {
-    for (auto value : values.second)
-    {
-      if (value.first == id)
-        return value.second;
-    }
-  }
-  return SExtValue("");
-}
-
-const EXT_VALUES& CBinaryAddonExtensions::GetValues() const
-{
-  return m_values;
-}
-
-const CBinaryAddonExtensions* CBinaryAddonExtensions::GetElement(const std::string& id) const
-{
-  for (EXT_BIN_ELEMENTS::const_iterator it = m_children.begin(); it != m_children.end(); ++it)
-  {
-    if (it->first == id)
-      return &it->second;
-  }
-
-  return nullptr;
-}
-
-const EXT_BIN_ELEMENTS CBinaryAddonExtensions::GetElements(const std::string& id) const
-{
-  if (id.empty())
-    return m_children;
-
-  EXT_BIN_ELEMENTS children;
-  for (auto child : m_children)
-  {
-    if (child.first == id)
-      children.push_back(std::make_pair(child.first, child.second));
-  }
-  return children;
-}
-
-void CBinaryAddonExtensions::Insert(const std::string& id, const std::string& value)
-{
-  EXT_VALUE extension;
-  extension.push_back(std::make_pair(id, SExtValue(value)));
-  m_values.push_back(std::make_pair(id, extension));
-}
diff --git a/xbmc/addons/binary-addons/BinaryAddonExtensions.h b/xbmc/addons/binary-addons/BinaryAddonExtensions.h
deleted file mode 100644
index 86eb5a4779aa..000000000000
--- a/xbmc/addons/binary-addons/BinaryAddonExtensions.h
+++ /dev/null
@@ -1,47 +0,0 @@
-/*
- *  Copyright (C) 2005-2018 Team Kodi
- *  This file is part of Kodi - https://kodi.tv
- *
- *  SPDX-License-Identifier: GPL-2.0-or-later
- *  See LICENSES/README.md for more information.
- */
-
-#pragma once
-
-#include "addons/addoninfo/AddonExtensions.h"
-#include "utils/StringUtils.h"
-
-#include <stdlib.h>
-#include <string>
-#include <vector>
-
-class TiXmlElement;
-
-namespace ADDON
-{
-
-  class CBinaryAddonExtensions;
-  typedef std::vector<std::pair<std::string, CBinaryAddonExtensions>> EXT_BIN_ELEMENTS;
-
-  class CBinaryAddonExtensions
-  {
-  public:
-    CBinaryAddonExtensions() = default;
-    ~CBinaryAddonExtensions() = default;
-
-    bool ParseExtension(const TiXmlElement* element);
-
-    const SExtValue GetValue(const std::string& id) const;
-    const EXT_VALUES& GetValues() const;
-    const CBinaryAddonExtensions* GetElement(const std::string& id) const;
-    const EXT_BIN_ELEMENTS GetElements(const std::string& id = "") const;
-
-    void Insert(const std::string& id, const std::string& value);
-
-  private:
-    std::string m_point;
-    EXT_VALUES m_values;
-    EXT_BIN_ELEMENTS m_children;
-  };
-
-} /* namespace ADDON */
diff --git a/xbmc/addons/binary-addons/BinaryAddonType.cpp b/xbmc/addons/binary-addons/BinaryAddonType.cpp
deleted file mode 100644
index 0b13c15c4b0d..000000000000
--- a/xbmc/addons/binary-addons/BinaryAddonType.cpp
+++ /dev/null
@@ -1,90 +0,0 @@
-/*
- *  Copyright (C) 2005-2018 Team Kodi
- *  This file is part of Kodi - https://kodi.tv
- *
- *  SPDX-License-Identifier: GPL-2.0-or-later
- *  See LICENSES/README.md for more information.
- */
-
-#include "BinaryAddonType.h"
-
-#include "BinaryAddonBase.h"
-#include "utils/URIUtils.h"
-#include "utils/XMLUtils.h"
-#include "utils/log.h"
-
-using namespace ADDON;
-
-
-CBinaryAddonType::CBinaryAddonType(TYPE type, CBinaryAddonBase* info, const TiXmlElement* child)
- : m_type(type),
-   m_path(info->Path())
-{
-  if (child)
-  {
-    // Get add-on library file name (if present)
-    const char* library = child->Attribute("library");
-    if (library == nullptr)
-      library = GetPlatformLibraryName(child);
-    if (library != nullptr)
-      m_libname = library;
-
-    if (!ParseExtension(child))
-    {
-      CLog::Log(LOGERROR, "CBinaryAddonType::%s: addon.xml file doesn't contain a valid add-on extensions (%s)", __FUNCTION__, info->ID().c_str());
-      return;
-    }
-    SetProvides(GetValue("provides").asString());
-  }
-}
-
-std::string CBinaryAddonType::LibPath() const
-{
-  if (m_libname.empty())
-    return "";
-  return URIUtils::AddFileToFolder(m_path, m_libname);
-}
-
-const char* CBinaryAddonType::GetPlatformLibraryName(const TiXmlElement* element)
-{
-  const char* libraryName;
-#if defined(TARGET_ANDROID)
-  libraryName = element->Attribute("library_android");
-#elif defined(TARGET_LINUX) || defined(TARGET_FREEBSD)
-#if defined(TARGET_FREEBSD)
-  libraryName = element->Attribute("library_freebsd");
-  if (libraryName == nullptr)
-#elif defined(TARGET_RASPBERRY_PI)
-  libraryName = element->Attribute("library_rbpi");
-  if (libraryName == nullptr)
-#endif
-  libraryName = element->Attribute("library_linux");
-#elif defined(TARGET_WINDOWS_DESKTOP)
-  libraryName = element->Attribute("library_windx");
-  if (libraryName == nullptr)
-    libraryName = element->Attribute("library_windows");
-#elif defined(TARGET_WINDOWS_STORE)
-  libraryName = element->Attribute("library_windowsstore");
-#elif defined(TARGET_DARWIN)
-#if defined(TARGET_DARWIN_EMBEDDED)
-  libraryName = element->Attribute("library_darwin_embedded");
-#else
-  libraryName = element->Attribute("library_osx");
-#endif
-#endif
-
-  return libraryName;
-}
-
-void CBinaryAddonType::SetProvides(const std::string &content)
-{
-  if (!content.empty())
-  {
-    for (auto provide : StringUtils::Split(content, ' '))
-    {
-      TYPE content = CAddonInfo::TranslateSubContent(provide);
-      if (content != ADDON_UNKNOWN)
-        m_providedSubContent.insert(content);
-    }
-  }
-}
diff --git a/xbmc/addons/binary-addons/BinaryAddonType.h b/xbmc/addons/binary-addons/BinaryAddonType.h
deleted file mode 100644
index ee2dd25f3c18..000000000000
--- a/xbmc/addons/binary-addons/BinaryAddonType.h
+++ /dev/null
@@ -1,59 +0,0 @@
-/*
- *  Copyright (C) 2005-2018 Team Kodi
- *  This file is part of Kodi - https://kodi.tv
- *
- *  SPDX-License-Identifier: GPL-2.0-or-later
- *  See LICENSES/README.md for more information.
- */
-
-#pragma once
-
-#include "BinaryAddonExtensions.h"
-#include "addons/addoninfo/AddonInfo.h"
-
-#include <set>
-#include <string>
-
-class TiXmlElement;
-
-namespace ADDON
-{
-
-  class CBinaryAddonBase;
-
-  class CBinaryAddonType : public CBinaryAddonExtensions
-  {
-  public:
-    CBinaryAddonType(TYPE type, CBinaryAddonBase* info, const TiXmlElement* child);
-
-    TYPE Type() const { return m_type; }
-    std::string LibPath() const;
-    const std::string& LibName() const { return m_libname; }
-
-    bool ProvidesSubContent(const TYPE& content) const
-    {
-      return content == ADDON_UNKNOWN ? false : m_type == content || m_providedSubContent.count(content) > 0;
-    }
-
-    bool ProvidesSeveralSubContents() const
-    {
-      return m_providedSubContent.size() > 1;
-    }
-
-    size_t ProvidedSubContents() const
-    {
-      return m_providedSubContent.size();
-    }
-
-    static const char* GetPlatformLibraryName(const TiXmlElement* element);
-
-  private:
-    void SetProvides(const std::string &content);
-
-    TYPE m_type;
-    std::string m_path;
-    std::string m_libname;
-    std::set<TYPE> m_providedSubContent;
-  };
-
-} /* namespace ADDON */
diff --git a/xbmc/addons/binary-addons/CMakeLists.txt b/xbmc/addons/binary-addons/CMakeLists.txt
index 613adbf6ec12..33a72ce6b6a1 100644
--- a/xbmc/addons/binary-addons/CMakeLists.txt
+++ b/xbmc/addons/binary-addons/CMakeLists.txt
@@ -1,16 +1,12 @@
 set(SOURCES BinaryAddonManager.cpp
             AddonDll.cpp
             AddonInstanceHandler.cpp
-            BinaryAddonBase.cpp
-            BinaryAddonExtensions.cpp
-            BinaryAddonType.cpp)
+            BinaryAddonBase.cpp)
 
 set(HEADERS BinaryAddonManager.h
             AddonDll.h
             AddonInstanceHandler.h
             BinaryAddonBase.h
-            BinaryAddonExtensions.h
-            BinaryAddonType.h
             DllAddon.h)
 
 core_add_library(addons_binary-addons)

From d11ff62382097f4c67d7f8e87f4f399b905bf7c4 Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Tue, 6 Aug 2019 23:52:02 +0200
Subject: [PATCH 3/3] [addons] move CBinaryAddonBase functions from *.h to
 *.cpp

---
 xbmc/addons/binary-addons/BinaryAddonBase.cpp | 90 +++++++++++++++++++
 xbmc/addons/binary-addons/BinaryAddonBase.h   | 44 ++++-----
 2 files changed, 112 insertions(+), 22 deletions(-)

diff --git a/xbmc/addons/binary-addons/BinaryAddonBase.cpp b/xbmc/addons/binary-addons/BinaryAddonBase.cpp
index 2543673dd103..a77ef5c3fa82 100644
--- a/xbmc/addons/binary-addons/BinaryAddonBase.cpp
+++ b/xbmc/addons/binary-addons/BinaryAddonBase.cpp
@@ -17,6 +17,96 @@
 
 using namespace ADDON;
 
+const std::string& CBinaryAddonBase::ID() const
+{
+  return m_addonInfo->ID();
+}
+
+const std::string& CBinaryAddonBase::Path() const
+{
+  return m_addonInfo->Path();
+}
+
+TYPE CBinaryAddonBase::MainType() const
+{
+  return m_addonInfo->MainType();
+}
+
+const std::string& CBinaryAddonBase::MainLibName() const
+{
+  return m_addonInfo->LibName();
+}
+
+bool CBinaryAddonBase::IsType(TYPE type) const
+{
+  return m_addonInfo->IsType(type);
+}
+
+const std::vector<CAddonType>& CBinaryAddonBase::Types() const
+{
+  return m_addonInfo->Types();
+}
+
+const CAddonType* CBinaryAddonBase::Type(TYPE type) const
+{
+  return m_addonInfo->Type(type);
+}
+
+const AddonVersion& CBinaryAddonBase::Version() const
+{
+  return m_addonInfo->Version();
+}
+
+const AddonVersion& CBinaryAddonBase::MinVersion() const
+{
+  return m_addonInfo->MinVersion();
+}
+
+const std::string& CBinaryAddonBase::Name() const
+{
+  return m_addonInfo->Name();
+}
+
+const std::string& CBinaryAddonBase::Summary() const
+{
+  return m_addonInfo->Summary();
+}
+
+const std::string& CBinaryAddonBase::Description() const
+{
+  return m_addonInfo->Description();
+}
+
+const std::string& CBinaryAddonBase::Author() const
+{
+  return m_addonInfo->Author();
+}
+
+const std::string& CBinaryAddonBase::ChangeLog() const
+{
+  return m_addonInfo->ChangeLog();
+}
+
+const std::string& CBinaryAddonBase::Icon() const
+{
+  return m_addonInfo->Icon();
+}
+
+const ArtMap& CBinaryAddonBase::Art() const
+{
+  return m_addonInfo->Art();
+}
+
+const std::string& CBinaryAddonBase::Disclaimer() const
+{
+  return m_addonInfo->Disclaimer();
+}
+
+bool CBinaryAddonBase::MeetsVersion(const AddonVersion& version) const
+{
+  return m_addonInfo->MeetsVersion(version);
+}
+
 AddonDllPtr CBinaryAddonBase::GetAddon(const IAddonInstanceHandler* handler)
 {
   if (handler == nullptr)
diff --git a/xbmc/addons/binary-addons/BinaryAddonBase.h b/xbmc/addons/binary-addons/BinaryAddonBase.h
index 20a09ca44237..5a90f752f966 100644
--- a/xbmc/addons/binary-addons/BinaryAddonBase.h
+++ b/xbmc/addons/binary-addons/BinaryAddonBase.h
@@ -29,28 +29,28 @@ namespace ADDON
   public:
     explicit CBinaryAddonBase(const AddonInfoPtr& addonInfo) : m_addonInfo(addonInfo) { }
 
-    const std::string& ID() const { return m_addonInfo->ID(); }
-    const std::string& Path() const { return m_addonInfo->Path(); }
-
-    TYPE MainType() const { return m_addonInfo->MainType(); }
-    const std::string& MainLibName() const { return m_addonInfo->LibName(); }
-
-    bool IsType(TYPE type) const { return m_addonInfo->IsType(type); }
-    const std::vector<CAddonType>& Types() const { return m_addonInfo->Types(); }
-    const CAddonType* Type(TYPE type) const { return m_addonInfo->Type(type); }
-
-    const AddonVersion& Version() const { return m_addonInfo->Version(); }
-    const AddonVersion& MinVersion() const { return m_addonInfo->MinVersion(); }
-    const std::string& Name() const { return m_addonInfo->Name(); }
-    const std::string& Summary() const { return m_addonInfo->Summary(); }
-    const std::string& Description() const { return m_addonInfo->Description(); }
-    const std::string& Author() const { return m_addonInfo->Author(); }
-    const std::string& ChangeLog() const { return m_addonInfo->ChangeLog(); }
-    const std::string& Icon() const { return m_addonInfo->Icon(); }
-    const ArtMap& Art() const { return m_addonInfo->Art(); }
-    const std::string& Disclaimer() const { return m_addonInfo->Disclaimer(); }
-
-    bool MeetsVersion(const AddonVersion& version) const { return m_addonInfo->MeetsVersion(version); }
+    const std::string& ID() const;
+    const std::string& Path() const;
+
+    TYPE MainType() const;
+    const std::string& MainLibName() const;
+
+    bool IsType(TYPE type) const;
+    const std::vector<CAddonType>& Types() const;
+    const CAddonType* Type(TYPE type) const;
+
+    const AddonVersion& Version() const;
+    const AddonVersion& MinVersion() const;
+    const std::string& Name() const;
+    const std::string& Summary() const;
+    const std::string& Description() const;
+    const std::string& Author() const;
+    const std::string& ChangeLog() const;
+    const std::string& Icon() const;
+    const ArtMap& Art() const;
+    const std::string& Disclaimer() const;
+
+    bool MeetsVersion(const AddonVersion& version) const;
 
     AddonDllPtr GetAddon(const IAddonInstanceHandler* handler);
     void ReleaseAddon(const IAddonInstanceHandler* handler);
