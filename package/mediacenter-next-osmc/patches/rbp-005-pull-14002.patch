From f39f6d4e73f7ee608784c862c4c785578f90a498 Mon Sep 17 00:00:00 2001
From: Kai Sommerfeld <kai.sommerfeld@gmx.com>
Date: Fri, 8 Jun 2018 13:52:47 +0200
Subject: [PATCH] [PVR] Addon API 5.10.0: New API function
 GetStreamReadChunkSize.

---
 xbmc/addons/PVRClient.cpp                            |  7 +++++++
 xbmc/addons/PVRClient.h                              |  7 +++++++
 .../kodi-addon-dev-kit/include/kodi/versions.h       |  4 ++--
 .../kodi-addon-dev-kit/include/kodi/xbmc_pvr_dll.h   | 14 ++++++++++++++
 .../kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h |  1 +
 .../DVDInputStreams/DVDInputStreamPVRManager.cpp     |  5 +++++
 .../DVDInputStreams/DVDInputStreamPVRManager.h       |  1 +
 xbmc/pvr/addons/PVRClients.cpp                       | 20 ++++++++++++++++++++
 xbmc/pvr/addons/PVRClients.h                         |  7 +++++++
 9 files changed, 64 insertions(+), 2 deletions(-)

diff --git a/xbmc/addons/PVRClient.cpp b/xbmc/addons/PVRClient.cpp
index f800c6df5a86..47f40ab87730 100644
--- a/xbmc/addons/PVRClient.cpp
+++ b/xbmc/addons/PVRClient.cpp
@@ -1024,6 +1024,13 @@ PVR_ERROR CPVRClient::GetTimerTypes(CPVRTimerTypes& results) const
   return PVR_ERROR_NO_ERROR;
 }
 
+PVR_ERROR CPVRClient::GetStreamReadChunkSize(int& iChunkSize)
+{
+  return DoAddonCall(__FUNCTION__, [&iChunkSize](const AddonInstance* addon) {
+    return addon->GetStreamReadChunkSize(&iChunkSize);
+  }, m_clientCapabilities.SupportsRecordings() || m_clientCapabilities.HandlesInputStream());
+}
+
 PVR_ERROR CPVRClient::ReadLiveStream(void* lpBuf, int64_t uiBufSize, int &iRead)
 {
   iRead = -1;
diff --git a/xbmc/addons/PVRClient.h b/xbmc/addons/PVRClient.h
index 9aff246e6dec..864b651b2cb0 100644
--- a/xbmc/addons/PVRClient.h
+++ b/xbmc/addons/PVRClient.h
@@ -857,6 +857,13 @@ namespace PVR
      */
     void SetPriority(int iPriority);
 
+    /*!
+     * @brief Obtain the chunk size to use when reading streams.
+     * @param iChunkSize the chunk size in bytes.
+     * @return PVR_ERROR_NO_ERROR on success, respective error code otherwise.
+     */
+    PVR_ERROR GetStreamReadChunkSize(int &iChunkSize);
+
     /*!
      * @brief Get the interface table used between addon and Kodi.
      * @todo This function will be removed after old callback library system is removed.
diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h
index 042b1932affa..d140e3981ed0 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/versions.h
@@ -109,8 +109,8 @@
 #define ADDON_INSTANCE_VERSION_PERIPHERAL_DEPENDS     "addon-instance/Peripheral.h" \
                                                       "addon-instance/PeripheralUtils.h"
 
-#define ADDON_INSTANCE_VERSION_PVR                    "5.9.0"
-#define ADDON_INSTANCE_VERSION_PVR_MIN                "5.9.0"
+#define ADDON_INSTANCE_VERSION_PVR                    "5.10.0"
+#define ADDON_INSTANCE_VERSION_PVR_MIN                "5.10.0"
 #define ADDON_INSTANCE_VERSION_PVR_XML_ID             "kodi.binary.instance.pvr"
 #define ADDON_INSTANCE_VERSION_PVR_DEPENDS            "xbmc_pvr_dll.h" \
                                                       "xbmc_pvr_types.h" \
diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_dll.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_dll.h
index 87e837853310..b5bb55f99e42 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_dll.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_dll.h
@@ -519,6 +519,17 @@ extern "C"
    *  @remarks This will only be used if the backend doesn't provide a direct URL in the recording tag.
    */
   //@{
+  /*!
+   * Obtain the chunk size to use when reading streams.
+   * @param chunksize must be filled with the chunk size in bytes.
+   * @return PVR_ERROR_NO_ERROR if the chunk size has been fetched successfully.
+   * @remarks Optional, and only used if not reading from demuxer (=> DemuxRead) and
+   *          PVR_ADDON_CAPABILITIES::bSupportsRecordings is true (=> ReadRecordedStream) or
+   *          PVR_ADDON_CAPABILITIES::bHandlesInputStream is true (=> ReadLiveStream).
+   *          Return PVR_ERROR_NOT_IMPLEMENTED if this add-on won't provide this function. In this case Kodi will decide on the chunk size to use.
+   */
+  PVR_ERROR GetStreamReadChunkSize(int* chunksize);
+
   /*!
    * Open a stream to a recording on the backend.
    * @param recording The recording to open.
@@ -561,6 +572,7 @@ extern "C"
    *          Return -1 if this add-on won't provide this function.
    */
   long long LengthRecordedStream(void);
+
   //@}
 
   /** @name PVR demultiplexer methods
@@ -773,5 +785,7 @@ extern "C"
     pClient->toAddon.OnPowerSavingActivated         = OnPowerSavingActivated;
     pClient->toAddon.OnPowerSavingDeactivated       = OnPowerSavingDeactivated;
     pClient->toAddon.GetStreamTimes                 = GetStreamTimes;
+
+    pClient->toAddon.GetStreamReadChunkSize         = GetStreamReadChunkSize;
   };
 };
diff --git a/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h b/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h
index 527027a3cfd2..ca2cdc7aa5fb 100644
--- a/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h
+++ b/xbmc/addons/kodi-addon-dev-kit/include/kodi/xbmc_pvr_types.h
@@ -706,6 +706,7 @@ extern "C" {
     void (__cdecl* OnPowerSavingActivated)(void);
     void (__cdecl* OnPowerSavingDeactivated)(void);
     PVR_ERROR (__cdecl* GetStreamTimes)(PVR_STREAM_TIMES*);
+    PVR_ERROR (__cdecl* GetStreamReadChunkSize)(int*);
   } KodiToAddonFuncTable_PVR;
 
   typedef struct AddonInstance_PVR
diff --git a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamPVRManager.cpp b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamPVRManager.cpp
index 41f8691e6598..9d042d4368ae 100644
--- a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamPVRManager.cpp
+++ b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamPVRManager.cpp
@@ -195,6 +195,11 @@ int64_t CDVDInputStreamPVRManager::GetLength()
   return CServiceBroker::GetPVRManager().Clients()->GetStreamLength();
 }
 
+int CDVDInputStreamPVRManager::GetBlockSize()
+{
+  return CServiceBroker::GetPVRManager().Clients()->GetStreamReadChunkSize(m_item);
+}
+
 bool CDVDInputStreamPVRManager::GetTimes(Times &times)
 {
   PVR_STREAM_TIMES streamTimes;
diff --git a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamPVRManager.h b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamPVRManager.h
index 45a2bdc6ebf3..5c1f4f7a39df 100644
--- a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamPVRManager.h
+++ b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamPVRManager.h
@@ -53,6 +53,7 @@ class CDVDInputStreamPVRManager
   bool Pause(double dTime) override { return false; }
   bool IsEOF() override;
   int64_t GetLength() override;
+  int GetBlockSize() override;
 
   ENextStream NextStream() override;
   bool IsRealtime() override;
diff --git a/xbmc/pvr/addons/PVRClients.cpp b/xbmc/pvr/addons/PVRClients.cpp
index 9606f42a27e1..76e1d5da4ca3 100644
--- a/xbmc/pvr/addons/PVRClients.cpp
+++ b/xbmc/pvr/addons/PVRClients.cpp
@@ -559,6 +559,26 @@ std::string CPVRClients::GetBackendHostnameByClientId(int iClientId) const
   return name;
 }
 
+int CPVRClients::GetStreamReadChunkSize(const CFileItem &item)
+{
+  int iChunkSize = 0;
+  int iClientID = PVR_INVALID_CLIENT_ID;
+
+  if (item.HasPVRChannelInfoTag())
+    iClientID = item.GetPVRChannelInfoTag()->ClientID();
+  else if (item.HasPVRRecordingInfoTag())
+    iClientID = item.GetPVRRecordingInfoTag()->m_iClientId;
+
+  if (iClientID != PVR_INVALID_CLIENT_ID)
+  {
+    ForCreatedClient(__FUNCTION__, iClientID, [&iChunkSize](const CPVRClientPtr &client) {
+      return client->GetStreamReadChunkSize(iChunkSize);
+    });
+  }
+
+  return iChunkSize;
+}
+
 bool CPVRClients::OpenStream(const CPVRChannelPtr &channel)
 {
   CloseStream();
diff --git a/xbmc/pvr/addons/PVRClients.h b/xbmc/pvr/addons/PVRClients.h
index 952c5ffdef14..debba3204bf9 100644
--- a/xbmc/pvr/addons/PVRClients.h
+++ b/xbmc/pvr/addons/PVRClients.h
@@ -273,6 +273,13 @@ namespace PVR
      */
     void CloseStream(void);
 
+    /*!
+     * @brief Return the read chunk size to use when playing a stream.
+     * @param item The item providing the stream (channel or recording).
+     * @return The chunk size in bytes or 0 in case of an error.
+     */
+    int GetStreamReadChunkSize(const CFileItem &item);
+
     /*!
      * @brief Read from an open stream.
      * @param lpBuf Target buffer.
