From 4c136dbc5b79c25ec0cbb0fe304c8e6ff0639ce8 Mon Sep 17 00:00:00 2001
From: xLAva <jochen.leopold@model-view.com>
Date: Sun, 6 May 2018 13:23:46 +0200
Subject: [PATCH] Use DBus to delay the triggered system poweroff so that Kodi
 can shutdown completely.

---
 .../powermanagement/LogindUPowerSyscall.cpp   | 70 +++++++++++++------
 .../powermanagement/LogindUPowerSyscall.h     | 11 ++-
 2 files changed, 55 insertions(+), 26 deletions(-)

diff --git a/xbmc/platform/linux/powermanagement/LogindUPowerSyscall.cpp b/xbmc/platform/linux/powermanagement/LogindUPowerSyscall.cpp
index 3f1c6438ce94..120429ecee65 100644
--- a/xbmc/platform/linux/powermanagement/LogindUPowerSyscall.cpp
+++ b/xbmc/platform/linux/powermanagement/LogindUPowerSyscall.cpp
@@ -25,7 +25,6 @@
 
 CLogindUPowerSyscall::CLogindUPowerSyscall()
 {
-  m_delayLockFd = -1;
   m_lowBattery = false;
 
   CLog::Log(LOGINFO, "Selected Logind/UPower as PowerSyscall");
@@ -42,7 +41,7 @@ CLogindUPowerSyscall::CLogindUPowerSyscall()
   m_canHibernate = LogindCheckCapability("CanHibernate");
   m_canSuspend   = LogindCheckCapability("CanSuspend");
 
-  InhibitDelayLock();
+  InhibitDelayLockSleep();
 
   m_batteryLevel = 0;
   if (m_hasUPower)
@@ -71,11 +70,14 @@ CLogindUPowerSyscall::CLogindUPowerSyscall()
 
 CLogindUPowerSyscall::~CLogindUPowerSyscall()
 {
-  ReleaseDelayLock();
+  ReleaseDelayLockSleep();
+  ReleaseDelayLockShutdown();
 }
 
 bool CLogindUPowerSyscall::Powerdown()
 {
+  // delay shutdown so that the app can close properly
+  InhibitDelayLockShutdown();
   return LogindSetPowerState("PowerOff");
 }
 
@@ -194,7 +196,7 @@ void CLogindUPowerSyscall::UpdateBatteryLevel()
 bool CLogindUPowerSyscall::PumpPowerEvents(IPowerEventsCallback *callback)
 {
   bool result = false;
-  bool releaseLock = false;
+  bool releaseLockSleep = false;
 
   if (m_connection)
   {
@@ -212,12 +214,12 @@ bool CLogindUPowerSyscall::PumpPowerEvents(IPowerEventsCallback *callback)
         if (arg)
         {
           callback->OnSleep();
-          releaseLock = true;
+          releaseLockSleep = true;
         }
         else
         {
           callback->OnWake();
-          InhibitDelayLock();
+          InhibitDelayLockSleep();
         }
 
         result = true;
@@ -236,17 +238,27 @@ bool CLogindUPowerSyscall::PumpPowerEvents(IPowerEventsCallback *callback)
     }
   }
 
-  if (releaseLock)
-    ReleaseDelayLock();
+  if (releaseLockSleep)
+    ReleaseDelayLockSleep();
 
   return result;
 }
 
-void CLogindUPowerSyscall::InhibitDelayLock()
+void CLogindUPowerSyscall::InhibitDelayLockSleep()
+{
+  m_delayLockSleepFd = InhibitDelayLock("sleep");
+}
+
+void CLogindUPowerSyscall::InhibitDelayLockShutdown()
+{
+  m_delayLockShutdownFd = InhibitDelayLock("shutdown");
+}
+
+int CLogindUPowerSyscall::InhibitDelayLock(const char *what)
 {
 #ifdef DBUS_TYPE_UNIX_FD
   CDBusMessage message("org.freedesktop.login1", "/org/freedesktop/login1", "org.freedesktop.login1.Manager", "Inhibit");
-  message.AppendArgument("sleep"); // what to inhibit
+  message.AppendArgument(what); // what to inhibit
   message.AppendArgument("XBMC"); // who
   message.AppendArgument(""); // reason
   message.AppendArgument("delay"); // mode
@@ -255,30 +267,42 @@ void CLogindUPowerSyscall::InhibitDelayLock()
 
   if (!reply)
   {
-    CLog::Log(LOGWARNING, "LogindUPowerSyscall - failed to inhibit sleep delay lock");
-    m_delayLockFd = -1;
-    return;
+    CLog::Log(LOGWARNING, "LogindUPowerSyscall - failed to inhibit %s delay lock", what);
+    return -1;
   }
 
-  if (!dbus_message_get_args(reply, NULL, DBUS_TYPE_UNIX_FD, &m_delayLockFd, DBUS_TYPE_INVALID))
+  int delayLockFd;
+  if (!dbus_message_get_args(reply, NULL, DBUS_TYPE_UNIX_FD, &delayLockFd, DBUS_TYPE_INVALID))
   {
     CLog::Log(LOGWARNING, "LogindUPowerSyscall - failed to get inhibit file descriptor");
-    m_delayLockFd = -1;
-    return;
+    return -1;
   }
 
-    CLog::Log(LOGDEBUG, "LogindUPowerSyscall - inhibit lock taken, fd %i", m_delayLockFd);
+  CLog::Log(LOGDEBUG, "LogindUPowerSyscall - inhibit lock taken, fd %i", delayLockFd);
+  return delayLockFd;
 #else
-    CLog::Log(LOGWARNING, "LogindUPowerSyscall - inhibit lock support not compiled in");
+  CLog::Log(LOGWARNING, "LogindUPowerSyscall - inhibit lock support not compiled in");
+  return -1;
 #endif
 }
 
-void CLogindUPowerSyscall::ReleaseDelayLock()
+void CLogindUPowerSyscall::ReleaseDelayLockSleep()
+{
+  ReleaseDelayLock(m_delayLockSleepFd, "sleep");
+  m_delayLockSleepFd = -1;
+}
+
+void CLogindUPowerSyscall::ReleaseDelayLockShutdown()
+{
+  ReleaseDelayLock(m_delayLockShutdownFd, "shutdown");
+  m_delayLockShutdownFd = -1;
+}
+
+void CLogindUPowerSyscall::ReleaseDelayLock(int lockFd, const char *what)
 {
-  if (m_delayLockFd != -1)
+  if (lockFd != -1)
   {
-    close(m_delayLockFd);
-    m_delayLockFd = -1;
-    CLog::Log(LOGDEBUG, "LogindUPowerSyscall - delay lock released");
+    close(lockFd);
+    CLog::Log(LOGDEBUG, "LogindUPowerSyscall - delay lock %s released", what);
   }
 }
diff --git a/xbmc/platform/linux/powermanagement/LogindUPowerSyscall.h b/xbmc/platform/linux/powermanagement/LogindUPowerSyscall.h
index 89c4ba19ff94..28fea29df2af 100644
--- a/xbmc/platform/linux/powermanagement/LogindUPowerSyscall.h
+++ b/xbmc/platform/linux/powermanagement/LogindUPowerSyscall.h
@@ -38,10 +38,15 @@ class CLogindUPowerSyscall : public CAbstractPowerSyscall
   bool m_hasUPower;
   bool m_lowBattery;
   int m_batteryLevel;
-  int m_delayLockFd; // file descriptor for the logind sleep delay lock
+  int m_delayLockSleepFd = -1; // file descriptor for the logind sleep delay lock
+  int m_delayLockShutdownFd = -1; // file descriptor for the logind powerdown delay lock
   void UpdateBatteryLevel();
-  void InhibitDelayLock();
-  void ReleaseDelayLock();
+  void InhibitDelayLockSleep();
+  void InhibitDelayLockShutdown();  
+  int InhibitDelayLock(const char *what);
+  void ReleaseDelayLockSleep();
+  void ReleaseDelayLockShutdown();
+  void ReleaseDelayLock(int lockFd, const char *what);
   static bool LogindSetPowerState(const char *state);
   static bool LogindCheckCapability(const char *capability);
 };
