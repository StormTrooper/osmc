From 2d7dd2b3474feed07dd8513b642eaa19e958729e Mon Sep 17 00:00:00 2001
From: Rechi <Rechi@users.noreply.github.com>
Date: Mon, 16 Jul 2018 07:00:00 +0200
Subject: [PATCH 1/3] [threads] remove const constructor from CSharedLock

---
 xbmc/guilib/LocalizeStrings.h       | 2 +-
 xbmc/settings/lib/Setting.h         | 2 +-
 xbmc/settings/lib/SettingsManager.h | 4 ++--
 xbmc/threads/SharedSection.h        | 1 -
 4 files changed, 4 insertions(+), 5 deletions(-)

diff --git a/xbmc/guilib/LocalizeStrings.h b/xbmc/guilib/LocalizeStrings.h
index 93931e0e7946..fc60e97011f7 100644
--- a/xbmc/guilib/LocalizeStrings.h
+++ b/xbmc/guilib/LocalizeStrings.h
@@ -73,7 +73,7 @@ class CLocalizeStrings : public ILocalizer
   typedef std::map<uint32_t, LocStr>::const_iterator ciStrings;
   typedef std::map<uint32_t, LocStr>::iterator       iStrings;
 
-  CSharedSection m_stringsMutex;
+  mutable CSharedSection m_stringsMutex;
   CSharedSection m_addonStringsMutex;
 };
 
diff --git a/xbmc/settings/lib/Setting.h b/xbmc/settings/lib/Setting.h
index d6b152698ac6..33ec098480d8 100644
--- a/xbmc/settings/lib/Setting.h
+++ b/xbmc/settings/lib/Setting.h
@@ -117,7 +117,7 @@ class CSetting : public ISetting,
   SettingDependencies m_dependencies;
   std::set<CSettingUpdate> m_updates;
   bool m_changed = false;
-  CSharedSection m_critical;
+  mutable CSharedSection m_critical;
 };
 
 template<typename TValue, SettingType TSettingType>
diff --git a/xbmc/settings/lib/SettingsManager.h b/xbmc/settings/lib/SettingsManager.h
index 0fb49f4f0935..2c29b81dfb61 100644
--- a/xbmc/settings/lib/SettingsManager.h
+++ b/xbmc/settings/lib/SettingsManager.h
@@ -547,6 +547,6 @@ class CSettingsManager : public ISettingCreator, public ISettingControlCreator,
   using SettingOptionsFillerMap = std::map<std::string, SettingOptionsFiller>;
   SettingOptionsFillerMap m_optionsFillers;
 
-  CSharedSection m_critical;
-  CSharedSection m_settingsCritical;
+  mutable CSharedSection m_critical;
+  mutable CSharedSection m_settingsCritical;
 };
diff --git a/xbmc/threads/SharedSection.h b/xbmc/threads/SharedSection.h
index d04b8fe3e65c..27e8d13da11d 100644
--- a/xbmc/threads/SharedSection.h
+++ b/xbmc/threads/SharedSection.h
@@ -51,7 +51,6 @@ class CSharedLock : public XbmcThreads::SharedLock<CSharedSection>
 {
 public:
   inline explicit CSharedLock(CSharedSection& cs) : XbmcThreads::SharedLock<CSharedSection>(cs) {}
-  inline explicit CSharedLock(const CSharedSection& cs) : XbmcThreads::SharedLock<CSharedSection>((CSharedSection&)cs) {}
 
   inline bool IsOwner() const { return owns_lock(); }
   inline void Enter() { lock(); }

From 9313a9e3274b44ed223475314caae0d304d9cec9 Mon Sep 17 00:00:00 2001
From: Rechi <Rechi@users.noreply.github.com>
Date: Mon, 16 Jul 2018 07:00:00 +0200
Subject: [PATCH 2/3] [threads] remove const constructor from CExclusiveLock

---
 xbmc/threads/SharedSection.h | 1 -
 1 file changed, 1 deletion(-)

diff --git a/xbmc/threads/SharedSection.h b/xbmc/threads/SharedSection.h
index 27e8d13da11d..b10179f3db68 100644
--- a/xbmc/threads/SharedSection.h
+++ b/xbmc/threads/SharedSection.h
@@ -61,7 +61,6 @@ class CExclusiveLock : public XbmcThreads::UniqueLock<CSharedSection>
 {
 public:
   inline explicit CExclusiveLock(CSharedSection& cs) : XbmcThreads::UniqueLock<CSharedSection>(cs) {}
-  inline explicit CExclusiveLock(const CSharedSection& cs) : XbmcThreads::UniqueLock<CSharedSection> ((CSharedSection&)cs) {}
 
   inline bool IsOwner() const { return owns_lock(); }
   inline void Leave() { unlock(); }

From 45ea34a89955813ef099edc5eab38afc81e0a8c5 Mon Sep 17 00:00:00 2001
From: Rechi <Rechi@users.noreply.github.com>
Date: Mon, 16 Jul 2018 07:00:00 +0200
Subject: [PATCH 3/3] [threads] remove const constructor from CSingleLock

---
 xbmc/Application.h                                     | 2 +-
 xbmc/ApplicationPlayer.h                               | 2 +-
 xbmc/ContextMenuManager.h                              | 2 +-
 xbmc/FileItem.h                                        | 2 +-
 xbmc/addons/AddonInstaller.h                           | 2 +-
 xbmc/addons/AddonManager.h                             | 2 +-
 xbmc/addons/PVRClient.h                                | 2 +-
 xbmc/addons/binary-addons/BinaryAddonManager.h         | 2 +-
 xbmc/cores/RetroPlayer/buffers/BaseRenderBufferPool.h  | 2 +-
 xbmc/cores/RetroPlayer/buffers/RenderBufferManager.h   | 2 +-
 xbmc/cores/RetroPlayer/guibridge/GUIGameSettings.h     | 2 +-
 xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.h | 2 +-
 xbmc/cores/VideoPlayer/VideoPlayer.h                   | 4 ++--
 xbmc/cores/VideoPlayer/VideoPlayerAudio.h              | 2 +-
 xbmc/cores/VideoPlayer/VideoReferenceClock.h           | 2 +-
 xbmc/cores/VideoPlayer/VideoRenderers/RenderManager.h  | 2 +-
 xbmc/cores/omxplayer/OMXAudio.h                        | 2 +-
 xbmc/cores/playercorefactory/PlayerCoreFactory.h       | 2 +-
 xbmc/dialogs/GUIDialogExtendedProgressBar.h            | 2 +-
 xbmc/dialogs/GUIDialogVolumeBar.h                      | 2 +-
 xbmc/events/EventLog.h                                 | 2 +-
 xbmc/favourites/FavouritesService.h                    | 2 +-
 xbmc/filesystem/DirectoryCache.h                       | 2 +-
 xbmc/guilib/GUIWindow.cpp                              | 2 +-
 xbmc/interfaces/generic/ScriptInvocationManager.h      | 2 +-
 xbmc/interfaces/python/pythreadstate.h                 | 2 +-
 xbmc/listproviders/DirectoryProvider.h                 | 2 +-
 xbmc/network/WebServer.h                               | 2 +-
 xbmc/network/upnp/UPnPSettings.h                       | 2 +-
 xbmc/peripherals/EventScanner.h                        | 2 +-
 xbmc/peripherals/Peripherals.h                         | 4 ++--
 xbmc/peripherals/addons/AddonButtonMap.h               | 2 +-
 xbmc/peripherals/addons/PeripheralAddon.h              | 2 +-
 xbmc/peripherals/bus/PeripheralBus.h                   | 2 +-
 xbmc/peripherals/devices/PeripheralCecAdapter.h        | 2 +-
 xbmc/peripherals/dialogs/GUIDialogPeripherals.h        | 2 +-
 xbmc/profiles/ProfilesManager.h                        | 2 +-
 xbmc/pvr/PVRChannelNumberInputHandler.h                | 2 +-
 xbmc/pvr/PVRGUIActions.h                               | 2 +-
 xbmc/pvr/PVRGUIChannelNavigator.h                      | 2 +-
 xbmc/pvr/PVRGUIInfo.h                                  | 2 +-
 xbmc/pvr/PVRGUITimerInfo.h                             | 2 +-
 xbmc/pvr/PVRManager.h                                  | 4 ++--
 xbmc/pvr/PVRSettings.h                                 | 2 +-
 xbmc/pvr/addons/PVRClients.h                           | 2 +-
 xbmc/pvr/channels/PVRChannel.h                         | 2 +-
 xbmc/pvr/channels/PVRChannelGroup.h                    | 2 +-
 xbmc/pvr/channels/PVRChannelGroups.h                   | 2 +-
 xbmc/pvr/epg/Epg.h                                     | 2 +-
 xbmc/pvr/epg/EpgContainer.h                            | 2 +-
 xbmc/pvr/epg/EpgInfoTag.h                              | 2 +-
 xbmc/pvr/recordings/PVRRecordings.h                    | 2 +-
 xbmc/pvr/timers/PVRTimerInfoTag.h                      | 2 +-
 xbmc/pvr/timers/PVRTimers.h                            | 2 +-
 xbmc/pvr/windows/GUIEPGGridContainer.h                 | 2 +-
 xbmc/settings/DisplaySettings.h                        | 2 +-
 xbmc/settings/MediaSettings.h                          | 2 +-
 xbmc/settings/SettingsBase.h                           | 2 +-
 xbmc/threads/SingleLock.h                              | 1 -
 xbmc/utils/JobManager.h                                | 4 ++--
 xbmc/utils/Observer.h                                  | 2 +-
 xbmc/view/ViewStateSettings.h                          | 2 +-
 xbmc/windowing/wayland/Output.h                        | 4 ++--
 xbmc/windowing/wayland/SeatSelection.h                 | 2 +-
 64 files changed, 68 insertions(+), 69 deletions(-)

diff --git a/xbmc/Application.h b/xbmc/Application.h
index bb4f2a8defd7..c0b1e3f37d2a 100644
--- a/xbmc/Application.h
+++ b/xbmc/Application.h
@@ -499,7 +499,7 @@ friend class CAppInboundProtocol;
   std::vector<std::string> m_incompatibleAddons;  /*!< Result of addon migration */
 
 private:
-  CCriticalSection m_critSection;                 /*!< critical section for all changes to this class, except for changes to triggers */
+  mutable CCriticalSection m_critSection; /*!< critical section for all changes to this class, except for changes to triggers */
 
   CCriticalSection m_frameMoveGuard;              /*!< critical section for synchronizing GUI actions from inside and outside (python) */
   std::atomic_uint m_WaitingExternalCalls;        /*!< counts threads wich are waiting to be processed in FrameMove */
diff --git a/xbmc/ApplicationPlayer.h b/xbmc/ApplicationPlayer.h
index 396bea83cd81..712096f46d11 100644
--- a/xbmc/ApplicationPlayer.h
+++ b/xbmc/ApplicationPlayer.h
@@ -168,7 +168,7 @@ class CApplicationPlayer
   void CloseFile(bool reopen = false);
 
   std::shared_ptr<IPlayer> m_pPlayer;
-  CCriticalSection m_playerLock;
+  mutable CCriticalSection m_playerLock;
   CSeekHandler m_seekHandler;
 
   // cache player state
diff --git a/xbmc/ContextMenuManager.h b/xbmc/ContextMenuManager.h
index 62022097eae5..4c9ad1a05536 100644
--- a/xbmc/ContextMenuManager.h
+++ b/xbmc/ContextMenuManager.h
@@ -60,7 +60,7 @@ class CContextMenuManager
 
   ADDON::CAddonMgr& m_addonMgr;
 
-  CCriticalSection m_criticalSection;
+  mutable CCriticalSection m_criticalSection;
   std::vector<CContextMenuItem> m_addonItems;
   std::vector<std::shared_ptr<IContextMenuItem>> m_items;
 };
diff --git a/xbmc/FileItem.h b/xbmc/FileItem.h
index 0212cda13a70..88d9a9ac7574 100644
--- a/xbmc/FileItem.h
+++ b/xbmc/FileItem.h
@@ -810,5 +810,5 @@ class CFileItemList : public CFileItem
 
   std::vector<GUIViewSortDetails> m_sortDetails;
 
-  CCriticalSection m_lock;
+  mutable CCriticalSection m_lock;
 };
diff --git a/xbmc/addons/AddonInstaller.h b/xbmc/addons/AddonInstaller.h
index 693fef0fca64..a78f156e582f 100644
--- a/xbmc/addons/AddonInstaller.h
+++ b/xbmc/addons/AddonInstaller.h
@@ -146,7 +146,7 @@ class CAddonInstaller : public IJobCallback
   void PrunePackageCache();
   int64_t EnumeratePackageFolder(std::map<std::string,CFileItemList*>& result);
 
-  CCriticalSection m_critSection;
+  mutable CCriticalSection m_critSection;
   JobMap m_downloadJobs;
   CEvent m_idle;
 };
diff --git a/xbmc/addons/AddonManager.h b/xbmc/addons/AddonManager.h
index 819a8f62edc7..3c3b8c06eb73 100644
--- a/xbmc/addons/AddonManager.h
+++ b/xbmc/addons/AddonManager.h
@@ -309,7 +309,7 @@ namespace ADDON
     std::set<std::string> m_disabled;
     std::set<std::string> m_updateBlacklist;
     static std::map<TYPE, IAddonMgrCallback*> m_managers;
-    CCriticalSection m_critSection;
+    mutable CCriticalSection m_critSection;
     CAddonDatabase m_database;
     CEventSource<AddonEvent> m_events;
     CBlockingEventSource<AddonEvent> m_unloadEvents;
diff --git a/xbmc/addons/PVRClient.h b/xbmc/addons/PVRClient.h
index 93ca9db6b1f8..bee714665b06 100644
--- a/xbmc/addons/PVRClient.h
+++ b/xbmc/addons/PVRClient.h
@@ -1103,7 +1103,7 @@ namespace PVR
     std::string            m_strUserPath;         /*!< @brief translated path to the user profile */
     std::string            m_strClientPath;       /*!< @brief translated path to this add-on */
 
-    CCriticalSection m_critSection;
+    mutable CCriticalSection m_critSection;
 
     AddonInstance_PVR m_struct;
   };
diff --git a/xbmc/addons/binary-addons/BinaryAddonManager.h b/xbmc/addons/binary-addons/BinaryAddonManager.h
index 57754fa94215..697795f2d100 100644
--- a/xbmc/addons/binary-addons/BinaryAddonManager.h
+++ b/xbmc/addons/binary-addons/BinaryAddonManager.h
@@ -149,7 +149,7 @@ namespace ADDON
     void DisableEvent(const std::string& addonId);
     void InstalledChangeEvent();
 
-    CCriticalSection m_critSection;
+    mutable CCriticalSection m_critSection;
 
     typedef std::map<std::string, BinaryAddonBasePtr> BinaryAddonMgrBaseList;
     BinaryAddonMgrBaseList m_installedAddons;
diff --git a/xbmc/cores/RetroPlayer/buffers/BaseRenderBufferPool.h b/xbmc/cores/RetroPlayer/buffers/BaseRenderBufferPool.h
index 0dff8a675aeb..f9b5e19111e6 100644
--- a/xbmc/cores/RetroPlayer/buffers/BaseRenderBufferPool.h
+++ b/xbmc/cores/RetroPlayer/buffers/BaseRenderBufferPool.h
@@ -71,7 +71,7 @@ namespace RETRO
     std::deque<std::unique_ptr<IRenderBuffer>> m_free;
 
     std::vector<CRPBaseRenderer*> m_renderers;
-    CCriticalSection m_rendererMutex;
+    mutable CCriticalSection m_rendererMutex;
     CCriticalSection m_bufferMutex;
   };
 }
diff --git a/xbmc/cores/RetroPlayer/buffers/RenderBufferManager.h b/xbmc/cores/RetroPlayer/buffers/RenderBufferManager.h
index 72888eb8e26e..a0f3a3868a35 100644
--- a/xbmc/cores/RetroPlayer/buffers/RenderBufferManager.h
+++ b/xbmc/cores/RetroPlayer/buffers/RenderBufferManager.h
@@ -57,7 +57,7 @@ namespace RETRO
     };
 
     std::vector<RenderBufferPools> m_pools;
-    CCriticalSection m_critSection;
+    mutable CCriticalSection m_critSection;
   };
 }
 }
diff --git a/xbmc/cores/RetroPlayer/guibridge/GUIGameSettings.h b/xbmc/cores/RetroPlayer/guibridge/GUIGameSettings.h
index 81f9f80a58e9..308b10263b07 100644
--- a/xbmc/cores/RetroPlayer/guibridge/GUIGameSettings.h
+++ b/xbmc/cores/RetroPlayer/guibridge/GUIGameSettings.h
@@ -61,7 +61,7 @@ namespace RETRO
     CRenderSettings m_renderSettings;
 
     // Synchronization parameters
-    CCriticalSection m_mutex;
+    mutable CCriticalSection m_mutex;
   };
 }
 }
diff --git a/xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.h b/xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.h
index 18f0422cd410..02b6584efbdf 100644
--- a/xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.h
+++ b/xbmc/cores/RetroPlayer/guicontrols/GUIRenderSettings.h
@@ -62,7 +62,7 @@ namespace RETRO
     CRect m_renderDimensions;
 
     // Synchronization parameters
-    CCriticalSection m_mutex;
+    mutable CCriticalSection m_mutex;
   };
 }
 }
diff --git a/xbmc/cores/VideoPlayer/VideoPlayer.h b/xbmc/cores/VideoPlayer/VideoPlayer.h
index 18afc3ec1278..eb456b607266 100644
--- a/xbmc/cores/VideoPlayer/VideoPlayer.h
+++ b/xbmc/cores/VideoPlayer/VideoPlayer.h
@@ -517,7 +517,7 @@ class CVideoPlayer : public IPlayer, public CThread, public IVideoPlayer,
 
   struct SContent
   {
-    CCriticalSection m_section;
+    mutable CCriticalSection m_section;
     CSelectionStreams m_selectionStreams;
     std::vector<ProgramInfo> m_programs;
     int m_program;
@@ -582,7 +582,7 @@ class CVideoPlayer : public IPlayer, public CThread, public IVideoPlayer,
   } m_dvd;
 
   SPlayerState m_State;
-  CCriticalSection m_StateSection;
+  mutable CCriticalSection m_StateSection;
   XbmcThreads::EndTime m_syncTimer;
 
   CEdl m_Edl;
diff --git a/xbmc/cores/VideoPlayer/VideoPlayerAudio.h b/xbmc/cores/VideoPlayer/VideoPlayerAudio.h
index 612011b4b6f3..c9272b0c1701 100644
--- a/xbmc/cores/VideoPlayer/VideoPlayerAudio.h
+++ b/xbmc/cores/VideoPlayer/VideoPlayerAudio.h
@@ -114,7 +114,7 @@ class CVideoPlayerAudio : public CThread, public IDVDStreamPlayerAudio
     bool             passthrough = false;
   };
 
-  CCriticalSection m_info_section;
+  mutable CCriticalSection m_info_section;
   SInfo            m_info;
 };
 
diff --git a/xbmc/cores/VideoPlayer/VideoReferenceClock.h b/xbmc/cores/VideoPlayer/VideoReferenceClock.h
index b7955c62e90f..c747784210eb 100644
--- a/xbmc/cores/VideoPlayer/VideoReferenceClock.h
+++ b/xbmc/cores/VideoPlayer/VideoReferenceClock.h
@@ -62,7 +62,7 @@ class CVideoReferenceClock : CThread
 
     CEvent m_vsyncStopEvent;
 
-    CCriticalSection m_CritSection;
+    mutable CCriticalSection m_CritSection;
 
     std::unique_ptr<CVideoSync> m_pVideoSync;
 };
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/RenderManager.h b/xbmc/cores/VideoPlayer/VideoRenderers/RenderManager.h
index 458ff06f83fd..190a2c7618b9 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/RenderManager.h
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/RenderManager.h
@@ -147,7 +147,7 @@ class CRenderManager
   CBaseRenderer *m_pRenderer = nullptr;
   OVERLAY::CRenderer m_overlays;
   CDebugRenderer m_debugRenderer;
-  CCriticalSection m_statelock;
+  mutable CCriticalSection m_statelock;
   CCriticalSection m_presentlock;
   CCriticalSection m_datalock;
   bool m_bTriggerUpdateResolution = false;
diff --git a/xbmc/cores/omxplayer/OMXAudio.h b/xbmc/cores/omxplayer/OMXAudio.h
index 77627a963c73..b17d1aa7bcf7 100644
--- a/xbmc/cores/omxplayer/OMXAudio.h
+++ b/xbmc/cores/omxplayer/OMXAudio.h
@@ -180,5 +180,5 @@ class COMXAudio
   COMXCoreTunnel    m_omx_tunnel_splitter_analog;
   COMXCoreTunnel    m_omx_tunnel_splitter_hdmi;
 
-  CCriticalSection m_critSection;
+  mutable CCriticalSection m_critSection;
 };
diff --git a/xbmc/cores/playercorefactory/PlayerCoreFactory.h b/xbmc/cores/playercorefactory/PlayerCoreFactory.h
index 885a6c6a1acc..929822933df5 100644
--- a/xbmc/cores/playercorefactory/PlayerCoreFactory.h
+++ b/xbmc/cores/playercorefactory/PlayerCoreFactory.h
@@ -76,5 +76,5 @@ class CPlayerCoreFactory : public ISettingsHandler
 
   std::vector<CPlayerCoreConfig *> m_vecPlayerConfigs;
   std::vector<CPlayerSelectionRule *> m_vecCoreSelectionRules;
-  CCriticalSection m_section;
+  mutable CCriticalSection m_section;
 };
diff --git a/xbmc/dialogs/GUIDialogExtendedProgressBar.h b/xbmc/dialogs/GUIDialogExtendedProgressBar.h
index 82df6a533631..54b2002adffb 100644
--- a/xbmc/dialogs/GUIDialogExtendedProgressBar.h
+++ b/xbmc/dialogs/GUIDialogExtendedProgressBar.h
@@ -48,7 +48,7 @@ class CGUIDialogProgressBarHandle
   void SetProgress(int currentItem, int itemCount);
 
 private:
-  CCriticalSection  m_critSection;
+  mutable CCriticalSection m_critSection;
   float             m_fPercentage;
   std::string       m_strTitle;
   std::string       m_strText;
diff --git a/xbmc/dialogs/GUIDialogVolumeBar.h b/xbmc/dialogs/GUIDialogVolumeBar.h
index 816f8f0a95f7..657f6d6a1e9e 100644
--- a/xbmc/dialogs/GUIDialogVolumeBar.h
+++ b/xbmc/dialogs/GUIDialogVolumeBar.h
@@ -42,5 +42,5 @@ class CGUIDialogVolumeBar : public CGUIDialog
 
 private:
   std::set<IGUIVolumeBarCallback*> m_callbacks;
-  CCriticalSection m_callbackMutex;
+  mutable CCriticalSection m_callbackMutex;
 };
diff --git a/xbmc/events/EventLog.h b/xbmc/events/EventLog.h
index 366f9647c0e9..60de5cb54698 100644
--- a/xbmc/events/EventLog.h
+++ b/xbmc/events/EventLog.h
@@ -70,5 +70,5 @@ class CEventLog
   typedef std::map<std::string, EventPtr> EventsMap;
   EventsList m_events;
   EventsMap m_eventsMap;
-  CCriticalSection m_critical;
+  mutable CCriticalSection m_critical;
 };
diff --git a/xbmc/favourites/FavouritesService.h b/xbmc/favourites/FavouritesService.h
index c89ba31a1c8a..29bb923b8472 100644
--- a/xbmc/favourites/FavouritesService.h
+++ b/xbmc/favourites/FavouritesService.h
@@ -61,6 +61,6 @@ class CFavouritesService
   std::string m_userDataFolder;
   CFileItemList m_favourites;
   CEventSource<FavouritesUpdated> m_events;
-  CCriticalSection m_criticalSection;
+  mutable CCriticalSection m_criticalSection;
 };
 
diff --git a/xbmc/filesystem/DirectoryCache.h b/xbmc/filesystem/DirectoryCache.h
index c2d07d0810c3..6fda9c9751f8 100644
--- a/xbmc/filesystem/DirectoryCache.h
+++ b/xbmc/filesystem/DirectoryCache.h
@@ -73,7 +73,7 @@ namespace XFILE
     typedef std::map<std::string, CDir*>::const_iterator ciCache;
     void Delete(iCache i);
 
-    CCriticalSection m_cs;
+    mutable CCriticalSection m_cs;
 
     unsigned int m_accessCounter;
 
diff --git a/xbmc/guilib/GUIWindow.cpp b/xbmc/guilib/GUIWindow.cpp
index 3166c1ab0eed..097fcfd606d4 100644
--- a/xbmc/guilib/GUIWindow.cpp
+++ b/xbmc/guilib/GUIWindow.cpp
@@ -1038,7 +1038,7 @@ void CGUIWindow::SetProperty(const std::string &strKey, const CVariant &value)
 
 CVariant CGUIWindow::GetProperty(const std::string &strKey) const
 {
-  CSingleLock lock(*this);
+  CSingleLock lock(const_cast<CGUIWindow&>(*this));
   std::map<std::string, CVariant, icompare>::const_iterator iter = m_mapProperties.find(strKey);
   if (iter == m_mapProperties.end())
     return CVariant(CVariant::VariantTypeNull);
diff --git a/xbmc/interfaces/generic/ScriptInvocationManager.h b/xbmc/interfaces/generic/ScriptInvocationManager.h
index 8a32608bbc6d..49e6e3be5081 100644
--- a/xbmc/interfaces/generic/ScriptInvocationManager.h
+++ b/xbmc/interfaces/generic/ScriptInvocationManager.h
@@ -158,5 +158,5 @@ class CScriptInvocationManager
 
   std::map<std::string, int> m_scriptPaths;
   int m_nextId = 0;
-  CCriticalSection m_critSection;
+  mutable CCriticalSection m_critSection;
 };
diff --git a/xbmc/interfaces/python/pythreadstate.h b/xbmc/interfaces/python/pythreadstate.h
index 949ddfbc0b75..965fa1bf785f 100644
--- a/xbmc/interfaces/python/pythreadstate.h
+++ b/xbmc/interfaces/python/pythreadstate.h
@@ -68,6 +68,6 @@ class CPyThreadState
 class GilSafeSingleLock : public CPyThreadState, public CSingleLock
 {
 public:
-  explicit GilSafeSingleLock(const CCriticalSection& critSec) : CPyThreadState(true), CSingleLock(critSec) { CPyThreadState::Restore(); }
+  explicit GilSafeSingleLock(CCriticalSection& critSec) : CPyThreadState(true), CSingleLock(critSec) { CPyThreadState::Restore(); }
 };
 
diff --git a/xbmc/listproviders/DirectoryProvider.h b/xbmc/listproviders/DirectoryProvider.h
index a621ba111e80..de602f0e9dc2 100644
--- a/xbmc/listproviders/DirectoryProvider.h
+++ b/xbmc/listproviders/DirectoryProvider.h
@@ -84,7 +84,7 @@ class CDirectoryProvider :
   unsigned int     m_currentLimit;
   std::vector<CGUIStaticItemPtr> m_items;
   std::vector<InfoTagType> m_itemTypes;
-  CCriticalSection m_section;
+  mutable CCriticalSection m_section;
 
   bool UpdateURL();
   bool UpdateLimit();
diff --git a/xbmc/network/WebServer.h b/xbmc/network/WebServer.h
index 9bbf41eecabb..43edaf8fc0fb 100644
--- a/xbmc/network/WebServer.h
+++ b/xbmc/network/WebServer.h
@@ -133,6 +133,6 @@ class CWebServer
   std::string m_authenticationPassword;
   std::string m_key;
   std::string m_cert;
-  CCriticalSection m_critSection;
+  mutable CCriticalSection m_critSection;
   std::vector<IHTTPRequestHandler *> m_requestHandlers;
 };
diff --git a/xbmc/network/upnp/UPnPSettings.h b/xbmc/network/upnp/UPnPSettings.h
index 164035847b46..254a2275edbc 100644
--- a/xbmc/network/upnp/UPnPSettings.h
+++ b/xbmc/network/upnp/UPnPSettings.h
@@ -61,5 +61,5 @@ class CUPnPSettings : public ISettingsHandler
   std::string m_rendererUUID;
   int m_rendererPort;
 
-  CCriticalSection m_critical;
+  mutable CCriticalSection m_critical;
 };
diff --git a/xbmc/peripherals/EventScanner.h b/xbmc/peripherals/EventScanner.h
index 2b358d7ea7ae..ab2c34b74ec3 100644
--- a/xbmc/peripherals/EventScanner.h
+++ b/xbmc/peripherals/EventScanner.h
@@ -82,7 +82,7 @@ namespace PERIPHERALS
     std::set<void*> m_activeLocks;
     CEvent m_scanEvent;
     CEvent m_scanFinishedEvent;
-    CCriticalSection m_handleMutex;
+    mutable CCriticalSection m_handleMutex;
     CCriticalSection m_lockMutex;
     CCriticalSection m_pollMutex; // Prevent two poll handles from polling at once
   };
diff --git a/xbmc/peripherals/Peripherals.h b/xbmc/peripherals/Peripherals.h
index 499ffe32a915..01388a23959b 100644
--- a/xbmc/peripherals/Peripherals.h
+++ b/xbmc/peripherals/Peripherals.h
@@ -358,7 +358,7 @@ namespace PERIPHERALS
     std::vector<PeripheralBusPtr> m_busses;
     std::vector<PeripheralDeviceMapping> m_mappings;
     std::unique_ptr<CEventScanner> m_eventScanner;
-    CCriticalSection m_critSectionBusses;
-    CCriticalSection m_critSectionMappings;
+    mutable CCriticalSection m_critSectionBusses;
+    mutable CCriticalSection m_critSectionMappings;
   };
 }
diff --git a/xbmc/peripherals/addons/AddonButtonMap.h b/xbmc/peripherals/addons/AddonButtonMap.h
index d0f42b07931a..1c9abba39bb9 100644
--- a/xbmc/peripherals/addons/AddonButtonMap.h
+++ b/xbmc/peripherals/addons/AddonButtonMap.h
@@ -169,6 +169,6 @@ namespace PERIPHERALS
     FeatureMap          m_features;
     DriverMap           m_driverMap;
     JoystickPrimitiveVector m_ignoredPrimitives;
-    CCriticalSection    m_mutex;
+    mutable CCriticalSection m_mutex;
   };
 }
diff --git a/xbmc/peripherals/addons/PeripheralAddon.h b/xbmc/peripherals/addons/PeripheralAddon.h
index 804a24aac03d..176b96535448 100644
--- a/xbmc/peripherals/addons/PeripheralAddon.h
+++ b/xbmc/peripherals/addons/PeripheralAddon.h
@@ -176,7 +176,7 @@ namespace PERIPHERALS
     CCriticalSection m_buttonMapMutex;
 
     /* @brief Thread synchronization */
-    CCriticalSection    m_critSection;
+    mutable CCriticalSection m_critSection;
 
     AddonInstance_Peripheral m_struct;
 
diff --git a/xbmc/peripherals/bus/PeripheralBus.h b/xbmc/peripherals/bus/PeripheralBus.h
index 931bec9196cb..0170a1afd1af 100644
--- a/xbmc/peripherals/bus/PeripheralBus.h
+++ b/xbmc/peripherals/bus/PeripheralBus.h
@@ -197,7 +197,7 @@ namespace PERIPHERALS
     bool                       m_bNeedsPolling; /*!< true when this bus needs to be polled for new devices, false when it uses callbacks to notify this bus of changed */
     CPeripherals&              m_manager;
     const PeripheralBusType    m_type;
-    CCriticalSection           m_critSection;
+    mutable CCriticalSection   m_critSection;
     CEvent                     m_triggerEvent;
   };
   using PeripheralBusPtr = std::shared_ptr<CPeripheralBus>;
diff --git a/xbmc/peripherals/devices/PeripheralCecAdapter.h b/xbmc/peripherals/devices/PeripheralCecAdapter.h
index 60e54ab0860f..178b45b2be69 100644
--- a/xbmc/peripherals/devices/PeripheralCecAdapter.h
+++ b/xbmc/peripherals/devices/PeripheralCecAdapter.h
@@ -171,7 +171,7 @@ namespace PERIPHERALS
     bool m_bDeviceRemoved;
     CPeripheralCecAdapterUpdateThread*m_queryThread;
     CEC::ICECCallbacks m_callbacks;
-    CCriticalSection m_critSection;
+    mutable CCriticalSection m_critSection;
     CEC::libcec_configuration m_configuration;
     bool m_bActiveSourcePending;
     bool m_bStandbyPending;
diff --git a/xbmc/peripherals/dialogs/GUIDialogPeripherals.h b/xbmc/peripherals/dialogs/GUIDialogPeripherals.h
index 12194d5aca92..1a377baa04e2 100644
--- a/xbmc/peripherals/dialogs/GUIDialogPeripherals.h
+++ b/xbmc/peripherals/dialogs/GUIDialogPeripherals.h
@@ -59,6 +59,6 @@ class CGUIDialogPeripherals : public CGUIDialogSelect,
 
   CPeripherals *m_manager = nullptr;
   CFileItemList m_peripherals;
-  CCriticalSection m_peripheralsMutex;
+  mutable CCriticalSection m_peripheralsMutex;
 };
 }
diff --git a/xbmc/profiles/ProfilesManager.h b/xbmc/profiles/ProfilesManager.h
index 1833576b85b4..77f4d1f80337 100644
--- a/xbmc/profiles/ProfilesManager.h
+++ b/xbmc/profiles/ProfilesManager.h
@@ -215,7 +215,7 @@ class CProfilesManager : protected ISettingsHandler,
   unsigned int m_lastUsedProfile;
   unsigned int m_currentProfile; // do not modify directly, use SetCurrentProfileId() function instead
   int m_nextProfileId; // for tracking the next available id to give to a new profile to ensure id's are not re-used
-  CCriticalSection m_critical;
+  mutable CCriticalSection m_critical;
 
   // Event properties
   std::unique_ptr<CEventLogManager> m_eventLogs;
diff --git a/xbmc/pvr/PVRChannelNumberInputHandler.h b/xbmc/pvr/PVRChannelNumberInputHandler.h
index da8a411c9e91..130429827793 100644
--- a/xbmc/pvr/PVRChannelNumberInputHandler.h
+++ b/xbmc/pvr/PVRChannelNumberInputHandler.h
@@ -98,7 +98,7 @@ class CPVRChannelNumberInputHandler : private ITimerCallback
    */
   size_t GetCurrentDigitCount() const { return m_inputBuffer.size(); }
 
-  CCriticalSection m_mutex;
+  mutable CCriticalSection m_mutex;
 
 private:
   void ExecuteAction();
diff --git a/xbmc/pvr/PVRGUIActions.h b/xbmc/pvr/PVRGUIActions.h
index fee0ee6fe488..d3a02048a6a0 100644
--- a/xbmc/pvr/PVRGUIActions.h
+++ b/xbmc/pvr/PVRGUIActions.h
@@ -494,7 +494,7 @@ namespace PVR
     bool EventOccursOnLocalBackend(const CFileItemPtr& item) const;
     bool IsNextEventWithinBackendIdleTime(void) const;
 
-    CCriticalSection m_critSection;
+    mutable CCriticalSection m_critSection;
     CPVRChannelSwitchingInputHandler m_channelNumberInputHandler;
     bool m_bChannelScanRunning = false;
     CPVRSettings m_settings;
diff --git a/xbmc/pvr/PVRGUIChannelNavigator.h b/xbmc/pvr/PVRGUIChannelNavigator.h
index 9ff734e774f4..6080fb618bca 100644
--- a/xbmc/pvr/PVRGUIChannelNavigator.h
+++ b/xbmc/pvr/PVRGUIChannelNavigator.h
@@ -113,7 +113,7 @@ namespace PVR
      */
     void ShowInfo(bool bForce);
 
-    CCriticalSection m_critSection;
+    mutable CCriticalSection m_critSection;
     CPVRChannelPtr m_playingChannel;
     CPVRChannelPtr m_currentChannel;
     int m_iChannelEntryJobId = -1;
diff --git a/xbmc/pvr/PVRGUIInfo.h b/xbmc/pvr/PVRGUIInfo.h
index 159d83273384..f6f813695643 100644
--- a/xbmc/pvr/PVRGUIInfo.h
+++ b/xbmc/pvr/PVRGUIInfo.h
@@ -191,7 +191,7 @@ namespace PVR
     time_t                          m_iTimeshiftPlayTime;
     unsigned int                    m_iTimeshiftOffset;
 
-    CCriticalSection                m_critSection;
+    mutable CCriticalSection m_critSection;
 
     /**
      * The various backend-related fields will only be updated when this
diff --git a/xbmc/pvr/PVRGUITimerInfo.h b/xbmc/pvr/PVRGUITimerInfo.h
index af0edafa5645..03e071420f90 100644
--- a/xbmc/pvr/PVRGUITimerInfo.h
+++ b/xbmc/pvr/PVRGUITimerInfo.h
@@ -81,7 +81,7 @@ namespace PVR
     unsigned int m_iTimerInfoToggleStart;
     unsigned int m_iTimerInfoToggleCurrent;
 
-    CCriticalSection m_critSection;
+    mutable CCriticalSection m_critSection;
   };
 
   class CPVRGUIAnyTimerInfo : public CPVRGUITimerInfo
diff --git a/xbmc/pvr/PVRManager.h b/xbmc/pvr/PVRManager.h
index 950d8186ab00..dad6b3f810b5 100644
--- a/xbmc/pvr/PVRManager.h
+++ b/xbmc/pvr/PVRManager.h
@@ -532,11 +532,11 @@ namespace PVR
     CPVRManagerJobQueue             m_pendingUpdates;              /*!< vector of pending pvr updates */
 
     CPVRDatabasePtr                 m_database;                    /*!< the database for all PVR related data */
-    CCriticalSection                m_critSection;                 /*!< critical section for all changes to this class, except for changes to triggers */
+    mutable CCriticalSection        m_critSection;                 /*!< critical section for all changes to this class, except for changes to triggers */
     bool                            m_bFirstStart = true;                 /*!< true when the PVR manager was started first, false otherwise */
     bool                            m_bEpgsCreated = false;                /*!< true if epg data for channels has been created */
 
-    CCriticalSection                m_managerStateMutex;
+    mutable CCriticalSection        m_managerStateMutex;
     ManagerState                    m_managerState = ManagerStateStopped;
     std::unique_ptr<CStopWatch>     m_parentalTimer;
 
diff --git a/xbmc/pvr/PVRSettings.h b/xbmc/pvr/PVRSettings.h
index 92057f2441c2..da6975def9f4 100644
--- a/xbmc/pvr/PVRSettings.h
+++ b/xbmc/pvr/PVRSettings.h
@@ -59,7 +59,7 @@ namespace PVR
 
     void Init(const std::set<std::string> &settingNames);
 
-    CCriticalSection m_critSection;
+    mutable CCriticalSection m_critSection;
     std::map<std::string, std::shared_ptr<CSetting>> m_settings;
   };
 }
diff --git a/xbmc/pvr/addons/PVRClients.h b/xbmc/pvr/addons/PVRClients.h
index b92f012f27e3..24fd9d03f02d 100644
--- a/xbmc/pvr/addons/PVRClients.h
+++ b/xbmc/pvr/addons/PVRClients.h
@@ -367,7 +367,7 @@ namespace PVR
      */
     PVR_ERROR ForCreatedClients(const char* strFunctionName, PVRClientFunction function, std::vector<int> &failedClients) const;
 
-    CCriticalSection m_critSection;
+    mutable CCriticalSection m_critSection;
     CPVRClientMap m_clientMap;
   };
 }
diff --git a/xbmc/pvr/channels/PVRChannel.h b/xbmc/pvr/channels/PVRChannel.h
index ec07df6c1c3a..75db5eb0044b 100644
--- a/xbmc/pvr/channels/PVRChannel.h
+++ b/xbmc/pvr/channels/PVRChannel.h
@@ -469,6 +469,6 @@ namespace PVR
     std::string      m_strClientEncryptionName; /*!< the name of the encryption system used by this channel */
     //@}
 
-    CCriticalSection m_critSection;
+    mutable CCriticalSection m_critSection;
   };
 }
diff --git a/xbmc/pvr/channels/PVRChannelGroup.h b/xbmc/pvr/channels/PVRChannelGroup.h
index 9118ba34a6cd..f01ea4ca57d4 100644
--- a/xbmc/pvr/channels/PVRChannelGroup.h
+++ b/xbmc/pvr/channels/PVRChannelGroup.h
@@ -537,7 +537,7 @@ namespace PVR
     int              m_iPosition = 0;                   /*!< the position of this group within the group list */
     PVR_CHANNEL_GROUP_SORTED_MEMBERS m_sortedMembers; /*!< members sorted by channel number */
     PVR_CHANNEL_GROUP_MEMBERS        m_members;       /*!< members with key clientid+uniqueid */
-    CCriticalSection m_critSection;
+    mutable CCriticalSection m_critSection;
     std::vector<int> m_failedClientsForChannels;
     std::vector<int> m_failedClientsForChannelGroupMembers;
 
diff --git a/xbmc/pvr/channels/PVRChannelGroups.h b/xbmc/pvr/channels/PVRChannelGroups.h
index 0dbaa094e735..05bc4a1b6326 100644
--- a/xbmc/pvr/channels/PVRChannelGroups.h
+++ b/xbmc/pvr/channels/PVRChannelGroups.h
@@ -222,7 +222,7 @@ namespace PVR
     bool                             m_bRadio;         /*!< true if this is a container for radio channels, false if it is for tv channels */
     CPVRChannelGroupPtr              m_selectedGroup;  /*!< the group that's currently selected in the UI */
     std::vector<CPVRChannelGroupPtr> m_groups;         /*!< the groups in this container */
-    CCriticalSection m_critSection;
+    mutable CCriticalSection m_critSection;
     std::vector<int> m_failedClientsForChannelGroups;
   };
 }
diff --git a/xbmc/pvr/epg/Epg.h b/xbmc/pvr/epg/Epg.h
index 42b633fb0361..a4ba12768946 100644
--- a/xbmc/pvr/epg/Epg.h
+++ b/xbmc/pvr/epg/Epg.h
@@ -341,7 +341,7 @@ namespace PVR
 
     PVR::CPVRChannelPtr                 m_pvrChannel;      /*!< the channel this EPG belongs to */
 
-    CCriticalSection                    m_critSection;     /*!< critical section for changes in this table */
+    mutable CCriticalSection            m_critSection;     /*!< critical section for changes in this table */
     bool                                m_bUpdateLastScanTime = false;
   };
 }
diff --git a/xbmc/pvr/epg/EpgContainer.h b/xbmc/pvr/epg/EpgContainer.h
index 3e0bd58a51aa..c393221a3562 100644
--- a/xbmc/pvr/epg/EpgContainer.h
+++ b/xbmc/pvr/epg/EpgContainer.h
@@ -272,7 +272,7 @@ namespace PVR
     EPGMAP       m_epgs;                   /*!< the EPGs in this container */
     //@}
 
-    CCriticalSection               m_critSection;    /*!< a critical section for changes to this container */
+    mutable CCriticalSection       m_critSection;    /*!< a critical section for changes to this container */
     CEvent                         m_updateEvent;    /*!< trigger when an update finishes */
 
     std::list<CEpgUpdateRequest> m_updateRequests; /*!< list of update requests triggered by addon */
diff --git a/xbmc/pvr/epg/EpgInfoTag.h b/xbmc/pvr/epg/EpgInfoTag.h
index f4dd23b2a068..d777ac15142c 100644
--- a/xbmc/pvr/epg/EpgInfoTag.h
+++ b/xbmc/pvr/epg/EpgInfoTag.h
@@ -533,7 +533,7 @@ namespace PVR
     unsigned int             m_iFlags;             /*!< the flags applicable to this EPG entry */
     std::string              m_strSeriesLink;      /*!< series link */
 
-    CCriticalSection         m_critSection;
+    mutable CCriticalSection m_critSection;
     PVR::CPVRChannelPtr      m_channel;
     PVR::CPVRRecordingPtr    m_recording;
   };
diff --git a/xbmc/pvr/recordings/PVRRecordings.h b/xbmc/pvr/recordings/PVRRecordings.h
index 63026df3a8e0..518c47f45fbb 100644
--- a/xbmc/pvr/recordings/PVRRecordings.h
+++ b/xbmc/pvr/recordings/PVRRecordings.h
@@ -100,7 +100,7 @@ namespace PVR
     typedef PVR_RECORDINGMAP::iterator PVR_RECORDINGMAP_ITR;
     typedef PVR_RECORDINGMAP::const_iterator PVR_RECORDINGMAP_CITR;
 
-    CCriticalSection m_critSection;
+    mutable CCriticalSection m_critSection;
     bool m_bIsUpdating = false;
     PVR_RECORDINGMAP m_recordings;
     unsigned int m_iLastId = 0;
diff --git a/xbmc/pvr/timers/PVRTimerInfoTag.h b/xbmc/pvr/timers/PVRTimerInfoTag.h
index 5b00653d81b4..3473d45c99f6 100644
--- a/xbmc/pvr/timers/PVRTimerInfoTag.h
+++ b/xbmc/pvr/timers/PVRTimerInfoTag.h
@@ -315,7 +315,7 @@ namespace PVR
     std::string GetWeekdaysString() const;
     void UpdateEpgInfoTag(void);
 
-    CCriticalSection      m_critSection;
+    mutable CCriticalSection m_critSection;
     CDateTime             m_StartTime; /*!< start time */
     CDateTime             m_StopTime;  /*!< stop time */
     CDateTime             m_FirstDay;  /*!< if it is a manual timer rule the first date it starts */
diff --git a/xbmc/pvr/timers/PVRTimers.h b/xbmc/pvr/timers/PVRTimers.h
index d910481d60a4..49c6d0f0854f 100644
--- a/xbmc/pvr/timers/PVRTimers.h
+++ b/xbmc/pvr/timers/PVRTimers.h
@@ -71,7 +71,7 @@ namespace PVR
   protected:
     void InsertTimer(const CPVRTimerInfoTagPtr &newTimer);
 
-    CCriticalSection m_critSection;
+    mutable CCriticalSection m_critSection;
     unsigned int m_iLastId = 0;
     MapTags m_tags;
   };
diff --git a/xbmc/pvr/windows/GUIEPGGridContainer.h b/xbmc/pvr/windows/GUIEPGGridContainer.h
index a01fec272fd2..817f5ef93c13 100644
--- a/xbmc/pvr/windows/GUIEPGGridContainer.h
+++ b/xbmc/pvr/windows/GUIEPGGridContainer.h
@@ -234,7 +234,7 @@ namespace PVR
     float m_channelScrollSpeed;
     float m_channelScrollOffset;
 
-    CCriticalSection m_critSection;
+    mutable CCriticalSection m_critSection;
     std::unique_ptr<CGUIEPGGridContainerModel> m_gridModel;
     std::unique_ptr<CGUIEPGGridContainerModel> m_updatedGridModel;
     std::unique_ptr<CGUIEPGGridContainerModel> m_outdatedGridModel;
diff --git a/xbmc/settings/DisplaySettings.h b/xbmc/settings/DisplaySettings.h
index 1eea3ead39d6..da316a1c94a3 100644
--- a/xbmc/settings/DisplaySettings.h
+++ b/xbmc/settings/DisplaySettings.h
@@ -136,5 +136,5 @@ class CDisplaySettings : public ISettingCallback, public ISubSettings,
   bool  m_nonLinearStretched;   // current non-linear stretch
 
   bool m_resolutionChangeAborted;
-  CCriticalSection m_critical;
+  mutable CCriticalSection m_critical;
 };
diff --git a/xbmc/settings/MediaSettings.h b/xbmc/settings/MediaSettings.h
index 8b59258788cf..d0ce6a1c7f87 100644
--- a/xbmc/settings/MediaSettings.h
+++ b/xbmc/settings/MediaSettings.h
@@ -125,5 +125,5 @@ class CMediaSettings : public ISettingCallback, public ISettingsHandler, public
   int m_musicNeedsUpdate; ///< if a database update means an update is required (set to the version number of the db)
   int m_videoNeedsUpdate; ///< if a database update means an update is required (set to the version number of the db)
 
-  CCriticalSection m_critical;
+  mutable CCriticalSection m_critical;
 };
diff --git a/xbmc/settings/SettingsBase.h b/xbmc/settings/SettingsBase.h
index c477500d5598..7330fd0f0758 100644
--- a/xbmc/settings/SettingsBase.h
+++ b/xbmc/settings/SettingsBase.h
@@ -293,7 +293,7 @@ class CSettingsBase
 
   bool m_initialized = false;
   CSettingsManager* m_settingsManager;
-  CCriticalSection m_critical;
+  mutable CCriticalSection m_critical;
 private:
   CSettingsBase(const CSettingsBase&) = delete;
   CSettingsBase& operator=(const CSettingsBase&) = delete;
diff --git a/xbmc/threads/SingleLock.h b/xbmc/threads/SingleLock.h
index 9d30fbebb0e0..8570bf984e74 100644
--- a/xbmc/threads/SingleLock.h
+++ b/xbmc/threads/SingleLock.h
@@ -37,7 +37,6 @@ class CSingleLock : public XbmcThreads::UniqueLock<CCriticalSection>
 {
 public:
   inline explicit CSingleLock(CCriticalSection& cs) : XbmcThreads::UniqueLock<CCriticalSection>(cs) {}
-  inline explicit CSingleLock(const CCriticalSection& cs) : XbmcThreads::UniqueLock<CCriticalSection> ((CCriticalSection&)cs) {}
 
   inline void Leave() { unlock(); }
   inline void Enter() { lock(); }
diff --git a/xbmc/utils/JobManager.h b/xbmc/utils/JobManager.h
index 77453e5afc11..ff36926bdecb 100644
--- a/xbmc/utils/JobManager.h
+++ b/xbmc/utils/JobManager.h
@@ -185,7 +185,7 @@ class CJobQueue: public IJobCallback
 
   unsigned int m_jobsAtOnce;
   CJob::PRIORITY m_priority;
-  CCriticalSection m_section;
+  mutable CCriticalSection m_section;
   bool m_lifo;
 };
 
@@ -378,7 +378,7 @@ class CJobManager final
   Processing m_processing;
   Workers    m_workers;
 
-  CCriticalSection m_section;
+  mutable CCriticalSection m_section;
   CEvent           m_jobEvent;
   bool             m_running;
 };
diff --git a/xbmc/utils/Observer.h b/xbmc/utils/Observer.h
index 1b2beb6f9afb..7950cd015a64 100644
--- a/xbmc/utils/Observer.h
+++ b/xbmc/utils/Observer.h
@@ -111,5 +111,5 @@ class Observable
 
   std::atomic<bool>       m_bObservableChanged{false}; /*!< true when the observable is marked as changed, false otherwise */
   std::vector<Observer *> m_observers;                 /*!< all observers */
-  CCriticalSection        m_obsCritSection;            /*!< mutex */
+  mutable CCriticalSection m_obsCritSection; /*!< mutex */
 };
diff --git a/xbmc/view/ViewStateSettings.h b/xbmc/view/ViewStateSettings.h
index eabb9990883b..9749e036a0a0 100644
--- a/xbmc/view/ViewStateSettings.h
+++ b/xbmc/view/ViewStateSettings.h
@@ -68,7 +68,7 @@ class CViewStateSettings : public ISubSettings
   SettingLevel m_settingLevel = SettingLevel::Standard;
   EventLevel m_eventLevel = EventLevel::Basic;
   bool m_eventShowHigherLevels = true;
-  CCriticalSection m_critical;
+  mutable CCriticalSection m_critical;
 
   void AddViewState(const std::string& strTagName, int defaultView = DEFAULT_VIEW_LIST, SortBy defaultSort = SortByLabel);
 };
diff --git a/xbmc/windowing/wayland/Output.h b/xbmc/windowing/wayland/Output.h
index 4dab420e64c3..014f36264533 100644
--- a/xbmc/windowing/wayland/Output.h
+++ b/xbmc/windowing/wayland/Output.h
@@ -143,8 +143,8 @@ class COutput
   wayland::output_t m_output;
   std::function<void()> m_doneHandler;
 
-  CCriticalSection m_geometryCriticalSection;
-  CCriticalSection m_iteratorCriticalSection;
+  mutable CCriticalSection m_geometryCriticalSection;
+  mutable CCriticalSection m_iteratorCriticalSection;
 
   CPointInt m_position;
   CSizeInt m_physicalSize;
diff --git a/xbmc/windowing/wayland/SeatSelection.h b/xbmc/windowing/wayland/SeatSelection.h
index b23b34a33eeb..a946e12e5bbe 100644
--- a/xbmc/windowing/wayland/SeatSelection.h
+++ b/xbmc/windowing/wayland/SeatSelection.h
@@ -53,7 +53,7 @@ class CSeatSelection
   std::vector<std::string> m_mimeTypeOffers;
   std::string m_matchedMimeType;
 
-  CCriticalSection m_currentSelectionMutex;
+  mutable CCriticalSection m_currentSelectionMutex;
 };
 
 }
