From 9e0e409e1df071076c5c2c3132448684e0ac59d3 Mon Sep 17 00:00:00 2001
From: CastagnaIT <gottardo.stefano.83@gmail.com>
Date: Thu, 23 Apr 2020 20:39:54 +0200
Subject: [PATCH] [docs][python] Improve documentation for xbmcdrm

---
 xbmc/interfaces/legacy/DrmCryptoSession.h | 122 +++++++++++++++-------
 1 file changed, 87 insertions(+), 35 deletions(-)

diff --git a/xbmc/interfaces/legacy/DrmCryptoSession.h b/xbmc/interfaces/legacy/DrmCryptoSession.h
index 301f6d2a4639..1ff1b07b69bd 100644
--- a/xbmc/interfaces/legacy/DrmCryptoSession.h
+++ b/xbmc/interfaces/legacy/DrmCryptoSession.h
@@ -32,14 +32,44 @@ namespace XBMCAddon
 
     //
     /// \defgroup python_xbmcdrm Library - xbmcdrm
-    /// @{
+    ///@{
     /// @brief **Kodi's %DRM class.**
     ///
+    /// Offers classes and functions that allow a developer to work with
+    /// DRM-protected contents like Widevine.
+    ///
+    /// This type of functionality is closely related to the type of DRM
+    /// used and the service to be implemented.
+    ///
+    /// Using the \ref xbmcdrm_CryptoSession "CryptoSession" constructor allow you
+    /// to have access to a DRM session.
+    /// With a DRM session you can read and write the DRM properties
+    /// \ref xbmcdrm_GetPropertyString "GetPropertyString", \ref xbmcdrm_SetPropertyString "SetPropertyString"
+    /// and establish session keys with
+    /// \ref xbmcdrm_GetKeyRequest "GetKeyRequest" and
+    /// \ref xbmcdrm_ProvideKeyResponse "ProvideKeyResponse", or resume previous session keys with 
+    /// \ref xbmcdrm_RestoreKeys "RestoreKeys".
+    ///
+    /// When the session keys are established you can use these methods to perform various operations:
+    /// \ref xbmcdrm_Encrypt "Encrypt"/\ref xbmcdrm_Decrypt "Decrypt" for data encryption/decryption,
+    /// \ref xbmcdrm_Sign "Sign"/\ref xbmcdrm_Verify "Verify" for make or verify data-signature.
+    /// Useful for example to implement encrypted communication between a client and the server.
+    ///
+    /// An example where such functionality is useful is the Message Security Layer (MSL)
+    /// transmission protocol used in some VOD applications.
+    /// This protocol (or rather framework) is used to increase the level of security 
+    /// in the exchange of messages (such as licences, manifests or other data) between clients and servers,
+    /// which is a kind of integration to the HTTPS communication standard.
+    ///
+    ///--------------------------------------------------------------------------
+    /// Constructor for DRM crypto session
+    ///
+    /// \anchor xbmcdrm_CryptoSession
     /// \python_class{ xbmcdrm.CryptoSession(UUID, cipherAlgorithm, macAlgorithm) }
     ///
-    /// @param UUID             String  16 byte UUID of the DRM system to use
-    /// @param cipherAlgorithm  String algorithm used for en / decryption
-    /// @param macAlgorithm     String algorithm used for sign / verify
+    /// @param UUID             String 16 byte UUID of the DRM system to use
+    /// @param cipherAlgorithm  String algorithm used for encryption / decryption ciphers (example "AES/CBC/NoPadding")
+    /// @param macAlgorithm     String algorithm used for sign / verify (example "HmacSHA256")
     ///
     /// @throws RuntimeException if the session can not be established
     ///
@@ -59,18 +89,28 @@ namespace XBMCAddon
       /// \ingroup python_xbmcdrm
       /// @brief \python_func{ GetKeyRequest(init, mimeType, offlineKey, optionalParameters) }
       ///-----------------------------------------------------------------------
-      /// Generate a key request which is supposed to be send to the key server.
-      /// The servers response is passed to provideKeyResponse to activate the keys.
-      ///
-      /// @param      [byte] init Initialization bytes / depends on key system
+      /// \anchor xbmcdrm_GetKeyRequest
+      /// Generate a key request, used for request/response exchange between the app and a license server
+      /// to obtain or release keys used to decrypt encrypted content.
+      /// After the app has received the key request response from the server,
+      /// it should deliver to the response to the MediaDrm instance using 
+      /// the method provideKeyResponse, to activate the keys.
+      ///
+      /// @param      [byte] init     Initialization bytes container-specific data,
+      ///                             its meaning is interpreted based on the mime type provided 
+      ///                             in the mimeType parameter. It could contain, for example,
+      ///                             the content ID, key ID or other data required in generating the key request.
       /// @param      String mimeType Type of media which is xchanged, e.g. application/xml, video/mp4
-      /// @param      bool offlineKey Persistant (offline) or temporary (streaming) key
-      /// @param      [map] optionalParameters optional parameters / depends on key system
+      /// @param      bool offlineKey Specifes the type of the request.
+      ///                             The request may be to acquire keys for Streaming or Offline content
+      /// @param      [map] optionalParameters optional Will be included in the key request message to allow a client application 
+      ///                                               to provide additional message parameters to the server
       ///
-      /// @return     opaque key request data (challenge) which is send to key server
+      /// @return     The opaque key request data (challenge) which is send to key server
       ///
       ///------------------------------------------------------------------------
       /// @python_v18 New function added.
+      /// @python_v19 With python 3 for the init param is needed to pass bytearray instead of byte.
       ///
       GetKeyRequest(...);
 #else
@@ -82,6 +122,7 @@ namespace XBMCAddon
       /// \ingroup python_xbmcdrm
       /// @brief \python_func{ GetPropertyString(name) }
       ///-----------------------------------------------------------------------
+      /// \anchor xbmcdrm_GetPropertyString
       /// Request a system specific property value of the DRM system
       ///
       /// @param      String Name name of the property to query
@@ -101,15 +142,17 @@ namespace XBMCAddon
       /// \ingroup python_xbmcdrm
       /// @brief \python_func{ ProvideKeyResponse(response) }
       ///-----------------------------------------------------------------------
+      /// \anchor xbmcdrm_ProvideKeyResponse
       /// Provide key data returned from key server. See getKeyRequest(...)
       ///
       /// @param      [byte] response Key data returned from key server
       ///
-      /// @return     String If offline keays are requested, a keySetId which can be used later
-      ///                    with restoreKeys, empty for online / streaming) keys.
+      /// @return     String If the response is for an offline key requests a keySetId which can be used later
+      ///                    with restoreKeys, else return empty for streaming key requests.
       ///
       ///------------------------------------------------------------------------
       /// @python_v18 New function added.
+      /// @python_v19 With python 3 for the response argument is needed to pass bytearray instead of byte.
       ///
       ProvideKeyResponse(...);
 #else
@@ -140,9 +183,11 @@ namespace XBMCAddon
       /// \ingroup python_xbmcdrm
       /// @brief \python_func{ RestoreKeys(keySetId) }
       ///-----------------------------------------------------------------------
-      /// restores keys stored during previous provideKeyResponse call.
+      /// \anchor xbmcdrm_RestoreKeys
+      /// restores session keys stored during previous provideKeyResponse call.
       ///
-      /// @param      String keySetId
+      /// @param      String keySetId Identifies the saved key set to restore.
+      ///                             This value must never be null.
       ///
       /// @return     None
       ///
@@ -159,12 +204,11 @@ namespace XBMCAddon
       /// \ingroup python_xbmcdrm
       /// @brief \python_func{ SetPropertyString(name, value) }
       ///-----------------------------------------------------------------------
-      /// Sets a system specific property value in the DRM system
-      ///
-      /// @param      String name   Name of the property to query
-      /// @param      String value  Value of the property to query
+      /// \anchor xbmcdrm_SetPropertyString
+      /// Set a system specific property value in the DRM system
       ///
-      /// @return     Value of the requested property
+      /// @param      String name   Name of the property. This value must never be null.
+      /// @param      String value  Value of the property to set. This value must never be null.
       ///
       ///------------------------------------------------------------------------
       /// @python_v18 New function added.
@@ -181,16 +225,18 @@ namespace XBMCAddon
       /// \ingroup python_xbmcdrm
       /// @brief \python_func{ Decrypt(cipherKeyId, input, iv) }
       ///-----------------------------------------------------------------------
+      /// \anchor xbmcdrm_Decrypt
       /// Sets a system specific property value in the DRM system
       ///
-      /// @param      [byte] cipherKeyId
-      /// @param      [byte] input
-      /// @param      [byte] iv
+      /// @param      [byte] cipherKeyId Encryption key id (provided from a service handshake)
+      /// @param      [byte] input       Cipher text to decrypt
+      /// @param      [byte] iv          Initialization vector of cipher text
       ///
       /// @return     Decrypted input data
       ///
       ///------------------------------------------------------------------------
       /// @python_v18 New function added.
+      /// @python_v19 With python 3 for all arguments is needed to pass bytearray instead of byte.
       ///
       Decrypt(...);
 #else
@@ -202,16 +248,18 @@ namespace XBMCAddon
       /// \ingroup python_xbmcdrm
       /// @brief \python_func{ Encrypt(cipherKeyId, input, iv) }
       ///-----------------------------------------------------------------------
+      /// \anchor xbmcdrm_Encrypt
       /// Sets a system specific property value in the DRM system
       ///
-      /// @param      [byte] cipherKeyId
-      /// @param      [byte] input
-      /// @param      [byte] iv
+      /// @param      [byte] cipherKeyId Encryption key id (provided from a service handshake)
+      /// @param      [byte] input       Encrypted text
+      /// @param      [byte] iv          Initialization vector of encrypted text
       ///
       /// @return     Encrypted input data
       ///
       ///------------------------------------------------------------------------
       /// @python_v18 New function added.
+      /// @python_v19 With python 3 is needed to pass bytearray instead of byte.
       ///
       Encrypt(...);
 #else
@@ -223,15 +271,17 @@ namespace XBMCAddon
       /// \ingroup python_xbmcdrm
       /// @brief \python_func{ Sign(macKeyId, message) }
       ///-----------------------------------------------------------------------
-      /// Sets a system specific property value in the DRM system
+      /// \anchor xbmcdrm_Sign
+      /// Generate an DRM encrypted signature for a text message
       ///
-      /// @param      [byte] macKeyId
-      /// @param      [byte] message
+      /// @param      [byte] macKeyId  HMAC key id (provided from a service handshake)
+      /// @param      [byte] message   Message text on which to base the signature 
       ///
       /// @return     [byte] Signature
       ///
       ///------------------------------------------------------------------------
       /// @python_v18 New function added.
+      /// @python_v19 With python 3 for all arguments is needed to pass bytearray instead of byte.
       ///
       Sign(...);
 #else
@@ -243,16 +293,18 @@ namespace XBMCAddon
       /// \ingroup python_xbmcdrm
       /// @brief \python_func{ Verify(macKeyId, message, signature) }
       ///-----------------------------------------------------------------------
-      /// Sets a system specific property value in the DRM system
+      /// \anchor xbmcdrm_Verify
+      /// Verify the validity of a DRM signature of a text message
       ///
-      /// @param      [byte] macKeyId
-      /// @param      [byte] message
-      /// @param      [byte] signature
+      /// @param      [byte] macKeyId  HMAC key id (provided from a service handshake)
+      /// @param      [byte] message   Message text on which the signature is based
+      /// @param      [byte] signature The signature to verify
       ///
-      /// @return     true if message verification succeded
+      /// @return     true when the signature is valid
       ///
       ///------------------------------------------------------------------------
       /// @python_v18 New function added.
+      /// @python_v19 With python 3 for all arguments is needed to pass bytearray instead of byte.
       ///
       Verify(...);
 #else
@@ -260,6 +312,6 @@ namespace XBMCAddon
 #endif
 
     };
-    //@}
+    ///@}
   }
 }
