From 6290693bc352171c1db075757d5d2a15242d34c4 Mon Sep 17 00:00:00 2001
From: arnova <arnova@void.org>
Date: Fri, 17 Jan 2020 10:46:36 +0100
Subject: [PATCH] fixed: File cache logic for reading from source

---
 xbmc/filesystem/FileCache.cpp | 7 +++----
 1 file changed, 3 insertions(+), 4 deletions(-)

diff --git a/xbmc/filesystem/FileCache.cpp b/xbmc/filesystem/FileCache.cpp
index 1f8738568593..8a356477d68b 100644
--- a/xbmc/filesystem/FileCache.cpp
+++ b/xbmc/filesystem/FileCache.cpp
@@ -240,7 +240,6 @@ void CFileCache::Process()
 
   CWriteRate limiter;
   CWriteRate average;
-  bool cacheReachEOF = false;
 
   while (!m_bStop)
   {
@@ -252,7 +251,7 @@ void CFileCache::Process()
     {
       m_seekEvent.Reset();
       int64_t cacheMaxPos = m_pCache->CachedDataEndPosIfSeekTo(m_seekPos);
-      cacheReachEOF = (cacheMaxPos == m_fileSize);
+      const bool cacheReachEOF = (cacheMaxPos == m_fileSize);
       bool sourceSeekFailed = false;
       if (!cacheReachEOF)
       {
@@ -315,7 +314,7 @@ void CFileCache::Process()
     /* Only read from source if there's enough write space in the cache
      * else we may keep disposing data and seeking back on (slow) source
      */
-    if (maxWrite < maxSourceRead && !cacheReachEOF)
+    if (maxWrite < maxSourceRead)
     {
       // Wait until sufficient cache write space is available
       m_pCache->m_space.WaitMSec(5);
@@ -323,7 +322,7 @@ void CFileCache::Process()
     }
 
     ssize_t iRead = 0;
-    if (!cacheReachEOF)
+    if (maxSourceRead > 0)
       iRead = m_source.Read(buffer.get(), maxSourceRead);
     if (iRead == 0)
     {
