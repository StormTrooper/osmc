From ade16f0439e2533463e9c78ace153cad57770779 Mon Sep 17 00:00:00 2001
From: mglae <mglmail@arcor.de>
Date: Sun, 20 Jan 2019 17:21:14 +0100
Subject: [PATCH] [CryptThreading] Support CRYPTO_THREADID_set_callback() of
 OpenSSL 1.0.x

---
 xbmc/utils/CryptThreading.cpp | 17 +++++++++++++++++
 1 file changed, 17 insertions(+)

diff --git a/xbmc/utils/CryptThreading.cpp b/xbmc/utils/CryptThreading.cpp
index c0a2c3e02ca2..e604d6363b07 100644
--- a/xbmc/utils/CryptThreading.cpp
+++ b/xbmc/utils/CryptThreading.cpp
@@ -12,7 +12,10 @@
 
 #include <openssl/crypto.h>
 
+//! @todo Remove support for OpenSSL <1.0 in v19
+
 #define KODI_OPENSSL_NEEDS_LOCK_CALLBACK (OPENSSL_VERSION_NUMBER < 0x10100000L)
+#define KODI_OPENSSL_USE_THREADID (OPENSSL_VERSION_NUMBER >= 0x10000000L)
 
 #if KODI_OPENSSL_NEEDS_LOCK_CALLBACK
 namespace
@@ -31,11 +34,19 @@ void lock_callback(int mode, int type, const char* file, int line)
     getlock(type)->unlock();
 }
 
+#if KODI_OPENSSL_USE_THREADID
+void thread_id(CRYPTO_THREADID* tid)
+{
+  // C-style cast required due to vastly differing native ID return types
+  CRYPTO_THREADID_set_numeric(tid, (unsigned long)CThread::GetCurrentThreadId());
+}
+#else
 unsigned long thread_id()
 {
   // C-style cast required due to vastly differing native ID return types
   return (unsigned long)CThread::GetCurrentThreadId();
 }
+#endif
 
 }
 #endif
@@ -46,7 +57,11 @@ CryptThreadingInitializer::CryptThreadingInitializer()
   // OpenSSL < 1.1 needs integration code to support multi-threading
   // This is absolutely required for libcurl if it uses the OpenSSL backend
   m_locks.resize(CRYPTO_num_locks());
+#if KODI_OPENSSL_USE_THREADID
+  CRYPTO_THREADID_set_callback(thread_id);
+#else
   CRYPTO_set_id_callback(thread_id);
+#endif
   CRYPTO_set_locking_callback(lock_callback);
 #endif
 }
@@ -55,7 +70,9 @@ CryptThreadingInitializer::~CryptThreadingInitializer()
 {
 #if KODI_OPENSSL_NEEDS_LOCK_CALLBACK
   CSingleLock l(m_locksLock);
+#if !KODI_OPENSSL_USE_THREADID
   CRYPTO_set_id_callback(nullptr);
+#endif
   CRYPTO_set_locking_callback(nullptr);
   m_locks.clear();
 #endif
