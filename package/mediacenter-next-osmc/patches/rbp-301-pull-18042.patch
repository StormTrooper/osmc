From 890ca6ecc1117f351fdae66d8b227767770a8492 Mon Sep 17 00:00:00 2001
From: peak3d <pfau@peak3d.de>
Date: Thu, 11 Jun 2020 18:51:32 +0200
Subject: [PATCH 1/2] Ensure GUI thread in CDialogProgress::Open()

---
 xbmc/dialogs/GUIDialogBusy.cpp         |  2 +-
 xbmc/dialogs/GUIDialogBusy.h           |  2 +-
 xbmc/dialogs/GUIDialogBusyNoCancel.cpp |  3 ++-
 xbmc/dialogs/GUIDialogBusyNoCancel.h   |  2 +-
 xbmc/dialogs/GUIDialogProgress.cpp     |  2 +-
 xbmc/guilib/GUIDialog.cpp              | 16 +++++++++-------
 xbmc/guilib/GUIDialog.h                |  2 +-
 xbmc/guilib/GUIWindowManager.cpp       |  2 +-
 8 files changed, 17 insertions(+), 14 deletions(-)

diff --git a/xbmc/dialogs/GUIDialogBusy.cpp b/xbmc/dialogs/GUIDialogBusy.cpp
index de65c5c471dd..2c8f0e0a6d00 100644
--- a/xbmc/dialogs/GUIDialogBusy.cpp
+++ b/xbmc/dialogs/GUIDialogBusy.cpp
@@ -109,7 +109,7 @@ CGUIDialogBusy::CGUIDialogBusy(void)
 
 CGUIDialogBusy::~CGUIDialogBusy(void) = default;
 
-void CGUIDialogBusy::Open_Internal(const std::string &param /* = "" */)
+void CGUIDialogBusy::Open_Internal(bool bProcessRenderLoop, const std::string& param /* = "" */)
 {
   m_bCanceled = false;
   m_bLastVisible = true;
diff --git a/xbmc/dialogs/GUIDialogBusy.h b/xbmc/dialogs/GUIDialogBusy.h
index 89caf913b173..42ba4916c3d0 100644
--- a/xbmc/dialogs/GUIDialogBusy.h
+++ b/xbmc/dialogs/GUIDialogBusy.h
@@ -47,7 +47,7 @@ class CGUIDialogBusy: public CGUIDialog
    */
   static bool WaitOnEvent(CEvent &event, unsigned int displaytime = 100, bool allowCancel = true);
 protected:
-  void Open_Internal(const std::string &param = "") override;
+  void Open_Internal(bool bProcessRenderLoop, const std::string& param = "") override;
   bool m_bCanceled;
   bool m_bLastVisible = false;
   float m_progress; ///< current progress
diff --git a/xbmc/dialogs/GUIDialogBusyNoCancel.cpp b/xbmc/dialogs/GUIDialogBusyNoCancel.cpp
index b8a7d892222f..84a09cda8f98 100644
--- a/xbmc/dialogs/GUIDialogBusyNoCancel.cpp
+++ b/xbmc/dialogs/GUIDialogBusyNoCancel.cpp
@@ -26,7 +26,8 @@ CGUIDialogBusyNoCancel::CGUIDialogBusyNoCancel(void)
 
 CGUIDialogBusyNoCancel::~CGUIDialogBusyNoCancel(void) = default;
 
-void CGUIDialogBusyNoCancel::Open_Internal(const std::string &param /* = "" */)
+void CGUIDialogBusyNoCancel::Open_Internal(bool bProcessRenderLoop,
+                                           const std::string& param /* = "" */)
 {
   m_bLastVisible = true;
   m_progress = -1;
diff --git a/xbmc/dialogs/GUIDialogBusyNoCancel.h b/xbmc/dialogs/GUIDialogBusyNoCancel.h
index cb492e065245..8f97674d1516 100644
--- a/xbmc/dialogs/GUIDialogBusyNoCancel.h
+++ b/xbmc/dialogs/GUIDialogBusyNoCancel.h
@@ -19,7 +19,7 @@ class CGUIDialogBusyNoCancel: public CGUIDialog
   void Render() override;
 
 protected:
-  void Open_Internal(const std::string &param = "") override;
+  void Open_Internal(bool bProcessRenderLoop, const std::string& param = "") override;
   bool m_bLastVisible = false;
   float m_progress;
 };
diff --git a/xbmc/dialogs/GUIDialogProgress.cpp b/xbmc/dialogs/GUIDialogProgress.cpp
index a64533b9b110..517e798dc647 100644
--- a/xbmc/dialogs/GUIDialogProgress.cpp
+++ b/xbmc/dialogs/GUIDialogProgress.cpp
@@ -70,7 +70,7 @@ void CGUIDialogProgress::Open(const std::string &param /* = "" */)
     ShowProgressBar(true);
   }
 
-  CGUIDialog::Open_Internal(false, param);
+  CGUIDialog::Open(false, param);
 
   while (m_active && IsAnimating(ANIM_TYPE_WINDOW_OPEN))
   {
diff --git a/xbmc/guilib/GUIDialog.cpp b/xbmc/guilib/GUIDialog.cpp
index 82fa313afbc2..4a103d6a729b 100644
--- a/xbmc/guilib/GUIDialog.cpp
+++ b/xbmc/guilib/GUIDialog.cpp
@@ -162,11 +162,6 @@ void CGUIDialog::UpdateVisibility()
   }
 }
 
-void CGUIDialog::Open_Internal(const std::string &param /* = "" */)
-{
-  CGUIDialog::Open_Internal(m_modalityType != DialogModalityType::MODELESS, param);
-}
-
 void CGUIDialog::Open_Internal(bool bProcessRenderLoop, const std::string &param /* = "" */)
 {
   // Lock graphic context here as it is sometimes called from non rendering threads
@@ -206,15 +201,22 @@ void CGUIDialog::Open_Internal(bool bProcessRenderLoop, const std::string &param
 }
 
 void CGUIDialog::Open(const std::string &param /* = "" */)
+{
+  CGUIDialog::Open(m_modalityType != DialogModalityType::MODELESS, param);
+}
+
+
+void CGUIDialog::Open(bool bProcessRenderLoop, const std::string& param /* = "" */)
 {
   if (!g_application.IsCurrentThread())
   {
     // make sure graphics lock is not held
     CSingleExit leaveIt(CServiceBroker::GetWinSystem()->GetGfxContext());
-    CApplicationMessenger::GetInstance().SendMsg(TMSG_GUI_DIALOG_OPEN, -1, -1, static_cast<void*>(this), param);
+    CApplicationMessenger::GetInstance().SendMsg(TMSG_GUI_DIALOG_OPEN, -1, bProcessRenderLoop,
+                                                 static_cast<void*>(this), param);
   }
   else
-    Open_Internal(param);
+    Open_Internal(bProcessRenderLoop, param);
 }
 
 void CGUIDialog::Render()
diff --git a/xbmc/guilib/GUIDialog.h b/xbmc/guilib/GUIDialog.h
index ff7fbd47cc77..fca634264ec6 100644
--- a/xbmc/guilib/GUIDialog.h
+++ b/xbmc/guilib/GUIDialog.h
@@ -45,6 +45,7 @@ class CGUIDialog :
   void Render() override;
 
   void Open(const std::string &param = "");
+  void Open(bool bProcessRenderLoop, const std::string& param = "");
 
   bool OnBack(int actionID) override;
 
@@ -67,7 +68,6 @@ class CGUIDialog :
   using CGUIWindow::UpdateVisibility;
   virtual void UpdateVisibility();
 
-  virtual void Open_Internal(const std::string &param = "");
   virtual void Open_Internal(bool bProcessRenderLoop, const std::string &param = "");
   void OnDeinitWindow(int nextWindowID) override;
 
diff --git a/xbmc/guilib/GUIWindowManager.cpp b/xbmc/guilib/GUIWindowManager.cpp
index 34eaf0563ddc..d476cecd8e91 100644
--- a/xbmc/guilib/GUIWindowManager.cpp
+++ b/xbmc/guilib/GUIWindowManager.cpp
@@ -886,7 +886,7 @@ void CGUIWindowManager::OnApplicationMessage(ThreadMessage* pMsg)
   case TMSG_GUI_DIALOG_OPEN:
   {
     if (pMsg->lpVoid)
-      static_cast<CGUIDialog*>(pMsg->lpVoid)->Open(pMsg->strParam);
+      static_cast<CGUIDialog*>(pMsg->lpVoid)->Open(pMsg->param2, pMsg->strParam);
     else
     {
       CGUIDialog* pDialog = static_cast<CGUIDialog*>(GetWindow(pMsg->param1));

From 3f9f6324cb3c597a5a9f6a20b30fab4646ea921a Mon Sep 17 00:00:00 2001
From: peak3d <pfau@peak3d.de>
Date: Thu, 11 Jun 2020 18:52:05 +0200
Subject: [PATCH 2/2] Remove locks which should not be there now

---
 xbmc/guilib/GUIDialog.cpp         | 6 ------
 xbmc/windowing/GraphicContext.cpp | 2 --
 2 files changed, 8 deletions(-)

diff --git a/xbmc/guilib/GUIDialog.cpp b/xbmc/guilib/GUIDialog.cpp
index 4a103d6a729b..56ec5f008be6 100644
--- a/xbmc/guilib/GUIDialog.cpp
+++ b/xbmc/guilib/GUIDialog.cpp
@@ -164,10 +164,6 @@ void CGUIDialog::UpdateVisibility()
 
 void CGUIDialog::Open_Internal(bool bProcessRenderLoop, const std::string &param /* = "" */)
 {
-  // Lock graphic context here as it is sometimes called from non rendering threads
-  // maybe we should have a critical section per window instead??
-  CSingleLock lock(CServiceBroker::GetWinSystem()->GetGfxContext());
-
   if (!CServiceBroker::GetGUI()->GetWindowManager().Initialized() ||
       (m_active && !m_closing && !IsAnimating(ANIM_TYPE_WINDOW_CLOSE)))
     return;
@@ -190,8 +186,6 @@ void CGUIDialog::Open_Internal(bool bProcessRenderLoop, const std::string &param
     if (!m_windowLoaded)
       Close(true);
 
-    lock.Leave();
-
     while (m_active)
     {
       if (!CServiceBroker::GetGUI()->GetWindowManager().ProcessRenderLoop(false))
diff --git a/xbmc/windowing/GraphicContext.cpp b/xbmc/windowing/GraphicContext.cpp
index 7bf1537f35cc..653e913a1a4a 100644
--- a/xbmc/windowing/GraphicContext.cpp
+++ b/xbmc/windowing/GraphicContext.cpp
@@ -711,8 +711,6 @@ void CGraphicContext::GetGUIScaling(const RESOLUTION_INFO &res, float &scaleX, f
 
 void CGraphicContext::SetScalingResolution(const RESOLUTION_INFO &res, bool needsScaling)
 {
-  CSingleLock lock(*this);
-
   m_windowResolution = res;
   if (needsScaling && m_Resolution != RES_INVALID)
     GetGUIScaling(res, m_guiTransform.scaleX, m_guiTransform.scaleY, &m_guiTransform.matrix);
