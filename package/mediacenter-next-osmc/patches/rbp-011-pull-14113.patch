From b76a92317230c950a858d7ab5396c09a3401a004 Mon Sep 17 00:00:00 2001
From: Lukas Rusak <lorusak@gmail.com>
Date: Mon, 25 Jun 2018 14:09:40 -0700
Subject: [PATCH 1/4] windowing/gbm: plane selection rework

This rework now allows us to find a dedicated plane for video
and a dedicated plane for the gui. Before we would swap the gui
back and forth between planes depending if a video was playing.
That behaviour isn't needed and now we can run the gui on the overlay
full time.

We have to track the fb format and use an alpha format when a
video is playing and a non-alpha format when no video is playing.
When the format changes the fb is validated and destroyed so a new
fb can be created.

This also allows us to add dependencies to the primary plane. For example
in the DRMPRIME renderer we can disable it if no primary plane is available.

We check for three formats currently:
1) YUV420 -> for RPi
2) YUYV   -> for i.MX6
3) NV12   -> for basically everything else

more formats can be added in the future if needed.
---
 xbmc/windowing/gbm/DRMAtomic.cpp |  44 ++++-----
 xbmc/windowing/gbm/DRMUtils.cpp  | 194 ++++++++++++++++-----------------------
 xbmc/windowing/gbm/DRMUtils.h    |  13 ++-
 3 files changed, 112 insertions(+), 139 deletions(-)

diff --git a/xbmc/windowing/gbm/DRMAtomic.cpp b/xbmc/windowing/gbm/DRMAtomic.cpp
index 88fb98eca62a..d143e2d2ab01 100644
--- a/xbmc/windowing/gbm/DRMAtomic.cpp
+++ b/xbmc/windowing/gbm/DRMAtomic.cpp
@@ -32,10 +32,11 @@
 #include "DRMAtomic.h"
 #include "WinSystemGbmGLESContext.h"
 
+#include <drm_fourcc.h>
+
 void CDRMAtomic::DrmAtomicCommit(int fb_id, int flags, bool rendered, bool videoLayer)
 {
   uint32_t blob_id;
-  struct plane *plane;
 
   if (flags & DRM_MODE_ATOMIC_ALLOW_MODESET)
   {
@@ -58,38 +59,26 @@ void CDRMAtomic::DrmAtomicCommit(int fb_id, int flags, bool rendered, bool video
     {
       return;
     }
-
-    if (!videoLayer)
-    {
-      // disable overlay plane on modeset
-      AddProperty(m_overlay_plane, "FB_ID", 0);
-      AddProperty(m_overlay_plane, "CRTC_ID", 0);
-    }
   }
 
-  if (videoLayer)
-    plane = m_overlay_plane;
-  else
-    plane = m_primary_plane;
-
   if (rendered)
   {
-    AddProperty(plane, "FB_ID", fb_id);
-    AddProperty(plane, "CRTC_ID", m_crtc->crtc->crtc_id);
-    AddProperty(plane, "SRC_X", 0);
-    AddProperty(plane, "SRC_Y", 0);
-    AddProperty(plane, "SRC_W", m_width << 16);
-    AddProperty(plane, "SRC_H", m_height << 16);
-    AddProperty(plane, "CRTC_X", 0);
-    AddProperty(plane, "CRTC_Y", 0);
-    AddProperty(plane, "CRTC_W", m_mode->hdisplay);
-    AddProperty(plane, "CRTC_H", m_mode->vdisplay);
+    AddProperty(m_overlay_plane, "FB_ID", fb_id);
+    AddProperty(m_overlay_plane, "CRTC_ID", m_crtc->crtc->crtc_id);
+    AddProperty(m_overlay_plane, "SRC_X", 0);
+    AddProperty(m_overlay_plane, "SRC_Y", 0);
+    AddProperty(m_overlay_plane, "SRC_W", m_width << 16);
+    AddProperty(m_overlay_plane, "SRC_H", m_height << 16);
+    AddProperty(m_overlay_plane, "CRTC_X", 0);
+    AddProperty(m_overlay_plane, "CRTC_Y", 0);
+    AddProperty(m_overlay_plane, "CRTC_W", m_mode->hdisplay);
+    AddProperty(m_overlay_plane, "CRTC_H", m_mode->vdisplay);
   }
   else if (videoLayer && !CServiceBroker::GetGUI()->GetWindowManager().HasVisibleControls())
   {
     // disable gui plane when video layer is active and gui has no visible controls
-    AddProperty(plane, "FB_ID", 0);
-    AddProperty(plane, "CRTC_ID", 0);
+    AddProperty(m_overlay_plane, "FB_ID", 0);
+    AddProperty(m_overlay_plane, "CRTC_ID", 0);
   }
 
   auto ret = drmModeAtomicCommit(m_fd, m_req, flags | DRM_MODE_ATOMIC_TEST_ONLY, nullptr);
@@ -130,6 +119,11 @@ void CDRMAtomic::FlipPage(struct gbm_bo *bo, bool rendered, bool videoLayer)
 
   if (rendered)
   {
+    if (videoLayer)
+      m_overlay_plane->format = DRM_FORMAT_ARGB8888;
+    else
+      m_overlay_plane->format = DRM_FORMAT_XRGB8888;
+
     drm_fb = CDRMUtils::DrmFbGetFromBo(bo);
     if (!drm_fb)
     {
diff --git a/xbmc/windowing/gbm/DRMUtils.cpp b/xbmc/windowing/gbm/DRMUtils.cpp
index ccc20d8c9f62..70c9cffff8cd 100644
--- a/xbmc/windowing/gbm/DRMUtils.cpp
+++ b/xbmc/windowing/gbm/DRMUtils.cpp
@@ -24,7 +24,6 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
-#include <drm_fourcc.h>
 #include <drm_mode.h>
 #include <EGL/egl.h>
 #include <unistd.h>
@@ -73,13 +72,14 @@ void CDRMUtils::DrmFbDestroyCallback(struct gbm_bo *bo, void *data)
 {
   struct drm_fb *fb = static_cast<drm_fb *>(data);
 
-  if(fb->fb_id)
+  if (fb->fb_id > 0)
   {
+    CLog::Log(LOGDEBUG, "CDRMUtils::%s - removing framebuffer: %d", __FUNCTION__, fb->fb_id);
     int drm_fd = gbm_device_get_fd(gbm_bo_get_device(bo));
     drmModeRmFB(drm_fd, fb->fb_id);
   }
 
-  delete (fb);
+  delete fb;
 }
 
 drm_fb * CDRMUtils::DrmFbGetFromBo(struct gbm_bo *bo)
@@ -88,12 +88,16 @@ drm_fb * CDRMUtils::DrmFbGetFromBo(struct gbm_bo *bo)
     struct drm_fb *fb = static_cast<drm_fb *>(gbm_bo_get_user_data(bo));
     if(fb)
     {
-      return fb;
+      if (m_overlay_plane->format == fb->format)
+        return fb;
+      else
+        DrmFbDestroyCallback(bo, gbm_bo_get_user_data(bo));
     }
   }
 
   struct drm_fb *fb = new drm_fb;
   fb->bo = bo;
+  fb->format = m_overlay_plane->format;
 
   uint32_t width,
            height,
@@ -111,7 +115,7 @@ drm_fb * CDRMUtils::DrmFbGetFromBo(struct gbm_bo *bo)
   auto ret = drmModeAddFB2(m_fd,
                            width,
                            height,
-                           m_primary_plane->format,
+                           fb->format,
                            handles,
                            strides,
                            offsets,
@@ -307,47 +311,66 @@ bool CDRMUtils::FindPreferredMode()
   return true;
 }
 
-bool CDRMUtils::FindPlanes()
+bool CDRMUtils::SupportsFormat(drmModePlanePtr plane, uint32_t format)
 {
-  drmModePlaneResPtr plane_resources;
-  uint32_t primary_plane_id = 0;
-  uint32_t overlay_plane_id = 0;
-  uint32_t fourcc = 0;
+  for (uint32_t i = 0; i < plane->count_formats; i++)
+    if (plane->formats[i] == format)
+      return true;
 
-  plane_resources = drmModeGetPlaneResources(m_fd);
-  if (!plane_resources)
-  {
-    CLog::Log(LOGERROR, "CDRMUtils::%s - drmModeGetPlaneResources failed: %s", __FUNCTION__, strerror(errno));
-    return false;
-  }
+  return false;
+}
 
-  for (uint32_t i = 0; i < plane_resources->count_planes; i++)
+drmModePlanePtr CDRMUtils::FindPlane(drmModePlaneResPtr resources, int crtc_index, int type)
+{
+  for (uint32_t i = 0; i < resources->count_planes; i++)
   {
-    uint32_t id = plane_resources->planes[i];
-    drmModePlanePtr plane = drmModeGetPlane(m_fd, id);
-    if (!plane)
-    {
-      CLog::Log(LOGERROR, "CDRMUtils::%s - drmModeGetPlane(%u) failed: %s", __FUNCTION__, id, strerror(errno));
-      continue;
-    }
+    drmModePlanePtr plane = drmModeGetPlane(m_fd, resources->planes[i]);
 
-    if (plane->possible_crtcs & (1 << m_crtc_index))
+    if (plane && plane->possible_crtcs & (1 << crtc_index))
     {
-      drmModeObjectPropertiesPtr props = drmModeObjectGetProperties(m_fd, id, DRM_MODE_OBJECT_PLANE);
+      drmModeObjectPropertiesPtr props = drmModeObjectGetProperties(m_fd, plane->plane_id, DRM_MODE_OBJECT_PLANE);
 
       for (uint32_t j = 0; j < props->count_props; j++)
       {
         drmModePropertyPtr p = drmModeGetProperty(m_fd, props->props[j]);
 
-        if ((strcmp(p->name, "type") == 0) && (props->prop_values[j] == DRM_PLANE_TYPE_PRIMARY) && (primary_plane_id == 0))
+        if ((strcmp(p->name, "type") == 0) && (props->prop_values[j] != DRM_PLANE_TYPE_CURSOR))
         {
-          CLog::Log(LOGDEBUG, "CDRMUtils::%s - found primary plane: %u", __FUNCTION__, id);
-          primary_plane_id = id;
-        }
-        else if ((strcmp(p->name, "type") == 0) && (props->prop_values[j] == DRM_PLANE_TYPE_OVERLAY) && (overlay_plane_id == 0))
-        {
-          CLog::Log(LOGDEBUG, "CDRMUtils::%s - found overlay plane: %u", __FUNCTION__, id);
-          overlay_plane_id = id;
+          switch (type)
+          {
+            case VIDEO_PLANE:
+            {
+              if (SupportsFormat(plane, DRM_FORMAT_NV12) ||
+                  SupportsFormat(plane, DRM_FORMAT_YUV420) ||
+                  SupportsFormat(plane, DRM_FORMAT_YUYV))
+              {
+                CLog::Log(LOGDEBUG, "CDRMUtils::%s - found video plane %u", __FUNCTION__, plane->plane_id);
+                drmModeFreeProperty(p);
+                drmModeFreeObjectProperties(props);
+                return plane;
+              }
+
+              break;
+            }
+            case GUI_PLANE:
+            {
+              uint32_t plane_id = 0;
+              if (m_primary_plane->plane)
+                plane_id = m_primary_plane->plane->plane_id;
+
+              if (plane->plane_id != plane_id &&
+                  SupportsFormat(plane, DRM_FORMAT_ARGB8888) &&
+                  SupportsFormat(plane, DRM_FORMAT_XRGB8888))
+              {
+                CLog::Log(LOGDEBUG, "CDRMUtils::%s - found gui plane %u", __FUNCTION__, plane->plane_id);
+                drmModeFreeProperty(p);
+                drmModeFreeObjectProperties(props);
+                return plane;
+              }
+
+              break;
+            }
+          }
         }
 
         drmModeFreeProperty(p);
@@ -359,93 +382,41 @@ bool CDRMUtils::FindPlanes()
     drmModeFreePlane(plane);
   }
 
-  drmModeFreePlaneResources(plane_resources);
+  CLog::Log(LOGWARNING, "CDRMUtils::%s - could not find plane", __FUNCTION__);
+  return nullptr;
+}
 
-  // primary plane
-  m_primary_plane->plane = drmModeGetPlane(m_fd, primary_plane_id);
-  if (!m_primary_plane->plane)
+bool CDRMUtils::FindPlanes()
+{
+  drmModePlaneResPtr plane_resources = drmModeGetPlaneResources(m_fd);
+  if (!plane_resources)
   {
-    CLog::Log(LOGERROR, "CDRMUtils::%s - could not get primary plane %u: %s", __FUNCTION__, primary_plane_id, strerror(errno));
+    CLog::Log(LOGERROR, "CDRMUtils::%s - drmModeGetPlaneResources failed: %s", __FUNCTION__, strerror(errno));
     return false;
   }
 
-  if (!GetProperties(m_fd, primary_plane_id, DRM_MODE_OBJECT_PLANE, m_primary_plane))
-  {
-    CLog::Log(LOGERROR, "CDRMUtils::%s - could not get primary plane %u properties: %s", __FUNCTION__, primary_plane_id, strerror(errno));
-    return false;
-  }
+  m_primary_plane->plane = FindPlane(plane_resources, m_crtc_index, VIDEO_PLANE);
+  m_overlay_plane->plane = FindPlane(plane_resources, m_crtc_index, GUI_PLANE);
 
-  for (uint32_t i = 0; i < m_primary_plane->plane->count_formats; i++)
+  drmModeFreePlaneResources(plane_resources);
+
+  // primary plane may not be available
+  if (m_primary_plane->plane)
   {
-    /* we want an alpha layer so break if we find one */
-    if (m_primary_plane->plane->formats[i] == DRM_FORMAT_XRGB8888)
-    {
-      fourcc = DRM_FORMAT_XRGB8888;
-      m_primary_plane->format = fourcc;
-    }
-    else if (m_primary_plane->plane->formats[i] == DRM_FORMAT_ARGB8888)
+    if (!GetProperties(m_fd, m_primary_plane->plane->plane_id, DRM_MODE_OBJECT_PLANE, m_primary_plane))
     {
-      fourcc = DRM_FORMAT_ARGB8888;
-      m_primary_plane->format = fourcc;
-      break;
+      CLog::Log(LOGERROR, "CDRMUtils::%s - could not get primary plane %u properties: %s", __FUNCTION__, m_primary_plane->plane->plane_id, strerror(errno));
+      return false;
     }
   }
 
-  if (fourcc == 0)
+  // overlay plane should always be available
+  if (!GetProperties(m_fd, m_overlay_plane->plane->plane_id, DRM_MODE_OBJECT_PLANE, m_overlay_plane))
   {
-    CLog::Log(LOGERROR, "CDRMUtils::%s - could not find a suitable primary plane format", __FUNCTION__);
+    CLog::Log(LOGERROR, "CDRMUtils::%s - could not get overlay plane %u properties: %s", __FUNCTION__, m_overlay_plane->plane->plane_id, strerror(errno));
     return false;
   }
 
-  CLog::Log(LOGDEBUG, "CDRMUtils::%s - primary plane format: %c%c%c%c", __FUNCTION__, fourcc, fourcc >> 8, fourcc >> 16, fourcc >> 24);
-
-  if (overlay_plane_id != 0)
-  {
-    // overlay plane
-    m_overlay_plane->plane = drmModeGetPlane(m_fd, overlay_plane_id);
-    if (!m_overlay_plane->plane)
-    {
-      CLog::Log(LOGERROR, "CDRMUtils::%s - could not get overlay plane %u: %s", __FUNCTION__, overlay_plane_id, strerror(errno));
-      return false;
-    }
-
-    if (!GetProperties(m_fd, overlay_plane_id, DRM_MODE_OBJECT_PLANE, m_overlay_plane))
-    {
-      CLog::Log(LOGERROR, "CDRMUtils::%s - could not get overlay plane %u properties: %s", __FUNCTION__, overlay_plane_id, strerror(errno));
-      return false;
-    }
-
-    fourcc = 0;
-
-    for (uint32_t i = 0; i < m_overlay_plane->plane->count_formats; i++)
-    {
-      /* we want an alpha layer so break if we find one */
-      if (m_overlay_plane->plane->formats[i] == DRM_FORMAT_XRGB8888)
-      {
-        fourcc = DRM_FORMAT_XRGB8888;
-        m_overlay_plane->format = fourcc;
-      }
-      else if(m_overlay_plane->plane->formats[i] == DRM_FORMAT_ARGB8888)
-      {
-        fourcc = DRM_FORMAT_ARGB8888;
-        m_overlay_plane->format = fourcc;
-        break;
-      }
-    }
-
-    if (fourcc == 0)
-    {
-      CLog::Log(LOGERROR, "CDRMUtils::%s - could not find a suitable overlay plane format", __FUNCTION__);
-      return false;
-    }
-
-    CLog::Log(LOGDEBUG, "CDRMUtils::%s - overlay plane format: %c%c%c%c", __FUNCTION__, fourcc, fourcc >> 8, fourcc >> 16, fourcc >> 24);
-  }
-  else
-  {
-    delete m_overlay_plane;
-    m_overlay_plane = m_primary_plane;
-  }
   return true;
 }
 
@@ -626,15 +597,12 @@ void CDRMUtils::DestroyDrm()
   drmModeFreePlane(m_primary_plane->plane);
   FreeProperties(m_primary_plane);
   delete m_primary_plane;
+  m_primary_plane = nullptr;
 
-  if (m_overlay_plane != m_primary_plane)
-  {
-    drmModeFreePlane(m_overlay_plane->plane);
-    FreeProperties(m_overlay_plane);
-    delete m_overlay_plane;
-  }
+  drmModeFreePlane(m_overlay_plane->plane);
+  FreeProperties(m_overlay_plane);
+  delete m_overlay_plane;
   m_overlay_plane = nullptr;
-  m_primary_plane = nullptr;
 }
 
 RESOLUTION_INFO CDRMUtils::GetResolutionInfo(drmModeModeInfoPtr mode)
diff --git a/xbmc/windowing/gbm/DRMUtils.h b/xbmc/windowing/gbm/DRMUtils.h
index f0f92e8d73c3..8fa3ae7c0909 100644
--- a/xbmc/windowing/gbm/DRMUtils.h
+++ b/xbmc/windowing/gbm/DRMUtils.h
@@ -20,6 +20,7 @@
 
 #pragma once
 
+#include <drm_fourcc.h>
 #include <xf86drm.h>
 #include <xf86drmMode.h>
 #include <gbm.h>
@@ -28,6 +29,12 @@
 #include "windowing/Resolution.h"
 #include "GBMUtils.h"
 
+enum EPLANETYPE
+{
+  VIDEO_PLANE,
+  GUI_PLANE
+};
+
 struct drm_object
 {
   uint32_t id = 0;
@@ -39,7 +46,7 @@ struct drm_object
 struct plane : drm_object
 {
   drmModePlanePtr plane = nullptr;
-  uint32_t format;
+  uint32_t format = DRM_FORMAT_XRGB8888;
 };
 
 struct connector : drm_object
@@ -61,6 +68,7 @@ struct drm_fb
 {
   struct gbm_bo *bo = nullptr;
   uint32_t fb_id;
+  uint32_t format;
 };
 
 class CDRMUtils
@@ -106,6 +114,9 @@ class CDRMUtils
   int m_height = 0;
 
 private:
+  static bool SupportsFormat(drmModePlanePtr plane, uint32_t format);
+  drmModePlanePtr FindPlane(drmModePlaneResPtr resources, int crtc_index, int type);
+
   bool GetResources();
   bool FindConnector();
   bool FindEncoder();

From 6a0efb52a5db5520b7e994409be2b69a848943c3 Mon Sep 17 00:00:00 2001
From: Lukas Rusak <lorusak@gmail.com>
Date: Mon, 25 Jun 2018 19:18:40 -0700
Subject: [PATCH 2/4] [VideoPlayer] RendererDRMPRIME: disable if no primary
 plane is available

---
 .../VideoRenderers/HwDecRender/RendererDRMPRIME.cpp        | 14 +++++++++++---
 .../VideoRenderers/HwDecRender/RendererDRMPRIME.h          |  2 +-
 2 files changed, 12 insertions(+), 4 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIME.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIME.cpp
index 5064b6826fad..7defce571e1d 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIME.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIME.cpp
@@ -25,6 +25,7 @@
 #include "cores/VideoPlayer/VideoRenderers/RenderFlags.h"
 #include "ServiceBroker.h"
 #include "settings/DisplaySettings.h"
+#include "settings/lib/Setting.h"
 #include "settings/Settings.h"
 #include "utils/log.h"
 #include "windowing/gbm/DRMAtomic.h"
@@ -55,10 +56,17 @@ CBaseRenderer* CRendererDRMPRIME::Create(CVideoBuffer* buffer)
   return nullptr;
 }
 
-bool CRendererDRMPRIME::Register()
+void CRendererDRMPRIME::Register()
 {
-  VIDEOPLAYER::CRendererFactory::RegisterRenderer("drm_prime", CRendererDRMPRIME::Create);
-  return true;
+  CWinSystemGbmGLESContext* winSystem = dynamic_cast<CWinSystemGbmGLESContext*>(CServiceBroker::GetWinSystem());
+  if (winSystem && winSystem->GetDrm()->GetPrimaryPlane()->plane)
+  {
+    VIDEOPLAYER::CRendererFactory::RegisterRenderer("drm_prime", CRendererDRMPRIME::Create);
+    return;
+  }
+
+  CServiceBroker::GetSettings().SetInt(SETTING_VIDEOPLAYER_USEPRIMERENDERER, 1);
+  CServiceBroker::GetSettings().GetSetting(SETTING_VIDEOPLAYER_USEPRIMERENDERER)->SetVisible(false);
 }
 
 bool CRendererDRMPRIME::Configure(const VideoPicture& picture, float fps, unsigned int orientation)
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIME.h b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIME.h
index de3944a8e9f3..c00d4fb2d599 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIME.h
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIME.h
@@ -33,7 +33,7 @@ class CRendererDRMPRIME
 
   // Registration
   static CBaseRenderer* Create(CVideoBuffer* buffer);
-  static bool Register();
+  static void Register();
 
   // Player functions
   bool Configure(const VideoPicture& picture, float fps, unsigned int orientation) override;

From 555cc288f75e654a1aa080577c1d5cf30b1707b2 Mon Sep 17 00:00:00 2001
From: Lukas Rusak <lorusak@gmail.com>
Date: Mon, 25 Jun 2018 19:19:00 -0700
Subject: [PATCH 3/4] [VideoPlayer] RendererDRMPRIMEGLES: change registration
 method to void

---
 .../VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIMEGLES.cpp    | 3 +--
 .../VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIMEGLES.h      | 2 +-
 2 files changed, 2 insertions(+), 3 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIMEGLES.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIMEGLES.cpp
index 8e7c151f26c0..afee2e3716a9 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIMEGLES.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIMEGLES.cpp
@@ -39,10 +39,9 @@ CBaseRenderer* CRendererDRMPRIMEGLES::Create(CVideoBuffer* buffer)
   return nullptr;
 }
 
-bool CRendererDRMPRIMEGLES::Register()
+void CRendererDRMPRIMEGLES::Register()
 {
   VIDEOPLAYER::CRendererFactory::RegisterRenderer("drm_prime_gles", CRendererDRMPRIMEGLES::Create);
-  return true;
 }
 
 bool CRendererDRMPRIMEGLES::Configure(const VideoPicture &picture, float fps, unsigned int orientation)
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIMEGLES.h b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIMEGLES.h
index 5d364f696878..f20a14da971d 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIMEGLES.h
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIMEGLES.h
@@ -31,7 +31,7 @@ class CRendererDRMPRIMEGLES : public CLinuxRendererGLES
 
   // Registration
   static CBaseRenderer* Create(CVideoBuffer* buffer);
-  static bool Register();
+  static void Register();
 
   // CLinuxRendererGLES overrides
   bool Configure(const VideoPicture &picture, float fps, unsigned int orientation) override;

From 11dd546674ad52c396015305b4109551a623caf0 Mon Sep 17 00:00:00 2001
From: Jonas Karlman <jonas@kwiboo.se>
Date: Thu, 28 Jun 2018 20:05:23 +0200
Subject: [PATCH 4/4] RendererDRMPRIME: require atomic drm

---
 .../HwDecRender/RendererDRMPRIME.cpp               | 38 +++++++---------------
 1 file changed, 12 insertions(+), 26 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIME.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIME.cpp
index 7defce571e1d..1fce1277b96e 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIME.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIME.cpp
@@ -59,7 +59,8 @@ CBaseRenderer* CRendererDRMPRIME::Create(CVideoBuffer* buffer)
 void CRendererDRMPRIME::Register()
 {
   CWinSystemGbmGLESContext* winSystem = dynamic_cast<CWinSystemGbmGLESContext*>(CServiceBroker::GetWinSystem());
-  if (winSystem && winSystem->GetDrm()->GetPrimaryPlane()->plane)
+  if (winSystem && winSystem->GetDrm()->GetPrimaryPlane()->plane &&
+      std::dynamic_pointer_cast<CDRMAtomic>(winSystem->GetDrm()))
   {
     VIDEOPLAYER::CRendererFactory::RegisterRenderer("drm_prime", CRendererDRMPRIME::Create);
     return;
@@ -258,30 +259,15 @@ void CRendererDRMPRIME::SetVideoPlane(CVideoBufferDRMPRIME* buffer)
     uint32_t src_w = buffer->GetWidth() << 16;
     uint32_t src_h = buffer->GetHeight() << 16;
 
-    if(std::dynamic_pointer_cast<CDRMAtomic>(m_DRM))
-    {
-      m_DRM->AddProperty(m_DRM->GetPrimaryPlane(), "FB_ID",   buffer->m_fb_id);
-      m_DRM->AddProperty(m_DRM->GetPrimaryPlane(), "CRTC_ID", m_DRM->GetCrtc()->crtc->crtc_id);
-      m_DRM->AddProperty(m_DRM->GetPrimaryPlane(), "SRC_X",   src_x);
-      m_DRM->AddProperty(m_DRM->GetPrimaryPlane(), "SRC_Y",   src_y);
-      m_DRM->AddProperty(m_DRM->GetPrimaryPlane(), "SRC_W",   src_w);
-      m_DRM->AddProperty(m_DRM->GetPrimaryPlane(), "SRC_H",   src_h);
-      m_DRM->AddProperty(m_DRM->GetPrimaryPlane(), "CRTC_X",  crtc_x);
-      m_DRM->AddProperty(m_DRM->GetPrimaryPlane(), "CRTC_Y",  crtc_y);
-      m_DRM->AddProperty(m_DRM->GetPrimaryPlane(), "CRTC_W",  crtc_w);
-      m_DRM->AddProperty(m_DRM->GetPrimaryPlane(), "CRTC_H",  crtc_h);
-    }
-    else
-    {
-      // show the video frame FB on the video plane
-      ret = drmModeSetPlane(m_DRM->GetFileDescriptor(), m_DRM->GetPrimaryPlane()->plane->plane_id, m_DRM->GetCrtc()->crtc->crtc_id, buffer->m_fb_id, 0,
-                            crtc_x, crtc_y, crtc_w, crtc_h,
-                            src_x, src_y, src_w, src_h);
-      if (ret < 0)
-      {
-        CLog::Log(LOGERROR, "CRendererDRMPRIME::%s - failed to set drm plane %d, buffer = %d, ret = %d", __FUNCTION__, m_DRM->GetPrimaryPlane()->plane->plane_id, buffer->m_fb_id, ret);
-        return;
-      }
-    }
+    m_DRM->AddProperty(m_DRM->GetPrimaryPlane(), "FB_ID",   buffer->m_fb_id);
+    m_DRM->AddProperty(m_DRM->GetPrimaryPlane(), "CRTC_ID", m_DRM->GetCrtc()->crtc->crtc_id);
+    m_DRM->AddProperty(m_DRM->GetPrimaryPlane(), "SRC_X",   src_x);
+    m_DRM->AddProperty(m_DRM->GetPrimaryPlane(), "SRC_Y",   src_y);
+    m_DRM->AddProperty(m_DRM->GetPrimaryPlane(), "SRC_W",   src_w);
+    m_DRM->AddProperty(m_DRM->GetPrimaryPlane(), "SRC_H",   src_h);
+    m_DRM->AddProperty(m_DRM->GetPrimaryPlane(), "CRTC_X",  crtc_x);
+    m_DRM->AddProperty(m_DRM->GetPrimaryPlane(), "CRTC_Y",  crtc_y);
+    m_DRM->AddProperty(m_DRM->GetPrimaryPlane(), "CRTC_W",  crtc_w);
+    m_DRM->AddProperty(m_DRM->GetPrimaryPlane(), "CRTC_H",  crtc_h);
   }
 }
