From 4bb1c4060118bc4b7a8005f1da79c0ea30e0d069 Mon Sep 17 00:00:00 2001
From: fritsch <Peter.Fruehberger@gmail.com>
Date: Thu, 12 Dec 2019 11:19:55 +0100
Subject: [PATCH] ProfileManager: Save changes when they happen

---
 xbmc/profiles/ProfileManager.cpp | 28 ++++++++++++++++++----------
 xbmc/profiles/ProfileManager.h   | 12 ++++++++++--
 2 files changed, 28 insertions(+), 12 deletions(-)

diff --git a/xbmc/profiles/ProfileManager.cpp b/xbmc/profiles/ProfileManager.cpp
index bae02564db11..14fbc3766332 100644
--- a/xbmc/profiles/ProfileManager.cpp
+++ b/xbmc/profiles/ProfileManager.cpp
@@ -281,7 +281,6 @@ bool CProfileManager::LoadProfile(unsigned int index)
       pWindow->ResetControlStates();
 
     UpdateCurrentProfileDate();
-    Save();
     FinalizeLoadProfile();
 
     return true;
@@ -361,7 +360,6 @@ bool CProfileManager::LoadProfile(unsigned int index)
   lock.Leave();
 
   UpdateCurrentProfileDate();
-  Save();
   FinalizeLoadProfile();
 
   m_profileLoadedForLogin = false;
@@ -580,19 +578,26 @@ int CProfileManager::GetProfileIndex(const std::string &name) const
 
 void CProfileManager::AddProfile(const CProfile &profile)
 {
-  CSingleLock lock(m_critical);
-  // data integrity check - covers off migration from old profiles.xml,
-  // incrementing of the m_nextIdProfile,and bad data coming in
-  m_nextProfileId = std::max(m_nextProfileId, profile.getId() + 1);
+  {
+    CSingleLock lock(m_critical);
+    // data integrity check - covers off migration from old profiles.xml,
+    // incrementing of the m_nextIdProfile,and bad data coming in
+    m_nextProfileId = std::max(m_nextProfileId, profile.getId() + 1);
 
-  m_profiles.push_back(profile);
+    m_profiles.push_back(profile);
+  }
+  Save();
 }
 
 void CProfileManager::UpdateCurrentProfileDate()
 {
   CSingleLock lock(m_critical);
   if (m_currentProfile < m_profiles.size())
+  {
     m_profiles[m_currentProfile].setDate();
+    CSingleExit exit(m_critical);
+    Save();
+  }
 }
 
 void CProfileManager::LoadMasterProfileForLogin()
@@ -723,7 +728,10 @@ void CProfileManager::OnSettingAction(std::shared_ptr<const CSetting> setting)
 
 void CProfileManager::SetCurrentProfileId(unsigned int profileId)
 {
-  CSingleLock lock(m_critical);
-  m_currentProfile = profileId;
-  CSpecialProtocol::SetProfilePath(GetProfileUserDataFolder());
+  {
+    CSingleLock lock(m_critical);
+    m_currentProfile = profileId;
+    CSpecialProtocol::SetProfilePath(GetProfileUserDataFolder());
+  }
+  Save();
 }
diff --git a/xbmc/profiles/ProfileManager.h b/xbmc/profiles/ProfileManager.h
index 89d4c9b236ed..14850d1091f5 100644
--- a/xbmc/profiles/ProfileManager.h
+++ b/xbmc/profiles/ProfileManager.h
@@ -108,7 +108,11 @@ class CProfileManager : protected ISettingsHandler,
   /*! \brief Toggle login screen use on and off
     Toggles the login screen state
     */
-  void ToggleLoginScreen() { m_usingLoginScreen = !m_usingLoginScreen; }
+  void ToggleLoginScreen()
+  {
+    m_usingLoginScreen = !m_usingLoginScreen;
+    Save();
+  }
 
   /*! \brief Are we the master user?
     \return true if the current profile is the master user, false otherwise
@@ -155,7 +159,11 @@ class CProfileManager : protected ISettingsHandler,
     used profile will be loaded
     \return the id to the autologin profile
     */
-  void SetAutoLoginProfileId(const int profileId) { m_autoLoginProfile = profileId; }
+  void SetAutoLoginProfileId(const int profileId)
+  {
+    m_autoLoginProfile = profileId;
+    Save();
+  }
 
   /*! \brief Retrieve the name of a particular profile by index
     \param profileId profile index for which to retrieve the name
