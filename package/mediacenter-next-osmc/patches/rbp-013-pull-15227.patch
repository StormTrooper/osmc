From c7486900069a9dc6628e08176f1d86a8d9a3e886 Mon Sep 17 00:00:00 2001
From: Dimitry Ishenko <dimitry.ishenko@gmail.com>
Date: Wed, 9 Jan 2019 12:20:21 -0500
Subject: [PATCH 1/5] CMusicDatabase: take CFileItem as argument in
 GetResumeBookmarkForAudioBook()

---
 xbmc/music/MusicDatabase.cpp              | 4 ++--
 xbmc/music/MusicDatabase.h                | 2 +-
 xbmc/music/windows/GUIWindowMusicBase.cpp | 4 ++--
 3 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/xbmc/music/MusicDatabase.cpp b/xbmc/music/MusicDatabase.cpp
index b609bdbc65b4..085063cef8b3 100644
--- a/xbmc/music/MusicDatabase.cpp
+++ b/xbmc/music/MusicDatabase.cpp
@@ -10750,10 +10750,10 @@ bool CMusicDatabase::SetResumeBookmarkForAudioBook(const CFileItem& item, int bo
   return ExecuteQuery(strSQL);
 }
 
-bool CMusicDatabase::GetResumeBookmarkForAudioBook(const std::string& path, int& bookmark)
+bool CMusicDatabase::GetResumeBookmarkForAudioBook(const CFileItem& item, int& bookmark)
 {
   std::string strSQL = PrepareSQL("SELECT bookmark FROM audiobook WHERE file='%s'",
-                                 path.c_str());
+                                 item.GetPath().c_str());
   if (!m_pDS->query(strSQL.c_str()) || m_pDS->num_rows() == 0)
     return false;
 
diff --git a/xbmc/music/MusicDatabase.h b/xbmc/music/MusicDatabase.h
index 9880f960e394..0025838b46f7 100644
--- a/xbmc/music/MusicDatabase.h
+++ b/xbmc/music/MusicDatabase.h
@@ -267,7 +267,7 @@ class CMusicDatabase : public CDatabase
   /////////////////////////////////////////////////
   bool AddAudioBook(const CFileItem& item);
   bool SetResumeBookmarkForAudioBook(const CFileItem& item, int bookmark);
-  bool GetResumeBookmarkForAudioBook(const std::string& path, int& bookmark);
+  bool GetResumeBookmarkForAudioBook(const CFileItem& item, int& bookmark);
 
   /*! \brief Checks if the given path is inside a folder that has already been scanned into the library
    \param path the path we want to check
diff --git a/xbmc/music/windows/GUIWindowMusicBase.cpp b/xbmc/music/windows/GUIWindowMusicBase.cpp
index d0b7650c1621..b11c5624cd66 100644
--- a/xbmc/music/windows/GUIWindowMusicBase.cpp
+++ b/xbmc/music/windows/GUIWindowMusicBase.cpp
@@ -554,7 +554,7 @@ void CGUIWindowMusicBase::GetContextButtons(int itemNumber, CContextButtons &but
         if (item->IsAudioBook())
         {
           int bookmark;
-          if (m_musicdatabase.GetResumeBookmarkForAudioBook(item->GetPath(), bookmark) && bookmark > 0)
+          if (m_musicdatabase.GetResumeBookmarkForAudioBook(*item, bookmark) && bookmark > 0)
             buttons.Add(CONTEXT_BUTTON_RESUME_ITEM, 39016);
         }
 
@@ -691,7 +691,7 @@ bool CGUIWindowMusicBase::OnContextButton(int itemNumber, CONTEXT_BUTTON button)
     {
       Update(item->GetPath());
       int bookmark;
-      m_musicdatabase.GetResumeBookmarkForAudioBook(item->GetPath(), bookmark);
+      m_musicdatabase.GetResumeBookmarkForAudioBook(*item, bookmark);
 
       auto itemIt = std::find_if(
         m_vecItems->cbegin(),

From 0f56cb9a6b80100b5775a74392cdb8abcdbc6ae0 Mon Sep 17 00:00:00 2001
From: Dimitry Ishenko <dimitry.ishenko@gmail.com>
Date: Wed, 9 Jan 2019 22:59:43 -0500
Subject: [PATCH 2/5] CMusicDatabase: use actual file path to identify
 bookmarks

---
 xbmc/music/MusicDatabase.cpp | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/xbmc/music/MusicDatabase.cpp b/xbmc/music/MusicDatabase.cpp
index 085063cef8b3..220799d684fa 100644
--- a/xbmc/music/MusicDatabase.cpp
+++ b/xbmc/music/MusicDatabase.cpp
@@ -10728,7 +10728,7 @@ bool CMusicDatabase::AddAudioBook(const CFileItem& item)
     item.GetMusicInfoTag()->GetAlbum().c_str(),
     artists.empty() ? "" : artists[0].c_str(),
     0,
-    item.GetPath().c_str(),
+    item.GetDynPath().c_str(),
     CDateTime::GetCurrentDateTime().GetAsDBDateTime().c_str()
   );
   return ExecuteQuery(strSQL);
@@ -10737,7 +10737,7 @@ bool CMusicDatabase::AddAudioBook(const CFileItem& item)
 bool CMusicDatabase::SetResumeBookmarkForAudioBook(const CFileItem& item, int bookmark)
 {
   std::string strSQL = PrepareSQL("select bookmark from audiobook where file='%s'",
-                                 item.GetPath().c_str());
+                                 item.GetDynPath().c_str());
   if (!m_pDS->query(strSQL.c_str()) || m_pDS->num_rows() == 0)
   {
     if (!AddAudioBook(item))
@@ -10745,7 +10745,7 @@ bool CMusicDatabase::SetResumeBookmarkForAudioBook(const CFileItem& item, int bo
   }
 
   strSQL = PrepareSQL("UPDATE audiobook SET bookmark=%i WHERE file='%s'",
-                      bookmark, item.GetPath().c_str());
+                      bookmark, item.GetDynPath().c_str());
 
   return ExecuteQuery(strSQL);
 }
@@ -10753,7 +10753,7 @@ bool CMusicDatabase::SetResumeBookmarkForAudioBook(const CFileItem& item, int bo
 bool CMusicDatabase::GetResumeBookmarkForAudioBook(const CFileItem& item, int& bookmark)
 {
   std::string strSQL = PrepareSQL("SELECT bookmark FROM audiobook WHERE file='%s'",
-                                 item.GetPath().c_str());
+                                 item.GetDynPath().c_str());
   if (!m_pDS->query(strSQL.c_str()) || m_pDS->num_rows() == 0)
     return false;
 

From 7c3d618d1d84ceca76f5f392f59d863070c7bff8 Mon Sep 17 00:00:00 2001
From: Dimitry Ishenko <dimitry.ishenko@gmail.com>
Date: Sun, 13 Jan 2019 23:55:35 -0500
Subject: [PATCH 3/5] CApplication: remove useless fallback conversion

CVariant string to double conversion was added in
1665dab7a4e9117abfd1f19fa93efd1359344971
---
 xbmc/Application.cpp | 7 ++-----
 1 file changed, 2 insertions(+), 5 deletions(-)

diff --git a/xbmc/Application.cpp b/xbmc/Application.cpp
index c5cd3c7cad7a..2dc0989ded0c 100644
--- a/xbmc/Application.cpp
+++ b/xbmc/Application.cpp
@@ -2802,12 +2802,9 @@ bool CApplication::PlayFile(CFileItem item, const std::string& player, bool bRes
 
   CPlayerOptions options;
 
-  if( item.HasProperty("StartPercent") )
+  if (item.HasProperty("StartPercent"))
   {
-    double fallback = 0.0f;
-    if(item.GetProperty("StartPercent").isString())
-      fallback = atof(item.GetProperty("StartPercent").asString().c_str());
-    options.startpercent = item.GetProperty("StartPercent").asDouble(fallback);
+    options.startpercent = item.GetProperty("StartPercent").asDouble();
     item.m_lStartOffset = 0;
   }
 

From ea3d9591049e663da141133a74e250f998c09127 Mon Sep 17 00:00:00 2001
From: Dimitry Ishenko <dimitry.ishenko@gmail.com>
Date: Tue, 15 Jan 2019 21:03:58 -0500
Subject: [PATCH 4/5] Fix audio book resume function

Bookmark is now passed in the "audiobook_bookmark" property instead of
"StartPercent". This avoids unnecessary conversions and doesn't
interfere with 23920fa247d9b3147b2276a15ca487637beac84b.
---
 xbmc/cores/paplayer/PAPlayer.cpp          | 19 +++++++++----------
 xbmc/music/windows/GUIWindowMusicBase.cpp | 20 ++++++++------------
 2 files changed, 17 insertions(+), 22 deletions(-)

diff --git a/xbmc/cores/paplayer/PAPlayer.cpp b/xbmc/cores/paplayer/PAPlayer.cpp
index 8f598394fbc5..5e2dca4d5d4f 100644
--- a/xbmc/cores/paplayer/PAPlayer.cpp
+++ b/xbmc/cores/paplayer/PAPlayer.cpp
@@ -230,9 +230,11 @@ bool PAPlayer::OpenFile(const CFileItem& file, const CPlayerOptions &options)
     CSingleLock lock(m_streamsLock);
     m_jobCounter++;
   }
-  CJobManager::GetInstance().Submit([this, file]() {
-    QueueNextFileEx(file, false);
-  }, this, CJob::PRIORITY_NORMAL);
+  CJobManager::GetInstance().Submit(
+    [=]() { QueueNextFileEx(file, false); },
+    this,
+    CJob::PRIORITY_NORMAL
+  );
 
   CSingleLock lock(m_streamsLock);
   if (m_streams.size() == 2)
@@ -257,12 +259,6 @@ bool PAPlayer::OpenFile(const CFileItem& file, const CPlayerOptions &options)
   m_callback.OnPlayBackStarted(file);
   m_signalStarted = false;
 
-  if (options.startpercent > 0.0)
-  {
-    Sleep(50);
-    SeekPercentage(options.startpercent);
-  }
-
   return true;
 }
 
@@ -373,7 +369,10 @@ bool PAPlayer::QueueNextFileEx(const CFileItem &file, bool fadeIn)
   si->m_finishing = false;
   si->m_framesSent = 0;
   si->m_seekNextAtFrame = 0;
-  si->m_seekFrame = -1;
+  if (si->m_fileItem.HasProperty("audiobook_bookmark"))
+    si->m_seekFrame = si->m_audioFormat.m_sampleRate * CUtil::ConvertMilliSecsToSecs(si->m_fileItem.GetProperty("audiobook_bookmark").asInteger());
+  else
+    si->m_seekFrame = -1;
   si->m_stream = NULL;
   si->m_volume = (fadeIn && m_upcomingCrossfadeMS) ? 0.0f : 1.0f;
   si->m_fadeOutTriggered = false;
diff --git a/xbmc/music/windows/GUIWindowMusicBase.cpp b/xbmc/music/windows/GUIWindowMusicBase.cpp
index b11c5624cd66..776361a82535 100644
--- a/xbmc/music/windows/GUIWindowMusicBase.cpp
+++ b/xbmc/music/windows/GUIWindowMusicBase.cpp
@@ -689,22 +689,18 @@ bool CGUIWindowMusicBase::OnContextButton(int itemNumber, CONTEXT_BUTTON button)
 
   case CONTEXT_BUTTON_RESUME_ITEM: //audiobooks
     {
-      Update(item->GetPath());
       int bookmark;
       m_musicdatabase.GetResumeBookmarkForAudioBook(*item, bookmark);
 
-      auto itemIt = std::find_if(
-        m_vecItems->cbegin(),
-        m_vecItems->cend(),
-        [&](const CFileItemPtr& item) { return bookmark <= item->m_lEndOffset; }
-      );
-      if (itemIt != m_vecItems->cend())
+      for (int i = 0; i < m_vecItems->Size(); ++i)
       {
-        CFileItem resItem(**itemIt);
-        resItem.SetProperty("StartPercent",
-          100.0 * (bookmark - resItem.m_lStartOffset) / (resItem.m_lEndOffset - resItem.m_lStartOffset)
-        );
-        g_application.PlayFile(resItem, "", false);
+        auto item = m_vecItems->Get(i);
+        if (bookmark < item->m_lEndOffset)
+        {
+          item->SetProperty("audiobook_bookmark", bookmark);
+          PlayItem(i);
+          break;
+        }
       }
     }
 

From 4e7b528187f10e1fed98bd77b95a1103c6da6d7a Mon Sep 17 00:00:00 2001
From: Dimitry Ishenko <dimitry.ishenko@gmail.com>
Date: Sat, 19 Jan 2019 15:24:48 -0500
Subject: [PATCH 5/5] Improve audio book bookmark handling

Instead of adding a context button to resume playback, pop up a small
dialog asking if the user wants to play the chapter or resume - similar
to how it's done for videos.
---
 xbmc/music/windows/GUIWindowMusicBase.cpp | 62 ++++++++++++++---------
 xbmc/music/windows/GUIWindowMusicBase.h   |  8 +++
 2 files changed, 47 insertions(+), 23 deletions(-)

diff --git a/xbmc/music/windows/GUIWindowMusicBase.cpp b/xbmc/music/windows/GUIWindowMusicBase.cpp
index 776361a82535..a371e046c9d8 100644
--- a/xbmc/music/windows/GUIWindowMusicBase.cpp
+++ b/xbmc/music/windows/GUIWindowMusicBase.cpp
@@ -551,12 +551,6 @@ void CGUIWindowMusicBase::GetContextButtons(int itemNumber, CContextButtons &but
         {
             buttons.Add(CONTEXT_BUTTON_PLAY_PARTYMODE, 15216); // Play in Partymode
         }
-        if (item->IsAudioBook())
-        {
-          int bookmark;
-          if (m_musicdatabase.GetResumeBookmarkForAudioBook(*item, bookmark) && bookmark > 0)
-            buttons.Add(CONTEXT_BUTTON_RESUME_ITEM, 39016);
-        }
 
         if (item->IsSmartPlayList() || m_vecItems->IsSmartPlayList())
           buttons.Add(CONTEXT_BUTTON_EDIT_SMART_PLAYLIST, 586);
@@ -687,23 +681,6 @@ bool CGUIWindowMusicBase::OnContextButton(int itemNumber, CONTEXT_BUTTON button)
       Refresh();
     return true;
 
-  case CONTEXT_BUTTON_RESUME_ITEM: //audiobooks
-    {
-      int bookmark;
-      m_musicdatabase.GetResumeBookmarkForAudioBook(*item, bookmark);
-
-      for (int i = 0; i < m_vecItems->Size(); ++i)
-      {
-        auto item = m_vecItems->Get(i);
-        if (bookmark < item->m_lEndOffset)
-        {
-          item->SetProperty("audiobook_bookmark", bookmark);
-          PlayItem(i);
-          break;
-        }
-      }
-    }
-
   default:
     break;
   }
@@ -1026,6 +1003,45 @@ bool CGUIWindowMusicBase::CanContainFilter(const std::string &strDirectory) cons
   return URIUtils::IsProtocol(strDirectory, "musicdb");
 }
 
+bool CGUIWindowMusicBase::OnSelect(int iItem)
+{
+  auto item = m_vecItems->Get(iItem);
+  if (item->IsAudioBook())
+  {
+    int bookmark;
+    if (m_musicdatabase.GetResumeBookmarkForAudioBook(*item, bookmark) && bookmark > 0)
+    {
+      // find which chapter the bookmark belongs to
+      auto itemIt = std::find_if(
+        m_vecItems->cbegin(),
+        m_vecItems->cend(),
+        [&](const CFileItemPtr& item) { return bookmark < item->m_lEndOffset; }
+      );
+
+      if (itemIt != m_vecItems->cend())
+      {
+        // ask the user if they want to play or resume
+        CContextButtons choices;
+        choices.Add(MUSIC_SELECT_ACTION_PLAY, 208); // 208 = Play
+        choices.Add(MUSIC_SELECT_ACTION_RESUME, StringUtils::Format(g_localizeStrings.Get(12022), // 12022 = Resume from ...
+          (*itemIt)->GetMusicInfoTag()->GetTitle().c_str()
+        ));
+
+        auto choice = CGUIDialogContextMenu::Show(choices);
+        if (choice == MUSIC_SELECT_ACTION_RESUME)
+        {
+          (*itemIt)->SetProperty("audiobook_bookmark", bookmark);
+          return CGUIMediaWindow::OnSelect(itemIt - m_vecItems->cbegin());
+        }
+        else if (choice < 0)
+          return true;
+      }
+    }
+  }
+
+  return CGUIMediaWindow::OnSelect(iItem);
+}
+
 void CGUIWindowMusicBase::OnInitWindow()
 {
   CGUIMediaWindow::OnInitWindow();
diff --git a/xbmc/music/windows/GUIWindowMusicBase.h b/xbmc/music/windows/GUIWindowMusicBase.h
index 61864c691c82..cb73c7adb8a3 100644
--- a/xbmc/music/windows/GUIWindowMusicBase.h
+++ b/xbmc/music/windows/GUIWindowMusicBase.h
@@ -22,6 +22,12 @@
 #include "music/MusicInfoLoader.h"
 #include "music/MusicThumbLoader.h"
 
+enum MusicSelectAction
+{
+    MUSIC_SELECT_ACTION_PLAY,
+    MUSIC_SELECT_ACTION_RESUME,
+};
+
 /*!
  \ingroup windows
  \brief The base class for music windows
@@ -76,6 +82,8 @@ class CGUIWindowMusicBase : public CGUIMediaWindow, public IBackgroundLoaderObse
   bool CheckFilterAdvanced(CFileItemList &items) const override;
   bool CanContainFilter(const std::string &strDirectory) const override;
 
+  bool OnSelect(int iItem) override;
+
   // new methods
   virtual void PlayItem(int iItem);
   bool OnPlayMedia(int iItem, const std::string &player = "") override;
