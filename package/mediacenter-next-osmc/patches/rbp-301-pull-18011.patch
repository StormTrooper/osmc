From efc887bcaee03af100003f2dbd605f59911b6a9d Mon Sep 17 00:00:00 2001
From: Vasyl Gello <vasek.gello@gmail.com>
Date: Fri, 5 Jun 2020 16:23:49 +0300
Subject: [PATCH] TestSysfsPath: Use unique file name for every test

Parallel execution of gtest / ctest exposed data race on
hardcoded file '/tmp/kodi-test'. Add nanosecond timestamp
to filename to mitigate an issue.

Signed-off-by: Vasyl Gello <vasek.gello@gmail.com>
---
 xbmc/platform/linux/test/TestSysfsPath.cpp | 42 +++++++++++++++++++---
 1 file changed, 37 insertions(+), 5 deletions(-)

diff --git a/xbmc/platform/linux/test/TestSysfsPath.cpp b/xbmc/platform/linux/test/TestSysfsPath.cpp
index d43b46a39d72..36613e330562 100644
--- a/xbmc/platform/linux/test/TestSysfsPath.cpp
+++ b/xbmc/platform/linux/test/TestSysfsPath.cpp
@@ -8,24 +8,44 @@
 
 #include "platform/linux/SysfsPath.h"
 
+#include <chrono>
+#include <string>
+#include <sstream>
 #include <fstream>
 
 #include <gtest/gtest.h>
 
 struct TestSysfsPath : public ::testing::Test
 {
-  ~TestSysfsPath() { std::remove("/tmp/kodi-test"); }
+  std::string GetTestFilePath()
+  {
+    using namespace std::chrono;
 
-  std::ofstream m_output{"/tmp/kodi-test"};
+    std::string tmpdir{"/tmp"};
+    const char *test_tmpdir = getenv("TMPDIR");
+    if (test_tmpdir && test_tmpdir[0] != '\0') {
+      tmpdir.assign(test_tmpdir);
+    }
+
+    std::stringstream ss;
+    unsigned long long timestamp = duration_cast< nanoseconds >(
+      system_clock::now().time_since_epoch()).count();
+
+    ss << tmpdir << "/kodi-test-" << timestamp;
+    return ss.str();
+  }
 };
 
 TEST_F(TestSysfsPath, SysfsPathTestInt)
 {
+  std::string filepath = GetTestFilePath();
+  std::ofstream m_output(filepath);
+
   int temp{1234};
   m_output << temp;
   m_output.close();
 
-  CSysfsPath path("/tmp/kodi-test");
+  CSysfsPath path(filepath);
   ASSERT_TRUE(path.Exists());
   EXPECT_EQ(path.Get<int>(), 1234);
   EXPECT_EQ(path.Get<float>(), 1234);
@@ -34,28 +54,40 @@ TEST_F(TestSysfsPath, SysfsPathTestInt)
   EXPECT_EQ(path.Get<uint16_t>(), 1234);
   EXPECT_EQ(path.Get<unsigned int>(), 1234);
   EXPECT_EQ(path.Get<unsigned long int>(), 1234);
+
+  std::remove(filepath.c_str());
 }
 
 TEST_F(TestSysfsPath, SysfsPathTestString)
 {
+  std::string filepath = GetTestFilePath();
+  std::ofstream m_output{filepath};
+
   std::string temp{"test"};
   m_output << temp;
   m_output.close();
 
-  CSysfsPath path("/tmp/kodi-test");
+  CSysfsPath path(filepath);
   ASSERT_TRUE(path.Exists());
   EXPECT_EQ(path.Get<std::string>(), "test");
+
+  std::remove(filepath.c_str());
 }
 
 TEST_F(TestSysfsPath, SysfsPathTestLongString)
 {
+  std::string filepath = GetTestFilePath();
+  std::ofstream m_output{filepath};
+
   std::string temp{"test with spaces"};
   m_output << temp;
   m_output.close();
 
-  CSysfsPath path("/tmp/kodi-test");
+  CSysfsPath path(filepath);
   ASSERT_TRUE(path.Exists());
   EXPECT_EQ(path.Get<std::string>(), "test with spaces");
+
+  std::remove(filepath.c_str());
 }
 
 TEST_F(TestSysfsPath, SysfsPathTestPathDoesNotExist)
