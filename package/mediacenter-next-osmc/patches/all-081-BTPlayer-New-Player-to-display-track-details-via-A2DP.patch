From e8281dea6803fdf26161371d3f4f63a7580cce2a Mon Sep 17 00:00:00 2001
From: Gerald Barker <gerald.barker@gmail.com>
Date: Tue, 26 Feb 2019 13:39:29 +0000
Subject: [PATCH] [BTPlayer] New Player to display track details via A2DP

---
 xbmc/cores/CMakeLists.txt                     |   2 +
 xbmc/cores/btplayer/BTPlayer.cpp              | 352 ++++++++++++++++++
 xbmc/cores/btplayer/BTPlayer.h                | 127 +++++++
 xbmc/cores/btplayer/CMakeLists.txt            |   5 +
 .../playercorefactory/PlayerCoreConfig.h      |   5 +
 .../playercorefactory/PlayerCoreFactory.cpp   |   7 +
 xbmc/platform/linux/DBusUtil.cpp              | 100 +++--
 xbmc/platform/linux/DBusUtil.h                |   3 +-
 8 files changed, 561 insertions(+), 40 deletions(-)
 create mode 100644 xbmc/cores/btplayer/BTPlayer.cpp
 create mode 100644 xbmc/cores/btplayer/BTPlayer.h
 create mode 100644 xbmc/cores/btplayer/CMakeLists.txt

diff --git a/xbmc/cores/CMakeLists.txt b/xbmc/cores/CMakeLists.txt
index 0b0389719a70..93856f30d240 100644
--- a/xbmc/cores/CMakeLists.txt
+++ b/xbmc/cores/CMakeLists.txt
@@ -13,4 +13,6 @@ if(CORE_PLATFORM_NAME_LC STREQUAL rbpi)
   add_subdirectory(omxplayer)
 endif()
 
+  add_subdirectory(btplayer)
+
 core_add_library(cores)
diff --git a/xbmc/cores/btplayer/BTPlayer.cpp b/xbmc/cores/btplayer/BTPlayer.cpp
new file mode 100644
index 000000000000..f0538b92f58a
--- /dev/null
+++ b/xbmc/cores/btplayer/BTPlayer.cpp
@@ -0,0 +1,352 @@
+/*
+ *      Copyright (C) 2005-2013 Team XBMC
+ *      http://xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "BTPlayer.h"
+#include "FileItem.h"
+#include "settings/AdvancedSettings.h"
+#include "settings/Settings.h"
+#include "music/tags/MusicInfoTag.h"
+#include "utils/log.h"
+#include "utils/JobManager.h"
+#include "messaging/ApplicationMessenger.h"
+#include "ServiceBroker.h"
+#include "cores/AudioEngine/Interfaces/IAudioCallback.h"
+#include "cores/AudioEngine/Interfaces/AE.h"
+
+#include "ServiceBroker.h"
+#include "cores/DataCacheCore.h"
+#include <unistd.h>
+
+using namespace MUSIC_INFO;
+using namespace KODI::MESSAGING;
+
+// BTPlayer: Bluetooth Player
+// A dummy player that lets Pulse and Kodi be friends without hassle
+
+
+BTPlayer::BTPlayer(IPlayerCallback& callback) :
+  IPlayer              (callback),
+  CThread              ("BTPlayer"),
+  m_signalSpeedChange  (false),
+  m_playbackSpeed      (1    ),
+  m_isPlaying          (false),
+  m_isPaused           (false),
+  m_isFinished         (false),
+  m_defaultCrossfadeMS (0),
+  m_upcomingCrossfadeMS(0),
+  m_audioCallback      (NULL ),
+  m_file               (NULL),
+  m_jobCounter         (0),
+  m_continueStream     (false),
+  m_bStop              (false)
+  
+{
+  memset(&m_playerGUIData, 0, sizeof(m_playerGUIData));
+}
+
+BTPlayer::~BTPlayer()
+{
+  CloseFile();
+  delete &m_file;
+}
+
+bool BTPlayer::OpenFile(const CFileItem& file, const CPlayerOptions &options)
+{
+  StopThread();
+  m_isPaused = false;
+  CLog::Log (LOGINFO, "DBus Path : %s", file.GetPath().c_str());
+#ifdef HAS_DBUS
+  m_dbus_path = file.GetPath();
+  m_dbus_errors = 0;
+#endif
+ /* Suspend AE temporarily so exclusive or hog-mode sinks */
+  /* don't block external player's access to audio device  */
+  CServiceBroker::GetActiveAE()->Suspend();
+  // wait for AE has completed suspended
+  XbmcThreads::EndTime timer(2000);
+  while (!timer.IsTimePast() && !CServiceBroker::GetActiveAE()->IsSuspended())
+  {
+    Sleep(50);
+  }
+  if (timer.IsTimePast())
+  {
+    CLog::Log(LOGERROR,"%s: AudioEngine did not suspend before launching BT player", __FUNCTION__);
+  }
+
+  if (!IsRunning())
+    Create();
+
+  /* trigger playback start */
+  m_isPlaying = true;
+  m_startEvent.Set();
+  return true;
+}
+
+bool BTPlayer::QueueNextFile(const CFileItem &file)
+{
+  {
+    CSingleLock lock(m_streamsLock);
+    m_jobCounter++;
+  }
+  return true;
+}
+
+bool BTPlayer::CloseFile(bool reopen)
+{
+  CLog::Log(LOGDEBUG, "BTPlayer::CloseFile");
+  m_bStop = true;
+#ifdef HAS_DBUS
+  m_dbus_path.clear();
+#endif
+  StopThread(true);
+  CSingleLock lock(m_streamsLock);
+  while (m_jobCounter > 0)
+  {
+    lock.Leave();
+    m_jobEvent.WaitMSec(100);
+    lock.Enter();
+  }
+  /* Resume AE processing of XBMC native audio */
+  if (!CServiceBroker::GetActiveAE()->Resume())
+  {
+    CLog::Log (LOGFATAL, "%s: Failed to restart AudioEngine", __FUNCTION__);
+  }	
+  return true;
+}
+
+#ifdef HAS_DBUS
+void BTPlayer::logDBusError()
+{
+  m_dbus_errors++;
+  if (m_dbus_errors > 50)
+    {
+      CLog::Log (LOGFATAL, "Too Many DBUS errors Closing BTPlayer");
+      m_bStop = true;
+    }
+}
+
+bool BTPlayer::haveTrackDetailsChanged(CVariant track, MUSIC_INFO::CMusicInfoTag &tag)
+{
+  bool trackDetailsChanged = false;
+  if (!tag.GetArtist().empty())
+    {
+      if (tag.GetArtist().front().compare(track["Artist"].asString()) != 0)
+	{
+	  trackDetailsChanged = true;
+	}
+  }
+  if (tag.GetTitle().compare(track["Title"].asString()) != 0)
+  {
+    trackDetailsChanged = true;
+  }
+  if (tag.GetAlbum().compare(track["Album"].asString()) != 0)
+  {
+    trackDetailsChanged = true;
+  }
+  if (tag.GetTrackNumber() != track["TrackNumber"].asInteger())
+  {
+    trackDetailsChanged = true;
+  }
+  return trackDetailsChanged;
+}
+
+void BTPlayer::updateA2DPInfo(std::string& destination_path)
+{
+  bool trackDetailsChanged = false;
+  int numberOfTracks = m_numberOfTracks;
+  int trackNumber = 0;
+  // get details from bluez
+  CVariant track = CDBusUtil::GetVariant("org.bluez",
+                                         destination_path.c_str(),
+					 "org.bluez.MediaPlayer1",
+					 "Track");
+  if (track == NULL)
+    {
+      logDBusError();
+    }
+  else
+    {
+      trackDetailsChanged = haveTrackDetailsChanged(track, m_tag);
+      if (trackDetailsChanged){
+	m_tag.SetArtist(track["Artist"].asString());
+	m_tag.SetTitle(track["Title"].asString());
+	m_tag.SetAlbum(track["Album"].asString());
+	m_tag.SetTrackNumber(track["TrackNumber"].asInteger(0));
+	numberOfTracks = track["NumberOfTracks"].asInteger(0);
+	trackNumber = track["TrackNumber"].asInteger(0);
+      }
+      m_playerGUIData.m_totalTime = track["Duration"].asUnsignedInteger(0);
+    }
+  CVariant status = CDBusUtil::GetVariant("org.bluez",
+					  destination_path.c_str(),
+					  "org.bluez.MediaPlayer1",
+					  "Status");
+  if (status == NULL)
+    {
+      logDBusError();
+    }
+  else 
+    {
+      if (strcmp(status.asString().c_str(), "playing")== 0) 
+	{  
+	  CVariant position = CDBusUtil::GetVariant("org.bluez",
+						    destination_path.c_str(),
+						    "org.bluez.MediaPlayer1",
+						    "Position");
+	  if (position == NULL)
+	    {
+	      logDBusError();
+	    }
+	  else
+	    {
+	      m_playerGUIData.m_time = position.asUnsignedInteger(0);
+	    }
+	}
+    }
+  // update the playlist size if the number of tracks have changed
+  if (m_numberOfTracks != numberOfTracks)
+    {
+      trackDetailsChanged = true;
+      m_numberOfTracks = numberOfTracks;
+      CFileItemList list;
+      for (int count =0; count < numberOfTracks; count++)
+	{
+	  CFileItemPtr item;
+	  item.reset(new CFileItem(destination_path, false));
+	  list.Add(item);
+	}
+      auto fileItemList = new CFileItemList();
+      fileItemList->Copy(list);
+      CApplicationMessenger::GetInstance().SendMsg(TMSG_PLAYLISTPLAYER_CLEAR, 0);
+      CApplicationMessenger::GetInstance().SendMsg(TMSG_PLAYLISTPLAYER_ADD,0, 0,static_cast<void*>(fileItemList));
+    }
+  // update progress bar
+  CServiceBroker::GetDataCacheCore().SignalAudioInfoChange();
+  if (trackDetailsChanged)
+  {
+    CApplicationMessenger::GetInstance().PostMsg(TMSG_UPDATE_CURRENT_ITEM, 0, -1, static_cast<void*>(new CFileItem(m_tag)));
+    CApplicationMessenger::GetInstance().PostMsg(TMSG_PLAYLISTPLAYER_SET_SONG_NO, trackNumber, 0, NULL); 
+  }
+}
+#endif
+
+void BTPlayer::Process ()
+{
+  m_isPlaying = true;
+  if (!m_startEvent.WaitMSec (100))
+  {
+    CLog::Log (LOGDEBUG, "BTPlayer::Process - Failed to receive start event");
+    return;
+  }
+  m_callback.OnPlayBackStarted(m_file);
+  m_callback.OnAVStarted(m_file);
+  while (m_isPlaying && !m_bStop)
+  {
+#ifdef HAS_DBUS
+    if (!m_dbus_path.empty()) {
+      updateA2DPInfo(m_dbus_path);
+    }
+#endif
+    Sleep(500);
+  }
+  m_callback.OnPlayBackStopped ();
+}
+
+
+void BTPlayer::OnExit()
+{
+
+}
+
+void BTPlayer::OnNothingToQueueNotify()
+{
+  m_isFinished = true;
+}
+
+bool BTPlayer::IsPlaying() const
+{
+  return m_isPlaying;
+}
+
+// the only thing we want to do here is trigger the callback so we can pick up the event from Python
+void BTPlayer::Pause()
+{
+    if (m_isPaused)
+    {
+        m_isPaused = false;
+        m_callback.OnPlayBackResumed();
+    }
+    else
+    {
+        m_isPaused = true;
+        m_callback.OnPlayBackPaused();
+    }
+}
+
+bool BTPlayer::IsPaused() const
+{
+  return m_isPaused;
+}
+
+int64_t BTPlayer::GetTimeInternal()
+{
+  return 0;
+}
+
+int64_t BTPlayer::GetTime()
+{
+  return m_playerGUIData.m_time;
+}
+
+int64_t BTPlayer::GetTotalTime()
+{
+  return m_playerGUIData.m_totalTime;
+}
+
+int BTPlayer::GetCacheLevel() const
+{
+  return m_playerGUIData.m_cacheLevel;
+}
+
+void BTPlayer::GetAudioStreamInfo(int index, AudioStreamInfo &info)
+{
+  info.bitrate = m_playerGUIData.m_audioBitrate;
+  info.channels = m_playerGUIData.m_channelCount;
+  info.samplerate = m_playerGUIData.m_sampleRate;
+  info.bitspersample = m_playerGUIData.m_bitsPerSample;
+}
+
+
+void BTPlayer::Seek(bool bPlus, bool bLargeStep, bool bChapterOverride)
+{
+}
+
+void BTPlayer::SetSpeed(float iSpeed)
+{
+}
+
+
+float BTPlayer::GetPercentage()
+{
+  if (m_playerGUIData.m_totalTime > 0)
+    return m_playerGUIData.m_time * 100.0f / m_playerGUIData.m_totalTime;
+
+  return 0.0f;
+}
\ No newline at end of file
diff --git a/xbmc/cores/btplayer/BTPlayer.h b/xbmc/cores/btplayer/BTPlayer.h
new file mode 100644
index 000000000000..c0ff34234e6c
--- /dev/null
+++ b/xbmc/cores/btplayer/BTPlayer.h
@@ -0,0 +1,127 @@
+#pragma once
+
+/*
+ *      Copyright (C) 2005-2013 Team XBMC
+ *      http://xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+#include <list>
+
+#include "FileItem.h"
+#include "cores/IPlayer.h"
+#include "threads/Thread.h"
+#include "music/tags/MusicInfoTag.h"
+
+#ifdef HAS_DBUS
+#include "DBusUtil.h"
+#define BLUEZ_SERVICE "org.bluez"
+#endif
+
+class IAEStream;
+
+class CFileItem;
+class BTPlayer : public IPlayer, public CThread
+{
+  friend class CQueueNextFileJob;
+ public:
+  BTPlayer(IPlayerCallback& callback);
+  virtual ~BTPlayer();
+
+  virtual bool OpenFile(const CFileItem& file, const CPlayerOptions &options);
+  virtual bool QueueNextFile(const CFileItem &file);
+  virtual void OnNothingToQueueNotify();
+  virtual bool CloseFile(bool reopen = false);
+  virtual bool IsPlaying() const;
+  virtual void Pause();
+  virtual bool IsPaused() const;
+  virtual bool HasVideo() const { return false; }
+  virtual bool HasAudio() const { return true; }
+  virtual bool CanSeek() const { return false; }
+  virtual void Seek(bool bPlus = true, bool bLargeStep = false, bool bChapterOverride = false);
+  virtual void SeekPercentage(float fPercent = 0.0f) { return; }
+  virtual float GetPercentage();
+  virtual void SetVolume(float volume) { return; }
+  virtual void SetDynamicRangeCompression(long drc) { return; }
+  virtual void GetAudioInfo( std::string& strAudioInfo) {}
+  virtual void GetVideoInfo( std::string& strVideoInfo) {}
+  virtual void GetGeneralInfo( std::string& strVideoInfo) {}
+  virtual void ToFFRW(int iSpeed = 0) { return; }
+  virtual int GetCacheLevel() const;
+  virtual int64_t GetTotalTime();
+  virtual void SetSpeed(float iSpeed) override;
+  virtual void ShowOSD(bool bOnoff){};
+  virtual void DoAudioWork() {};
+  virtual void GetAudioStreamInfo(int index, AudioStreamInfo &info);
+  virtual int64_t GetTime();
+  virtual void SeekTime() const { return; }
+  virtual bool SkipNext() const { return false; }
+  virtual bool IsPassthrough() const { return true; }
+  virtual void GetAudioCapabilities(std::vector<int> &audioCaps) {}
+
+  static bool HandlesType(const std::string &type) { return true; }
+
+#ifdef HAS_DBUS
+  virtual void logDBusError();
+  virtual void updateA2DPInfo(std::string& destination_path);
+#endif
+
+    struct
+    {
+      char         m_codec[21];
+      int64_t      m_time;
+      int64_t      m_totalTime;
+      int          m_channelCount;
+      int          m_bitsPerSample;
+      int          m_sampleRate;
+      int          m_audioBitrate;
+      int          m_cacheLevel;
+      bool         m_canSeek;
+    } m_playerGUIData;
+
+ protected:
+    virtual void OnStartup() {}
+    virtual void Process();
+    virtual void OnExit();
+
+ private:
+
+    bool                      m_signalSpeedChange;   /* true if OnPlaybackSpeedChange needs to be called */
+    int                       m_playbackSpeed;       /* the playback speed (1 = normal) */
+    bool                      m_isPlaying;
+    bool                      m_isPaused;
+    bool                      m_isFinished;          /* if there are no more songs in the queue */
+    unsigned int              m_defaultCrossfadeMS;  /* how long the default crossfade is in ms */
+    unsigned int              m_upcomingCrossfadeMS; /* how long the upcoming crossfade is in ms */
+    CEvent                    m_startEvent;          /* event for playback start */
+    IPlayerCallback*           m_audioCallback;       /* the viz audio callback */
+
+    CFileItem                 m_file   ;            /* our queued file or current file if no file is queued */
+    MUSIC_INFO::CMusicInfoTag m_tag;
+    CCriticalSection          m_streamsLock;         /* lock for the stream list */
+    int                       m_jobCounter;
+    CEvent                    m_jobEvent;
+    bool                      m_continueStream;
+    bool                      m_bStop;
+    int64_t                   GetTotalTime64();
+    int64_t                   GetTimeInternal();
+    bool                      haveTrackDetailsChanged(CVariant track, MUSIC_INFO::CMusicInfoTag &tag);
+    int                       m_numberOfTracks =0;
+#ifdef HAS_DBUS
+   std::string                m_dbus_path;
+   unsigned int               m_dbus_errors;
+#endif
+};
\ No newline at end of file
diff --git a/xbmc/cores/btplayer/CMakeLists.txt b/xbmc/cores/btplayer/CMakeLists.txt
new file mode 100644
index 000000000000..362d083162a6
--- /dev/null
+++ b/xbmc/cores/btplayer/CMakeLists.txt
@@ -0,0 +1,5 @@
+set(SOURCES BTPlayer.cpp)
+
+set(HEADERS BTPlayer.h)
+
+core_add_library(btplayer)
diff --git a/xbmc/cores/playercorefactory/PlayerCoreConfig.h b/xbmc/cores/playercorefactory/PlayerCoreConfig.h
index 488947e90ad3..2ad5e660c543 100644
--- a/xbmc/cores/playercorefactory/PlayerCoreConfig.h
+++ b/xbmc/cores/playercorefactory/PlayerCoreConfig.h
@@ -14,6 +14,7 @@
 #include "cores/paplayer/PAPlayer.h"
 #include "cores/RetroPlayer/RetroPlayer.h"
 #include "cores/ExternalPlayer/ExternalPlayer.h"
+#include "cores/btplayer/BTPlayer.h"
 #ifdef HAS_UPNP
 #include "network/upnp/UPnPPlayer.h"
 #endif
@@ -98,6 +99,10 @@ class CPlayerCoreConfig
       pPlayer = new UPNP::CUPnPPlayer(callback, m_id.c_str());
     }
 #endif
+    else if (m_type.compare("btplayer") == 0)
+    {
+      pPlayer = new BTPlayer(callback);
+    }
     else
       return nullptr;
 
diff --git a/xbmc/cores/playercorefactory/PlayerCoreFactory.cpp b/xbmc/cores/playercorefactory/PlayerCoreFactory.cpp
index 477824e69574..3fc0ab22745c 100644
--- a/xbmc/cores/playercorefactory/PlayerCoreFactory.cpp
+++ b/xbmc/cores/playercorefactory/PlayerCoreFactory.cpp
@@ -327,6 +327,10 @@ bool CPlayerCoreFactory::LoadConfiguration(const std::string &file, bool clear)
 
     CPlayerCoreConfig* retroPlayer = new CPlayerCoreConfig("RetroPlayer", "game", nullptr);
     m_vecPlayerConfigs.push_back(retroPlayer);
+
+    CPlayerCoreConfig* BTPlayer = new CPlayerCoreConfig("BTPlayer", "btplayer", nullptr);
+    VideoPlayer->m_bPlaysAudio = true;
+    m_vecPlayerConfigs.push_back(BTPlayer); 
   }
 
   if (!pConfig || strcmpi(pConfig->Value(), "playercorefactory") != 0)
@@ -353,6 +357,9 @@ bool CPlayerCoreFactory::LoadConfiguration(const std::string &file, bool clear)
         internaltype = "music";
       else if (type == "externalplayer")
         internaltype = "external";
+      else if (type == "btplayer")
+        internaltype = "btplayer";
+
 
       int count = 0;
       std::string playername = name;
diff --git a/xbmc/platform/linux/DBusUtil.cpp b/xbmc/platform/linux/DBusUtil.cpp
index 33b34c5b668c..adfdb98c4b43 100644
--- a/xbmc/platform/linux/DBusUtil.cpp
+++ b/xbmc/platform/linux/DBusUtil.cpp
@@ -27,7 +27,7 @@ CVariant CDBusUtil::GetVariant(const char *destination, const char *object, cons
       if (!dbus_message_has_signature(reply, "v"))
         CLog::Log(LOGERROR, "DBus: wrong signature on Get - should be \"v\" but was %s", dbus_message_iter_get_signature(&iter));
       else
-        result = ParseVariant(&iter);
+        result = ParseType(&iter);
     }
   }
 
@@ -49,32 +49,7 @@ CVariant CDBusUtil::GetAll(const char *destination, const char *object, const ch
         CLog::Log(LOGERROR, "DBus: wrong signature on GetAll - should be \"a{sv}\" but was %s", dbus_message_iter_get_signature(&iter));
       else
       {
-        do
-        {
-          DBusMessageIter sub;
-          dbus_message_iter_recurse(&iter, &sub);
-          do
-          {
-            DBusMessageIter dict;
-            dbus_message_iter_recurse(&sub, &dict);
-            do
-            {
-              const char * key = NULL;
-
-              dbus_message_iter_get_basic(&dict, &key);
-              if (!dbus_message_iter_next(&dict))
-                break;
-
-              CVariant value = ParseVariant(&dict);
-
-              if (!value.isNull())
-                properties[key] = value;
-
-            } while (dbus_message_iter_next(&dict));
-
-          } while (dbus_message_iter_next(&sub));
-
-        } while (dbus_message_iter_next(&iter));
+        properties = Parse(&iter);
       }
     }
   }
@@ -82,12 +57,48 @@ CVariant CDBusUtil::GetAll(const char *destination, const char *object, const ch
   return properties;
 }
 
-CVariant CDBusUtil::ParseVariant(DBusMessageIter *itr)
+CVariant CDBusUtil::Parse(DBusMessageIter *itr)
 {
-  DBusMessageIter variant;
-  dbus_message_iter_recurse(itr, &variant);
+  char *s = dbus_message_iter_get_signature(itr);
+  CVariant v;
+  if (strcmp(s, "a{sv}") == 0)
+    v = ParseDictionary(itr);
+  else
+    v = ParseType(itr);
+  dbus_free(s);
+  return v;
+}
 
-  return ParseType(&variant);
+CVariant CDBusUtil::ParseDictionary(DBusMessageIter *itr)
+{
+  CVariant properties;
+  do
+  {
+    DBusMessageIter sub;
+    dbus_message_iter_recurse(itr, &sub);
+    do
+    {
+      DBusMessageIter dict;
+      dbus_message_iter_recurse(&sub, &dict);
+      do
+      {
+        const char * key = NULL;
+
+        dbus_message_iter_get_basic(&dict, &key);
+        dbus_message_iter_next(&dict);
+
+        CVariant value = ParseType(&dict);
+
+        if (!value.isNull())
+          properties[key] = value;
+
+      } while (dbus_message_iter_next(&dict));
+
+    } while (dbus_message_iter_next(&sub));
+
+  } while (dbus_message_iter_next(itr));
+
+  return properties;
 }
 
 CVariant CDBusUtil::ParseType(DBusMessageIter *itr)
@@ -100,6 +111,8 @@ CVariant CDBusUtil::ParseType(DBusMessageIter *itr)
   dbus_uint64_t   uint64  = 0;
   dbus_bool_t     boolean = false;
   double          doublev = 0;
+  const char *    signature = NULL;
+
 
   int type = dbus_message_iter_get_arg_type(itr);
   switch (type)
@@ -138,14 +151,23 @@ CVariant CDBusUtil::ParseType(DBusMessageIter *itr)
     DBusMessageIter array;
     dbus_message_iter_recurse(itr, &array);
 
-    value = CVariant::VariantTypeArray;
-
-    do
-    {
-      CVariant item = ParseType(&array);
-      if (!item.isNull())
-        value.push_back(item);
-    } while (dbus_message_iter_next(&array));
+    signature = dbus_message_iter_get_signature(itr);
+    if (strcmp(signature, "a{sv}") == 0) {
+      value = ParseDictionary(itr);
+    } else {
+      value = CVariant::VariantTypeArray;
+        do
+	  {
+	    CVariant item = ParseType(&array);
+	    if (!item.isNull())
+	      value.push_back(item);
+	  } while (dbus_message_iter_next(&array));
+    }
+	break;
+   case DBUS_TYPE_VARIANT:
+    DBusMessageIter variant;
+    dbus_message_iter_recurse(itr, &variant);
+    value = ParseType(&variant);
     break;
   }
 
diff --git a/xbmc/platform/linux/DBusUtil.h b/xbmc/platform/linux/DBusUtil.h
index b2057bbf6063..ce4f1ece6b19 100644
--- a/xbmc/platform/linux/DBusUtil.h
+++ b/xbmc/platform/linux/DBusUtil.h
@@ -31,8 +31,9 @@ class CDBusUtil
   static bool TryMethodCall(DBusBusType bus, std::string const& destination, std::string const& object, std::string const& interface, std::string const& method);
 
 private:
+  static CVariant Parse(DBusMessageIter *itr);
+  static CVariant ParseDictionary(DBusMessageIter *itr);
   static CVariant ParseType(DBusMessageIter *itr);
-  static CVariant ParseVariant(DBusMessageIter *itr);
 };
 
 class CDBusConnection
