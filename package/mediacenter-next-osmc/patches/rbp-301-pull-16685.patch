From 6bc162afc45fb7054d02dedb57fc4aa986f5e7cd Mon Sep 17 00:00:00 2001
From: Rechi <Rechi@users.noreply.github.com>
Date: Wed, 2 Oct 2019 14:28:41 +0200
Subject: [PATCH] [modernize] use-override

---
 tools/EventClients/lib/c++/xbmcclient.h       | 28 ++++-----
 .../interfaces/GUI/AddonGUIRenderingControl.h |  2 +-
 .../interfaces/GUI/controls/Rendering.h       |  2 +-
 .../Engines/ActiveAE/ActiveAESettings.h       |  2 +-
 .../AudioEngine/Sinks/AESinkAUDIOTRACK.h      | 20 +++----
 .../cores/AudioEngine/Sinks/AESinkDARWINIOS.h | 18 +++---
 .../cores/AudioEngine/Sinks/AESinkDARWINOSX.h | 16 ++---
 xbmc/cores/RetroPlayer/RetroPlayerAutoSave.h  |  2 +-
 .../RetroPlayer/buffers/RenderBufferPoolGBM.h |  2 +-
 .../buffers/video/RenderBufferGuiTexture.h    |  2 +-
 .../buffers/video/RenderBufferSysMem.h        |  2 +-
 .../RetroPlayer/guibridge/GUIGameSettings.h   |  2 +-
 xbmc/cores/RetroPlayer/playback/GameLoop.h    |  4 +-
 .../RetroPlayer/playback/RealtimePlayback.h   | 28 ++++-----
 .../RetroPlayer/playback/ReversiblePlayback.h | 34 +++++------
 .../VideoRenderers/RPRendererGuiTexture.h     |  2 +-
 .../VideoRenderers/RPRendererOpenGL.h         |  2 +-
 .../VideoRenderers/RPRendererOpenGLES.h       |  2 +-
 .../savestates/SavestateFlatBuffer.h          |  2 +-
 .../streams/memory/BasicMemoryStream.h        | 30 +++++-----
 .../streams/memory/DeltaPairMemoryStream.h    | 12 ++--
 .../streams/memory/LinearMemoryStream.h       | 30 +++++-----
 xbmc/cores/VideoPlayer/AudioSinkAE.h          |  2 +-
 .../Audio/DVDAudioCodecAndroidMediaCodec.h    |  2 +-
 .../Video/DVDVideoCodecAndroidMediaCodec.cpp  |  7 +--
 .../Video/DVDVideoCodecAndroidMediaCodec.h    | 32 +++++-----
 .../DVDCodecs/Video/DVDVideoCodecDRMPRIME.h   |  2 +-
 .../cores/VideoPlayer/DVDCodecs/Video/VTB.cpp |  6 +-
 xbmc/cores/VideoPlayer/DVDCodecs/Video/VTB.h  | 17 +++---
 .../Process/gbm/VideoBufferDRMPRIME.h         |  6 +-
 .../HwDecRender/RendererDRMPRIME.h            |  2 +-
 .../HwDecRender/RendererDRMPRIMEGLES.h        |  2 +-
 .../HwDecRender/RendererMediaCodec.h          | 18 +++---
 .../HwDecRender/RendererMediaCodecSurface.h   | 32 +++++-----
 .../HwDecRender/RendererVTBGL.h               | 18 +++---
 .../HwDecRender/RendererVTBGLES.h             |  2 +-
 .../HwDecRender/VideoLayerBridgeDRMPRIME.h    |  2 +-
 .../VideoRenderers/LinuxRendererGLES.h        | 34 +++++------
 .../VideoRenderers/RenderCapture.h            |  2 +-
 .../VideoShaders/ConversionMatrix.h           | 12 ++--
 .../VideoShaders/VideoFilterShaderGL.h        |  2 +-
 .../VideoShaders/VideoFilterShaderGLES.h      |  4 +-
 .../VideoShaders/YUV2RGBShaderGL.h            |  2 +-
 .../VideoShaders/YUV2RGBShaderGLES.h          |  2 +-
 xbmc/dialogs/GUIDialogBusy.cpp                |  5 +-
 xbmc/favourites/ContextMenus.h                |  2 +-
 xbmc/filesystem/FileCache.h                   |  2 +-
 xbmc/games/GameSettings.h                     |  2 +-
 xbmc/games/addons/GameClient.h                |  6 +-
 xbmc/games/addons/input/GameClientJoystick.h  | 20 +++----
 xbmc/games/addons/input/GameClientKeyboard.h  |  2 +-
 xbmc/games/addons/input/GameClientMouse.h     | 10 ++--
 xbmc/games/controllers/Controller.h           |  2 +-
 .../dialogs/GUIDialogAxisDetection.h          | 14 ++---
 .../dialogs/GUIDialogButtonCapture.h          | 20 +++----
 .../dialogs/GUIDialogIgnoreInput.h            | 12 ++--
 .../guicontrols/GUICardinalFeatureButton.h    | 10 ++--
 .../guicontrols/GUIControllerButton.h         |  2 +-
 .../guicontrols/GUIFeatureButton.h            | 15 +++--
 .../guicontrols/GUIFeatureControls.h          |  4 +-
 .../guicontrols/GUIGameController.h           |  6 +-
 .../guicontrols/GUIScalarFeatureButton.h      |  8 +--
 .../guicontrols/GUISelectKeyButton.h          |  8 +--
 .../guicontrols/GUIThrottleButton.h           | 10 ++--
 .../controllers/guicontrols/GUIWheelButton.h  | 10 ++--
 .../windows/GUIConfigurationWizard.h          | 32 +++++-----
 .../controllers/windows/GUIControllerList.h   | 16 ++---
 .../controllers/windows/GUIControllerWindow.h | 10 ++--
 .../controllers/windows/GUIFeatureList.h      | 14 ++---
 xbmc/games/ports/InputSink.h                  | 22 +++----
 xbmc/games/ports/Port.h                       | 30 +++++-----
 xbmc/games/tags/GameInfoTag.h                 |  6 +-
 xbmc/games/windows/GUIViewStateWindowGames.h  | 10 ++--
 xbmc/games/windows/GUIWindowGames.h           | 18 +++---
 xbmc/guilib/GUIControlGroupList.h             |  2 +-
 xbmc/guilib/GUITextureGLES.h                  |  6 +-
 xbmc/guilib/guiinfo/GUIInfoProvider.h         |  2 +-
 xbmc/input/CustomControllerTranslator.h       |  4 +-
 xbmc/input/InputManager.h                     |  4 +-
 xbmc/input/JoystickMapper.h                   |  6 +-
 xbmc/input/Keymap.h                           |  4 +-
 xbmc/input/KeymapEnvironment.h                | 12 ++--
 xbmc/input/TouchTranslator.h                  |  4 +-
 xbmc/input/WindowKeymap.h                     |  6 +-
 xbmc/input/joysticks/JoystickEasterEgg.h      |  2 +-
 xbmc/input/joysticks/JoystickMonitor.h        | 20 +++----
 xbmc/input/joysticks/RumbleGenerator.h        |  4 +-
 .../joysticks/dialogs/GUIDialogNewJoystick.h  |  4 +-
 xbmc/input/joysticks/generic/ButtonMapping.h  | 16 ++---
 .../input/joysticks/generic/DriverReceiving.h |  4 +-
 .../input/joysticks/generic/FeatureHandling.h | 38 ++++++------
 xbmc/input/joysticks/generic/InputHandling.h  | 10 ++--
 xbmc/input/joysticks/keymaps/KeyHandler.h     |  8 +--
 xbmc/input/joysticks/keymaps/KeymapHandler.h  | 28 ++++-----
 xbmc/input/joysticks/keymaps/KeymapHandling.h |  4 +-
 .../touch/generic/GenericTouchInputHandler.h  |  2 +-
 xbmc/interfaces/legacy/Control.h              | 28 ++++-----
 xbmc/interfaces/legacy/Player.h               | 24 ++++----
 xbmc/interfaces/legacy/WindowDialog.h         | 32 +++++++---
 xbmc/interfaces/legacy/WindowXML.h            | 58 ++++++++++++++-----
 .../platform/android/activity/IInputHandler.h |  2 +-
 .../android/activity/JNIMainActivity.h        |  4 +-
 ...MCAudioManagerOnAudioFocusChangeListener.h |  2 +-
 xbmc/platform/android/activity/JNIXBMCFile.h  |  2 +-
 .../android/activity/JNIXBMCJsonHandler.h     | 10 ++--
 .../android/activity/JNIXBMCMainView.h        |  8 +--
 .../android/activity/JNIXBMCMediaSession.h    |  2 +-
 .../JNIXBMCNsdManagerDiscoveryListener.h      | 14 ++---
 .../JNIXBMCNsdManagerRegistrationListener.h   |  2 +-
 .../JNIXBMCNsdManagerResolveListener.h        |  6 +-
 ...MCSurfaceTextureOnFrameAvailableListener.h |  4 +-
 .../android/activity/JNIXBMCVideoView.h       |  8 +--
 xbmc/platform/android/activity/XBMCApp.h      | 16 ++---
 .../android/filesystem/APKDirectory.h         | 10 ++--
 xbmc/platform/android/filesystem/APKFile.h    | 23 ++++----
 .../android/filesystem/AndroidAppDirectory.h  | 10 ++--
 .../android/filesystem/AndroidAppFile.h       | 22 +++----
 .../android/media/drm/MediaDrmCryptoSession.h |  2 +-
 .../platform/android/network/NetworkAndroid.h | 28 ++++-----
 .../android/network/ZeroconfAndroid.h         | 10 ++--
 .../android/network/ZeroconfBrowserAndroid.h  | 26 ++++-----
 .../powermanagement/AndroidPowerSyscall.h     | 22 +++----
 .../android/storage/AndroidStorageProvider.h  | 16 ++---
 xbmc/platform/darwin/PlatformDarwin.h         |  2 +-
 .../darwin/ios-common/AnnounceReceiver.h      |  2 +-
 xbmc/platform/darwin/ios-common/IOSKeyboard.h |  6 +-
 .../ios-common/storage/IOSStorageProvider.h   | 16 ++---
 .../darwin/network/ZeroconfBrowserDarwin.h    | 10 ++--
 xbmc/platform/darwin/network/ZeroconfDarwin.h | 11 ++--
 xbmc/platform/darwin/osx/XBMCHelper.h         |  2 +-
 .../darwin/osx/peripherals/PeripheralBusUSB.h |  4 +-
 .../osx/powermanagement/CocoaPowerSyscall.h   | 25 ++++----
 .../darwin/osx/storage/OSXStorageProvider.h   | 16 ++---
 xbmc/platform/linux/input/LibInputHandler.h   |  2 +-
 xbmc/platform/linux/input/LibInputSettings.h  |  2 +-
 .../linux/storage/LinuxStorageProvider.h      |  2 +-
 .../overrides/android/PlatformAndroid.h       |  2 +-
 xbmc/playlists/SmartPlayList.h                |  2 +-
 xbmc/rendering/gl/GLShader.h                  |  4 +-
 xbmc/rendering/gles/GLESShader.h              |  4 +-
 xbmc/rendering/gles/RenderSystemGLES.h        |  2 +-
 xbmc/settings/DiscSettings.h                  |  2 +-
 xbmc/utils/BooleanLogic.h                     |  6 +-
 xbmc/utils/GBMBufferObject.h                  |  2 +-
 xbmc/video/tags/VideoTagLoaderFFmpeg.h        |  2 +-
 xbmc/video/tags/VideoTagLoaderNFO.h           |  2 +-
 xbmc/video/tags/VideoTagLoaderPlugin.h        |  2 +-
 xbmc/windowing/X11/WinEventsX11.h             |  2 +-
 xbmc/windowing/X11/X11DPMSSupport.h           |  2 +-
 xbmc/windowing/android/AndroidUtils.h         |  2 +-
 xbmc/windowing/android/VideoSyncAndroid.h     | 10 ++--
 xbmc/windowing/android/WinEventsAndroid.h     |  6 +-
 xbmc/windowing/android/WinSystemAndroid.h     |  2 +-
 .../android/WinSystemAndroidGLESContext.h     |  4 +-
 xbmc/windowing/gbm/DRMAtomic.h                | 14 ++---
 xbmc/windowing/gbm/DRMLegacy.h                | 12 ++--
 xbmc/windowing/gbm/GBMDPMSSupport.h           |  2 +-
 xbmc/windowing/gbm/OffScreenModeSetting.h     |  2 +-
 xbmc/windowing/gbm/WinSystemGbm.h             |  6 +-
 xbmc/windowing/gbm/WinSystemGbmEGLContext.h   |  2 +-
 xbmc/windowing/gbm/WinSystemGbmGLContext.h    |  2 +-
 xbmc/windowing/gbm/WinSystemGbmGLESContext.h  |  2 +-
 xbmc/windowing/ios/VideoSyncIos.h             | 10 ++--
 xbmc/windowing/ios/WinSystemIOS.h             |  4 +-
 xbmc/windowing/osx/CocoaDPMSSupport.h         |  2 +-
 xbmc/windowing/osx/VideoSyncOsx.h             | 14 ++---
 xbmc/windowing/osx/WinEventsOSX.h             |  2 +-
 xbmc/windowing/osx/WinSystemOSX.h             | 40 ++++++-------
 xbmc/windowing/osx/WinSystemOSXGL.h           | 10 ++--
 xbmc/windowing/wayland/ShellSurfaceXdgShell.h |  2 +-
 .../wayland/ShellSurfaceXdgShellUnstableV6.h  |  2 +-
 xbmc/windowing/wayland/WinEventsWayland.cpp   |  2 +-
 xbmc/windowing/wayland/WinSystemWayland.h     |  2 +-
 .../wayland/WinSystemWaylandEGLContext.h      |  2 +-
 174 files changed, 848 insertions(+), 805 deletions(-)

diff --git a/tools/EventClients/lib/c++/xbmcclient.h b/tools/EventClients/lib/c++/xbmcclient.h
index d508f50e7401..ef9afc52b8cb 100644
--- a/tools/EventClients/lib/c++/xbmcclient.h
+++ b/tools/EventClients/lib/c++/xbmcclient.h
@@ -301,7 +301,7 @@ class CPacketHELO : public CPacket
   char *m_IconData;
   unsigned short m_IconSize;
 public:
-  virtual void ConstructPayload()
+  void ConstructPayload() override
   {
     m_Payload.clear();
 
@@ -358,7 +358,7 @@ class CPacketHELO : public CPacket
     }
   }
 
-  virtual ~CPacketHELO()
+  ~CPacketHELO() override
   {
     m_DeviceName.clear();
     delete[] m_IconData;
@@ -382,7 +382,7 @@ class CPacketNOTIFICATION : public CPacket
   char *m_IconData;
   unsigned short m_IconSize;
 public:
-  virtual void ConstructPayload()
+  void ConstructPayload() override
   {
     m_Payload.clear();
 
@@ -445,7 +445,7 @@ class CPacketNOTIFICATION : public CPacket
       m_IconType = ICON_NONE;
   }
 
-  virtual ~CPacketNOTIFICATION()
+  ~CPacketNOTIFICATION() override
   {
     m_Title.clear();
     m_Message.clear();
@@ -487,7 +487,7 @@ class CPacketBUTTON : public CPacket
   unsigned short m_Amount;
   unsigned short m_Flags;
 public:
-  virtual void ConstructPayload()
+  void ConstructPayload() override
   {
     m_Payload.clear();
 
@@ -574,7 +574,7 @@ class CPacketBUTTON : public CPacket
     m_ButtonCode = 0;
   }
 
-  virtual ~CPacketBUTTON()
+  ~CPacketBUTTON() override
   {
     m_DeviceMap.clear();
     m_Button.clear();
@@ -594,7 +594,7 @@ class CPacketPING : public CPacket
   {
     m_PacketType = PT_PING;
   }
-  virtual ~CPacketPING() = default;
+  ~CPacketPING() override = default;
 };
 
 class CPacketBYE : public CPacket
@@ -607,7 +607,7 @@ class CPacketBYE : public CPacket
   {
     m_PacketType = PT_BYE;
   }
-  virtual ~CPacketBYE() = default;
+  ~CPacketBYE() override = default;
 };
 
 class CPacketMOUSE : public CPacket
@@ -632,7 +632,7 @@ class CPacketMOUSE : public CPacket
     m_Y = Y;
   }
 
-  virtual void ConstructPayload()
+  void ConstructPayload() override
   {
     m_Payload.clear();
 
@@ -645,7 +645,7 @@ class CPacketMOUSE : public CPacket
     m_Payload.push_back( (m_Y & 0x00ff));
   }
 
-  virtual ~CPacketMOUSE() = default;
+  ~CPacketMOUSE() override = default;
 };
 
 class CPacketLOG : public CPacket
@@ -672,7 +672,7 @@ class CPacketLOG : public CPacket
     m_AutoPrintf = AutoPrintf;
   }
 
-  virtual void ConstructPayload()
+  void ConstructPayload() override
   {
     m_Payload.clear();
 
@@ -689,7 +689,7 @@ class CPacketLOG : public CPacket
     m_Payload.push_back('\0');
   }
 
-  virtual ~CPacketLOG() = default;
+  ~CPacketLOG() override = default;
 };
 
 class CPacketACTION : public CPacket
@@ -713,7 +713,7 @@ class CPacketACTION : public CPacket
       m_Action.push_back(Action[i]);
   }
 
-  virtual void ConstructPayload()
+  void ConstructPayload() override
   {
     m_Payload.clear();
 
@@ -724,7 +724,7 @@ class CPacketACTION : public CPacket
     m_Payload.push_back('\0');
   }
 
-  virtual ~CPacketACTION() = default;
+  ~CPacketACTION() override = default;
 };
 
 class CXBMCClient
diff --git a/xbmc/addons/interfaces/GUI/AddonGUIRenderingControl.h b/xbmc/addons/interfaces/GUI/AddonGUIRenderingControl.h
index 83ba9f99d0ba..2ad04d266423 100644
--- a/xbmc/addons/interfaces/GUI/AddonGUIRenderingControl.h
+++ b/xbmc/addons/interfaces/GUI/AddonGUIRenderingControl.h
@@ -23,7 +23,7 @@ class CGUIAddonRenderingControl : public IRenderingCallback
 friend class CAddonCallbacksGUI;
 public:
   explicit CGUIAddonRenderingControl(CGUIRenderingControl *pControl);
-  virtual ~CGUIAddonRenderingControl() = default;
+  ~CGUIAddonRenderingControl() override = default;
   bool Create(int x, int y, int w, int h, void *device) override;
   void Render() override;
   void Stop() override;
diff --git a/xbmc/addons/interfaces/GUI/controls/Rendering.h b/xbmc/addons/interfaces/GUI/controls/Rendering.h
index bca9b3996846..f4a01c2e89b8 100644
--- a/xbmc/addons/interfaces/GUI/controls/Rendering.h
+++ b/xbmc/addons/interfaces/GUI/controls/Rendering.h
@@ -62,7 +62,7 @@ namespace ADDON
   friend struct Interface_GUIControlAddonRendering;
   public:
     explicit CGUIAddonRenderingControl(CGUIRenderingControl *pControl);
-    virtual ~CGUIAddonRenderingControl() = default;
+    ~CGUIAddonRenderingControl() override = default;
 
     bool Create(int x, int y, int w, int h, void *device) override;
     void Render() override;
diff --git a/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAESettings.h b/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAESettings.h
index 2c5eaf86b2bb..2243afeb4bd7 100644
--- a/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAESettings.h
+++ b/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAESettings.h
@@ -29,7 +29,7 @@ class CActiveAESettings : public ISettingCallback
 {
 public:
   CActiveAESettings(CActiveAE &ae);
-  virtual ~CActiveAESettings();
+  ~CActiveAESettings() override;
 
   void OnSettingChanged(std::shared_ptr<const CSetting> setting) override;
 
diff --git a/xbmc/cores/AudioEngine/Sinks/AESinkAUDIOTRACK.h b/xbmc/cores/AudioEngine/Sinks/AESinkAUDIOTRACK.h
index af54356cb6fe..242e8412d0a8 100644
--- a/xbmc/cores/AudioEngine/Sinks/AESinkAUDIOTRACK.h
+++ b/xbmc/cores/AudioEngine/Sinks/AESinkAUDIOTRACK.h
@@ -22,21 +22,21 @@
 class CAESinkAUDIOTRACK : public IAESink
 {
 public:
-  virtual const char *GetName() { return "AUDIOTRACK"; }
+  const char* GetName() override { return "AUDIOTRACK"; }
 
   CAESinkAUDIOTRACK();
-  virtual ~CAESinkAUDIOTRACK();
+  ~CAESinkAUDIOTRACK() override;
 
-  virtual bool Initialize(AEAudioFormat &format, std::string &device);
-  virtual void Deinitialize();
+  bool Initialize(AEAudioFormat& format, std::string& device) override;
+  void Deinitialize() override;
   bool IsInitialized();
 
-  virtual void         GetDelay        (AEDelayStatus& status);
-  virtual double       GetLatency      ();
-  virtual double       GetCacheTotal   ();
-  virtual unsigned int AddPackets      (uint8_t **data, unsigned int frames, unsigned int offset);
-  virtual void         AddPause        (unsigned int millis);
-  virtual void         Drain           ();
+  void GetDelay(AEDelayStatus& status) override;
+  double GetLatency() override;
+  double GetCacheTotal() override;
+  unsigned int AddPackets(uint8_t** data, unsigned int frames, unsigned int offset) override;
+  void AddPause(unsigned int millis) override;
+  void Drain() override;
   static void          EnumerateDevicesEx(AEDeviceInfoList &list, bool force = false);
   static void Register();
   static IAESink* Create(std::string &device, AEAudioFormat &desiredFormat);
diff --git a/xbmc/cores/AudioEngine/Sinks/AESinkDARWINIOS.h b/xbmc/cores/AudioEngine/Sinks/AESinkDARWINIOS.h
index ce5f858019c2..708b0f6e9e68 100644
--- a/xbmc/cores/AudioEngine/Sinks/AESinkDARWINIOS.h
+++ b/xbmc/cores/AudioEngine/Sinks/AESinkDARWINIOS.h
@@ -26,23 +26,23 @@ class CAAudioUnitSink;
 class CAESinkDARWINIOS : public IAESink
 {
 public:
-  virtual const char *GetName() { return "DARWINIOS"; }
+  const char* GetName() override { return "DARWINIOS"; }
 
   CAESinkDARWINIOS();
-  virtual ~CAESinkDARWINIOS() = default;
+  ~CAESinkDARWINIOS() override = default;
 
   static void Register();
   static void EnumerateDevicesEx(AEDeviceInfoList &list, bool force);
   static IAESink* Create(std::string &device, AEAudioFormat &desiredFormat);
 
-  virtual bool Initialize(AEAudioFormat &format, std::string &device);
-  virtual void Deinitialize();
+  bool Initialize(AEAudioFormat& format, std::string& device) override;
+  void Deinitialize() override;
 
-  virtual void         GetDelay(AEDelayStatus& status);
-  virtual double       GetCacheTotal   ();
-  virtual unsigned int AddPackets      (uint8_t **data, unsigned int frames, unsigned int offset);
-  virtual void         Drain           ();
-  virtual bool         HasVolume       ();
+  void GetDelay(AEDelayStatus& status) override;
+  double GetCacheTotal() override;
+  unsigned int AddPackets(uint8_t** data, unsigned int frames, unsigned int offset) override;
+  void Drain() override;
+  bool HasVolume() override;
 
 private:
   static AEDeviceInfoList m_devices;
diff --git a/xbmc/cores/AudioEngine/Sinks/AESinkDARWINOSX.h b/xbmc/cores/AudioEngine/Sinks/AESinkDARWINOSX.h
index 717615542632..5586faacd830 100644
--- a/xbmc/cores/AudioEngine/Sinks/AESinkDARWINOSX.h
+++ b/xbmc/cores/AudioEngine/Sinks/AESinkDARWINOSX.h
@@ -18,22 +18,22 @@ struct AEDelayStatus;
 class CAESinkDARWINOSX : public IAESink
 {
 public:
-  virtual const char *GetName() { return "DARWINOSX"; }
+  const char* GetName() override { return "DARWINOSX"; }
 
   CAESinkDARWINOSX();
-  virtual ~CAESinkDARWINOSX();
+  ~CAESinkDARWINOSX() override;
 
   static void Register();
   static void EnumerateDevicesEx(AEDeviceInfoList &list, bool force);
   static IAESink* Create(std::string &device, AEAudioFormat &desiredFormat);
 
-  virtual bool Initialize(AEAudioFormat &format, std::string &device);
-  virtual void Deinitialize();
+  bool Initialize(AEAudioFormat& format, std::string& device) override;
+  void Deinitialize() override;
 
-  virtual void GetDelay(AEDelayStatus& status);
-  virtual double GetCacheTotal();
-  virtual unsigned int AddPackets(uint8_t **data, unsigned int frames, unsigned int offset);
-  virtual void Drain();
+  void GetDelay(AEDelayStatus& status) override;
+  double GetCacheTotal() override;
+  unsigned int AddPackets(uint8_t** data, unsigned int frames, unsigned int offset) override;
+  void Drain() override;
 
 private:
   static OSStatus renderCallback(AudioDeviceID inDevice, const AudioTimeStamp* inNow, const AudioBufferList* inInputData, const AudioTimeStamp* inInputTime, AudioBufferList* outOutputData, const AudioTimeStamp* inOutputTime, void* inClientData);
diff --git a/xbmc/cores/RetroPlayer/RetroPlayerAutoSave.h b/xbmc/cores/RetroPlayer/RetroPlayerAutoSave.h
index ef5e98248c6d..831e85e18837 100644
--- a/xbmc/cores/RetroPlayer/RetroPlayerAutoSave.h
+++ b/xbmc/cores/RetroPlayer/RetroPlayerAutoSave.h
@@ -41,7 +41,7 @@ namespace RETRO
 
   protected:
     // implementation of CThread
-    virtual void Process() override;
+    void Process() override;
 
   private:
     // Construction parameters
diff --git a/xbmc/cores/RetroPlayer/buffers/RenderBufferPoolGBM.h b/xbmc/cores/RetroPlayer/buffers/RenderBufferPoolGBM.h
index baf689cb0ebe..e66cd52c26ac 100644
--- a/xbmc/cores/RetroPlayer/buffers/RenderBufferPoolGBM.h
+++ b/xbmc/cores/RetroPlayer/buffers/RenderBufferPoolGBM.h
@@ -28,7 +28,7 @@ namespace RETRO
   protected:
     // implementation of CBaseRenderBufferPool
     IRenderBuffer *CreateRenderBuffer(void *header = nullptr) override;
-    bool ConfigureInternal();
+    bool ConfigureInternal() override;
 
     // Construction parameters
     CRenderContext &m_context;
diff --git a/xbmc/cores/RetroPlayer/buffers/video/RenderBufferGuiTexture.h b/xbmc/cores/RetroPlayer/buffers/video/RenderBufferGuiTexture.h
index 223e06de4ca8..f50c9484dbae 100644
--- a/xbmc/cores/RetroPlayer/buffers/video/RenderBufferGuiTexture.h
+++ b/xbmc/cores/RetroPlayer/buffers/video/RenderBufferGuiTexture.h
@@ -23,7 +23,7 @@ namespace RETRO
   {
   public:
     CRenderBufferGuiTexture(SCALINGMETHOD scalingMethod);
-    virtual ~CRenderBufferGuiTexture() = default;
+    ~CRenderBufferGuiTexture() override = default;
 
     // implementation of IRenderBuffer via CBaseRenderBuffer
     bool Allocate(AVPixelFormat format, unsigned int width, unsigned int height) override;
diff --git a/xbmc/cores/RetroPlayer/buffers/video/RenderBufferSysMem.h b/xbmc/cores/RetroPlayer/buffers/video/RenderBufferSysMem.h
index 693086e32e1e..12af72468361 100644
--- a/xbmc/cores/RetroPlayer/buffers/video/RenderBufferSysMem.h
+++ b/xbmc/cores/RetroPlayer/buffers/video/RenderBufferSysMem.h
@@ -25,7 +25,7 @@ namespace RETRO
   {
   public:
     CRenderBufferSysMem() = default;
-    virtual ~CRenderBufferSysMem() = default;
+    ~CRenderBufferSysMem() override = default;
 
     // implementation of IRenderBuffer
     bool Allocate(AVPixelFormat format, unsigned int width, unsigned int height) override;
diff --git a/xbmc/cores/RetroPlayer/guibridge/GUIGameSettings.h b/xbmc/cores/RetroPlayer/guibridge/GUIGameSettings.h
index 6d116bb90173..a5e750387889 100644
--- a/xbmc/cores/RetroPlayer/guibridge/GUIGameSettings.h
+++ b/xbmc/cores/RetroPlayer/guibridge/GUIGameSettings.h
@@ -28,7 +28,7 @@ namespace RETRO
   {
   public:
     CGUIGameSettings(CRPProcessInfo &processInfo);
-    ~CGUIGameSettings();
+    ~CGUIGameSettings() override;
 
     // implementation of IGUIRenderSettings
     CRenderSettings GetSettings() const override;
diff --git a/xbmc/cores/RetroPlayer/playback/GameLoop.h b/xbmc/cores/RetroPlayer/playback/GameLoop.h
index 8f1efba1c6f9..c584fc8c96ca 100644
--- a/xbmc/cores/RetroPlayer/playback/GameLoop.h
+++ b/xbmc/cores/RetroPlayer/playback/GameLoop.h
@@ -38,7 +38,7 @@ namespace RETRO
   public:
     CGameLoop(IGameLoopCallback* callback, double fps);
 
-    virtual ~CGameLoop();
+    ~CGameLoop() override;
 
     void Start();
     void Stop();
@@ -51,7 +51,7 @@ namespace RETRO
 
   protected:
     // implementation of CThread
-    virtual void Process() override;
+    void Process() override;
 
   private:
     double FrameTimeMs() const;
diff --git a/xbmc/cores/RetroPlayer/playback/RealtimePlayback.h b/xbmc/cores/RetroPlayer/playback/RealtimePlayback.h
index ee0e36205537..f7b5fffbc2e8 100644
--- a/xbmc/cores/RetroPlayer/playback/RealtimePlayback.h
+++ b/xbmc/cores/RetroPlayer/playback/RealtimePlayback.h
@@ -17,22 +17,22 @@ namespace RETRO
   class CRealtimePlayback : public IPlayback
   {
   public:
-    virtual ~CRealtimePlayback() = default;
+    ~CRealtimePlayback() override = default;
 
     // implementation of IPlayback
-    virtual void Initialize() override { }
-    virtual void Deinitialize() override { }
-    virtual bool CanPause() const override { return false; }
-    virtual bool CanSeek() const override { return false; }
-    virtual unsigned int GetTimeMs() const override { return 0; }
-    virtual unsigned int GetTotalTimeMs() const override { return 0; }
-    virtual unsigned int GetCacheTimeMs() const override { return 0; }
-    virtual void SeekTimeMs(unsigned int timeMs) override { }
-    virtual double GetSpeed() const override { return 1.0; }
-    virtual void SetSpeed(double speedFactor) override { }
-    virtual void PauseAsync() override { }
-    virtual std::string CreateSavestate() override { return ""; }
-    virtual bool LoadSavestate(const std::string& path) override { return false; }
+    void Initialize() override {}
+    void Deinitialize() override {}
+    bool CanPause() const override { return false; }
+    bool CanSeek() const override { return false; }
+    unsigned int GetTimeMs() const override { return 0; }
+    unsigned int GetTotalTimeMs() const override { return 0; }
+    unsigned int GetCacheTimeMs() const override { return 0; }
+    void SeekTimeMs(unsigned int timeMs) override {}
+    double GetSpeed() const override { return 1.0; }
+    void SetSpeed(double speedFactor) override {}
+    void PauseAsync() override {}
+    std::string CreateSavestate() override { return ""; }
+    bool LoadSavestate(const std::string& path) override { return false; }
   };
 }
 }
diff --git a/xbmc/cores/RetroPlayer/playback/ReversiblePlayback.h b/xbmc/cores/RetroPlayer/playback/ReversiblePlayback.h
index ceb93f8b0c37..0d5ade2aca16 100644
--- a/xbmc/cores/RetroPlayer/playback/ReversiblePlayback.h
+++ b/xbmc/cores/RetroPlayer/playback/ReversiblePlayback.h
@@ -36,29 +36,29 @@ namespace RETRO
   public:
     CReversiblePlayback(GAME::CGameClient* gameClient, double fps, size_t serializeSize);
 
-    virtual ~CReversiblePlayback();
+    ~CReversiblePlayback() override;
 
     // implementation of IPlayback
-    virtual void Initialize() override;
-    virtual void Deinitialize() override;
-    virtual bool CanPause() const override { return true; }
-    virtual bool CanSeek() const override { return true; }
-    virtual unsigned int GetTimeMs() const override { return m_playTimeMs; }
-    virtual unsigned int GetTotalTimeMs() const override { return m_totalTimeMs; }
-    virtual unsigned int GetCacheTimeMs() const override { return m_cacheTimeMs; }
-    virtual void SeekTimeMs(unsigned int timeMs) override;
-    virtual double GetSpeed() const override;
-    virtual void SetSpeed(double speedFactor) override;
-    virtual void PauseAsync() override;
-    virtual std::string CreateSavestate() override;
-    virtual bool LoadSavestate(const std::string& path) override;
+    void Initialize() override;
+    void Deinitialize() override;
+    bool CanPause() const override { return true; }
+    bool CanSeek() const override { return true; }
+    unsigned int GetTimeMs() const override { return m_playTimeMs; }
+    unsigned int GetTotalTimeMs() const override { return m_totalTimeMs; }
+    unsigned int GetCacheTimeMs() const override { return m_cacheTimeMs; }
+    void SeekTimeMs(unsigned int timeMs) override;
+    double GetSpeed() const override;
+    void SetSpeed(double speedFactor) override;
+    void PauseAsync() override;
+    std::string CreateSavestate() override;
+    bool LoadSavestate(const std::string& path) override;
 
     // implementation of IGameLoopCallback
-    virtual void FrameEvent() override;
-    virtual void RewindEvent() override;
+    void FrameEvent() override;
+    void RewindEvent() override;
 
     // implementation of Observer
-    virtual void Notify(const Observable &obs, const ObservableMessage msg) override;
+    void Notify(const Observable& obs, const ObservableMessage msg) override;
 
   private:
     void AddFrame();
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererGuiTexture.h b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererGuiTexture.h
index 835f768bc46a..83cd204730a0 100644
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererGuiTexture.h
+++ b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererGuiTexture.h
@@ -20,7 +20,7 @@ namespace RETRO
   class CRendererFactoryGuiTexture : public IRendererFactory
   {
   public:
-    virtual ~CRendererFactoryGuiTexture() = default;
+    ~CRendererFactoryGuiTexture() override = default;
 
     // implementation of IRendererFactory
     std::string RenderSystemName() const override;
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererOpenGL.h b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererOpenGL.h
index 1f9c7736c180..f24bf3f18674 100644
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererOpenGL.h
+++ b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererOpenGL.h
@@ -22,7 +22,7 @@ namespace RETRO
   class CRendererFactoryOpenGL : public IRendererFactory
   {
   public:
-    virtual ~CRendererFactoryOpenGL() = default;
+    ~CRendererFactoryOpenGL() override = default;
 
     // implementation of IRendererFactory
     std::string RenderSystemName() const override;
diff --git a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererOpenGLES.h b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererOpenGLES.h
index a10367982db0..7a27bbac3426 100644
--- a/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererOpenGLES.h
+++ b/xbmc/cores/RetroPlayer/rendering/VideoRenderers/RPRendererOpenGLES.h
@@ -27,7 +27,7 @@ namespace RETRO
   class CRendererFactoryOpenGLES : public IRendererFactory
   {
   public:
-    virtual ~CRendererFactoryOpenGLES() = default;
+    ~CRendererFactoryOpenGLES() override = default;
 
     // implementation of IRendererFactory
     std::string RenderSystemName() const override;
diff --git a/xbmc/cores/RetroPlayer/savestates/SavestateFlatBuffer.h b/xbmc/cores/RetroPlayer/savestates/SavestateFlatBuffer.h
index 1f650f56b807..89d8fc4b65f2 100644
--- a/xbmc/cores/RetroPlayer/savestates/SavestateFlatBuffer.h
+++ b/xbmc/cores/RetroPlayer/savestates/SavestateFlatBuffer.h
@@ -30,7 +30,7 @@ namespace RETRO
   {
   public:
     CSavestateFlatBuffer();
-    ~CSavestateFlatBuffer();
+    ~CSavestateFlatBuffer() override;
 
     // Implementation of ISavestate
     void Reset() override;
diff --git a/xbmc/cores/RetroPlayer/streams/memory/BasicMemoryStream.h b/xbmc/cores/RetroPlayer/streams/memory/BasicMemoryStream.h
index 02195826f3e7..a39e71b44fc9 100644
--- a/xbmc/cores/RetroPlayer/streams/memory/BasicMemoryStream.h
+++ b/xbmc/cores/RetroPlayer/streams/memory/BasicMemoryStream.h
@@ -21,23 +21,23 @@ namespace RETRO
   public:
     CBasicMemoryStream();
 
-    virtual ~CBasicMemoryStream() = default;
+    ~CBasicMemoryStream() override = default;
 
     // implementation of IMemoryStream
-    virtual void Init(size_t frameSize, uint64_t maxFrameCount) override;
-    virtual void Reset() override;
-    virtual size_t FrameSize() const override { return m_frameSize; }
-    virtual uint64_t MaxFrameCount() const override { return 1; }
-    virtual void SetMaxFrameCount(uint64_t maxFrameCount) override { }
-    virtual uint8_t* BeginFrame() override;
-    virtual void SubmitFrame() override;
-    virtual const uint8_t* CurrentFrame() const override;
-    virtual uint64_t FutureFramesAvailable() const override { return 0; }
-    virtual uint64_t AdvanceFrames(uint64_t frameCount) override { return 0; }
-    virtual uint64_t PastFramesAvailable() const override { return 0; }
-    virtual uint64_t RewindFrames(uint64_t frameCount) override { return 0; }
-    virtual uint64_t GetFrameCounter() const override { return 0; }
-    virtual void SetFrameCounter(uint64_t frameCount) override { };
+    void Init(size_t frameSize, uint64_t maxFrameCount) override;
+    void Reset() override;
+    size_t FrameSize() const override { return m_frameSize; }
+    uint64_t MaxFrameCount() const override { return 1; }
+    void SetMaxFrameCount(uint64_t maxFrameCount) override {}
+    uint8_t* BeginFrame() override;
+    void SubmitFrame() override;
+    const uint8_t* CurrentFrame() const override;
+    uint64_t FutureFramesAvailable() const override { return 0; }
+    uint64_t AdvanceFrames(uint64_t frameCount) override { return 0; }
+    uint64_t PastFramesAvailable() const override { return 0; }
+    uint64_t RewindFrames(uint64_t frameCount) override { return 0; }
+    uint64_t GetFrameCounter() const override { return 0; }
+    void SetFrameCounter(uint64_t frameCount) override{};
 
   private:
     size_t m_frameSize;
diff --git a/xbmc/cores/RetroPlayer/streams/memory/DeltaPairMemoryStream.h b/xbmc/cores/RetroPlayer/streams/memory/DeltaPairMemoryStream.h
index 27385a406b5e..a28abc9837e0 100644
--- a/xbmc/cores/RetroPlayer/streams/memory/DeltaPairMemoryStream.h
+++ b/xbmc/cores/RetroPlayer/streams/memory/DeltaPairMemoryStream.h
@@ -25,17 +25,17 @@ namespace RETRO
   public:
     CDeltaPairMemoryStream() = default;
 
-    virtual ~CDeltaPairMemoryStream() = default;
+    ~CDeltaPairMemoryStream() override = default;
 
     // implementation of IMemoryStream via CLinearMemoryStream
-    virtual void Reset() override;
-    virtual uint64_t PastFramesAvailable() const override;
-    virtual uint64_t RewindFrames(uint64_t frameCount) override;
+    void Reset() override;
+    uint64_t PastFramesAvailable() const override;
+    uint64_t RewindFrames(uint64_t frameCount) override;
 
   protected:
     // implementation of CLinearMemoryStream
-    virtual void SubmitFrameInternal() override;
-    virtual void CullPastFrames(uint64_t frameCount) override;
+    void SubmitFrameInternal() override;
+    void CullPastFrames(uint64_t frameCount) override;
 
     /*!
      * Rewinding is implemented by applying XOR deltas on the specific parts of
diff --git a/xbmc/cores/RetroPlayer/streams/memory/LinearMemoryStream.h b/xbmc/cores/RetroPlayer/streams/memory/LinearMemoryStream.h
index c582ae995d1c..ebcfd3ab5ad8 100644
--- a/xbmc/cores/RetroPlayer/streams/memory/LinearMemoryStream.h
+++ b/xbmc/cores/RetroPlayer/streams/memory/LinearMemoryStream.h
@@ -22,23 +22,23 @@ namespace RETRO
   public:
     CLinearMemoryStream();
 
-    virtual ~CLinearMemoryStream() = default;
+    ~CLinearMemoryStream() override = default;
 
     // partial implementation of IMemoryStream
-    virtual void Init(size_t frameSize, uint64_t maxFrameCount) override;
-    virtual void Reset() override;
-    virtual size_t FrameSize() const override { return m_frameSize; }
-    virtual uint64_t MaxFrameCount() const override { return m_maxFrames; }
-    virtual void SetMaxFrameCount(uint64_t maxFrameCount) override;
-    virtual uint8_t* BeginFrame() override;
-    virtual void SubmitFrame() override;
-    virtual const uint8_t* CurrentFrame() const override;
-    virtual uint64_t FutureFramesAvailable() const override { return 0; }
-    virtual uint64_t AdvanceFrames(uint64_t frameCount) override { return 0; }
-    virtual uint64_t PastFramesAvailable() const override = 0;
-    virtual uint64_t RewindFrames(uint64_t frameCount) override = 0;
-    virtual uint64_t GetFrameCounter() const override { return m_currentFrameHistory; }
-    virtual void SetFrameCounter(uint64_t frameCount) override { m_currentFrameHistory = frameCount; }
+    void Init(size_t frameSize, uint64_t maxFrameCount) override;
+    void Reset() override;
+    size_t FrameSize() const override { return m_frameSize; }
+    uint64_t MaxFrameCount() const override { return m_maxFrames; }
+    void SetMaxFrameCount(uint64_t maxFrameCount) override;
+    uint8_t* BeginFrame() override;
+    void SubmitFrame() override;
+    const uint8_t* CurrentFrame() const override;
+    uint64_t FutureFramesAvailable() const override { return 0; }
+    uint64_t AdvanceFrames(uint64_t frameCount) override { return 0; }
+    uint64_t PastFramesAvailable() const override = 0;
+    uint64_t RewindFrames(uint64_t frameCount) override = 0;
+    uint64_t GetFrameCounter() const override { return m_currentFrameHistory; }
+    void SetFrameCounter(uint64_t frameCount) override { m_currentFrameHistory = frameCount; }
 
   protected:
     virtual void SubmitFrameInternal() = 0;
diff --git a/xbmc/cores/VideoPlayer/AudioSinkAE.h b/xbmc/cores/VideoPlayer/AudioSinkAE.h
index ca4185109b08..4a427160edc2 100644
--- a/xbmc/cores/VideoPlayer/AudioSinkAE.h
+++ b/xbmc/cores/VideoPlayer/AudioSinkAE.h
@@ -28,7 +28,7 @@ class CAudioSinkAE : IAEClockCallback
 {
 public:
   explicit CAudioSinkAE(CDVDClock *clock);
-  ~CAudioSinkAE();
+  ~CAudioSinkAE() override;
 
   void SetVolume(float fVolume);
   void SetDynamicRangeCompression(long drc);
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Audio/DVDAudioCodecAndroidMediaCodec.h b/xbmc/cores/VideoPlayer/DVDCodecs/Audio/DVDAudioCodecAndroidMediaCodec.h
index a1b8efb0022e..f7f0db982b55 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Audio/DVDAudioCodecAndroidMediaCodec.h
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Audio/DVDAudioCodecAndroidMediaCodec.h
@@ -28,7 +28,7 @@ class CDVDAudioCodecAndroidMediaCodec : public CDVDAudioCodec
 {
 public:
   CDVDAudioCodecAndroidMediaCodec(CProcessInfo &processInfo);
-  virtual ~CDVDAudioCodecAndroidMediaCodec();
+  ~CDVDAudioCodecAndroidMediaCodec() override;
 
   // registration
   static CDVDAudioCodec* Create(CProcessInfo &processInfo);
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAndroidMediaCodec.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAndroidMediaCodec.cpp
index f6f0a574bc4c..4ecdc0f467fd 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAndroidMediaCodec.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAndroidMediaCodec.cpp
@@ -107,7 +107,7 @@ class CDVDMediaCodecOnFrameAvailable : public CEvent, public CJNIXBMCSurfaceText
     m_surfaceTexture->setOnFrameAvailableListener(*this);
   }
 
-  virtual ~CDVDMediaCodecOnFrameAvailable()
+  ~CDVDMediaCodecOnFrameAvailable() override
   {
     // unhook the callback
     CJNIXBMCSurfaceTextureOnFrameAvailableListener nullListener(jni::jhobject(NULL));
@@ -115,10 +115,7 @@ class CDVDMediaCodecOnFrameAvailable : public CEvent, public CJNIXBMCSurfaceText
   }
 
 protected:
-  void onFrameAvailable(CJNISurfaceTexture)
-  {
-    Set();
-  }
+  void onFrameAvailable(CJNISurfaceTexture) override { Set(); }
 
 private:
   std::shared_ptr<CJNISurfaceTexture> m_surfaceTexture;
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAndroidMediaCodec.h b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAndroidMediaCodec.h
index 349b10c12657..d8f4c7d7f9e6 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAndroidMediaCodec.h
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAndroidMediaCodec.h
@@ -66,7 +66,7 @@ class CMediaCodecVideoBuffer : public CVideoBuffer
 public:
   CMediaCodecVideoBuffer(int id)
     : CVideoBuffer(id){};
-  virtual ~CMediaCodecVideoBuffer() = default;
+  ~CMediaCodecVideoBuffer() override = default;
 
   void Set(int internalId,
            int textureId,
@@ -104,10 +104,10 @@ class CMediaCodecVideoBufferPool : public IVideoBufferPool
   CMediaCodecVideoBufferPool(std::shared_ptr<CMediaCodec> mediaCodec)
     : m_codec(mediaCodec){};
 
-  virtual ~CMediaCodecVideoBufferPool();
+  ~CMediaCodecVideoBufferPool() override;
 
-  virtual CVideoBuffer* Get() override;
-  virtual void Return(int id) override;
+  CVideoBuffer* Get() override;
+  void Return(int id) override;
 
   std::shared_ptr<CMediaCodec> GetMediaCodec();
   void ResetMediaCodec();
@@ -126,21 +126,21 @@ class CDVDVideoCodecAndroidMediaCodec : public CDVDVideoCodec, public CJNISurfac
 {
 public:
   CDVDVideoCodecAndroidMediaCodec(CProcessInfo& processInfo, bool surface_render = false);
-  virtual ~CDVDVideoCodecAndroidMediaCodec();
+  ~CDVDVideoCodecAndroidMediaCodec() override;
 
   // registration
   static CDVDVideoCodec* Create(CProcessInfo& processInfo);
   static bool Register();
 
   // required overrides
-  virtual bool Open(CDVDStreamInfo& hints, CDVDCodecOptions& options) override;
-  virtual bool AddData(const DemuxPacket& packet) override;
-  virtual void Reset() override;
-  virtual bool Reconfigure(CDVDStreamInfo& hints) override;
-  virtual VCReturn GetPicture(VideoPicture* pVideoPicture) override;
-  virtual const char* GetName() override { return m_formatname.c_str(); };
-  virtual void SetCodecControl(int flags) override;
-  virtual unsigned GetAllowedReferences() override;
+  bool Open(CDVDStreamInfo& hints, CDVDCodecOptions& options) override;
+  bool AddData(const DemuxPacket& packet) override;
+  void Reset() override;
+  bool Reconfigure(CDVDStreamInfo& hints) override;
+  VCReturn GetPicture(VideoPicture* pVideoPicture) override;
+  const char* GetName() override { return m_formatname.c_str(); };
+  void SetCodecControl(int flags) override;
+  unsigned GetAllowedReferences() override;
 
 protected:
   void Dispose();
@@ -200,7 +200,7 @@ class CDVDVideoCodecAndroidMediaCodec : public CDVDVideoCodec, public CJNISurfac
 
   // CJNISurfaceHolderCallback interface
 public:
-  virtual void surfaceChanged(CJNISurfaceHolder holder, int format, int width, int height) override;
-  virtual void surfaceCreated(CJNISurfaceHolder holder) override;
-  virtual void surfaceDestroyed(CJNISurfaceHolder holder) override;
+  void surfaceChanged(CJNISurfaceHolder holder, int format, int width, int height) override;
+  void surfaceCreated(CJNISurfaceHolder holder) override;
+  void surfaceDestroyed(CJNISurfaceHolder holder) override;
 };
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecDRMPRIME.h b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecDRMPRIME.h
index cc51c809bb88..616fcfecdb9d 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecDRMPRIME.h
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecDRMPRIME.h
@@ -19,7 +19,7 @@ class CDVDVideoCodecDRMPRIME
 {
 public:
   explicit CDVDVideoCodecDRMPRIME(CProcessInfo& processInfo);
-  ~CDVDVideoCodecDRMPRIME();
+  ~CDVDVideoCodecDRMPRIME() override;
 
   static CDVDVideoCodec* Create(CProcessInfo& processInfo);
   static void Register();
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/VTB.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/VTB.cpp
index 75c833ed8a3f..df3d48d06af0 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/VTB.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/VTB.cpp
@@ -60,9 +60,9 @@ CVPixelBufferRef CVideoBufferVTB::GetPB()
 class VTB::CVideoBufferPoolVTB : public IVideoBufferPool
 {
 public:
-  virtual ~CVideoBufferPoolVTB();
-  virtual void Return(int id) override;
-  virtual CVideoBuffer* Get() override;
+  ~CVideoBufferPoolVTB() override;
+  void Return(int id) override;
+  CVideoBuffer* Get() override;
 
 protected:
   CCriticalSection m_critSection;
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/VTB.h b/xbmc/cores/VideoPlayer/DVDCodecs/Video/VTB.h
index 355a60021b2a..e94761e49fdc 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/VTB.h
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/VTB.h
@@ -30,7 +30,7 @@ class CVideoBufferVTB: public CVideoBuffer
 {
 public:
   CVideoBufferVTB(IVideoBufferPool &pool, int id);
-  virtual ~CVideoBufferVTB();
+  ~CVideoBufferVTB() override;
   void SetRef(AVFrame *frame);
   void Unref();
   CVPixelBufferRef GetPB();
@@ -45,16 +45,15 @@ class CDecoder: public IHardwareDecoder
 {
 public:
   CDecoder(CProcessInfo& processInfo);
-  virtual ~CDecoder();
+  ~CDecoder() override;
   static IHardwareDecoder* Create(CDVDStreamInfo &hint, CProcessInfo &processInfo, AVPixelFormat fmt);
   static bool Register();
-  virtual bool Open(AVCodecContext* avctx, AVCodecContext* mainctx,
-                    const enum AVPixelFormat) override;
-  virtual CDVDVideoCodec::VCReturn Decode(AVCodecContext* avctx, AVFrame* frame) override;
-  virtual bool GetPicture(AVCodecContext* avctx, VideoPicture* picture) override;
-  virtual CDVDVideoCodec::VCReturn Check(AVCodecContext* avctx) override;
-  virtual const std::string Name() override { return "vtb"; }
-  virtual unsigned GetAllowedReferences() override ;
+  bool Open(AVCodecContext* avctx, AVCodecContext* mainctx, const enum AVPixelFormat) override;
+  CDVDVideoCodec::VCReturn Decode(AVCodecContext* avctx, AVFrame* frame) override;
+  bool GetPicture(AVCodecContext* avctx, VideoPicture* picture) override;
+  CDVDVideoCodec::VCReturn Check(AVCodecContext* avctx) override;
+  const std::string Name() override { return "vtb"; }
+  unsigned GetAllowedReferences() override;
 
   void Close();
 
diff --git a/xbmc/cores/VideoPlayer/Process/gbm/VideoBufferDRMPRIME.h b/xbmc/cores/VideoPlayer/Process/gbm/VideoBufferDRMPRIME.h
index 643395a6818a..dcb1e94899a9 100644
--- a/xbmc/cores/VideoPlayer/Process/gbm/VideoBufferDRMPRIME.h
+++ b/xbmc/cores/VideoPlayer/Process/gbm/VideoBufferDRMPRIME.h
@@ -33,7 +33,7 @@ class IVideoBufferDRMPRIME : public CVideoBuffer
 {
 public:
   IVideoBufferDRMPRIME() = delete;
-  virtual ~IVideoBufferDRMPRIME() = default;
+  ~IVideoBufferDRMPRIME() override = default;
 
   virtual AVDRMFrameDescriptor* GetDescriptor() const = 0;
   virtual uint32_t GetWidth() const = 0;
@@ -68,7 +68,7 @@ class CVideoBufferDRMPRIME : public IVideoBufferDRMPRIME
 {
 public:
   CVideoBufferDRMPRIME(IVideoBufferPool& pool, int id);
-  ~CVideoBufferDRMPRIME();
+  ~CVideoBufferDRMPRIME() override;
   void SetRef(AVFrame* frame);
   void Unref();
 
@@ -96,7 +96,7 @@ class CVideoBufferDRMPRIME : public IVideoBufferDRMPRIME
 class CVideoBufferPoolDRMPRIME : public IVideoBufferPool
 {
 public:
-  ~CVideoBufferPoolDRMPRIME();
+  ~CVideoBufferPoolDRMPRIME() override;
   void Return(int id) override;
   CVideoBuffer* Get() override;
 
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIME.h b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIME.h
index 9586b9f7e5d3..434df31e2457 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIME.h
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIME.h
@@ -18,7 +18,7 @@ class CRendererDRMPRIME
 {
 public:
   CRendererDRMPRIME() = default;
-  ~CRendererDRMPRIME();
+  ~CRendererDRMPRIME() override;
 
   // Registration
   static CBaseRenderer* Create(CVideoBuffer* buffer);
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIMEGLES.h b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIMEGLES.h
index 79ee78896875..81ae41e19159 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIMEGLES.h
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIMEGLES.h
@@ -29,7 +29,7 @@ class CRendererDRMPRIMEGLES : public CLinuxRendererGLES
 {
 public:
   CRendererDRMPRIMEGLES() = default;
-  ~CRendererDRMPRIMEGLES();
+  ~CRendererDRMPRIMEGLES() override;
 
   // Registration
   static CBaseRenderer* Create(CVideoBuffer* buffer);
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererMediaCodec.h b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererMediaCodec.h
index e681d1e9b49b..7b4c3bff7f1e 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererMediaCodec.h
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererMediaCodec.h
@@ -14,28 +14,28 @@ class CRendererMediaCodec : public CLinuxRendererGLES
 {
 public:
   CRendererMediaCodec();
-  virtual ~CRendererMediaCodec();
+  ~CRendererMediaCodec() override;
 
   // Registration
   static CBaseRenderer* Create(CVideoBuffer *buffer);
   static bool Register();
 
   // Player functions
-  virtual void AddVideoPicture(const VideoPicture &picture, int index) override;
-  virtual void ReleaseBuffer(int idx) override;
+  void AddVideoPicture(const VideoPicture& picture, int index) override;
+  void ReleaseBuffer(int idx) override;
 
   // Feature support
-  virtual CRenderInfo GetRenderInfo() override;
+  CRenderInfo GetRenderInfo() override;
 
 protected:
   // textures
-  virtual bool UploadTexture(int index) override;
-  virtual void DeleteTexture(int index) override;
-  virtual bool CreateTexture(int index) override;
+  bool UploadTexture(int index) override;
+  void DeleteTexture(int index) override;
+  bool CreateTexture(int index) override;
 
   // hooks for hw dec renderer
-  virtual bool LoadShadersHook() override;
-  virtual bool RenderHook(int index) override;
+  bool LoadShadersHook() override;
+  bool RenderHook(int index) override;
 
 private:
   float m_textureMatrix[16];
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererMediaCodecSurface.h b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererMediaCodecSurface.h
index 8563a752f04f..c53a7dbeac44 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererMediaCodecSurface.h
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererMediaCodecSurface.h
@@ -16,32 +16,32 @@ class CRendererMediaCodecSurface : public CBaseRenderer
 {
 public:
   CRendererMediaCodecSurface();
-  virtual ~CRendererMediaCodecSurface();
+  ~CRendererMediaCodecSurface() override;
 
   static CBaseRenderer* Create(CVideoBuffer *buffer);
   static bool Register();
 
-  virtual bool RenderCapture(CRenderCapture* capture) override;
-  virtual void AddVideoPicture(const VideoPicture &picture, int index) override;
-  virtual void ReleaseBuffer(int idx) override;
-  virtual bool Configure(const VideoPicture &picture, float fps, unsigned int orientation) override;
-  virtual bool IsConfigured() override { return m_bConfigured; };
-  virtual bool ConfigChanged(const VideoPicture &picture) override { return false; };
-  virtual CRenderInfo GetRenderInfo() override;
-  virtual void UnInit() override {};
-  virtual void Update() override {};
-  virtual void RenderUpdate(int index, int index2, bool clear, unsigned int flags, unsigned int alpha) override;
-  virtual bool SupportsMultiPassRendering() override { return false; };
+  bool RenderCapture(CRenderCapture* capture) override;
+  void AddVideoPicture(const VideoPicture& picture, int index) override;
+  void ReleaseBuffer(int idx) override;
+  bool Configure(const VideoPicture& picture, float fps, unsigned int orientation) override;
+  bool IsConfigured() override { return m_bConfigured; };
+  bool ConfigChanged(const VideoPicture& picture) override { return false; };
+  CRenderInfo GetRenderInfo() override;
+  void UnInit() override{};
+  void Update() override{};
+  void RenderUpdate(int index, int index2, bool clear, unsigned int flags, unsigned int alpha) override;
+  bool SupportsMultiPassRendering() override { return false; };
 
   // Player functions
-  virtual bool IsGuiLayer() override { return false; };
+  bool IsGuiLayer() override { return false; };
 
   // Feature support
-  virtual bool Supports(ESCALINGMETHOD method) override { return false; };
-  virtual bool Supports(ERENDERFEATURE feature) override;
+  bool Supports(ESCALINGMETHOD method) override { return false; };
+  bool Supports(ERENDERFEATURE feature) override;
 
 protected:
-  virtual void ReorderDrawPoints() override;
+  void ReorderDrawPoints() override;
 
 private:
   void Reset();
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVTBGL.h b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVTBGL.h
index d5c0b27e1883..ba2cdb05a5fd 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVTBGL.h
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVTBGL.h
@@ -15,23 +15,23 @@ class CRendererVTB : public CLinuxRendererGL
 {
 public:
   CRendererVTB() = default;
-  virtual ~CRendererVTB();
+  ~CRendererVTB() override;
 
   static CBaseRenderer* Create(CVideoBuffer *buffer);
   static bool Register();
 
   // Player functions
-  virtual void ReleaseBuffer(int idx) override;
-  virtual bool NeedBuffer(int idx) override;
+  void ReleaseBuffer(int idx) override;
+  bool NeedBuffer(int idx) override;
 
 protected:
-  virtual bool LoadShadersHook() override;
-  virtual void AfterRenderHook(int idx) override;
-  virtual EShaderFormat GetShaderFormat() override;
+  bool LoadShadersHook() override;
+  void AfterRenderHook(int idx) override;
+  EShaderFormat GetShaderFormat() override;
 
   // textures
-  virtual bool UploadTexture(int index) override;
-  virtual void DeleteTexture(int index) override;
-  virtual bool CreateTexture(int index) override;
+  bool UploadTexture(int index) override;
+  void DeleteTexture(int index) override;
+  bool CreateTexture(int index) override;
 };
 
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVTBGLES.h b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVTBGLES.h
index 36e8466854c3..f5f869039d9e 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVTBGLES.h
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVTBGLES.h
@@ -16,7 +16,7 @@ class CRendererVTB : public CLinuxRendererGLES
 {
 public:
   CRendererVTB();
-  virtual ~CRendererVTB();
+  ~CRendererVTB() override;
 
   static CBaseRenderer* Create(CVideoBuffer *buffer);
   static bool Register();
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/VideoLayerBridgeDRMPRIME.h b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/VideoLayerBridgeDRMPRIME.h
index ade17ac0c3d4..127637f28e89 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/VideoLayerBridgeDRMPRIME.h
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/VideoLayerBridgeDRMPRIME.h
@@ -31,7 +31,7 @@ class CVideoLayerBridgeDRMPRIME
 {
 public:
   CVideoLayerBridgeDRMPRIME(std::shared_ptr<KODI::WINDOWING::GBM::CDRMUtils> drm);
-  ~CVideoLayerBridgeDRMPRIME();
+  ~CVideoLayerBridgeDRMPRIME() override;
   void Disable() override;
 
   virtual void Configure(IVideoBufferDRMPRIME* buffer);
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.h b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.h
index b9150f68af76..6153cafd9674 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.h
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.h
@@ -60,31 +60,31 @@ class CLinuxRendererGLES : public CBaseRenderer
 {
 public:
   CLinuxRendererGLES();
-  virtual ~CLinuxRendererGLES();
+  ~CLinuxRendererGLES() override;
 
   // Registration
   static CBaseRenderer* Create(CVideoBuffer *buffer);
   static bool Register();
 
   // Player functions
-  virtual bool Configure(const VideoPicture &picture, float fps, unsigned int orientation) override;
-  virtual bool IsConfigured() override { return m_bConfigured; }
-  virtual void AddVideoPicture(const VideoPicture &picture, int index) override;
-  virtual void UnInit() override;
-  virtual bool Flush(bool saveBuffers) override;
-  virtual void SetBufferSize(int numBuffers) override { m_NumYV12Buffers = numBuffers; }
-  virtual bool IsGuiLayer() override;
-  virtual void ReleaseBuffer(int idx) override;
-  virtual void RenderUpdate(int index, int index2, bool clear, unsigned int flags, unsigned int alpha) override;
-  virtual void Update() override;
-  virtual bool RenderCapture(CRenderCapture* capture) override;
-  virtual CRenderInfo GetRenderInfo() override;
-  virtual bool ConfigChanged(const VideoPicture &picture) override;
+  bool Configure(const VideoPicture& picture, float fps, unsigned int orientation) override;
+  bool IsConfigured() override { return m_bConfigured; }
+  void AddVideoPicture(const VideoPicture& picture, int index) override;
+  void UnInit() override;
+  bool Flush(bool saveBuffers) override;
+  void SetBufferSize(int numBuffers) override { m_NumYV12Buffers = numBuffers; }
+  bool IsGuiLayer() override;
+  void ReleaseBuffer(int idx) override;
+  void RenderUpdate(int index, int index2, bool clear, unsigned int flags, unsigned int alpha) override;
+  void Update() override;
+  bool RenderCapture(CRenderCapture* capture) override;
+  CRenderInfo GetRenderInfo() override;
+  bool ConfigChanged(const VideoPicture& picture) override;
 
   // Feature support
-  virtual bool SupportsMultiPassRendering() override;
-  virtual bool Supports(ERENDERFEATURE feature) override;
-  virtual bool Supports(ESCALINGMETHOD method) override;
+  bool SupportsMultiPassRendering() override;
+  bool Supports(ERENDERFEATURE feature) override;
+  bool Supports(ESCALINGMETHOD method) override;
 
 protected:
   static const int FIELD_FULL{0};
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/RenderCapture.h b/xbmc/cores/VideoPlayer/VideoRenderers/RenderCapture.h
index 6211865dc01a..d37153611676 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/RenderCapture.h
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/RenderCapture.h
@@ -133,7 +133,7 @@ class CRenderCaptureGL : public CRenderCaptureBase
 {
   public:
     CRenderCaptureGL();
-    ~CRenderCaptureGL();
+    ~CRenderCaptureGL() override;
 
     int   GetCaptureFormat();
 
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/ConversionMatrix.h b/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/ConversionMatrix.h
index 4caae14de037..0bea444e97d5 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/ConversionMatrix.h
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/ConversionMatrix.h
@@ -44,7 +44,7 @@ class CGlMatrix : public CMatrix<4>
 public:
   CGlMatrix() = default;
   CGlMatrix(float (&src)[3][3]);
-  virtual ~CGlMatrix() = default;
+  ~CGlMatrix() override = default;
   CMatrix operator*(const float (&other)[4][4]) override;
 };
 
@@ -52,21 +52,21 @@ class CScale : public CGlMatrix
 {
 public:
   CScale(float x, float y, float z);
-  virtual ~CScale() = default;
+  ~CScale() override = default;
 };
 
 class CTranslate : public CGlMatrix
 {
 public:
   CTranslate(float x, float y, float z);
-  virtual ~CTranslate() = default;
+  ~CTranslate() override = default;
 };
 
 class ConversionToRGB : public CMatrix<3>
 {
 public:
   ConversionToRGB(float Kr, float Kb);
-  virtual ~ConversionToRGB() = default;
+  ~ConversionToRGB() override = default;
   ConversionToRGB& operator=(const float (&src)[3][3]);
 
 protected:
@@ -80,7 +80,7 @@ class PrimaryToXYZ : public CMatrix<3>
 {
 public:
   PrimaryToXYZ(const float (&primaries)[3][2], const float (&whitepoint)[2]);
-  virtual ~PrimaryToXYZ() = default;
+  ~PrimaryToXYZ() override = default;
 
 protected:
   PrimaryToXYZ() = default;
@@ -93,7 +93,7 @@ class PrimaryToRGB : public PrimaryToXYZ
 {
 public:
   PrimaryToRGB(float (&primaries)[3][2], float (&whitepoint)[2]);
-  virtual ~PrimaryToRGB() = default;
+  ~PrimaryToRGB() override = default;
 };
 
 //------------------------------------------------------------------------------
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/VideoFilterShaderGL.h b/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/VideoFilterShaderGL.h
index 5ab8a98edc64..c172c0176cac 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/VideoFilterShaderGL.h
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/VideoFilterShaderGL.h
@@ -20,7 +20,7 @@ namespace Shaders {
   {
   public:
     BaseVideoFilterShader();
-    virtual ~BaseVideoFilterShader();
+    ~BaseVideoFilterShader() override;
     virtual bool GetTextureFilter(GLint& filter) { return false; }
 
     void SetSourceTexture(GLint ytex) { m_sourceTexUnit = ytex; }
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/VideoFilterShaderGLES.h b/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/VideoFilterShaderGLES.h
index 1595373a2d9b..781d0c18e66d 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/VideoFilterShaderGLES.h
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/VideoFilterShaderGLES.h
@@ -19,8 +19,8 @@ namespace Shaders {
   {
   public:
     BaseVideoFilterShader();
-    virtual void OnCompiledAndLinked();
-    virtual bool OnEnabled();
+    void OnCompiledAndLinked() override;
+    bool OnEnabled() override;
     virtual void SetSourceTexture(GLint ytex) { m_sourceTexUnit = ytex; }
     virtual void SetWidth(int w) { m_width  = w; m_stepX = w>0?1.0f/w:0; }
     virtual void SetHeight(int h) { m_height = h; m_stepY = h>0?1.0f/h:0; }
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/YUV2RGBShaderGL.h b/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/YUV2RGBShaderGL.h
index 0209d6eb1239..c2af6c4e4fe0 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/YUV2RGBShaderGL.h
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/YUV2RGBShaderGL.h
@@ -32,7 +32,7 @@ class BaseYUV2RGBGLSLShader : public CGLSLShaderProgram
                         AVColorPrimaries dst, AVColorPrimaries src,
                         bool toneMap,
                         std::shared_ptr<GLSLOutput> output);
-  virtual ~BaseYUV2RGBGLSLShader();
+  ~BaseYUV2RGBGLSLShader() override;
 
   void SetField(int field) { m_field  = field; }
   void SetWidth(int w) { m_width  = w; }
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/YUV2RGBShaderGLES.h b/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/YUV2RGBShaderGLES.h
index be7bb4d23155..9ff67f7e38eb 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/YUV2RGBShaderGLES.h
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/YUV2RGBShaderGLES.h
@@ -26,7 +26,7 @@ namespace Shaders {
   {
   public:
     BaseYUV2RGBGLSLShader(EShaderFormat format, AVColorPrimaries dst, AVColorPrimaries src, bool toneMap);
-   ~BaseYUV2RGBGLSLShader();
+    ~BaseYUV2RGBGLSLShader() override;
     void SetField(int field) { m_field = field; }
     void SetWidth(int w) { m_width = w; }
     void SetHeight(int h) { m_height = h; }
diff --git a/xbmc/dialogs/GUIDialogBusy.cpp b/xbmc/dialogs/GUIDialogBusy.cpp
index bab39345756f..de65c5c471dd 100644
--- a/xbmc/dialogs/GUIDialogBusy.cpp
+++ b/xbmc/dialogs/GUIDialogBusy.cpp
@@ -25,10 +25,7 @@ class CBusyWaiter : public CThread
   explicit CBusyWaiter(IRunnable *runnable) :
   CThread(runnable, "waiting"), m_done(new CEvent()),  m_runnable(runnable) { }
 
-  ~CBusyWaiter()
-  {
-    StopThread();
-  }
+  ~CBusyWaiter() override { StopThread(); }
 
   bool Wait(unsigned int displaytime, bool allowCancel)
   {
diff --git a/xbmc/favourites/ContextMenus.h b/xbmc/favourites/ContextMenus.h
index 3ebbb3ae305e..163132b1c655 100644
--- a/xbmc/favourites/ContextMenus.h
+++ b/xbmc/favourites/ContextMenus.h
@@ -21,7 +21,7 @@ class CFavouriteContextMenuAction : public CStaticContextMenuAction
   bool IsVisible(const CFileItem& item) const override;
   bool Execute(const CFileItemPtr& item) const override;
 protected:
-  virtual ~CFavouriteContextMenuAction() = default;
+  ~CFavouriteContextMenuAction() override = default;
   virtual bool DoExecute(CFileItemList& items, const CFileItemPtr& item) const = 0;
 };
 
diff --git a/xbmc/filesystem/FileCache.h b/xbmc/filesystem/FileCache.h
index 8c98725b9b4c..d6641fbed235 100644
--- a/xbmc/filesystem/FileCache.h
+++ b/xbmc/filesystem/FileCache.h
@@ -49,7 +49,7 @@ namespace XFILE
 
     const std::string GetProperty(XFILE::FileProperty type, const std::string &name = "") const override;
 
-    virtual const std::vector<std::string> GetPropertyValues(XFILE::FileProperty type, const std::string &name = "") const override
+    const std::vector<std::string> GetPropertyValues(XFILE::FileProperty type, const std::string& name = "") const override
     {
       return std::vector<std::string>();
     }
diff --git a/xbmc/games/GameSettings.h b/xbmc/games/GameSettings.h
index 795824ced17b..b08f03abca1c 100644
--- a/xbmc/games/GameSettings.h
+++ b/xbmc/games/GameSettings.h
@@ -36,7 +36,7 @@ class CGameSettings : public ISettingCallback,
   unsigned int MaxRewindTimeSec();
 
   // Inherited from ISettingCallback
-  virtual void OnSettingChanged(std::shared_ptr<const CSetting> setting) override;
+  void OnSettingChanged(std::shared_ptr<const CSetting> setting) override;
 
 private:
   // Construction parameters
diff --git a/xbmc/games/addons/GameClient.h b/xbmc/games/addons/GameClient.h
index 191c8955634e..9363282f97fd 100644
--- a/xbmc/games/addons/GameClient.h
+++ b/xbmc/games/addons/GameClient.h
@@ -45,7 +45,7 @@ class CGameClient : public ADDON::CAddonDll
 public:
   explicit CGameClient(const ADDON::AddonInfoPtr& addonInfo);
 
-  virtual ~CGameClient(void);
+  ~CGameClient() override;
 
   // Game subsystems (const)
   const CGameClientInput &Input() const { return *m_subsystems.Input; }
@@ -58,8 +58,8 @@ class CGameClient : public ADDON::CAddonDll
   CGameClientStreams &Streams() { return *m_subsystems.Streams; }
 
   // Implementation of IAddon via CAddonDll
-  virtual std::string     LibPath() const override;
-  virtual ADDON::AddonPtr GetRunningInstance() const override;
+  std::string LibPath() const override;
+  ADDON::AddonPtr GetRunningInstance() const override;
 
   // Query properties of the game client
   bool SupportsStandalone() const { return m_bSupportsStandalone; }
diff --git a/xbmc/games/addons/input/GameClientJoystick.h b/xbmc/games/addons/input/GameClientJoystick.h
index 50708784c8a5..c10484a03a9c 100644
--- a/xbmc/games/addons/input/GameClientJoystick.h
+++ b/xbmc/games/addons/input/GameClientJoystick.h
@@ -51,16 +51,16 @@ namespace GAME
     void UnregisterInput(JOYSTICK::IInputProvider *inputProvider);
 
     // Implementation of IInputHandler
-    virtual std::string ControllerID(void) const override;
-    virtual bool HasFeature(const std::string& feature) const override;
-    virtual bool AcceptsInput(const std::string &feature) const override;
-    virtual bool OnButtonPress(const std::string& feature, bool bPressed) override;
-    virtual void OnButtonHold(const std::string& feature, unsigned int holdTimeMs) override { }
-    virtual bool OnButtonMotion(const std::string& feature, float magnitude, unsigned int motionTimeMs) override;
-    virtual bool OnAnalogStickMotion(const std::string& feature, float x, float y, unsigned int motionTimeMs) override;
-    virtual bool OnAccelerometerMotion(const std::string& feature, float x, float y, float z) override;
-    virtual bool OnWheelMotion(const std::string& feature, float position, unsigned int motionTimeMs) override;
-    virtual bool OnThrottleMotion(const std::string& feature, float position, unsigned int motionTimeMs) override;
+    std::string ControllerID() const override;
+    bool HasFeature(const std::string& feature) const override;
+    bool AcceptsInput(const std::string& feature) const override;
+    bool OnButtonPress(const std::string& feature, bool bPressed) override;
+    void OnButtonHold(const std::string& feature, unsigned int holdTimeMs) override {}
+    bool OnButtonMotion(const std::string& feature, float magnitude, unsigned int motionTimeMs) override;
+    bool OnAnalogStickMotion(const std::string& feature, float x, float y, unsigned int motionTimeMs) override;
+    bool OnAccelerometerMotion(const std::string& feature, float x, float y, float z) override;
+    bool OnWheelMotion(const std::string& feature, float position, unsigned int motionTimeMs) override;
+    bool OnThrottleMotion(const std::string& feature, float position, unsigned int motionTimeMs) override;
 
     bool SetRumble(const std::string& feature, float magnitude);
 
diff --git a/xbmc/games/addons/input/GameClientKeyboard.h b/xbmc/games/addons/input/GameClientKeyboard.h
index a14114e0e295..8e4bbdff9543 100644
--- a/xbmc/games/addons/input/GameClientKeyboard.h
+++ b/xbmc/games/addons/input/GameClientKeyboard.h
@@ -44,7 +44,7 @@ namespace GAME
     /*!
      * \brief Destructor unregisters from keyboard events from CInputManager.
      */
-    virtual ~CGameClientKeyboard();
+    ~CGameClientKeyboard() override;
 
     // implementation of IKeyboardInputHandler
     std::string ControllerID() const override;
diff --git a/xbmc/games/addons/input/GameClientMouse.h b/xbmc/games/addons/input/GameClientMouse.h
index bc400030d00c..9e3f6cb44829 100644
--- a/xbmc/games/addons/input/GameClientMouse.h
+++ b/xbmc/games/addons/input/GameClientMouse.h
@@ -44,13 +44,13 @@ namespace GAME
     /*!
      * \brief Destructor unregisters from mouse events from CInputManager.
      */
-    virtual ~CGameClientMouse();
+    ~CGameClientMouse() override;
 
     // implementation of IMouseInputHandler
-    virtual std::string ControllerID(void) const override;
-    virtual bool OnMotion(const std::string& relpointer, int dx, int dy) override;
-    virtual bool OnButtonPress(const std::string& button) override;
-    virtual void OnButtonRelease(const std::string& button) override;
+    std::string ControllerID() const override;
+    bool OnMotion(const std::string& relpointer, int dx, int dy) override;
+    bool OnButtonPress(const std::string& button) override;
+    void OnButtonRelease(const std::string& button) override;
 
   private:
     // Construction parameters
diff --git a/xbmc/games/controllers/Controller.h b/xbmc/games/controllers/Controller.h
index 71e5171b42d7..726e0896859b 100644
--- a/xbmc/games/controllers/Controller.h
+++ b/xbmc/games/controllers/Controller.h
@@ -32,7 +32,7 @@ class CController : public ADDON::CAddon
 public:
   explicit CController(const ADDON::AddonInfoPtr& addonInfo);
 
-  virtual ~CController();
+  ~CController() override;
 
   static const ControllerPtr EmptyPtr;
 
diff --git a/xbmc/games/controllers/dialogs/GUIDialogAxisDetection.h b/xbmc/games/controllers/dialogs/GUIDialogAxisDetection.h
index f5ee8dd12db9..662643cbf122 100644
--- a/xbmc/games/controllers/dialogs/GUIDialogAxisDetection.h
+++ b/xbmc/games/controllers/dialogs/GUIDialogAxisDetection.h
@@ -23,7 +23,7 @@ namespace GAME
   public:
     CGUIDialogAxisDetection() = default;
 
-    virtual ~CGUIDialogAxisDetection() = default;
+    ~CGUIDialogAxisDetection() override = default;
 
     // specialization of IButtonMapper via CGUIDialogButtonCapture
     bool AcceptsPrimitive(JOYSTICK::PRIMITIVE_TYPE type) const override;
@@ -31,12 +31,12 @@ namespace GAME
 
   protected:
     // implementation of CGUIDialogButtonCapture
-    virtual std::string GetDialogText() override;
-    virtual std::string GetDialogHeader() override;
-    virtual bool MapPrimitiveInternal(JOYSTICK::IButtonMap* buttonMap,
-                                      IKeymap* keymap,
-                                      const JOYSTICK::CDriverPrimitive& primitive) override;
-    virtual void OnClose(bool bAccepted) override { }
+    std::string GetDialogText() override;
+    std::string GetDialogHeader() override;
+    bool MapPrimitiveInternal(JOYSTICK::IButtonMap* buttonMap,
+                              IKeymap* keymap,
+                              const JOYSTICK::CDriverPrimitive& primitive) override;
+    void OnClose(bool bAccepted) override {}
 
   private:
     void AddAxis(const std::string& deviceName, unsigned int axisIndex);
diff --git a/xbmc/games/controllers/dialogs/GUIDialogButtonCapture.h b/xbmc/games/controllers/dialogs/GUIDialogButtonCapture.h
index 1d8abe2d4116..8ae18ff650f0 100644
--- a/xbmc/games/controllers/dialogs/GUIDialogButtonCapture.h
+++ b/xbmc/games/controllers/dialogs/GUIDialogButtonCapture.h
@@ -27,19 +27,19 @@ namespace GAME
   public:
     CGUIDialogButtonCapture();
 
-    virtual ~CGUIDialogButtonCapture() = default;
+    ~CGUIDialogButtonCapture() override = default;
 
     // implementation of IButtonMapper
-    virtual std::string ControllerID(void) const override;
-    virtual bool NeedsCooldown(void) const override { return false; }
-    virtual bool MapPrimitive(JOYSTICK::IButtonMap* buttonMap,
-                              IKeymap* keymap,
-                              const JOYSTICK::CDriverPrimitive& primitive) override;
-    virtual void OnEventFrame(const JOYSTICK::IButtonMap* buttonMap, bool bMotion) override { }
-    virtual void OnLateAxis(const JOYSTICK::IButtonMap* buttonMap, unsigned int axisIndex) override { }
+    std::string ControllerID() const override;
+    bool NeedsCooldown() const override { return false; }
+    bool MapPrimitive(JOYSTICK::IButtonMap* buttonMap,
+                      IKeymap* keymap,
+                      const JOYSTICK::CDriverPrimitive& primitive) override;
+    void OnEventFrame(const JOYSTICK::IButtonMap* buttonMap, bool bMotion) override {}
+    void OnLateAxis(const JOYSTICK::IButtonMap* buttonMap, unsigned int axisIndex) override {}
 
     // implementation of Observer
-    virtual void Notify(const Observable &obs, const ObservableMessage msg) override;
+    void Notify(const Observable& obs, const ObservableMessage msg) override;
 
     /*!
      * \brief Show the dialog
@@ -48,7 +48,7 @@ namespace GAME
 
   protected:
     // implementation of CThread
-    virtual void Process() override;
+    void Process() override;
 
     virtual std::string GetDialogText() = 0;
     virtual std::string GetDialogHeader() = 0;
diff --git a/xbmc/games/controllers/dialogs/GUIDialogIgnoreInput.h b/xbmc/games/controllers/dialogs/GUIDialogIgnoreInput.h
index a13a00579526..73d50dabc9e1 100644
--- a/xbmc/games/controllers/dialogs/GUIDialogIgnoreInput.h
+++ b/xbmc/games/controllers/dialogs/GUIDialogIgnoreInput.h
@@ -23,18 +23,18 @@ namespace GAME
   public:
     CGUIDialogIgnoreInput() = default;
 
-    virtual ~CGUIDialogIgnoreInput() = default;
+    ~CGUIDialogIgnoreInput() override = default;
 
     // specialization of IButtonMapper via CGUIDialogButtonCapture
     bool AcceptsPrimitive(JOYSTICK::PRIMITIVE_TYPE type) const override;
 
   protected:
     // implementation of CGUIDialogButtonCapture
-    virtual std::string GetDialogText() override;
-    virtual std::string GetDialogHeader() override;
-    virtual bool MapPrimitiveInternal(JOYSTICK::IButtonMap* buttonMap,
-                                      IKeymap* keymap,
-                                      const JOYSTICK::CDriverPrimitive& primitive) override;
+    std::string GetDialogText() override;
+    std::string GetDialogHeader() override;
+    bool MapPrimitiveInternal(JOYSTICK::IButtonMap* buttonMap,
+                              IKeymap* keymap,
+                              const JOYSTICK::CDriverPrimitive& primitive) override;
     void OnClose(bool bAccepted) override;
 
   private:
diff --git a/xbmc/games/controllers/guicontrols/GUICardinalFeatureButton.h b/xbmc/games/controllers/guicontrols/GUICardinalFeatureButton.h
index 8600e4656b5e..b7a545923baf 100644
--- a/xbmc/games/controllers/guicontrols/GUICardinalFeatureButton.h
+++ b/xbmc/games/controllers/guicontrols/GUICardinalFeatureButton.h
@@ -22,13 +22,13 @@ namespace GAME
                               const CControllerFeature& feature,
                               unsigned int index);
 
-    virtual ~CGUICardinalFeatureButton() = default;
+    ~CGUICardinalFeatureButton() override = default;
 
     // implementation of IFeatureButton
-    virtual bool PromptForInput(CEvent& waitEvent) override;
-    virtual bool IsFinished(void) const override;
-    virtual INPUT::CARDINAL_DIRECTION GetCardinalDirection(void) const override;
-    virtual void Reset(void) override;
+    bool PromptForInput(CEvent& waitEvent) override;
+    bool IsFinished() const override;
+    INPUT::CARDINAL_DIRECTION GetCardinalDirection() const override;
+    void Reset() override;
 
   private:
     enum class STATE
diff --git a/xbmc/games/controllers/guicontrols/GUIControllerButton.h b/xbmc/games/controllers/guicontrols/GUIControllerButton.h
index 10b506571ed9..93dda5d89947 100644
--- a/xbmc/games/controllers/guicontrols/GUIControllerButton.h
+++ b/xbmc/games/controllers/guicontrols/GUIControllerButton.h
@@ -21,7 +21,7 @@ namespace GAME
   public:
     CGUIControllerButton(const CGUIButtonControl& buttonControl, const std::string& label, unsigned int index);
 
-    virtual ~CGUIControllerButton() = default;
+    ~CGUIControllerButton() override = default;
   };
 }
 }
diff --git a/xbmc/games/controllers/guicontrols/GUIFeatureButton.h b/xbmc/games/controllers/guicontrols/GUIFeatureButton.h
index 0e262ce710a6..2b715ba57884 100644
--- a/xbmc/games/controllers/guicontrols/GUIFeatureButton.h
+++ b/xbmc/games/controllers/guicontrols/GUIFeatureButton.h
@@ -27,16 +27,19 @@ namespace GAME
                       const CControllerFeature& feature,
                       unsigned int index);
 
-    virtual ~CGUIFeatureButton() = default;
+    ~CGUIFeatureButton() override = default;
 
     // implementation of CGUIControl via CGUIButtonControl
-    virtual void OnUnFocus(void) override;
+    void OnUnFocus() override;
 
     // partial implementation of IFeatureButton
-    virtual const CControllerFeature& Feature(void) const override { return m_feature; }
-    virtual INPUT::CARDINAL_DIRECTION GetCardinalDirection(void) const override { return INPUT::CARDINAL_DIRECTION::NONE; }
-    virtual JOYSTICK::WHEEL_DIRECTION GetWheelDirection(void) const override { return JOYSTICK::WHEEL_DIRECTION::NONE; }
-    virtual JOYSTICK::THROTTLE_DIRECTION GetThrottleDirection(void) const override { return JOYSTICK::THROTTLE_DIRECTION::NONE; }
+    const CControllerFeature& Feature() const override { return m_feature; }
+    INPUT::CARDINAL_DIRECTION GetCardinalDirection() const override { return INPUT::CARDINAL_DIRECTION::NONE; }
+    JOYSTICK::WHEEL_DIRECTION GetWheelDirection() const override { return JOYSTICK::WHEEL_DIRECTION::NONE; }
+    JOYSTICK::THROTTLE_DIRECTION GetThrottleDirection() const override
+    {
+      return JOYSTICK::THROTTLE_DIRECTION::NONE;
+    }
 
   protected:
     bool DoPrompt(const std::string& strPrompt, const std::string& strWarn, const std::string& strFeature, CEvent& waitEvent);
diff --git a/xbmc/games/controllers/guicontrols/GUIFeatureControls.h b/xbmc/games/controllers/guicontrols/GUIFeatureControls.h
index 84b23e874ebf..595e559bdb7b 100644
--- a/xbmc/games/controllers/guicontrols/GUIFeatureControls.h
+++ b/xbmc/games/controllers/guicontrols/GUIFeatureControls.h
@@ -22,7 +22,7 @@ namespace GAME
   public:
     CGUIFeatureGroupTitle(const CGUILabelControl& groupTitleTemplate, const std::string& groupName, unsigned int buttonIndex);
 
-    virtual ~CGUIFeatureGroupTitle() = default;
+    ~CGUIFeatureGroupTitle() override = default;
   };
 
   class CGUIFeatureSeparator : public CGUIImage
@@ -30,7 +30,7 @@ namespace GAME
   public:
     CGUIFeatureSeparator(const CGUIImage& separatorTemplate, unsigned int buttonIndex);
 
-    virtual ~CGUIFeatureSeparator() = default;
+    ~CGUIFeatureSeparator() override = default;
   };
 }
 }
diff --git a/xbmc/games/controllers/guicontrols/GUIGameController.h b/xbmc/games/controllers/guicontrols/GUIGameController.h
index a79049c6e8c2..21eddbb1bdff 100644
--- a/xbmc/games/controllers/guicontrols/GUIGameController.h
+++ b/xbmc/games/controllers/guicontrols/GUIGameController.h
@@ -22,11 +22,11 @@ namespace GAME
     CGUIGameController(int parentID, int controlID, float posX, float posY, float width, float height);
     CGUIGameController(const CGUIGameController &from);
 
-    virtual ~CGUIGameController() = default;
+    ~CGUIGameController() override = default;
 
     // implementation of CGUIControl via CGUIImage
-    virtual CGUIGameController* Clone(void) const override;
-    virtual void Render(void) override;
+    CGUIGameController* Clone() const override;
+    void Render() override;
 
     void ActivateController(const ControllerPtr& controller);
 
diff --git a/xbmc/games/controllers/guicontrols/GUIScalarFeatureButton.h b/xbmc/games/controllers/guicontrols/GUIScalarFeatureButton.h
index 62df58e765bf..d6b0b900ba4b 100644
--- a/xbmc/games/controllers/guicontrols/GUIScalarFeatureButton.h
+++ b/xbmc/games/controllers/guicontrols/GUIScalarFeatureButton.h
@@ -22,12 +22,12 @@ namespace GAME
                             const CControllerFeature& feature,
                             unsigned int index);
 
-    virtual ~CGUIScalarFeatureButton() = default;
+    ~CGUIScalarFeatureButton() override = default;
 
     // implementation of IFeatureButton
-    virtual bool PromptForInput(CEvent& waitEvent) override;
-    virtual bool IsFinished(void) const override;
-    virtual void Reset(void) override;
+    bool PromptForInput(CEvent& waitEvent) override;
+    bool IsFinished() const override;
+    void Reset() override;
 
   private:
     enum class STATE
diff --git a/xbmc/games/controllers/guicontrols/GUISelectKeyButton.h b/xbmc/games/controllers/guicontrols/GUISelectKeyButton.h
index 64e6f266cfd2..1fe85930a9e8 100644
--- a/xbmc/games/controllers/guicontrols/GUISelectKeyButton.h
+++ b/xbmc/games/controllers/guicontrols/GUISelectKeyButton.h
@@ -22,16 +22,16 @@ namespace GAME
                         IConfigurationWizard* wizard,
                         unsigned int index);
 
-    virtual ~CGUISelectKeyButton() = default;
+    ~CGUISelectKeyButton() override = default;
 
     // implementation of IFeatureButton
     const CControllerFeature& Feature(void) const override;
     bool AllowWizard() const override { return false; }
-    virtual bool PromptForInput(CEvent& waitEvent) override;
-    virtual bool IsFinished(void) const override;
+    bool PromptForInput(CEvent& waitEvent) override;
+    bool IsFinished() const override;
     bool NeedsKey() const override { return m_state == STATE::NEED_KEY; }
     void SetKey(const CControllerFeature &key) override;
-    virtual void Reset(void) override;
+    void Reset() override;
 
   private:
     static CControllerFeature GetFeature();
diff --git a/xbmc/games/controllers/guicontrols/GUIThrottleButton.h b/xbmc/games/controllers/guicontrols/GUIThrottleButton.h
index c0521c08b9f2..41d44376d4a8 100644
--- a/xbmc/games/controllers/guicontrols/GUIThrottleButton.h
+++ b/xbmc/games/controllers/guicontrols/GUIThrottleButton.h
@@ -22,13 +22,13 @@ namespace GAME
                        const CControllerFeature& feature,
                        unsigned int index);
 
-    virtual ~CGUIThrottleButton() = default;
+    ~CGUIThrottleButton() override = default;
 
     // implementation of IFeatureButton
-    virtual bool PromptForInput(CEvent& waitEvent) override;
-    virtual bool IsFinished(void) const override;
-    virtual JOYSTICK::THROTTLE_DIRECTION GetThrottleDirection(void) const override;
-    virtual void Reset(void) override;
+    bool PromptForInput(CEvent& waitEvent) override;
+    bool IsFinished() const override;
+    JOYSTICK::THROTTLE_DIRECTION GetThrottleDirection() const override;
+    void Reset() override;
 
   private:
     enum class STATE
diff --git a/xbmc/games/controllers/guicontrols/GUIWheelButton.h b/xbmc/games/controllers/guicontrols/GUIWheelButton.h
index c9041b740adc..9fdbad49fd78 100644
--- a/xbmc/games/controllers/guicontrols/GUIWheelButton.h
+++ b/xbmc/games/controllers/guicontrols/GUIWheelButton.h
@@ -22,13 +22,13 @@ namespace GAME
                     const CControllerFeature& feature,
                     unsigned int index);
 
-    virtual ~CGUIWheelButton() = default;
+    ~CGUIWheelButton() override = default;
 
     // implementation of IFeatureButton
-    virtual bool PromptForInput(CEvent& waitEvent) override;
-    virtual bool IsFinished(void) const override;
-    virtual JOYSTICK::WHEEL_DIRECTION GetWheelDirection(void) const override;
-    virtual void Reset(void) override;
+    bool PromptForInput(CEvent& waitEvent) override;
+    bool IsFinished() const override;
+    JOYSTICK::WHEEL_DIRECTION GetWheelDirection() const override;
+    void Reset() override;
 
   private:
     enum class STATE
diff --git a/xbmc/games/controllers/windows/GUIConfigurationWizard.h b/xbmc/games/controllers/windows/GUIConfigurationWizard.h
index 3f393035c068..35822a2c475d 100644
--- a/xbmc/games/controllers/windows/GUIConfigurationWizard.h
+++ b/xbmc/games/controllers/windows/GUIConfigurationWizard.h
@@ -43,35 +43,35 @@ namespace GAME
   public:
     CGUIConfigurationWizard();
 
-    virtual ~CGUIConfigurationWizard(void);
+    ~CGUIConfigurationWizard() override;
 
     // implementation of IConfigurationWizard
-    virtual void Run(const std::string& strControllerId, const std::vector<IFeatureButton*>& buttons) override;
-    virtual void OnUnfocus(IFeatureButton* button) override;
-    virtual bool Abort(bool bWait = true) override;
+    void Run(const std::string& strControllerId, const std::vector<IFeatureButton*>& buttons) override;
+    void OnUnfocus(IFeatureButton* button) override;
+    bool Abort(bool bWait = true) override;
     void RegisterKey(const CControllerFeature &key) override;
     void UnregisterKeys() override;
 
     // implementation of IButtonMapper
-    virtual std::string ControllerID(void) const override { return m_strControllerId; }
-    virtual bool NeedsCooldown(void) const override { return true; }
-    virtual bool AcceptsPrimitive(JOYSTICK::PRIMITIVE_TYPE type) const override { return true; }
-    virtual bool MapPrimitive(JOYSTICK::IButtonMap* buttonMap,
-                              IKeymap* keymap,
-                              const JOYSTICK::CDriverPrimitive& primitive) override;
-    virtual void OnEventFrame(const JOYSTICK::IButtonMap* buttonMap, bool bMotion) override;
-    virtual void OnLateAxis(const JOYSTICK::IButtonMap* buttonMap, unsigned int axisIndex) override;
+    std::string ControllerID() const override { return m_strControllerId; }
+    bool NeedsCooldown() const override { return true; }
+    bool AcceptsPrimitive(JOYSTICK::PRIMITIVE_TYPE type) const override { return true; }
+    bool MapPrimitive(JOYSTICK::IButtonMap* buttonMap,
+                      IKeymap* keymap,
+                      const JOYSTICK::CDriverPrimitive& primitive) override;
+    void OnEventFrame(const JOYSTICK::IButtonMap* buttonMap, bool bMotion) override;
+    void OnLateAxis(const JOYSTICK::IButtonMap* buttonMap, unsigned int axisIndex) override;
 
     // implementation of IKeyboardDriverHandler
-    virtual bool OnKeyPress(const CKey& key) override;
-    virtual void OnKeyRelease(const CKey& key) override { }
+    bool OnKeyPress(const CKey& key) override;
+    void OnKeyRelease(const CKey& key) override {}
 
     // implementation of Observer
-    virtual void Notify(const Observable& obs, const ObservableMessage msg) override;
+    void Notify(const Observable& obs, const ObservableMessage msg) override;
 
   protected:
     // implementation of CThread
-    virtual void Process(void) override;
+    void Process() override;
 
   private:
     void InitializeState(void);
diff --git a/xbmc/games/controllers/windows/GUIControllerList.h b/xbmc/games/controllers/windows/GUIControllerList.h
index 5403fd31382a..ca2e22b2bb6e 100644
--- a/xbmc/games/controllers/windows/GUIControllerList.h
+++ b/xbmc/games/controllers/windows/GUIControllerList.h
@@ -30,16 +30,16 @@ namespace GAME
   {
   public:
     CGUIControllerList(CGUIWindow* window, IFeatureList* featureList, GameClientPtr gameClient);
-    virtual ~CGUIControllerList(void) { Deinitialize(); }
+    ~CGUIControllerList() override { Deinitialize(); }
 
     // implementation of IControllerList
-    virtual bool Initialize(void) override;
-    virtual void Deinitialize(void) override;
-    virtual bool Refresh(const std::string& controllerId) override;
-    virtual void OnFocus(unsigned int controllerIndex) override;
-    virtual void OnSelect(unsigned int controllerIndex) override;
-    virtual int GetFocusedController() const override { return m_focusedController; }
-    virtual void ResetController(void) override;
+    bool Initialize() override;
+    void Deinitialize() override;
+    bool Refresh(const std::string& controllerId) override;
+    void OnFocus(unsigned int controllerIndex) override;
+    void OnSelect(unsigned int controllerIndex) override;
+    int GetFocusedController() const override { return m_focusedController; }
+    void ResetController() override;
 
   private:
     bool RefreshControllers(void);
diff --git a/xbmc/games/controllers/windows/GUIControllerWindow.h b/xbmc/games/controllers/windows/GUIControllerWindow.h
index a6cfcb262a03..4dbc2c854aa5 100644
--- a/xbmc/games/controllers/windows/GUIControllerWindow.h
+++ b/xbmc/games/controllers/windows/GUIControllerWindow.h
@@ -26,16 +26,16 @@ namespace GAME
   {
   public:
     CGUIControllerWindow(void);
-    virtual ~CGUIControllerWindow(void);
+    ~CGUIControllerWindow() override;
 
     // implementation of CGUIControl via CGUIDialog
-    virtual void DoProcess(unsigned int currentTime, CDirtyRegionList &dirtyregions) override;
-    virtual bool OnMessage(CGUIMessage& message) override;
+    void DoProcess(unsigned int currentTime, CDirtyRegionList& dirtyregions) override;
+    bool OnMessage(CGUIMessage& message) override;
 
   protected:
     // implementation of CGUIWindow via CGUIDialog
-    virtual void OnInitWindow(void) override;
-    virtual void OnDeinitWindow(int nextWindowID) override;
+    void OnInitWindow() override;
+    void OnDeinitWindow(int nextWindowID) override;
 
   private:
     void OnControllerFocused(unsigned int controllerIndex);
diff --git a/xbmc/games/controllers/windows/GUIFeatureList.h b/xbmc/games/controllers/windows/GUIFeatureList.h
index e0ee36137434..e94398aa4e0e 100644
--- a/xbmc/games/controllers/windows/GUIFeatureList.h
+++ b/xbmc/games/controllers/windows/GUIFeatureList.h
@@ -28,15 +28,15 @@ namespace GAME
   {
   public:
     CGUIFeatureList(CGUIWindow* window, GameClientPtr gameClient);
-    virtual ~CGUIFeatureList(void);
+    ~CGUIFeatureList() override;
 
     // implementation of IFeatureList
-    virtual bool Initialize(void) override;
-    virtual void Deinitialize(void) override;
-    virtual bool HasButton(JOYSTICK::FEATURE_TYPE type) const override;
-    virtual void Load(const ControllerPtr& controller) override;
-    virtual void OnFocus(unsigned int buttonIndex) override { }
-    virtual void OnSelect(unsigned int buttonIndex) override;
+    bool Initialize() override;
+    void Deinitialize() override;
+    bool HasButton(JOYSTICK::FEATURE_TYPE type) const override;
+    void Load(const ControllerPtr& controller) override;
+    void OnFocus(unsigned int buttonIndex) override {}
+    void OnSelect(unsigned int buttonIndex) override;
 
   private:
     IFeatureButton* GetButtonControl(unsigned int buttonIndex);
diff --git a/xbmc/games/ports/InputSink.h b/xbmc/games/ports/InputSink.h
index 149467730e59..fafe62f7ff32 100644
--- a/xbmc/games/ports/InputSink.h
+++ b/xbmc/games/ports/InputSink.h
@@ -21,19 +21,19 @@ namespace GAME
   public:
     explicit CInputSink(JOYSTICK::IInputHandler* gameInput);
 
-    virtual ~CInputSink() = default;
+    ~CInputSink() override = default;
 
     // Implementation of IInputHandler
-    virtual std::string ControllerID(void) const override;
-    virtual bool HasFeature(const std::string& feature) const override { return true; }
-    virtual bool AcceptsInput(const std::string& feature) const override;
-    virtual bool OnButtonPress(const std::string& feature, bool bPressed) override;
-    virtual void OnButtonHold(const std::string& feature, unsigned int holdTimeMs) override { }
-    virtual bool OnButtonMotion(const std::string& feature, float magnitude, unsigned int motionTimeMs) override;
-    virtual bool OnAnalogStickMotion(const std::string& feature, float x, float y, unsigned int motionTimeMs) override;
-    virtual bool OnAccelerometerMotion(const std::string& feature, float x, float y, float z) override;
-    virtual bool OnWheelMotion(const std::string& feature, float position, unsigned int motionTimeMs) override;
-    virtual bool OnThrottleMotion(const std::string& feature, float position, unsigned int motionTimeMs) override;
+    std::string ControllerID() const override;
+    bool HasFeature(const std::string& feature) const override { return true; }
+    bool AcceptsInput(const std::string& feature) const override;
+    bool OnButtonPress(const std::string& feature, bool bPressed) override;
+    void OnButtonHold(const std::string& feature, unsigned int holdTimeMs) override {}
+    bool OnButtonMotion(const std::string& feature, float magnitude, unsigned int motionTimeMs) override;
+    bool OnAnalogStickMotion(const std::string& feature, float x, float y, unsigned int motionTimeMs) override;
+    bool OnAccelerometerMotion(const std::string& feature, float x, float y, float z) override;
+    bool OnWheelMotion(const std::string& feature, float position, unsigned int motionTimeMs) override;
+    bool OnThrottleMotion(const std::string& feature, float position, unsigned int motionTimeMs) override;
 
   private:
     // Construction parameters
diff --git a/xbmc/games/ports/Port.h b/xbmc/games/ports/Port.h
index 9b3144eef040..eea8e2e905cd 100644
--- a/xbmc/games/ports/Port.h
+++ b/xbmc/games/ports/Port.h
@@ -36,23 +36,23 @@ namespace GAME
     JOYSTICK::IInputHandler *InputHandler() { return m_gameInput; }
 
     // Implementation of IInputHandler
-    virtual std::string ControllerID() const override;
-    virtual bool HasFeature(const std::string& feature) const override { return true; }
-    virtual bool AcceptsInput(const std::string& feature) const override;
-    virtual bool OnButtonPress(const std::string& feature, bool bPressed) override;
-    virtual void OnButtonHold(const std::string& feature, unsigned int holdTimeMs) override;
-    virtual bool OnButtonMotion(const std::string& feature, float magnitude, unsigned int motionTimeMs) override;
-    virtual bool OnAnalogStickMotion(const std::string& feature, float x, float y, unsigned int motionTimeMs) override;
-    virtual bool OnAccelerometerMotion(const std::string& feature, float x, float y, float z) override;
-    virtual bool OnWheelMotion(const std::string& feature, float position, unsigned int motionTimeMs) override;
-    virtual bool OnThrottleMotion(const std::string& feature, float position, unsigned int motionTimeMs) override;
+    std::string ControllerID() const override;
+    bool HasFeature(const std::string& feature) const override { return true; }
+    bool AcceptsInput(const std::string& feature) const override;
+    bool OnButtonPress(const std::string& feature, bool bPressed) override;
+    void OnButtonHold(const std::string& feature, unsigned int holdTimeMs) override;
+    bool OnButtonMotion(const std::string& feature, float magnitude, unsigned int motionTimeMs) override;
+    bool OnAnalogStickMotion(const std::string& feature, float x, float y, unsigned int motionTimeMs) override;
+    bool OnAccelerometerMotion(const std::string& feature, float x, float y, float z) override;
+    bool OnWheelMotion(const std::string& feature, float position, unsigned int motionTimeMs) override;
+    bool OnThrottleMotion(const std::string& feature, float position, unsigned int motionTimeMs) override;
 
     // Implementation of IKeymapEnvironment
-    virtual int GetWindowID() const override;
-    virtual void SetWindowID(int windowId) override { }
-    virtual int GetFallthrough(int windowId) const override { return -1; }
-    virtual bool UseGlobalFallthrough() const override { return false; }
-    virtual bool UseEasterEgg() const override { return false; }
+    int GetWindowID() const override;
+    void SetWindowID(int windowId) override {}
+    int GetFallthrough(int windowId) const override { return -1; }
+    bool UseGlobalFallthrough() const override { return false; }
+    bool UseEasterEgg() const override { return false; }
 
   private:
     // Construction parameters
diff --git a/xbmc/games/tags/GameInfoTag.h b/xbmc/games/tags/GameInfoTag.h
index ece0e935a926..d3d45dbf20a4 100644
--- a/xbmc/games/tags/GameInfoTag.h
+++ b/xbmc/games/tags/GameInfoTag.h
@@ -87,9 +87,9 @@ namespace GAME
     const std::string& GetGameClient() const { return m_strGameClient; }
     void SetGameClient(const std::string& strGameClient) { m_strGameClient = strGameClient; }
 
-    virtual void Archive(CArchive& ar) override;
-    virtual void Serialize(CVariant& value) const override;
-    virtual void ToSortable(SortItem& sortable, Field field) const override;
+    void Archive(CArchive& ar) override;
+    void Serialize(CVariant& value) const override;
+    void ToSortable(SortItem& sortable, Field field) const override;
 
   private:
     bool        m_bLoaded;
diff --git a/xbmc/games/windows/GUIViewStateWindowGames.h b/xbmc/games/windows/GUIViewStateWindowGames.h
index 9422bcff1208..2c2869f45026 100644
--- a/xbmc/games/windows/GUIViewStateWindowGames.h
+++ b/xbmc/games/windows/GUIViewStateWindowGames.h
@@ -19,16 +19,16 @@ namespace GAME
   public:
     explicit CGUIViewStateWindowGames(const CFileItemList& items);
 
-    virtual ~CGUIViewStateWindowGames() = default;
+    ~CGUIViewStateWindowGames() override = default;
 
     // implementation of CGUIViewState
-    virtual std::string GetLockType() override;
-    virtual std::string GetExtensions() override;
-    virtual VECSOURCES& GetSources() override;
+    std::string GetLockType() override;
+    std::string GetExtensions() override;
+    VECSOURCES& GetSources() override;
 
   protected:
     // implementation of CGUIViewState
-    virtual void SaveViewState() override;
+    void SaveViewState() override;
   };
 }
 }
diff --git a/xbmc/games/windows/GUIWindowGames.h b/xbmc/games/windows/GUIWindowGames.h
index ff735635cfbf..f2cbb728e0aa 100644
--- a/xbmc/games/windows/GUIWindowGames.h
+++ b/xbmc/games/windows/GUIWindowGames.h
@@ -20,20 +20,20 @@ namespace GAME
   {
   public:
     CGUIWindowGames();
-    virtual ~CGUIWindowGames() = default;
+    ~CGUIWindowGames() override = default;
 
     // implementation of CGUIControl via CGUIMediaWindow
-    virtual bool OnMessage(CGUIMessage& message) override;
+    bool OnMessage(CGUIMessage& message) override;
 
   protected:
     // implementation of CGUIMediaWindow
-    virtual void SetupShares() override;
-    virtual bool OnClick(int iItem, const std::string &player = "") override;
-    virtual void GetContextButtons(int itemNumber, CContextButtons &buttons) override;
-    virtual bool OnContextButton(int itemNumber, CONTEXT_BUTTON button) override;
-    virtual bool OnAddMediaSource() override;
-    virtual bool GetDirectory(const std::string &strDirectory, CFileItemList &items) override;
-    virtual std::string GetStartFolder(const std::string &dir) override;
+    void SetupShares() override;
+    bool OnClick(int iItem, const std::string& player = "") override;
+    void GetContextButtons(int itemNumber, CContextButtons& buttons) override;
+    bool OnContextButton(int itemNumber, CONTEXT_BUTTON button) override;
+    bool OnAddMediaSource() override;
+    bool GetDirectory(const std::string& strDirectory, CFileItemList& items) override;
+    std::string GetStartFolder(const std::string& dir) override;
 
     bool OnClickMsg(int controlId, int actionId);
     void OnItemInfo(int itemNumber);
diff --git a/xbmc/guilib/GUIControlGroupList.h b/xbmc/guilib/GUIControlGroupList.h
index 7ec5b84d07d4..ce2ce62587f4 100644
--- a/xbmc/guilib/GUIControlGroupList.h
+++ b/xbmc/guilib/GUIControlGroupList.h
@@ -29,7 +29,7 @@ class CGUIControlGroupList : public CGUIControlGroup
   float GetWidth() const override;
   float GetHeight() const override;
   virtual float Size() const;
-  virtual void SetInvalid() override;
+  void SetInvalid() override;
 
   void Process(unsigned int currentTime, CDirtyRegionList &dirtyregions) override;
   void Render() override;
diff --git a/xbmc/guilib/GUITextureGLES.h b/xbmc/guilib/GUITextureGLES.h
index 0386a6e17c48..c0136b8f3499 100644
--- a/xbmc/guilib/GUITextureGLES.h
+++ b/xbmc/guilib/GUITextureGLES.h
@@ -31,9 +31,9 @@ class CGUITextureGLES : public CGUITextureBase
   CGUITextureGLES(float posX, float posY, float width, float height, const CTextureInfo& texture);
   static void DrawQuad(const CRect &coords, UTILS::Color color, CBaseTexture *texture = NULL, const CRect *texCoords = NULL);
 protected:
-  void Begin(UTILS::Color color);
-  void Draw(float *x, float *y, float *z, const CRect &texture, const CRect &diffuse, int orientation);
-  void End();
+  void Begin(UTILS::Color color) override;
+  void Draw(float* x, float* y, float* z, const CRect& texture, const CRect& diffuse, int orientation) override;
+  void End() override;
 
   GLubyte m_col[4];
 
diff --git a/xbmc/guilib/guiinfo/GUIInfoProvider.h b/xbmc/guilib/guiinfo/GUIInfoProvider.h
index 71837be16f57..d807fa75d1a5 100644
--- a/xbmc/guilib/guiinfo/GUIInfoProvider.h
+++ b/xbmc/guilib/guiinfo/GUIInfoProvider.h
@@ -24,7 +24,7 @@ class CGUIInfoProvider : public IGUIInfoProvider
 {
 public:
   CGUIInfoProvider() = default;
-  virtual ~CGUIInfoProvider() = default;
+  ~CGUIInfoProvider() override = default;
 
   void UpdateAVInfo(const AudioStreamInfo& audioInfo, const VideoStreamInfo& videoInfo, const SubtitleStreamInfo& subtitleInfo) override
   { m_audioInfo = audioInfo, m_videoInfo = videoInfo, m_subtitleInfo = subtitleInfo; }
diff --git a/xbmc/input/CustomControllerTranslator.h b/xbmc/input/CustomControllerTranslator.h
index f0a51df81d9a..85f106555248 100644
--- a/xbmc/input/CustomControllerTranslator.h
+++ b/xbmc/input/CustomControllerTranslator.h
@@ -21,8 +21,8 @@ class CCustomControllerTranslator : public IButtonMapper
   CCustomControllerTranslator() = default;
 
   // implementation of IButtonMapper
-  virtual void MapActions(int windowID, const TiXmlNode *pDevice) override;
-  virtual void Clear() override;
+  void MapActions(int windowID, const TiXmlNode* pDevice) override;
+  void Clear() override;
 
   bool TranslateCustomControllerString(int windowId, const std::string& controllerName, int buttonId, int& action, std::string& strAction);
 
diff --git a/xbmc/input/InputManager.h b/xbmc/input/InputManager.h
index ec7ac4d49d93..b8d75fe70a7e 100644
--- a/xbmc/input/InputManager.h
+++ b/xbmc/input/InputManager.h
@@ -212,10 +212,10 @@ class CInputManager : public ISettingCallback,
   void QueueAction(const CAction& action);
 
   // implementation of ISettingCallback
-  virtual void OnSettingChanged(std::shared_ptr<const CSetting> setting) override;
+  void OnSettingChanged(std::shared_ptr<const CSetting> setting) override;
 
   // implementation of IActionListener
-  virtual bool OnAction(const CAction& action) override;
+  bool OnAction(const CAction& action) override;
 
   void RegisterKeyboardDriverHandler(KODI::KEYBOARD::IKeyboardDriverHandler* handler);
   void UnregisterKeyboardDriverHandler(KODI::KEYBOARD::IKeyboardDriverHandler* handler);
diff --git a/xbmc/input/JoystickMapper.h b/xbmc/input/JoystickMapper.h
index 2ce8ad51ebb3..27f1c2892afe 100644
--- a/xbmc/input/JoystickMapper.h
+++ b/xbmc/input/JoystickMapper.h
@@ -25,11 +25,11 @@ class CJoystickMapper : public IButtonMapper
 {
 public:
   CJoystickMapper() = default;
-  virtual ~CJoystickMapper() = default;
+  ~CJoystickMapper() override = default;
 
   // implementation of IButtonMapper
-  virtual void MapActions(int windowID, const TiXmlNode *pDevice) override;
-  virtual void Clear() override;
+  void MapActions(int windowID, const TiXmlNode* pDevice) override;
+  void Clear() override;
 
   std::vector<std::shared_ptr<const IWindowKeymap>> GetJoystickKeymaps() const;
 
diff --git a/xbmc/input/Keymap.h b/xbmc/input/Keymap.h
index 73715042b9dc..11f997d20367 100644
--- a/xbmc/input/Keymap.h
+++ b/xbmc/input/Keymap.h
@@ -20,8 +20,8 @@ class CKeymap : public IKeymap
   CKeymap(std::shared_ptr<const IWindowKeymap> keymap, const IKeymapEnvironment *environment);
 
   // implementation of IKeymap
-  virtual std::string ControllerID() const override ;
-  virtual const IKeymapEnvironment *Environment() const override { return m_environment; }
+  std::string ControllerID() const override;
+  const IKeymapEnvironment* Environment() const override { return m_environment; }
   const KODI::JOYSTICK::KeymapActionGroup &GetActions(const std::string& keyName) const override;
 
 private:
diff --git a/xbmc/input/KeymapEnvironment.h b/xbmc/input/KeymapEnvironment.h
index ef5b15e01c7d..64ee67ab0058 100644
--- a/xbmc/input/KeymapEnvironment.h
+++ b/xbmc/input/KeymapEnvironment.h
@@ -13,14 +13,14 @@
 class CKeymapEnvironment : public IKeymapEnvironment
 {
 public:
-  virtual ~CKeymapEnvironment() = default;
+  ~CKeymapEnvironment() override = default;
 
   // implementation of IKeymapEnvironment
-  virtual int GetWindowID() const override { return m_windowId; }
-  virtual void SetWindowID(int windowId) override { m_windowId = windowId; }
-  virtual int GetFallthrough(int windowId) const override;
-  virtual bool UseGlobalFallthrough() const override { return true; }
-  virtual bool UseEasterEgg() const override { return true; }
+  int GetWindowID() const override { return m_windowId; }
+  void SetWindowID(int windowId) override { m_windowId = windowId; }
+  int GetFallthrough(int windowId) const override;
+  bool UseGlobalFallthrough() const override { return true; }
+  bool UseEasterEgg() const override { return true; }
 
 private:
   int m_windowId = -1;
diff --git a/xbmc/input/TouchTranslator.h b/xbmc/input/TouchTranslator.h
index 9c26a0bcd0e6..3926e9632dc9 100644
--- a/xbmc/input/TouchTranslator.h
+++ b/xbmc/input/TouchTranslator.h
@@ -21,8 +21,8 @@ class CTouchTranslator : public IButtonMapper
   CTouchTranslator() = default;
 
   // implementation of IButtonMapper
-  virtual void MapActions(int windowID, const TiXmlNode *bDevice) override;
-  virtual void Clear() override;
+  void MapActions(int windowID, const TiXmlNode* bDevice) override;
+  void Clear() override;
 
   bool TranslateTouchAction(int window, int touchAction, int touchPointers, int &action, std::string &actionString);
 
diff --git a/xbmc/input/WindowKeymap.h b/xbmc/input/WindowKeymap.h
index e6d0fb78faea..6a105036b463 100644
--- a/xbmc/input/WindowKeymap.h
+++ b/xbmc/input/WindowKeymap.h
@@ -20,9 +20,9 @@ class CWindowKeymap : public IWindowKeymap
   explicit CWindowKeymap(const std::string &controllerId);
 
   // implementation of IWindowKeymap
-  virtual std::string ControllerID() const override { return m_controllerId; }
-  virtual void MapAction(int windowId, const std::string &keyName, KODI::JOYSTICK::KeymapAction action) override;
-  virtual const KODI::JOYSTICK::KeymapActionGroup &GetActions(int windowId, const std::string& keyName) const override;
+  std::string ControllerID() const override { return m_controllerId; }
+  void MapAction(int windowId, const std::string& keyName, KODI::JOYSTICK::KeymapAction action) override;
+  const KODI::JOYSTICK::KeymapActionGroup& GetActions(int windowId, const std::string& keyName) const override;
 
 private:
   // Construction parameter
diff --git a/xbmc/input/joysticks/JoystickEasterEgg.h b/xbmc/input/joysticks/JoystickEasterEgg.h
index f8f7f03afa17..0579b273a8c4 100644
--- a/xbmc/input/joysticks/JoystickEasterEgg.h
+++ b/xbmc/input/joysticks/JoystickEasterEgg.h
@@ -25,7 +25,7 @@ namespace JOYSTICK
   {
   public:
     explicit CJoystickEasterEgg(const std::string& controllerId);
-    virtual ~CJoystickEasterEgg() = default;
+    ~CJoystickEasterEgg() override = default;
 
     // implementation of IButtonSequence
     bool OnButtonPress(const FeatureName& feature) override;
diff --git a/xbmc/input/joysticks/JoystickMonitor.h b/xbmc/input/joysticks/JoystickMonitor.h
index c6f8d4484217..8821ce5cd009 100644
--- a/xbmc/input/joysticks/JoystickMonitor.h
+++ b/xbmc/input/joysticks/JoystickMonitor.h
@@ -23,16 +23,16 @@ namespace JOYSTICK
   {
   public:
     // implementation of IInputHandler
-    virtual std::string ControllerID() const override;
-    virtual bool HasFeature(const FeatureName& feature) const override { return true; }
-    virtual bool AcceptsInput(const FeatureName& feature) const override;
-    virtual bool OnButtonPress(const FeatureName& feature, bool bPressed) override;
-    virtual void OnButtonHold(const FeatureName& feature, unsigned int holdTimeMs) override { }
-    virtual bool OnButtonMotion(const FeatureName& feature, float magnitude, unsigned int motionTimeMs) override;
-    virtual bool OnAnalogStickMotion(const FeatureName& feature, float x, float y, unsigned int motionTimeMs) override;
-    virtual bool OnAccelerometerMotion(const FeatureName& feature, float x, float y, float z) override { return false; }
-    virtual bool OnWheelMotion(const FeatureName& feature, float position, unsigned int motionTimeMs) override;
-    virtual bool OnThrottleMotion(const FeatureName& feature, float position, unsigned int motionTimeMs) override;
+    std::string ControllerID() const override;
+    bool HasFeature(const FeatureName& feature) const override { return true; }
+    bool AcceptsInput(const FeatureName& feature) const override;
+    bool OnButtonPress(const FeatureName& feature, bool bPressed) override;
+    void OnButtonHold(const FeatureName& feature, unsigned int holdTimeMs) override {}
+    bool OnButtonMotion(const FeatureName& feature, float magnitude, unsigned int motionTimeMs) override;
+    bool OnAnalogStickMotion(const FeatureName& feature, float x, float y, unsigned int motionTimeMs) override;
+    bool OnAccelerometerMotion(const FeatureName& feature, float x, float y, float z) override { return false; }
+    bool OnWheelMotion(const FeatureName& feature, float position, unsigned int motionTimeMs) override;
+    bool OnThrottleMotion(const FeatureName& feature, float position, unsigned int motionTimeMs) override;
 
   private:
     /*!
diff --git a/xbmc/input/joysticks/RumbleGenerator.h b/xbmc/input/joysticks/RumbleGenerator.h
index f727f50b70c0..231d3e25e4a7 100644
--- a/xbmc/input/joysticks/RumbleGenerator.h
+++ b/xbmc/input/joysticks/RumbleGenerator.h
@@ -24,7 +24,7 @@ namespace JOYSTICK
   public:
     CRumbleGenerator();
 
-    virtual ~CRumbleGenerator(void) { AbortRumble(); }
+    ~CRumbleGenerator() override { AbortRumble(); }
 
     std::string ControllerID() const;
 
@@ -35,7 +35,7 @@ namespace JOYSTICK
 
   protected:
     // implementation of CThread
-    void Process(void);
+    void Process() override;
 
   private:
     enum RUMBLE_TYPE
diff --git a/xbmc/input/joysticks/dialogs/GUIDialogNewJoystick.h b/xbmc/input/joysticks/dialogs/GUIDialogNewJoystick.h
index 2cabd3113615..6ff0feeafbb8 100644
--- a/xbmc/input/joysticks/dialogs/GUIDialogNewJoystick.h
+++ b/xbmc/input/joysticks/dialogs/GUIDialogNewJoystick.h
@@ -18,13 +18,13 @@ namespace JOYSTICK
   {
   public:
     CGUIDialogNewJoystick();
-    virtual ~CGUIDialogNewJoystick() = default;
+    ~CGUIDialogNewJoystick() override = default;
 
     void ShowAsync();
 
   protected:
     // implementation of CThread
-    virtual void Process() override;
+    void Process() override;
   };
 }
 }
diff --git a/xbmc/input/joysticks/generic/ButtonMapping.h b/xbmc/input/joysticks/generic/ButtonMapping.h
index 5dcc45d1139d..16648bdea600 100644
--- a/xbmc/input/joysticks/generic/ButtonMapping.h
+++ b/xbmc/input/joysticks/generic/ButtonMapping.h
@@ -319,13 +319,13 @@ namespace JOYSTICK
      */
     CButtonMapping(IButtonMapper* buttonMapper, IButtonMap* buttonMap, IKeymap* keymap);
 
-    virtual ~CButtonMapping() = default;
+    ~CButtonMapping() override = default;
 
     // implementation of IDriverHandler
-    virtual bool OnButtonMotion(unsigned int buttonIndex, bool bPressed) override;
-    virtual bool OnHatMotion(unsigned int hatIndex, HAT_STATE state) override;
-    virtual bool OnAxisMotion(unsigned int axisIndex, float position, int center, unsigned int range) override;
-    virtual void ProcessAxisMotions(void) override;
+    bool OnButtonMotion(unsigned int buttonIndex, bool bPressed) override;
+    bool OnHatMotion(unsigned int hatIndex, HAT_STATE state) override;
+    bool OnAxisMotion(unsigned int axisIndex, float position, int center, unsigned int range) override;
+    void ProcessAxisMotions() override;
 
     // implementation of IKeyboardDriverHandler
     bool OnKeyPress(const CKey& key) override;
@@ -337,9 +337,9 @@ namespace JOYSTICK
     void OnButtonRelease(MOUSE::BUTTON_ID button) override;
 
     // implementation of IButtonMapCallback
-    virtual void SaveButtonMap() override;
-    virtual void ResetIgnoredPrimitives() override;
-    virtual void RevertButtonMap() override;
+    void SaveButtonMap() override;
+    void ResetIgnoredPrimitives() override;
+    void RevertButtonMap() override;
 
     /*!
      * \brief Process the primitive mapping command
diff --git a/xbmc/input/joysticks/generic/DriverReceiving.h b/xbmc/input/joysticks/generic/DriverReceiving.h
index 5f88f90f17ac..40043f3551f0 100644
--- a/xbmc/input/joysticks/generic/DriverReceiving.h
+++ b/xbmc/input/joysticks/generic/DriverReceiving.h
@@ -33,10 +33,10 @@ namespace JOYSTICK
   public:
     CDriverReceiving(IDriverReceiver* receiver, IButtonMap* buttonMap);
 
-    virtual ~CDriverReceiving() = default;
+    ~CDriverReceiving() override = default;
 
     // implementation of IInputReceiver
-    virtual bool SetRumbleState(const FeatureName& feature, float magnitude) override;
+    bool SetRumbleState(const FeatureName& feature, float magnitude) override;
 
   private:
     IDriverReceiver* const m_receiver;
diff --git a/xbmc/input/joysticks/generic/FeatureHandling.h b/xbmc/input/joysticks/generic/FeatureHandling.h
index 652c4f9e41d8..7cfe3fa7d5ca 100644
--- a/xbmc/input/joysticks/generic/FeatureHandling.h
+++ b/xbmc/input/joysticks/generic/FeatureHandling.h
@@ -112,12 +112,12 @@ namespace JOYSTICK
   {
   public:
     CScalarFeature(const FeatureName& name, IInputHandler* handler, IButtonMap* buttonMap);
-    virtual ~CScalarFeature() = default;
+    ~CScalarFeature() override = default;
 
     // implementation of CJoystickFeature
-    virtual bool OnDigitalMotion(const CDriverPrimitive& source, bool bPressed) override;
-    virtual bool OnAnalogMotion(const CDriverPrimitive& source, float magnitude) override;
-    virtual void ProcessMotions(void) override;
+    bool OnDigitalMotion(const CDriverPrimitive& source, bool bPressed) override;
+    bool OnAnalogMotion(const CDriverPrimitive& source, float magnitude) override;
+    void ProcessMotions() override;
 
   private:
     bool OnDigitalMotion(bool bPressed);
@@ -206,11 +206,11 @@ namespace JOYSTICK
   {
   public:
     CAxisFeature(const FeatureName& name, IInputHandler* handler, IButtonMap* buttonMap);
-    virtual ~CAxisFeature() = default;
+    ~CAxisFeature() override = default;
 
     // partial implementation of CJoystickFeature
-    virtual bool OnDigitalMotion(const CDriverPrimitive& source, bool bPressed) override;
-    virtual void ProcessMotions(void) override;
+    bool OnDigitalMotion(const CDriverPrimitive& source, bool bPressed) override;
+    void ProcessMotions() override;
 
   protected:
     CFeatureAxis m_axis;
@@ -222,32 +222,32 @@ namespace JOYSTICK
   {
   public:
     CWheel(const FeatureName& name, IInputHandler* handler, IButtonMap* buttonMap);
-    virtual ~CWheel() = default;
+    ~CWheel() override = default;
 
     // partial implementation of CJoystickFeature
-    virtual bool OnAnalogMotion(const CDriverPrimitive& source, float magnitude) override;
+    bool OnAnalogMotion(const CDriverPrimitive& source, float magnitude) override;
   };
 
   class CThrottle : public CAxisFeature
   {
   public:
     CThrottle(const FeatureName& name, IInputHandler* handler, IButtonMap* buttonMap);
-    virtual ~CThrottle() = default;
+    ~CThrottle() override = default;
 
     // partial implementation of CJoystickFeature
-    virtual bool OnAnalogMotion(const CDriverPrimitive& source, float magnitude) override;
+    bool OnAnalogMotion(const CDriverPrimitive& source, float magnitude) override;
   };
 
   class CAnalogStick : public CJoystickFeature
   {
   public:
     CAnalogStick(const FeatureName& name, IInputHandler* handler, IButtonMap* buttonMap);
-    virtual ~CAnalogStick() = default;
+    ~CAnalogStick() override = default;
 
     // implementation of CJoystickFeature
-    virtual bool OnDigitalMotion(const CDriverPrimitive& source, bool bPressed) override;
-    virtual bool OnAnalogMotion(const CDriverPrimitive& source, float magnitude) override;
-    virtual void ProcessMotions(void) override;
+    bool OnDigitalMotion(const CDriverPrimitive& source, bool bPressed) override;
+    bool OnAnalogMotion(const CDriverPrimitive& source, float magnitude) override;
+    void ProcessMotions() override;
 
   protected:
     CFeatureAxis m_vertAxis;
@@ -261,12 +261,12 @@ namespace JOYSTICK
   {
   public:
     CAccelerometer(const FeatureName& name, IInputHandler* handler, IButtonMap* buttonMap);
-    virtual ~CAccelerometer() = default;
+    ~CAccelerometer() override = default;
 
     // implementation of CJoystickFeature
-    virtual bool OnDigitalMotion(const CDriverPrimitive& source, bool bPressed) override;
-    virtual bool OnAnalogMotion(const CDriverPrimitive& source, float magnitude) override;
-    virtual void ProcessMotions(void) override;
+    bool OnDigitalMotion(const CDriverPrimitive& source, bool bPressed) override;
+    bool OnAnalogMotion(const CDriverPrimitive& source, float magnitude) override;
+    void ProcessMotions() override;
 
   protected:
     CFeatureAxis m_xAxis;
diff --git a/xbmc/input/joysticks/generic/InputHandling.h b/xbmc/input/joysticks/generic/InputHandling.h
index 35d6ce09c67d..3efbc7786d3e 100644
--- a/xbmc/input/joysticks/generic/InputHandling.h
+++ b/xbmc/input/joysticks/generic/InputHandling.h
@@ -41,13 +41,13 @@ namespace JOYSTICK
   public:
     CInputHandling(IInputHandler* handler, IButtonMap* buttonMap);
 
-    virtual ~CInputHandling(void);
+    ~CInputHandling() override;
 
     // implementation of IDriverHandler
-    virtual bool OnButtonMotion(unsigned int buttonIndex, bool bPressed) override;
-    virtual bool OnHatMotion(unsigned int hatIndex, HAT_STATE state) override;
-    virtual bool OnAxisMotion(unsigned int axisIndex, float position, int center, unsigned int range) override;
-    virtual void ProcessAxisMotions(void) override;
+    bool OnButtonMotion(unsigned int buttonIndex, bool bPressed) override;
+    bool OnHatMotion(unsigned int hatIndex, HAT_STATE state) override;
+    bool OnAxisMotion(unsigned int axisIndex, float position, int center, unsigned int range) override;
+    void ProcessAxisMotions() override;
 
   private:
     bool OnDigitalMotion(const CDriverPrimitive& source, bool bPressed);
diff --git a/xbmc/input/joysticks/keymaps/KeyHandler.h b/xbmc/input/joysticks/keymaps/KeyHandler.h
index e4ceeb15ede2..4847e48f86f2 100644
--- a/xbmc/input/joysticks/keymaps/KeyHandler.h
+++ b/xbmc/input/joysticks/keymaps/KeyHandler.h
@@ -35,12 +35,12 @@ namespace JOYSTICK
   public:
     CKeyHandler(const std::string &keyName, IActionListener *actionHandler, const IKeymap *keymap, IKeymapHandler *keymapHandler);
 
-    virtual ~CKeyHandler() = default;
+    ~CKeyHandler() override = default;
 
     // implementation of IKeyHandler
-    virtual bool IsPressed() const override { return m_bHeld; }
-    virtual bool OnDigitalMotion(bool bPressed, unsigned int holdTimeMs) override;
-    virtual bool OnAnalogMotion(float magnitude, unsigned int motionTimeMs) override;
+    bool IsPressed() const override { return m_bHeld; }
+    bool OnDigitalMotion(bool bPressed, unsigned int holdTimeMs) override;
+    bool OnAnalogMotion(float magnitude, unsigned int motionTimeMs) override;
 
   private:
     void Reset();
diff --git a/xbmc/input/joysticks/keymaps/KeymapHandler.h b/xbmc/input/joysticks/keymaps/KeymapHandler.h
index 244deceb56cf..a9e4eb810a60 100644
--- a/xbmc/input/joysticks/keymaps/KeymapHandler.h
+++ b/xbmc/input/joysticks/keymaps/KeymapHandler.h
@@ -36,24 +36,24 @@ namespace JOYSTICK
   public:
     CKeymapHandler(IActionListener *actionHandler, const IKeymap *keymap);
 
-    virtual ~CKeymapHandler() = default;
+    ~CKeymapHandler() override = default;
 
     // implementation of IKeymapHandler
-    virtual bool HotkeysPressed(const std::set<std::string>& keyNames) const override;
-    virtual std::string GetLastPressed() const override { return m_lastPressed; }
-    virtual void OnPress(const std::string& keyName) override { m_lastPressed = keyName; }
+    bool HotkeysPressed(const std::set<std::string>& keyNames) const override;
+    std::string GetLastPressed() const override { return m_lastPressed; }
+    void OnPress(const std::string& keyName) override { m_lastPressed = keyName; }
 
     // implementation of IInputHandler
-    virtual std::string ControllerID() const override;
-    virtual bool HasFeature(const FeatureName& feature) const override { return true; }
-    virtual bool AcceptsInput(const FeatureName& feature) const override;
-    virtual bool OnButtonPress(const FeatureName& feature, bool bPressed) override;
-    virtual void OnButtonHold(const FeatureName& feature, unsigned int holdTimeMs) override;
-    virtual bool OnButtonMotion(const FeatureName& feature, float magnitude, unsigned int motionTimeMs) override;
-    virtual bool OnAnalogStickMotion(const FeatureName& feature, float x, float y, unsigned int motionTimeMs) override;
-    virtual bool OnAccelerometerMotion(const FeatureName& feature, float x, float y, float z) override;
-    virtual bool OnWheelMotion(const FeatureName& feature, float position, unsigned int motionTimeMs) override;
-    virtual bool OnThrottleMotion(const FeatureName& feature, float position, unsigned int motionTimeMs) override;
+    std::string ControllerID() const override;
+    bool HasFeature(const FeatureName& feature) const override { return true; }
+    bool AcceptsInput(const FeatureName& feature) const override;
+    bool OnButtonPress(const FeatureName& feature, bool bPressed) override;
+    void OnButtonHold(const FeatureName& feature, unsigned int holdTimeMs) override;
+    bool OnButtonMotion(const FeatureName& feature, float magnitude, unsigned int motionTimeMs) override;
+    bool OnAnalogStickMotion(const FeatureName& feature, float x, float y, unsigned int motionTimeMs) override;
+    bool OnAccelerometerMotion(const FeatureName& feature, float x, float y, float z) override;
+    bool OnWheelMotion(const FeatureName& feature, float position, unsigned int motionTimeMs) override;
+    bool OnThrottleMotion(const FeatureName& feature, float position, unsigned int motionTimeMs) override;
 
   protected:
     // Keep track of cheat code presses
diff --git a/xbmc/input/joysticks/keymaps/KeymapHandling.h b/xbmc/input/joysticks/keymaps/KeymapHandling.h
index 5c5d6682d218..43903bfecbe4 100644
--- a/xbmc/input/joysticks/keymaps/KeymapHandling.h
+++ b/xbmc/input/joysticks/keymaps/KeymapHandling.h
@@ -34,7 +34,7 @@ namespace JOYSTICK
   public:
     CKeymapHandling(IInputProvider *inputProvider, bool pPromiscuous, const IKeymapEnvironment *environment);
 
-    virtual ~CKeymapHandling();
+    ~CKeymapHandling() override;
 
     /*!
      * \brief Unregister the input provider
@@ -56,7 +56,7 @@ namespace JOYSTICK
     IKeymap *GetKeymap(const std::string &controllerId) const;
 
     // implementation of Observer
-    virtual void Notify(const Observable &obs, const ObservableMessage msg) override;
+    void Notify(const Observable& obs, const ObservableMessage msg) override;
 
   private:
     void LoadKeymaps();
diff --git a/xbmc/input/touch/generic/GenericTouchInputHandler.h b/xbmc/input/touch/generic/GenericTouchInputHandler.h
index 1d8442752064..2d0b1dedb957 100644
--- a/xbmc/input/touch/generic/GenericTouchInputHandler.h
+++ b/xbmc/input/touch/generic/GenericTouchInputHandler.h
@@ -47,7 +47,7 @@ class CGenericTouchInputHandler : public ITouchInputHandler, private ITimerCallb
 private:
   // private construction, and no assignments; use the provided singleton methods
   CGenericTouchInputHandler();
-  ~CGenericTouchInputHandler();
+  ~CGenericTouchInputHandler() override;
   CGenericTouchInputHandler(const CGenericTouchInputHandler&) = delete;
   CGenericTouchInputHandler const& operator=(CGenericTouchInputHandler const&) = delete;
 
diff --git a/xbmc/interfaces/legacy/Control.h b/xbmc/interfaces/legacy/Control.h
index d89f48cbe49f..616e2879f80f 100644
--- a/xbmc/interfaces/legacy/Control.h
+++ b/xbmc/interfaces/legacy/Control.h
@@ -859,7 +859,7 @@ namespace XBMCAddon
       bool bHasPath = false;
       int iAngle = 0;
 
-      SWIGHIDDENVIRTUAL CGUIControl* Create() override;
+      CGUIControl* Create() override;
 
 #endif
     };
@@ -1058,7 +1058,7 @@ namespace XBMCAddon
       uint32_t align;
       bool bIsPassword = false;
 
-      SWIGHIDDENVIRTUAL CGUIControl* Create() override;
+      CGUIControl* Create() override;
 #endif
 
       // setType() Method
@@ -1628,7 +1628,7 @@ namespace XBMCAddon
 #ifndef SWIG
       void sendLabelBind(int tail);
 
-      SWIGHIDDENVIRTUAL bool canAcceptMessages(int actionId) override
+      bool canAcceptMessages(int actionId) override
       { return ((actionId == ACTION_SELECT_ITEM) | (actionId == ACTION_MOUSE_LEFT_CLICK)); }
 
       // This is called from AddonWindow.cpp but shouldn't be available
@@ -1653,7 +1653,7 @@ namespace XBMCAddon
       int itemTextOffsetY = 0;
       uint32_t alignmentY;
 
-      SWIGHIDDENVIRTUAL CGUIControl* Create() override;
+      CGUIControl* Create() override;
 #endif
     };
     /// @}
@@ -1798,7 +1798,7 @@ namespace XBMCAddon
       std::vector<std::string> vecLabels;
       uint32_t align;
 
-      SWIGHIDDENVIRTUAL CGUIControl* Create() override;
+      CGUIControl* Create() override;
 
       ControlFadeLabel() = default;
 #endif
@@ -1982,7 +1982,7 @@ namespace XBMCAddon
       std::string strFont;
       UTILS::Color textColor;
 
-      SWIGHIDDENVIRTUAL CGUIControl* Create() override;
+      CGUIControl* Create() override;
 
       ControlTextBox() = default;
 #endif
@@ -2101,7 +2101,7 @@ namespace XBMCAddon
       int aspectRatio = 0;
       UTILS::Color colorDiffuse;
 
-      SWIGHIDDENVIRTUAL CGUIControl* Create() override;
+      CGUIControl* Create() override;
 #endif
     };
     /// @}
@@ -2244,7 +2244,7 @@ namespace XBMCAddon
       int aspectRatio = 0;
       UTILS::Color colorDiffuse;
 
-      SWIGHIDDENVIRTUAL CGUIControl* Create() override;
+      CGUIControl* Create() override;
       ControlProgress() = default;
 #endif
     };
@@ -2452,7 +2452,7 @@ namespace XBMCAddon
 #endif
 
 #ifndef SWIG
-      SWIGHIDDENVIRTUAL bool canAcceptMessages(int actionId) override { return true; }
+      bool canAcceptMessages(int actionId) override { return true; }
 
       int textOffsetX = 0;
       int textOffsetY = 0;
@@ -2468,7 +2468,7 @@ namespace XBMCAddon
       std::string strTextureFocus;
       std::string strTextureNoFocus;
 
-      SWIGHIDDENVIRTUAL CGUIControl* Create() override;
+      CGUIControl* Create() override;
 
       ControlButton() = default;
 #endif
@@ -2518,7 +2518,7 @@ namespace XBMCAddon
       ControlGroup(long x, long y, long width, long height);
 
 #ifndef SWIG
-      SWIGHIDDENVIRTUAL CGUIControl* Create() override;
+      CGUIControl* Create() override;
 
       inline ControlGroup() = default;
 #endif
@@ -2755,7 +2755,7 @@ namespace XBMCAddon
 #endif
 
 #ifndef SWIG
-      SWIGHIDDENVIRTUAL bool canAcceptMessages(int actionId) override { return true; }
+      bool canAcceptMessages(int actionId) override { return true; }
 
       std::string strFont;
       std::string strText;
@@ -2776,7 +2776,7 @@ namespace XBMCAddon
       UTILS::Color shadowColor;
       UTILS::Color focusedColor;
 
-      SWIGHIDDENVIRTUAL CGUIControl* Create() override;
+      CGUIControl* Create() override;
 
       ControlRadioButton() = default;
 #endif
@@ -2991,7 +2991,7 @@ namespace XBMCAddon
       std::string strTextureFoc;
       int iOrientation;
 
-      SWIGHIDDENVIRTUAL CGUIControl* Create() override;
+      CGUIControl* Create() override;
 
       inline ControlSlider() = default;
 #endif
diff --git a/xbmc/interfaces/legacy/Player.h b/xbmc/interfaces/legacy/Player.h
index 4e8d734c4b19..19d03d94ed7d 100644
--- a/xbmc/interfaces/legacy/Player.h
+++ b/xbmc/interfaces/legacy/Player.h
@@ -790,18 +790,18 @@ namespace XBMCAddon
 #endif
 
 #if !defined SWIG && !defined DOXYGEN_SHOULD_SKIP_THIS
-      SWIGHIDDENVIRTUAL void OnPlayBackStarted(const CFileItem &file) override;
-      SWIGHIDDENVIRTUAL void OnAVStarted(const CFileItem &file) override;
-      SWIGHIDDENVIRTUAL void OnAVChange() override;
-      SWIGHIDDENVIRTUAL void OnPlayBackEnded() override;
-      SWIGHIDDENVIRTUAL void OnPlayBackStopped() override;
-      SWIGHIDDENVIRTUAL void OnPlayBackError() override;
-      SWIGHIDDENVIRTUAL void OnPlayBackPaused() override;
-      SWIGHIDDENVIRTUAL void OnPlayBackResumed() override;
-      SWIGHIDDENVIRTUAL void OnQueueNextItem() override;
-      SWIGHIDDENVIRTUAL void OnPlayBackSpeedChanged(int iSpeed) override;
-      SWIGHIDDENVIRTUAL void OnPlayBackSeek(int64_t iTime, int64_t seekOffset) override;
-      SWIGHIDDENVIRTUAL void OnPlayBackSeekChapter(int iChapter) override;
+      void OnPlayBackStarted(const CFileItem& file) override;
+      void OnAVStarted(const CFileItem& file) override;
+      void OnAVChange() override;
+      void OnPlayBackEnded() override;
+      void OnPlayBackStopped() override;
+      void OnPlayBackError() override;
+      void OnPlayBackPaused() override;
+      void OnPlayBackResumed() override;
+      void OnQueueNextItem() override;
+      void OnPlayBackSpeedChanged(int iSpeed) override;
+      void OnPlayBackSeek(int64_t iTime, int64_t seekOffset) override;
+      void OnPlayBackSeekChapter(int iChapter) override;
 #endif
 
     protected:
diff --git a/xbmc/interfaces/legacy/WindowDialog.h b/xbmc/interfaces/legacy/WindowDialog.h
index a644f65338ea..0d44c86cf694 100644
--- a/xbmc/interfaces/legacy/WindowDialog.h
+++ b/xbmc/interfaces/legacy/WindowDialog.h
@@ -55,16 +55,32 @@ namespace XBMCAddon
       ~WindowDialog() override;
 
 #ifndef SWIG
-      SWIGHIDDENVIRTUAL bool OnMessage(CGUIMessage& message) override;
-      SWIGHIDDENVIRTUAL bool OnAction(const CAction &action) override;
-      SWIGHIDDENVIRTUAL void OnDeinitWindow(int nextWindowID) override;
+      bool OnMessage(CGUIMessage& message) override;
+      bool OnAction(const CAction& action) override;
+      void OnDeinitWindow(int nextWindowID) override;
 
-      SWIGHIDDENVIRTUAL bool IsDialogRunning() const override { return WindowDialogMixin::IsDialogRunning(); }
-      SWIGHIDDENVIRTUAL bool IsModalDialog() const override { XBMC_TRACE; return true; };
-      SWIGHIDDENVIRTUAL bool IsDialog() const override { XBMC_TRACE; return true; };
+      bool IsDialogRunning() const override { return WindowDialogMixin::IsDialogRunning(); }
+      bool IsModalDialog() const override
+      {
+        XBMC_TRACE;
+        return true;
+      };
+      bool IsDialog() const override
+      {
+        XBMC_TRACE;
+        return true;
+      };
 
-      SWIGHIDDENVIRTUAL inline void show() override { XBMC_TRACE; WindowDialogMixin::show(); }
-      SWIGHIDDENVIRTUAL inline void close() override { XBMC_TRACE; WindowDialogMixin::close(); }
+      inline void show() override
+      {
+        XBMC_TRACE;
+        WindowDialogMixin::show();
+      }
+      inline void close() override
+      {
+        XBMC_TRACE;
+        WindowDialogMixin::close();
+      }
 #endif
     };
     ///@}
diff --git a/xbmc/interfaces/legacy/WindowXML.h b/xbmc/interfaces/legacy/WindowXML.h
index aab40532cad7..8beb6941ceae 100644
--- a/xbmc/interfaces/legacy/WindowXML.h
+++ b/xbmc/interfaces/legacy/WindowXML.h
@@ -416,15 +416,19 @@ namespace XBMCAddon
 
 #ifndef SWIG
       // CGUIWindow
-      SWIGHIDDENVIRTUAL bool OnMessage(CGUIMessage& message) override;
-      SWIGHIDDENVIRTUAL bool OnAction(const CAction &action) override;
+      bool OnMessage(CGUIMessage& message) override;
+      bool OnAction(const CAction& action) override;
       SWIGHIDDENVIRTUAL void AllocResources(bool forceLoad = false);
       SWIGHIDDENVIRTUAL void FreeResources(bool forceUnLoad = false);
       SWIGHIDDENVIRTUAL bool OnClick(int iItem);
       SWIGHIDDENVIRTUAL bool OnDoubleClick(int iItem);
       SWIGHIDDENVIRTUAL void Process(unsigned int currentTime, CDirtyRegionList &dirtyregions);
 
-      SWIGHIDDENVIRTUAL bool IsMediaWindow() const override { XBMC_TRACE; return m_isMedia; };
+      bool IsMediaWindow() const override
+      {
+        XBMC_TRACE;
+        return m_isMedia;
+      };
 
       // This method is identical to the Window::OnDeinitWindow method
       //  except it passes the message on to their respective parents.
@@ -529,18 +533,42 @@ namespace XBMCAddon
       ~WindowXMLDialog() override;
 
 #ifndef SWIG
-      SWIGHIDDENVIRTUAL bool OnMessage(CGUIMessage &message) override;
-      SWIGHIDDENVIRTUAL bool IsDialogRunning() const override { XBMC_TRACE; return WindowDialogMixin::IsDialogRunning(); }
-      SWIGHIDDENVIRTUAL bool IsDialog() const override { XBMC_TRACE; return true;};
-      SWIGHIDDENVIRTUAL bool IsModalDialog() const override { XBMC_TRACE; return true; };
-      SWIGHIDDENVIRTUAL bool IsMediaWindow() const override { XBMC_TRACE; return false; };
-      SWIGHIDDENVIRTUAL bool OnAction(const CAction &action) override;
-      SWIGHIDDENVIRTUAL void OnDeinitWindow(int nextWindowID) override;
-
-      SWIGHIDDENVIRTUAL bool LoadXML(const String &strPath, const String &strPathLower) override;
-
-      SWIGHIDDENVIRTUAL inline void show() override { XBMC_TRACE; WindowDialogMixin::show(); }
-      SWIGHIDDENVIRTUAL inline void close() override { XBMC_TRACE; WindowDialogMixin::close(); }
+      bool OnMessage(CGUIMessage& message) override;
+      bool IsDialogRunning() const override
+      {
+        XBMC_TRACE;
+        return WindowDialogMixin::IsDialogRunning();
+      }
+      bool IsDialog() const override
+      {
+        XBMC_TRACE;
+        return true;
+      };
+      bool IsModalDialog() const override
+      {
+        XBMC_TRACE;
+        return true;
+      };
+      bool IsMediaWindow() const override
+      {
+        XBMC_TRACE;
+        return false;
+      };
+      bool OnAction(const CAction& action) override;
+      void OnDeinitWindow(int nextWindowID) override;
+
+      bool LoadXML(const String& strPath, const String& strPathLower) override;
+
+      inline void show() override
+      {
+        XBMC_TRACE;
+        WindowDialogMixin::show();
+      }
+      inline void close() override
+      {
+        XBMC_TRACE;
+        WindowDialogMixin::close();
+      }
 
       friend class DialogJumper;
 #endif
diff --git a/xbmc/platform/android/activity/IInputHandler.h b/xbmc/platform/android/activity/IInputHandler.h
index f0059b12077a..914d01c9a0be 100644
--- a/xbmc/platform/android/activity/IInputHandler.h
+++ b/xbmc/platform/android/activity/IInputHandler.h
@@ -27,5 +27,5 @@ class IInputHandler
   , CAndroidJoyStick()
   {}
 
-  virtual void setDPI(uint32_t dpi) { CAndroidTouch::setDPI(dpi); }
+  void setDPI(uint32_t dpi) override { CAndroidTouch::setDPI(dpi); }
 };
diff --git a/xbmc/platform/android/activity/JNIMainActivity.h b/xbmc/platform/android/activity/JNIMainActivity.h
index 3f1b4f30fd30..3204fb09582d 100644
--- a/xbmc/platform/android/activity/JNIMainActivity.h
+++ b/xbmc/platform/android/activity/JNIMainActivity.h
@@ -16,7 +16,7 @@ class CJNIMainActivity : public CJNIActivity, public CJNIInputManagerInputDevice
 {
 public:
   explicit CJNIMainActivity(const ANativeActivity *nativeActivity);
-  ~CJNIMainActivity();
+  ~CJNIMainActivity() override;
 
   static CJNIMainActivity* GetAppInstance() { return m_appInstance; }
 
@@ -44,7 +44,7 @@ class CJNIMainActivity : public CJNIActivity, public CJNIInputManagerInputDevice
   virtual void onActivityResult(int requestCode, int resultCode, CJNIIntent resultData)=0;
   virtual void onVolumeChanged(int volume)=0;
   virtual void doFrame(int64_t frameTimeNanos)=0;
-  virtual void onVisibleBehindCanceled() = 0;
+  void onVisibleBehindCanceled() override = 0;
 
   virtual void onDisplayAdded(int displayId)=0;
   virtual void onDisplayChanged(int displayId)=0;
diff --git a/xbmc/platform/android/activity/JNIXBMCAudioManagerOnAudioFocusChangeListener.h b/xbmc/platform/android/activity/JNIXBMCAudioManagerOnAudioFocusChangeListener.h
index 4accbf362232..37a45fb80c0c 100644
--- a/xbmc/platform/android/activity/JNIXBMCAudioManagerOnAudioFocusChangeListener.h
+++ b/xbmc/platform/android/activity/JNIXBMCAudioManagerOnAudioFocusChangeListener.h
@@ -17,7 +17,7 @@ class CJNIXBMCAudioManagerOnAudioFocusChangeListener : public CJNIAudioManagerAu
   CJNIXBMCAudioManagerOnAudioFocusChangeListener();
   CJNIXBMCAudioManagerOnAudioFocusChangeListener(const CJNIXBMCAudioManagerOnAudioFocusChangeListener& other);
   explicit CJNIXBMCAudioManagerOnAudioFocusChangeListener(const jni::jhobject &object) : CJNIBase(object) {}
-  virtual ~CJNIXBMCAudioManagerOnAudioFocusChangeListener();
+  ~CJNIXBMCAudioManagerOnAudioFocusChangeListener() override;
 
   static void RegisterNatives(JNIEnv* env);
 
diff --git a/xbmc/platform/android/activity/JNIXBMCFile.h b/xbmc/platform/android/activity/JNIXBMCFile.h
index ba1cad4ac3cd..b19afce4d408 100644
--- a/xbmc/platform/android/activity/JNIXBMCFile.h
+++ b/xbmc/platform/android/activity/JNIXBMCFile.h
@@ -22,7 +22,7 @@ namespace jni
   public:
     CJNIXBMCFile();
     CJNIXBMCFile(const jni::jhobject &object) : CJNIBase(object) {}
-    virtual ~CJNIXBMCFile() = default;
+    ~CJNIXBMCFile() override = default;
 
     static void RegisterNatives(JNIEnv* env);
 
diff --git a/xbmc/platform/android/activity/JNIXBMCJsonHandler.h b/xbmc/platform/android/activity/JNIXBMCJsonHandler.h
index de1592e20141..6681253811ff 100644
--- a/xbmc/platform/android/activity/JNIXBMCJsonHandler.h
+++ b/xbmc/platform/android/activity/JNIXBMCJsonHandler.h
@@ -25,7 +25,7 @@ namespace jni
 
 
   protected:
-    virtual ~CJNIXBMCJsonHandler() = default;
+    ~CJNIXBMCJsonHandler() override = default;
 
     static jstring _requestJSON(JNIEnv* env, jobject thiz, jstring request);
 
@@ -33,7 +33,7 @@ namespace jni
     {
     public:
       CJNITransportLayer() = default;
-      ~CJNITransportLayer() = default;
+      ~CJNITransportLayer() override = default;
 
       // implementations of JSONRPC::ITransportLayer
       bool PrepareDownload(const char *path, CVariant &details, std::string &protocol) override;
@@ -44,9 +44,9 @@ namespace jni
     class CJNIClient : public JSONRPC::IClient
     {
     public:
-      virtual int  GetPermissionFlags();
-      virtual int  GetAnnouncementFlags();
-      virtual bool SetAnnouncementFlags(int flags);
+      int GetPermissionFlags() override;
+      int GetAnnouncementFlags() override;
+      bool SetAnnouncementFlags(int flags) override;
     };
 
   };
diff --git a/xbmc/platform/android/activity/JNIXBMCMainView.h b/xbmc/platform/android/activity/JNIXBMCMainView.h
index a2e4e212c8c4..c709b13f7ce4 100644
--- a/xbmc/platform/android/activity/JNIXBMCMainView.h
+++ b/xbmc/platform/android/activity/JNIXBMCMainView.h
@@ -20,14 +20,14 @@ class CJNIXBMCMainView : virtual public CJNIBase, public CJNISurfaceHolderCallba
 {
 public:
   CJNIXBMCMainView(CJNISurfaceHolderCallback* callback);
-  ~CJNIXBMCMainView() = default;
+  ~CJNIXBMCMainView() override = default;
 
   static void RegisterNatives(JNIEnv* env);
 
   // CJNISurfaceHolderCallback interface
-  void surfaceChanged(CJNISurfaceHolder holder, int format, int width, int height);
-  void surfaceCreated(CJNISurfaceHolder holder);
-  void surfaceDestroyed(CJNISurfaceHolder holder);
+  void surfaceChanged(CJNISurfaceHolder holder, int format, int width, int height) override;
+  void surfaceCreated(CJNISurfaceHolder holder) override;
+  void surfaceDestroyed(CJNISurfaceHolder holder) override;
 
   void attach(const jobject& thiz);
   bool waitForSurface(unsigned int millis);
diff --git a/xbmc/platform/android/activity/JNIXBMCMediaSession.h b/xbmc/platform/android/activity/JNIXBMCMediaSession.h
index 192cf1947b3e..4ecfa326bac2 100644
--- a/xbmc/platform/android/activity/JNIXBMCMediaSession.h
+++ b/xbmc/platform/android/activity/JNIXBMCMediaSession.h
@@ -22,7 +22,7 @@ class CJNIXBMCMediaSession : public CJNIBase, public CJNIInterfaceImplem<CJNIXBM
   CJNIXBMCMediaSession();
   CJNIXBMCMediaSession(const CJNIXBMCMediaSession& other);
   CJNIXBMCMediaSession(const jni::jhobject &object) : CJNIBase(object) {}
-  virtual ~CJNIXBMCMediaSession();
+  ~CJNIXBMCMediaSession() override;
 
   static void RegisterNatives(JNIEnv* env);
 
diff --git a/xbmc/platform/android/activity/JNIXBMCNsdManagerDiscoveryListener.h b/xbmc/platform/android/activity/JNIXBMCNsdManagerDiscoveryListener.h
index d2ae9a86edab..69a14ed58311 100644
--- a/xbmc/platform/android/activity/JNIXBMCNsdManagerDiscoveryListener.h
+++ b/xbmc/platform/android/activity/JNIXBMCNsdManagerDiscoveryListener.h
@@ -20,18 +20,18 @@ class CJNIXBMCNsdManagerDiscoveryListener : public CJNINsdManagerDiscoveryListen
   CJNIXBMCNsdManagerDiscoveryListener();
   CJNIXBMCNsdManagerDiscoveryListener(const CJNIXBMCNsdManagerDiscoveryListener& other);
   explicit CJNIXBMCNsdManagerDiscoveryListener(const jni::jhobject &object) : CJNIBase(object) {}
-  virtual ~CJNIXBMCNsdManagerDiscoveryListener();
+  ~CJNIXBMCNsdManagerDiscoveryListener() override;
 
   static void RegisterNatives(JNIEnv* env);
 
   // CJNINsdManagerDiscoveryListener interface
 public:
-  void onDiscoveryStarted(const std::string& serviceType) = 0;
-  void onDiscoveryStopped(const std::string& serviceType) = 0;
-  void onServiceFound(const CJNINsdServiceInfo& serviceInfo) = 0;
-  void onServiceLost(const CJNINsdServiceInfo& serviceInfo) = 0;
-  void onStartDiscoveryFailed(const std::string& serviceType, int errorCode) = 0;
-  void onStopDiscoveryFailed(const std::string& serviceType, int errorCode) = 0;
+  void onDiscoveryStarted(const std::string& serviceType) override = 0;
+  void onDiscoveryStopped(const std::string& serviceType) override = 0;
+  void onServiceFound(const CJNINsdServiceInfo& serviceInfo) override = 0;
+  void onServiceLost(const CJNINsdServiceInfo& serviceInfo) override = 0;
+  void onStartDiscoveryFailed(const std::string& serviceType, int errorCode) override = 0;
+  void onStopDiscoveryFailed(const std::string& serviceType, int errorCode) override = 0;
 
 protected:
   static void _onDiscoveryStarted(JNIEnv* env, jobject thiz, jstring serviceType);
diff --git a/xbmc/platform/android/activity/JNIXBMCNsdManagerRegistrationListener.h b/xbmc/platform/android/activity/JNIXBMCNsdManagerRegistrationListener.h
index a3ff15b34dce..f056629a977b 100644
--- a/xbmc/platform/android/activity/JNIXBMCNsdManagerRegistrationListener.h
+++ b/xbmc/platform/android/activity/JNIXBMCNsdManagerRegistrationListener.h
@@ -20,7 +20,7 @@ class CJNIXBMCNsdManagerRegistrationListener : public CJNINsdManagerRegistration
   CJNIXBMCNsdManagerRegistrationListener();
   CJNIXBMCNsdManagerRegistrationListener(const CJNIXBMCNsdManagerRegistrationListener& other);
   explicit CJNIXBMCNsdManagerRegistrationListener(const jni::jhobject &object) : CJNIBase(object) {}
-  virtual ~CJNIXBMCNsdManagerRegistrationListener();
+  ~CJNIXBMCNsdManagerRegistrationListener() override;
 
   static void RegisterNatives(JNIEnv* env);
 
diff --git a/xbmc/platform/android/activity/JNIXBMCNsdManagerResolveListener.h b/xbmc/platform/android/activity/JNIXBMCNsdManagerResolveListener.h
index d409131be16b..001867922af1 100644
--- a/xbmc/platform/android/activity/JNIXBMCNsdManagerResolveListener.h
+++ b/xbmc/platform/android/activity/JNIXBMCNsdManagerResolveListener.h
@@ -21,13 +21,13 @@ class CJNIXBMCNsdManagerResolveListener : public CJNINsdManagerResolveListener,
   CJNIXBMCNsdManagerResolveListener();
   CJNIXBMCNsdManagerResolveListener(const CJNIXBMCNsdManagerResolveListener& other);
   explicit CJNIXBMCNsdManagerResolveListener(const jni::jhobject &object) : CJNIBase(object) {}
-  virtual ~CJNIXBMCNsdManagerResolveListener();
+  ~CJNIXBMCNsdManagerResolveListener() override;
 
   static void RegisterNatives(JNIEnv* env);
 
   // CJNINsdManagerResolveListener interface
-  void onResolveFailed(const CJNINsdServiceInfo& serviceInfo, int errorCode) = 0;
-  void onServiceResolved(const CJNINsdServiceInfo& serviceInfo) = 0;
+  void onResolveFailed(const CJNINsdServiceInfo& serviceInfo, int errorCode) override = 0;
+  void onServiceResolved(const CJNINsdServiceInfo& serviceInfo) override = 0;
 
 protected:
   static void _onResolveFailed(JNIEnv* env, jobject thiz, jobject serviceInfo, jint errorCode);
diff --git a/xbmc/platform/android/activity/JNIXBMCSurfaceTextureOnFrameAvailableListener.h b/xbmc/platform/android/activity/JNIXBMCSurfaceTextureOnFrameAvailableListener.h
index dbe3ddc84408..060e795d6d99 100644
--- a/xbmc/platform/android/activity/JNIXBMCSurfaceTextureOnFrameAvailableListener.h
+++ b/xbmc/platform/android/activity/JNIXBMCSurfaceTextureOnFrameAvailableListener.h
@@ -17,11 +17,11 @@ class CJNIXBMCSurfaceTextureOnFrameAvailableListener : public CJNISurfaceTexture
   CJNIXBMCSurfaceTextureOnFrameAvailableListener();
   CJNIXBMCSurfaceTextureOnFrameAvailableListener(const CJNIXBMCSurfaceTextureOnFrameAvailableListener& other);
   CJNIXBMCSurfaceTextureOnFrameAvailableListener(const jni::jhobject &object) : CJNIBase(object) {}
-  virtual ~CJNIXBMCSurfaceTextureOnFrameAvailableListener();
+  ~CJNIXBMCSurfaceTextureOnFrameAvailableListener() override;
 
   static void RegisterNatives(JNIEnv* env);
 
-  void onFrameAvailable(CJNISurfaceTexture) {}
+  void onFrameAvailable(CJNISurfaceTexture) override {}
 
 protected:
   static void _onFrameAvailable(JNIEnv* env, jobject thiz, jobject surface);
diff --git a/xbmc/platform/android/activity/JNIXBMCVideoView.h b/xbmc/platform/android/activity/JNIXBMCVideoView.h
index 45c0008e3bf0..a11f527c8db6 100644
--- a/xbmc/platform/android/activity/JNIXBMCVideoView.h
+++ b/xbmc/platform/android/activity/JNIXBMCVideoView.h
@@ -21,16 +21,16 @@ class CJNIXBMCVideoView : virtual public CJNIBase, public CJNISurfaceHolderCallb
 {
 public:
   CJNIXBMCVideoView(const jni::jhobject &object);
-  ~CJNIXBMCVideoView() = default;
+  ~CJNIXBMCVideoView() override = default;
 
   static void RegisterNatives(JNIEnv* env);
 
   static CJNIXBMCVideoView* createVideoView(CJNISurfaceHolderCallback* callback);
 
   // CJNISurfaceHolderCallback interface
-  void surfaceChanged(CJNISurfaceHolder holder, int format, int width, int height);
-  void surfaceCreated(CJNISurfaceHolder holder);
-  void surfaceDestroyed(CJNISurfaceHolder holder);
+  void surfaceChanged(CJNISurfaceHolder holder, int format, int width, int height) override;
+  void surfaceCreated(CJNISurfaceHolder holder) override;
+  void surfaceDestroyed(CJNISurfaceHolder holder) override;
 
   static void _surfaceChanged(JNIEnv* env, jobject thiz, jobject holder, jint format, jint width, jint height);
   static void _surfaceCreated(JNIEnv* env, jobject thiz, jobject holder);
diff --git a/xbmc/platform/android/activity/XBMCApp.h b/xbmc/platform/android/activity/XBMCApp.h
index c7a047b9907e..6104fb62b550 100644
--- a/xbmc/platform/android/activity/XBMCApp.h
+++ b/xbmc/platform/android/activity/XBMCApp.h
@@ -86,19 +86,19 @@ class CXBMCApp
 {
 public:
   explicit CXBMCApp(ANativeActivity *nativeActivity);
-  virtual ~CXBMCApp();
+  ~CXBMCApp() override;
   static CXBMCApp* get() { return m_xbmcappinstance; }
 
   // IAnnouncer IF
-  virtual void Announce(ANNOUNCEMENT::AnnouncementFlag flag, const char *sender, const char *message, const CVariant &data) override;
+  void Announce(ANNOUNCEMENT::AnnouncementFlag flag, const char* sender, const char* message, const CVariant& data) override;
 
-  virtual void onReceive(CJNIIntent intent) override;
-  virtual void onNewIntent(CJNIIntent intent) override;
-  virtual void onActivityResult(int requestCode, int resultCode, CJNIIntent resultData) override;
-  virtual void onVolumeChanged(int volume) override;
+  void onReceive(CJNIIntent intent) override;
+  void onNewIntent(CJNIIntent intent) override;
+  void onActivityResult(int requestCode, int resultCode, CJNIIntent resultData) override;
+  void onVolumeChanged(int volume) override;
   virtual void onAudioFocusChange(int focusChange);
-  virtual void doFrame(int64_t frameTimeNanos) override;
-  virtual void onVisibleBehindCanceled() override;
+  void doFrame(int64_t frameTimeNanos) override;
+  void onVisibleBehindCanceled() override;
 
   // implementation of CJNIInputManagerInputDeviceListener
   void onInputDeviceAdded(int deviceId) override;
diff --git a/xbmc/platform/android/filesystem/APKDirectory.h b/xbmc/platform/android/filesystem/APKDirectory.h
index ac24cf846c69..2a74f52098a7 100644
--- a/xbmc/platform/android/filesystem/APKDirectory.h
+++ b/xbmc/platform/android/filesystem/APKDirectory.h
@@ -16,10 +16,10 @@ namespace XFILE
   {
   public:
     CAPKDirectory() = default;
-    virtual ~CAPKDirectory() = default;
-    virtual bool GetDirectory(const CURL& url, CFileItemList& items);
-    virtual bool ContainsFiles(const CURL& url);
-    virtual DIR_CACHE_TYPE GetCacheType(const CURL& url) const;
-    virtual bool Exists(const CURL& url);
+    ~CAPKDirectory() override = default;
+    bool GetDirectory(const CURL& url, CFileItemList& items) override;
+    bool ContainsFiles(const CURL& url) override;
+    DIR_CACHE_TYPE GetCacheType(const CURL& url) const override;
+    bool Exists(const CURL& url) override;
   };
 }
diff --git a/xbmc/platform/android/filesystem/APKFile.h b/xbmc/platform/android/filesystem/APKFile.h
index 9c383b1067b2..288c96f9159d 100644
--- a/xbmc/platform/android/filesystem/APKFile.h
+++ b/xbmc/platform/android/filesystem/APKFile.h
@@ -20,18 +20,19 @@ namespace XFILE
   {
   public:
     CAPKFile();
-    virtual ~CAPKFile() = default;
-    virtual bool Open(const CURL& url);
-    virtual void Close();
-    virtual bool Exists(const CURL& url);
+    ~CAPKFile() override = default;
+    bool Open(const CURL& url) override;
+    void Close() override;
+    bool Exists(const CURL& url) override;
+
+    int64_t Seek(int64_t iFilePosition, int iWhence = SEEK_SET) override;
+    ssize_t Read(void* lpBuf, size_t uiBufSize) override;
+    int Stat(struct __stat64* buffer) override;
+    int Stat(const CURL& url, struct __stat64* buffer) override;
+    int64_t GetLength() override;
+    int64_t GetPosition() override;
+    int GetChunkSize() override;
 
-    virtual int64_t Seek(int64_t iFilePosition, int iWhence = SEEK_SET);
-    virtual ssize_t Read(void* lpBuf, size_t uiBufSize);
-    virtual int Stat(struct __stat64* buffer);
-    virtual int Stat(const CURL& url, struct __stat64* buffer);
-    virtual int64_t GetLength();
-    virtual int64_t GetPosition();
-    virtual int GetChunkSize();
   protected:
     CURL              m_url;
     int               m_zip_index;
diff --git a/xbmc/platform/android/filesystem/AndroidAppDirectory.h b/xbmc/platform/android/filesystem/AndroidAppDirectory.h
index afa685ad6bb4..facc16fb9273 100644
--- a/xbmc/platform/android/filesystem/AndroidAppDirectory.h
+++ b/xbmc/platform/android/filesystem/AndroidAppDirectory.h
@@ -18,10 +18,10 @@ class CAndroidAppDirectory :
 {
 public:
   CAndroidAppDirectory() = default;
-  virtual ~CAndroidAppDirectory() = default;
-  virtual bool GetDirectory(const CURL& url, CFileItemList &items) override;
-  virtual bool Exists(const CURL& url) override { return true; };
-  virtual bool AllowAll() const override { return true; };
-  virtual DIR_CACHE_TYPE GetCacheType(const CURL& url) const override { return DIR_CACHE_NEVER; }
+  ~CAndroidAppDirectory() override = default;
+  bool GetDirectory(const CURL& url, CFileItemList& items) override;
+  bool Exists(const CURL& url) override { return true; };
+  bool AllowAll() const override { return true; };
+  DIR_CACHE_TYPE GetCacheType(const CURL& url) const override { return DIR_CACHE_NEVER; }
 };
 }
diff --git a/xbmc/platform/android/filesystem/AndroidAppFile.h b/xbmc/platform/android/filesystem/AndroidAppFile.h
index 816bde31c47f..3857b6e2f2e3 100644
--- a/xbmc/platform/android/filesystem/AndroidAppFile.h
+++ b/xbmc/platform/android/filesystem/AndroidAppFile.h
@@ -20,19 +20,19 @@ class CFileAndroidApp : public IFile
 public:
   /*! \brief Currently only used for retrieving App Icons. */
   CFileAndroidApp(void);
-  virtual ~CFileAndroidApp(void);
-  virtual bool Open(const CURL& url);
-  virtual bool Exists(const CURL& url);
-  virtual int Stat(const CURL& url, struct __stat64* buffer);
+  ~CFileAndroidApp() override;
+  bool Open(const CURL& url) override;
+  bool Exists(const CURL& url) override;
+  int Stat(const CURL& url, struct __stat64* buffer) override;
 
   /*! \brief Return 32bit rgba raw bitmap. */
-  virtual ssize_t Read(void* lpBuf, size_t uiBufSize) {return 0;}
-  virtual void Close();
-  virtual int64_t GetLength()  {return 0;}
-  virtual int64_t Seek(int64_t, int) {return -1;}
-  virtual int64_t GetPosition() {return 0;}
-  virtual int GetChunkSize();
-  virtual int IoControl(EIoControl request, void* param);
+  ssize_t Read(void* lpBuf, size_t uiBufSize) override { return 0; }
+  void Close() override;
+  int64_t GetLength() override { return 0; }
+  int64_t Seek(int64_t, int) override { return -1; }
+  int64_t GetPosition() override { return 0; }
+  int GetChunkSize() override;
+  int IoControl(EIoControl request, void* param) override;
 
   virtual unsigned int ReadIcon(unsigned char **lpBuf, unsigned int* width, unsigned int* height);
 
diff --git a/xbmc/platform/android/media/drm/MediaDrmCryptoSession.h b/xbmc/platform/android/media/drm/MediaDrmCryptoSession.h
index e321bc18bd69..21b71956d3c9 100644
--- a/xbmc/platform/android/media/drm/MediaDrmCryptoSession.h
+++ b/xbmc/platform/android/media/drm/MediaDrmCryptoSession.h
@@ -39,7 +39,7 @@ namespace DRM
   public:
     static void Register();
     CMediaDrmCryptoSession(const std::string& UUID, const std::string& cipherAlgo, const std::string& macAlgo);
-    virtual ~CMediaDrmCryptoSession();
+    ~CMediaDrmCryptoSession() override;
 
     // Interface methods
     XbmcCommons::Buffer GetKeyRequest(const XbmcCommons::Buffer& init, const std::string& mimeType, bool offlineKey, const std::map<std::string, std::string>& parameters) override;
diff --git a/xbmc/platform/android/network/NetworkAndroid.h b/xbmc/platform/android/network/NetworkAndroid.h
index f79c13306fea..5a668490bf4b 100644
--- a/xbmc/platform/android/network/NetworkAndroid.h
+++ b/xbmc/platform/android/network/NetworkAndroid.h
@@ -27,14 +27,14 @@ class CNetworkInterfaceAndroid : public CNetworkInterface
 
   // CNetworkInterface interface
 public:
-  virtual bool IsEnabled() const override;
-  virtual bool IsConnected() const override;
-  virtual std::string GetMacAddress() const override;
-  virtual void GetMacAddressRaw(char rawMac[6]) const override;
-  virtual bool GetHostMacAddress(unsigned long host_ip, std::string& mac) const override;
-  virtual std::string GetCurrentIPAddress() const override;
-  virtual std::string GetCurrentNetmask() const override;
-  virtual std::string GetCurrentDefaultGateway() const override;
+  bool IsEnabled() const override;
+  bool IsConnected() const override;
+  std::string GetMacAddress() const override;
+  void GetMacAddressRaw(char rawMac[6]) const override;
+  bool GetHostMacAddress(unsigned long host_ip, std::string& mac) const override;
+  std::string GetCurrentIPAddress() const override;
+  std::string GetCurrentNetmask() const override;
+  std::string GetCurrentDefaultGateway() const override;
 
   std::string GetHostName();
 
@@ -52,18 +52,18 @@ class CNetworkAndroid : public CNetworkBase
 
 public:
   CNetworkAndroid();
-  ~CNetworkAndroid();
+  ~CNetworkAndroid() override;
 
   // CNetwork interface
 public:
-  virtual bool GetHostName(std::string& hostname) override;
-  virtual std::vector<CNetworkInterface*>& GetInterfaceList() override;
-  virtual CNetworkInterface* GetFirstConnectedInterface() override;
-  virtual std::vector<std::string> GetNameServers() override;
+  bool GetHostName(std::string& hostname) override;
+  std::vector<CNetworkInterface*>& GetInterfaceList() override;
+  CNetworkInterface* GetFirstConnectedInterface() override;
+  std::vector<std::string> GetNameServers() override;
 
   // Ping remote host
   using CNetworkBase::PingHost;
-  virtual bool PingHost(unsigned long remote_ip, unsigned int timeout_ms = 2000) override;
+  bool PingHost(unsigned long remote_ip, unsigned int timeout_ms = 2000) override;
 
 protected:
   void RetrieveInterfaces();
diff --git a/xbmc/platform/android/network/ZeroconfAndroid.h b/xbmc/platform/android/network/ZeroconfAndroid.h
index 4c7b7efe9c79..b31f20416c9f 100644
--- a/xbmc/platform/android/network/ZeroconfAndroid.h
+++ b/xbmc/platform/android/network/ZeroconfAndroid.h
@@ -20,14 +20,14 @@ class CZeroconfAndroid : public CZeroconf
 {
 public:
   CZeroconfAndroid();
-  virtual ~CZeroconfAndroid();
+  ~CZeroconfAndroid() override;
 
   // CZeroconf interface
 protected:
-  bool doPublishService(const std::string& fcr_identifier, const std::string& fcr_type, const std::string& fcr_name, unsigned int f_port, const std::vector<std::pair<std::string, std::string> >& txt);
-  bool doForceReAnnounceService(const std::string& fcr_identifier);
-  bool doRemoveService(const std::string& fcr_ident);
-  void doStop();
+  bool doPublishService(const std::string& fcr_identifier, const std::string& fcr_type, const std::string& fcr_name, unsigned int f_port, const std::vector<std::pair<std::string, std::string>>& txt) override;
+  bool doForceReAnnounceService(const std::string& fcr_identifier) override;
+  bool doRemoveService(const std::string& fcr_ident) override;
+  void doStop() override;
 
 private:
   jni::CJNINsdManager m_manager;
diff --git a/xbmc/platform/android/network/ZeroconfBrowserAndroid.h b/xbmc/platform/android/network/ZeroconfBrowserAndroid.h
index d03f8bf97a63..eda7e8c08b9c 100644
--- a/xbmc/platform/android/network/ZeroconfBrowserAndroid.h
+++ b/xbmc/platform/android/network/ZeroconfBrowserAndroid.h
@@ -27,12 +27,12 @@ class CZeroconfBrowserAndroidDiscover : public jni::CJNIXBMCNsdManagerDiscoveryL
 
   // CJNINsdManagerDiscoveryListener interface
 public:
-  void onDiscoveryStarted(const std::string& serviceType);
-  void onDiscoveryStopped(const std::string& serviceType);
-  void onServiceFound(const jni::CJNINsdServiceInfo& serviceInfo);
-  void onServiceLost(const jni::CJNINsdServiceInfo& serviceInfo);
-  void onStartDiscoveryFailed(const std::string& serviceType, int errorCode);
-  void onStopDiscoveryFailed(const std::string& serviceType, int errorCode);
+  void onDiscoveryStarted(const std::string& serviceType) override;
+  void onDiscoveryStopped(const std::string& serviceType) override;
+  void onServiceFound(const jni::CJNINsdServiceInfo& serviceInfo) override;
+  void onServiceLost(const jni::CJNINsdServiceInfo& serviceInfo) override;
+  void onStartDiscoveryFailed(const std::string& serviceType, int errorCode) override;
+  void onStopDiscoveryFailed(const std::string& serviceType, int errorCode) override;
 
 protected:
   CZeroconfBrowserAndroid* m_browser;
@@ -46,8 +46,8 @@ class CZeroconfBrowserAndroidResolve : public jni::CJNIXBMCNsdManagerResolveList
 
   // CJNINsdManagerResolveListener interface
 public:
-  void onResolveFailed(const jni::CJNINsdServiceInfo& serviceInfo, int errorCode);
-  void onServiceResolved(const jni::CJNINsdServiceInfo& serviceInfo);
+  void onResolveFailed(const jni::CJNINsdServiceInfo& serviceInfo, int errorCode) override;
+  void onServiceResolved(const jni::CJNINsdServiceInfo& serviceInfo) override;
 
   CEvent m_resolutionDone;
   int m_errorCode;
@@ -60,14 +60,14 @@ class CZeroconfBrowserAndroid : public CZeroconfBrowser
 
 public:
   CZeroconfBrowserAndroid();
-  virtual ~CZeroconfBrowserAndroid();
+  ~CZeroconfBrowserAndroid() override;
 
   // CZeroconfBrowser interface
 protected:
-  bool doAddServiceType(const std::string& fcr_service_type);
-  bool doRemoveServiceType(const std::string& fcr_service_type);
-  std::vector<ZeroconfService> doGetFoundServices();
-  bool doResolveService(ZeroconfService& fr_service, double f_timeout);
+  bool doAddServiceType(const std::string& fcr_service_type) override;
+  bool doRemoveServiceType(const std::string& fcr_service_type) override;
+  std::vector<ZeroconfService> doGetFoundServices() override;
+  bool doResolveService(ZeroconfService& fr_service, double f_timeout) override;
 
   void addDiscoveredService(CZeroconfBrowserAndroidDiscover* browser, const CZeroconfBrowser::ZeroconfService& fcr_service);
   void removeDiscoveredService(CZeroconfBrowserAndroidDiscover* browser, const CZeroconfBrowser::ZeroconfService& fcr_service);
diff --git a/xbmc/platform/android/powermanagement/AndroidPowerSyscall.h b/xbmc/platform/android/powermanagement/AndroidPowerSyscall.h
index 188f7385542d..c51cd1f0ec62 100644
--- a/xbmc/platform/android/powermanagement/AndroidPowerSyscall.h
+++ b/xbmc/platform/android/powermanagement/AndroidPowerSyscall.h
@@ -14,21 +14,21 @@ class CAndroidPowerSyscall : public CPowerSyscallWithoutEvents
 {
 public:
   CAndroidPowerSyscall() = default;
-  ~CAndroidPowerSyscall() = default;
+  ~CAndroidPowerSyscall() override = default;
 
   static IPowerSyscall* CreateInstance();
   static void Register();
 
-  virtual bool Powerdown(void) { return false; }
-  virtual bool Suspend(void) { return false; }
-  virtual bool Hibernate(void) { return false; }
-  virtual bool Reboot(void) { return false; }
+  bool Powerdown() override { return false; }
+  bool Suspend() override { return false; }
+  bool Hibernate() override { return false; }
+  bool Reboot() override { return false; }
 
-  virtual bool CanPowerdown(void) { return false; }
-  virtual bool CanSuspend(void) { return false; }
-  virtual bool CanHibernate(void) { return false; }
-  virtual bool CanReboot(void) { return false; }
-  virtual int  BatteryLevel(void);
+  bool CanPowerdown() override { return false; }
+  bool CanSuspend() override { return false; }
+  bool CanHibernate() override { return false; }
+  bool CanReboot() override { return false; }
+  int BatteryLevel() override;
 
-  virtual bool PumpPowerEvents(IPowerEventsCallback *callback);
+  bool PumpPowerEvents(IPowerEventsCallback* callback) override;
 };
diff --git a/xbmc/platform/android/storage/AndroidStorageProvider.h b/xbmc/platform/android/storage/AndroidStorageProvider.h
index 10d1a239ad82..429e6e873c5b 100644
--- a/xbmc/platform/android/storage/AndroidStorageProvider.h
+++ b/xbmc/platform/android/storage/AndroidStorageProvider.h
@@ -18,17 +18,17 @@ class CAndroidStorageProvider : public IStorageProvider
 {
 public:
   CAndroidStorageProvider();
-  virtual ~CAndroidStorageProvider() = default;
+  ~CAndroidStorageProvider() override = default;
 
-  virtual void Initialize() { }
-  virtual void Stop() { }
-  virtual bool Eject(const std::string& mountpath) { return false; }
+  void Initialize() override {}
+  void Stop() override {}
+  bool Eject(const std::string& mountpath) override { return false; }
 
-  virtual void GetLocalDrives(VECSOURCES &localDrives);
-  virtual void GetRemovableDrives(VECSOURCES &removableDrives);
-  virtual std::vector<std::string> GetDiskUsage();
+  void GetLocalDrives(VECSOURCES& localDrives) override;
+  void GetRemovableDrives(VECSOURCES& removableDrives) override;
+  std::vector<std::string> GetDiskUsage() override;
 
-  virtual bool PumpDriveChangeEvents(IStorageEventsCallback *callback);
+  bool PumpDriveChangeEvents(IStorageEventsCallback* callback) override;
 
 private:
   std::string unescape(const std::string& str);
diff --git a/xbmc/platform/darwin/PlatformDarwin.h b/xbmc/platform/darwin/PlatformDarwin.h
index 86b940fdeabf..7af51bf09cd6 100644
--- a/xbmc/platform/darwin/PlatformDarwin.h
+++ b/xbmc/platform/darwin/PlatformDarwin.h
@@ -17,7 +17,7 @@ class CPlatformDarwin : public CPlatformPosix
     CPlatformDarwin() = default;
 
     /**\brief D'tor */
-    virtual ~CPlatformDarwin() = default;
+    ~CPlatformDarwin() override = default;
 
     void Init() override;
 };
diff --git a/xbmc/platform/darwin/ios-common/AnnounceReceiver.h b/xbmc/platform/darwin/ios-common/AnnounceReceiver.h
index 05c5ddd3fe7a..44df89798585 100644
--- a/xbmc/platform/darwin/ios-common/AnnounceReceiver.h
+++ b/xbmc/platform/darwin/ios-common/AnnounceReceiver.h
@@ -20,7 +20,7 @@ class CAnnounceReceiver : public ANNOUNCEMENT::IAnnouncer
   void    Initialize();
   void    DeInitialize();
 
-  virtual void Announce(ANNOUNCEMENT::AnnouncementFlag flag, const char *sender, const char *message, const CVariant &data);
+  void Announce(ANNOUNCEMENT::AnnouncementFlag flag, const char* sender, const char* message, const CVariant& data) override;
 
 private:
   CAnnounceReceiver() = default;
diff --git a/xbmc/platform/darwin/ios-common/IOSKeyboard.h b/xbmc/platform/darwin/ios-common/IOSKeyboard.h
index 91f1872709ca..74e5166bd761 100644
--- a/xbmc/platform/darwin/ios-common/IOSKeyboard.h
+++ b/xbmc/platform/darwin/ios-common/IOSKeyboard.h
@@ -16,11 +16,11 @@ class CIOSKeyboard : public CGUIKeyboard
 {
   public:
     CIOSKeyboard();
-    virtual bool ShowAndGetInput(char_callback_t pCallback, const std::string &initialString, std::string &typedString, const std::string &heading, bool bHiddenInput);
-    virtual void Cancel();
+    bool ShowAndGetInput(char_callback_t pCallback, const std::string& initialString, std::string& typedString, const std::string& heading, bool bHiddenInput) override;
+    void Cancel() override;
     void fireCallback(const std::string &str);
     void invalidateCallback() {m_pCharCallback = nullptr;}
-    virtual bool SetTextToKeyboard(const std::string &text, bool closeKeyboard = false);
+    bool SetTextToKeyboard(const std::string& text, bool closeKeyboard = false) override;
 
   private:
     char_callback_t m_pCharCallback;
diff --git a/xbmc/platform/darwin/ios-common/storage/IOSStorageProvider.h b/xbmc/platform/darwin/ios-common/storage/IOSStorageProvider.h
index 3acf36338991..902234287e3c 100644
--- a/xbmc/platform/darwin/ios-common/storage/IOSStorageProvider.h
+++ b/xbmc/platform/darwin/ios-common/storage/IOSStorageProvider.h
@@ -17,17 +17,17 @@ class CIOSStorageProvider : public IStorageProvider
 {
 public:
   CIOSStorageProvider() {}
-  virtual ~CIOSStorageProvider() {}
+  ~CIOSStorageProvider() override {}
 
-  virtual void Initialize() {}
-  virtual void Stop() {}
+  void Initialize() override {}
+  void Stop() override {}
 
-  virtual void GetLocalDrives(VECSOURCES& localDrives);
-  virtual void GetRemovableDrives(VECSOURCES& removableDrives) {}
+  void GetLocalDrives(VECSOURCES& localDrives) override;
+  void GetRemovableDrives(VECSOURCES& removableDrives) override {}
 
-  virtual std::vector<std::string> GetDiskUsage(void);
+  std::vector<std::string> GetDiskUsage(void) override;
 
-  virtual bool Eject(const std::string& mountpath) { return false; }
+  bool Eject(const std::string& mountpath) override { return false; }
 
-  virtual bool PumpDriveChangeEvents(IStorageEventsCallback* callback) { return false; }
+  bool PumpDriveChangeEvents(IStorageEventsCallback* callback) override { return false; }
 };
diff --git a/xbmc/platform/darwin/network/ZeroconfBrowserDarwin.h b/xbmc/platform/darwin/network/ZeroconfBrowserDarwin.h
index 30d0ca484533..ad4cc0219e20 100644
--- a/xbmc/platform/darwin/network/ZeroconfBrowserDarwin.h
+++ b/xbmc/platform/darwin/network/ZeroconfBrowserDarwin.h
@@ -29,16 +29,16 @@ class CZeroconfBrowserDarwin : public CZeroconfBrowser
 {
 public:
   CZeroconfBrowserDarwin();
-  ~CZeroconfBrowserDarwin();
+  ~CZeroconfBrowserDarwin() override;
 
 private:
   ///implementation if CZeroconfBrowser interface
   ///@{
-  virtual bool doAddServiceType(const std::string &fcr_service_type);
-  virtual bool doRemoveServiceType(const std::string &fcr_service_type);
+  bool doAddServiceType(const std::string& fcr_service_type) override;
+  bool doRemoveServiceType(const std::string& fcr_service_type) override;
 
-  virtual std::vector<CZeroconfBrowser::ZeroconfService> doGetFoundServices();
-  virtual bool doResolveService(CZeroconfBrowser::ZeroconfService &fr_service, double f_timeout);
+  std::vector<CZeroconfBrowser::ZeroconfService> doGetFoundServices() override;
+  bool doResolveService(CZeroconfBrowser::ZeroconfService& fr_service, double f_timeout) override;
   ///@}
 
   /// browser callback
diff --git a/xbmc/platform/darwin/network/ZeroconfDarwin.h b/xbmc/platform/darwin/network/ZeroconfDarwin.h
index 04c1a4f802a2..9afba32667ae 100644
--- a/xbmc/platform/darwin/network/ZeroconfDarwin.h
+++ b/xbmc/platform/darwin/network/ZeroconfDarwin.h
@@ -25,20 +25,21 @@ class CZeroconfDarwin : public CZeroconf
 {
 public:
   CZeroconfDarwin();
-  ~CZeroconfDarwin();
+  ~CZeroconfDarwin() override;
+
 protected:
   //implement base CZeroConf interface
   bool doPublishService(const std::string& fcr_identifier,
                         const std::string& fcr_type,
                         const std::string& fcr_name,
                         unsigned int f_port,
-                        const std::vector<std::pair<std::string, std::string> >& txt);
+                        const std::vector<std::pair<std::string, std::string>>& txt) override;
 
-  bool doForceReAnnounceService(const std::string& fcr_identifier);
+  bool doForceReAnnounceService(const std::string& fcr_identifier) override;
 
-  bool doRemoveService(const std::string& fcr_ident);
+  bool doRemoveService(const std::string& fcr_ident) override;
 
-  virtual void doStop();
+  void doStop() override;
 
 private:
   static void registerCallback(CFNetServiceRef theService, CFStreamError* error, void* info);
diff --git a/xbmc/platform/darwin/osx/XBMCHelper.h b/xbmc/platform/darwin/osx/XBMCHelper.h
index 5b539235aa9b..580d2b8561e5 100644
--- a/xbmc/platform/darwin/osx/XBMCHelper.h
+++ b/xbmc/platform/darwin/osx/XBMCHelper.h
@@ -25,7 +25,7 @@ class XBMCHelper : public ISettingCallback
  public:
   static XBMCHelper& GetInstance();
 
-  virtual bool OnSettingChanging(std::shared_ptr<const CSetting> setting) override;
+  bool OnSettingChanging(std::shared_ptr<const CSetting> setting) override;
 
   void Start();
   void Stop();
diff --git a/xbmc/platform/darwin/osx/peripherals/PeripheralBusUSB.h b/xbmc/platform/darwin/osx/peripherals/PeripheralBusUSB.h
index 89afb072c48e..f56cadd3d4be 100644
--- a/xbmc/platform/darwin/osx/peripherals/PeripheralBusUSB.h
+++ b/xbmc/platform/darwin/osx/peripherals/PeripheralBusUSB.h
@@ -22,12 +22,12 @@ namespace PERIPHERALS
   {
   public:
     explicit CPeripheralBusUSB(CPeripherals& manager);
-    virtual ~CPeripheralBusUSB();
+    ~CPeripheralBusUSB() override;
 
     /*!
      * @see PeripheralBus::PerformDeviceScan()
      */
-    bool PerformDeviceScan(PeripheralScanResults &results);
+    bool PerformDeviceScan(PeripheralScanResults& results) override;
 
   protected:
     PeripheralScanResults m_scan_results;
diff --git a/xbmc/platform/darwin/osx/powermanagement/CocoaPowerSyscall.h b/xbmc/platform/darwin/osx/powermanagement/CocoaPowerSyscall.h
index 214855abbf16..98589c32dd36 100644
--- a/xbmc/platform/darwin/osx/powermanagement/CocoaPowerSyscall.h
+++ b/xbmc/platform/darwin/osx/powermanagement/CocoaPowerSyscall.h
@@ -17,24 +17,25 @@ class CCocoaPowerSyscall : public CPowerSyscallWithoutEvents
 {
 public:
   CCocoaPowerSyscall();
-  ~CCocoaPowerSyscall();
+  ~CCocoaPowerSyscall() override;
 
   static IPowerSyscall* CreateInstance();
   static void Register();
 
-  virtual bool Powerdown(void);
-  virtual bool Suspend(void);
-  virtual bool Hibernate(void);
-  virtual bool Reboot(void);
+  bool Powerdown() override;
+  bool Suspend() override;
+  bool Hibernate() override;
+  bool Reboot() override;
 
-  virtual bool CanPowerdown(void);
-  virtual bool CanSuspend(void);
-  virtual bool CanHibernate(void);
-  virtual bool CanReboot(void);
-          bool HasBattery(void);
-  virtual int  BatteryLevel(void);
+  bool CanPowerdown() override;
+  bool CanSuspend() override;
+  bool CanHibernate() override;
+  bool CanReboot() override;
+  bool HasBattery();
+  int BatteryLevel() override;
+
+  bool PumpPowerEvents(IPowerEventsCallback* callback) override;
 
-  virtual bool PumpPowerEvents(IPowerEventsCallback *callback);
 private:
           void CreateOSPowerCallBacks(void);
           void DeleteOSPowerCallBacks(void);
diff --git a/xbmc/platform/darwin/osx/storage/OSXStorageProvider.h b/xbmc/platform/darwin/osx/storage/OSXStorageProvider.h
index a7eac8541047..26f57fec4b5e 100644
--- a/xbmc/platform/darwin/osx/storage/OSXStorageProvider.h
+++ b/xbmc/platform/darwin/osx/storage/OSXStorageProvider.h
@@ -18,19 +18,19 @@ class COSXStorageProvider : public IStorageProvider
 {
 public:
   COSXStorageProvider();
-  virtual ~COSXStorageProvider() = default;
+  ~COSXStorageProvider() override = default;
 
-  virtual void Initialize() { }
-  virtual void Stop() { }
+  void Initialize() override {}
+  void Stop() override {}
 
-  virtual void GetLocalDrives(VECSOURCES &localDrives);
-  virtual void GetRemovableDrives(VECSOURCES &removableDrives);
+  void GetLocalDrives(VECSOURCES& localDrives) override;
+  void GetRemovableDrives(VECSOURCES& removableDrives) override;
 
-  virtual std::vector<std::string> GetDiskUsage(void);
+  std::vector<std::string> GetDiskUsage() override;
 
-  virtual bool Eject(const std::string& mountpath);
+  bool Eject(const std::string& mountpath) override;
 
-  virtual bool PumpDriveChangeEvents(IStorageEventsCallback *callback);
+  bool PumpDriveChangeEvents(IStorageEventsCallback* callback) override;
 
   static void VolumeMountNotification(const char* label, const char* mountpoint);
   static void VolumeUnmountNotification(const char* label, const char* mountpoint);
diff --git a/xbmc/platform/linux/input/LibInputHandler.h b/xbmc/platform/linux/input/LibInputHandler.h
index e552cd7bf344..202330cb3037 100644
--- a/xbmc/platform/linux/input/LibInputHandler.h
+++ b/xbmc/platform/linux/input/LibInputHandler.h
@@ -25,7 +25,7 @@ class CLibInputHandler : CThread
 {
 public:
   CLibInputHandler();
-  ~CLibInputHandler();
+  ~CLibInputHandler() override;
 
   void Start();
 
diff --git a/xbmc/platform/linux/input/LibInputSettings.h b/xbmc/platform/linux/input/LibInputSettings.h
index 5547df54a801..8509b390c765 100644
--- a/xbmc/platform/linux/input/LibInputSettings.h
+++ b/xbmc/platform/linux/input/LibInputSettings.h
@@ -25,7 +25,7 @@ class CLibInputSettings : public ISettingCallback, public ISettingsHandler
   static void SettingOptionsKeyboardLayoutsFiller(std::shared_ptr<const CSetting> setting, std::vector<StringSettingOption> &list, std::string &current, void *data);
 
   CLibInputSettings(CLibInputHandler *handler);
-  ~CLibInputSettings();
+  ~CLibInputSettings() override;
 
 private:
   CLibInputHandler *m_libInputHandler{nullptr};
diff --git a/xbmc/platform/linux/storage/LinuxStorageProvider.h b/xbmc/platform/linux/storage/LinuxStorageProvider.h
index 6d67523d7687..e1c575fb6e61 100644
--- a/xbmc/platform/linux/storage/LinuxStorageProvider.h
+++ b/xbmc/platform/linux/storage/LinuxStorageProvider.h
@@ -16,7 +16,7 @@ class CLinuxStorageProvider : public IStorageProvider
 {
 public:
   CLinuxStorageProvider();
-  virtual ~CLinuxStorageProvider();
+  ~CLinuxStorageProvider() override;
 
   void Initialize() override;
   void Stop() override;
diff --git a/xbmc/platform/overrides/android/PlatformAndroid.h b/xbmc/platform/overrides/android/PlatformAndroid.h
index 3a7e3ed95aa3..f3860929ab60 100644
--- a/xbmc/platform/overrides/android/PlatformAndroid.h
+++ b/xbmc/platform/overrides/android/PlatformAndroid.h
@@ -17,7 +17,7 @@ class CPlatformAndroid : public CPlatformPosix
     CPlatformAndroid() = default;
 
     /**\brief D'tor */
-    virtual ~CPlatformAndroid() = default;
+    ~CPlatformAndroid() override = default;
 
     void Init() override;
 };
diff --git a/xbmc/playlists/SmartPlayList.h b/xbmc/playlists/SmartPlayList.h
index a05fe8515deb..68b35e823bef 100644
--- a/xbmc/playlists/SmartPlayList.h
+++ b/xbmc/playlists/SmartPlayList.h
@@ -88,7 +88,7 @@ class CSmartPlaylist : public IDatabaseQueryRuleFactory
 {
 public:
   CSmartPlaylist();
-  virtual ~CSmartPlaylist() = default;
+  ~CSmartPlaylist() override = default;
 
   bool Load(const CURL& url);
   bool Load(const std::string &path);
diff --git a/xbmc/rendering/gl/GLShader.h b/xbmc/rendering/gl/GLShader.h
index c8943d535640..c39fb29d7da5 100644
--- a/xbmc/rendering/gl/GLShader.h
+++ b/xbmc/rendering/gl/GLShader.h
@@ -17,8 +17,8 @@ class CGLShader : public Shaders::CGLSLShaderProgram
 public:
   CGLShader(const char *shader, std::string prefix);
   CGLShader(const char *vshader, const char *fshader, std::string prefix);
-  void OnCompiledAndLinked();
-  bool OnEnabled();
+  void OnCompiledAndLinked() override;
+  bool OnEnabled() override;
   void Free();
 
   GLint GetPosLoc() {return m_hPos;}
diff --git a/xbmc/rendering/gles/GLESShader.h b/xbmc/rendering/gles/GLESShader.h
index 373bc1afafbb..53c0772fbcd3 100644
--- a/xbmc/rendering/gles/GLESShader.h
+++ b/xbmc/rendering/gles/GLESShader.h
@@ -17,8 +17,8 @@ class CGLESShader : public Shaders::CGLSLShaderProgram
 public:
   CGLESShader( const char *shader, std::string prefix);
   CGLESShader(const char *vshader, const char *fshader, std::string prefix);
-  void OnCompiledAndLinked();
-  bool OnEnabled();
+  void OnCompiledAndLinked() override;
+  bool OnEnabled() override;
   void Free();
 
   GLint GetPosLoc()   { return m_hPos;   }
diff --git a/xbmc/rendering/gles/RenderSystemGLES.h b/xbmc/rendering/gles/RenderSystemGLES.h
index e3c505f136f4..ffe7c65e24ab 100644
--- a/xbmc/rendering/gles/RenderSystemGLES.h
+++ b/xbmc/rendering/gles/RenderSystemGLES.h
@@ -36,7 +36,7 @@ class CRenderSystemGLES : public CRenderSystemBase
 {
 public:
   CRenderSystemGLES();
-  virtual ~CRenderSystemGLES() = default;
+  ~CRenderSystemGLES() override = default;
 
   bool InitRenderSystem() override;
   bool DestroyRenderSystem() override;
diff --git a/xbmc/settings/DiscSettings.h b/xbmc/settings/DiscSettings.h
index 678e9a5976ef..a4cbad56a01e 100644
--- a/xbmc/settings/DiscSettings.h
+++ b/xbmc/settings/DiscSettings.h
@@ -30,5 +30,5 @@ class CDiscSettings : public ISettingCallback
 
 private:
   CDiscSettings() = default;
-  ~CDiscSettings() = default;
+  ~CDiscSettings() override = default;
 };
diff --git a/xbmc/utils/BooleanLogic.h b/xbmc/utils/BooleanLogic.h
index f0e5c7c64c85..03551345fabd 100644
--- a/xbmc/utils/BooleanLogic.h
+++ b/xbmc/utils/BooleanLogic.h
@@ -25,7 +25,7 @@ class CBooleanLogicValue : public IXmlDeserializable
   CBooleanLogicValue(const std::string &value = "", bool negated = false)
     : m_value(value), m_negated(negated)
   { }
-  virtual ~CBooleanLogicValue() = default;
+  ~CBooleanLogicValue() override = default;
 
   bool Deserialize(const TiXmlNode *node) override;
 
@@ -54,7 +54,7 @@ class CBooleanLogicOperation : public IXmlDeserializable
   explicit CBooleanLogicOperation(BooleanLogicOperation op = BooleanLogicOperationAnd)
     : m_operation(op)
   { }
-  virtual ~CBooleanLogicOperation() = default;
+  ~CBooleanLogicOperation() override = default;
 
   bool Deserialize(const TiXmlNode *node) override;
 
@@ -77,7 +77,7 @@ class CBooleanLogic : public IXmlDeserializable
 {
 protected:
   /* make sure nobody deletes a pointer to this class */
-  ~CBooleanLogic() = default;
+  ~CBooleanLogic() override = default;
 
 public:
   bool Deserialize(const TiXmlNode *node) override;
diff --git a/xbmc/utils/GBMBufferObject.h b/xbmc/utils/GBMBufferObject.h
index d7a4f004b954..cd14be5fb650 100644
--- a/xbmc/utils/GBMBufferObject.h
+++ b/xbmc/utils/GBMBufferObject.h
@@ -19,7 +19,7 @@ class CGBMBufferObject : public IBufferObject
 {
 public:
   CGBMBufferObject(int format);
-  virtual ~CGBMBufferObject() override;
+  ~CGBMBufferObject() override;
 
   bool CreateBufferObject(int width, int height) override;
   void DestroyBufferObject() override;
diff --git a/xbmc/video/tags/VideoTagLoaderFFmpeg.h b/xbmc/video/tags/VideoTagLoaderFFmpeg.h
index a262506f1abf..f6b50df1a17c 100644
--- a/xbmc/video/tags/VideoTagLoaderFFmpeg.h
+++ b/xbmc/video/tags/VideoTagLoaderFFmpeg.h
@@ -30,7 +30,7 @@ class CVideoTagLoaderFFmpeg : public VIDEO::IVideoInfoTagLoader
                         bool lookInFolder);
 
   //! \brief Destructor.
-  virtual ~CVideoTagLoaderFFmpeg();
+  ~CVideoTagLoaderFFmpeg() override;
 
   //! \brief Returns whether or not reader has info.
   bool HasInfo() const override;
diff --git a/xbmc/video/tags/VideoTagLoaderNFO.h b/xbmc/video/tags/VideoTagLoaderNFO.h
index 69f405ee3716..e6124c8ad789 100644
--- a/xbmc/video/tags/VideoTagLoaderNFO.h
+++ b/xbmc/video/tags/VideoTagLoaderNFO.h
@@ -21,7 +21,7 @@ class CVideoTagLoaderNFO : public VIDEO::IVideoInfoTagLoader
                      ADDON::ScraperPtr info,
                      bool lookInFolder);
 
-  virtual ~CVideoTagLoaderNFO() = default;
+  ~CVideoTagLoaderNFO() override = default;
 
   //! \brief Returns whether or not read has info.
   bool HasInfo() const override;
diff --git a/xbmc/video/tags/VideoTagLoaderPlugin.h b/xbmc/video/tags/VideoTagLoaderPlugin.h
index 22ef90c5a56d..7da92c14fedb 100644
--- a/xbmc/video/tags/VideoTagLoaderPlugin.h
+++ b/xbmc/video/tags/VideoTagLoaderPlugin.h
@@ -22,7 +22,7 @@ class CVideoTagLoaderPlugin : public VIDEO::IVideoInfoTagLoader
 public:
   CVideoTagLoaderPlugin(const CFileItem& item, bool forceRefresh);
 
-  virtual ~CVideoTagLoaderPlugin() = default;
+  ~CVideoTagLoaderPlugin() override = default;
 
   //! \brief Returns whether or not read has info.
   bool HasInfo() const override;
diff --git a/xbmc/windowing/X11/WinEventsX11.h b/xbmc/windowing/X11/WinEventsX11.h
index a063aca1af21..a757241f5b44 100644
--- a/xbmc/windowing/X11/WinEventsX11.h
+++ b/xbmc/windowing/X11/WinEventsX11.h
@@ -21,7 +21,7 @@ class CWinEventsX11 : public IWinEvents
 {
 public:
   CWinEventsX11(CWinSystemX11& winSystem);
-  virtual ~CWinEventsX11();
+  ~CWinEventsX11() override;
   bool MessagePump() override;
   bool Init(Display *dpy, Window win);
   void Quit();
diff --git a/xbmc/windowing/X11/X11DPMSSupport.h b/xbmc/windowing/X11/X11DPMSSupport.h
index 95e650e2e869..c6ce8df97f60 100644
--- a/xbmc/windowing/X11/X11DPMSSupport.h
+++ b/xbmc/windowing/X11/X11DPMSSupport.h
@@ -12,7 +12,7 @@ class CX11DPMSSupport : public CDPMSSupport
 {
 public:
   CX11DPMSSupport();
-  ~CX11DPMSSupport() = default;
+  ~CX11DPMSSupport() override = default;
 
 protected:
   bool EnablePowerSaving(PowerSavingMode mode) override;
diff --git a/xbmc/windowing/android/AndroidUtils.h b/xbmc/windowing/android/AndroidUtils.h
index 5cb4efeed6da..28e32152cb4f 100644
--- a/xbmc/windowing/android/AndroidUtils.h
+++ b/xbmc/windowing/android/AndroidUtils.h
@@ -20,7 +20,7 @@ class CAndroidUtils : public ISettingCallback
 {
 public:
   CAndroidUtils();
-  virtual ~CAndroidUtils() = default;
+  ~CAndroidUtils() override = default;
   bool GetNativeResolution(RESOLUTION_INFO* res) const;
   bool SetNativeResolution(const RESOLUTION_INFO& res);
   bool ProbeResolutions(std::vector<RESOLUTION_INFO>& resolutions);
diff --git a/xbmc/windowing/android/VideoSyncAndroid.h b/xbmc/windowing/android/VideoSyncAndroid.h
index ec261fe97557..6bf76c0adcd9 100644
--- a/xbmc/windowing/android/VideoSyncAndroid.h
+++ b/xbmc/windowing/android/VideoSyncAndroid.h
@@ -17,13 +17,13 @@ class CVideoSyncAndroid : public CVideoSync, IDispResource
   CVideoSyncAndroid(void *clock) : CVideoSync(clock), m_LastVBlankTime(0) {}
 
   // CVideoSync interface
-  virtual bool Setup(PUPDATECLOCK func) override;
-  virtual void Run(CEvent& stop) override;
-  virtual void Cleanup() override;
-  virtual float GetFps() override;
+  bool Setup(PUPDATECLOCK func) override;
+  void Run(CEvent& stop) override;
+  void Cleanup() override;
+  float GetFps() override;
 
   // IDispResource interface
-  virtual void OnResetDisplay() override;
+  void OnResetDisplay() override;
 
   // Choreographer callback
   void FrameCallback(int64_t frameTimeNanos);
diff --git a/xbmc/windowing/android/WinEventsAndroid.h b/xbmc/windowing/android/WinEventsAndroid.h
index afc8f3383dab..62b04b585846 100644
--- a/xbmc/windowing/android/WinEventsAndroid.h
+++ b/xbmc/windowing/android/WinEventsAndroid.h
@@ -22,17 +22,17 @@ class CWinEventsAndroid : public IWinEvents, public CThread
 {
 public:
   CWinEventsAndroid();
- ~CWinEventsAndroid();
+  ~CWinEventsAndroid() override;
 
   void            MessagePush(XBMC_Event *newEvent);
   void            MessagePushRepeat(XBMC_Event *repeatEvent);
-  bool            MessagePump();
+  bool MessagePump() override;
 
 private:
   size_t          GetQueueSize();
 
   // for CThread
-  virtual void    Process();
+  void Process() override;
 
   CCriticalSection             m_eventsCond;
   std::list<XBMC_Event>        m_events;
diff --git a/xbmc/windowing/android/WinSystemAndroid.h b/xbmc/windowing/android/WinSystemAndroid.h
index 0024188ae053..b387d9583fd0 100644
--- a/xbmc/windowing/android/WinSystemAndroid.h
+++ b/xbmc/windowing/android/WinSystemAndroid.h
@@ -23,7 +23,7 @@ class CWinSystemAndroid : public CWinSystemBase, public ITimerCallback
 {
 public:
   CWinSystemAndroid();
-  virtual ~CWinSystemAndroid();
+  ~CWinSystemAndroid() override;
 
   bool InitWindowSystem() override;
   bool DestroyWindowSystem() override;
diff --git a/xbmc/windowing/android/WinSystemAndroidGLESContext.h b/xbmc/windowing/android/WinSystemAndroidGLESContext.h
index de1fe8bf0c5a..78d285b33706 100644
--- a/xbmc/windowing/android/WinSystemAndroidGLESContext.h
+++ b/xbmc/windowing/android/WinSystemAndroidGLESContext.h
@@ -20,7 +20,7 @@ class CWinSystemAndroidGLESContext : public CWinSystemAndroid, public CRenderSys
 {
 public:
   CWinSystemAndroidGLESContext() = default;
-  virtual ~CWinSystemAndroidGLESContext() = default;
+  ~CWinSystemAndroidGLESContext() override = default;
 
   // Implementation of CWinSystemBase via CWinSystemAndroid
   CRenderSystemBase *GetRenderSystem() override { return this; }
@@ -32,7 +32,7 @@ class CWinSystemAndroidGLESContext : public CWinSystemAndroid, public CRenderSys
   bool ResizeWindow(int newWidth, int newHeight, int newLeft, int newTop) override;
   bool SetFullScreen(bool fullScreen, RESOLUTION_INFO& res, bool blankOtherDisplays) override;
 
-  virtual std::unique_ptr<CVideoSync> GetVideoSync(void *clock) override;
+  std::unique_ptr<CVideoSync> GetVideoSync(void* clock) override;
 
   float GetFrameLatencyAdjustment() override;
   bool IsHDRDisplay() override;
diff --git a/xbmc/windowing/gbm/DRMAtomic.h b/xbmc/windowing/gbm/DRMAtomic.h
index 1aa96127f45c..d08d72e3fc0f 100644
--- a/xbmc/windowing/gbm/DRMAtomic.h
+++ b/xbmc/windowing/gbm/DRMAtomic.h
@@ -21,13 +21,13 @@ class CDRMAtomic : public CDRMUtils
 {
 public:
   CDRMAtomic() = default;
-  ~CDRMAtomic() { DestroyDrm(); };
-  virtual void FlipPage(struct gbm_bo *bo, bool rendered, bool videoLayer) override;
-  virtual bool SetVideoMode(const RESOLUTION_INFO& res, struct gbm_bo *bo) override;
-  virtual bool SetActive(bool active) override;
-  virtual bool InitDrm() override;
-  virtual void DestroyDrm() override;
-  virtual bool AddProperty(struct drm_object *object, const char *name, uint64_t value) override;
+  ~CDRMAtomic() override { DestroyDrm(); };
+  void FlipPage(struct gbm_bo* bo, bool rendered, bool videoLayer) override;
+  bool SetVideoMode(const RESOLUTION_INFO& res, struct gbm_bo* bo) override;
+  bool SetActive(bool active) override;
+  bool InitDrm() override;
+  void DestroyDrm() override;
+  bool AddProperty(struct drm_object* object, const char* name, uint64_t value) override;
 
 private:
   void DrmAtomicCommit(int fb_id, int flags, bool rendered, bool videoLayer);
diff --git a/xbmc/windowing/gbm/DRMLegacy.h b/xbmc/windowing/gbm/DRMLegacy.h
index 822af9f621e7..b78a10d2b205 100644
--- a/xbmc/windowing/gbm/DRMLegacy.h
+++ b/xbmc/windowing/gbm/DRMLegacy.h
@@ -21,12 +21,12 @@ class CDRMLegacy : public CDRMUtils
 {
 public:
   CDRMLegacy() = default;
-  ~CDRMLegacy() { DestroyDrm(); };
-  virtual void FlipPage(struct gbm_bo *bo, bool rendered, bool videoLayer) override;
-  virtual bool SetVideoMode(const RESOLUTION_INFO& res, struct gbm_bo *bo) override;
-  virtual bool SetActive(bool active) override;
-  virtual bool InitDrm() override;
-  virtual bool SetProperty(struct drm_object *object, const char *name, uint64_t value) override;
+  ~CDRMLegacy() override { DestroyDrm(); };
+  void FlipPage(struct gbm_bo* bo, bool rendered, bool videoLayer) override;
+  bool SetVideoMode(const RESOLUTION_INFO& res, struct gbm_bo* bo) override;
+  bool SetActive(bool active) override;
+  bool InitDrm() override;
+  bool SetProperty(struct drm_object* object, const char* name, uint64_t value) override;
 
 private:
   bool WaitingForFlip();
diff --git a/xbmc/windowing/gbm/GBMDPMSSupport.h b/xbmc/windowing/gbm/GBMDPMSSupport.h
index 75d0500989d0..f5fabf8da142 100644
--- a/xbmc/windowing/gbm/GBMDPMSSupport.h
+++ b/xbmc/windowing/gbm/GBMDPMSSupport.h
@@ -14,7 +14,7 @@ class CGBMDPMSSupport : public CDPMSSupport
 {
 public:
   CGBMDPMSSupport();
-  ~CGBMDPMSSupport() = default;
+  ~CGBMDPMSSupport() override = default;
 
 protected:
   bool EnablePowerSaving(PowerSavingMode mode) override;
diff --git a/xbmc/windowing/gbm/OffScreenModeSetting.h b/xbmc/windowing/gbm/OffScreenModeSetting.h
index ad9f68c89e47..2e49eda50f1e 100644
--- a/xbmc/windowing/gbm/OffScreenModeSetting.h
+++ b/xbmc/windowing/gbm/OffScreenModeSetting.h
@@ -21,7 +21,7 @@ class COffScreenModeSetting : public CDRMUtils
 {
 public:
   COffScreenModeSetting() = default;
-  ~COffScreenModeSetting() { DestroyDrm(); };
+  ~COffScreenModeSetting() override { DestroyDrm(); };
   void FlipPage(struct gbm_bo *bo, bool rendered, bool videoLayer) override {}
   bool SetVideoMode(const RESOLUTION_INFO& res, struct gbm_bo *bo) override { return false; }
   bool SetActive(bool active) override { return false; }
diff --git a/xbmc/windowing/gbm/WinSystemGbm.h b/xbmc/windowing/gbm/WinSystemGbm.h
index de83340334f5..7a4dc69e22a1 100644
--- a/xbmc/windowing/gbm/WinSystemGbm.h
+++ b/xbmc/windowing/gbm/WinSystemGbm.h
@@ -32,7 +32,7 @@ class CWinSystemGbm : public CWinSystemBase
 {
 public:
   CWinSystemGbm();
-  virtual ~CWinSystemGbm() = default;
+  ~CWinSystemGbm() override = default;
 
   bool InitWindowSystem() override;
   bool DestroyWindowSystem() override;
@@ -49,8 +49,8 @@ class CWinSystemGbm : public CWinSystemBase
 
   bool Hide() override;
   bool Show(bool raise = true) override;
-  virtual void Register(IDispResource *resource);
-  virtual void Unregister(IDispResource *resource);
+  void Register(IDispResource* resource) override;
+  void Unregister(IDispResource* resource) override;
 
   std::shared_ptr<CVideoLayerBridge> GetVideoLayerBridge() const { return m_videoLayerBridge; };
   void RegisterVideoLayerBridge(std::shared_ptr<CVideoLayerBridge> bridge) { m_videoLayerBridge = bridge; };
diff --git a/xbmc/windowing/gbm/WinSystemGbmEGLContext.h b/xbmc/windowing/gbm/WinSystemGbmEGLContext.h
index e74561d0e826..f2d3f4908602 100644
--- a/xbmc/windowing/gbm/WinSystemGbmEGLContext.h
+++ b/xbmc/windowing/gbm/WinSystemGbmEGLContext.h
@@ -25,7 +25,7 @@ class CVaapiProxy;
 class CWinSystemGbmEGLContext : public CWinSystemGbm
 {
 public:
-  virtual ~CWinSystemGbmEGLContext() = default;
+  ~CWinSystemGbmEGLContext() override = default;
 
   bool DestroyWindowSystem() override;
   bool CreateNewWindow(const std::string& name,
diff --git a/xbmc/windowing/gbm/WinSystemGbmGLContext.h b/xbmc/windowing/gbm/WinSystemGbmGLContext.h
index f8ca053f2ae3..ead8459de0d2 100644
--- a/xbmc/windowing/gbm/WinSystemGbmGLContext.h
+++ b/xbmc/windowing/gbm/WinSystemGbmGLContext.h
@@ -27,7 +27,7 @@ class CWinSystemGbmGLContext : public CWinSystemGbmEGLContext, public CRenderSys
 {
 public:
   CWinSystemGbmGLContext();
-  virtual ~CWinSystemGbmGLContext() = default;
+  ~CWinSystemGbmGLContext() override = default;
 
   // Implementation of CWinSystemBase via CWinSystemGbm
   CRenderSystemBase *GetRenderSystem() override { return this; }
diff --git a/xbmc/windowing/gbm/WinSystemGbmGLESContext.h b/xbmc/windowing/gbm/WinSystemGbmGLESContext.h
index 50a87c982774..446a92327755 100644
--- a/xbmc/windowing/gbm/WinSystemGbmGLESContext.h
+++ b/xbmc/windowing/gbm/WinSystemGbmGLESContext.h
@@ -27,7 +27,7 @@ class CWinSystemGbmGLESContext : public CWinSystemGbmEGLContext, public CRenderS
 {
 public:
   CWinSystemGbmGLESContext();
-  virtual ~CWinSystemGbmGLESContext() = default;
+  ~CWinSystemGbmGLESContext() override = default;
 
   // Implementation of CWinSystemBase via CWinSystemGbm
   CRenderSystemBase *GetRenderSystem() override { return this; }
diff --git a/xbmc/windowing/ios/VideoSyncIos.h b/xbmc/windowing/ios/VideoSyncIos.h
index fe5d5827350c..0828e3485706 100644
--- a/xbmc/windowing/ios/VideoSyncIos.h
+++ b/xbmc/windowing/ios/VideoSyncIos.h
@@ -20,13 +20,13 @@ class CVideoSyncIos : public CVideoSync, IDispResource
     CVideoSync(clock), m_winSystem(winSystem) {}
 
   // CVideoSync interface
-  virtual bool Setup(PUPDATECLOCK func) override;
-  virtual void Run(CEvent& stopEvent) override;
-  virtual void Cleanup() override;
-  virtual float GetFps() override;
+  bool Setup(PUPDATECLOCK func) override;
+  void Run(CEvent& stopEvent) override;
+  void Cleanup() override;
+  float GetFps() override;
 
   // IDispResource interface
-  virtual void OnResetDisplay() override;
+  void OnResetDisplay() override;
 
   // used in the displaylink callback
   void IosVblankHandler();
diff --git a/xbmc/windowing/ios/WinSystemIOS.h b/xbmc/windowing/ios/WinSystemIOS.h
index 9ad987f00e86..882a7cd14cfd 100644
--- a/xbmc/windowing/ios/WinSystemIOS.h
+++ b/xbmc/windowing/ios/WinSystemIOS.h
@@ -25,7 +25,7 @@ class CWinSystemIOS : public CWinSystemBase, public CRenderSystemGLES
 {
 public:
   CWinSystemIOS();
-  virtual ~CWinSystemIOS();
+  ~CWinSystemIOS() override;
 
   int GetDisplayIndexFromSettings();
   // Implementation of CWinSystemBase
@@ -57,7 +57,7 @@ class CWinSystemIOS : public CWinSystemBase, public CRenderSystemGLES
   void Register(IDispResource *resource) override;
   void Unregister(IDispResource *resource) override;
 
-  virtual std::unique_ptr<CVideoSync> GetVideoSync(void *clock) override;
+  std::unique_ptr<CVideoSync> GetVideoSync(void* clock) override;
 
   bool InitDisplayLink(CVideoSyncIos *syncImpl);
   void DeinitDisplayLink(void);
diff --git a/xbmc/windowing/osx/CocoaDPMSSupport.h b/xbmc/windowing/osx/CocoaDPMSSupport.h
index a0164a4366ed..6a54f4245536 100644
--- a/xbmc/windowing/osx/CocoaDPMSSupport.h
+++ b/xbmc/windowing/osx/CocoaDPMSSupport.h
@@ -12,7 +12,7 @@ class CCocoaDPMSSupport : public CDPMSSupport
 {
 public:
   CCocoaDPMSSupport();
-  ~CCocoaDPMSSupport() = default;
+  ~CCocoaDPMSSupport() override = default;
 
 protected:
   bool EnablePowerSaving(PowerSavingMode mode) override;
diff --git a/xbmc/windowing/osx/VideoSyncOsx.h b/xbmc/windowing/osx/VideoSyncOsx.h
index db6875effcdc..3090c1660f26 100644
--- a/xbmc/windowing/osx/VideoSyncOsx.h
+++ b/xbmc/windowing/osx/VideoSyncOsx.h
@@ -23,15 +23,15 @@ class CVideoSyncOsx : public CVideoSync, IDispResource
     m_displayReset(false){};
 
   // CVideoSync interface
-  virtual bool Setup(PUPDATECLOCK func) override;
-  virtual void Run(CEvent& stopEvent) override;
-  virtual void Cleanup() override;
-  virtual float GetFps() override;
-  virtual void RefreshChanged() override;
+  bool Setup(PUPDATECLOCK func) override;
+  void Run(CEvent& stopEvent) override;
+  void Cleanup() override;
+  float GetFps() override;
+  void RefreshChanged() override;
 
   // IDispResource interface
-  virtual void OnLostDisplay() override;
-  virtual void OnResetDisplay() override;
+  void OnLostDisplay() override;
+  void OnResetDisplay() override;
 
   // used in the displaylink callback
   void VblankHandler(int64_t nowtime, uint32_t timebase);
diff --git a/xbmc/windowing/osx/WinEventsOSX.h b/xbmc/windowing/osx/WinEventsOSX.h
index 3e35c19b2c9a..0a95bf725496 100644
--- a/xbmc/windowing/osx/WinEventsOSX.h
+++ b/xbmc/windowing/osx/WinEventsOSX.h
@@ -14,5 +14,5 @@ class CWinEventsOSX : public CWinEventsSDL
 {
 public:
   CWinEventsOSX() = default;
-  ~CWinEventsOSX() = default;
+  ~CWinEventsOSX() override = default;
 };
diff --git a/xbmc/windowing/osx/WinSystemOSX.h b/xbmc/windowing/osx/WinSystemOSX.h
index f3952ea388fd..453c46c1def4 100644
--- a/xbmc/windowing/osx/WinSystemOSX.h
+++ b/xbmc/windowing/osx/WinSystemOSX.h
@@ -29,33 +29,33 @@ class CWinSystemOSX : public CWinSystemBase, public ITimerCallback
 public:
 
   CWinSystemOSX();
-  virtual ~CWinSystemOSX();
+  ~CWinSystemOSX() override;
 
   // ITimerCallback interface
-  virtual void OnTimeout() override;
+  void OnTimeout() override;
 
   // CWinSystemBase
-  virtual bool InitWindowSystem() override;
-  virtual bool DestroyWindowSystem() override;
-  virtual bool CreateNewWindow(const std::string& name, bool fullScreen, RESOLUTION_INFO& res) override;
-  virtual bool DestroyWindow() override;
-  virtual bool ResizeWindow(int newWidth, int newHeight, int newLeft, int newTop) override;
-  virtual bool SetFullScreen(bool fullScreen, RESOLUTION_INFO& res, bool blankOtherDisplays) override;
-  virtual void UpdateResolutions() override;
-  virtual void NotifyAppFocusChange(bool bGaining) override;
-  virtual void ShowOSMouse(bool show) override;
-  virtual bool Minimize() override;
-  virtual bool Restore() override;
-  virtual bool Hide() override;
-  virtual bool Show(bool raise = true) override;
-  virtual void OnMove(int x, int y) override;
-
-  virtual std::string GetClipboardText(void) override;
+  bool InitWindowSystem() override;
+  bool DestroyWindowSystem() override;
+  bool CreateNewWindow(const std::string& name, bool fullScreen, RESOLUTION_INFO& res) override;
+  bool DestroyWindow() override;
+  bool ResizeWindow(int newWidth, int newHeight, int newLeft, int newTop) override;
+  bool SetFullScreen(bool fullScreen, RESOLUTION_INFO& res, bool blankOtherDisplays) override;
+  void UpdateResolutions() override;
+  void NotifyAppFocusChange(bool bGaining) override;
+  void ShowOSMouse(bool show) override;
+  bool Minimize() override;
+  bool Restore() override;
+  bool Hide() override;
+  bool Show(bool raise = true) override;
+  void OnMove(int x, int y) override;
+
+  std::string GetClipboardText() override;
 
   void Register(IDispResource *resource) override;
   void Unregister(IDispResource *resource) override;
 
-  virtual std::unique_ptr<CVideoSync> GetVideoSync(void *clock) override;
+  std::unique_ptr<CVideoSync> GetVideoSync(void* clock) override;
 
   void        WindowChangedScreen();
 
@@ -77,7 +77,7 @@ class CWinSystemOSX : public CWinSystemBase, public ITimerCallback
   bool MessagePump() override;
 
 protected:
-  virtual std::unique_ptr<KODI::WINDOWING::IOSScreenSaver> GetOSScreenSaverImpl() override;
+  std::unique_ptr<KODI::WINDOWING::IOSScreenSaver> GetOSScreenSaverImpl() override;
 
   void  HandlePossibleRefreshrateChange();
   void  GetScreenResolution(int* w, int* h, double* fps, int screenIdx);
diff --git a/xbmc/windowing/osx/WinSystemOSXGL.h b/xbmc/windowing/osx/WinSystemOSXGL.h
index 07a630bbfba4..d7b05c931940 100644
--- a/xbmc/windowing/osx/WinSystemOSXGL.h
+++ b/xbmc/windowing/osx/WinSystemOSXGL.h
@@ -15,14 +15,14 @@ class CWinSystemOSXGL : public CWinSystemOSX, public CRenderSystemGL
 {
 public:
   CWinSystemOSXGL() = default;
-  virtual ~CWinSystemOSXGL() = default;
+  ~CWinSystemOSXGL() override = default;
 
   // Implementation of CWinSystemBase via CWinSystemOSX
   CRenderSystemBase *GetRenderSystem() override { return this; }
-  virtual bool ResizeWindow(int newWidth, int newHeight, int newLeft, int newTop) override;
-  virtual bool SetFullScreen(bool fullScreen, RESOLUTION_INFO& res, bool blankOtherDisplays) override;
+  bool ResizeWindow(int newWidth, int newHeight, int newLeft, int newTop) override;
+  bool SetFullScreen(bool fullScreen, RESOLUTION_INFO& res, bool blankOtherDisplays) override;
 
 protected:
-  virtual void PresentRenderImpl(bool rendered) override;
-  virtual void SetVSyncImpl(bool enable) override;
+  void PresentRenderImpl(bool rendered) override;
+  void SetVSyncImpl(bool enable) override;
 };
diff --git a/xbmc/windowing/wayland/ShellSurfaceXdgShell.h b/xbmc/windowing/wayland/ShellSurfaceXdgShell.h
index 9830af09684e..718b5726fc74 100644
--- a/xbmc/windowing/wayland/ShellSurfaceXdgShell.h
+++ b/xbmc/windowing/wayland/ShellSurfaceXdgShell.h
@@ -38,7 +38,7 @@ class CShellSurfaceXdgShell : public IShellSurface
    *               .desktop file of the application
    */
   CShellSurfaceXdgShell(IShellSurfaceHandler& handler, wayland::display_t& display, wayland::xdg_wm_base_t const& shell, wayland::surface_t const& surface, std::string const& title, std::string const& class_);
-  virtual ~CShellSurfaceXdgShell() noexcept;
+  ~CShellSurfaceXdgShell() noexcept override;
 
   static CShellSurfaceXdgShell* TryCreate(IShellSurfaceHandler& handler, CConnection& connection, wayland::surface_t const& surface, std::string const& title, std::string const& class_);
 
diff --git a/xbmc/windowing/wayland/ShellSurfaceXdgShellUnstableV6.h b/xbmc/windowing/wayland/ShellSurfaceXdgShellUnstableV6.h
index 5ee28d47e040..d84f4a5ad0a7 100644
--- a/xbmc/windowing/wayland/ShellSurfaceXdgShellUnstableV6.h
+++ b/xbmc/windowing/wayland/ShellSurfaceXdgShellUnstableV6.h
@@ -42,7 +42,7 @@ class CShellSurfaceXdgShellUnstableV6 : public IShellSurface
    *               .desktop file of the application
    */
   CShellSurfaceXdgShellUnstableV6(IShellSurfaceHandler& handler, wayland::display_t& display, wayland::zxdg_shell_v6_t const& shell, wayland::surface_t const& surface, std::string const& title, std::string const& class_);
-  virtual ~CShellSurfaceXdgShellUnstableV6() noexcept;
+  ~CShellSurfaceXdgShellUnstableV6() noexcept override;
 
   static CShellSurfaceXdgShellUnstableV6* TryCreate(IShellSurfaceHandler& handler, CConnection& connection, wayland::surface_t const& surface, std::string const& title, std::string const& class_);
 
diff --git a/xbmc/windowing/wayland/WinEventsWayland.cpp b/xbmc/windowing/wayland/WinEventsWayland.cpp
index 21ca28d3f139..7560a7ec2bf8 100644
--- a/xbmc/windowing/wayland/WinEventsWayland.cpp
+++ b/xbmc/windowing/wayland/WinEventsWayland.cpp
@@ -63,7 +63,7 @@ class CWinEventsWaylandThread : CThread
     Create();
   }
 
-  ~CWinEventsWaylandThread()
+  ~CWinEventsWaylandThread() override
   {
     Stop();
     // Wait for roundtrip invocation to finish
diff --git a/xbmc/windowing/wayland/WinSystemWayland.h b/xbmc/windowing/wayland/WinSystemWayland.h
index 4b0b027a6d2a..d8404dae64a5 100644
--- a/xbmc/windowing/wayland/WinSystemWayland.h
+++ b/xbmc/windowing/wayland/WinSystemWayland.h
@@ -49,7 +49,7 @@ class CWinSystemWayland : public CWinSystemBase, IInputHandler, IWindowDecoratio
 {
 public:
   CWinSystemWayland();
-  virtual ~CWinSystemWayland() noexcept;
+  ~CWinSystemWayland() noexcept override;
 
   bool InitWindowSystem() override;
   bool DestroyWindowSystem() override;
diff --git a/xbmc/windowing/wayland/WinSystemWaylandEGLContext.h b/xbmc/windowing/wayland/WinSystemWaylandEGLContext.h
index e36e2dd7f483..f08279bf1d76 100644
--- a/xbmc/windowing/wayland/WinSystemWaylandEGLContext.h
+++ b/xbmc/windowing/wayland/WinSystemWaylandEGLContext.h
@@ -24,7 +24,7 @@ class CWinSystemWaylandEGLContext : public CWinSystemWayland
 {
 public:
   CWinSystemWaylandEGLContext();
-  virtual ~CWinSystemWaylandEGLContext() = default;
+  ~CWinSystemWaylandEGLContext() override = default;
 
   bool CreateNewWindow(const std::string& name,
                        bool fullScreen,
