From 5519e99c824b025db5c10a8e04a889dd2b65613c Mon Sep 17 00:00:00 2001
From: Greg McCarthy <greg@gjmccarthy.co.uk>
Date: Thu, 4 Jul 2019 02:55:35 +0100
Subject: [PATCH] Revert "utils/Screenshot: rework and split up"

This reverts commit 2c9bcbcfc40e3cc8ee9881a06da51651edefe1a9.
---
 xbmc/platform/linux/CMakeLists.txt                 |   6 +-
 xbmc/platform/linux/ScreenshotSurfaceRBP.cpp       |  32 ----
 xbmc/platform/linux/ScreenshotSurfaceRBP.h         |  22 ---
 xbmc/rendering/dx/CMakeLists.txt                   |   6 +-
 xbmc/rendering/dx/ScreenshotSurfaceWindows.cpp     | 109 ------------
 xbmc/rendering/dx/ScreenshotSurfaceWindows.h       |  22 ---
 xbmc/rendering/gl/CMakeLists.txt                   |   2 -
 xbmc/rendering/gl/ScreenshotSurfaceGL.cpp          |  65 -------
 xbmc/rendering/gl/ScreenshotSurfaceGL.h            |  22 ---
 xbmc/rendering/gles/CMakeLists.txt                 |   2 -
 xbmc/rendering/gles/ScreenshotSurfaceGLES.cpp      |  72 --------
 xbmc/rendering/gles/ScreenshotSurfaceGLES.h        |  22 ---
 xbmc/utils/CMakeLists.txt                          |   1 -
 xbmc/utils/IScreenshotSurface.h                    |  36 ----
 xbmc/utils/Screenshot.cpp                          | 187 ++++++++++++++++++---
 xbmc/utils/Screenshot.h                            |  25 +--
 xbmc/windowing/X11/WinSystemX11GLContext.cpp       |   3 -
 xbmc/windowing/android/WinSystemAndroid.cpp        |   4 -
 xbmc/windowing/gbm/WinSystemGbmGLContext.cpp       |   3 -
 xbmc/windowing/gbm/WinSystemGbmGLESContext.cpp     |   3 -
 xbmc/windowing/ios/WinSystemIOS.mm                 |   2 -
 xbmc/windowing/osx/WinSystemOSX.mm                 |   3 -
 xbmc/windowing/rpi/WinSystemRpiGLESContext.cpp     |   4 -
 .../wayland/WinSystemWaylandEGLContextGL.cpp       |   3 -
 .../wayland/WinSystemWaylandEGLContextGLES.cpp     |   3 -
 xbmc/windowing/win10/WinSystemWin10.cpp            |   3 -
 xbmc/windowing/windows/WinSystemWin32.cpp          |   3 -
 27 files changed, 182 insertions(+), 483 deletions(-)
 delete mode 100644 xbmc/platform/linux/ScreenshotSurfaceRBP.cpp
 delete mode 100644 xbmc/platform/linux/ScreenshotSurfaceRBP.h
 delete mode 100644 xbmc/rendering/dx/ScreenshotSurfaceWindows.cpp
 delete mode 100644 xbmc/rendering/dx/ScreenshotSurfaceWindows.h
 delete mode 100644 xbmc/rendering/gl/ScreenshotSurfaceGL.cpp
 delete mode 100644 xbmc/rendering/gl/ScreenshotSurfaceGL.h
 delete mode 100644 xbmc/rendering/gles/ScreenshotSurfaceGLES.cpp
 delete mode 100644 xbmc/rendering/gles/ScreenshotSurfaceGLES.h
 delete mode 100644 xbmc/utils/IScreenshotSurface.h

diff --git a/xbmc/platform/linux/CMakeLists.txt b/xbmc/platform/linux/CMakeLists.txt
index 7961f6f326..9c46a7a276 100644
--- a/xbmc/platform/linux/CMakeLists.txt
+++ b/xbmc/platform/linux/CMakeLists.txt
@@ -22,13 +22,11 @@ endif()
 
 if(CORE_PLATFORM_NAME_LC STREQUAL rbpi)
   list(APPEND SOURCES RBP.cpp
-                      OMXCore.cpp
-                      ScreenshotSurfaceRBP.cpp)
+                      OMXCore.cpp)
   list(APPEND HEADERS RBP.h
                       DllBCM.h
                       DllOMX.h
-                      OMXCore.h
-                      ScreenshotSurfaceRBP.h)
+                      OMXCore.h)
 endif()
 
 core_add_library(linuxsupport)
diff --git a/xbmc/platform/linux/ScreenshotSurfaceRBP.cpp b/xbmc/platform/linux/ScreenshotSurfaceRBP.cpp
deleted file mode 100644
index def422a19d..0000000000
--- a/xbmc/platform/linux/ScreenshotSurfaceRBP.cpp
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
- *  Copyright (C) 2005-2018 Team Kodi
- *  This file is part of Kodi - https://kodi.tv
- *
- *  SPDX-License-Identifier: GPL-2.0-or-later
- *  See LICENSES/README.md for more information.
- */
-
-#include "ScreenshotSurfaceRBP.h"
-
-#include "platform/linux/RBP.h"
-#include "utils/Screenshot.h"
-
-void CScreenshotSurfaceRBP::Register()
-{
-  CScreenShot::Register(CScreenshotSurfaceRBP::CreateSurface);
-}
-
-std::unique_ptr<IScreenshotSurface> CScreenshotSurfaceRBP::CreateSurface()
-{
-  return std::unique_ptr<CScreenshotSurfaceRBP>(new CScreenshotSurfaceRBP());
-}
-
-bool CScreenshotSurfaceRBP::Capture()
-{
-  g_RBP.GetDisplaySize(m_width, m_height);
-  m_buffer = g_RBP.CaptureDisplay(m_width, m_height, &m_stride, true, false);
-  if (!m_buffer)
-    return false;
-
-  return true;
-}
diff --git a/xbmc/platform/linux/ScreenshotSurfaceRBP.h b/xbmc/platform/linux/ScreenshotSurfaceRBP.h
deleted file mode 100644
index d831d60472..0000000000
--- a/xbmc/platform/linux/ScreenshotSurfaceRBP.h
+++ /dev/null
@@ -1,22 +0,0 @@
-/*
- *  Copyright (C) 2005-2018 Team Kodi
- *  This file is part of Kodi - https://kodi.tv
- *
- *  SPDX-License-Identifier: GPL-2.0-or-later
- *  See LICENSES/README.md for more information.
- */
-
-#pragma once
-
-#include "utils/IScreenshotSurface.h"
-
-#include <memory>
-
-class CScreenshotSurfaceRBP : public IScreenshotSurface
-{
-public:
-  static void Register();
-  static std::unique_ptr<IScreenshotSurface> CreateSurface();
-
-  bool Capture() override;
-};
diff --git a/xbmc/rendering/dx/CMakeLists.txt b/xbmc/rendering/dx/CMakeLists.txt
index 7466907e69..bf3dbf0181 100644
--- a/xbmc/rendering/dx/CMakeLists.txt
+++ b/xbmc/rendering/dx/CMakeLists.txt
@@ -1,11 +1,9 @@
 set(SOURCES DeviceResources.cpp
-            RenderSystemDX.cpp
-            ScreenshotSurfaceWindows.cpp)
+            RenderSystemDX.cpp)
 
 set(HEADERS DeviceResources.h
             DirectXHelper.h
             RenderContext.h
-            RenderSystemDX.h
-            ScreenshotSurfaceWindows.h)
+            RenderSystemDX.h)
 
 core_add_library(rendering_dx)
diff --git a/xbmc/rendering/dx/ScreenshotSurfaceWindows.cpp b/xbmc/rendering/dx/ScreenshotSurfaceWindows.cpp
deleted file mode 100644
index 756bc6d098..0000000000
--- a/xbmc/rendering/dx/ScreenshotSurfaceWindows.cpp
+++ /dev/null
@@ -1,109 +0,0 @@
-/*
- *  Copyright (C) 2005-2018 Team Kodi
- *  This file is part of Kodi - https://kodi.tv
- *
- *  SPDX-License-Identifier: GPL-2.0-or-later
- *  See LICENSES/README.md for more information.
- */
-
-#include "ScreenshotSurfaceWindows.h"
-
-#include "guilib/GUIComponent.h"
-#include "guilib/GUIWindowManager.h"
-#include "rendering/dx/DeviceResources.h"
-#include "ServiceBroker.h"
-#include "threads/SingleLock.h"
-#include "utils/log.h"
-#include "utils/Screenshot.h"
-#include "windowing/GraphicContext.h"
-
-#include <wrl/client.h>
-
-using namespace Microsoft::WRL;
-
-void CScreenshotSurfaceWindows::Register()
-{
-  CScreenShot::Register(CScreenshotSurfaceWindows::CreateSurface);
-}
-
-std::unique_ptr<IScreenshotSurface> CScreenshotSurfaceWindows::CreateSurface()
-{
-  return std::unique_ptr<CScreenshotSurfaceWindows>(new CScreenshotSurfaceWindows());
-}
-
-bool CScreenshotSurfaceWindows::Capture()
-{
-  CWinSystemBase* winsystem = CServiceBroker::GetWinSystem();
-  if (!winsystem)
-    return false;
-
-  CGUIComponent* gui = CServiceBroker::GetGUI();
-  if (!gui)
-    return false;
-
-  CSingleLock lock(winsystem->GetGfxContext());
-  gui->GetWindowManager().Render();
-
-  auto deviceResources = DX::DeviceResources::Get();
-  deviceResources->FinishCommandList();
-
-  ComPtr<ID3D11DeviceContext> pImdContext = deviceResources->GetImmediateContext();
-  ComPtr<ID3D11Device> pDevice = deviceResources->GetD3DDevice();
-  CD3DTexture& backbuffer = deviceResources->GetBackBuffer();
-  if (!backbuffer.Get())
-    return false;
-
-  D3D11_TEXTURE2D_DESC desc = { 0 };
-  backbuffer.GetDesc(&desc);
-  desc.Usage = D3D11_USAGE_STAGING;
-  desc.CPUAccessFlags = D3D11_CPU_ACCESS_READ;
-  desc.BindFlags = 0;
-
-  ComPtr<ID3D11Texture2D> pCopyTexture = nullptr;
-  if (SUCCEEDED(pDevice->CreateTexture2D(&desc, nullptr, &pCopyTexture)))
-  {
-    // take copy
-    pImdContext->CopyResource(pCopyTexture.Get(), backbuffer.Get());
-
-    D3D11_MAPPED_SUBRESOURCE res;
-    if (SUCCEEDED(pImdContext->Map(pCopyTexture.Get(), 0, D3D11_MAP_READ, 0, &res)))
-    {
-      m_width = desc.Width;
-      m_height = desc.Height;
-      m_stride = res.RowPitch;
-      m_buffer = new unsigned char[m_height * m_stride];
-      if (desc.Format == DXGI_FORMAT_R10G10B10A2_UNORM)
-      {
-        // convert R10G10B10A2 -> B8G8R8A8
-        for (int y = 0; y < m_height; y++)
-        {
-          uint32_t* pixels10 = reinterpret_cast<uint32_t*>(static_cast<uint8_t*>(res.pData) + y * res.RowPitch);
-          uint8_t* pixels8 = m_buffer + y * m_stride;
-
-          for (int x = 0; x < m_width; x++, pixels10++, pixels8 += 4)
-          {
-            // actual bit per channel is A2B10G10R10
-            uint32_t pixel = *pixels10;
-            // R
-            pixels8[2] = static_cast<uint8_t>((pixel & 0x3FF) * 255 / 1023);
-            // G
-            pixel >>= 10;
-            pixels8[1] = static_cast<uint8_t>((pixel & 0x3FF) * 255 / 1023);
-            // B
-            pixel >>= 10;
-            pixels8[0] = static_cast<uint8_t>((pixel & 0x3FF) * 255 / 1023);
-            // A
-            pixels8[3] = 0xFF;
-          }
-        }
-      }
-      else
-        memcpy(m_buffer, res.pData, m_height * m_stride);
-      pImdContext->Unmap(pCopyTexture.Get(), 0);
-    }
-    else
-      CLog::LogFunction(LOGERROR, __FUNCTION__, "MAP_READ failed.");
-  }
-
-  return m_buffer != nullptr;
-}
diff --git a/xbmc/rendering/dx/ScreenshotSurfaceWindows.h b/xbmc/rendering/dx/ScreenshotSurfaceWindows.h
deleted file mode 100644
index e492e443bc..0000000000
--- a/xbmc/rendering/dx/ScreenshotSurfaceWindows.h
+++ /dev/null
@@ -1,22 +0,0 @@
-/*
- *  Copyright (C) 2005-2018 Team Kodi
- *  This file is part of Kodi - https://kodi.tv
- *
- *  SPDX-License-Identifier: GPL-2.0-or-later
- *  See LICENSES/README.md for more information.
- */
-
-#pragma once
-
-#include "utils/IScreenshotSurface.h"
-
-#include <memory>
-
-class CScreenshotSurfaceWindows : public IScreenshotSurface
-{
-public:
-  static void Register();
-  static std::unique_ptr<IScreenshotSurface> CreateSurface();
-
-  bool Capture() override;
-};
diff --git a/xbmc/rendering/gl/CMakeLists.txt b/xbmc/rendering/gl/CMakeLists.txt
index 578f4cd650..f2b1e2dbb5 100644
--- a/xbmc/rendering/gl/CMakeLists.txt
+++ b/xbmc/rendering/gl/CMakeLists.txt
@@ -1,10 +1,8 @@
 set(SOURCES RenderSystemGL.cpp
-            ScreenshotSurfaceGL.cpp
             ../MatrixGL.cpp
             GLShader.cpp)
 
 set(HEADERS RenderSystemGL.h
-            ScreenshotSurfaceGL.h
             ../MatrixGL.h
             GLShader.h)
 
diff --git a/xbmc/rendering/gl/ScreenshotSurfaceGL.cpp b/xbmc/rendering/gl/ScreenshotSurfaceGL.cpp
deleted file mode 100644
index be0bd892dd..0000000000
--- a/xbmc/rendering/gl/ScreenshotSurfaceGL.cpp
+++ /dev/null
@@ -1,65 +0,0 @@
-/*
- *  Copyright (C) 2005-2018 Team Kodi
- *  This file is part of Kodi - https://kodi.tv
- *
- *  SPDX-License-Identifier: GPL-2.0-or-later
- *  See LICENSES/README.md for more information.
- */
-
-#include "ScreenshotSurfaceGL.h"
-
-#include "guilib/GUIComponent.h"
-#include "guilib/GUIWindowManager.h"
-#include "ServiceBroker.h"
-#include "threads/SingleLock.h"
-#include "utils/Screenshot.h"
-#include "windowing/GraphicContext.h"
-
-#include "system_gl.h"
-
-#include <vector>
-
-void CScreenshotSurfaceGL::Register()
-{
-  CScreenShot::Register(CScreenshotSurfaceGL::CreateSurface);
-}
-
-std::unique_ptr<IScreenshotSurface> CScreenshotSurfaceGL::CreateSurface()
-{
-  return std::unique_ptr<CScreenshotSurfaceGL>(new CScreenshotSurfaceGL());
-}
-
-bool CScreenshotSurfaceGL::Capture()
-{
-  CWinSystemBase* winsystem = CServiceBroker::GetWinSystem();
-  if (!winsystem)
-    return false;
-
-  CGUIComponent* gui = CServiceBroker::GetGUI();
-  if (!gui)
-    return false;
-
-  CSingleLock lock(winsystem->GetGfxContext());
-  gui->GetWindowManager().Render();
-
-  glReadBuffer(GL_BACK);
-
-  // get current viewport
-  GLint viewport[4];
-  glGetIntegerv(GL_VIEWPORT, viewport);
-
-  m_width = viewport[2] - viewport[0];
-  m_height = viewport[3] - viewport[1];
-  m_stride = m_width * 4;
-  std::vector<uint8_t> surface(m_stride * m_height);
-
-  // read pixels from the backbuffer
-  glReadPixels(viewport[0], viewport[1], viewport[2], viewport[3], GL_BGRA, GL_UNSIGNED_BYTE, static_cast<GLvoid*>(surface.data()));
-
-  // make a new buffer and copy the read image to it with the Y axis inverted
-  m_buffer = new unsigned char[m_stride * m_height];
-  for (int y = 0; y < m_height; y++)
-    memcpy(m_buffer + y * m_stride, surface.data() + (m_height - y - 1) * m_stride, m_stride);
-
-  return m_buffer != nullptr;
-}
diff --git a/xbmc/rendering/gl/ScreenshotSurfaceGL.h b/xbmc/rendering/gl/ScreenshotSurfaceGL.h
deleted file mode 100644
index 01f0590931..0000000000
--- a/xbmc/rendering/gl/ScreenshotSurfaceGL.h
+++ /dev/null
@@ -1,22 +0,0 @@
-/*
- *  Copyright (C) 2005-2018 Team Kodi
- *  This file is part of Kodi - https://kodi.tv
- *
- *  SPDX-License-Identifier: GPL-2.0-or-later
- *  See LICENSES/README.md for more information.
- */
-
-#pragma once
-
-#include "utils/IScreenshotSurface.h"
-
-#include <memory>
-
-class CScreenshotSurfaceGL : public IScreenshotSurface
-{
-public:
-  static void Register();
-  static std::unique_ptr<IScreenshotSurface> CreateSurface();
-
-  bool Capture() override;
-};
diff --git a/xbmc/rendering/gles/CMakeLists.txt b/xbmc/rendering/gles/CMakeLists.txt
index 452ac34d80..fc39514128 100644
--- a/xbmc/rendering/gles/CMakeLists.txt
+++ b/xbmc/rendering/gles/CMakeLists.txt
@@ -1,11 +1,9 @@
 if(OPENGLES_FOUND)
   set(SOURCES RenderSystemGLES.cpp
-              ScreenshotSurfaceGLES.cpp
               ../MatrixGL.cpp
               GLESShader.cpp)
 
   set(HEADERS RenderSystemGLES.h
-              ScreenshotSurfaceGLES.h
               ../MatrixGL.h
               GLESShader.h)
 
diff --git a/xbmc/rendering/gles/ScreenshotSurfaceGLES.cpp b/xbmc/rendering/gles/ScreenshotSurfaceGLES.cpp
deleted file mode 100644
index 7d7a9409c2..0000000000
--- a/xbmc/rendering/gles/ScreenshotSurfaceGLES.cpp
+++ /dev/null
@@ -1,72 +0,0 @@
-/*
- *  Copyright (C) 2005-2018 Team Kodi
- *  This file is part of Kodi - https://kodi.tv
- *
- *  SPDX-License-Identifier: GPL-2.0-or-later
- *  See LICENSES/README.md for more information.
- */
-
-#include "ScreenshotSurfaceGLES.h"
-
-#include "guilib/GUIComponent.h"
-#include "guilib/GUIWindowManager.h"
-#include "ServiceBroker.h"
-#include "threads/SingleLock.h"
-#include "utils/Screenshot.h"
-#include "windowing/GraphicContext.h"
-
-#include "system_gl.h"
-
-#include <vector>
-
-void CScreenshotSurfaceGLES::Register()
-{
-  CScreenShot::Register(CScreenshotSurfaceGLES::CreateSurface);
-}
-
-std::unique_ptr<IScreenshotSurface> CScreenshotSurfaceGLES::CreateSurface()
-{
-  return std::unique_ptr<CScreenshotSurfaceGLES>(new CScreenshotSurfaceGLES());
-}
-
-bool CScreenshotSurfaceGLES::Capture()
-{
-  CWinSystemBase* winsystem = CServiceBroker::GetWinSystem();
-  if (!winsystem)
-    return false;
-
-  CGUIComponent* gui = CServiceBroker::GetGUI();
-  if (!gui)
-    return false;
-
-  CSingleLock lock(winsystem->GetGfxContext());
-  gui->GetWindowManager().Render();
-
-  //get current viewport
-  GLint viewport[4];
-  glGetIntegerv(GL_VIEWPORT, viewport);
-
-  m_width = viewport[2] - viewport[0];
-  m_height = viewport[3] - viewport[1];
-  m_stride = m_width * 4;
-  std::vector<uint8_t> surface(m_stride * m_height);
-
-  //read pixels from the backbuffer
-  glReadPixels(viewport[0], viewport[1], viewport[2], viewport[3], GL_RGBA, GL_UNSIGNED_BYTE, static_cast<GLvoid*>(surface.data()));
-
-  //make a new buffer and copy the read image to it with the Y axis inverted
-  m_buffer = new unsigned char[m_stride * m_height];
-  for (int y = 0; y < m_height; y++)
-  {
-    // we need to save in BGRA order so XOR Swap RGBA -> BGRA
-    unsigned char* swap_pixels = surface.data() + (m_height - y - 1) * m_stride;
-    for (int x = 0; x < m_width; x++, swap_pixels += 4)
-    {
-      std::swap(swap_pixels[0], swap_pixels[2]);
-    }
-
-    memcpy(m_buffer + y * m_stride, surface.data() + (m_height - y - 1) * m_stride, m_stride);
-  }
-
-  return m_buffer != nullptr;
-}
diff --git a/xbmc/rendering/gles/ScreenshotSurfaceGLES.h b/xbmc/rendering/gles/ScreenshotSurfaceGLES.h
deleted file mode 100644
index 1ca173061a..0000000000
--- a/xbmc/rendering/gles/ScreenshotSurfaceGLES.h
+++ /dev/null
@@ -1,22 +0,0 @@
-/*
- *  Copyright (C) 2005-2018 Team Kodi
- *  This file is part of Kodi - https://kodi.tv
- *
- *  SPDX-License-Identifier: GPL-2.0-or-later
- *  See LICENSES/README.md for more information.
- */
-
-#pragma once
-
-#include "utils/IScreenshotSurface.h"
-
-#include <memory>
-
-class CScreenshotSurfaceGLES : public IScreenshotSurface
-{
-public:
-  static void Register();
-  static std::unique_ptr<IScreenshotSurface> CreateSurface();
-
-  bool Capture() override;
-};
diff --git a/xbmc/utils/CMakeLists.txt b/xbmc/utils/CMakeLists.txt
index 826915edb8..f073e3ca0b 100644
--- a/xbmc/utils/CMakeLists.txt
+++ b/xbmc/utils/CMakeLists.txt
@@ -113,7 +113,6 @@ set(HEADERS ActorProtocol.h
             ILocalizer.h
             InfoLoader.h
             IRssObserver.h
-            IScreenshotSurface.h
             ISerializable.h
             ISortable.h
             IXmlDeserializable.h
diff --git a/xbmc/utils/IScreenshotSurface.h b/xbmc/utils/IScreenshotSurface.h
deleted file mode 100644
index 3414cbc3b0..0000000000
--- a/xbmc/utils/IScreenshotSurface.h
+++ /dev/null
@@ -1,36 +0,0 @@
-/*
- *  Copyright (C) 2005-2018 Team Kodi
- *  This file is part of Kodi - https://kodi.tv
- *
- *  SPDX-License-Identifier: GPL-2.0-or-later
- *  See LICENSES/README.md for more information.
- */
-
-#pragma once
-
-class IScreenshotSurface
-{
-public:
-  virtual ~IScreenshotSurface() = default;
-  virtual bool Capture() { return false; }
-  virtual void CaptureVideo(bool blendToBuffer) { };
-
-  int GetWidth() const { return m_width; }
-  int GetHeight() const { return m_height; }
-  int GetStride() const { return m_stride; }
-  unsigned char* GetBuffer() const { return m_buffer; }
-  void ReleaseBuffer()
-  {
-    if (m_buffer)
-    {
-      delete m_buffer;
-      m_buffer = nullptr;
-    }
-  };
-
-protected:
-  int m_width{0};
-  int m_height{0};
-  int m_stride{0};
-  unsigned char* m_buffer{nullptr};
-};
diff --git a/xbmc/utils/Screenshot.cpp b/xbmc/utils/Screenshot.cpp
index c16e001ae4..a6fc4d7b0f 100644
--- a/xbmc/utils/Screenshot.cpp
+++ b/xbmc/utils/Screenshot.cpp
@@ -8,65 +8,203 @@
 
 #include "Screenshot.h"
 
+#include "system_gl.h"
+#include <vector>
+
+#include "ServiceBroker.h"
+#include "Util.h"
+#include "URL.h"
+
+#include "pictures/Picture.h"
+
+#ifdef TARGET_RASPBERRY_PI
+#include "platform/linux/RBP.h"
+#endif
+
 #include "filesystem/File.h"
+#include "guilib/GUIComponent.h"
+#include "windowing/GraphicContext.h"
+#include "guilib/GUIWindowManager.h"
 #include "guilib/LocalizeStrings.h"
-#include "pictures/Picture.h"
-#include "ServiceBroker.h"
+
+#include "utils/JobManager.h"
+#include "utils/URIUtils.h"
+#include "utils/log.h"
 #include "settings/SettingPath.h"
 #include "settings/Settings.h"
 #include "settings/SettingsComponent.h"
 #include "settings/windows/GUIControlSettings.h"
 
-#include "URL.h"
-#include "Util.h"
-#include "utils/JobManager.h"
-#include "utils/log.h"
-#include "utils/URIUtils.h"
+#if defined(TARGET_WINDOWS)
+#include "rendering/dx/DeviceResources.h"
+#include <wrl/client.h>
+using namespace Microsoft::WRL;
+#endif
 
 using namespace XFILE;
 
-std::vector<std::function<std::unique_ptr<IScreenshotSurface>()>> CScreenShot::m_screenShotSurfaces;
+CScreenshotSurface::CScreenshotSurface()
+{
+  m_width = 0;
+  m_height = 0;
+  m_stride = 0;
+  m_buffer = NULL;
+}
 
-void CScreenShot::Register(std::function<std::unique_ptr<IScreenshotSurface>()> createFunc)
+CScreenshotSurface::~CScreenshotSurface()
 {
-  m_screenShotSurfaces.emplace_back(createFunc);
+  delete m_buffer;
 }
 
-void CScreenShot::TakeScreenshot(const std::string& filename, bool sync)
+bool CScreenshotSurface::capture()
 {
-  auto surface = m_screenShotSurfaces.back()();
+#if defined(TARGET_RASPBERRY_PI)
+  g_RBP.GetDisplaySize(m_width, m_height);
+  m_buffer = g_RBP.CaptureDisplay(m_width, m_height, &m_stride, true, false);
+  if (!m_buffer)
+    return false;
+#elif defined(TARGET_WINDOWS)
+
+  CSingleLock lock(CServiceBroker::GetWinSystem()->GetGfxContext());
+
+  CServiceBroker::GetGUI()->GetWindowManager().Render();
+
+  auto deviceResources = DX::DeviceResources::Get();
+  deviceResources->FinishCommandList();
 
-  if (!surface)
+  ComPtr<ID3D11DeviceContext> pImdContext = deviceResources->GetImmediateContext();
+  ComPtr<ID3D11Device> pDevice = deviceResources->GetD3DDevice();
+  CD3DTexture& backbuffer = deviceResources->GetBackBuffer();
+  if (!backbuffer.Get())
+    return false;
+
+  D3D11_TEXTURE2D_DESC desc = { 0 };
+  backbuffer.GetDesc(&desc);
+  desc.Usage = D3D11_USAGE_STAGING;
+  desc.CPUAccessFlags = D3D11_CPU_ACCESS_READ;
+  desc.BindFlags = 0;
+
+  ComPtr<ID3D11Texture2D> pCopyTexture = nullptr;
+  if (SUCCEEDED(pDevice->CreateTexture2D(&desc, nullptr, &pCopyTexture)))
   {
-    CLog::Log(LOGERROR, "failed to create screenshot surface");
-    return;
+    // take copy
+    pImdContext->CopyResource(pCopyTexture.Get(), backbuffer.Get());
+
+    D3D11_MAPPED_SUBRESOURCE res;
+    if (SUCCEEDED(pImdContext->Map(pCopyTexture.Get(), 0, D3D11_MAP_READ, 0, &res)))
+    {
+      m_width = desc.Width;
+      m_height = desc.Height;
+      m_stride = res.RowPitch;
+      m_buffer = new unsigned char[m_height * m_stride];
+      if (desc.Format == DXGI_FORMAT_R10G10B10A2_UNORM)
+      {
+        // convert R10G10B10A2 -> B8G8R8A8
+        for (int y = 0; y < m_height; y++)
+        {
+          uint32_t* pixels10 = reinterpret_cast<uint32_t*>(static_cast<uint8_t*>(res.pData) + y * res.RowPitch);
+          uint8_t* pixels8 = m_buffer + y * m_stride;
+
+          for (int x = 0; x < m_width; x++, pixels10++, pixels8 += 4)
+          {
+            // actual bit per channel is A2B10G10R10
+            uint32_t pixel = *pixels10;
+            // R
+            pixels8[2] = static_cast<uint8_t>((pixel & 0x3FF) * 255 / 1023);
+            // G
+            pixel >>= 10;
+            pixels8[1] = static_cast<uint8_t>((pixel & 0x3FF) * 255 / 1023);
+            // B
+            pixel >>= 10;
+            pixels8[0] = static_cast<uint8_t>((pixel & 0x3FF) * 255 / 1023);
+            // A
+            pixels8[3] = 0xFF;
+          }
+        }
+      }
+      else
+        memcpy(m_buffer, res.pData, m_height * m_stride);
+      pImdContext->Unmap(pCopyTexture.Get(), 0);
+    }
+    else
+      CLog::LogFunction(LOGERROR, __FUNCTION__, "MAP_READ failed.");
   }
+#elif defined(HAS_GL) || defined(HAS_GLES)
+
+  CSingleLock lock(CServiceBroker::GetWinSystem()->GetGfxContext());
+  CServiceBroker::GetGUI()->GetWindowManager().Render();
+#ifndef HAS_GLES
+  glReadBuffer(GL_BACK);
+#endif
+  //get current viewport
+  GLint viewport[4];
+  glGetIntegerv(GL_VIEWPORT, viewport);
 
-  if (!surface->Capture())
+  m_width  = viewport[2] - viewport[0];
+  m_height = viewport[3] - viewport[1];
+  m_stride = m_width * 4;
+  unsigned char* surface = new unsigned char[m_stride * m_height];
+
+  //read pixels from the backbuffer
+#if HAS_GLES >= 2
+  glReadPixels(viewport[0], viewport[1], viewport[2], viewport[3], GL_RGBA, GL_UNSIGNED_BYTE, (GLvoid*)surface);
+#else
+  glReadPixels(viewport[0], viewport[1], viewport[2], viewport[3], GL_BGRA, GL_UNSIGNED_BYTE, (GLvoid*)surface);
+#endif
+
+  //make a new buffer and copy the read image to it with the Y axis inverted
+  m_buffer = new unsigned char[m_stride * m_height];
+  for (int y = 0; y < m_height; y++)
+  {
+#ifdef HAS_GLES
+    // we need to save in BGRA order so XOR Swap RGBA -> BGRA
+    unsigned char* swap_pixels = surface + (m_height - y - 1) * m_stride;
+    for (int x = 0; x < m_width; x++, swap_pixels+=4)
+    {
+      std::swap(swap_pixels[0], swap_pixels[2]);
+    }
+#endif
+    memcpy(m_buffer + y * m_stride, surface + (m_height - y - 1) *m_stride, m_stride);
+  }
+
+  delete [] surface;
+
+#else
+  //nothing to take a screenshot from
+  return false;
+#endif
+
+  return true;
+}
+
+void CScreenShot::TakeScreenshot(const std::string &filename, bool sync)
+{
+
+  CScreenshotSurface surface;
+  if (!surface.capture())
   {
     CLog::Log(LOGERROR, "Screenshot %s failed", CURL::GetRedacted(filename).c_str());
     return;
   }
 
-  surface->CaptureVideo(true);
-
   CLog::Log(LOGDEBUG, "Saving screenshot %s", CURL::GetRedacted(filename).c_str());
 
   //set alpha byte to 0xFF
-  for (int y = 0; y < surface->GetHeight(); y++)
+  for (int y = 0; y < surface.m_height; y++)
   {
-    unsigned char* alphaptr = surface->GetBuffer() - 1 + y * surface->GetStride();
-    for (int x = 0; x < surface->GetWidth(); x++)
+    unsigned char* alphaptr = surface.m_buffer - 1 + y * surface.m_stride;
+    for (int x = 0; x < surface.m_width; x++)
       *(alphaptr += 4) = 0xFF;
   }
 
   //if sync is true, the png file needs to be completely written when this function returns
   if (sync)
   {
-    if (!CPicture::CreateThumbnailFromSurface(surface->GetBuffer(), surface->GetWidth(), surface->GetHeight(), surface->GetStride(), filename))
+    if (!CPicture::CreateThumbnailFromSurface(surface.m_buffer, surface.m_width, surface.m_height, surface.m_stride, filename))
       CLog::Log(LOGERROR, "Unable to write screenshot %s", CURL::GetRedacted(filename).c_str());
 
-    surface->ReleaseBuffer();
+    delete [] surface.m_buffer;
+    surface.m_buffer = NULL;
   }
   else
   {
@@ -79,8 +217,9 @@ void CScreenShot::TakeScreenshot(const std::string& filename, bool sync)
 
     //write .png file asynchronous with CThumbnailWriter, prevents stalling of the render thread
     //buffer is deleted from CThumbnailWriter
-    CThumbnailWriter* thumbnailwriter = new CThumbnailWriter(surface->GetBuffer(), surface->GetWidth(), surface->GetHeight(), surface->GetStride(), filename);
+    CThumbnailWriter* thumbnailwriter = new CThumbnailWriter(surface.m_buffer, surface.m_width, surface.m_height, surface.m_stride, filename);
     CJobManager::GetInstance().AddJob(thumbnailwriter, NULL);
+    surface.m_buffer = NULL;
   }
 }
 
diff --git a/xbmc/utils/Screenshot.h b/xbmc/utils/Screenshot.h
index 8642ca3191..903eaf2fff 100644
--- a/xbmc/utils/Screenshot.h
+++ b/xbmc/utils/Screenshot.h
@@ -8,21 +8,26 @@
 
 #pragma once
 
-#include "IScreenshotSurface.h"
-
-#include <functional>
-#include <memory>
 #include <string>
-#include <vector>
 
-class CScreenShot
+class CScreenshotSurface
 {
+
 public:
-  static void Register(std::function<std::unique_ptr<IScreenshotSurface>()> createFunc);
+  int            m_width;
+  int            m_height;
+  int            m_stride;
+  unsigned char* m_buffer;
+
+  CScreenshotSurface(void);
+  ~CScreenshotSurface();
+  bool capture( void );
+};
 
+class CScreenShot
+{
+
+public:
   static void TakeScreenshot();
   static void TakeScreenshot(const std::string &filename, bool sync);
-
-private:
-  static std::vector<std::function<std::unique_ptr<IScreenshotSurface>()>> m_screenShotSurfaces;
 };
diff --git a/xbmc/windowing/X11/WinSystemX11GLContext.cpp b/xbmc/windowing/X11/WinSystemX11GLContext.cpp
index 3f55941f2f..08ba6f074d 100644
--- a/xbmc/windowing/X11/WinSystemX11GLContext.cpp
+++ b/xbmc/windowing/X11/WinSystemX11GLContext.cpp
@@ -29,7 +29,6 @@
 #include "cores/VideoPlayer/VideoRenderers/LinuxRendererGL.h"
 #include "cores/VideoPlayer/VideoRenderers/RenderFactory.h"
 #include "guilib/DispResource.h"
-#include "rendering/gl/ScreenshotSurfaceGL.h"
 #include "threads/SingleLock.h"
 #include "utils/StringUtils.h"
 #include "utils/log.h"
@@ -270,8 +269,6 @@ bool CWinSystemX11GLContext::RefreshGLContext(bool force)
   VIDEOPLAYER::CRendererFactory::ClearRenderer();
   CLinuxRendererGL::Register();
 
-  CScreenshotSurfaceGL::Register();
-
   std::string gpuvendor;
   const char* vend = (const char*) glGetString(GL_VENDOR);
   if (vend)
diff --git a/xbmc/windowing/android/WinSystemAndroid.cpp b/xbmc/windowing/android/WinSystemAndroid.cpp
index de521bc1bc..7890f0437c 100644
--- a/xbmc/windowing/android/WinSystemAndroid.cpp
+++ b/xbmc/windowing/android/WinSystemAndroid.cpp
@@ -28,7 +28,6 @@
 #include "platform/android/media/drm/MediaDrmCryptoSession.h"
 #include "platform/android/media/decoderfilter/MediaCodecDecoderFilterManager.h"
 #include "platform/android/activity/XBMCApp.h"
-#include "rendering/gles/ScreenshotSurfaceGLES.h"
 #include "ServiceBroker.h"
 #include "settings/DisplaySettings.h"
 #include "settings/Settings.h"
@@ -86,9 +85,6 @@ bool CWinSystemAndroid::InitWindowSystem()
   ADDON::Interface_Android::Register();
   DRM::CMediaDrmCryptoSession::Register();
   VIDEOPLAYER::CProcessInfoAndroid::Register();
-
-  CScreenshotSurfaceGLES::Register();
-
   return CWinSystemBase::InitWindowSystem();
 }
 
diff --git a/xbmc/windowing/gbm/WinSystemGbmGLContext.cpp b/xbmc/windowing/gbm/WinSystemGbmGLContext.cpp
index 791028d869..37e3593614 100644
--- a/xbmc/windowing/gbm/WinSystemGbmGLContext.cpp
+++ b/xbmc/windowing/gbm/WinSystemGbmGLContext.cpp
@@ -17,7 +17,6 @@
 #include "WinSystemGbmGLContext.h"
 #include "OptionalsReg.h"
 #include "platform/posix/XTimeUtils.h"
-#include "rendering/gl/ScreenshotSurfaceGL.h"
 #include "utils/log.h"
 
 using namespace KODI::WINDOWING::GBM;
@@ -55,8 +54,6 @@ bool CWinSystemGbmGLContext::InitWindowSystem()
     VAAPIRegister(m_vaapiProxy.get(), deepColor);
   }
 
-  CScreenshotSurfaceGL::Register();
-
   return true;
 }
 
diff --git a/xbmc/windowing/gbm/WinSystemGbmGLESContext.cpp b/xbmc/windowing/gbm/WinSystemGbmGLESContext.cpp
index ae93681651..619b75bd9f 100644
--- a/xbmc/windowing/gbm/WinSystemGbmGLESContext.cpp
+++ b/xbmc/windowing/gbm/WinSystemGbmGLESContext.cpp
@@ -20,7 +20,6 @@
 
 #include "OptionalsReg.h"
 #include "platform/posix/XTimeUtils.h"
-#include "rendering/gles/ScreenshotSurfaceGLES.h"
 #include "utils/log.h"
 #include "WinSystemGbmGLESContext.h"
 
@@ -69,8 +68,6 @@ bool CWinSystemGbmGLESContext::InitWindowSystem()
   CDVDVideoCodecDRMPRIME::Register();
   VIDEOPLAYER::CProcessInfoGBM::Register();
 
-  CScreenshotSurfaceGLES::Register();
-
   return true;
 }
 
diff --git a/xbmc/windowing/ios/WinSystemIOS.mm b/xbmc/windowing/ios/WinSystemIOS.mm
index c6a9eeeafb..f077304de8 100644
--- a/xbmc/windowing/ios/WinSystemIOS.mm
+++ b/xbmc/windowing/ios/WinSystemIOS.mm
@@ -18,7 +18,6 @@
 #include "guilib/DispResource.h"
 #include "guilib/Texture.h"
 #include "messaging/ApplicationMessenger.h"
-#include "rendering/gles/ScreenshotSurfaceGLES.h"
 #include "settings/DisplaySettings.h"
 #include "settings/Settings.h"
 #include "settings/SettingsComponent.h"
@@ -149,7 +148,6 @@ bool CWinSystemIOS::CreateNewWindow(const std::string& name, bool fullScreen, RE
   VIDEOPLAYER::CProcessInfoIOS::Register();
   RETRO::CRPProcessInfoIOS::Register();
   RETRO::CRPProcessInfoIOS::RegisterRendererFactory(new RETRO::CRendererFactoryOpenGLES);
-  CScreenshotSurfaceGLES::Register();
 
   return true;
 }
diff --git a/xbmc/windowing/rpi/WinSystemRpiGLESContext.cpp b/xbmc/windowing/rpi/WinSystemRpiGLESContext.cpp
index 06c328ecba..a949c85e8b 100644
--- a/xbmc/windowing/rpi/WinSystemRpiGLESContext.cpp
+++ b/xbmc/windowing/rpi/WinSystemRpiGLESContext.cpp
@@ -11,8 +11,6 @@
 #include "WinSystemRpiGLESContext.h"
 #include "guilib/GUIComponent.h"
 #include "guilib/GUIWindowManager.h"
-#include "platform/linux/ScreenshotSurfaceRBP.h"
-#include "rendering/gles/ScreenshotSurfaceGLES.h"
 #include "ServiceBroker.h"
 #include "utils/log.h"
 #include "cores/RetroPlayer/process/rbpi/RPProcessInfoPi.h"
@@ -71,8 +69,6 @@ bool CWinSystemRpiGLESContext::InitWindowSystem()
   MMAL::CMMALVideo::Register();
   VIDEOPLAYER::CRendererFactory::ClearRenderer();
   MMAL::CMMALRenderer::Register();
-  CScreenshotSurfaceGLES::Register();
-  CScreenshotSurfaceRBP::Register();
 
   return true;
 }
diff --git a/xbmc/windowing/wayland/WinSystemWaylandEGLContextGL.cpp b/xbmc/windowing/wayland/WinSystemWaylandEGLContextGL.cpp
index 82f1250db0..9d5f0e3d9e 100644
--- a/xbmc/windowing/wayland/WinSystemWaylandEGLContextGL.cpp
+++ b/xbmc/windowing/wayland/WinSystemWaylandEGLContextGL.cpp
@@ -15,7 +15,6 @@
 #include "cores/RetroPlayer/process/RPProcessInfo.h"
 #include "cores/RetroPlayer/rendering/VideoRenderers/RPRendererOpenGL.h"
 #include "cores/VideoPlayer/VideoRenderers/LinuxRendererGL.h"
-#include "rendering/gl/ScreenshotSurfaceGL.h"
 #include "utils/log.h"
 
 using namespace KODI::WINDOWING::WAYLAND;
@@ -46,8 +45,6 @@ bool CWinSystemWaylandEGLContextGL::InitWindowSystem()
     ::WAYLAND::VAAPIRegister(m_vaapiProxy.get(), deepColor);
   }
 
-  CScreenshotSurfaceGL::Register();
-
   return true;
 }
 
diff --git a/xbmc/windowing/wayland/WinSystemWaylandEGLContextGLES.cpp b/xbmc/windowing/wayland/WinSystemWaylandEGLContextGLES.cpp
index 181583197f..dc7de3e8ab 100644
--- a/xbmc/windowing/wayland/WinSystemWaylandEGLContextGLES.cpp
+++ b/xbmc/windowing/wayland/WinSystemWaylandEGLContextGLES.cpp
@@ -15,7 +15,6 @@
 #include "cores/RetroPlayer/rendering/VideoRenderers/RPRendererOpenGLES.h"
 #include "cores/VideoPlayer/VideoRenderers/RenderFactory.h"
 #include "cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.h"
-#include "rendering/gles/ScreenshotSurfaceGLES.h"
 #include "utils/log.h"
 
 using namespace KODI::WINDOWING::WAYLAND;
@@ -46,8 +45,6 @@ bool CWinSystemWaylandEGLContextGLES::InitWindowSystem()
     ::WAYLAND::VAAPIRegister(m_vaapiProxy.get(), deepColor);
   }
 
-  CScreenshotSurfaceGLES::Register();
-
   return true;
 }
 
diff --git a/xbmc/windowing/win10/WinSystemWin10.cpp b/xbmc/windowing/win10/WinSystemWin10.cpp
index 9ecb5ed7e6..62a969b412 100644
--- a/xbmc/windowing/win10/WinSystemWin10.cpp
+++ b/xbmc/windowing/win10/WinSystemWin10.cpp
@@ -16,7 +16,6 @@
 #include "platform/win32/CharsetConverter.h"
 #include "rendering/dx/DirectXHelper.h"
 #include "rendering/dx/RenderContext.h"
-#include "rendering/dx/ScreenshotSurfaceWindows.h"
 #include "ServiceBroker.h"
 #include "settings/DisplaySettings.h"
 #include "settings/Settings.h"
@@ -59,8 +58,6 @@ CWinSystemWin10::CWinSystemWin10()
 
   AE::CAESinkFactory::ClearSinks();
   CAESinkXAudio::Register();
-  CScreenshotSurfaceWindows::Register();
-
   if (CSysInfo::GetWindowsDeviceFamily() == CSysInfo::WindowsDeviceFamily::Desktop)
   {
     CAESinkWASAPI::Register();
-- 
2.16.4

