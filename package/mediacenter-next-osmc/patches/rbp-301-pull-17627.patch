From ce803e491325bcb120c70cdb3483633ccc08b177 Mon Sep 17 00:00:00 2001
From: Wolfgang Haupt <haupt.wolfgang@gmail.com>
Date: Mon, 6 Apr 2020 15:54:20 +0200
Subject: [PATCH 1/2] Make OnJumpLetter work with UTF-8 chars

---
 xbmc/guilib/GUIBaseContainer.cpp | 15 ++++++++++-----
 xbmc/guilib/GUIBaseContainer.h   |  2 +-
 xbmc/input/InputManager.cpp      |  3 ++-
 3 files changed, 13 insertions(+), 7 deletions(-)

diff --git a/xbmc/guilib/GUIBaseContainer.cpp b/xbmc/guilib/GUIBaseContainer.cpp
index d1346b6275be..8725c1d6d81a 100644
--- a/xbmc/guilib/GUIBaseContainer.cpp
+++ b/xbmc/guilib/GUIBaseContainer.cpp
@@ -293,7 +293,9 @@ bool CGUIBaseContainer::OnAction(const CAction &action)
 {
   if (action.GetID() >= KEY_ASCII)
   {
-    OnJumpLetter((char)(action.GetID() & 0xff));
+    std::string letter;
+    g_charsetConverter.wToUTF8({action.GetUnicode()}, letter);
+    OnJumpLetter(std::move(letter));
     return true;
   }
   // stop the timer on any other action
@@ -557,12 +559,12 @@ void CGUIBaseContainer::OnPrevLetter()
   }
 }
 
-void CGUIBaseContainer::OnJumpLetter(char letter, bool skip /*=false*/)
+void CGUIBaseContainer::OnJumpLetter(std::string letter, bool skip /*=false*/)
 {
   if (m_matchTimer.GetElapsedMilliseconds() < letter_match_timeout)
-    m_match.push_back(letter);
+    m_match += letter;
   else
-    m_match = StringUtils::Format("%c", letter);
+    m_match = letter;
 
   m_matchTimer.StartZero();
 
@@ -586,8 +588,11 @@ void CGUIBaseContainer::OnJumpLetter(char letter, bool skip /*=false*/)
     }
     i = (i+1) % m_items.size();
   } while (i != offset);
+
   // no match found - repeat with a single letter
-  if (m_match.size() > 1)
+  std::wstring wmatch;
+  g_charsetConverter.utf8ToW(m_match, wmatch);
+  if (wmatch.length() > 1)
   {
     m_match.clear();
     OnJumpLetter(letter, true);
diff --git a/xbmc/guilib/GUIBaseContainer.h b/xbmc/guilib/GUIBaseContainer.h
index c42fab52063b..832958219db8 100644
--- a/xbmc/guilib/GUIBaseContainer.h
+++ b/xbmc/guilib/GUIBaseContainer.h
@@ -172,7 +172,7 @@ class CGUIBaseContainer : public IGUIContainer
   bool ScrollingUp() const { return m_scroller.IsScrollingUp(); };
   void OnNextLetter();
   void OnPrevLetter();
-  void OnJumpLetter(char letter, bool skip = false);
+  void OnJumpLetter(std::string letter, bool skip = false);
   void OnJumpSMS(int letter);
   std::vector< std::pair<int, std::string> > m_letterOffsets;
 
diff --git a/xbmc/input/InputManager.cpp b/xbmc/input/InputManager.cpp
index 594c187a9ae1..85100a255ef8 100644
--- a/xbmc/input/InputManager.cpp
+++ b/xbmc/input/InputManager.cpp
@@ -548,7 +548,8 @@ bool CInputManager::HandleKey(const CKey& key)
 
         // If the key pressed is shift-A to shift-Z set usekeyboard to true.
         // This causes the keypress to be used for list navigation.
-        if (control->IsContainer() && key.GetModifiers() == CKey::MODIFIER_SHIFT && key.GetVKey() >= XBMCVK_A && key.GetVKey() <= XBMCVK_Z)
+        if (control->IsContainer() && key.GetModifiers() == CKey::MODIFIER_SHIFT &&
+            key.GetUnicode())
           useKeyboard = true;
       }
     }

From 71cdf2164329cd7eaa3759b1146d5c4549c871cf Mon Sep 17 00:00:00 2001
From: Wolfgang Haupt <haupt.wolfgang@gmail.com>
Date: Tue, 7 Apr 2020 16:07:38 +0200
Subject: [PATCH 2/2] Remove usage of KEY_ASCII

---
 xbmc/dialogs/GUIDialogKeyboardGeneric.cpp | 2 +-
 xbmc/dialogs/GUIDialogNumeric.cpp         | 4 ++--
 xbmc/guilib/GUIBaseContainer.cpp          | 2 +-
 xbmc/guilib/GUIEditControl.cpp            | 4 ++--
 xbmc/input/InputManager.cpp               | 2 +-
 xbmc/input/Key.cpp                        | 4 ++--
 xbmc/input/Key.h                          | 1 -
 xbmc/video/Teletext.cpp                   | 2 +-
 8 files changed, 10 insertions(+), 11 deletions(-)

diff --git a/xbmc/dialogs/GUIDialogKeyboardGeneric.cpp b/xbmc/dialogs/GUIDialogKeyboardGeneric.cpp
index 6fa23c8f5f49..5a36aa8a2206 100644
--- a/xbmc/dialogs/GUIDialogKeyboardGeneric.cpp
+++ b/xbmc/dialogs/GUIDialogKeyboardGeneric.cpp
@@ -215,7 +215,7 @@ bool CGUIDialogKeyboardGeneric::OnAction(const CAction &action)
       CGUIControl *edit = GetControl(CTL_EDIT);
       if (edit)
         handled = edit->OnAction(action);
-      if (!handled && actionId >= KEY_VKEY && actionId < KEY_ASCII)
+      if (!handled && actionId >= KEY_VKEY && actionId < KEY_UNICODE)
       {
         unsigned char b = actionId & 0xFF;
         if (b == XBMCVK_TAB)
diff --git a/xbmc/dialogs/GUIDialogNumeric.cpp b/xbmc/dialogs/GUIDialogNumeric.cpp
index bf375c87a9cb..c02408afa877 100644
--- a/xbmc/dialogs/GUIDialogNumeric.cpp
+++ b/xbmc/dialogs/GUIDialogNumeric.cpp
@@ -109,7 +109,7 @@ bool CGUIDialogNumeric::OnAction(const CAction &action)
     OnOK();
   else if (action.GetID() >= REMOTE_0 && action.GetID() <= REMOTE_9)
     OnNumber(action.GetID() - REMOTE_0);
-  else if (action.GetID() >= KEY_VKEY && action.GetID() < KEY_ASCII)
+  else if (action.GetID() >= KEY_VKEY && action.GetID() < KEY_UNICODE)
   {
     // input from the keyboard (vkey, not ascii)
     uint8_t b = action.GetID() & 0xFF;
@@ -124,7 +124,7 @@ bool CGUIDialogNumeric::OnAction(const CAction &action)
     else if (b == XBMCVK_ESCAPE)
       OnCancel();
   }
-  else if (action.GetID() >= KEY_ASCII) // FIXME make it KEY_UNICODE
+  else if (action.GetID() == KEY_UNICODE)
   { // input from the keyboard
     if (action.GetUnicode() == 10 || action.GetUnicode() == 13)
       OnOK(); // enter
diff --git a/xbmc/guilib/GUIBaseContainer.cpp b/xbmc/guilib/GUIBaseContainer.cpp
index 8725c1d6d81a..a937e29db4a8 100644
--- a/xbmc/guilib/GUIBaseContainer.cpp
+++ b/xbmc/guilib/GUIBaseContainer.cpp
@@ -291,7 +291,7 @@ void CGUIBaseContainer::RenderItem(float posX, float posY, CGUIListItem *item, b
 
 bool CGUIBaseContainer::OnAction(const CAction &action)
 {
-  if (action.GetID() >= KEY_ASCII)
+  if (action.GetID() == KEY_UNICODE)
   {
     std::string letter;
     g_charsetConverter.wToUTF8({action.GetUnicode()}, letter);
diff --git a/xbmc/guilib/GUIEditControl.cpp b/xbmc/guilib/GUIEditControl.cpp
index a74097e6dc21..e04c96ff3fa8 100644
--- a/xbmc/guilib/GUIEditControl.cpp
+++ b/xbmc/guilib/GUIEditControl.cpp
@@ -136,7 +136,7 @@ bool CGUIEditControl::OnAction(const CAction &action)
       OnPasteClipboard();
       return true;
     }
-    else if (action.GetID() >= KEY_VKEY && action.GetID() < KEY_ASCII && m_edit.empty())
+    else if (action.GetID() >= KEY_VKEY && action.GetID() < KEY_UNICODE && m_edit.empty())
     {
       // input from the keyboard (vkey, not ascii)
       unsigned char b = action.GetID() & 0xFF;
@@ -195,7 +195,7 @@ bool CGUIEditControl::OnAction(const CAction &action)
         return CGUIButtonControl::OnAction(action);
       }
     }
-    else if (action.GetID() >= KEY_ASCII)
+    else if (action.GetID() == KEY_UNICODE)
     {
       // input from the keyboard
       int ch = action.GetUnicode();
diff --git a/xbmc/input/InputManager.cpp b/xbmc/input/InputManager.cpp
index 85100a255ef8..6d84d1b7b746 100644
--- a/xbmc/input/InputManager.cpp
+++ b/xbmc/input/InputManager.cpp
@@ -602,7 +602,7 @@ bool CInputManager::HandleKey(const CKey& key)
             action = CAction(ACTION_PASTE);
           // If the unicode is non-zero the keypress is a non-printing character
           else if (key.GetUnicode())
-            action = CAction(key.GetAscii() | KEY_ASCII, key.GetUnicode());
+            action = CAction(KEY_UNICODE, key.GetUnicode());
           // The keypress is a non-printing character
           else
             action = CAction(key.GetVKey() | KEY_VKEY);
diff --git a/xbmc/input/Key.cpp b/xbmc/input/Key.cpp
index 94df9e0598d7..04fad7d90f89 100644
--- a/xbmc/input/Key.cpp
+++ b/xbmc/input/Key.cpp
@@ -157,8 +157,8 @@ float CKey::GetRepeat() const
 
 void CKey::SetFromService(bool fromService)
 {
-  if (fromService && (m_buttonCode & KEY_ASCII))
-    m_unicode = m_buttonCode - KEY_ASCII;
+  if (fromService && (m_buttonCode & KEY_VKEY))
+    m_unicode = m_buttonCode - KEY_VKEY;
 
   m_fromService = fromService;
 }
diff --git a/xbmc/input/Key.h b/xbmc/input/Key.h
index 38f7a9da83dd..8a488ce22223 100644
--- a/xbmc/input/Key.h
+++ b/xbmc/input/Key.h
@@ -67,7 +67,6 @@
 
 // 0xF000 -> 0xF200 is reserved for the keyboard; a keyboard press is either
 #define KEY_VKEY            0xF000 // a virtual key/functional key e.g. cursor left
-#define KEY_ASCII           0xF100 // a printable character in the range of TRUE ASCII (from 0 to 127) // FIXME make it clean and pure unicode! remove the need for KEY_ASCII
 #define KEY_UNICODE         0xF200 // another printable character whose range is not included in this KEY code
 
 // 0xE000 -> 0xEFFF is reserved for mouse actions
diff --git a/xbmc/video/Teletext.cpp b/xbmc/video/Teletext.cpp
index 4cb852850d9d..9640f90ede27 100644
--- a/xbmc/video/Teletext.cpp
+++ b/xbmc/video/Teletext.cpp
@@ -519,7 +519,7 @@ bool CTeletextDecoder::HandleAction(const CAction &action)
     PageInput(action.GetID() - REMOTE_0);
     return true;
   }
-  else if (action.GetID() >= KEY_ASCII) // FIXME make it KEY_UNICODE
+  else if (action.GetID() == KEY_UNICODE)
   { // input from the keyboard
     if (action.GetUnicode() >= 48 && action.GetUnicode() < 58)
     {
