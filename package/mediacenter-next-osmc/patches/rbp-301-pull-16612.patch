From 83e569a644dbe0251a955a5dcac73c1ec5ebc563 Mon Sep 17 00:00:00 2001
From: Kai Sommerfeld <kai.sommerfeld@gmx.com>
Date: Thu, 12 Sep 2019 20:26:03 +0200
Subject: [PATCH] [PVR] Fix: we must close all open modal dialogs before we can
 activate the PVR search window.

---
 xbmc/pvr/PVRGUIActions.cpp                    | 24 ++++++++++++++++---
 xbmc/pvr/PVRGUIActions.h                      |  3 +--
 xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.cpp    |  5 +++-
 .../pvr/dialogs/GUIDialogPVRItemsViewBase.cpp |  9 +++----
 4 files changed, 31 insertions(+), 10 deletions(-)

diff --git a/xbmc/pvr/PVRGUIActions.cpp b/xbmc/pvr/PVRGUIActions.cpp
index d190c4e22147..5815d062b8b4 100644
--- a/xbmc/pvr/PVRGUIActions.cpp
+++ b/xbmc/pvr/PVRGUIActions.cpp
@@ -296,7 +296,7 @@ namespace PVR
     return true;
   }
 
-  bool CPVRGUIActions::FindSimilar(const CFileItemPtr &item, CGUIWindow *windowToClose /* = nullptr */) const
+  bool CPVRGUIActions::FindSimilar(const std::shared_ptr<CFileItem>& item) const
   {
     const bool bRadio(CPVRItem(item).IsRadio());
 
@@ -313,8 +313,26 @@ namespace PVR
       return false;
     }
 
-    if (windowToClose)
-      windowToClose->Close();
+    //! @todo If we want dialogs to spawn program search in a clean way - without having to force-close any
+    //        other dialogs - we must introduce a search dialog with functionality similar to the search window.
+
+    for (int iId = CServiceBroker::GetGUI()->GetWindowManager().GetTopmostModalDialog(true /* ignoreClosing */);
+         iId != WINDOW_INVALID;
+         iId = CServiceBroker::GetGUI()->GetWindowManager().GetTopmostModalDialog(true /* ignoreClosing */))
+    {
+      CLog::LogF(LOGWARNING, "Have to close modal dialog with id %d before search window can be opened.", iId);
+
+      CGUIWindow* window = CServiceBroker::GetGUI()->GetWindowManager().GetWindow(iId);
+      if (window)
+      {
+        window->Close();
+      }
+      else
+      {
+        CLog::LogF(LOGERROR, "Unable to get window instance %d! Cannot open search window.", iId);
+        return false; // return, otherwise we run into an endless loop
+      }
+    }
 
     windowSearch->SetItemToSearch(item);
     CServiceBroker::GetGUI()->GetWindowManager().ActivateWindow(windowSearchId);
diff --git a/xbmc/pvr/PVRGUIActions.h b/xbmc/pvr/PVRGUIActions.h
index d734dfd37712..bcce000d3a49 100644
--- a/xbmc/pvr/PVRGUIActions.h
+++ b/xbmc/pvr/PVRGUIActions.h
@@ -82,10 +82,9 @@ namespace PVR
     /*!
      * @brief Open a window containing a list of epg tags 'similar' to a given item.
      * @param item containing epg data for matching. item must be an epg tag, a channel or a recording.
-     * @param windowToClose is the window to close before opening the window with the search results.
      * @return true on success, false otherwise.
      */
-    bool FindSimilar(const std::shared_ptr<CFileItem>& item, CGUIWindow* windowToClose = nullptr) const;
+    bool FindSimilar(const std::shared_ptr<CFileItem>& item) const;
 
     /*!
      * @brief Open the timer settings dialog to create a new tv or radio timer.
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.cpp b/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.cpp
index 6553c322c54f..0487a527ce5d 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.cpp
@@ -149,7 +149,10 @@ bool CGUIDialogPVRGuideInfo::OnClickButtonFind(CGUIMessage &message)
   bool bReturn = false;
 
   if (message.GetSenderId() == CONTROL_BTN_FIND)
-    return CServiceBroker::GetPVRManager().GUIActions()->FindSimilar(CFileItemPtr(new CFileItem(m_progItem)), this);
+  {
+    Close();
+    return CServiceBroker::GetPVRManager().GUIActions()->FindSimilar(std::make_shared<CFileItem>(m_progItem));
+  }
 
   return bReturn;
 }
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRItemsViewBase.cpp b/xbmc/pvr/dialogs/GUIDialogPVRItemsViewBase.cpp
index 0340547cb426..7bd96f7a31bb 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRItemsViewBase.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRItemsViewBase.cpp
@@ -91,10 +91,11 @@ void CGUIDialogPVRItemsViewBase::ShowInfo(int itemIdx)
   if (itemIdx < 0 || itemIdx >= m_vecItems->Size())
     return;
 
-  // Preserve the item before closing self, because this will clear m_vecItems
-  const CFileItemPtr itemptr = m_vecItems->Get(itemIdx);
-  Close();
-  CServiceBroker::GetPVRManager().GUIActions()->ShowEPGInfo(itemptr);
+  const std::shared_ptr<CFileItem> item = m_vecItems->Get(itemIdx);
+  if (!item)
+    return;
+
+  CServiceBroker::GetPVRManager().GUIActions()->ShowEPGInfo(item);
 }
 
 bool CGUIDialogPVRItemsViewBase::ContextMenu(int itemIdx)
