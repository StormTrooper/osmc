From cb194f7bf3d4d96793a1c3765bfda97d5d347eb1 Mon Sep 17 00:00:00 2001
From: montellese <montellese@kodi.tv>
Date: Sun, 29 Sep 2019 20:19:59 +0200
Subject: [PATCH 1/3] [settings/addon] fix parsing of setting conditions in the
 old format

---
 xbmc/addons/settings/AddonSettings.cpp | 14 ++++++++------
 1 file changed, 8 insertions(+), 6 deletions(-)

diff --git a/xbmc/addons/settings/AddonSettings.cpp b/xbmc/addons/settings/AddonSettings.cpp
index bb2a0145f0ed..9b9b45868704 100644
--- a/xbmc/addons/settings/AddonSettings.cpp
+++ b/xbmc/addons/settings/AddonSettings.cpp
@@ -571,9 +571,7 @@ std::shared_ptr<CSettingGroup> CAddonSettings::ParseOldSettingElement(const TiXm
           }
         }
 
-        SettingWithConditions settingWithConditions = {
-          setting
-        };
+        SettingWithConditions settingWithConditions;
 
         // parse enable status
         const auto conditionEnable = XMLUtils::GetAttribute(settingElement, "enable");
@@ -593,9 +591,6 @@ std::shared_ptr<CSettingGroup> CAddonSettings::ParseOldSettingElement(const TiXm
         else if (!conditionVisible.empty())
           settingWithConditions.visibleCondition = conditionVisible;
 
-        if (!settingWithConditions.enableCondition.empty() || !settingWithConditions.visibleCondition.empty())
-          settingsWithConditions.push_back(settingWithConditions);
-
         // check if there already is a setting with the setting identifier
         if (settingIds.find(settingId) != settingIds.end())
         {
@@ -608,6 +603,13 @@ std::shared_ptr<CSettingGroup> CAddonSettings::ParseOldSettingElement(const TiXm
           settingIds.insert(setting->GetId());
         }
 
+        if (!settingWithConditions.enableCondition.empty() ||
+            !settingWithConditions.visibleCondition.empty())
+        {
+          settingWithConditions.setting = setting;
+          settingsWithConditions.push_back(settingWithConditions);
+        }
+
         // add the setting to the list of settings from the same category
         categorySettings.push_back(setting);
 

From 767e79d5c1eeff12e70cd6d50059495e9074a007 Mon Sep 17 00:00:00 2001
From: montellese <montellese@kodi.tv>
Date: Sun, 29 Sep 2019 21:04:05 +0200
Subject: [PATCH 2/3] [settings/addon] rework and fix reference settings (fixes
 #15252)

---
 xbmc/addons/settings/AddonSettings.cpp |  15 +--
 xbmc/settings/lib/Setting.cpp          |  42 ++++---
 xbmc/settings/lib/Setting.h            |  33 ++----
 xbmc/settings/lib/SettingType.h        |   3 +-
 xbmc/settings/lib/SettingsManager.cpp  | 147 ++++++++++++++++++++-----
 xbmc/settings/lib/SettingsManager.h    |   2 +
 6 files changed, 164 insertions(+), 78 deletions(-)

diff --git a/xbmc/addons/settings/AddonSettings.cpp b/xbmc/addons/settings/AddonSettings.cpp
index 9b9b45868704..1e0b5bd5a4c0 100644
--- a/xbmc/addons/settings/AddonSettings.cpp
+++ b/xbmc/addons/settings/AddonSettings.cpp
@@ -564,8 +564,8 @@ std::shared_ptr<CSettingGroup> CAddonSettings::ParseOldSettingElement(const TiXm
 
           if (parentSetting != groupSettings.crend())
           {
-            if ((*parentSetting)->GetType() == SettingType::Reference)
-              setting->SetParent(std::static_pointer_cast<const CSettingReference>(*parentSetting)->GetReferencedId());
+            if ((*parentSetting)->IsReference())
+              setting->SetParent((*parentSetting)->GetReferencedId());
             else
               setting->SetParent((*parentSetting)->GetId());
           }
@@ -595,7 +595,7 @@ std::shared_ptr<CSettingGroup> CAddonSettings::ParseOldSettingElement(const TiXm
         if (settingIds.find(settingId) != settingIds.end())
         {
           // turn the setting into a reference setting
-          setting = std::make_shared<CSettingReference>(settingId, GetSettingsManager());
+          setting->MakeReference();
         }
         else
         {
@@ -1377,14 +1377,7 @@ bool CAddonSettings::ParseOldCondition(std::shared_ptr<const CSetting> setting,
     if (otherSetting == nullptr)
       return false;
 
-    std::string id = setting->GetId();
-    if (setting->GetType() == SettingType::Reference)
-      id = std::static_pointer_cast<const CSettingReference>(setting)->GetReferencedId();
-    std::string otherId = otherSetting->GetId();
-    if (otherSetting->GetType() == SettingType::Reference)
-      otherId = std::static_pointer_cast<const CSettingReference>(otherSetting)->GetReferencedId();
-
-    return id == otherId;
+    return setting->GetId() == otherSetting->GetId();
   });
   if (settingIt == settings.cend()) {
     CLog::Log(LOGWARNING, "CAddonSettings[%s]: failed to parse old setting conditions \"%s\" for \"%s\"",
diff --git a/xbmc/settings/lib/Setting.cpp b/xbmc/settings/lib/Setting.cpp
index 4d54630d5bc8..1caf3938a737 100644
--- a/xbmc/settings/lib/Setting.cpp
+++ b/xbmc/settings/lib/Setting.cpp
@@ -76,6 +76,21 @@ CSetting::CSetting(const std::string &id, const CSetting &setting)
   Copy(setting);
 }
 
+void CSetting::MergeBasics(const CSetting& other)
+{
+  // ISetting
+  SetVisible(other.GetVisible());
+  SetLabel(other.GetLabel());
+  SetHelp(other.GetHelp());
+  SetRequirementsMet(other.MeetsRequirements());
+  // CSetting
+  SetEnabled(other.GetEnabled());
+  SetParent(other.GetParent());
+  SetLevel(other.GetLevel());
+  SetControl(const_cast<CSetting&>(other).GetControl());
+  SetDependencies(other.GetDependencies());
+}
+
 bool CSetting::Deserialize(const TiXmlNode *node, bool update /* = false */)
 {
   // handle <visible> conditions
@@ -131,7 +146,7 @@ bool CSetting::Deserialize(const TiXmlNode *node, bool update /* = false */)
       return false;
     }
   }
-  else if (!update && m_level < SettingLevel::Internal && GetType() != SettingType::Reference)
+  else if (!update && m_level < SettingLevel::Internal && !IsReference())
   {
     CLog::Log(LOGERROR, "CSetting: missing <control> tag of \"%s\"", m_id.c_str());
     return false;
@@ -198,6 +213,16 @@ void CSetting::SetEnabled(bool enabled)
   OnSettingPropertyChanged(shared_from_this(), "enabled");
 }
 
+void CSetting::MakeReference(const std::string& referencedId /* = "" */)
+{
+  auto tmpReferencedId = referencedId;
+  if (referencedId.empty())
+    tmpReferencedId = m_id;
+
+  m_id = StringUtils::Format("#{}[{}]", tmpReferencedId, StringUtils::CreateUUID());
+  m_referencedId = tmpReferencedId;
+}
+
 bool CSetting::IsVisible() const
 {
   if (!ISetting::IsVisible())
@@ -281,21 +306,6 @@ void CSetting::Copy(const CSetting &setting)
   m_changed = setting.m_changed;
 }
 
-CSettingReference::CSettingReference(const std::string &id, CSettingsManager *settingsManager /* = nullptr */)
-  : CSetting("#" + id, settingsManager)
-  , m_referencedId(id)
-{ }
-
-CSettingReference::CSettingReference(const std::string &id, const CSettingReference &setting)
-  : CSetting("#" + id, setting)
-  , m_referencedId(id)
-{ }
-
-std::shared_ptr<CSetting> CSettingReference::Clone(const std::string &id) const
-{
-  return std::make_shared<CSettingReference>(id, *this);
-}
-
 CSettingList::CSettingList(const std::string &id, std::shared_ptr<CSetting> settingDefinition, CSettingsManager *settingsManager /* = nullptr */)
   : CSetting(id, settingsManager)
   , m_definition(settingDefinition)
diff --git a/xbmc/settings/lib/Setting.h b/xbmc/settings/lib/Setting.h
index c7c0e9bc65fc..2791d758655d 100644
--- a/xbmc/settings/lib/Setting.h
+++ b/xbmc/settings/lib/Setting.h
@@ -50,6 +50,7 @@ class CSetting : public ISetting,
   ~CSetting() override = default;
 
   virtual std::shared_ptr<CSetting> Clone(const std::string &id) const = 0;
+  void MergeBasics(const CSetting& other);
 
   bool Deserialize(const TiXmlNode *node, bool update = false) override;
 
@@ -61,6 +62,7 @@ class CSetting : public ISetting,
   virtual void Reset() = 0;
 
   bool IsEnabled() const;
+  bool GetEnabled() const { return m_enabled; }
   void SetEnabled(bool enabled);
   bool IsDefault() const { return !m_changed; }
   const std::string& GetParent() const { return m_parentSetting; }
@@ -76,6 +78,12 @@ class CSetting : public ISetting,
 
   void SetCallback(ISettingCallback *callback) { m_callback = callback; }
 
+  bool IsReference() const { return !m_referencedId.empty(); }
+  const std::string& GetReferencedId() const { return m_referencedId; }
+  void SetReferencedId(const std::string& referencedId) { m_referencedId = referencedId; }
+  void MakeReference(const std::string& referencedId = "");
+
+  bool GetVisible() const { return ISetting::IsVisible(); }
   // overrides of ISetting
   bool IsVisible() const override;
 
@@ -106,6 +114,8 @@ class CSetting : public ISetting,
   std::set<CSettingUpdate> m_updates;
   bool m_changed = false;
   mutable CSharedSection m_critical;
+
+  std::string m_referencedId;
 };
 
 template<typename TValue, SettingType TSettingType>
@@ -129,29 +139,6 @@ class CTraitedSetting : public CSetting
   ~CTraitedSetting() override = default;
 };
 
-class CSettingReference : public CSetting
-{
-public:
-  CSettingReference(const std::string &id, CSettingsManager *settingsManager = nullptr);
-  CSettingReference(const std::string &id, const CSettingReference &setting);
-  ~CSettingReference() override = default;
-
-  std::shared_ptr<CSetting> Clone(const std::string &id) const override;
-
-  SettingType GetType() const override { return SettingType::Reference; }
-  bool FromString(const std::string &value) override { return false; }
-  std::string ToString() const override { return ""; }
-  bool Equals(const std::string &value) const override { return false; }
-  bool CheckValidity(const std::string &value) const override { return false; }
-  void Reset() override { }
-
-  const std::string& GetReferencedId() const { return m_referencedId; }
-  void SetReferencedId(const std::string& referencedId) { m_referencedId = referencedId; }
-
-private:
-  std::string m_referencedId;
-};
-
 /*!
  \ingroup settings
  \brief List setting implementation
diff --git a/xbmc/settings/lib/SettingType.h b/xbmc/settings/lib/SettingType.h
index 53966bcd1b22..56838abbd309 100644
--- a/xbmc/settings/lib/SettingType.h
+++ b/xbmc/settings/lib/SettingType.h
@@ -19,6 +19,5 @@ enum class SettingType {
   Number,
   String,
   Action,
-  List,
-  Reference
+  List
 };
diff --git a/xbmc/settings/lib/SettingsManager.cpp b/xbmc/settings/lib/SettingsManager.cpp
index 885b89995b88..b61c129713ad 100644
--- a/xbmc/settings/lib/SettingsManager.cpp
+++ b/xbmc/settings/lib/SettingsManager.cpp
@@ -16,6 +16,8 @@
 #include "utils/log.h"
 
 #include <algorithm>
+#include <map>
+#include <unordered_set>
 #include <utility>
 
 const uint32_t CSettingsManager::Version = 2;
@@ -547,7 +549,11 @@ SettingPtr CSettingsManager::GetSetting(const std::string &id) const
 
   auto setting = FindSetting(id);
   if (setting != m_settings.end())
+  {
+    if (setting->second.setting->IsReference())
+      return GetSetting(setting->second.setting->GetReferencedId());
     return setting->second.setting;
+  }
 
   CLog::Log(LOGDEBUG, "CSettingsManager: requested setting (%s) was not found.", id.c_str());
   return nullptr;
@@ -769,7 +775,8 @@ bool CSettingsManager::Serialize(TiXmlNode *parent) const
 
   for (const auto& setting : m_settings)
   {
-    if (setting.second.setting->GetType() == SettingType::Action)
+    if (setting.second.setting->IsReference() ||
+        setting.second.setting->GetType() == SettingType::Action)
       continue;
 
     TiXmlElement settingElement(SETTING_XML_ELM_SETTING);
@@ -841,6 +848,38 @@ bool CSettingsManager::OnSettingChanging(std::shared_ptr<const CSetting> setting
       return false;
   }
 
+  // if this is a reference setting apply the same change to the referenced setting
+  if (setting->IsReference())
+  {
+    CSharedLock lock(m_settingsCritical);
+    auto referencedSettingIt = FindSetting(setting->GetReferencedId());
+    if (referencedSettingIt != m_settings.end())
+    {
+      Setting referencedSettingData = referencedSettingIt->second;
+      // now that we have a copy of the setting's data, we can leave the lock
+      lock.Leave();
+
+      referencedSettingData.setting->FromString(setting->ToString());
+    }
+  }
+  else if (!settingData.references.empty())
+  {
+    // if the changed setting is referenced by other settings apply the same change to the referencing settings
+    std::unordered_set<SettingPtr> referenceSettings;
+    CSharedLock lock(m_settingsCritical);
+    for (const auto& reference : settingData.references)
+    {
+      auto referenceSettingIt = FindSetting(reference);
+      if (referenceSettingIt != m_settings.end())
+        referenceSettings.insert(referenceSettingIt->second.setting);
+    }
+    // now that we have a copy of the setting's data, we can leave the lock
+    lock.Leave();
+
+    for (auto& referenceSetting : referenceSettings)
+      referenceSetting->FromString(setting->ToString());
+  }
+
   return true;
 }
 
@@ -953,8 +992,6 @@ SettingPtr CSettingsManager::CreateSetting(const std::string &settingType, const
     return std::make_shared<CSettingString>(settingId, const_cast<CSettingsManager*>(this));
   else if (StringUtils::EqualsNoCase(settingType, "action"))
     return std::make_shared<CSettingAction>(settingId, const_cast<CSettingsManager*>(this));
-  else if (StringUtils::EqualsNoCase(settingType, "reference"))
-    return std::make_shared<CSettingReference>(settingId, const_cast<CSettingsManager*>(this));
   else if (settingType.size() > 6 &&
            StringUtils::StartsWith(settingType, "list[") &&
            StringUtils::EndsWith(settingType, "]"))
@@ -1059,6 +1096,8 @@ bool CSettingsManager::LoadSetting(const TiXmlNode *node, SettingPtr setting, bo
     return false;
 
   auto settingId = setting->GetId();
+  if (setting->IsReference())
+    settingId = setting->GetReferencedId();
 
   const TiXmlElement* settingElement = nullptr;
   // try to split the setting identifier into category and subsetting identifer (v1-)
@@ -1160,7 +1199,10 @@ void CSettingsManager::UpdateSettingByDependency(const std::string &settingId, c
 
 void CSettingsManager::UpdateSettingByDependency(const std::string &settingId, SettingDependencyType dependencyType)
 {
-  SettingPtr setting = GetSetting(settingId);
+  auto settingIt = FindSetting(settingId);
+  if (settingIt == m_settings.end())
+    return;
+  SettingPtr setting = settingIt->second.setting;
   if (setting == nullptr)
     return;
 
@@ -1225,7 +1267,14 @@ void CSettingsManager::AddSetting(std::shared_ptr<CSetting> setting)
 
 void CSettingsManager::ResolveReferenceSettings(std::shared_ptr<CSettingSection> section)
 {
-  // resolve any reference settings
+  struct GroupedReferenceSettings
+  {
+    SettingPtr referencedSetting;
+    std::unordered_set<SettingPtr> referenceSettings;
+  };
+  std::map<std::string, GroupedReferenceSettings> groupedReferenceSettings;
+
+  // collect and group all reference(d) settings
   auto categories = section->GetCategories();
   for (const auto& category : categories)
   {
@@ -1233,29 +1282,80 @@ void CSettingsManager::ResolveReferenceSettings(std::shared_ptr<CSettingSection>
     for (auto& group : groups)
     {
       auto settings = group->GetSettings();
-      SettingList referenceSettings;
       for (const auto& setting : settings)
       {
-        if (setting->GetType() == SettingType::Reference)
-          referenceSettings.push_back(setting);
+        if (setting->IsReference())
+        {
+          auto referencedSettingId = setting->GetReferencedId();
+          auto itGroupedReferenceSetting = groupedReferenceSettings.find(referencedSettingId);
+          if (itGroupedReferenceSetting == groupedReferenceSettings.end())
+          {
+            SettingPtr referencedSetting = nullptr;
+            auto itReferencedSetting = FindSetting(referencedSettingId);
+            if (itReferencedSetting == m_settings.end())
+            {
+              CLog::Log(LOGWARNING, "CSettingsManager: missing referenced setting \"%s\"",
+                referencedSettingId.c_str());
+              continue;
+            }
+
+            GroupedReferenceSettings groupedReferenceSetting;
+            groupedReferenceSetting.referencedSetting = itReferencedSetting->second.setting;
+
+            itGroupedReferenceSetting = groupedReferenceSettings.insert(
+              std::make_pair(referencedSettingId, groupedReferenceSetting)).first;
+          }
+
+          itGroupedReferenceSetting->second.referenceSettings.insert(setting);
+        }
       }
+    }
+  }
+
+  if (groupedReferenceSettings.empty())
+    return;
+
+  // merge all reference settings into the referenced setting
+  for (const auto& groupedReferenceSetting : groupedReferenceSettings)
+  {
+    auto itReferencedSetting = FindSetting(groupedReferenceSetting.first);
+    if (itReferencedSetting == m_settings.end())
+      continue;
+
+    for (const auto& referenceSetting : groupedReferenceSetting.second.referenceSettings)
+      itReferencedSetting->second.references.insert(referenceSetting->GetId());
+  }
 
-      for (const auto& referenceSetting : referenceSettings)
+  // resolve any reference settings
+  for (const auto& category : categories)
+  {
+    auto groups = category->GetGroups();
+    for (auto& group : groups)
+    {
+      auto settings = group->GetSettings();
+      for (const auto& setting : settings)
       {
-        auto referencedSettingId = std::static_pointer_cast<const CSettingReference>(referenceSetting)->GetReferencedId();
-        SettingPtr referencedSetting = nullptr;
-        auto itReferencedSetting = FindSetting(referencedSettingId);
-        if (itReferencedSetting == m_settings.end())
-          CLog::Log(LOGWARNING, "CSettingsManager: missing referenced setting \"%s\"", referencedSettingId.c_str());
-        else
+        if (setting->IsReference())
         {
-          referencedSetting = itReferencedSetting->second.setting;
-          itReferencedSetting = FindSetting(referenceSetting->GetId());
-          if (itReferencedSetting != m_settings.end())
-            m_settings.erase(itReferencedSetting);
+          auto referencedSettingId = setting->GetReferencedId();
+          auto itGroupedReferenceSetting = groupedReferenceSettings.find(referencedSettingId);
+          if (itGroupedReferenceSetting != groupedReferenceSettings.end())
+          {
+            const auto referencedSetting = itGroupedReferenceSetting->second.referencedSetting;
+
+            // clone the referenced setting and copy the general properties of the reference setting
+            auto clonedReferencedSetting = referencedSetting->Clone(setting->GetId());
+            clonedReferencedSetting->SetReferencedId(referencedSettingId);
+            clonedReferencedSetting->MergeBasics(*setting);
+
+            group->ReplaceSetting(setting, clonedReferencedSetting);
+
+            // update the setting
+            auto itReferenceSetting = FindSetting(setting->GetId());
+            if (itReferenceSetting != m_settings.end())
+              itReferenceSetting->second.setting = clonedReferencedSetting;
+          }
         }
-
-        group->ReplaceSetting(referenceSetting, referencedSetting);
       }
     }
   }
@@ -1272,11 +1372,6 @@ void CSettingsManager::CleanupIncompleteSettings()
       CLog::Log(LOGWARNING, "CSettingsManager: removing empty setting \"%s\"", tmpIterator->first.c_str());
       m_settings.erase(tmpIterator);
     }
-    else if (tmpIterator->second.setting->GetType() == SettingType::Reference)
-    {
-      CLog::Log(LOGWARNING, "CSettingsManager: removing missing reference setting \"%s\"", tmpIterator->first.c_str());
-      m_settings.erase(tmpIterator);
-    }
   }
 }
 
diff --git a/xbmc/settings/lib/SettingsManager.h b/xbmc/settings/lib/SettingsManager.h
index f4dc1c7836d1..925334e921fd 100644
--- a/xbmc/settings/lib/SettingsManager.h
+++ b/xbmc/settings/lib/SettingsManager.h
@@ -21,6 +21,7 @@
 
 #include <map>
 #include <set>
+#include <unordered_set>
 #include <vector>
 
 class CSettingCategory;
@@ -506,6 +507,7 @@ class CSettingsManager : public ISettingCreator, public ISettingControlCreator,
     SettingDependencyMap dependencies;
     std::set<std::string> children;
     CallbackSet callbacks;
+    std::unordered_set<std::string> references;
   };
 
   using SettingMap = std::map<std::string, Setting>;

From 0511fb202cadb06595c1a868dc55e3e6523c33b8 Mon Sep 17 00:00:00 2001
From: montellese <montellese@kodi.tv>
Date: Sun, 29 Sep 2019 21:16:52 +0200
Subject: [PATCH 3/3] [settings/addon] properly merge setting's definition if
 there are reference settings

---
 xbmc/settings/lib/Setting.cpp         | 64 +++++++++++++++++++++++++++
 xbmc/settings/lib/Setting.h           |  7 +++
 xbmc/settings/lib/SettingsManager.cpp |  4 ++
 3 files changed, 75 insertions(+)

diff --git a/xbmc/settings/lib/Setting.cpp b/xbmc/settings/lib/Setting.cpp
index 1caf3938a737..00796acc65f5 100644
--- a/xbmc/settings/lib/Setting.cpp
+++ b/xbmc/settings/lib/Setting.cpp
@@ -332,6 +332,14 @@ SettingPtr CSettingList::Clone(const std::string &id) const
   return std::make_shared<CSettingList>(id, *this);
 }
 
+void CSettingList::MergeDetails(const CSetting& other)
+{
+  if (other.GetType() != SettingType::List)
+    return;
+
+  // TODO(smontellese)
+}
+
 bool CSettingList::Deserialize(const TiXmlNode *node, bool update /* = false */)
 {
   CExclusiveLock lock(m_critical);
@@ -627,6 +635,18 @@ SettingPtr CSettingBool::Clone(const std::string &id) const
   return std::make_shared<CSettingBool>(id, *this);
 }
 
+void CSettingBool::MergeDetails(const CSetting& other)
+{
+  if (other.GetType() != SettingType::Boolean)
+    return;
+
+  const auto& boolSetting = static_cast<const CSettingBool&>(other);
+  if (m_value == false && boolSetting.m_value == true)
+    m_value = true;
+  if (m_default == false && boolSetting.m_default == true)
+    m_default = true;
+}
+
 bool CSettingBool::Deserialize(const TiXmlNode *node, bool update /* = false */)
 {
   CExclusiveLock lock(m_critical);
@@ -776,6 +796,14 @@ SettingPtr CSettingInt::Clone(const std::string &id) const
   return std::make_shared<CSettingInt>(id, *this);
 }
 
+void CSettingInt::MergeDetails(const CSetting& other)
+{
+  if (other.GetType() != SettingType::Integer)
+    return;
+
+  // TODO(smontellese)
+}
+
 bool CSettingInt::Deserialize(const TiXmlNode *node, bool update /* = false */)
 {
   CExclusiveLock lock(m_critical);
@@ -1056,6 +1084,24 @@ SettingPtr CSettingNumber::Clone(const std::string &id) const
   return std::make_shared<CSettingNumber>(id, *this);
 }
 
+void CSettingNumber::MergeDetails(const CSetting& other)
+{
+  if (other.GetType() != SettingType::Number)
+    return;
+
+  const auto& numberSetting = static_cast<const CSettingNumber&>(other);
+  if (m_value == 0.0 && numberSetting.m_value != 0.0)
+    m_value = numberSetting.m_value;
+  if (m_default == 0.0 && numberSetting.m_default != 0.0)
+    m_default = numberSetting.m_default;
+  if (m_min == 0.0 && numberSetting.m_min != 0.0)
+    m_min = numberSetting.m_min;
+  if (m_step == 1.0 && numberSetting.m_step != 1.0)
+    m_step = numberSetting.m_step;
+  if (m_max == 0.0 && numberSetting.m_max != 0.0)
+    m_max = numberSetting.m_max;
+}
+
 bool CSettingNumber::Deserialize(const TiXmlNode *node, bool update /* = false */)
 {
   CExclusiveLock lock(m_critical);
@@ -1217,6 +1263,14 @@ SettingPtr CSettingString::Clone(const std::string &id) const
   return std::make_shared<CSettingString>(id, *this);
 }
 
+void CSettingString::MergeDetails(const CSetting& other)
+{
+  if (other.GetType() != SettingType::String)
+    return;
+
+  // TODO(smontellese)
+}
+
 bool CSettingString::Deserialize(const TiXmlNode *node, bool update /* = false */)
 {
   CExclusiveLock lock(m_critical);
@@ -1443,6 +1497,16 @@ SettingPtr CSettingAction::Clone(const std::string &id) const
   return std::make_shared<CSettingAction>(id, *this);
 }
 
+void CSettingAction::MergeDetails(const CSetting& other)
+{
+  if (other.GetType() != SettingType::Action)
+    return;
+
+  const auto& actionSetting = static_cast<const CSettingAction&>(other);
+  if (!HasData() && actionSetting.HasData())
+    SetData(actionSetting.GetData());
+}
+
 bool CSettingAction::Deserialize(const TiXmlNode *node, bool update /* = false */)
 {
   CSharedLock lock(m_critical);
diff --git a/xbmc/settings/lib/Setting.h b/xbmc/settings/lib/Setting.h
index 2791d758655d..18abbd84ba83 100644
--- a/xbmc/settings/lib/Setting.h
+++ b/xbmc/settings/lib/Setting.h
@@ -51,6 +51,7 @@ class CSetting : public ISetting,
 
   virtual std::shared_ptr<CSetting> Clone(const std::string &id) const = 0;
   void MergeBasics(const CSetting& other);
+  virtual void MergeDetails(const CSetting& other) = 0;
 
   bool Deserialize(const TiXmlNode *node, bool update = false) override;
 
@@ -153,6 +154,7 @@ class CSettingList : public CSetting
   ~CSettingList() override = default;
 
   std::shared_ptr<CSetting> Clone(const std::string &id) const override;
+  void MergeDetails(const CSetting& other) override;
 
   bool Deserialize(const TiXmlNode *node, bool update = false) override;
 
@@ -212,6 +214,7 @@ class CSettingBool : public CTraitedSetting<bool, SettingType::Boolean>
   ~CSettingBool() override = default;
 
   std::shared_ptr<CSetting> Clone(const std::string &id) const override;
+  void MergeDetails(const CSetting& other) override;
 
   bool Deserialize(const TiXmlNode *node, bool update = false) override;
 
@@ -250,6 +253,7 @@ class CSettingInt : public CTraitedSetting<int, SettingType::Integer>
   ~CSettingInt() override = default;
 
   std::shared_ptr<CSetting> Clone(const std::string &id) const override;
+  void MergeDetails(const CSetting& other) override;
 
   bool Deserialize(const TiXmlNode *node, bool update = false) override;
 
@@ -325,6 +329,7 @@ class CSettingNumber : public CTraitedSetting<double, SettingType::Number>
   ~CSettingNumber() override = default;
 
   std::shared_ptr<CSetting> Clone(const std::string &id) const override;
+  void MergeDetails(const CSetting& other) override;
 
   bool Deserialize(const TiXmlNode *node, bool update = false) override;
 
@@ -372,6 +377,7 @@ class CSettingString : public CTraitedSetting<std::string, SettingType::String>
   ~CSettingString() override = default;
 
   std::shared_ptr<CSetting> Clone(const std::string &id) const override;
+  void MergeDetails(const CSetting& other) override;
 
   bool Deserialize(const TiXmlNode *node, bool update = false) override;
 
@@ -442,6 +448,7 @@ class CSettingAction : public CSetting
   ~CSettingAction() override = default;
 
   std::shared_ptr<CSetting> Clone(const std::string &id) const override;
+  void MergeDetails(const CSetting& other) override;
 
   bool Deserialize(const TiXmlNode *node, bool update = false) override;
 
diff --git a/xbmc/settings/lib/SettingsManager.cpp b/xbmc/settings/lib/SettingsManager.cpp
index b61c129713ad..97012a9c29e6 100644
--- a/xbmc/settings/lib/SettingsManager.cpp
+++ b/xbmc/settings/lib/SettingsManager.cpp
@@ -1323,7 +1323,11 @@ void CSettingsManager::ResolveReferenceSettings(std::shared_ptr<CSettingSection>
       continue;
 
     for (const auto& referenceSetting : groupedReferenceSetting.second.referenceSettings)
+    {
+      groupedReferenceSetting.second.referencedSetting->MergeDetails(*referenceSetting);
+
       itReferencedSetting->second.references.insert(referenceSetting->GetId());
+    }
   }
 
   // resolve any reference settings
