From ad7413269952a0da332f4826e5010b1d4bf2ef09 Mon Sep 17 00:00:00 2001
From: Kai Sommerfeld <kai.sommerfeld@gmx.com>
Date: Thu, 19 Jul 2018 21:28:35 +0200
Subject: [PATCH] [PVR] Fix deadlock when removing deleted channels & some code
 cleanup.

---
 xbmc/pvr/channels/PVRChannelGroup.cpp         | 63 ++++++---------------------
 xbmc/pvr/channels/PVRChannelGroup.h           | 10 ++++-
 xbmc/pvr/channels/PVRChannelGroupInternal.cpp | 31 ++++++++++---
 xbmc/pvr/channels/PVRChannelGroupInternal.h   | 13 ++++++
 xbmc/pvr/channels/PVRChannelGroups.cpp        | 35 ++++++++-------
 5 files changed, 80 insertions(+), 72 deletions(-)

diff --git a/xbmc/pvr/channels/PVRChannelGroup.cpp b/xbmc/pvr/channels/PVRChannelGroup.cpp
index bc8273fa24dc..ac73531becc1 100644
--- a/xbmc/pvr/channels/PVRChannelGroup.cpp
+++ b/xbmc/pvr/channels/PVRChannelGroup.cpp
@@ -167,7 +167,6 @@ bool CPVRChannelGroup::Update(void)
   PVRChannels_tmp.SetPreventSortAndRenumber();
   PVRChannels_tmp.LoadFromClients();
   m_failedClientsForChannelGroupMembers = PVRChannels_tmp.m_failedClientsForChannelGroupMembers;
-
   return UpdateGroupEntries(PVRChannels_tmp);
 }
 
@@ -566,14 +565,10 @@ bool CPVRChannelGroup::LoadFromClients(void)
 bool CPVRChannelGroup::AddAndUpdateChannels(const CPVRChannelGroup &channels, bool bUseBackendChannelNumbers)
 {
   bool bReturn(false);
-  bool bPreventSortAndRenumber(PreventSortAndRenumber());
   const CPVRChannelGroupPtr groupAll(CServiceBroker::GetPVRManager().ChannelGroups()->GetGroupAll(m_bRadio));
 
-  SetPreventSortAndRenumber();
-
   /* go through the channel list and check for new channels.
      channels will only by updated in CPVRChannelGroupInternal to prevent dupe updates */
-  CSingleLock lock(channels.m_critSection);
   for (PVR_CHANNEL_GROUP_MEMBERS::const_iterator it = channels.m_members.begin(); it != channels.m_members.end(); ++it)
   {
     /* check whether this channel is known in the internal group */
@@ -594,7 +589,6 @@ bool CPVRChannelGroup::AddAndUpdateChannels(const CPVRChannelGroup &channels, bo
     }
   }
 
-  SetPreventSortAndRenumber(bPreventSortAndRenumber);
   SortAndRenumber();
 
   return bReturn;
@@ -614,57 +608,26 @@ bool CPVRChannelGroup::IsMissingChannelGroupMembersFromClient(int iClientId) con
                    iClientId) != m_failedClientsForChannelGroupMembers.end();
 }
 
-bool CPVRChannelGroup::RemoveDeletedChannels(const CPVRChannelGroup &channels)
+std::vector<CPVRChannelPtr> CPVRChannelGroup::RemoveDeletedChannels(const CPVRChannelGroup &channels)
 {
-  bool bReturn(false);
-  CPVRChannelGroups *groups = CServiceBroker::GetPVRManager().ChannelGroups()->Get(m_bRadio);
-
+  std::vector<CPVRChannelPtr> removedChannels;
   CSingleLock lock(m_critSection);
 
   /* check for deleted channels */
   for (PVR_CHANNEL_GROUP_SORTED_MEMBERS::iterator it = m_sortedMembers.begin(); it != m_sortedMembers.end();)
   {
-    CSingleLock lock(channels.m_critSection);
-    if (channels.m_members.find((*it).channel->StorageId()) == channels.m_members.end())
+    const CPVRChannelPtr channel = (*it).channel;
+    if (channels.m_members.find(channel->StorageId()) == channels.m_members.end())
     {
       /* channel was not found */
       CLog::Log(LOGINFO,"Deleted %s channel '%s' from group '%s'",
-                m_bRadio ? "radio" : "TV", (*it).channel->ChannelName().c_str(), GroupName().c_str());
-
-      m_members.erase((*it).channel->StorageId());
+                m_bRadio ? "radio" : "TV", channel->ChannelName().c_str(), GroupName().c_str());
 
-      //we need a copy of our iterators data so that we can find it later on
-      //if the vector has changed.
-      auto group = *it;
-      /* remove this channel from all non-system groups if this is the internal group */
-      if (IsInternalGroup())
-      {
-        groups->RemoveFromAllGroups((*it).channel);
-
-        if (!IsMissingChannelsFromClient(group.channel->ClientID()))
-        {
-          /* since it was not found in the internal group, it was deleted from the backend */
-          group.channel->Delete();
-        }
-      }
+      removedChannels.emplace_back(channel);
 
-      //our vector can have been modified during the call to RemoveFromAllGroups
-      //make no assumption and search for the value to be removed
-      auto possiblyRemovedGroup = std::find_if(m_sortedMembers.begin(), m_sortedMembers.end(), [&group](const PVRChannelGroupMember& it)
-      {
-        return  group.channel == it.channel &&
-                group.channelNumber == it.channelNumber &&
-                group.iClientPriority == it.iClientPriority;
-      });
-
-      if (possiblyRemovedGroup != m_sortedMembers.end())
-        m_sortedMembers.erase(possiblyRemovedGroup);
-
-      //We have to start over from the beginning, list can have been modified and
-      //resorted, there's no safe way to continue where we left of
-      it = m_sortedMembers.begin();
+      m_members.erase(channel->StorageId());
+      it = m_sortedMembers.erase(it);
       m_bChanged = true;
-      bReturn = true;
     }
     else
     {
@@ -672,7 +635,7 @@ bool CPVRChannelGroup::RemoveDeletedChannels(const CPVRChannelGroup &channels)
     }
   }
 
-  return bReturn;
+  return removedChannels;
 }
 
 bool CPVRChannelGroup::UpdateGroupEntries(const CPVRChannelGroup &channels)
@@ -685,8 +648,10 @@ bool CPVRChannelGroup::UpdateGroupEntries(const CPVRChannelGroup &channels)
   /* sort by client channel number if this is the first time or if SETTING_PVRMANAGER_BACKENDCHANNELORDER is true */
   bool bUseBackendChannelNumbers(m_members.empty() || m_bUsingBackendChannelOrder);
 
-  bRemoved = RemoveDeletedChannels(channels);
+  SetPreventSortAndRenumber(true);
+  bRemoved = !RemoveDeletedChannels(channels).empty();
   bChanged = AddAndUpdateChannels(channels, bUseBackendChannelNumbers) || bRemoved;
+  SetPreventSortAndRenumber(false);
 
   bChanged |= UpdateClientPriorities();
 
@@ -742,12 +707,10 @@ bool CPVRChannelGroup::RemoveFromGroup(const CPVRChannelPtr &channel)
 
 bool CPVRChannelGroup::AddToGroup(const CPVRChannelPtr &channel, const CPVRChannelNumber &channelNumber, bool bUseBackendChannelNumbers)
 {
+  bool bReturn(false);
   const CPVRChannelGroupPtr groupAll(CServiceBroker::GetPVRManager().ChannelGroups()->GetGroupAll(m_bRadio));
-
   CSingleLock lock(m_critSection);
 
-  bool bReturn(false);
-
   if (!CPVRChannelGroup::IsGroupMember(channel))
   {
     const PVRChannelGroupMember& realChannel(IsInternalGroup() ?
diff --git a/xbmc/pvr/channels/PVRChannelGroup.h b/xbmc/pvr/channels/PVRChannelGroup.h
index f01ea4ca57d4..b952643090ce 100644
--- a/xbmc/pvr/channels/PVRChannelGroup.h
+++ b/xbmc/pvr/channels/PVRChannelGroup.h
@@ -487,14 +487,20 @@ namespace PVR
      */
     virtual bool UpdateGroupEntries(const CPVRChannelGroup &channels);
 
+    /*!
+     * @brief Add new channels to this group; updtae data.
+     * @param channels The new channels to use for this group.
+     * @param bUseBackendChannelNumbers True, if channel numbers from backends shall be used.
+     * @return True if everything went well, false otherwise.
+     */
     virtual bool AddAndUpdateChannels(const CPVRChannelGroup &channels, bool bUseBackendChannelNumbers);
 
     /*!
      * @brief Remove deleted channels from this group.
      * @param channels The new channels to use for this group.
-     * @return True if everything went well, false otherwise.
+     * @return The removed channels.
      */
-    bool RemoveDeletedChannels(const CPVRChannelGroup &channels);
+    virtual std::vector<CPVRChannelPtr> RemoveDeletedChannels(const CPVRChannelGroup &channels);
 
     /*!
      * @brief Clear this channel list.
diff --git a/xbmc/pvr/channels/PVRChannelGroupInternal.cpp b/xbmc/pvr/channels/PVRChannelGroupInternal.cpp
index f994f1a528ab..de74afe33b06 100644
--- a/xbmc/pvr/channels/PVRChannelGroupInternal.cpp
+++ b/xbmc/pvr/channels/PVRChannelGroupInternal.cpp
@@ -136,9 +136,8 @@ bool CPVRChannelGroupInternal::Update(void)
 
 bool CPVRChannelGroupInternal::AddToGroup(const CPVRChannelPtr &channel, const CPVRChannelNumber &channelNumber, bool bUseBackendChannelNumbers)
 {
-  CSingleLock lock(m_critSection);
-
   bool bReturn(false);
+  CSingleLock lock(m_critSection);
 
   /* get the group member, because we need the channel ID in this group, and the channel from this group */
   PVRChannelGroupMember& groupMember = GetByUniqueID(channel->StorageId());
@@ -257,8 +256,6 @@ bool CPVRChannelGroupInternal::IsGroupMember(const CPVRChannelPtr &channel) cons
 bool CPVRChannelGroupInternal::AddAndUpdateChannels(const CPVRChannelGroup &channels, bool bUseBackendChannelNumbers)
 {
   bool bReturn(false);
-  SetPreventSortAndRenumber();
-
   CSingleLock lock(m_critSection);
 
   /* go through the channel list and check for updated or new channels */
@@ -284,13 +281,36 @@ bool CPVRChannelGroupInternal::AddAndUpdateChannels(const CPVRChannelGroup &chan
     }
   }
 
-  SetPreventSortAndRenumber(false);
   if (m_bChanged)
     SortAndRenumber();
 
   return bReturn;
 }
 
+std::vector<CPVRChannelPtr> CPVRChannelGroupInternal::RemoveDeletedChannels(const CPVRChannelGroup &channels)
+{
+  std::vector<CPVRChannelPtr> removedChannels = CPVRChannelGroup::RemoveDeletedChannels(channels);
+
+  if (!removedChannels.empty())
+  {
+    CPVRChannelGroups* groups = CServiceBroker::GetPVRManager().ChannelGroups()->Get(m_bRadio);
+    for (const auto& channel : removedChannels)
+    {
+      /* remove this channel from all non-system groups */
+      groups->RemoveFromAllGroups(channel);
+
+      /* do we have valid data from channel's client? */
+      if (!IsMissingChannelsFromClient(channel->ClientID()))
+      {
+        /* since channel was not found in the internal group, it was deleted from the backend */
+        channel->Delete();
+      }
+    }
+  }
+
+  return removedChannels;
+}
+
 bool CPVRChannelGroupInternal::UpdateGroupEntries(const CPVRChannelGroup &channels)
 {
   bool bReturn(false);
@@ -320,6 +340,7 @@ bool CPVRChannelGroupInternal::CreateChannelEpgs(bool bForce /* = false */)
 {
   if (!CServiceBroker::GetPVRManager().EpgContainer().IsStarted())
     return false;
+
   {
     CSingleLock lock(m_critSection);
     for (PVR_CHANNEL_GROUP_MEMBERS::iterator it = m_members.begin(); it != m_members.end(); ++it)
diff --git a/xbmc/pvr/channels/PVRChannelGroupInternal.h b/xbmc/pvr/channels/PVRChannelGroupInternal.h
index 00f7cbc49dbb..4c8259b59df6 100644
--- a/xbmc/pvr/channels/PVRChannelGroupInternal.h
+++ b/xbmc/pvr/channels/PVRChannelGroupInternal.h
@@ -117,8 +117,21 @@ namespace PVR
      */
     bool UpdateGroupEntries(const CPVRChannelGroup &channels) override;
 
+    /*!
+     * @brief Add new channels to this group; updtae data.
+     * @param channels The new channels to use for this group.
+     * @param bUseBackendChannelNumbers True, if channel numbers from backends shall be used.
+     * @return True if everything went well, false otherwise.
+     */
     bool AddAndUpdateChannels(const CPVRChannelGroup &channels, bool bUseBackendChannelNumbers) override;
 
+    /*!
+     * @brief Remove deleted channels from this group.
+     * @param channels The new channels to use for this group.
+     * @return The removed channels.
+     */
+    std::vector<CPVRChannelPtr> RemoveDeletedChannels(const CPVRChannelGroup &channels) override;
+
     /*!
      * @brief Refresh the channel list from the clients.
      */
diff --git a/xbmc/pvr/channels/PVRChannelGroups.cpp b/xbmc/pvr/channels/PVRChannelGroups.cpp
index 7cb759bc294f..c0421b3d984a 100644
--- a/xbmc/pvr/channels/PVRChannelGroups.cpp
+++ b/xbmc/pvr/channels/PVRChannelGroups.cpp
@@ -137,8 +137,9 @@ CFileItemPtr CPVRChannelGroups::GetByPath(const std::string &strInPath) const
 {
   std::string strPath = strInPath;
   URIUtils::RemoveSlashAtEnd(strPath);
-
   std::string strCheckPath;
+
+  CSingleLock lock(m_critSection);
   for (const auto& group: m_groups)
   {
     // check if the path matches
@@ -176,6 +177,8 @@ CPVRChannelGroupPtr CPVRChannelGroups::GetById(int iGroupId) const
 std::vector<CPVRChannelGroupPtr> CPVRChannelGroups::GetGroupsByChannel(const CPVRChannelPtr &channel, bool bExcludeHidden /* = false */) const
 {
   std::vector<CPVRChannelGroupPtr> groups;
+
+  CSingleLock lock(m_critSection);
   for (CPVRChannelGroupPtr group : m_groups)
   {
     if ((!bExcludeHidden || !group->IsHidden()) && group->IsGroupMember(channel))
@@ -200,11 +203,13 @@ CPVRChannelGroupPtr CPVRChannelGroups::GetByName(const std::string &strName) con
 void CPVRChannelGroups::RemoveFromAllGroups(const CPVRChannelPtr &channel)
 {
   CSingleLock lock(m_critSection);
-  for (std::vector<CPVRChannelGroupPtr>::const_iterator it = m_groups.begin(); it != m_groups.end(); ++it)
+  const CPVRChannelGroupPtr allGroup = GetGroupAll();
+
+  for (const auto& group : m_groups)
   {
-    // only delete the channel from non-system groups
-    if (!(*it)->IsInternalGroup())
-      (*it)->RemoveFromGroup(channel);
+    // only delete the channel from non-system groups and if it was deleted from "all" group
+    if (!group->IsInternalGroup() && !allGroup->IsGroupMember(channel))
+      group->RemoveFromGroup(channel);
   }
 }
 
@@ -341,27 +346,25 @@ CPVRChannelGroupPtr CPVRChannelGroups::GetGroupAll(void) const
 {
   CSingleLock lock(m_critSection);
   if (!m_groups.empty())
-    return m_groups.at(0);
+    return m_groups.front();
 
-  CPVRChannelGroupPtr empty;
-  return empty;
+  return CPVRChannelGroupPtr();
 }
 
 CPVRChannelGroupPtr CPVRChannelGroups::GetLastGroup(void) const
 {
   CSingleLock lock(m_critSection);
   if (!m_groups.empty())
-    return m_groups.at(m_groups.size() - 1);
+    return m_groups.back();
 
-  CPVRChannelGroupPtr empty;
-  return empty;
+  return CPVRChannelGroupPtr();
 }
 
 CPVRChannelGroupPtr CPVRChannelGroups::GetLastPlayedGroup(int iChannelID /* = -1 */) const
 {
-  CSingleLock lock(m_critSection);
-
   CPVRChannelGroupPtr group;
+
+  CSingleLock lock(m_critSection);
   for (std::vector<CPVRChannelGroupPtr>::const_iterator it = m_groups.begin(); it != m_groups.end(); ++it)
   {
     if ((*it)->LastWatched() > 0 && (!group || (*it)->LastWatched() > group->LastWatched()) &&
@@ -374,8 +377,9 @@ CPVRChannelGroupPtr CPVRChannelGroups::GetLastPlayedGroup(int iChannelID /* = -1
 
 std::vector<CPVRChannelGroupPtr> CPVRChannelGroups::GetMembers(bool bExcludeHidden /* = false */) const
 {
-  CSingleLock lock(m_critSection);
   std::vector<CPVRChannelGroupPtr> groups;
+
+  CSingleLock lock(m_critSection);
   for (CPVRChannelGroupPtr group : m_groups)
   {
     if (!bExcludeHidden || !group->IsHidden())
@@ -387,8 +391,8 @@ std::vector<CPVRChannelGroupPtr> CPVRChannelGroups::GetMembers(bool bExcludeHidd
 int CPVRChannelGroups::GetGroupList(CFileItemList* results, bool bExcludeHidden /* = false */) const
 {
   int iReturn(0);
-  CSingleLock lock(m_critSection);
 
+  CSingleLock lock(m_critSection);
   for (std::vector<CPVRChannelGroupPtr>::const_iterator it = m_groups.begin(); it != m_groups.end(); ++it)
   {
     // exclude hidden groups if desired
@@ -558,6 +562,7 @@ bool CPVRChannelGroups::DeleteGroup(const CPVRChannelGroup &group)
 bool CPVRChannelGroups::CreateChannelEpgs(void)
 {
   bool bReturn(false);
+
   CSingleLock lock(m_critSection);
   for (std::vector<CPVRChannelGroupPtr>::iterator it = m_groups.begin(); it != m_groups.end(); ++it)
   {
