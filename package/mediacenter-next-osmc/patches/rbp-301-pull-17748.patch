From 617bf4d5827a26f96d2967ec26f9c31a63646845 Mon Sep 17 00:00:00 2001
From: CastagnaIT <gottardo.stefano.83@gmail.com>
Date: Tue, 28 Apr 2020 08:40:05 +0200
Subject: [PATCH] [docs][python] Some fixes for xbmcdrm documentation

---
 xbmc/interfaces/legacy/DrmCryptoSession.h | 166 ++++++++++++----------
 1 file changed, 91 insertions(+), 75 deletions(-)

diff --git a/xbmc/interfaces/legacy/DrmCryptoSession.h b/xbmc/interfaces/legacy/DrmCryptoSession.h
index 1ff1b07b69bd..f64f13e7bf38 100644
--- a/xbmc/interfaces/legacy/DrmCryptoSession.h
+++ b/xbmc/interfaces/legacy/DrmCryptoSession.h
@@ -38,44 +38,59 @@ namespace XBMCAddon
     /// Offers classes and functions that allow a developer to work with
     /// DRM-protected contents like Widevine.
     ///
-    /// This type of functionality is closely related to the type of DRM
+    /// This type of functionality is closely related to the type of %DRM
     /// used and the service to be implemented.
     ///
     /// Using the \ref xbmcdrm_CryptoSession "CryptoSession" constructor allow you
-    /// to have access to a DRM session.
-    /// With a DRM session you can read and write the DRM properties
-    /// \ref xbmcdrm_GetPropertyString "GetPropertyString", \ref xbmcdrm_SetPropertyString "SetPropertyString"
+    /// to have access to a %DRM session.
+    /// With a %DRM session you can read and write the %DRM properties
+    /// \ref xbmcdrm_GetPropertyString "GetPropertyString",
+    /// \ref xbmcdrm_SetPropertyString "SetPropertyString"
     /// and establish session keys with
     /// \ref xbmcdrm_GetKeyRequest "GetKeyRequest" and
-    /// \ref xbmcdrm_ProvideKeyResponse "ProvideKeyResponse", or resume previous session keys with 
+    /// \ref xbmcdrm_ProvideKeyResponse "ProvideKeyResponse",
+    /// or resume previous session keys with
     /// \ref xbmcdrm_RestoreKeys "RestoreKeys".
     ///
-    /// When the session keys are established you can use these methods to perform various operations:
-    /// \ref xbmcdrm_Encrypt "Encrypt"/\ref xbmcdrm_Decrypt "Decrypt" for data encryption/decryption,
-    /// \ref xbmcdrm_Sign "Sign"/\ref xbmcdrm_Verify "Verify" for make or verify data-signature.
-    /// Useful for example to implement encrypted communication between a client and the server.
+    /// When the session keys are established you can use these methods
+    /// to perform various operations:
+    /// \ref xbmcdrm_Encrypt "Encrypt" /
+    /// \ref xbmcdrm_Decrypt "Decrypt" for data encryption / decryption,
+    /// \ref xbmcdrm_Sign "Sign" /
+    /// \ref xbmcdrm_Verify "Verify" for make or verify data-signature.
+    /// Useful for example to implement encrypted communication between
+    /// a client and the server.
     ///
-    /// An example where such functionality is useful is the Message Security Layer (MSL)
-    /// transmission protocol used in some VOD applications.
+    /// An example where such functionality is useful is the Message
+    /// Security Layer (MSL) transmission protocol used in some VOD applications.
     /// This protocol (or rather framework) is used to increase the level of security 
-    /// in the exchange of messages (such as licences, manifests or other data) between clients and servers,
-    /// which is a kind of integration to the HTTPS communication standard.
+    /// in the exchange of messages (such as licences, manifests or other data),
+    /// which defines a security extension / layer on top of the HTTP protocol.
     ///
     ///--------------------------------------------------------------------------
-    /// Constructor for DRM crypto session
+    /// Constructor for %DRM crypto session
     ///
     /// \anchor xbmcdrm_CryptoSession
     /// \python_class{ xbmcdrm.CryptoSession(UUID, cipherAlgorithm, macAlgorithm) }
     ///
-    /// @param UUID             String 16 byte UUID of the DRM system to use
-    /// @param cipherAlgorithm  String algorithm used for encryption / decryption ciphers (example "AES/CBC/NoPadding")
-    /// @param macAlgorithm     String algorithm used for sign / verify (example "HmacSHA256")
+    /// @param UUID             string - 16 byte UUID of the %DRM system to use
+    /// @param cipherAlgorithm  string - Algorithm used for encryption / decryption ciphers
+    /// @param macAlgorithm     string - Algorithm used for sign / verify
+    ///
+    /// @throws RuntimeException If the session can not be established
     ///
-    /// @throws RuntimeException if the session can not be established
     ///
     ///------------------------------------------------------------------------
     /// @python_v18 New class added.
     ///
+    /// **Example:**
+    /// ~~~~~~~~~~~~~{.py}
+    /// ..
+    /// uuid_widevine = 'edef8ba9-79d6-4ace-a3c8-27dcd51d21ed'
+    /// crypto_session = xbmcdrm.CryptoSession(uuid_widevine, 'AES/CBC/NoPadding', 'HmacSHA256')
+    /// ..
+    /// ~~~~~~~~~~~~~
+    ///
     class CryptoSession : public AddonClass
     {
       DRM::CCryptoSession* m_cryptoSession;
@@ -90,27 +105,30 @@ namespace XBMCAddon
       /// @brief \python_func{ GetKeyRequest(init, mimeType, offlineKey, optionalParameters) }
       ///-----------------------------------------------------------------------
       /// \anchor xbmcdrm_GetKeyRequest
-      /// Generate a key request, used for request/response exchange between the app and a license server
-      /// to obtain or release keys used to decrypt encrypted content.
-      /// After the app has received the key request response from the server,
-      /// it should deliver to the response to the MediaDrm instance using 
-      /// the method provideKeyResponse, to activate the keys.
-      ///
-      /// @param      [byte] init     Initialization bytes container-specific data,
-      ///                             its meaning is interpreted based on the mime type provided 
+      /// Generate a key request, used for request/response exchange between the app
+      /// and a license server to obtain or release keys used to decrypt encrypted content.
+      /// After the app has received the key request response from the license server,
+      /// it should deliver to the response to the %DRM instance using
+      /// the method \ref xbmcdrm_ProvideKeyResponse "ProvideKeyResponse", to activate the keys.
+      ///
+      /// @param      init            byte - Initialization bytes container-specific data,
+      ///                             its meaning is interpreted based on the mime type provided
       ///                             in the mimeType parameter. It could contain, for example,
-      ///                             the content ID, key ID or other data required in generating the key request.
-      /// @param      String mimeType Type of media which is xchanged, e.g. application/xml, video/mp4
-      /// @param      bool offlineKey Specifes the type of the request.
+      ///                             the content ID, key ID or other data required in generating
+      ///                             the key request.
+      /// @param      mimeType        string - Type of media which is exchanged
+      ///                             (e.g. "application/xml", "video/mp4")
+      /// @param      offlineKey      bool - Specifes the type of the request.
       ///                             The request may be to acquire keys for Streaming or Offline content
-      /// @param      [map] optionalParameters optional Will be included in the key request message to allow a client application 
-      ///                                               to provide additional message parameters to the server
+      /// @param      optionalParameters [opt] map - Will be included in the key request message
+      ///                                to allow a client application to provide additional 
+      ///                                message parameters to the server
       ///
-      /// @return     The opaque key request data (challenge) which is send to key server
+      /// @return     byte - The opaque key request data (challenge) which is send to key server
       ///
       ///------------------------------------------------------------------------
       /// @python_v18 New function added.
-      /// @python_v19 With python 3 for the init param is needed to pass bytearray instead of byte.
+      /// @python_v19 With python 3 the init param must be a bytearray instead of byte.
       ///
       GetKeyRequest(...);
 #else
@@ -123,9 +141,9 @@ namespace XBMCAddon
       /// @brief \python_func{ GetPropertyString(name) }
       ///-----------------------------------------------------------------------
       /// \anchor xbmcdrm_GetPropertyString
-      /// Request a system specific property value of the DRM system
+      /// Request a system specific property value of the %DRM system.
       ///
-      /// @param      String Name name of the property to query
+      /// @param      Name    string - Name of the property to query
       ///
       /// @return     Value of the requested property
       ///
@@ -143,16 +161,19 @@ namespace XBMCAddon
       /// @brief \python_func{ ProvideKeyResponse(response) }
       ///-----------------------------------------------------------------------
       /// \anchor xbmcdrm_ProvideKeyResponse
-      /// Provide key data returned from key server. See getKeyRequest(...)
+      /// When a key response is received from the license server,
+      /// must be sent to the %DRM instance by using provideKeyResponse.
+      /// See also \ref xbmcdrm_GetKeyRequest "GetKeyRequest".
       ///
-      /// @param      [byte] response Key data returned from key server
+      /// @param      response   byte - Key data returned from the license server
       ///
-      /// @return     String If the response is for an offline key requests a keySetId which can be used later
-      ///                    with restoreKeys, else return empty for streaming key requests.
+      /// @return     A keySetId if the response is for an offline key requests which
+      ///             can be used later with restoreKeys,
+      ///             else return empty for streaming key requests.
       ///
       ///------------------------------------------------------------------------
       /// @python_v18 New function added.
-      /// @python_v19 With python 3 for the response argument is needed to pass bytearray instead of byte.
+      /// @python_v19 With python 3 the response argument must be a bytearray instead of byte.
       ///
       ProvideKeyResponse(...);
 #else
@@ -164,11 +185,7 @@ namespace XBMCAddon
       /// \ingroup python_xbmcdrm
       /// @brief \python_func{ RemoveKeys() }
       ///-----------------------------------------------------------------------
-      /// removes all keys currently loaded in a session.
-      ///
-      /// @param      None
-      ///
-      /// @return     None
+      /// Removes all keys currently loaded in a session.
       ///
       ///------------------------------------------------------------------------
       /// @python_v18 New function added.
@@ -184,12 +201,11 @@ namespace XBMCAddon
       /// @brief \python_func{ RestoreKeys(keySetId) }
       ///-----------------------------------------------------------------------
       /// \anchor xbmcdrm_RestoreKeys
-      /// restores session keys stored during previous provideKeyResponse call.
+      /// Restores session keys stored during previous
+      /// \ref xbmcdrm_ProvideKeyResponse "ProvideKeyResponse" call.
       ///
-      /// @param      String keySetId Identifies the saved key set to restore.
-      ///                             This value must never be null.
-      ///
-      /// @return     None
+      /// @param     keySetId   string - Identifies the saved key set to restore.
+      ///                                This value must never be null.
       ///
       ///------------------------------------------------------------------------
       /// @python_v18 New function added.
@@ -205,10 +221,10 @@ namespace XBMCAddon
       /// @brief \python_func{ SetPropertyString(name, value) }
       ///-----------------------------------------------------------------------
       /// \anchor xbmcdrm_SetPropertyString
-      /// Set a system specific property value in the DRM system
+      /// Set a system specific property value in the %DRM system.
       ///
-      /// @param      String name   Name of the property. This value must never be null.
-      /// @param      String value  Value of the property to set. This value must never be null.
+      /// @param     name   string - Name of the property. This value must never be null.
+      /// @param     value  string - Value of the property to set. This value must never be null.
       ///
       ///------------------------------------------------------------------------
       /// @python_v18 New function added.
@@ -226,17 +242,17 @@ namespace XBMCAddon
       /// @brief \python_func{ Decrypt(cipherKeyId, input, iv) }
       ///-----------------------------------------------------------------------
       /// \anchor xbmcdrm_Decrypt
-      /// Sets a system specific property value in the DRM system
+      /// Decrypt an encrypted data by using session keys.
       ///
-      /// @param      [byte] cipherKeyId Encryption key id (provided from a service handshake)
-      /// @param      [byte] input       Cipher text to decrypt
-      /// @param      [byte] iv          Initialization vector of cipher text
+      /// @param     cipherKeyId byte - Encryption key id (provided from a service handshake)
+      /// @param     input       byte - Cipher text to decrypt
+      /// @param     iv          byte - Initialization vector of cipher text
       ///
-      /// @return     Decrypted input data
+      /// @return    Decrypted input data
       ///
       ///------------------------------------------------------------------------
       /// @python_v18 New function added.
-      /// @python_v19 With python 3 for all arguments is needed to pass bytearray instead of byte.
+      /// @python_v19 With python 3 all arguments need to be of type bytearray instead of byte.
       ///
       Decrypt(...);
 #else
@@ -249,17 +265,17 @@ namespace XBMCAddon
       /// @brief \python_func{ Encrypt(cipherKeyId, input, iv) }
       ///-----------------------------------------------------------------------
       /// \anchor xbmcdrm_Encrypt
-      /// Sets a system specific property value in the DRM system
+      /// Encrypt data by using session keys.
       ///
-      /// @param      [byte] cipherKeyId Encryption key id (provided from a service handshake)
-      /// @param      [byte] input       Encrypted text
-      /// @param      [byte] iv          Initialization vector of encrypted text
+      /// @param     cipherKeyId byte - Encryption key id (provided from a service handshake)
+      /// @param     input       byte - Encrypted text
+      /// @param     iv          byte - Initialization vector of encrypted text
       ///
-      /// @return     Encrypted input data
+      /// @return    byte - Encrypted input data
       ///
       ///------------------------------------------------------------------------
       /// @python_v18 New function added.
-      /// @python_v19 With python 3 is needed to pass bytearray instead of byte.
+      /// @python_v19 With python 3 all arguments need to be of type bytearray instead of byte.
       ///
       Encrypt(...);
 #else
@@ -272,16 +288,16 @@ namespace XBMCAddon
       /// @brief \python_func{ Sign(macKeyId, message) }
       ///-----------------------------------------------------------------------
       /// \anchor xbmcdrm_Sign
-      /// Generate an DRM encrypted signature for a text message
+      /// Generate a %DRM encrypted signature for a text message.
       ///
-      /// @param      [byte] macKeyId  HMAC key id (provided from a service handshake)
-      /// @param      [byte] message   Message text on which to base the signature 
+      /// @param     macKeyId  byte - HMAC key id (provided from a service handshake)
+      /// @param     message   byte - Message text on which to base the signature
       ///
-      /// @return     [byte] Signature
+      /// @return    byte - Signature
       ///
       ///------------------------------------------------------------------------
       /// @python_v18 New function added.
-      /// @python_v19 With python 3 for all arguments is needed to pass bytearray instead of byte.
+      /// @python_v19 With python 3 all arguments need to be of type bytearray instead of byte.
       ///
       Sign(...);
 #else
@@ -294,13 +310,13 @@ namespace XBMCAddon
       /// @brief \python_func{ Verify(macKeyId, message, signature) }
       ///-----------------------------------------------------------------------
       /// \anchor xbmcdrm_Verify
-      /// Verify the validity of a DRM signature of a text message
+      /// Verify the validity of a %DRM signature of a text message.
       ///
-      /// @param      [byte] macKeyId  HMAC key id (provided from a service handshake)
-      /// @param      [byte] message   Message text on which the signature is based
-      /// @param      [byte] signature The signature to verify
+      /// @param     macKeyId  byte - HMAC key id (provided from a service handshake)
+      /// @param     message   byte - Message text on which the signature is based
+      /// @param     signature byte - The signature to verify
       ///
-      /// @return     true when the signature is valid
+      /// @return    true when the signature is valid
       ///
       ///------------------------------------------------------------------------
       /// @python_v18 New function added.
