From f0971131bb4e3990b0a5708a68a0d926d58d1ef1 Mon Sep 17 00:00:00 2001
From: Rechi <Rechi@users.noreply.github.com>
Date: Tue, 7 May 2019 14:38:14 +0200
Subject: [PATCH] drop omxplayer

---
 .../resources/strings.po                      |   11 +-
 system/settings/rbp2.xml                      |    9 -
 system/settings/settings.xml                  |    6 -
 xbmc/cores/AudioEngine/Sinks/AESinkPi.cpp     |   12 +
 xbmc/cores/AudioEngine/Sinks/AESinkPi.h       |    3 +-
 .../VideoPlayer/DVDCodecs/Video/MMALCodec.cpp |    2 +-
 xbmc/cores/VideoPlayer/VideoPlayer.cpp        |  247 +--
 xbmc/cores/VideoPlayer/VideoPlayer.h          |   55 -
 xbmc/cores/omxplayer/CMakeLists.txt           |   16 +-
 xbmc/cores/omxplayer/OMXAudio.cpp             | 1531 -----------------
 xbmc/cores/omxplayer/OMXAudio.h               |  172 --
 xbmc/cores/omxplayer/OMXAudioCodecOMX.cpp     |  355 ----
 xbmc/cores/omxplayer/OMXAudioCodecOMX.h       |   63 -
 xbmc/cores/omxplayer/OMXHelper.cpp            |  183 --
 xbmc/cores/omxplayer/OMXHelper.h              |   16 -
 xbmc/cores/omxplayer/OMXImage.h               |    1 -
 xbmc/cores/omxplayer/OMXPlayerAudio.cpp       |  598 -------
 xbmc/cores/omxplayer/OMXPlayerAudio.h         |   91 -
 xbmc/cores/omxplayer/OMXPlayerVideo.cpp       |  813 ---------
 xbmc/cores/omxplayer/OMXPlayerVideo.h         |  108 --
 xbmc/cores/omxplayer/OMXVideo.cpp             |  941 ----------
 xbmc/cores/omxplayer/OMXVideo.h               |  106 --
 .../omxplayer/omxplayer_advancedsettings.xml  |    7 -
 xbmc/platform/linux/CMakeLists.txt            |    2 -
 xbmc/platform/linux/OMXClock.cpp              |  572 ------
 xbmc/platform/linux/OMXClock.h                |   83 -
 xbmc/platform/linux/OMXCore.cpp               |    1 -
 xbmc/settings/AdvancedSettings.cpp            |    8 -
 xbmc/settings/AdvancedSettings.h              |    2 -
 xbmc/settings/SettingConditions.cpp           |    3 -
 xbmc/settings/Settings.cpp                    |    1 -
 xbmc/settings/Settings.h                      |    1 -
 32 files changed, 39 insertions(+), 5980 deletions(-)
 delete mode 100644 xbmc/cores/omxplayer/OMXAudio.cpp
 delete mode 100644 xbmc/cores/omxplayer/OMXAudio.h
 delete mode 100644 xbmc/cores/omxplayer/OMXAudioCodecOMX.cpp
 delete mode 100644 xbmc/cores/omxplayer/OMXAudioCodecOMX.h
 delete mode 100644 xbmc/cores/omxplayer/OMXHelper.cpp
 delete mode 100644 xbmc/cores/omxplayer/OMXHelper.h
 delete mode 100644 xbmc/cores/omxplayer/OMXPlayerAudio.cpp
 delete mode 100644 xbmc/cores/omxplayer/OMXPlayerAudio.h
 delete mode 100644 xbmc/cores/omxplayer/OMXPlayerVideo.cpp
 delete mode 100644 xbmc/cores/omxplayer/OMXPlayerVideo.h
 delete mode 100644 xbmc/cores/omxplayer/OMXVideo.cpp
 delete mode 100644 xbmc/cores/omxplayer/OMXVideo.h
 delete mode 100644 xbmc/cores/omxplayer/omxplayer_advancedsettings.xml
 delete mode 100644 xbmc/platform/linux/OMXClock.cpp
 delete mode 100644 xbmc/platform/linux/OMXClock.h

diff --git a/addons/resource.language.en_gb/resources/strings.po b/addons/resource.language.en_gb/resources/strings.po
index ef545d06512c..68aafc375315 100644
--- a/addons/resource.language.en_gb/resources/strings.po
+++ b/addons/resource.language.en_gb/resources/strings.po
@@ -7255,16 +7255,7 @@ msgctxt "#13457"
 msgid "Prefer VAAPI render method"
 msgstr ""
 
-#: system/settings/settings.xml
-msgctxt "#13458"
-msgid "Allow hardware acceleration - OMXPlayer"
-msgstr ""
-
-#. Description of setting with label #13457 "Allow hardware acceleration (OMXPlayer)"
-#: system/settings/settings.xml
-msgctxt "#13459"
-msgid "Use OMXPlayer for decoding of video files."
-msgstr ""
+#empty strings from id 13458 to 13459
 
 #: system/settings/settings.xml
 msgctxt "#13460"
diff --git a/system/settings/rbp2.xml b/system/settings/rbp2.xml
index e67d9ba2efac..44a982453dc6 100644
--- a/system/settings/rbp2.xml
+++ b/system/settings/rbp2.xml
@@ -1,14 +1,5 @@
 <?xml version="1.0" encoding="utf-8" ?>
 <settings version="1">
-  <section id="player">
-    <category id="videoplayer">
-      <group id="3">
-        <setting id="videoplayer.useomxplayer">
-          <default>false</default>
-        </setting>
-      </group>
-    </category>
-  </section>
   <section id="system">
     <category id="display">
       <group id="1">
diff --git a/system/settings/settings.xml b/system/settings/settings.xml
index 9df19c2d4378..b5358c61e5d4 100755
--- a/system/settings/settings.xml
+++ b/system/settings/settings.xml
@@ -212,12 +212,6 @@
           <default>true</default>
           <control type="toggle" />
         </setting>
-        <setting id="videoplayer.useomxplayer" type="boolean" label="13458" help="13459">
-          <requirement>HAS_OMXPLAYER</requirement>
-          <level>2</level>
-          <default>true</default>
-          <control type="toggle" />
-        </setting>
         <setting id="videoplayer.usevtb" type="boolean" label="13429" help="36160">
           <requirement>HasVTB</requirement>
           <level>2</level>
diff --git a/xbmc/cores/AudioEngine/Sinks/AESinkPi.cpp b/xbmc/cores/AudioEngine/Sinks/AESinkPi.cpp
index 98132eee9e9f..2424f6f3c12a 100644
--- a/xbmc/cores/AudioEngine/Sinks/AESinkPi.cpp
+++ b/xbmc/cores/AudioEngine/Sinks/AESinkPi.cpp
@@ -24,6 +24,18 @@
 #define NUM_OMX_BUFFERS 2
 #define AUDIO_PLAYBUFFER (0.1) // 100ms
 
+#ifdef OMX_SKIP64BIT
+static inline OMX_TICKS ToOMXTime(int64_t pts)
+{
+  OMX_TICKS ticks;
+  ticks.nLowPart = pts;
+  ticks.nHighPart = pts >> 32;
+  return ticks;
+}
+#else
+#define ToOMXTime(x) (x)
+#endif
+
 static const unsigned int PassthroughSampleRates[] = { 8000, 11025, 16000, 22050, 24000, 32000, 44100, 48000, 88200, 96000, 176400, 192000 };
 
 CAEDeviceInfo CAESinkPi::m_info;
diff --git a/xbmc/cores/AudioEngine/Sinks/AESinkPi.h b/xbmc/cores/AudioEngine/Sinks/AESinkPi.h
index bf0e71b81569..b8b5fb757739 100644
--- a/xbmc/cores/AudioEngine/Sinks/AESinkPi.h
+++ b/xbmc/cores/AudioEngine/Sinks/AESinkPi.h
@@ -11,7 +11,8 @@
 #include "cores/AudioEngine/Interfaces/AESink.h"
 #include "cores/AudioEngine/Utils/AEDeviceInfo.h"
 
-#include "cores/omxplayer/OMXAudio.h"
+#include "platform/linux/OMXCore.h"
+#include "platform/linux/XTimeUtils.h"
 
 class CAESinkPi : public IAESink
 {
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/MMALCodec.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/MMALCodec.cpp
index 63d4c573be20..220625426ff5 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/MMALCodec.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/MMALCodec.cpp
@@ -216,7 +216,7 @@ void CMMALVideo::dec_output_port_cb(MMAL_PORT_T *port, MMAL_BUFFER_HEADER_T *buf
       // we don't keep up when running at 60fps in the background so switch to half rate
       if (m_fps > 40.0f && !CServiceBroker::GetWinSystem()->GetGfxContext().IsFullScreenVideo() && !(m_num_decoded & 1))
         wanted = false;
-      if (CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->m_omxDecodeStartWithValidFrame && (buffer->flags & MMAL_BUFFER_HEADER_FLAG_CORRUPTED))
+      if ((buffer->flags & MMAL_BUFFER_HEADER_FLAG_CORRUPTED))
         wanted = false;
       m_num_decoded++;
       CLog::Log(LOGDEBUG, LOGVIDEO,
diff --git a/xbmc/cores/VideoPlayer/VideoPlayer.cpp b/xbmc/cores/VideoPlayer/VideoPlayer.cpp
index c62a26b8608a..eb380e68d45f 100644
--- a/xbmc/cores/VideoPlayer/VideoPlayer.cpp
+++ b/xbmc/cores/VideoPlayer/VideoPlayer.cpp
@@ -65,12 +65,6 @@
 #include "LangInfo.h"
 #include "URL.h"
 
-
-#ifdef TARGET_RASPBERRY_PI
-#include "cores/omxplayer/OMXPlayerAudio.h"
-#include "cores/omxplayer/OMXPlayerVideo.h"
-#include "cores/omxplayer/OMXHelper.h"
-#endif
 #include "VideoPlayerAudio.h"
 #include "windowing/WinSystem.h"
 #include "DVDCodecs/DVDCodecUtils.h"
@@ -572,29 +566,11 @@ int CSelectionStreams::CountType(StreamType type) const
 
 void CVideoPlayer::CreatePlayers()
 {
-#ifdef TARGET_RASPBERRY_PI
-  bool omx_suitable = !OMXPlayerUnsuitable(m_HasVideo, m_HasAudio, m_pDemuxer, m_pInputStream, m_SelectionStreams);
-  if (m_omxplayer_mode != omx_suitable)
-  {
-    DestroyPlayers();
-    m_omxplayer_mode = omx_suitable;
-  }
-#endif
   if (m_players_created)
     return;
 
-  if (m_omxplayer_mode)
-  {
-#ifdef TARGET_RASPBERRY_PI
-    m_VideoPlayerVideo = new OMXPlayerVideo(&m_OmxPlayerState.av_clock, &m_overlayContainer, m_messenger, m_renderManager, *m_processInfo);
-    m_VideoPlayerAudio = new OMXPlayerAudio(&m_OmxPlayerState.av_clock, m_messenger, *m_processInfo);
-#endif
-  }
-  else
-  {
-    m_VideoPlayerVideo = new CVideoPlayerVideo(&m_clock, &m_overlayContainer, m_messenger, m_renderManager, *m_processInfo);
-    m_VideoPlayerAudio = new CVideoPlayerAudio(&m_clock, m_messenger, *m_processInfo);
-  }
+  m_VideoPlayerVideo = new CVideoPlayerVideo(&m_clock, &m_overlayContainer, m_messenger, m_renderManager, *m_processInfo);
+  m_VideoPlayerAudio = new CVideoPlayerAudio(&m_clock, m_messenger, *m_processInfo);
   m_VideoPlayerSubtitle = new CVideoPlayerSubtitle(&m_overlayContainer, *m_processInfo);
   m_VideoPlayerTeletext = new CDVDTeletextData(*m_processInfo);
   m_VideoPlayerRadioRDS = new CDVDRadioRDSData(*m_processInfo);
@@ -647,20 +623,6 @@ CVideoPlayer::CVideoPlayer(IPlayerCallback& callback)
 
   memset(&m_SpeedState, 0, sizeof(m_SpeedState));
 
-  // omxplayer variables
-  m_OmxPlayerState.last_check_time     = 0;
-  m_OmxPlayerState.stamp               = 0.0;
-  m_OmxPlayerState.bOmxWaitVideo       = false;
-  m_OmxPlayerState.bOmxWaitAudio       = false;
-  m_OmxPlayerState.bOmxSentEOFs        = false;
-  m_OmxPlayerState.threshold           = 0.2f;
-  m_OmxPlayerState.interlace_method    = VS_INTERLACEMETHOD_MAX;
-#ifdef TARGET_RASPBERRY_PI
-  m_omxplayer_mode                     = CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_VIDEOPLAYER_USEOMXPLAYER);
-#else
-  m_omxplayer_mode                     = false;
-#endif
-
   m_SkipCommercials = true;
 
   m_processInfo.reset(CProcessInfo::CreateInstance());
@@ -694,9 +656,6 @@ bool CVideoPlayer::OpenFile(const CFileItem& file, const CPlayerOptions &options
 {
   CLog::Log(LOGNOTICE, "VideoPlayer::OpenFile: %s", CURL::GetRedacted(file.GetPath()).c_str());
 
-  if (m_omxplayer_mode && IsRunning())
-    CloseFile();
-
   if (IsRunning())
   {
     CDVDMsgOpenFile::FileParams params;
@@ -1057,16 +1016,6 @@ bool CVideoPlayer::ReadPacket(DemuxPacket*& packet, CDemuxStream*& stream)
     }
   }
 
-  if (m_omxplayer_mode)
-  {
-    // reset eos state when we get a packet (e.g. for case of seek after eos)
-    if (packet && stream)
-    {
-      m_OmxPlayerState.bOmxWaitVideo = false;
-      m_OmxPlayerState.bOmxWaitAudio = false;
-      m_OmxPlayerState.bOmxSentEOFs = false;
-    }
-  }
   // read a data frame from stream.
   if (m_pDemuxer)
     packet = m_pDemuxer->Read();
@@ -1278,18 +1227,6 @@ void CVideoPlayer::Prepare()
   // give players a chance to reconsider now codecs are known
   CreatePlayers();
 
-  if (m_omxplayer_mode)
-  {
-    if (!m_OmxPlayerState.av_clock.OMXInitialize(&m_clock))
-      m_bAbortRequest = true;
-    if (CServiceBroker::GetSettingsComponent()->GetSettings()->GetInt(CSettings::SETTING_VIDEOPLAYER_ADJUSTREFRESHRATE) != ADJUST_REFRESHRATE_OFF)
-      m_OmxPlayerState.av_clock.HDMIClockSync();
-    m_OmxPlayerState.av_clock.OMXStateIdle();
-    m_OmxPlayerState.av_clock.OMXStateExecute();
-    m_OmxPlayerState.av_clock.OMXStop();
-    m_OmxPlayerState.av_clock.OMXPause();
-  }
-
   if (!discStateRestored)
     OpenDefaultStreams();
 
@@ -1371,23 +1308,6 @@ void CVideoPlayer::Process()
 
   while (!m_bAbortRequest)
   {
-#ifdef TARGET_RASPBERRY_PI
-    if (m_omxplayer_mode && OMXDoProcessing(m_OmxPlayerState, m_playSpeed, m_VideoPlayerVideo, m_VideoPlayerAudio, m_CurrentAudio, m_CurrentVideo, m_HasVideo, m_HasAudio, *m_processInfo))
-    {
-      CloseStream(m_CurrentVideo, false);
-      OpenStream(m_CurrentVideo, m_CurrentVideo.demuxerId, m_CurrentVideo.id, m_CurrentVideo.source);
-      if (m_State.canseek)
-      {
-        CDVDMsgPlayerSeek::CMode mode;
-        mode.time = (int)GetTime();
-        mode.backward = true;
-        mode.accurate = true;
-        mode.sync = true;
-        m_messenger.Put(new CDVDMsgPlayerSeek(mode));
-      }
-    }
-#endif
-
     // check display lost
     if (m_displayLost)
     {
@@ -1550,30 +1470,11 @@ void CVideoPlayer::Process()
         continue;
       }
 
-      // make sure we tell all players to finish it's data
-      if (m_omxplayer_mode && !m_OmxPlayerState.bOmxSentEOFs)
-      {
-        if(m_CurrentAudio.inited)
-          m_OmxPlayerState.bOmxWaitAudio = true;
-
-        if(m_CurrentVideo.inited)
-          m_OmxPlayerState.bOmxWaitVideo = true;
-
-        m_OmxPlayerState.bOmxSentEOFs = true;
-      }
-
       if (m_CurrentVideo.inited)
       {
         m_VideoPlayerVideo->SendMessage(new CDVDMsg(CDVDMsg::VIDEO_DRAIN));
       }
 
-      { // TODO: only used by OMXPlayer, find better solution
-        if (m_CurrentAudio.inited)
-          m_VideoPlayerAudio->SendMessage(new CDVDMsg(CDVDMsg::GENERAL_EOF));
-        if (m_CurrentVideo.inited)
-          m_VideoPlayerVideo->SendMessage(new CDVDMsg(CDVDMsg::GENERAL_EOF));
-      }
-
       m_CurrentAudio.inited = false;
       m_CurrentVideo.inited = false;
       m_CurrentSubtitle.inited = false;
@@ -1590,13 +1491,6 @@ void CVideoPlayer::Process()
         Sleep(100);
         continue;
       }
-#ifdef TARGET_RASPBERRY_PI
-      if (m_omxplayer_mode && OMXStillPlaying(m_OmxPlayerState.bOmxWaitVideo, m_OmxPlayerState.bOmxWaitAudio, m_VideoPlayerVideo->IsEOS(), m_VideoPlayerAudio->IsEOS()))
-      {
-        Sleep(100);
-        continue;
-      }
-#endif
 
       if (!m_pInputStream->IsEOF())
         CLog::Log(LOGINFO, "%s - eof reading from demuxer", __FUNCTION__);
@@ -1992,8 +1886,6 @@ void CVideoPlayer::HandlePlaySpeed()
           if (adjust != -1.0)
           {
             m_clock.SetSpeedAdjust(adjust);
-            if (m_omxplayer_mode)
-              m_OmxPlayerState.av_clock.OMXSetSpeedAdjust(adjust);
           }
         }
       }
@@ -2076,12 +1968,6 @@ void CVideoPlayer::HandlePlaySpeed()
         clock = m_CurrentVideo.starttime - m_CurrentVideo.cachetotal;
       }
 
-      if (m_omxplayer_mode)
-      {
-        CLog::Log(LOGDEBUG, "%s::%s player started RESET", "CVideoPlayer", __FUNCTION__);
-        m_OmxPlayerState.av_clock.OMXReset(m_CurrentVideo.id >= 0, m_playSpeed != DVD_PLAYSPEED_NORMAL && m_playSpeed != DVD_PLAYSPEED_PAUSE ? false: (m_CurrentAudio.id >= 0));
-      }
-
       m_clock.Discontinuity(clock);
       m_CurrentAudio.syncState = IDVDStreamPlayer::SYNC_INSYNC;
       m_CurrentAudio.avsync = CCurrentStream::AV_SYNC_NONE;
@@ -2553,13 +2439,6 @@ void CVideoPlayer::OnExit()
 
   m_messenger.End();
 
-  if (m_omxplayer_mode)
-  {
-    m_OmxPlayerState.av_clock.OMXStop();
-    m_OmxPlayerState.av_clock.OMXStateIdle();
-    m_OmxPlayerState.av_clock.OMXDeinitialize();
-  }
-
   CFFmpegLog::ClearLogLevel();
   m_bStop = true;
 
@@ -2930,8 +2809,7 @@ void CVideoPlayer::HandleMessages()
       // do a seek after rewind, clock is not in sync with current pts
       if ((speed == DVD_PLAYSPEED_NORMAL) &&
           (m_playSpeed != DVD_PLAYSPEED_NORMAL) &&
-          (m_playSpeed != DVD_PLAYSPEED_PAUSE) &&
-          !m_omxplayer_mode)
+          (m_playSpeed != DVD_PLAYSPEED_PAUSE))
       {
         double iTime = m_VideoPlayerVideo->GetCurrentPts();
         if (iTime == DVD_NOPTS_VALUE)
@@ -2947,33 +2825,6 @@ void CVideoPlayer::HandleMessages()
         m_messenger.Put(new CDVDMsgPlayerSeek(mode));
       }
 
-      // !!! omx alterative code path !!!
-      // should be done differently
-      if (m_omxplayer_mode)
-      {
-        // when switching from trickplay to normal, we may not have a full set of reference frames
-        // in decoder and we may get corrupt frames out. Seeking to current time will avoid this.
-        if ( (speed != DVD_PLAYSPEED_PAUSE && speed != DVD_PLAYSPEED_NORMAL) ||
-            (m_playSpeed != DVD_PLAYSPEED_PAUSE && m_playSpeed != DVD_PLAYSPEED_NORMAL) )
-        {
-          CDVDMsgPlayerSeek::CMode mode;
-          mode.time = (int)GetTime();
-          mode.backward = (speed < 0);
-          mode.accurate = true;
-          mode.restore = false;
-          mode.trickplay = true;
-          mode.sync = true;
-          m_messenger.Put(new CDVDMsgPlayerSeek(mode));
-        }
-        else
-        {
-          m_OmxPlayerState.av_clock.OMXPause();
-        }
-
-        m_OmxPlayerState.av_clock.OMXSetSpeed(speed);
-        CLog::Log(LOGDEBUG, "%s::%s CDVDMsg::PLAYER_SETSPEED speed : %d (%d)", "CVideoPlayer", __FUNCTION__, speed, m_playSpeed);
-      }
-
       if (static_cast<CDVDMsgPlayerSetSpeed*>(pMsg)->IsTempo())
         m_processInfo->SetTempo(static_cast<float>(speed) / DVD_PLAYSPEED_NORMAL);
       else
@@ -3089,9 +2940,6 @@ void CVideoPlayer::SetCaching(ECacheState state)
   {
     m_clock.SetSpeed(DVD_PLAYSPEED_PAUSE);
 
-    if (m_omxplayer_mode)
-      m_OmxPlayerState.av_clock.OMXPause();
-
     m_VideoPlayerAudio->SetSpeed(DVD_PLAYSPEED_PAUSE);
     m_VideoPlayerVideo->SetSpeed(DVD_PLAYSPEED_PAUSE);
     m_streamPlayerSpeed = DVD_PLAYSPEED_PAUSE;
@@ -3110,8 +2958,6 @@ void CVideoPlayer::SetCaching(ECacheState state)
   m_caching = state;
 
   m_clock.SetSpeedAdjust(0);
-  if (m_omxplayer_mode)
-    m_OmxPlayerState.av_clock.OMXSetSpeedAdjust(0);
 }
 
 void CVideoPlayer::SetPlaySpeed(int speed)
@@ -3280,59 +3126,27 @@ void CVideoPlayer::GetGeneralInfo(std::string& strGeneralInfo)
 {
   if (!m_bStop)
   {
-    if (m_omxplayer_mode)
-    {
-      double apts = m_VideoPlayerAudio->GetCurrentPts();
-      double vpts = m_VideoPlayerVideo->GetCurrentPts();
-      double dDiff = 0;
-
-      if( apts != DVD_NOPTS_VALUE && vpts != DVD_NOPTS_VALUE )
-        dDiff = (apts - vpts) / DVD_TIME_BASE;
+    double apts = m_VideoPlayerAudio->GetCurrentPts();
+    double vpts = m_VideoPlayerVideo->GetCurrentPts();
+    double dDiff = 0;
 
-      std::string strEDL;
-      strEDL += StringUtils::Format(", edl:%s", m_Edl.GetInfo().c_str());
-
-      std::string strBuf;
-      CSingleLock lock(m_StateSection);
-      if(m_State.cache_bytes >= 0)
-      {
-        strBuf += StringUtils::Format(" forward:%s %2.0f%%"
-                                      , StringUtils::SizeToString(m_State.cache_bytes).c_str()
-                                      , m_State.cache_level * 100);
-        if(m_playSpeed == 0 || m_caching == CACHESTATE_FULL)
-          strBuf += StringUtils::Format(" %d msec", DVD_TIME_TO_MSEC(m_State.cache_delay));
-      }
+    if (apts != DVD_NOPTS_VALUE && vpts != DVD_NOPTS_VALUE)
+      dDiff = (apts - vpts) / DVD_TIME_BASE;
 
-      strGeneralInfo = StringUtils::Format("C( a/v:% 6.3f%s, %s amp:% 5.2f )"
-          , dDiff
-          , strEDL.c_str()
-          , strBuf.c_str()
-          , m_VideoPlayerAudio->GetDynamicRangeAmplification());
-    }
-    else
+    std::string strBuf;
+    CSingleLock lock(m_StateSection);
+    if (m_State.cache_bytes >= 0)
     {
-      double apts = m_VideoPlayerAudio->GetCurrentPts();
-      double vpts = m_VideoPlayerVideo->GetCurrentPts();
-      double dDiff = 0;
-
-      if (apts != DVD_NOPTS_VALUE && vpts != DVD_NOPTS_VALUE)
-        dDiff = (apts - vpts) / DVD_TIME_BASE;
-
-      std::string strBuf;
-      CSingleLock lock(m_StateSection);
-      if(m_State.cache_bytes >= 0)
-      {
-        strBuf += StringUtils::Format(" forward:%s %2.0f%%"
-                                      , StringUtils::SizeToString(m_State.cache_bytes).c_str()
-                                      , m_State.cache_level * 100);
-        if(m_playSpeed == 0 || m_caching == CACHESTATE_FULL)
-          strBuf += StringUtils::Format(" %d msec", DVD_TIME_TO_MSEC(m_State.cache_delay));
-      }
-
-      strGeneralInfo = StringUtils::Format("Player: a/v:% 6.3f, %s"
-                                           , dDiff
-                                           , strBuf.c_str());
+      strBuf += StringUtils::Format(" forward:%s %2.0f%%"
+                                    , StringUtils::SizeToString(m_State.cache_bytes).c_str()
+                                    , m_State.cache_level * 100);
+      if (m_playSpeed == 0 || m_caching == CACHESTATE_FULL)
+        strBuf += StringUtils::Format(" %d msec", DVD_TIME_TO_MSEC(m_State.cache_delay));
     }
+
+    strGeneralInfo = StringUtils::Format("Player: a/v:% 6.3f, %s"
+                                         , dDiff
+                                         , strBuf.c_str());
   }
 }
 
@@ -3925,7 +3739,7 @@ void CVideoPlayer::FlushBuffers(double pts, bool accurate, bool sync)
   CLog::Log(LOGDEBUG, "CVideoPlayer::FlushBuffers - flushing buffers");
 
   double startpts;
-  if (accurate && !m_omxplayer_mode)
+  if (accurate)
     startpts = pts;
   else
     startpts = DVD_NOPTS_VALUE;
@@ -3998,13 +3812,6 @@ void CVideoPlayer::FlushBuffers(double pts, bool accurate, bool sync)
 
   m_demuxerSpeed = DVD_PLAYSPEED_NORMAL;
 
-  if (m_omxplayer_mode)
-  {
-    m_OmxPlayerState.av_clock.OMXFlush();
-    m_OmxPlayerState.av_clock.OMXStop();
-    m_OmxPlayerState.av_clock.OMXPause();
-    m_OmxPlayerState.av_clock.OMXMediaTime(0.0);
-  }
 }
 
 // since we call ffmpeg functions to decode, this is being called in the same thread as ::Process() is
@@ -4877,18 +4684,6 @@ int64_t CVideoPlayer::GetUpdatedTime()
   return llrint(m_State.time);
 }
 
-void CVideoPlayer::SetVolume(float nVolume)
-{
-  if (m_omxplayer_mode)
-    m_VideoPlayerAudio->SetVolume(nVolume);
-}
-
-void CVideoPlayer::SetMute(bool bOnOff)
-{
-  if (m_omxplayer_mode)
-    m_VideoPlayerAudio->SetMute(bOnOff);
-}
-
 void CVideoPlayer::SetDynamicRangeCompression(long drc)
 {
   m_processInfo->UpdateVideoSettings().SetVolumeAmplification(static_cast<float>(drc) / 100);
diff --git a/xbmc/cores/VideoPlayer/VideoPlayer.h b/xbmc/cores/VideoPlayer/VideoPlayer.h
index 237c48c51d59..37b352d8c4f3 100644
--- a/xbmc/cores/VideoPlayer/VideoPlayer.h
+++ b/xbmc/cores/VideoPlayer/VideoPlayer.h
@@ -29,49 +29,6 @@
 #include "guilib/DispResource.h"
 #include <unordered_map>
 
-#ifdef TARGET_RASPBERRY_PI
-#include "OMXCore.h"
-#include "OMXClock.h"
-#include "platform/linux/RBP.h"
-#else
-
-
-// dummy class to avoid ifdefs where calls are made
-class OMXClock
-{
-public:
-  bool OMXInitialize(CDVDClock *clock) { return false; }
-  void OMXDeinitialize() {}
-  bool OMXIsPaused() { return false; }
-  bool OMXStop(bool lock = true) { return false; }
-  bool OMXStep(int steps = 1, bool lock = true) { return false; }
-  bool OMXReset(bool has_video, bool has_audio, bool lock = true) { return false; }
-  double OMXMediaTime(bool lock = true) { return 0.0; }
-  double OMXClockAdjustment(bool lock = true) { return 0.0; }
-  bool OMXMediaTime(double pts, bool lock = true) { return false; }
-  bool OMXPause(bool lock = true) { return false; }
-  bool OMXResume(bool lock = true) { return false; }
-  bool OMXSetSpeed(int speed, bool lock = true, bool pause_resume = false) { return false; }
-  bool OMXFlush(bool lock = true) { return false; }
-  bool OMXStateExecute(bool lock = true) { return false; }
-  void OMXStateIdle(bool lock = true) {}
-  bool HDMIClockSync(bool lock = true) { return false; }
-  void OMXSetSpeedAdjust(double adjust, bool lock = true) {}
-};
-#endif
-
-struct SOmxPlayerState
-{
-  OMXClock av_clock;              // openmax clock component
-  EINTERLACEMETHOD interlace_method; // current deinterlace method
-  bool bOmxWaitVideo;             // whether we need to wait for video to play out on EOS
-  bool bOmxWaitAudio;             // whether we need to wait for audio to play out on EOS
-  bool bOmxSentEOFs;              // flag if we've send EOFs to audio/video players
-  float threshold;                // current fifo threshold required to come out of buffering
-  unsigned int last_check_time;   // we periodically check for gpu underrun
-  double stamp;                   // last media timestamp
-};
-
 struct SPlayerState
 {
   SPlayerState() { Clear(); }
@@ -295,8 +252,6 @@ class CVideoPlayer : public IPlayer, public CThread, public IVideoPlayer,
   void SeekPercentage(float iPercent) override;
   float GetCachePercentage() override;
 
-  void SetVolume(float nVolume) override;
-  void SetMute(bool bOnOff) override;
   void SetDynamicRangeCompression(long drc) override;
   bool CanPause() override;
   void SetAVDelay(float fValue = 0.0f) override;
@@ -581,14 +536,4 @@ class CVideoPlayer : public IPlayer, public CThread, public IVideoPlayer,
   bool m_UpdateStreamDetails;
 
   std::atomic<bool> m_displayLost;
-
-  //@todo remove!
-  // RPI specific stuff
-  // omxplayer variables
-  struct SOmxPlayerState m_OmxPlayerState;
-  bool m_omxplayer_mode;            // using omxplayer acceleration
-#ifdef TARGET_RASPBERRY_PI
-  friend class OMXPlayerVideo;
-  friend class OMXPlayerAudio;
-#endif
 };
diff --git a/xbmc/cores/omxplayer/CMakeLists.txt b/xbmc/cores/omxplayer/CMakeLists.txt
index 9792272e04ec..038274bf719e 100644
--- a/xbmc/cores/omxplayer/CMakeLists.txt
+++ b/xbmc/cores/omxplayer/CMakeLists.txt
@@ -1,18 +1,6 @@
-set(SOURCES OMXAudio.cpp
-            OMXAudioCodecOMX.cpp
-            OMXHelper.cpp
-            OMXImage.cpp
-            OMXPlayerAudio.cpp
-            OMXPlayerVideo.cpp
-            OMXVideo.cpp)
+set(SOURCES OMXImage.cpp)
 
-set(HEADERS OMXAudio.h
-            OMXAudioCodecOMX.h
-            OMXHelper.h
-            OMXImage.h
-            OMXPlayerAudio.h
-            OMXPlayerVideo.h
-            OMXVideo.h)
+set(HEADERS OMXImage.h)
 
 core_add_library(omxplayer)
 target_compile_definitions(${CORE_LIBRARY} PRIVATE -D__STDC_FORMAT_MACROS)
diff --git a/xbmc/cores/omxplayer/OMXAudio.cpp b/xbmc/cores/omxplayer/OMXAudio.cpp
deleted file mode 100644
index ec1462fb10de..000000000000
--- a/xbmc/cores/omxplayer/OMXAudio.cpp
+++ /dev/null
@@ -1,1531 +0,0 @@
-/*
- *  Copyright (c) 2002 d7o3g4q and RUNTiME
- *      Portions Copyright (c) by the authors of ffmpeg and xvid
- *  Copyright (C) 2012-2018 Team Kodi
- *  This file is part of Kodi - https://kodi.tv
- *
- *  SPDX-License-Identifier: GPL-2.0-or-later
- *  See LICENSES/README.md for more information.
- */
-
-#include "OMXAudio.h"
-#include "Application.h"
-#include "ServiceBroker.h"
-#include "utils/log.h"
-#include "platform/linux/RBP.h"
-
-#define CLASSNAME "COMXAudio"
-
-#include "platform/linux/XMemUtils.h"
-
-#include "settings/AdvancedSettings.h"
-#include "settings/MediaSettings.h"
-#include "settings/Settings.h"
-#include "settings/SettingsComponent.h"
-#include "guilib/LocalizeStrings.h"
-#include "cores/AudioEngine/Interfaces/AE.h"
-#include "cores/VideoPlayer/Interface/Addon/TimingConstants.h"
-#include "Util.h"
-#include <algorithm>
-#include <cassert>
-
-extern "C" {
-#include <libavutil/crc.h>
-#include <libavutil/channel_layout.h>
-#include <libavutil/opt.h>
-#include <libswresample/swresample.h>
-}
-
-// the size of the audio_render output port buffers
-#define AUDIO_DECODE_OUTPUT_BUFFER (32*1024)
-static const char rounded_up_channels_shift[] = {0,0,1,2,2,3,3,3,3};
-
-static const GUID KSDATAFORMAT_SUBTYPE_PCM = {
-  WAVE_FORMAT_PCM,
-  0x0000, 0x0010,
-  {0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71}
-};
-
-//////////////////////////////////////////////////////////////////////
-// Construction/Destruction
-//////////////////////////////////////////////////////////////////////
-//***********************************************************************************************
-COMXAudio::COMXAudio(CProcessInfo &processInfo) :
-  m_Initialized     (false  ),
-  m_CurrentVolume   (0      ),
-  m_Mute            (false  ),
-  m_drc             (0      ),
-  m_Passthrough     (false  ),
-  m_BytesPerSec     (0      ),
-  m_InputBytesPerSec(0      ),
-  m_BufferLen       (0      ),
-  m_ChunkLen        (0      ),
-  m_InputChannels   (0      ),
-  m_OutputChannels  (0      ),
-  m_BitsPerSample   (0      ),
-  m_maxLevel        (0.0f   ),
-  m_amplification   (1.0f   ),
-  m_attenuation     (1.0f   ),
-  m_submitted       (0.0f   ),
-  m_omx_clock       (NULL   ),
-  m_av_clock        (NULL   ),
-  m_settings_changed(false  ),
-  m_setStartTime    (false  ),
-  m_SampleRate      (0      ),
-  m_eEncoding       (OMX_AUDIO_CodingPCM),
-  m_extradata       (NULL   ),
-  m_extrasize       (0      ),
-  m_last_pts        (DVD_NOPTS_VALUE),
-  m_submitted_eos   (false  ),
-  m_failed_eos      (false  ),
-  m_output          (AESINKPI_UNKNOWN),
-  m_processInfo(processInfo)
-{
-  // magic value used when omxplayer is playing - want sink to be disabled
-  AEAudioFormat m_format;
-  m_format.m_dataFormat = AE_FMT_RAW;
-  m_format.m_streamInfo.m_type = CAEStreamInfo::STREAM_TYPE_AC3;
-  m_format.m_streamInfo.m_sampleRate = 16000;
-  m_format.m_streamInfo.m_channels = 2;
-  m_format.m_sampleRate = 16000;
-  m_format.m_frameSize = 1;
-  m_pAudioStream = CServiceBroker::GetActiveAE()->MakeStream(m_format);
-}
-
-COMXAudio::~COMXAudio()
-{
-  Deinitialize();
-
-  if (m_pAudioStream)
-    CServiceBroker::GetActiveAE()->FreeStream(m_pAudioStream, true);
-}
-
-bool COMXAudio::PortSettingsChanged()
-{
-  CSingleLock lock (m_critSection);
-  OMX_ERRORTYPE omx_err   = OMX_ErrorNone;
-
-  if (m_settings_changed)
-  {
-    m_omx_decoder.DisablePort(m_omx_decoder.GetOutputPort(), true);
-    m_omx_decoder.EnablePort(m_omx_decoder.GetOutputPort(), true);
-    return true;
-  }
-
-  if(!m_Passthrough)
-  {
-    if(!m_omx_mixer.Initialize("OMX.broadcom.audio_mixer", OMX_IndexParamAudioInit))
-      return false;
-  }
-  if(m_output == AESINKPI_BOTH)
-  {
-    if(!m_omx_splitter.Initialize("OMX.broadcom.audio_splitter", OMX_IndexParamAudioInit))
-      return false;
-  }
-  if (m_output == AESINKPI_BOTH || m_output == AESINKPI_ANALOGUE)
-  {
-    if(!m_omx_render_analog.Initialize("OMX.broadcom.audio_render", OMX_IndexParamAudioInit))
-      return false;
-  }
-  if (m_output == AESINKPI_BOTH || m_output != AESINKPI_ANALOGUE)
-  {
-    if(!m_omx_render_hdmi.Initialize("OMX.broadcom.audio_render", OMX_IndexParamAudioInit))
-      return false;
-  }
-
-  SetDynamicRangeCompression((long)(m_processInfo.GetVideoSettings().m_VolumeAmplification * 100));
-  UpdateAttenuation();
-
-  if( m_omx_mixer.IsInitialized() )
-  {
-    /* setup mixer output */
-    OMX_INIT_STRUCTURE(m_pcm_output);
-    m_pcm_output.nPortIndex = m_omx_decoder.GetOutputPort();
-    omx_err = m_omx_decoder.GetParameter(OMX_IndexParamAudioPcm, &m_pcm_output);
-    if(omx_err != OMX_ErrorNone)
-    {
-      CLog::Log(LOGERROR, "%s::%s - error m_omx_decoder GetParameter omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
-      return false;
-    }
-
-    memcpy(m_pcm_output.eChannelMapping, m_output_channels, sizeof(m_output_channels));
-    // round up to power of 2
-    m_pcm_output.nChannels = m_OutputChannels > 4 ? 8 : m_OutputChannels > 2 ? 4 : m_OutputChannels;
-    /* limit samplerate (through resampling) if requested */
-    m_pcm_output.nSamplingRate = std::min(std::max((int)m_pcm_output.nSamplingRate, 8000), CServiceBroker::GetSettingsComponent()->GetSettings()->GetInt(CSettings::SETTING_AUDIOOUTPUT_SAMPLERATE));
-
-    m_pcm_output.nPortIndex = m_omx_mixer.GetOutputPort();
-    omx_err = m_omx_mixer.SetParameter(OMX_IndexParamAudioPcm, &m_pcm_output);
-    if(omx_err != OMX_ErrorNone)
-    {
-      CLog::Log(LOGERROR, "%s::%s - error m_omx_mixer SetParameter omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
-      return false;
-    }
-
-    CLog::Log(LOGDEBUG, "%s::%s - Output bps %d samplerate %d channels %d buffer size %d bytes per second %d",
-        CLASSNAME, __func__, (int)m_pcm_output.nBitPerSample, (int)m_pcm_output.nSamplingRate, (int)m_pcm_output.nChannels, m_BufferLen, m_BytesPerSec);
-    PrintPCM(&m_pcm_output, std::string("output"));
-
-    if( m_omx_splitter.IsInitialized() )
-    {
-      m_pcm_output.nPortIndex = m_omx_splitter.GetInputPort();
-      omx_err = m_omx_splitter.SetParameter(OMX_IndexParamAudioPcm, &m_pcm_output);
-      if(omx_err != OMX_ErrorNone)
-      {
-        CLog::Log(LOGERROR, "%s::%s - error m_omx_splitter SetParameter omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
-        return false;
-      }
-
-      m_pcm_output.nPortIndex = m_omx_splitter.GetOutputPort();
-      omx_err = m_omx_splitter.SetParameter(OMX_IndexParamAudioPcm, &m_pcm_output);
-      if(omx_err != OMX_ErrorNone)
-      {
-        CLog::Log(LOGERROR, "%s::%s - error m_omx_splitter SetParameter omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
-        return false;
-      }
-      m_pcm_output.nPortIndex = m_omx_splitter.GetOutputPort() + 1;
-      omx_err = m_omx_splitter.SetParameter(OMX_IndexParamAudioPcm, &m_pcm_output);
-      if(omx_err != OMX_ErrorNone)
-      {
-        CLog::Log(LOGERROR, "%s::%s - error m_omx_splitter SetParameter omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
-        return false;
-      }
-    }
-
-    if( m_omx_render_analog.IsInitialized() )
-    {
-      m_pcm_output.nPortIndex = m_omx_render_analog.GetInputPort();
-      omx_err = m_omx_render_analog.SetParameter(OMX_IndexParamAudioPcm, &m_pcm_output);
-      if(omx_err != OMX_ErrorNone)
-      {
-        CLog::Log(LOGERROR, "%s::%s - error m_omx_render_analog SetParameter omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
-        return false;
-      }
-    }
-
-    if( m_omx_render_hdmi.IsInitialized() )
-    {
-      m_pcm_output.nPortIndex = m_omx_render_hdmi.GetInputPort();
-      omx_err = m_omx_render_hdmi.SetParameter(OMX_IndexParamAudioPcm, &m_pcm_output);
-      if(omx_err != OMX_ErrorNone)
-      {
-        CLog::Log(LOGERROR, "%s::%s - error m_omx_render_hdmi SetParameter omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
-        return false;
-      }
-    }
-  }
-  if( m_omx_render_analog.IsInitialized() )
-  {
-    m_omx_tunnel_clock_analog.Initialize(m_omx_clock, m_omx_clock->GetInputPort(),
-      &m_omx_render_analog, m_omx_render_analog.GetInputPort()+1);
-
-    omx_err = m_omx_tunnel_clock_analog.Establish();
-    if(omx_err != OMX_ErrorNone)
-    {
-      CLog::Log(LOGERROR, "%s::%s - m_omx_tunnel_clock_analog.Establish omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
-      return false;
-    }
-    m_omx_render_analog.ResetEos();
-  }
-  if( m_omx_render_hdmi.IsInitialized() )
-  {
-    m_omx_tunnel_clock_hdmi.Initialize(m_omx_clock, m_omx_clock->GetInputPort() + (m_omx_render_analog.IsInitialized() ? 2 : 0),
-      &m_omx_render_hdmi, m_omx_render_hdmi.GetInputPort()+1);
-
-    omx_err = m_omx_tunnel_clock_hdmi.Establish();
-    if(omx_err != OMX_ErrorNone)
-    {
-      CLog::Log(LOGERROR, "%s::%s - m_omx_tunnel_clock_hdmi.Establish omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
-      return false;
-    }
-    m_omx_render_hdmi.ResetEos();
-  }
-
-  if( m_omx_render_analog.IsInitialized() )
-  {
-    // By default audio_render is the clock master, and if output samples don't fit the timestamps, it will speed up/slow down the clock.
-    // This tends to be better for maintaining audio sync and avoiding audio glitches, but can affect video/display sync
-    if(CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_VIDEOPLAYER_USEDISPLAYASCLOCK) || m_output == AESINKPI_BOTH)
-    {
-      OMX_CONFIG_BOOLEANTYPE configBool;
-      OMX_INIT_STRUCTURE(configBool);
-      configBool.bEnabled = OMX_FALSE;
-
-      omx_err = m_omx_render_analog.SetConfig(OMX_IndexConfigBrcmClockReferenceSource, &configBool);
-      if (omx_err != OMX_ErrorNone)
-         return false;
-    }
-
-    OMX_CONFIG_BRCMAUDIODESTINATIONTYPE audioDest;
-    OMX_INIT_STRUCTURE(audioDest);
-    strncpy((char *)audioDest.sName, "local", strlen("local"));
-    omx_err = m_omx_render_analog.SetConfig(OMX_IndexConfigBrcmAudioDestination, &audioDest);
-    if (omx_err != OMX_ErrorNone)
-    {
-      CLog::Log(LOGERROR, "%s::%s - m_omx_render_analog.SetConfig omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
-      return false;
-    }
-  }
-
-  if( m_omx_render_hdmi.IsInitialized() )
-  {
-    // By default audio_render is the clock master, and if output samples don't fit the timestamps, it will speed up/slow down the clock.
-    // This tends to be better for maintaining audio sync and avoiding audio glitches, but can affect video/display sync
-    if(CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_VIDEOPLAYER_USEDISPLAYASCLOCK))
-    {
-      OMX_CONFIG_BOOLEANTYPE configBool;
-      OMX_INIT_STRUCTURE(configBool);
-      configBool.bEnabled = OMX_FALSE;
-
-      omx_err = m_omx_render_hdmi.SetConfig(OMX_IndexConfigBrcmClockReferenceSource, &configBool);
-      if (omx_err != OMX_ErrorNone)
-         return false;
-    }
-
-    OMX_CONFIG_BRCMAUDIODESTINATIONTYPE audioDest;
-    OMX_INIT_STRUCTURE(audioDest);
-    strncpy((char *)audioDest.sName, "hdmi", strlen("hdmi"));
-    omx_err = m_omx_render_hdmi.SetConfig(OMX_IndexConfigBrcmAudioDestination, &audioDest);
-    if (omx_err != OMX_ErrorNone)
-    {
-      CLog::Log(LOGERROR, "%s::%s - m_omx_render_hdmi.SetConfig omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
-      return false;
-    }
-  }
-
-  if( m_omx_splitter.IsInitialized() )
-  {
-    m_omx_tunnel_splitter_analog.Initialize(&m_omx_splitter, m_omx_splitter.GetOutputPort(), &m_omx_render_analog, m_omx_render_analog.GetInputPort());
-    omx_err = m_omx_tunnel_splitter_analog.Establish();
-    if(omx_err != OMX_ErrorNone)
-    {
-      CLog::Log(LOGERROR, "COMXAudio::Initialize - Error m_omx_tunnel_splitter_analog.Establish 0x%08x", omx_err);
-      return false;
-    }
-
-    m_omx_tunnel_splitter_hdmi.Initialize(&m_omx_splitter, m_omx_splitter.GetOutputPort() + 1, &m_omx_render_hdmi, m_omx_render_hdmi.GetInputPort());
-    omx_err = m_omx_tunnel_splitter_hdmi.Establish();
-    if(omx_err != OMX_ErrorNone)
-    {
-      CLog::Log(LOGERROR, "COMXAudio::Initialize - Error m_omx_tunnel_splitter_hdmi.Establish 0x%08x", omx_err);
-      return false;
-    }
-  }
-  if( m_omx_mixer.IsInitialized() )
-  {
-    m_omx_tunnel_decoder.Initialize(&m_omx_decoder, m_omx_decoder.GetOutputPort(), &m_omx_mixer, m_omx_mixer.GetInputPort());
-    if( m_omx_splitter.IsInitialized() )
-    {
-      m_omx_tunnel_mixer.Initialize(&m_omx_mixer, m_omx_mixer.GetOutputPort(), &m_omx_splitter, m_omx_splitter.GetInputPort());
-    }
-    else
-    {
-      if( m_omx_render_analog.IsInitialized() )
-      {
-        m_omx_tunnel_mixer.Initialize(&m_omx_mixer, m_omx_mixer.GetOutputPort(), &m_omx_render_analog, m_omx_render_analog.GetInputPort());
-      }
-      if( m_omx_render_hdmi.IsInitialized() )
-      {
-        m_omx_tunnel_mixer.Initialize(&m_omx_mixer, m_omx_mixer.GetOutputPort(), &m_omx_render_hdmi, m_omx_render_hdmi.GetInputPort());
-      }
-    }
-    CLog::Log(LOGDEBUG, "%s::%s - bits:%d mode:%d channels:%d srate:%d nopassthrough", CLASSNAME, __func__,
-            (int)m_pcm_input.nBitPerSample, m_pcm_input.ePCMMode, (int)m_pcm_input.nChannels, (int)m_pcm_input.nSamplingRate);
-  }
-  else
-  {
-    if( m_omx_render_analog.IsInitialized() )
-    {
-      m_omx_tunnel_decoder.Initialize(&m_omx_decoder, m_omx_decoder.GetOutputPort(), &m_omx_render_analog, m_omx_render_analog.GetInputPort());
-    }
-    else if( m_omx_render_hdmi.IsInitialized() )
-    {
-      m_omx_tunnel_decoder.Initialize(&m_omx_decoder, m_omx_decoder.GetOutputPort(), &m_omx_render_hdmi, m_omx_render_hdmi.GetInputPort());
-    }
-    CLog::Log(LOGDEBUG, "%s::%s - bits:%d mode:%d channels:%d srate:%d passthrough", CLASSNAME, __func__,
-            0, 0, 0, 0);
-  }
-
-  omx_err = m_omx_tunnel_decoder.Establish();
-  if(omx_err != OMX_ErrorNone)
-  {
-    CLog::Log(LOGERROR, "%s::%s - m_omx_tunnel_decoder.Establish omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
-    return false;
-  }
-
-  if( m_omx_mixer.IsInitialized() )
-  {
-    omx_err = m_omx_mixer.SetStateForComponent(OMX_StateExecuting);
-    if(omx_err != OMX_ErrorNone) {
-      CLog::Log(LOGERROR, "%s::%s - m_omx_mixer OMX_StateExecuting omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
-      return false;
-    }
-  }
-
-  if( m_omx_mixer.IsInitialized() )
-  {
-    omx_err = m_omx_tunnel_mixer.Establish();
-    if(omx_err != OMX_ErrorNone)
-    {
-      CLog::Log(LOGERROR, "%s::%s - m_omx_tunnel_decoder.Establish omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
-      return false;
-    }
-  }
-
-  if( m_omx_splitter.IsInitialized() )
-  {
-    omx_err = m_omx_splitter.SetStateForComponent(OMX_StateExecuting);
-    if(omx_err != OMX_ErrorNone)
-    {
-      CLog::Log(LOGERROR, "%s::%s - m_omx_splitter OMX_StateExecuting 0x%08x", CLASSNAME, __func__, omx_err);
-     return false;
-    }
-  }
-  if( m_omx_render_analog.IsInitialized() )
-  {
-    omx_err = m_omx_render_analog.SetStateForComponent(OMX_StateExecuting);
-    if(omx_err != OMX_ErrorNone)
-    {
-      CLog::Log(LOGERROR, "%s::%s - m_omx_render_analog OMX_StateExecuting omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
-      return false;
-    }
-  }
-  if( m_omx_render_hdmi.IsInitialized() )
-  {
-    omx_err = m_omx_render_hdmi.SetStateForComponent(OMX_StateExecuting);
-    if(omx_err != OMX_ErrorNone)
-    {
-      CLog::Log(LOGERROR, "%s::%s - m_omx_render_hdmi OMX_StateExecuting omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
-      return false;
-    }
-  }
-
-  m_settings_changed = true;
-  return true;
-}
-
-static uint64_t GetAVChannelLayout(CAEChannelInfo &info)
-{
-  #ifdef DEBUG_VERBOSE
-  CLog::Log(LOGINFO, "%s::%s", CLASSNAME, __func__);
-  #endif
-  uint64_t channelLayout = 0;
-  if (info.HasChannel(AE_CH_FL))   channelLayout |= AV_CH_FRONT_LEFT;
-  if (info.HasChannel(AE_CH_FR))   channelLayout |= AV_CH_FRONT_RIGHT;
-  if (info.HasChannel(AE_CH_FC))   channelLayout |= AV_CH_FRONT_CENTER;
-  if (info.HasChannel(AE_CH_LFE))  channelLayout |= AV_CH_LOW_FREQUENCY;
-  if (info.HasChannel(AE_CH_BL))   channelLayout |= AV_CH_BACK_LEFT;
-  if (info.HasChannel(AE_CH_BR))   channelLayout |= AV_CH_BACK_RIGHT;
-  if (info.HasChannel(AE_CH_FLOC)) channelLayout |= AV_CH_FRONT_LEFT_OF_CENTER;
-  if (info.HasChannel(AE_CH_FROC)) channelLayout |= AV_CH_FRONT_RIGHT_OF_CENTER;
-  if (info.HasChannel(AE_CH_BC))   channelLayout |= AV_CH_BACK_CENTER;
-  if (info.HasChannel(AE_CH_SL))   channelLayout |= AV_CH_SIDE_LEFT;
-  if (info.HasChannel(AE_CH_SR))   channelLayout |= AV_CH_SIDE_RIGHT;
-  if (info.HasChannel(AE_CH_TC))   channelLayout |= AV_CH_TOP_CENTER;
-  if (info.HasChannel(AE_CH_TFL))  channelLayout |= AV_CH_TOP_FRONT_LEFT;
-  if (info.HasChannel(AE_CH_TFC))  channelLayout |= AV_CH_TOP_FRONT_CENTER;
-  if (info.HasChannel(AE_CH_TFR))  channelLayout |= AV_CH_TOP_FRONT_RIGHT;
-  if (info.HasChannel(AE_CH_TBL))   channelLayout |= AV_CH_TOP_BACK_LEFT;
-  if (info.HasChannel(AE_CH_TBC))   channelLayout |= AV_CH_TOP_BACK_CENTER;
-  if (info.HasChannel(AE_CH_TBR))   channelLayout |= AV_CH_TOP_BACK_RIGHT;
-
-  return channelLayout;
-}
-
-static void SetAudioProps(bool stream_channels, uint32_t channel_map)
-{
-  char command[80], response[80];
-
-  sprintf(command, "hdmi_stream_channels %d", stream_channels ? 1 : 0);
-  vc_gencmd(response, sizeof response, command);
-
-  sprintf(command, "hdmi_channel_map 0x%08x", channel_map);
-  vc_gencmd(response, sizeof response, command);
-
-  CLog::Log(LOGDEBUG, "%s:%s hdmi_stream_channels %d hdmi_channel_map %08x", CLASSNAME, __func__, stream_channels, channel_map);
-}
-
-static uint32_t GetChannelMap(const CAEChannelInfo &channelLayout, bool passthrough)
-{
-  unsigned int channels = channelLayout.Count();
-  uint32_t channel_map = 0;
-  if (passthrough)
-    return 0;
-
-  static const unsigned char map_normal[] =
-  {
-    0, //AE_CH_RAW ,
-    1, //AE_CH_FL
-    2, //AE_CH_FR
-    4, //AE_CH_FC
-    3, //AE_CH_LFE
-    7, //AE_CH_BL
-    8, //AE_CH_BR
-    1, //AE_CH_FLOC,
-    2, //AE_CH_FROC,
-    4, //AE_CH_BC,
-    5, //AE_CH_SL
-    6, //AE_CH_SR
-  };
-  static const unsigned char map_back[] =
-  {
-    0, //AE_CH_RAW ,
-    1, //AE_CH_FL
-    2, //AE_CH_FR
-    4, //AE_CH_FC
-    3, //AE_CH_LFE
-    5, //AE_CH_BL
-    6, //AE_CH_BR
-    1, //AE_CH_FLOC,
-    2, //AE_CH_FROC,
-    4, //AE_CH_BC,
-    5, //AE_CH_SL
-    6, //AE_CH_SR
-  };
-  const unsigned char *map = map_normal;
-  // According to CEA-861-D only RL and RR are known. In case of a format having SL and SR channels
-  // but no BR BL channels, we use the wide map in order to open only the num of channels really
-  // needed.
-  if (channelLayout.HasChannel(AE_CH_BL) && !channelLayout.HasChannel(AE_CH_SL))
-    map = map_back;
-
-  for (unsigned int i = 0; i < channels; ++i)
-  {
-    AEChannel c = channelLayout[i];
-    unsigned int chan = 0;
-    if ((unsigned int)c < sizeof map_normal / sizeof *map_normal)
-      chan = map[(unsigned int)c];
-    if (chan > 0)
-      channel_map |= (chan-1) << (3*i);
-  }
-  // These numbers are from Table 28 Audio InfoFrame Data byte 4 of CEA 861
-  // and describe the speaker layout
-  static const uint8_t cea_map[] = {
-    0xff, // 0
-    0xff, // 1
-    0x00, // 2.0
-    0x02, // 3.0
-    0x08, // 4.0
-    0x0a, // 5.0
-    0xff, // 6
-    0x12, // 7.0
-    0xff, // 8
-  };
-  static const uint8_t cea_map_lfe[] = {
-    0xff, // 0
-    0xff, // 1
-    0xff, // 2
-    0x01, // 2.1
-    0x03, // 3.1
-    0x09, // 4.1
-    0x0b, // 5.1
-    0xff, // 7
-    0x13, // 7.1
-  };
-  uint8_t cea = channelLayout.HasChannel(AE_CH_LFE) ? cea_map_lfe[channels] : cea_map[channels];
-  if (cea == 0xff)
-    CLog::Log(LOGERROR, "%s::%s - Unexpected CEA mapping %d,%d", CLASSNAME, __func__, channelLayout.HasChannel(AE_CH_LFE), channels);
-
-  channel_map |= cea << 24;
-
-  return channel_map;
-}
-
-bool COMXAudio::Initialize(AEAudioFormat format, OMXClock *clock, CDVDStreamInfo &hints, CAEChannelInfo channelMap, bool bUsePassthrough)
-{
-  CSingleLock lock (m_critSection);
-  OMX_ERRORTYPE omx_err;
-
-  Deinitialize();
-
-  m_Passthrough = bUsePassthrough;
-
-  m_InputChannels = channelMap.Count();
-
-  if(m_InputChannels == 0)
-    return false;
-
-  if(hints.samplerate == 0)
-    return false;
-
-  m_av_clock = clock;
-
-  if(!m_av_clock)
-    return false;
-
-  SetCodingType(format);
-
-  const std::string audioDevice = CServiceBroker::GetSettingsComponent()->GetSettings()->GetString(CSettings::SETTING_AUDIOOUTPUT_AUDIODEVICE);
-  if (m_Passthrough || audioDevice == "PI:HDMI")
-    m_output = AESINKPI_HDMI;
-  else if (audioDevice == "PI:Analogue")
-    m_output = AESINKPI_ANALOGUE;
-  else if (audioDevice == "PI:Both")
-    m_output = AESINKPI_BOTH;
-  else if (audioDevice == "Default")
-    m_output = AESINKPI_HDMI;
-  else assert(0);
-
-  if(hints.extrasize > 0 && hints.extradata != NULL)
-  {
-    m_extrasize = hints.extrasize;
-    m_extradata = (uint8_t *)malloc(m_extrasize);
-    memcpy(m_extradata, hints.extradata, hints.extrasize);
-  }
-
-  m_omx_clock   = m_av_clock->GetOMXClock();
-
-  m_drc         = 0;
-
-  memset(m_input_channels, 0x0, sizeof(m_input_channels));
-  memset(m_output_channels, 0x0, sizeof(m_output_channels));
-  memset(&m_wave_header, 0x0, sizeof(m_wave_header));
-
-  m_wave_header.Format.nChannels  = 2;
-  m_wave_header.dwChannelMask = 3; // SPEAKER_FRONT_LEFT | SPEAKER_FRONT_RIGHT;
-
-  if (!m_Passthrough)
-  {
-    const std::shared_ptr<CSettings> settings = CServiceBroker::GetSettingsComponent()->GetSettings();
-    bool upmix = settings->GetBool(CSettings::SETTING_AUDIOOUTPUT_STEREOUPMIX);
-    bool normalize = !settings->GetBool(CSettings::SETTING_AUDIOOUTPUT_MAINTAINORIGINALVOLUME);
-    void *remapLayout = NULL;
-
-    CAEChannelInfo stdLayout = (enum AEStdChLayout)settings->GetInt(CSettings::SETTING_AUDIOOUTPUT_CHANNELS);
-
-    // ignore layout setting for analogue
-    if (m_output == AESINKPI_ANALOGUE || m_output == AESINKPI_BOTH)
-      stdLayout = AE_CH_LAYOUT_2_0;
-
-    CAEChannelInfo resolvedMap = channelMap;
-    resolvedMap.ResolveChannels(stdLayout);
-
-    if (settings->GetInt(CSettings::SETTING_AUDIOOUTPUT_CONFIG) == AE_CONFIG_FIXED || (upmix && channelMap.Count() <= 2))
-      resolvedMap = stdLayout;
-
-    uint64_t m_dst_chan_layout = GetAVChannelLayout(resolvedMap);
-    uint64_t m_src_chan_layout = GetAVChannelLayout(channelMap);
-
-    m_InputChannels = channelMap.Count();
-    m_OutputChannels = resolvedMap.Count();
-
-    int m_dst_channels = m_OutputChannels;
-    int m_src_channels = m_InputChannels;
-    SetAudioProps(m_Passthrough, GetChannelMap(resolvedMap, m_Passthrough));
-
-    CLog::Log(LOGINFO, "%s::%s remap:%p chan:%d->%d norm:%d upmix:%d %llx:%llx", CLASSNAME, __func__, remapLayout, m_src_channels, m_dst_channels, normalize, upmix, m_src_chan_layout, m_dst_chan_layout);
-
-    // this code is just uses ffmpeg to produce the 8x8 mixing matrix
-    // dummy sample rate and format, as we only care about channel mapping
-    SwrContext *m_pContext = swr_alloc_set_opts(NULL, m_dst_chan_layout, AV_SAMPLE_FMT_FLT, 48000,
-                                                          m_src_chan_layout, AV_SAMPLE_FMT_FLT, 48000, 0, NULL);
-    if(!m_pContext)
-    {
-      CLog::Log(LOGERROR, "COMXAudio::Init - create context failed");
-      return false;
-    }
-    // tell resampler to clamp float values
-    // not required for sink stage (remapLayout == true)
-    if (!remapLayout && normalize)
-    {
-       av_opt_set_double(m_pContext, "rematrix_maxval", 1.0, 0);
-    }
-
-    // stereo upmix
-    if (upmix && m_src_channels == 2 && m_dst_channels > 2)
-    {
-      double m_rematrix[AE_CH_MAX][AE_CH_MAX];
-      memset(m_rematrix, 0, sizeof(m_rematrix));
-      for (int out=0; out<m_dst_channels; out++)
-      {
-        uint64_t out_chan = av_channel_layout_extract_channel(m_dst_chan_layout, out);
-        switch(out_chan)
-        {
-          case AV_CH_FRONT_LEFT:
-          case AV_CH_BACK_LEFT:
-          case AV_CH_SIDE_LEFT:
-            m_rematrix[out][0] = 1.0;
-            break;
-          case AV_CH_FRONT_RIGHT:
-          case AV_CH_BACK_RIGHT:
-          case AV_CH_SIDE_RIGHT:
-            m_rematrix[out][1] = 1.0;
-            break;
-          case AV_CH_FRONT_CENTER:
-            m_rematrix[out][0] = 0.5;
-            m_rematrix[out][1] = 0.5;
-            break;
-          case AV_CH_LOW_FREQUENCY:
-            m_rematrix[out][0] = 0.5;
-            m_rematrix[out][1] = 0.5;
-            break;
-          default:
-            break;
-        }
-      }
-
-      if (swr_set_matrix(m_pContext, (const double*)m_rematrix, AE_CH_MAX) < 0)
-      {
-        CLog::Log(LOGERROR, "COMXAudio::Init - setting channel matrix failed");
-        return false;
-      }
-    }
-
-    if (swr_init(m_pContext) < 0)
-    {
-      CLog::Log(LOGERROR, "COMXAudio::Init - init resampler failed");
-      return false;
-    }
-
-    const int samples = 8;
-    uint8_t *output, *input;
-    av_samples_alloc(&output, NULL, m_dst_channels, samples, AV_SAMPLE_FMT_FLT, 1);
-    av_samples_alloc(&input , NULL, m_src_channels, samples, AV_SAMPLE_FMT_FLT, 1);
-
-    // Produce "identity" samples
-    float *f = (float *)input;
-    for (int j=0; j < samples; j++)
-      for (int i=0; i < m_src_channels; i++)
-        *f++ = i == j ? 1.0f : 0.0f;
-
-    int ret = swr_convert(m_pContext, &output, samples, (const uint8_t **)&input, samples);
-    if (ret < 0)
-      CLog::Log(LOGERROR, "COMXAudio::Resample - resample failed");
-
-    f = (float *)output;
-    for (int j=0; j < 8; j++)
-    {
-      for (int i=0; i < m_dst_channels; i++)
-        m_downmix_matrix[8*i+j] = *f++;
-      for (int i=m_dst_channels; i < 8; i++)
-        m_downmix_matrix[8*i+j] = 0.0f;
-    }
-
-    for (int j=0; j < 8; j++)
-    {
-      char s[128] = {}, *t=s;
-      for (int i=0; i < 8; i++)
-        t += sprintf(t, "% 6.2f ", m_downmix_matrix[j*8+i]);
-      CLog::Log(LOGINFO, "%s::%s  %s", CLASSNAME, __func__, s);
-    }
-    av_freep(&input);
-    av_freep(&output);
-    swr_free(&m_pContext);
-
-    m_wave_header.dwChannelMask = m_src_chan_layout;
-  }
-  else
-    SetAudioProps(m_Passthrough, 0);
-
-  m_SampleRate    = format.m_sampleRate;
-  m_BitsPerSample = m_Passthrough ? 16 : CAEUtil::DataFormatToBits(format.m_dataFormat);
-  m_BytesPerSec   = m_SampleRate * 2 << rounded_up_channels_shift[m_InputChannels];
-  m_BufferLen     = m_BytesPerSec * AUDIO_BUFFER_SECONDS;
-  m_InputBytesPerSec = m_SampleRate * m_BitsPerSample * m_InputChannels >> 3;
-
-  // should be big enough that common formats (e.g. 6 channel DTS) fit in a single packet.
-  // we don't mind less common formats being split (e.g. ape/wma output large frames)
-  // the audio_decode output buffer size is 32K, and typically we convert from
-  // 6 channel 32bpp float to 8 channel 16bpp in, so a full 48K input buffer will fit the output buffer
-  m_ChunkLen = AUDIO_DECODE_OUTPUT_BUFFER * (m_InputChannels * m_BitsPerSample) >> (rounded_up_channels_shift[m_InputChannels] + 4);
-
-  m_wave_header.Samples.wSamplesPerBlock    = 0;
-  m_wave_header.Format.nChannels            = m_InputChannels;
-  m_wave_header.Format.nBlockAlign          = m_InputChannels * (m_BitsPerSample >> 3);
-  // 0x8000 is custom format interpreted by GPU as WAVE_FORMAT_IEEE_FLOAT_PLANAR
-  m_wave_header.Format.wFormatTag           = m_BitsPerSample == 32 ? 0x8000 : WAVE_FORMAT_PCM;
-  m_wave_header.Format.nSamplesPerSec       = format.m_sampleRate;
-  m_wave_header.Format.nAvgBytesPerSec      = m_BytesPerSec;
-  m_wave_header.Format.wBitsPerSample       = m_BitsPerSample;
-  m_wave_header.Samples.wValidBitsPerSample = m_BitsPerSample;
-  m_wave_header.Format.cbSize               = 0;
-  m_wave_header.SubFormat                   = KSDATAFORMAT_SUBTYPE_PCM;
-
-  OMX_INIT_STRUCTURE(m_pcm_input);
-  memcpy(m_pcm_input.eChannelMapping, m_input_channels, sizeof(m_input_channels));
-  m_pcm_input.eNumData              = OMX_NumericalDataSigned;
-  m_pcm_input.eEndian               = OMX_EndianLittle;
-  m_pcm_input.bInterleaved          = OMX_TRUE;
-  m_pcm_input.nBitPerSample         = m_BitsPerSample;
-  m_pcm_input.ePCMMode              = OMX_AUDIO_PCMModeLinear;
-  m_pcm_input.nChannels             = m_InputChannels;
-  m_pcm_input.nSamplingRate         = format.m_sampleRate;
-
-  if(!m_omx_decoder.Initialize("OMX.broadcom.audio_decode", OMX_IndexParamAudioInit))
-    return false;
-
-  OMX_CONFIG_BOOLEANTYPE boolType;
-  OMX_INIT_STRUCTURE(boolType);
-  if(m_Passthrough)
-    boolType.bEnabled = OMX_TRUE;
-  else
-    boolType.bEnabled = OMX_FALSE;
-  omx_err = m_omx_decoder.SetParameter(OMX_IndexParamBrcmDecoderPassThrough, &boolType);
-  if(omx_err != OMX_ErrorNone)
-  {
-    CLog::Log(LOGERROR, "COMXAudio::Initialize - Error OMX_IndexParamBrcmDecoderPassThrough 0x%08x", omx_err);
-    return false;
-  }
-
-  // set up the number/size of buffers for decoder input
-  OMX_PARAM_PORTDEFINITIONTYPE port_param;
-  OMX_INIT_STRUCTURE(port_param);
-  port_param.nPortIndex = m_omx_decoder.GetInputPort();
-
-  omx_err = m_omx_decoder.GetParameter(OMX_IndexParamPortDefinition, &port_param);
-  if(omx_err != OMX_ErrorNone)
-  {
-    CLog::Log(LOGERROR, "COMXAudio::Initialize error get OMX_IndexParamPortDefinition (input) omx_err(0x%08x)\n", omx_err);
-    return false;
-  }
-
-  port_param.format.audio.eEncoding = m_eEncoding;
-
-  port_param.nBufferSize = m_ChunkLen;
-  port_param.nBufferCountActual = std::max((unsigned int)port_param.nBufferCountMin, 16U);
-
-  omx_err = m_omx_decoder.SetParameter(OMX_IndexParamPortDefinition, &port_param);
-  if(omx_err != OMX_ErrorNone)
-  {
-    CLog::Log(LOGERROR, "COMXAudio::Initialize error set OMX_IndexParamPortDefinition (input) omx_err(0x%08x)\n", omx_err);
-    return false;
-  }
-
-  // set up the number/size of buffers for decoder output
-  OMX_INIT_STRUCTURE(port_param);
-  port_param.nPortIndex = m_omx_decoder.GetOutputPort();
-
-  omx_err = m_omx_decoder.GetParameter(OMX_IndexParamPortDefinition, &port_param);
-  if(omx_err != OMX_ErrorNone)
-  {
-    CLog::Log(LOGERROR, "COMXAudio::Initialize error get OMX_IndexParamPortDefinition (output) omx_err(0x%08x)\n", omx_err);
-    return false;
-  }
-
-  port_param.nBufferCountActual = std::max((unsigned int)port_param.nBufferCountMin, m_BufferLen / port_param.nBufferSize);
-
-  omx_err = m_omx_decoder.SetParameter(OMX_IndexParamPortDefinition, &port_param);
-  if(omx_err != OMX_ErrorNone)
-  {
-    CLog::Log(LOGERROR, "COMXAudio::Initialize error set OMX_IndexParamPortDefinition (output) omx_err(0x%08x)\n", omx_err);
-    return false;
-  }
-
-  {
-    OMX_AUDIO_PARAM_PORTFORMATTYPE formatType;
-    OMX_INIT_STRUCTURE(formatType);
-    formatType.nPortIndex = m_omx_decoder.GetInputPort();
-
-    formatType.eEncoding = m_eEncoding;
-
-    omx_err = m_omx_decoder.SetParameter(OMX_IndexParamAudioPortFormat, &formatType);
-    if(omx_err != OMX_ErrorNone)
-    {
-      CLog::Log(LOGERROR, "COMXAudio::Initialize error OMX_IndexParamAudioPortFormat omx_err(0x%08x)\n", omx_err);
-      return false;
-    }
-  }
-
-  omx_err = m_omx_decoder.AllocInputBuffers();
-  if(omx_err != OMX_ErrorNone)
-  {
-    CLog::Log(LOGERROR, "COMXAudio::Initialize - Error alloc buffers 0x%08x", omx_err);
-    return false;
-  }
-
-  omx_err = m_omx_decoder.SetStateForComponent(OMX_StateExecuting);
-  if(omx_err != OMX_ErrorNone) {
-    CLog::Log(LOGERROR, "COMXAudio::Initialize - Error setting OMX_StateExecuting 0x%08x", omx_err);
-    return false;
-  }
-
-
-  if(m_eEncoding == OMX_AUDIO_CodingPCM)
-  {
-    OMX_BUFFERHEADERTYPE *omx_buffer = m_omx_decoder.GetInputBuffer();
-    if(omx_buffer == NULL)
-    {
-      CLog::Log(LOGERROR, "COMXAudio::Initialize - buffer error 0x%08x", omx_err);
-      return false;
-    }
-
-    omx_buffer->nOffset = 0;
-    omx_buffer->nFilledLen = std::min(sizeof(m_wave_header), omx_buffer->nAllocLen);
-
-    memset((unsigned char *)omx_buffer->pBuffer, 0x0, omx_buffer->nAllocLen);
-    memcpy((unsigned char *)omx_buffer->pBuffer, &m_wave_header, omx_buffer->nFilledLen);
-    omx_buffer->nFlags = OMX_BUFFERFLAG_CODECCONFIG | OMX_BUFFERFLAG_ENDOFFRAME;
-
-    omx_err = m_omx_decoder.EmptyThisBuffer(omx_buffer);
-    if (omx_err != OMX_ErrorNone)
-    {
-      CLog::Log(LOGERROR, "%s::%s - OMX_EmptyThisBuffer() failed with result(0x%x)\n", CLASSNAME, __func__, omx_err);
-      m_omx_decoder.DecoderEmptyBufferDone(m_omx_decoder.GetComponent(), omx_buffer);
-      return false;
-    }
-  }
-
-  /* return on decoder error so m_Initialized stays false */
-  if(m_omx_decoder.BadState())
-    return false;
-
-  m_Initialized   = true;
-  m_settings_changed = false;
-  m_setStartTime = true;
-  m_submitted_eos = false;
-  m_failed_eos = false;
-  m_last_pts      = DVD_NOPTS_VALUE;
-  m_submitted     = 0.0f;
-  m_maxLevel      = 0.0f;
-
-  CLog::Log(LOGDEBUG, "COMXAudio::Initialize Input bps %d samplerate %d channels %d buffer size %d bytes per second %d",
-      (int)m_pcm_input.nBitPerSample, (int)m_pcm_input.nSamplingRate, (int)m_pcm_input.nChannels, m_BufferLen, m_InputBytesPerSec);
-  PrintPCM(&m_pcm_input, std::string("input"));
-  CLog::Log(LOGDEBUG, "COMXAudio::Initialize device passthrough %d", m_Passthrough);
-
-  return true;
-}
-
-//***********************************************************************************************
-bool COMXAudio::Deinitialize()
-{
-  CSingleLock lock (m_critSection);
-
-  if ( m_omx_tunnel_clock_analog.IsInitialized() )
-    m_omx_tunnel_clock_analog.Deestablish();
-  if ( m_omx_tunnel_clock_hdmi.IsInitialized() )
-    m_omx_tunnel_clock_hdmi.Deestablish();
-
-  // ignore expected errors on teardown
-  if ( m_omx_mixer.IsInitialized() )
-    m_omx_mixer.IgnoreNextError(OMX_ErrorPortUnpopulated);
-  else
-  {
-    if ( m_omx_render_hdmi.IsInitialized() )
-      m_omx_render_hdmi.IgnoreNextError(OMX_ErrorPortUnpopulated);
-    if ( m_omx_render_analog.IsInitialized() )
-      m_omx_render_analog.IgnoreNextError(OMX_ErrorPortUnpopulated);
-  }
-
-  m_omx_tunnel_decoder.Deestablish();
-  if ( m_omx_tunnel_mixer.IsInitialized() )
-    m_omx_tunnel_mixer.Deestablish();
-  if ( m_omx_tunnel_splitter_hdmi.IsInitialized() )
-    m_omx_tunnel_splitter_hdmi.Deestablish();
-  if ( m_omx_tunnel_splitter_analog.IsInitialized() )
-    m_omx_tunnel_splitter_analog.Deestablish();
-
-  m_omx_decoder.FlushInput();
-
-  m_omx_decoder.Deinitialize();
-  if ( m_omx_mixer.IsInitialized() )
-    m_omx_mixer.Deinitialize();
-  if ( m_omx_splitter.IsInitialized() )
-    m_omx_splitter.Deinitialize();
-  if ( m_omx_render_hdmi.IsInitialized() )
-    m_omx_render_hdmi.Deinitialize();
-  if ( m_omx_render_analog.IsInitialized() )
-    m_omx_render_analog.Deinitialize();
-
-  m_BytesPerSec = 0;
-  m_BufferLen   = 0;
-
-  m_omx_clock = NULL;
-  m_av_clock  = NULL;
-
-  m_Initialized = false;
-
-  if(m_extradata)
-    free(m_extradata);
-  m_extradata = NULL;
-  m_extrasize = 0;
-
-  while(!m_ampqueue.empty())
-    m_ampqueue.pop_front();
-
-  m_last_pts      = DVD_NOPTS_VALUE;
-  m_submitted     = 0.0f;
-  m_maxLevel      = 0.0f;
-
-  return true;
-}
-
-void COMXAudio::Flush()
-{
-  CSingleLock lock (m_critSection);
-  if(!m_Initialized)
-    return;
-
-  m_omx_decoder.FlushAll();
-
-  if ( m_omx_mixer.IsInitialized() )
-    m_omx_mixer.FlushAll();
-
-  if ( m_omx_splitter.IsInitialized() )
-    m_omx_splitter.FlushAll();
-
-  if ( m_omx_render_analog.IsInitialized() )
-    m_omx_render_analog.FlushAll();
-  if ( m_omx_render_hdmi.IsInitialized() )
-    m_omx_render_hdmi.FlushAll();
-
-  if ( m_omx_render_analog.IsInitialized() )
-    m_omx_render_analog.ResetEos();
-  if ( m_omx_render_hdmi.IsInitialized() )
-    m_omx_render_hdmi.ResetEos();
-
-  m_last_pts      = DVD_NOPTS_VALUE;
-  m_submitted     = 0.0f;
-  m_maxLevel      = 0.0f;
-  m_setStartTime  = true;
-}
-
-//***********************************************************************************************
-void COMXAudio::SetDynamicRangeCompression(long drc)
-{
-  CSingleLock lock (m_critSection);
-  m_amplification = powf(10.0f, (float)drc / 2000.0f);
-  if (m_settings_changed)
-    UpdateAttenuation();
-}
-
-//***********************************************************************************************
-void COMXAudio::SetMute(bool bMute)
-{
-  CSingleLock lock (m_critSection);
-  m_Mute = bMute;
-  if (m_settings_changed)
-    UpdateAttenuation();
-}
-
-//***********************************************************************************************
-void COMXAudio::SetVolume(float fVolume)
-{
-  CSingleLock lock (m_critSection);
-  m_CurrentVolume = fVolume;
-  if (m_settings_changed)
-    UpdateAttenuation();
-}
-
-//***********************************************************************************************
-bool COMXAudio::ApplyVolume(void)
-{
-  CSingleLock lock (m_critSection);
-
-  if (!m_Initialized || m_Passthrough)
-    return false;
-
-  float fVolume = m_Mute ? VOLUME_MINIMUM : m_CurrentVolume;
-  // need to convert a log scale of 0.0=-60dB, 1.0=0dB to a linear scale (0.0=silence, 1.0=full)
-  fVolume = CAEUtil::GainToScale(CAEUtil::PercentToGain(fVolume));
-
-  // the analogue volume is too quiet for some. Allow use of an advancedsetting to boost this (at risk of distortion) (deprecated)
-  double gain = pow(10, (CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->m_ac3Gain - 12.0f) / 20.0);
-
-  const float* coeff = m_downmix_matrix;
-
-  OMX_CONFIG_BRCMAUDIODOWNMIXCOEFFICIENTS8x8 mix;
-  OMX_INIT_STRUCTURE(mix);
-  OMX_ERRORTYPE omx_err;
-
-  assert(ARRAY_SIZE(mix.coeff) == 64);
-
-  if (m_amplification != 1.0)
-  {
-    // reduce scaling so overflow can be seen
-    for(size_t i = 0; i < 8*8; ++i)
-      mix.coeff[i] = static_cast<unsigned int>(0x10000 * (coeff[i] * gain * 0.01f));
-
-    mix.nPortIndex = m_omx_decoder.GetInputPort();
-    omx_err = m_omx_decoder.SetConfig(OMX_IndexConfigBrcmAudioDownmixCoefficients8x8, &mix);
-    if(omx_err != OMX_ErrorNone)
-    {
-      CLog::Log(LOGERROR, "%s::%s - error setting decoder OMX_IndexConfigBrcmAudioDownmixCoefficients, error 0x%08x\n",
-                CLASSNAME, __func__, omx_err);
-      return false;
-    }
-  }
-  for(size_t i = 0; i < 8*8; ++i)
-    mix.coeff[i] = static_cast<unsigned int>(0x10000 * (coeff[i] * gain * fVolume * m_amplification * m_attenuation));
-
-  mix.nPortIndex = m_omx_mixer.GetInputPort();
-  omx_err = m_omx_mixer.SetConfig(OMX_IndexConfigBrcmAudioDownmixCoefficients8x8, &mix);
-  if(omx_err != OMX_ErrorNone)
-  {
-    CLog::Log(LOGERROR, "%s::%s - error setting mixer OMX_IndexConfigBrcmAudioDownmixCoefficients, error 0x%08x\n",
-              CLASSNAME, __func__, omx_err);
-    return false;
-  }
-  CLog::Log(LOGINFO, "%s::%s - Volume=%.2f (* %.2f * %.2f)\n", CLASSNAME, __func__, fVolume, m_amplification, m_attenuation);
-  return true;
-}
-
-//***********************************************************************************************
-unsigned int COMXAudio::AddPackets(const void* data, unsigned int len, double dts, double pts, unsigned int frame_size, bool &settings_changed)
-{
-  CSingleLock lock (m_critSection);
-
-  if(!m_Initialized)
-  {
-    CLog::Log(LOGERROR,"COMXAudio::AddPackets - sanity failed. no valid play handle!");
-    return len;
-  }
-
-  unsigned pitch = m_Passthrough ? 1:(m_BitsPerSample >> 3) * m_InputChannels;
-  unsigned int demuxer_samples = len / pitch;
-  unsigned int demuxer_samples_sent = 0;
-  uint8_t *demuxer_content = (uint8_t *)data;
-
-  OMX_ERRORTYPE omx_err;
-
-  OMX_BUFFERHEADERTYPE *omx_buffer = NULL;
-
-  while(demuxer_samples_sent < demuxer_samples)
-  {
-    // 200ms timeout
-    omx_buffer = m_omx_decoder.GetInputBuffer(200);
-
-    if(omx_buffer == NULL)
-    {
-      CLog::Log(LOGERROR, "COMXAudio::Decode timeout\n");
-      return len;
-    }
-
-    omx_buffer->nOffset = 0;
-    omx_buffer->nFlags  = 0;
-
-    // we want audio_decode output buffer size to be no more than AUDIO_DECODE_OUTPUT_BUFFER.
-    // it will be 16-bit and rounded up to next power of 2 in channels
-    unsigned int max_buffer = AUDIO_DECODE_OUTPUT_BUFFER * (m_InputChannels * m_BitsPerSample) >> (rounded_up_channels_shift[m_InputChannels] + 4);
-
-    unsigned int remaining = demuxer_samples-demuxer_samples_sent;
-    unsigned int samples_space = std::min(max_buffer, omx_buffer->nAllocLen)/pitch;
-    unsigned int samples = std::min(remaining, samples_space);
-
-    omx_buffer->nFilledLen = samples * pitch;
-
-    unsigned int frames = frame_size ? len/frame_size:0;
-    if ((samples < demuxer_samples || frames > 1) && m_BitsPerSample==32 && !m_Passthrough)
-    {
-      const unsigned int sample_pitch   = m_BitsPerSample >> 3;
-      const unsigned int frame_samples  = frame_size / pitch;
-      const unsigned int plane_size     = frame_samples * sample_pitch;
-      const unsigned int out_plane_size = samples * sample_pitch;
-      //CLog::Log(LOGDEBUG, "%s::%s samples:%d/%d ps:%d ops:%d fs:%d pitch:%d filled:%d frames=%d", CLASSNAME, __func__, samples, demuxer_samples, plane_size, out_plane_size, frame_size, pitch, omx_buffer->nFilledLen, frames);
-      for (unsigned int sample = 0; sample < samples; )
-      {
-        unsigned int frame = (demuxer_samples_sent + sample) / frame_samples;
-        unsigned int sample_in_frame = (demuxer_samples_sent + sample) - frame * frame_samples;
-        int out_remaining = std::min(std::min(frame_samples - sample_in_frame, samples), samples-sample);
-        uint8_t *src = demuxer_content + frame*frame_size + sample_in_frame * sample_pitch;
-        uint8_t *dst = (uint8_t *)omx_buffer->pBuffer + sample * sample_pitch;
-        for (unsigned int channel = 0; channel < m_InputChannels; channel++)
-        {
-          //CLog::Log(LOGDEBUG, "%s::%s copy(%d,%d,%d) (s:%d f:%d sin:%d c:%d)", CLASSNAME, __func__, dst-(uint8_t *)omx_buffer->pBuffer, src-demuxer_content, out_remaining, sample, frame, sample_in_frame, channel);
-          memcpy(dst, src, out_remaining * sample_pitch);
-          src += plane_size;
-          dst += out_plane_size;
-        }
-        sample += out_remaining;
-      }
-    }
-    else
-    {
-       uint8_t *dst = omx_buffer->pBuffer;
-       uint8_t *src = demuxer_content + demuxer_samples_sent * pitch;
-       memcpy(dst, src, omx_buffer->nFilledLen);
-    }
-
-    uint64_t val  = (uint64_t)(pts == DVD_NOPTS_VALUE) ? 0 : pts;
-
-    if(m_setStartTime)
-    {
-      omx_buffer->nFlags = OMX_BUFFERFLAG_STARTTIME;
-      if(pts == DVD_NOPTS_VALUE)
-        omx_buffer->nFlags |= OMX_BUFFERFLAG_TIME_UNKNOWN;
-
-      m_last_pts = pts;
-
-      CLog::Log(LOGDEBUG, "COMXAudio::Decode ADec : setStartTime %f\n", (float)val / DVD_TIME_BASE);
-      m_setStartTime = false;
-    }
-    else
-    {
-      if(pts == DVD_NOPTS_VALUE)
-      {
-        omx_buffer->nFlags = OMX_BUFFERFLAG_TIME_UNKNOWN;
-        m_last_pts = pts;
-      }
-      else if (m_last_pts != pts)
-      {
-        if(pts > m_last_pts)
-          m_last_pts = pts;
-        else
-          omx_buffer->nFlags = OMX_BUFFERFLAG_TIME_UNKNOWN;
-      }
-      else if (m_last_pts == pts)
-      {
-        omx_buffer->nFlags = OMX_BUFFERFLAG_TIME_UNKNOWN;
-      }
-    }
-
-    omx_buffer->nTimeStamp = ToOMXTime(val);
-
-    demuxer_samples_sent += samples;
-
-    if(demuxer_samples_sent == demuxer_samples)
-      omx_buffer->nFlags |= OMX_BUFFERFLAG_ENDOFFRAME;
-
-    omx_err = m_omx_decoder.EmptyThisBuffer(omx_buffer);
-    if (omx_err != OMX_ErrorNone)
-    {
-      CLog::Log(LOGERROR, "%s::%s - OMX_EmptyThisBuffer() finally failed\n", CLASSNAME, __func__);
-      m_omx_decoder.DecoderEmptyBufferDone(m_omx_decoder.GetComponent(), omx_buffer);
-      return 0;
-    }
-    //CLog::Log(LOGINFO, "AudiD: dts:%.0f pts:%.0f size:%d\n", dts, pts, len);
-
-    omx_err = m_omx_decoder.WaitForEvent(OMX_EventPortSettingsChanged, 0);
-    if (omx_err == OMX_ErrorNone)
-    {
-      if(!PortSettingsChanged())
-      {
-        CLog::Log(LOGERROR, "%s::%s - error PortSettingsChanged omx_err(0x%08x)\n", CLASSNAME, __func__, omx_err);
-      }
-    }
-  }
-  m_submitted += (float)demuxer_samples / m_SampleRate;
-  if (m_amplification != 1.0)
-    UpdateAttenuation();
-  settings_changed = m_settings_changed;
-  return len;
-}
-
-void COMXAudio::UpdateAttenuation()
-{
-  // always called with m_critSection lock held
-  if (!m_Initialized || m_Passthrough)
-    return;
-
-  if (m_amplification == 1.0)
-  {
-    ApplyVolume();
-    return;
-  }
-
-  double level_pts = 0.0;
-  float level = GetMaxLevel(level_pts);
-  if (level_pts != 0.0)
-  {
-    amplitudes_t v;
-    v.level = level;
-    v.pts = level_pts;
-    m_ampqueue.push_back(v);
-  }
-  double stamp = m_av_clock->OMXMediaTime();
-  // discard too old data
-  while(!m_ampqueue.empty())
-  {
-    amplitudes_t &v = m_ampqueue.front();
-    /* we'll also consume if queue gets unexpectedly long to avoid filling memory */
-    if (v.pts == DVD_NOPTS_VALUE || v.pts < stamp || v.pts - stamp > DVD_SEC_TO_TIME(15.0))
-      m_ampqueue.pop_front();
-    else break;
-  }
-  float maxlevel = 0.0f, imminent_maxlevel = 0.0f;
-  for (int i=0; i < (int)m_ampqueue.size(); i++)
-  {
-    amplitudes_t &v = m_ampqueue[i];
-    maxlevel = std::max(maxlevel, v.level);
-    // check for maximum volume in next 200ms
-    if (v.pts != DVD_NOPTS_VALUE && v.pts < stamp + DVD_SEC_TO_TIME(0.2))
-      imminent_maxlevel = std::max(imminent_maxlevel, v.level);
-  }
-
-  if (maxlevel != 0.0)
-  {
-    float alpha_h = -1.0f/(0.025f*log10f(0.999f));
-    float alpha_r = -1.0f/(0.100f*log10f(0.900f));
-    float decay  = powf(10.0f, -1.0f / (alpha_h * CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->m_limiterHold));
-    float attack = powf(10.0f, -1.0f / (alpha_r * CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->m_limiterRelease));
-    // if we are going to clip imminently then deal with it now
-    if (imminent_maxlevel > m_maxLevel)
-      m_maxLevel = imminent_maxlevel;
-    // clip but not imminently can ramp up more slowly
-    else if (maxlevel > m_maxLevel)
-      m_maxLevel = attack * m_maxLevel + (1.0f-attack) * maxlevel;
-    // not clipping, decay more slowly
-    else
-      m_maxLevel = decay  * m_maxLevel + (1.0f-decay ) * maxlevel;
-
-    // want m_maxLevel * amp -> 1.0
-    float amp = m_amplification * m_attenuation;
-
-    // We fade in the attenuation over first couple of seconds
-    float start = std::min(std::max((m_submitted-1.0f), 0.0f), 1.0f);
-    float attenuation = std::min(1.0f, std::max(m_attenuation / (amp * m_maxLevel), 1.0f/m_amplification));
-    m_attenuation = (1.0f - start) * 1.0f/m_amplification + start * attenuation;
-  }
-  else
-  {
-    m_attenuation = 1.0f/m_amplification;
-  }
-  ApplyVolume();
-}
-
-//***********************************************************************************************
-unsigned int COMXAudio::GetSpace()
-{
-  return m_omx_decoder.GetInputBufferSpace();
-}
-
-float COMXAudio::GetDelay()
-{
-  CSingleLock lock (m_critSection);
-  double stamp = DVD_NOPTS_VALUE;
-  double ret = 0.0;
-  if (m_last_pts != DVD_NOPTS_VALUE && m_av_clock)
-    stamp = m_av_clock->OMXMediaTime();
-  // if possible the delay is current media time - time of last submitted packet
-  if (stamp != DVD_NOPTS_VALUE && stamp != 0.0)
-  {
-    ret = (m_last_pts - stamp) * (1.0 / DVD_TIME_BASE);
-  }
-  else // just measure the input fifo
-  {
-    unsigned int used = m_omx_decoder.GetInputBufferSize() - m_omx_decoder.GetInputBufferSpace();
-    ret = m_InputBytesPerSec ? (float)used / (float)m_InputBytesPerSec : 0.0f;
-  }
-  return ret;
-}
-
-float COMXAudio::GetCacheTime()
-{
-  return GetDelay();
-}
-
-float COMXAudio::GetCacheTotal()
-{
-  float audioplus_buffer = m_SampleRate ? 32.0f * 512.0f / m_SampleRate : 0.0f;
-  float input_buffer = m_InputBytesPerSec ? (float)m_omx_decoder.GetInputBufferSize() / (float)m_InputBytesPerSec : 0;
-  return AUDIO_BUFFER_SECONDS + input_buffer + audioplus_buffer;
-}
-
-//***********************************************************************************************
-unsigned int COMXAudio::GetChunkLen() const
-{
-  return m_ChunkLen;
-}
-//***********************************************************************************************
-int COMXAudio::SetPlaySpeed(int iSpeed)
-{
-  return 0;
-}
-
-unsigned int COMXAudio::GetAudioRenderingLatency() const
-{
-  CSingleLock lock (m_critSection);
-
-  if(!m_Initialized)
-    return 0;
-
-  OMX_PARAM_U32TYPE param;
-  OMX_INIT_STRUCTURE(param);
-
-  if(m_omx_render_analog.IsInitialized())
-  {
-    param.nPortIndex = m_omx_render_analog.GetInputPort();
-
-    OMX_ERRORTYPE omx_err = m_omx_render_analog.GetConfig(OMX_IndexConfigAudioRenderingLatency, &param);
-
-    if(omx_err != OMX_ErrorNone)
-    {
-      CLog::Log(LOGERROR, "%s::%s - error getting OMX_IndexConfigAudioRenderingLatency error 0x%08x\n",
-        CLASSNAME, __func__, omx_err);
-      return 0;
-    }
-  }
-  else if(m_omx_render_hdmi.IsInitialized())
-  {
-    param.nPortIndex = m_omx_render_hdmi.GetInputPort();
-
-    OMX_ERRORTYPE omx_err = m_omx_render_hdmi.GetConfig(OMX_IndexConfigAudioRenderingLatency, &param);
-
-    if(omx_err != OMX_ErrorNone)
-    {
-      CLog::Log(LOGERROR, "%s::%s - error getting OMX_IndexConfigAudioRenderingLatency error 0x%08x\n",
-        CLASSNAME, __func__, omx_err);
-      return 0;
-    }
-  }
-
-  return param.nU32;
-}
-
-float COMXAudio::GetMaxLevel(double &pts)
-{
-  CSingleLock lock (m_critSection);
-
-  if(!m_Initialized)
-    return 0;
-
-  OMX_CONFIG_BRCMAUDIOMAXSAMPLE param;
-  OMX_INIT_STRUCTURE(param);
-
-  if(m_omx_decoder.IsInitialized())
-  {
-    param.nPortIndex = m_omx_decoder.GetInputPort();
-
-    OMX_ERRORTYPE omx_err = m_omx_decoder.GetConfig(OMX_IndexConfigBrcmAudioMaxSample, &param);
-
-    if(omx_err != OMX_ErrorNone)
-    {
-      CLog::Log(LOGERROR, "%s::%s - error getting OMX_IndexConfigBrcmAudioMaxSample error 0x%08x\n",
-        CLASSNAME, __func__, omx_err);
-      return 0;
-    }
-  }
-  pts = FromOMXTime(param.nTimeStamp);
-  return (float)param.nMaxSample * (100.0f / (1<<15));
-}
-
-void COMXAudio::SubmitEOS()
-{
-  CSingleLock lock (m_critSection);
-
-  if(!m_Initialized)
-    return;
-
-  m_submitted_eos = true;
-  m_failed_eos = false;
-
-  OMX_ERRORTYPE omx_err = OMX_ErrorNone;
-  OMX_BUFFERHEADERTYPE *omx_buffer = m_omx_decoder.GetInputBuffer(1000);
-
-  if(omx_buffer == NULL)
-  {
-    CLog::Log(LOGERROR, "%s::%s - buffer error 0x%08x", CLASSNAME, __func__, omx_err);
-    m_failed_eos = true;
-    return;
-  }
-
-  omx_buffer->nOffset     = 0;
-  omx_buffer->nFilledLen  = 0;
-  omx_buffer->nTimeStamp  = ToOMXTime(0LL);
-
-  omx_buffer->nFlags = OMX_BUFFERFLAG_ENDOFFRAME | OMX_BUFFERFLAG_EOS | OMX_BUFFERFLAG_TIME_UNKNOWN;
-
-  omx_err = m_omx_decoder.EmptyThisBuffer(omx_buffer);
-  if (omx_err != OMX_ErrorNone)
-  {
-    CLog::Log(LOGERROR, "%s::%s - OMX_EmptyThisBuffer() failed with result(0x%x)\n", CLASSNAME, __func__, omx_err);
-    m_omx_decoder.DecoderEmptyBufferDone(m_omx_decoder.GetComponent(), omx_buffer);
-    return;
-  }
-  CLog::Log(LOGINFO, "%s::%s", CLASSNAME, __func__);
-}
-
-bool COMXAudio::IsEOS()
-{
-  if(!m_Initialized)
-    return true;
-  unsigned int latency = GetAudioRenderingLatency();
-  CSingleLock lock (m_critSection);
-
-  if (!m_failed_eos && !(m_omx_decoder.IsEOS() && latency == 0))
-    return false;
-
-  if (m_submitted_eos)
-  {
-    CLog::Log(LOGINFO, "%s::%s", CLASSNAME, __func__);
-    m_submitted_eos = false;
-  }
-  return true;
-}
-
-void COMXAudio::SwitchChannels(int iAudioStream, bool bAudioOnAllSpeakers)
-{
-    return ;
-}
-
-void COMXAudio::SetCodingType(AEAudioFormat format)
-{
-  CAEStreamInfo::DataType type = m_Passthrough ? format.m_streamInfo.m_type : CAEStreamInfo::STREAM_TYPE_NULL;
-  switch(type)
-  {
-    case CAEStreamInfo::STREAM_TYPE_DTS_512:
-    case CAEStreamInfo::STREAM_TYPE_DTS_1024:
-    case CAEStreamInfo::STREAM_TYPE_DTS_2048:
-    case CAEStreamInfo::STREAM_TYPE_DTSHD_CORE:
-      CLog::Log(LOGDEBUG, "COMXAudio::SetCodingType OMX_AUDIO_CodingDTS\n");
-      m_eEncoding = OMX_AUDIO_CodingDTS;
-      break;
-    case CAEStreamInfo::STREAM_TYPE_AC3:
-    case CAEStreamInfo::STREAM_TYPE_EAC3:
-      CLog::Log(LOGDEBUG, "COMXAudio::SetCodingType OMX_AUDIO_CodingDDP\n");
-      m_eEncoding = OMX_AUDIO_CodingDDP;
-      break;
-    default:
-      CLog::Log(LOGDEBUG, "COMXAudio::SetCodingType OMX_AUDIO_CodingPCM\n");
-      m_eEncoding = OMX_AUDIO_CodingPCM;
-      break;
-  }
-}
-
-void COMXAudio::PrintChannels(OMX_AUDIO_CHANNELTYPE eChannelMapping[])
-{
-  for(int i = 0; i < OMX_AUDIO_MAXCHANNELS; i++)
-  {
-    switch(eChannelMapping[i])
-    {
-      case OMX_AUDIO_ChannelLF:
-        CLog::Log(LOGDEBUG, "OMX_AUDIO_ChannelLF\n");
-        break;
-      case OMX_AUDIO_ChannelRF:
-        CLog::Log(LOGDEBUG, "OMX_AUDIO_ChannelRF\n");
-        break;
-      case OMX_AUDIO_ChannelCF:
-        CLog::Log(LOGDEBUG, "OMX_AUDIO_ChannelCF\n");
-        break;
-      case OMX_AUDIO_ChannelLS:
-        CLog::Log(LOGDEBUG, "OMX_AUDIO_ChannelLS\n");
-        break;
-      case OMX_AUDIO_ChannelRS:
-        CLog::Log(LOGDEBUG, "OMX_AUDIO_ChannelRS\n");
-        break;
-      case OMX_AUDIO_ChannelLFE:
-        CLog::Log(LOGDEBUG, "OMX_AUDIO_ChannelLFE\n");
-        break;
-      case OMX_AUDIO_ChannelCS:
-        CLog::Log(LOGDEBUG, "OMX_AUDIO_ChannelCS\n");
-        break;
-      case OMX_AUDIO_ChannelLR:
-        CLog::Log(LOGDEBUG, "OMX_AUDIO_ChannelLR\n");
-        break;
-      case OMX_AUDIO_ChannelRR:
-        CLog::Log(LOGDEBUG, "OMX_AUDIO_ChannelRR\n");
-        break;
-      case OMX_AUDIO_ChannelNone:
-      case OMX_AUDIO_ChannelKhronosExtensions:
-      case OMX_AUDIO_ChannelVendorStartUnused:
-      case OMX_AUDIO_ChannelMax:
-      default:
-        break;
-    }
-  }
-}
-
-void COMXAudio::PrintPCM(OMX_AUDIO_PARAM_PCMMODETYPE *pcm, std::string direction)
-{
-  CLog::Log(LOGDEBUG, "pcm->direction      : %s\n", direction.c_str());
-  CLog::Log(LOGDEBUG, "pcm->nPortIndex     : %d\n", (int)pcm->nPortIndex);
-  CLog::Log(LOGDEBUG, "pcm->eNumData       : %d\n", pcm->eNumData);
-  CLog::Log(LOGDEBUG, "pcm->eEndian        : %d\n", pcm->eEndian);
-  CLog::Log(LOGDEBUG, "pcm->bInterleaved   : %d\n", (int)pcm->bInterleaved);
-  CLog::Log(LOGDEBUG, "pcm->nBitPerSample  : %d\n", (int)pcm->nBitPerSample);
-  CLog::Log(LOGDEBUG, "pcm->ePCMMode       : %d\n", pcm->ePCMMode);
-  CLog::Log(LOGDEBUG, "pcm->nChannels      : %d\n", (int)pcm->nChannels);
-  CLog::Log(LOGDEBUG, "pcm->nSamplingRate  : %d\n", (int)pcm->nSamplingRate);
-
-  PrintChannels(pcm->eChannelMapping);
-}
diff --git a/xbmc/cores/omxplayer/OMXAudio.h b/xbmc/cores/omxplayer/OMXAudio.h
deleted file mode 100644
index 78b6f4499e49..000000000000
--- a/xbmc/cores/omxplayer/OMXAudio.h
+++ /dev/null
@@ -1,172 +0,0 @@
-/*
- *  Copyright (c) 2002 d7o3g4q and RUNTiME
- *      Portions Copyright (c) by the authors of ffmpeg and xvid
- *  Copyright (C) 2012-2018 Team Kodi
- *  This file is part of Kodi - https://kodi.tv
- *
- *  SPDX-License-Identifier: GPL-2.0-or-later
- *  See LICENSES/README.md for more information.
- */
-
-#pragma once
-
-#include "cores/AudioEngine/Utils/AEAudioFormat.h"
-#include "cores/AudioEngine/Utils/AEUtil.h"
-#include "cores/AudioEngine/Interfaces/AEStream.h"
-#include "cores/VideoPlayer/Process/ProcessInfo.h"
-#include "platform/linux/PlatformDefs.h"
-#include "DVDStreamInfo.h"
-
-#include "OMXClock.h"
-#include "OMXCore.h"
-
-#include "threads/CriticalSection.h"
-
-extern "C" {
-#include <libavcodec/avcodec.h>
-#include <libavutil/avutil.h>
-}
-
-#define AUDIO_BUFFER_SECONDS 3
-#define VIS_PACKET_SIZE 512
-
-typedef struct tGUID
-{
-  DWORD Data1;
-  unsigned short  Data2, Data3;
-  unsigned char  Data4[8];
-} __attribute__((__packed__)) GUID;
-
-// Audio stuff
-typedef struct tWAVEFORMATEX
-{
-  unsigned short wFormatTag;
-  unsigned short nChannels;
-  DWORD   nSamplesPerSec;
-  DWORD   nAvgBytesPerSec;
-  unsigned short nBlockAlign;
-  unsigned short wBitsPerSample;
-  unsigned short cbSize;
- } __attribute__((__packed__)) WAVEFORMATEX, *PWAVEFORMATEX, *LPWAVEFORMATEX;
-
- #define WAVE_FORMAT_UNKNOWN           0x0000
- #define WAVE_FORMAT_PCM               0x0001
- #define WAVE_FORMAT_ADPCM             0x0002
- #define WAVE_FORMAT_IEEE_FLOAT        0x0003
- #define WAVE_FORMAT_EXTENSIBLE        0xFFFE
-
-typedef struct tWAVEFORMATEXTENSIBLE
-{
-  WAVEFORMATEX Format;
-  union
-  {
-    unsigned short wValidBitsPerSample;
-    unsigned short wSamplesPerBlock;
-    unsigned short wReserved;
-  } Samples;
-  DWORD dwChannelMask;
-  GUID SubFormat;
-} __attribute__((__packed__)) WAVEFORMATEXTENSIBLE;
-
-class COMXAudio
-{
-public:
-  unsigned int GetChunkLen() const;
-  float GetDelay();
-  float GetCacheTime();
-  float GetCacheTotal();
-  COMXAudio(CProcessInfo &processInfo);
-  bool Initialize(AEAudioFormat format, OMXClock *clock, CDVDStreamInfo &hints, CAEChannelInfo channelMap, bool bUsePassthrough);
-  bool PortSettingsChanged();
-  ~COMXAudio();
-
-  unsigned int AddPackets(const void* data, unsigned int len, double dts, double pts, unsigned int frame_size, bool &settings_changed);
-  unsigned int GetSpace();
-  bool Deinitialize();
-
-  void SetVolume(float nVolume);
-  void SetMute(bool bOnOff);
-  void SetDynamicRangeCompression(long drc);
-  float GetDynamicRangeAmplification() const { return 20.0f * log10f(m_amplification * m_attenuation); }
-  bool ApplyVolume();
-  int SetPlaySpeed(int iSpeed);
-  void SubmitEOS();
-  bool IsEOS();
-  void SwitchChannels(int iAudioStream, bool bAudioOnAllSpeakers);
-
-  void Flush();
-
-  void Process();
-
-  void SetCodingType(AEAudioFormat format);
-
-  static void PrintChannels(OMX_AUDIO_CHANNELTYPE eChannelMapping[]);
-  static void PrintPCM(OMX_AUDIO_PARAM_PCMMODETYPE *pcm, std::string direction);
-  void UpdateAttenuation();
-
-  bool BadState() const { return !m_Initialized; };
-  unsigned int GetAudioRenderingLatency() const;
-  float GetMaxLevel(double &pts);
-
-private:
-  bool          m_Initialized;
-  float         m_CurrentVolume;
-  bool          m_Mute;
-  long          m_drc;
-  bool          m_Passthrough;
-  unsigned int  m_BytesPerSec;
-  unsigned int  m_InputBytesPerSec;
-  unsigned int  m_BufferLen;
-  unsigned int  m_ChunkLen;
-  unsigned int  m_InputChannels;
-  unsigned int  m_OutputChannels;
-  unsigned int  m_BitsPerSample;
-  float         m_maxLevel;
-  float         m_amplification;
-  float         m_attenuation;
-  float         m_submitted;
-  COMXCoreComponent *m_omx_clock;
-  OMXClock       *m_av_clock;
-  bool          m_settings_changed;
-  bool          m_setStartTime;
-  int           m_SampleRate;
-  OMX_AUDIO_CODINGTYPE m_eEncoding;
-  uint8_t       *m_extradata;
-  int           m_extrasize;
-  // stuff for visualisation
-  double        m_last_pts;
-  bool          m_submitted_eos;
-  bool          m_failed_eos;
-  enum { AESINKPI_UNKNOWN, AESINKPI_HDMI, AESINKPI_ANALOGUE, AESINKPI_BOTH } m_output;
-
-  typedef struct {
-    double pts;
-    float level;
-  } amplitudes_t;
-  std::deque<amplitudes_t> m_ampqueue;
-
-  float m_downmix_matrix[OMX_AUDIO_MAXCHANNELS*OMX_AUDIO_MAXCHANNELS];
-
-  OMX_AUDIO_CHANNELTYPE m_input_channels[OMX_AUDIO_MAXCHANNELS];
-  OMX_AUDIO_CHANNELTYPE m_output_channels[OMX_AUDIO_MAXCHANNELS];
-  OMX_AUDIO_PARAM_PCMMODETYPE m_pcm_output;
-  OMX_AUDIO_PARAM_PCMMODETYPE m_pcm_input;
-  OMX_AUDIO_PARAM_DTSTYPE     m_dtsParam;
-  WAVEFORMATEXTENSIBLE        m_wave_header;
-  IAEStream *m_pAudioStream;
-  CProcessInfo&     m_processInfo;
-protected:
-  COMXCoreComponent m_omx_render_analog;
-  COMXCoreComponent m_omx_render_hdmi;
-  COMXCoreComponent m_omx_splitter;
-  COMXCoreComponent m_omx_mixer;
-  COMXCoreComponent m_omx_decoder;
-  COMXCoreTunnel    m_omx_tunnel_clock_analog;
-  COMXCoreTunnel    m_omx_tunnel_clock_hdmi;
-  COMXCoreTunnel    m_omx_tunnel_mixer;
-  COMXCoreTunnel    m_omx_tunnel_decoder;
-  COMXCoreTunnel    m_omx_tunnel_splitter_analog;
-  COMXCoreTunnel    m_omx_tunnel_splitter_hdmi;
-
-  mutable CCriticalSection m_critSection;
-};
diff --git a/xbmc/cores/omxplayer/OMXAudioCodecOMX.cpp b/xbmc/cores/omxplayer/OMXAudioCodecOMX.cpp
deleted file mode 100644
index fa7696cad9fb..000000000000
--- a/xbmc/cores/omxplayer/OMXAudioCodecOMX.cpp
+++ /dev/null
@@ -1,355 +0,0 @@
-/*
- *  Copyright (C) 2005-2018 Team Kodi
- *  This file is part of Kodi - https://kodi.tv
- *
- *  SPDX-License-Identifier: GPL-2.0-or-later
- *  See LICENSES/README.md for more information.
- */
-
-#include "OMXAudioCodecOMX.h"
-#ifdef TARGET_LINUX
-#include "XMemUtils.h"
-#endif
-#include "utils/log.h"
-
-#include "cores/AudioEngine/Utils/AEUtil.h"
-#include "ServiceBroker.h"
-#include "cores/AudioEngine/Interfaces/AE.h"
-#include "settings/Settings.h"
-#include "platform/linux/RBP.h"
-
-// the size of the audio_render output port buffers
-#define AUDIO_DECODE_OUTPUT_BUFFER (32*1024)
-static const char rounded_up_channels_shift[] = {0,0,1,2,2,3,3,3,3};
-
-COMXAudioCodecOMX::COMXAudioCodecOMX(CProcessInfo &processInfo) : m_processInfo(processInfo)
-{
-  m_pBufferOutput = NULL;
-  m_iBufferOutputAlloced = 0;
-  m_iBufferOutputUsed = 0;
-
-  m_pCodecContext = NULL;
-  m_pConvert = NULL;
-
-  m_channels = 0;
-  m_pFrame1 = NULL;
-  m_frameSize = 0;
-  m_bGotFrame = false;
-  m_bNoConcatenate = false;
-
-  m_iSampleFormat = AV_SAMPLE_FMT_NONE;
-  m_desiredSampleFormat = AV_SAMPLE_FMT_NONE;
-}
-
-COMXAudioCodecOMX::~COMXAudioCodecOMX()
-{
-  av_free(m_pBufferOutput);
-  m_pBufferOutput = NULL;
-  m_iBufferOutputAlloced = 0;
-  m_iBufferOutputUsed = 0;
-  Dispose();
-}
-
-bool COMXAudioCodecOMX::Open(CDVDStreamInfo &hints)
-{
-  AVCodec* pCodec = NULL;
-
-  if (hints.codec == AV_CODEC_ID_DTS && g_RBP.RaspberryPiVersion() > 1)
-    pCodec = avcodec_find_decoder_by_name("dcadec");
-
-  if (!pCodec)
-    pCodec = avcodec_find_decoder(hints.codec);
-
-  if (!pCodec)
-  {
-    CLog::Log(LOGDEBUG,"COMXAudioCodecOMX::Open() Unable to find codec %d", hints.codec);
-    return false;
-  }
-
-  m_bFirstFrame = true;
-  m_pCodecContext = avcodec_alloc_context3(pCodec);
-  if (!m_pCodecContext)
-    return false;
-
-  m_pCodecContext->debug_mv = 0;
-  m_pCodecContext->debug = 0;
-  m_pCodecContext->workaround_bugs = 1;
-
-  if (pCodec->capabilities & AV_CODEC_CAP_TRUNCATED)
-    m_pCodecContext->flags |= AV_CODEC_FLAG_TRUNCATED;
-
-  m_channels = 0;
-  m_pCodecContext->channels = hints.channels;
-  m_pCodecContext->sample_rate = hints.samplerate;
-  m_pCodecContext->block_align = hints.blockalign;
-  m_pCodecContext->bit_rate = hints.bitrate;
-  m_pCodecContext->bits_per_coded_sample = hints.bitspersample;
-  if (hints.codec == AV_CODEC_ID_TRUEHD)
-  {
-    if (CServiceBroker::GetActiveAE()->HasStereoAudioChannelCount())
-      m_pCodecContext->request_channel_layout = AV_CH_LAYOUT_STEREO;
-    else if (!CServiceBroker::GetActiveAE()->HasHDAudioChannelCount())
-      m_pCodecContext->request_channel_layout = AV_CH_LAYOUT_5POINT1;
-  }
-  if (m_pCodecContext->request_channel_layout)
-    CLog::Log(LOGNOTICE,"COMXAudioCodecOMX::Open() Requesting channel layout of %x", (unsigned)m_pCodecContext->request_channel_layout);
-
-  if(m_pCodecContext->bits_per_coded_sample == 0)
-    m_pCodecContext->bits_per_coded_sample = 16;
-
-  if( hints.extradata && hints.extrasize > 0 )
-  {
-    m_pCodecContext->extradata = (uint8_t*)av_mallocz(hints.extrasize + AV_INPUT_BUFFER_PADDING_SIZE);
-    if(m_pCodecContext->extradata)
-    {
-      m_pCodecContext->extradata_size = hints.extrasize;
-      memcpy(m_pCodecContext->extradata, hints.extradata, hints.extrasize);
-    }
-  }
-
-  if (avcodec_open2(m_pCodecContext, pCodec, NULL) < 0)
-  {
-    CLog::Log(LOGDEBUG,"COMXAudioCodecOMX::Open() Unable to open codec");
-    Dispose();
-    return false;
-  }
-
-  m_pFrame1 = av_frame_alloc();
-  if (!m_pFrame1)
-  {
-    Dispose();
-    return false;
-  }
-
-  m_iSampleFormat = AV_SAMPLE_FMT_NONE;
-  m_desiredSampleFormat = m_pCodecContext->sample_fmt == AV_SAMPLE_FMT_S16 ? AV_SAMPLE_FMT_S16 : AV_SAMPLE_FMT_FLTP;
-  m_processInfo.SetAudioDecoderName(m_pCodecContext->codec->name);
-  return true;
-}
-
-void COMXAudioCodecOMX::Dispose()
-{
-  av_frame_free(&m_pFrame1);
-  swr_free(&m_pConvert);
-  avcodec_free_context(&m_pCodecContext);
-  m_bGotFrame = false;
-}
-
-int COMXAudioCodecOMX::Decode(unsigned char* pData, int iSize, double dts, double pts)
-{
-  int iBytesUsed, got_frame;
-  if (!m_pCodecContext) return -1;
-
-  AVPacket avpkt;
-  if (!m_iBufferOutputUsed)
-  {
-    m_dts = dts;
-    m_pts = pts;
-  }
-  if (m_bGotFrame)
-    return 0;
-  av_init_packet(&avpkt);
-  avpkt.data = pData;
-  avpkt.size = iSize;
-  iBytesUsed = avcodec_decode_audio4( m_pCodecContext
-                                                 , m_pFrame1
-                                                 , &got_frame
-                                                 , &avpkt);
-  if (iBytesUsed < 0 || !got_frame)
-  {
-    return iBytesUsed;
-  }
-  /* some codecs will attempt to consume more data than what we gave */
-  if (iBytesUsed > iSize)
-  {
-    CLog::Log(LOGWARNING, "COMXAudioCodecOMX::Decode - decoder attempted to consume more data than given");
-    iBytesUsed = iSize;
-  }
-
-  if (m_bFirstFrame)
-  {
-    CLog::Log(LOGDEBUG, "COMXAudioCodecOMX::Decode(%p,%d) format=%d(%d) chan=%d samples=%d size=%d data=%p,%p,%p,%p,%p,%p,%p,%p",
-             pData, iSize, m_pCodecContext->sample_fmt, m_desiredSampleFormat, m_pCodecContext->channels, m_pFrame1->nb_samples,
-             m_pFrame1->linesize[0],
-             m_pFrame1->data[0], m_pFrame1->data[1], m_pFrame1->data[2], m_pFrame1->data[3], m_pFrame1->data[4], m_pFrame1->data[5], m_pFrame1->data[6], m_pFrame1->data[7]
-             );
-  }
-
-  m_bGotFrame = true;
-  return iBytesUsed;
-}
-
-int COMXAudioCodecOMX::GetData(unsigned char** dst, double &dts, double &pts)
-{
-  if (!m_bGotFrame)
-    return 0;
-  int inLineSize, outLineSize;
-  /* input audio is aligned */
-  int inputSize = av_samples_get_buffer_size(&inLineSize, m_pCodecContext->channels, m_pFrame1->nb_samples, m_pCodecContext->sample_fmt, 0);
-  /* output audio will be packed */
-  int outputSize = av_samples_get_buffer_size(&outLineSize, m_pCodecContext->channels, m_pFrame1->nb_samples, m_desiredSampleFormat, 1);
-
-  if (!m_bNoConcatenate && m_iBufferOutputUsed && (int)m_frameSize != outputSize)
-  {
-    CLog::Log(LOGERROR, "COMXAudioCodecOMX::GetData Unexpected change of size (%d->%d)", m_frameSize, outputSize);
-    m_bNoConcatenate = true;
-  }
-
-  // if this buffer won't fit then flush out what we have
-  int desired_size = AUDIO_DECODE_OUTPUT_BUFFER * (m_pCodecContext->channels * GetBitsPerSample()) >> (rounded_up_channels_shift[m_pCodecContext->channels] + 4);
-  if (m_iBufferOutputUsed && (m_iBufferOutputUsed + outputSize > desired_size || m_bNoConcatenate))
-  {
-     int ret = m_iBufferOutputUsed;
-     m_iBufferOutputUsed = 0;
-     m_bNoConcatenate = false;
-     dts = m_dts;
-     pts = m_pts;
-     *dst = m_pBufferOutput;
-     return ret;
-  }
-  m_frameSize = outputSize;
-
-  if (m_iBufferOutputAlloced < m_iBufferOutputUsed + outputSize)
-  {
-     m_pBufferOutput = (unsigned char*)av_realloc(m_pBufferOutput, m_iBufferOutputUsed + outputSize + AV_INPUT_BUFFER_PADDING_SIZE);
-     m_iBufferOutputAlloced = m_iBufferOutputUsed + outputSize;
-  }
-
-  /* need to convert format */
-  if(m_pCodecContext->sample_fmt != m_desiredSampleFormat)
-  {
-    if(m_pConvert && (m_pCodecContext->sample_fmt != m_iSampleFormat || m_channels != m_pCodecContext->channels))
-    {
-      swr_free(&m_pConvert);
-      m_channels = m_pCodecContext->channels;
-    }
-
-    if(!m_pConvert)
-    {
-      m_iSampleFormat = m_pCodecContext->sample_fmt;
-      m_pConvert = swr_alloc_set_opts(NULL,
-                      av_get_default_channel_layout(m_pCodecContext->channels),
-                      m_desiredSampleFormat, m_pCodecContext->sample_rate,
-                      av_get_default_channel_layout(m_pCodecContext->channels),
-                      m_pCodecContext->sample_fmt, m_pCodecContext->sample_rate,
-                      0, NULL);
-
-      if(!m_pConvert || swr_init(m_pConvert) < 0)
-      {
-        CLog::Log(LOGERROR, "COMXAudioCodecOMX::Decode - Unable to initialise convert format %d to %d", m_pCodecContext->sample_fmt, m_desiredSampleFormat);
-        return 0;
-      }
-    }
-
-    /* use unaligned flag to keep output packed */
-    uint8_t *out_planes[m_pCodecContext->channels];
-    if(av_samples_fill_arrays(out_planes, NULL, m_pBufferOutput + m_iBufferOutputUsed, m_pCodecContext->channels, m_pFrame1->nb_samples, m_desiredSampleFormat, 1) < 0 ||
-       swr_convert(m_pConvert, out_planes, m_pFrame1->nb_samples, (const uint8_t **)m_pFrame1->data, m_pFrame1->nb_samples) < 0)
-    {
-      CLog::Log(LOGERROR, "COMXAudioCodecOMX::Decode - Unable to convert format %d to %d", (int)m_pCodecContext->sample_fmt, m_desiredSampleFormat);
-      outputSize = 0;
-    }
-  }
-  else
-  {
-    /* copy to a contiguous buffer */
-    uint8_t *out_planes[m_pCodecContext->channels];
-    if (av_samples_fill_arrays(out_planes, NULL, m_pBufferOutput + m_iBufferOutputUsed, m_pCodecContext->channels, m_pFrame1->nb_samples, m_desiredSampleFormat, 1) < 0 ||
-      av_samples_copy(out_planes, m_pFrame1->data, 0, 0, m_pFrame1->nb_samples, m_pCodecContext->channels, m_desiredSampleFormat) < 0 )
-    {
-      outputSize = 0;
-    }
-  }
-  m_bGotFrame = false;
-
-  if (m_bFirstFrame)
-  {
-    CLog::Log(LOGDEBUG, "COMXAudioCodecOMX::GetData size=%d/%d line=%d/%d buf=%p, desired=%d", inputSize, outputSize, inLineSize, outLineSize, m_pBufferOutput, desired_size);
-    m_bFirstFrame = false;
-  }
-  m_iBufferOutputUsed += outputSize;
-  return 0;
-}
-
-void COMXAudioCodecOMX::Reset()
-{
-  if (m_pCodecContext) avcodec_flush_buffers(m_pCodecContext);
-  m_bGotFrame = false;
-  m_iBufferOutputUsed = 0;
-}
-
-int COMXAudioCodecOMX::GetChannels() const
-{
-  if (!m_pCodecContext)
-    return 0;
-  return m_pCodecContext->channels;
-}
-
-int COMXAudioCodecOMX::GetSampleRate() const
-{
-  if (!m_pCodecContext)
-    return 0;
-  return m_pCodecContext->sample_rate;
-}
-
-int COMXAudioCodecOMX::GetBitsPerSample() const
-{
-  if (!m_pCodecContext)
-    return 0;
-  return m_desiredSampleFormat == AV_SAMPLE_FMT_S16 ? 16 : 32;
-}
-
-int COMXAudioCodecOMX::GetBitRate() const
-{
-  if (!m_pCodecContext)
-    return 0;
-  return m_pCodecContext->bit_rate;
-}
-
-static unsigned count_bits(uint64_t value)
-{
-  unsigned bits = 0;
-  for(;value;++bits)
-    value &= value - 1;
-  return bits;
-}
-
-void COMXAudioCodecOMX::BuildChannelMap()
-{
-  uint64_t layout;
-  int bits = count_bits(m_pCodecContext->channel_layout);
-  if (bits == m_pCodecContext->channels)
-    layout = m_pCodecContext->channel_layout;
-  else
-  {
-    CLog::Log(LOGINFO, "COMXAudioCodecOMX::GetChannelMap - FFmpeg reported %d channels, but the layout contains %d ignoring", m_pCodecContext->channels, bits);
-    layout = av_get_default_channel_layout(m_pCodecContext->channels);
-  }
-
-  m_channelLayout.Reset();
-
-  if (layout & AV_CH_FRONT_LEFT           ) m_channelLayout += AE_CH_FL  ;
-  if (layout & AV_CH_FRONT_RIGHT          ) m_channelLayout += AE_CH_FR  ;
-  if (layout & AV_CH_FRONT_CENTER         ) m_channelLayout += AE_CH_FC  ;
-  if (layout & AV_CH_LOW_FREQUENCY        ) m_channelLayout += AE_CH_LFE ;
-  if (layout & AV_CH_BACK_LEFT            ) m_channelLayout += AE_CH_BL  ;
-  if (layout & AV_CH_BACK_RIGHT           ) m_channelLayout += AE_CH_BR  ;
-  if (layout & AV_CH_FRONT_LEFT_OF_CENTER ) m_channelLayout += AE_CH_FLOC;
-  if (layout & AV_CH_FRONT_RIGHT_OF_CENTER) m_channelLayout += AE_CH_FROC;
-  if (layout & AV_CH_BACK_CENTER          ) m_channelLayout += AE_CH_BC  ;
-  if (layout & AV_CH_SIDE_LEFT            ) m_channelLayout += AE_CH_SL  ;
-  if (layout & AV_CH_SIDE_RIGHT           ) m_channelLayout += AE_CH_SR  ;
-  if (layout & AV_CH_TOP_CENTER           ) m_channelLayout += AE_CH_TC  ;
-  if (layout & AV_CH_TOP_FRONT_LEFT       ) m_channelLayout += AE_CH_TFL ;
-  if (layout & AV_CH_TOP_FRONT_CENTER     ) m_channelLayout += AE_CH_TFC ;
-  if (layout & AV_CH_TOP_FRONT_RIGHT      ) m_channelLayout += AE_CH_TFR ;
-  if (layout & AV_CH_TOP_BACK_LEFT        ) m_channelLayout += AE_CH_BL  ;
-  if (layout & AV_CH_TOP_BACK_CENTER      ) m_channelLayout += AE_CH_BC  ;
-  if (layout & AV_CH_TOP_BACK_RIGHT       ) m_channelLayout += AE_CH_BR  ;
-}
-
-CAEChannelInfo COMXAudioCodecOMX::GetChannelMap()
-{
-  BuildChannelMap();
-  return m_channelLayout;
-}
diff --git a/xbmc/cores/omxplayer/OMXAudioCodecOMX.h b/xbmc/cores/omxplayer/OMXAudioCodecOMX.h
deleted file mode 100644
index 2365463c7433..000000000000
--- a/xbmc/cores/omxplayer/OMXAudioCodecOMX.h
+++ /dev/null
@@ -1,63 +0,0 @@
-/*
- *  Copyright (C) 2005-2018 Team Kodi
- *  This file is part of Kodi - https://kodi.tv
- *
- *  SPDX-License-Identifier: GPL-2.0-or-later
- *  See LICENSES/README.md for more information.
- */
-
-#pragma once
-
-#include "cores/AudioEngine/Utils/AEAudioFormat.h"
-
-extern "C" {
-#include <libavcodec/avcodec.h>
-#include <libavformat/avformat.h>
-#include <libavutil/avutil.h>
-#include <libswresample/swresample.h>
-}
-
-#include "DVDStreamInfo.h"
-#include "platform/linux/PlatformDefs.h"
-#include "cores/VideoPlayer/Process/ProcessInfo.h"
-
-class COMXAudioCodecOMX
-{
-public:
-  explicit COMXAudioCodecOMX(CProcessInfo &processInfo);
-  virtual ~COMXAudioCodecOMX();
-  bool Open(CDVDStreamInfo &hints);
-  void Dispose();
-  int Decode(unsigned char* pData, int iSize, double dts, double pts);
-  int GetData(unsigned char** dst, double &dts, double &pts);
-  void Reset();
-  int GetChannels() const;
-  void BuildChannelMap();
-  CAEChannelInfo GetChannelMap();
-  int GetSampleRate() const;
-  int GetBitsPerSample() const;
-  static const char* GetName() { return "FFmpeg"; }
-  int GetBitRate() const;
-  unsigned int GetFrameSize() const { return m_frameSize; }
-
-protected:
-  CProcessInfo &m_processInfo;
-  AVCodecContext* m_pCodecContext;
-  SwrContext*     m_pConvert;
-  enum AVSampleFormat m_iSampleFormat;
-  enum AVSampleFormat m_desiredSampleFormat;
-
-  AVFrame* m_pFrame1;
-
-  unsigned char *m_pBufferOutput;
-  int   m_iBufferOutputUsed;
-  int   m_iBufferOutputAlloced;
-
-  int     m_channels;
-  CAEChannelInfo m_channelLayout;
-  bool m_bFirstFrame;
-  bool m_bGotFrame;
-  bool m_bNoConcatenate;
-  unsigned int  m_frameSize;
-  double m_dts, m_pts;
-};
diff --git a/xbmc/cores/omxplayer/OMXHelper.cpp b/xbmc/cores/omxplayer/OMXHelper.cpp
deleted file mode 100644
index 23c1b5af0a50..000000000000
--- a/xbmc/cores/omxplayer/OMXHelper.cpp
+++ /dev/null
@@ -1,183 +0,0 @@
-/*
- *  Copyright (C) 2014-2018 Team Kodi
- *  This file is part of Kodi - https://kodi.tv
- *
- *  SPDX-License-Identifier: GPL-2.0-or-later
- *  See LICENSES/README.md for more information.
- */
-
-#include "VideoPlayer.h"
-#include "ServiceBroker.h"
-#include "settings/MediaSettings.h"
-#include "settings/Settings.h"
-#include "settings/SettingsComponent.h"
-#include "DVDInputStreams/DVDInputStream.h"
-#include "cores/omxplayer/OMXPlayerAudio.h"
-#include "cores/omxplayer/OMXPlayerVideo.h"
-#include "threads/SystemClock.h"
-
-#define PREDICATE_RETURN(lh, rh) \
-  do { \
-    if((lh) != (rh)) \
-      return (lh) > (rh); \
-  } while(0)
-
-bool OMXPlayerUnsuitable(bool m_HasVideo, bool m_HasAudio, CDVDDemux* m_pDemuxer, std::shared_ptr<CDVDInputStream> m_pInputStream, CSelectionStreams &m_SelectionStreams)
-{
-  const std::shared_ptr<CSettings> settings = CServiceBroker::GetSettingsComponent()->GetSettings();
-
-  // if no OMXPlayer acceleration then it is not suitable
-  if (!settings->GetBool(CSettings::SETTING_VIDEOPLAYER_USEOMXPLAYER))
-    return true;
-  // if no MMAL acceleration stick with omxplayer regardless
-  if (!settings->GetBool(CSettings::SETTING_VIDEOPLAYER_USEMMAL))
-    return false;
-
-  // omxplayer only handles Pi sink
-  const std::string audioDevice = settings->GetString(CSettings::SETTING_AUDIOOUTPUT_AUDIODEVICE);
-  if (audioDevice != "PI:Analogue" &&
-      audioDevice != "PI:HDMI" &&
-      audioDevice != "PI:Both" &&
-      audioDevice != "Default")
-  {
-    CLog::Log(LOGNOTICE, "%s OMXPlayer unsuitable due to audio sink", __func__);
-    return true;
-  }
-  // omxplayer doesn't handle ac3 transcode
-  if (settings->GetBool(CSettings::SETTING_AUDIOOUTPUT_AC3TRANSCODE))
-  {
-    CLog::Log(LOGNOTICE, "%s OMXPlayer unsuitable due to ac3transcode", __func__);
-    return true;
-  }
-  if (m_pDemuxer)
-  {
-    // find video stream
-    int num_supported = 0, num_unsupported = 0;
-    AVCodecID codec = AV_CODEC_ID_NONE;
-    for (const auto &it : m_SelectionStreams.Get(STREAM_VIDEO))
-    {
-      CDemuxStream *stream = m_pDemuxer->GetStream(it.demuxerId, it.id);
-      if(!stream || stream->disabled || stream->flags & AV_DISPOSITION_ATTACHED_PIC)
-        continue;
-      CDVDStreamInfo hint(*stream, true);
-
-      bool supported = false;
-      if ((hint.codec == AV_CODEC_ID_MPEG1VIDEO || hint.codec == AV_CODEC_ID_MPEG2VIDEO) && g_RBP.GetCodecMpg2())
-        supported = true;
-      else if ((hint.codec == AV_CODEC_ID_VC1 || hint.codec == AV_CODEC_ID_WMV3) && g_RBP.GetCodecWvc1())
-        supported = true;
-      else if (hint.codec == AV_CODEC_ID_H264 || hint.codec == AV_CODEC_ID_MPEG4 || hint.codec == AV_CODEC_ID_H263 ||
-          hint.codec == AV_CODEC_ID_VP6 || hint.codec == AV_CODEC_ID_VP6F || hint.codec == AV_CODEC_ID_VP6A || hint.codec == AV_CODEC_ID_VP8 ||
-          hint.codec == AV_CODEC_ID_THEORA || hint.codec == AV_CODEC_ID_MJPEG || hint.codec == AV_CODEC_ID_MJPEGB)
-        supported = true;
-      codec = hint.codec;
-      if (supported)
-        num_supported++;
-      else
-        num_unsupported++;
-    }
-    if (num_unsupported > 0 && num_supported == 0)
-    {
-      CLog::Log(LOGNOTICE, "%s OMXPlayer unsuitable due to video codec (%x:%d/%d)", __func__, codec, num_supported, num_unsupported);
-      return true;
-    }
-  }
-  if (m_pInputStream && m_pInputStream->IsStreamType(DVDSTREAM_TYPE_DVD))
-  {
-    CLog::Log(LOGNOTICE, "%s OMXPlayer unsuitable due to dvd menus", __func__);
-    return true;
-  }
-  return false;
-}
-
-bool OMXDoProcessing(struct SOmxPlayerState &m_OmxPlayerState, int m_playSpeed, IDVDStreamPlayerVideo *m_VideoPlayerVideo, IDVDStreamPlayerAudio *m_VideoPlayerAudio,
-                     CCurrentStream m_CurrentAudio, CCurrentStream m_CurrentVideo, bool m_HasVideo, bool m_HasAudio, CProcessInfo &processInfo)
-{
-  bool reopen_stream = false;
-  unsigned int now = XbmcThreads::SystemClockMillis();
-  if (m_OmxPlayerState.last_check_time == 0.0 || m_OmxPlayerState.last_check_time + 20 <= now)
-  {
-    m_OmxPlayerState.last_check_time = now;
-    m_OmxPlayerState.stamp = m_OmxPlayerState.av_clock.OMXMediaTime();
-    const bool m_Pause = m_playSpeed == DVD_PLAYSPEED_PAUSE;
-    const bool not_accepts_data = (!m_VideoPlayerAudio->AcceptsData() && m_HasAudio) ||
-        (!m_VideoPlayerVideo->AcceptsData() && m_HasVideo);
-    /* when the video/audio fifos are low, we pause clock, when high we resume */
-    double audio_pts = floor(m_VideoPlayerAudio->GetCurrentPts());
-    double video_pts = floor(m_VideoPlayerVideo->GetCurrentPts());
-
-    float audio_fifo = audio_pts / DVD_TIME_BASE - m_OmxPlayerState.stamp * 1e-6;
-    float video_fifo = video_pts / DVD_TIME_BASE - m_OmxPlayerState.stamp * 1e-6;
-    float threshold = 0.1f;
-    bool audio_fifo_low = false, video_fifo_low = false, audio_fifo_high = false, video_fifo_high = false;
-
-    if (m_OmxPlayerState.interlace_method == VS_INTERLACEMETHOD_MAX)
-      m_OmxPlayerState.interlace_method = processInfo.GetVideoSettings().m_InterlaceMethod;
-
-    // if deinterlace setting has changed, we should close and open video
-    if (m_OmxPlayerState.interlace_method != processInfo.GetVideoSettings().m_InterlaceMethod)
-    {
-      CLog::Log(LOGNOTICE, "%s - Reopen stream due to interlace change (%d,%d)", __FUNCTION__,
-        m_OmxPlayerState.interlace_method, processInfo.GetVideoSettings().m_InterlaceMethod);
-
-      m_OmxPlayerState.interlace_method    = processInfo.GetVideoSettings().m_InterlaceMethod;
-      reopen_stream = true;
-    }
-
-    if (audio_pts != DVD_NOPTS_VALUE)
-    {
-      audio_fifo_low = m_HasAudio && audio_fifo < threshold;
-      audio_fifo_high = audio_pts != DVD_NOPTS_VALUE && audio_fifo >= m_OmxPlayerState.threshold;
-    }
-    if (video_pts != DVD_NOPTS_VALUE)
-    {
-      video_fifo_low = m_HasVideo && video_fifo < threshold;
-      video_fifo_high = video_pts != DVD_NOPTS_VALUE && video_fifo >= m_OmxPlayerState.threshold;
-    }
-    if (!m_HasAudio && m_HasVideo)
-      audio_fifo_high = true;
-    if (!m_HasVideo && m_HasAudio)
-      video_fifo_high = true;
-
-    #ifdef _DEBUG
-    CLog::Log(LOGDEBUG, "%s::%s M:%.6f-%.6f (A:%.6f V:%.6f) PEF:%d%d%d S:%.2f A:%.2f V:%.2f/T:%.2f (A:%d%d V:%d%d) A:%d%% V:%d%%", "CVideoPlayer", __FUNCTION__,
-      m_OmxPlayerState.stamp*1e-6, m_OmxPlayerState.av_clock.OMXClockAdjustment()*1e-6, audio_pts*1e-6, video_pts*1e-6,
-      m_OmxPlayerState.av_clock.OMXIsPaused(), m_OmxPlayerState.bOmxSentEOFs, not_accepts_data, m_playSpeed * (1.0f/DVD_PLAYSPEED_NORMAL),
-      audio_pts == DVD_NOPTS_VALUE ? 0.0:audio_fifo, video_pts == DVD_NOPTS_VALUE ? 0.0:video_fifo, m_OmxPlayerState.threshold,
-      audio_fifo_low, audio_fifo_high, video_fifo_low, video_fifo_high,
-      m_VideoPlayerAudio->GetLevel(), 0);
-    #endif
-
-    if(!m_Pause && (m_OmxPlayerState.bOmxSentEOFs || not_accepts_data || (audio_fifo_high && video_fifo_high) || m_playSpeed != DVD_PLAYSPEED_NORMAL))
-    {
-      if (m_OmxPlayerState.av_clock.OMXIsPaused())
-      {
-        CLog::Log(LOGDEBUG, "%s::%s Resume %.2f,%.2f (A:%d%d V:%d%d) EOF:%d FULL:%d T:%.2f", "CVideoPlayer", __FUNCTION__, audio_fifo, video_fifo,
-          audio_fifo_low, audio_fifo_high, video_fifo_low, video_fifo_high, m_OmxPlayerState.bOmxSentEOFs, not_accepts_data, m_OmxPlayerState.threshold);
-        m_OmxPlayerState.av_clock.OMXResume();
-      }
-    }
-    else if ((m_Pause || audio_fifo_low || video_fifo_low) && m_playSpeed == DVD_PLAYSPEED_NORMAL)
-    {
-      if (!m_OmxPlayerState.av_clock.OMXIsPaused())
-      {
-        if (!m_Pause)
-          m_OmxPlayerState.threshold = std::min(2.0f*m_OmxPlayerState.threshold, 16.0f);
-        CLog::Log(LOGDEBUG, "%s::%s Pause %.2f,%.2f (A:%d%d V:%d%d) EOF:%d FULL:%d T:%.2f", "CVideoPlayer", __FUNCTION__, audio_fifo, video_fifo,
-          audio_fifo_low, audio_fifo_high, video_fifo_low, video_fifo_high, m_OmxPlayerState.bOmxSentEOFs, not_accepts_data, m_OmxPlayerState.threshold);
-        m_OmxPlayerState.av_clock.OMXPause();
-      }
-    }
-  }
-  return reopen_stream;
-}
-
-bool OMXStillPlaying(bool waitVideo, bool waitAudio, bool eosVideo, bool eosAudio)
-{
-  // wait for omx components to finish
-  if (waitVideo && !eosVideo)
-    return true;
-  if (waitAudio && !eosAudio)
-    return true;
-  return false;
-}
diff --git a/xbmc/cores/omxplayer/OMXHelper.h b/xbmc/cores/omxplayer/OMXHelper.h
deleted file mode 100644
index 4550dc28948b..000000000000
--- a/xbmc/cores/omxplayer/OMXHelper.h
+++ /dev/null
@@ -1,16 +0,0 @@
-/*
- *  Copyright (C) 2014-2018 Team Kodi
- *  This file is part of Kodi - https://kodi.tv
- *
- *  SPDX-License-Identifier: GPL-2.0-or-later
- *  See LICENSES/README.md for more information.
- */
-
-#pragma once
-
-#include <memory>
-
-bool OMXPlayerUnsuitable(bool m_HasVideo, bool m_HasAudio, CDVDDemux* m_pDemuxer, std::shared_ptr<CDVDInputStream> m_pInputStream, CSelectionStreams &m_SelectionStreams);
-bool OMXDoProcessing(struct SOmxPlayerState &m_OmxPlayerState, int m_playSpeed, IDVDStreamPlayerVideo *m_VideoPlayerVideo, IDVDStreamPlayerAudio *m_VideoPlayerAudio,
-                     CCurrentStream m_CurrentAudio, CCurrentStream m_CurrentVideo, bool m_HasVideo, bool m_HasAudio, CProcessInfo &processInfo);
-bool OMXStillPlaying(bool waitVideo, bool waitAudio, bool eosVideo, bool eosAudio);
diff --git a/xbmc/cores/omxplayer/OMXImage.h b/xbmc/cores/omxplayer/OMXImage.h
index 55c85bd6a8cd..225700079cf0 100644
--- a/xbmc/cores/omxplayer/OMXImage.h
+++ b/xbmc/cores/omxplayer/OMXImage.h
@@ -12,7 +12,6 @@
 
 #include <IL/OMX_Video.h>
 
-#include "OMXClock.h"
 #if defined(STANDALONE)
 #define XB_FMT_A8R8G8B8 1
 #include "File.h"
diff --git a/xbmc/cores/omxplayer/OMXPlayerAudio.cpp b/xbmc/cores/omxplayer/OMXPlayerAudio.cpp
deleted file mode 100644
index d4ece96bf257..000000000000
--- a/xbmc/cores/omxplayer/OMXPlayerAudio.cpp
+++ /dev/null
@@ -1,598 +0,0 @@
-/*
- *  Copyright (C) 2005-2018 Team Kodi
- *  This file is part of Kodi - https://kodi.tv
- *
- *  SPDX-License-Identifier: GPL-2.0-or-later
- *  See LICENSES/README.md for more information.
- */
-
-#include "OMXPlayerAudio.h"
-
-#include <stdio.h>
-#include <unistd.h>
-#include <iomanip>
-
-#include "platform/linux/XMemUtils.h"
-#include "utils/BitstreamStats.h"
-
-#include "DVDDemuxers/DVDDemuxUtils.h"
-#include "cores/AudioEngine/Utils/AEStreamInfo.h"
-#include "utils/MathUtils.h"
-#include "settings/AdvancedSettings.h"
-#include "settings/Settings.h"
-#include "utils/TimeUtils.h"
-#include "cores/VideoPlayer/Interface/Addon/TimingConstants.h"
-
-#include "platform/linux/RBP.h"
-#include "ServiceBroker.h"
-#include "cores/AudioEngine/Interfaces/AE.h"
-#include "cores/DataCacheCore.h"
-#include "system.h"
-
-#include <algorithm>
-#include <iostream>
-#include <sstream>
-
-class COMXMsgAudioCodecChange : public CDVDMsg
-{
-public:
-  COMXMsgAudioCodecChange(const CDVDStreamInfo &hints, COMXAudioCodecOMX* codec)
-    : CDVDMsg(GENERAL_STREAMCHANGE)
-    , m_codec(codec)
-    , m_hints(hints)
-  {}
- ~COMXMsgAudioCodecChange()
-  {
-    delete m_codec;
-  }
-  COMXAudioCodecOMX   *m_codec;
-  CDVDStreamInfo      m_hints;
-};
-
-OMXPlayerAudio::OMXPlayerAudio(OMXClock *av_clock, CDVDMessageQueue& parent, CProcessInfo &processInfo)
-: CThread("OMXPlayerAudio"), IDVDStreamPlayerAudio(processInfo)
-, m_messageQueue("audio")
-, m_messageParent(parent)
-, m_omxAudio(processInfo)
-{
-  m_av_clock      = av_clock;
-  m_pAudioCodec   = NULL;
-  m_speed         = DVD_PLAYSPEED_NORMAL;
-  m_syncState = IDVDStreamPlayer::SYNC_STARTING;
-  m_stalled       = false;
-  m_audioClock    = DVD_NOPTS_VALUE;
-  m_buffer_empty  = false;
-  m_DecoderOpen   = false;
-  m_bad_state     = false;
-  m_hints_current.Clear();
-
-  bool small_mem = g_RBP.GetArmMem() < 256;
-  m_messageQueue.SetMaxDataSize((small_mem ? 3:6) * 1024 * 1024);
-
-  m_messageQueue.SetMaxTimeSize(8.0);
-  m_passthrough = false;
-  m_flush = false;
-}
-
-
-OMXPlayerAudio::~OMXPlayerAudio()
-{
-  CloseStream(false);
-}
-
-bool OMXPlayerAudio::OpenStream(CDVDStreamInfo hints)
-{
-  m_bad_state = false;
-
-  m_processInfo.ResetAudioCodecInfo();
-  COMXAudioCodecOMX *codec = new COMXAudioCodecOMX(m_processInfo);
-
-  if(!codec || !codec->Open(hints))
-  {
-    CLog::Log(LOGERROR, "Unsupported audio codec");
-    delete codec; codec = NULL;
-    return false;
-  }
-
-  if(m_messageQueue.IsInited())
-    m_messageQueue.Put(new COMXMsgAudioCodecChange(hints, codec), 0);
-  else
-  {
-    OpenStream(hints, codec);
-    m_messageQueue.Init();
-    CLog::Log(LOGNOTICE, "Creating audio thread");
-    Create();
-  }
-
-  return true;
-}
-
-void OMXPlayerAudio::OpenStream(CDVDStreamInfo &hints, COMXAudioCodecOMX *codec)
-{
-  SAFE_DELETE(m_pAudioCodec);
-
-  m_hints           = hints;
-  m_pAudioCodec     = codec;
-
-  if(m_hints.bitspersample == 0)
-    m_hints.bitspersample = 16;
-
-  m_speed           = DVD_PLAYSPEED_NORMAL;
-  m_audioClock      = DVD_NOPTS_VALUE;
-  m_syncState = IDVDStreamPlayer::SYNC_STARTING;
-  m_flush           = false;
-  m_stalled         = m_messageQueue.GetPacketCount(CDVDMsg::DEMUXER_PACKET) == 0;
-  m_format = GetDataFormat(m_hints);
-  m_format.m_sampleRate    = 0;
-  m_format.m_channelLayout = 0;
-
-  CServiceBroker::GetDataCacheCore().SignalAudioInfoChange();
-}
-
-void OMXPlayerAudio::CloseStream(bool bWaitForBuffers)
-{
-  // wait until buffers are empty
-  if (bWaitForBuffers && m_speed > 0) m_messageQueue.WaitUntilEmpty();
-
-  m_messageQueue.Abort();
-
-  if(IsRunning())
-    StopThread();
-
-  m_messageQueue.End();
-
-  if (m_pAudioCodec)
-  {
-    m_pAudioCodec->Dispose();
-    delete m_pAudioCodec;
-    m_pAudioCodec = NULL;
-  }
-
-  CloseDecoder();
-
-  m_speed         = DVD_PLAYSPEED_NORMAL;
-}
-
-void OMXPlayerAudio::OnStartup()
-{
-}
-
-void OMXPlayerAudio::OnExit()
-{
-  CLog::Log(LOGNOTICE, "thread end: OMXPlayerAudio::OnExit()");
-}
-
-bool OMXPlayerAudio::CodecChange()
-{
-  unsigned int old_bitrate = m_hints.bitrate;
-  unsigned int new_bitrate = m_hints_current.bitrate;
-
-  if(m_pAudioCodec)
-  {
-    m_hints.channels = m_pAudioCodec->GetChannels();
-    m_hints.samplerate = m_pAudioCodec->GetSampleRate();
-    m_hints.bitspersample = m_pAudioCodec->GetBitsPerSample();
-  }
-
-  /* only check bitrate changes on AV_CODEC_ID_DTS, AV_CODEC_ID_AC3, AV_CODEC_ID_EAC3 */
-  if(m_hints.codec != AV_CODEC_ID_DTS && m_hints.codec != AV_CODEC_ID_AC3 && m_hints.codec != AV_CODEC_ID_EAC3)
-    new_bitrate = old_bitrate = 0;
-
-  // for passthrough we only care about the codec and the samplerate
-  bool minor_change = m_hints_current.channels       != m_hints.channels ||
-                      m_hints_current.bitspersample  != m_hints.bitspersample ||
-                      old_bitrate                    != new_bitrate;
-
-  if(m_hints_current.codec          != m_hints.codec ||
-     m_hints_current.samplerate     != m_hints.samplerate ||
-     (!m_passthrough && minor_change) || !m_DecoderOpen)
-  {
-    m_hints_current = m_hints;
-
-    m_processInfo.SetAudioSampleRate(m_hints.samplerate);
-    m_processInfo.SetAudioBitsPerSample(m_hints.bitspersample);
-
-    CServiceBroker::GetDataCacheCore().SignalAudioInfoChange();
-    return true;
-  }
-
-  return false;
-}
-
-bool OMXPlayerAudio::Decode(DemuxPacket *pkt, bool bDropPacket, bool bTrickPlay)
-{
-  if(!pkt || m_bad_state || !m_pAudioCodec)
-    return false;
-
-  if(pkt->dts != DVD_NOPTS_VALUE)
-    m_audioClock = pkt->dts;
-
-  bool settings_changed = false;
-  const uint8_t *data_dec = pkt->pData;
-  int            data_len = pkt->iSize;
-
-  if (bTrickPlay)
-  {
-    settings_changed = true;
-  }
-  else if(m_format.m_dataFormat != AE_FMT_RAW && !bDropPacket)
-  {
-    double dts = pkt->dts, pts=pkt->pts;
-    while(!m_bStop && data_len > 0)
-    {
-      int len = m_pAudioCodec->Decode((unsigned char*)data_dec, data_len, dts, pts);
-      if( (len < 0) || (len >  data_len) )
-      {
-        m_pAudioCodec->Reset();
-        break;
-      }
-
-      data_dec+= len;
-      data_len -= len;
-
-      uint8_t *decoded;
-      int decoded_size = m_pAudioCodec->GetData(&decoded, dts, pts);
-
-      if(decoded_size <=0)
-        continue;
-
-      int ret = 0;
-
-      m_audioStats.AddSampleBytes(decoded_size);
-
-      if(CodecChange())
-      {
-        m_DecoderOpen = OpenDecoder();
-        if(!m_DecoderOpen)
-          return false;
-      }
-
-      while(!m_bStop)
-      {
-        // discard if flushing as clocks may be stopped and we'll never submit it
-        if(m_flush)
-          break;
-
-        if(m_omxAudio.GetSpace() < (unsigned int)decoded_size)
-        {
-          Sleep(10);
-          continue;
-        }
-
-        if(!bDropPacket)
-        {
-          ret = m_omxAudio.AddPackets(decoded, decoded_size, dts, pts, m_pAudioCodec->GetFrameSize(), settings_changed);
-          if(ret != decoded_size)
-          {
-            CLog::Log(LOGERROR, "error ret %d decoded_size %d\n", ret, decoded_size);
-          }
-        }
-
-        break;
-
-      }
-    }
-  }
-  else if(!bDropPacket)
-  {
-    if(CodecChange())
-    {
-      m_DecoderOpen = OpenDecoder();
-      if(!m_DecoderOpen)
-        return false;
-    }
-
-    while(!m_bStop)
-    {
-      if(m_flush)
-        break;
-
-      if(m_omxAudio.GetSpace() < (unsigned int)pkt->iSize)
-      {
-        Sleep(10);
-        continue;
-      }
-
-      if(!bDropPacket)
-      {
-        m_omxAudio.AddPackets(pkt->pData, pkt->iSize, m_audioClock, m_audioClock, 0, settings_changed);
-      }
-
-      m_audioStats.AddSampleBytes(pkt->iSize);
-
-      break;
-    }
-  }
-
-  if(bDropPacket || bTrickPlay)
-    m_stalled = false;
-
-  // signal to our parent that we have initialized
-  if (m_syncState == IDVDStreamPlayer::SYNC_STARTING && !bDropPacket && settings_changed)
-  {
-    m_syncState = IDVDStreamPlayer::SYNC_WAITSYNC;
-    SStartMsg msg;
-    msg.player = VideoPlayer_AUDIO;
-    msg.cachetotal = DVD_SEC_TO_TIME(m_omxAudio.GetCacheTotal());
-    msg.cachetime = DVD_SEC_TO_TIME(m_omxAudio.GetCacheTime());
-    msg.timestamp = m_audioClock;
-    m_messageParent.Put(new CDVDMsgType<SStartMsg>(CDVDMsg::PLAYER_STARTED, msg));
-  }
-
-  return true;
-}
-
-void OMXPlayerAudio::Process()
-{
-  m_audioStats.Start();
-
-  while(!m_bStop)
-  {
-    CDVDMsg* pMsg;
-    int timeout = 1000;
-
-    // read next packet and return -1 on error
-    int priority = 1;
-    //Do we want a new audio frame?
-    if (m_syncState == IDVDStreamPlayer::SYNC_STARTING ||              /* when not started */
-        m_speed == DVD_PLAYSPEED_NORMAL || /* when playing normally */
-        m_speed <  DVD_PLAYSPEED_PAUSE  || /* when rewinding */
-       (m_speed >  DVD_PLAYSPEED_NORMAL && m_audioClock < m_av_clock->GetClock())) /* when behind clock in ff */
-      priority = 0;
-
-    if (m_syncState == IDVDStreamPlayer::SYNC_WAITSYNC)
-      priority = 1;
-
-    // consider stream stalled if queue is empty
-    // we can't sync audio to clock with an empty queue
-    if (m_speed == DVD_PLAYSPEED_NORMAL)
-    {
-      timeout = 0;
-    }
-
-    MsgQueueReturnCode ret = m_messageQueue.Get(&pMsg, timeout, priority);
-
-    if (ret == MSGQ_TIMEOUT)
-    {
-      Sleep(10);
-      continue;
-    }
-
-    if (MSGQ_IS_ERROR(ret) || ret == MSGQ_ABORT)
-    {
-      Sleep(10);
-      continue;
-    }
-
-    if (pMsg->IsType(CDVDMsg::DEMUXER_PACKET))
-    {
-      DemuxPacket* pPacket = ((CDVDMsgDemuxerPacket*)pMsg)->GetPacket();
-      bool bPacketDrop     = ((CDVDMsgDemuxerPacket*)pMsg)->GetPacketDrop();
-
-      #ifdef _DEBUG
-      CLog::Log(LOGINFO, "Audio: dts:%.0f pts:%.0f size:%d (s:%d f:%d d:%d l:%d) s:%d %d/%d late:%d,%d", pPacket->dts, pPacket->pts,
-           (int)pPacket->iSize, m_syncState, m_flush, bPacketDrop, m_stalled, m_speed, 0, 0, (int)m_omxAudio.GetAudioRenderingLatency(), (int)m_hints_current.samplerate);
-      #endif
-      if(Decode(pPacket, bPacketDrop, m_speed > DVD_PLAYSPEED_NORMAL || m_speed < 0))
-      {
-        // we are not running until something is cached in output device
-        if(m_stalled && m_omxAudio.GetCacheTime() > 0.0)
-        {
-          CLog::Log(LOGINFO, "COMXPlayerAudio - Switching to normal playback");
-          m_stalled = false;
-        }
-      }
-    }
-    else if (pMsg->IsType(CDVDMsg::GENERAL_SYNCHRONIZE))
-    {
-      if(((CDVDMsgGeneralSynchronize*)pMsg)->Wait( 100, SYNCSOURCE_AUDIO ))
-        CLog::Log(LOGDEBUG, "COMXPlayerAudio - CDVDMsg::GENERAL_SYNCHRONIZE");
-      else
-        m_messageQueue.Put(pMsg->Acquire(), 1); /* push back as prio message, to process other prio messages */
-    }
-    else if (pMsg->IsType(CDVDMsg::GENERAL_RESYNC))
-    { //player asked us to set internal clock
-      double pts = static_cast<CDVDMsgDouble*>(pMsg)->m_value;
-      CLog::Log(LOGDEBUG, "COMXPlayerAudio - CDVDMsg::GENERAL_RESYNC(%f)", pts);
-
-      m_audioClock = pts;
-      m_syncState = IDVDStreamPlayer::SYNC_INSYNC;
-    }
-    else if (pMsg->IsType(CDVDMsg::GENERAL_RESET))
-    {
-      CLog::Log(LOGDEBUG, "COMXPlayerAudio - CDVDMsg::GENERAL_RESET");
-      if (m_pAudioCodec)
-        m_pAudioCodec->Reset();
-      m_syncState = IDVDStreamPlayer::SYNC_STARTING;
-      m_audioClock = DVD_NOPTS_VALUE;
-    }
-    else if (pMsg->IsType(CDVDMsg::GENERAL_FLUSH))
-    {
-      bool sync = static_cast<CDVDMsgBool*>(pMsg)->m_value;
-      CLog::Log(LOGDEBUG, "COMXPlayerAudio - CDVDMsg::GENERAL_FLUSH(%d)", sync);
-      m_omxAudio.Flush();
-      m_stalled   = true;
-      m_syncState = IDVDStreamPlayer::SYNC_STARTING;
-
-      if (m_pAudioCodec)
-        m_pAudioCodec->Reset();
-      m_audioClock = DVD_NOPTS_VALUE;
-      m_flush = false;
-    }
-    else if (pMsg->IsType(CDVDMsg::GENERAL_EOF))
-    {
-      CLog::Log(LOGDEBUG, "COMXPlayerAudio - CDVDMsg::GENERAL_EOF");
-      SubmitEOS();
-    }
-    else if (pMsg->IsType(CDVDMsg::PLAYER_SETSPEED))
-    {
-      if (m_speed != static_cast<CDVDMsgInt*>(pMsg)->m_value)
-      {
-        m_speed = static_cast<CDVDMsgInt*>(pMsg)->m_value;
-        CLog::Log(LOGDEBUG, "COMXPlayerAudio - CDVDMsg::PLAYER_SETSPEED %d", m_speed);
-      }
-    }
-    else if (pMsg->IsType(CDVDMsg::GENERAL_STREAMCHANGE))
-    {
-      COMXMsgAudioCodecChange* msg(static_cast<COMXMsgAudioCodecChange*>(pMsg));
-      CLog::Log(LOGDEBUG, "COMXPlayerAudio - CDVDMsg::GENERAL_STREAMCHANGE");
-      OpenStream(msg->m_hints, msg->m_codec);
-      msg->m_codec = NULL;
-    }
-
-    pMsg->Release();
-  }
-}
-
-void OMXPlayerAudio::Flush(bool sync)
-{
-  m_flush = true;
-  m_messageQueue.Flush();
-  m_messageQueue.Flush(CDVDMsg::GENERAL_EOF);
-  m_messageQueue.Put( new CDVDMsgBool(CDVDMsg::GENERAL_FLUSH, sync), 1);
-}
-
-bool OMXPlayerAudio::IsPassthrough() const
-{
-  return m_passthrough;
-}
-
-AEAudioFormat OMXPlayerAudio::GetDataFormat(CDVDStreamInfo hints)
-{
-  AEAudioFormat format;
-  format.m_dataFormat = AE_FMT_RAW;
-  format.m_sampleRate = hints.samplerate;
-  switch (hints.codec)
-  {
-    case AV_CODEC_ID_AC3:
-      format.m_streamInfo.m_type = CAEStreamInfo::STREAM_TYPE_AC3;
-      format.m_streamInfo.m_sampleRate = hints.samplerate;
-      break;
-
-    case AV_CODEC_ID_EAC3:
-      format.m_streamInfo.m_type = CAEStreamInfo::STREAM_TYPE_EAC3;
-      format.m_streamInfo.m_sampleRate = hints.samplerate * 4;
-      break;
-
-    case AV_CODEC_ID_DTS:
-      format.m_streamInfo.m_type = CAEStreamInfo::STREAM_TYPE_DTSHD;
-      format.m_streamInfo.m_sampleRate = hints.samplerate;
-      break;
-
-    case AV_CODEC_ID_TRUEHD:
-      format.m_streamInfo.m_type = CAEStreamInfo::STREAM_TYPE_TRUEHD;
-      format.m_streamInfo.m_sampleRate = hints.samplerate;
-      break;
-
-    default:
-      format.m_streamInfo.m_type = CAEStreamInfo::STREAM_TYPE_NULL;
-  }
-
-  m_passthrough = CServiceBroker::GetActiveAE()->SupportsRaw(format);
-
-  if (!m_passthrough && hints.codec == AV_CODEC_ID_DTS)
-  {
-    format.m_streamInfo.m_type = CAEStreamInfo::STREAM_TYPE_DTSHD_CORE;
-    m_passthrough = CServiceBroker::GetActiveAE()->SupportsRaw(format);
-  }
-
-  if(!m_passthrough)
-  {
-    if (m_pAudioCodec && m_pAudioCodec->GetBitsPerSample() == 16)
-      format.m_dataFormat = AE_FMT_S16NE;
-    else
-      format.m_dataFormat = AE_FMT_FLOAT;
-  }
-
-  return format;
-}
-
-bool OMXPlayerAudio::OpenDecoder()
-{
-  m_passthrough = false;
-
-  if(m_DecoderOpen)
-  {
-    m_omxAudio.Deinitialize();
-    m_DecoderOpen = false;
-  }
-
-  /* setup audi format for audio render */
-  m_format = GetDataFormat(m_hints);
-
-  CAEChannelInfo channelMap;
-  if (m_pAudioCodec && !m_passthrough)
-  {
-    channelMap = m_pAudioCodec->GetChannelMap();
-  }
-  else if (m_passthrough)
-  {
-    // we just want to get the channel count right to stop OMXAudio.cpp rejecting stream
-    // the actual layout is not used
-    channelMap = AE_CH_LAYOUT_5_1;
-
-    if (m_hints.codec == AV_CODEC_ID_AC3)
-      m_processInfo.SetAudioDecoderName("PT_AC3");
-    else if (m_hints.codec == AV_CODEC_ID_EAC3)
-      m_processInfo.SetAudioDecoderName("PT_EAC3");
-    else
-      m_processInfo.SetAudioDecoderName("PT_DTS");
-  }
-  m_processInfo.SetAudioChannels(channelMap);
-  bool bAudioRenderOpen = m_omxAudio.Initialize(m_format, m_av_clock, m_hints, channelMap, m_passthrough);
-
-  m_codec_name = "";
-  m_bad_state  = !bAudioRenderOpen;
-
-  if(!bAudioRenderOpen)
-  {
-    CLog::Log(LOGERROR, "OMXPlayerAudio : Error open audio output");
-    m_omxAudio.Deinitialize();
-  }
-  else
-  {
-    CLog::Log(LOGINFO, "Audio codec %s channels %d samplerate %d bitspersample %d\n",
-      m_codec_name.c_str(), m_hints.channels, m_hints.samplerate, m_hints.bitspersample);
-  }
-
-  return bAudioRenderOpen;
-}
-
-void OMXPlayerAudio::CloseDecoder()
-{
-  m_omxAudio.Deinitialize();
-  m_DecoderOpen = false;
-}
-
-void OMXPlayerAudio::SubmitEOS()
-{
-  if(!m_bad_state)
-    m_omxAudio.SubmitEOS();
-}
-
-bool OMXPlayerAudio::IsEOS()
-{
-  return m_bad_state || m_omxAudio.IsEOS();
-}
-
-void OMXPlayerAudio::SetSpeed(int speed)
-{
-  if(m_messageQueue.IsInited())
-    m_messageQueue.Put( new CDVDMsgInt(CDVDMsg::PLAYER_SETSPEED, speed), 1 );
-  else
-    m_speed = speed;
-}
-
-int OMXPlayerAudio::GetAudioChannels()
-{
-  return m_hints.channels;
-}
-
-std::string OMXPlayerAudio::GetPlayerInfo()
-{
-  std::ostringstream s;
-  s << "aq:"     << std::setw(2) << std::min(99,m_messageQueue.GetLevel() + MathUtils::round_int(100.0/8.0*m_omxAudio.GetCacheTime())) << "%";
-  s << ", Kb/s:" << std::fixed << std::setprecision(2) << m_audioStats.GetBitrate() / 1024.0;
-
-  return s.str();
-}
diff --git a/xbmc/cores/omxplayer/OMXPlayerAudio.h b/xbmc/cores/omxplayer/OMXPlayerAudio.h
deleted file mode 100644
index 6ae7ecc8fbd1..000000000000
--- a/xbmc/cores/omxplayer/OMXPlayerAudio.h
+++ /dev/null
@@ -1,91 +0,0 @@
-/*
- *  Copyright (C) 2005-2018 Team Kodi
- *  This file is part of Kodi - https://kodi.tv
- *
- *  SPDX-License-Identifier: GPL-2.0-or-later
- *  See LICENSES/README.md for more information.
- */
-
-#pragma once
-
-#include <deque>
-#include <sys/types.h>
-
-#include "OMXClock.h"
-#include "DVDStreamInfo.h"
-#include "OMXAudio.h"
-#include "OMXAudioCodecOMX.h"
-#include "threads/Thread.h"
-#include "IVideoPlayer.h"
-
-#include "DVDDemuxers/DVDDemux.h"
-#include "DVDMessageQueue.h"
-#include "utils/BitstreamStats.h"
-#include "platform/linux/DllBCM.h"
-
-class OMXPlayerAudio : public CThread, public IDVDStreamPlayerAudio
-{
-protected:
-  CDVDMessageQueue      m_messageQueue;
-  CDVDMessageQueue      &m_messageParent;
-
-  CDVDStreamInfo            m_hints_current;
-  CDVDStreamInfo            m_hints;
-  OMXClock                  *m_av_clock;
-  COMXAudio                 m_omxAudio;
-  std::string               m_codec_name;
-  bool                      m_passthrough;
-  AEAudioFormat             m_format;
-  COMXAudioCodecOMX         *m_pAudioCodec;
-  int                       m_speed;
-  bool                      m_silence;
-  double                    m_audioClock;
-
-  bool                      m_stalled;
-  IDVDStreamPlayer::ESyncState m_syncState;
-
-  BitstreamStats            m_audioStats;
-
-  bool                      m_buffer_empty;
-  bool                      m_flush;
-  bool                      m_DecoderOpen;
-
-  bool                      m_bad_state;
-
-  virtual void OnStartup();
-  virtual void OnExit();
-  virtual void Process();
-  void OpenStream(CDVDStreamInfo &hints, COMXAudioCodecOMX *codec);
-private:
-public:
-  OMXPlayerAudio(OMXClock *av_clock, CDVDMessageQueue& parent, CProcessInfo &processInfo);
-  ~OMXPlayerAudio();
-  bool OpenStream(CDVDStreamInfo hints) override;
-  void SendMessage(CDVDMsg* pMsg, int priority = 0) override { m_messageQueue.Put(pMsg, priority); }
-  void FlushMessages()                              override { m_messageQueue.Flush(); }
-  bool AcceptsData() const                          override { return !m_messageQueue.IsFull(); }
-  bool HasData() const                              override { return m_messageQueue.GetDataSize() > 0; }
-  bool IsInited() const                             override { return m_messageQueue.IsInited(); }
-  int  GetLevel() const                             override { return m_messageQueue.GetLevel(); }
-  bool IsStalled() const                            override { return m_stalled;  }
-  bool IsEOS() override;
-  void CloseStream(bool bWaitForBuffers) override;
-  bool CodecChange();
-  bool Decode(DemuxPacket *pkt, bool bDropPacket, bool bTrickPlay);
-  void Flush(bool sync) override;
-  AEAudioFormat GetDataFormat(CDVDStreamInfo hints);
-  bool IsPassthrough() const override;
-  bool OpenDecoder();
-  void CloseDecoder();
-  double GetCurrentPts() override { return m_audioClock; };
-  void SubmitEOS();
-
-  void SetVolume(float fVolume)                          override { m_omxAudio.SetVolume(fVolume); }
-  void SetMute(bool bOnOff)                              override { m_omxAudio.SetMute(bOnOff); }
-  void SetDynamicRangeCompression(long drc)              override { m_omxAudio.SetDynamicRangeCompression(drc); }
-  float GetDynamicRangeAmplification() const             override { return m_omxAudio.GetDynamicRangeAmplification(); }
-  void SetSpeed(int iSpeed) override;
-  int GetAudioChannels() override;
-  std::string GetPlayerInfo() override;
-};
-
diff --git a/xbmc/cores/omxplayer/OMXPlayerVideo.cpp b/xbmc/cores/omxplayer/OMXPlayerVideo.cpp
deleted file mode 100644
index 93f41e749136..000000000000
--- a/xbmc/cores/omxplayer/OMXPlayerVideo.cpp
+++ /dev/null
@@ -1,813 +0,0 @@
-/*
- *  Copyright (C) 2005-2018 Team Kodi
- *  This file is part of Kodi - https://kodi.tv
- *
- *  SPDX-License-Identifier: GPL-2.0-or-later
- *  See LICENSES/README.md for more information.
- */
-
-#include <stdio.h>
-#include <unistd.h>
-#include <sys/time.h>
-#include <algorithm>
-#include <iomanip>
-#include <iostream>
-#include <sstream>
-
-#include "OMXPlayerVideo.h"
-
-#include "ServiceBroker.h"
-#include "platform/linux/XMemUtils.h"
-#include "utils/BitstreamStats.h"
-
-#include "DVDDemuxers/DVDDemuxUtils.h"
-#include "DVDCodecs/DVDCodecUtils.h"
-#include "settings/DisplaySettings.h"
-#include "settings/MediaSettings.h"
-#include "settings/Settings.h"
-#include "settings/SettingsComponent.h"
-#include "cores/VideoPlayer/VideoRenderers/RenderFlags.h"
-#include "cores/VideoPlayer/VideoRenderers/HwDecRender/MMALRenderer.h"
-#include "windowing/GraphicContext.h"
-#include "cores/VideoPlayer/Interface/Addon/TimingConstants.h"
-
-#include "platform/linux/RBP.h"
-
-class COMXMsgVideoCodecChange : public CDVDMsg
-{
-public:
-  COMXMsgVideoCodecChange(const CDVDStreamInfo &hints, COMXVideo *codec)
-    : CDVDMsg(GENERAL_STREAMCHANGE)
-    , m_codec(codec)
-    , m_hints(hints)
-  {}
- ~COMXMsgVideoCodecChange()
-  {
-    delete m_codec;
-  }
-  COMXVideo       *m_codec;
-  CDVDStreamInfo  m_hints;
-};
-
-OMXPlayerVideo::OMXPlayerVideo(OMXClock *av_clock,
-                               CDVDOverlayContainer* pOverlayContainer,
-                               CDVDMessageQueue& parent, CRenderManager& renderManager, CProcessInfo &processInfo)
-: CThread("OMXPlayerVideo")
-, IDVDStreamPlayerVideo(processInfo)
-, m_messageQueue("video")
-, m_omxVideo(renderManager, processInfo)
-, m_messageParent(parent)
-, m_renderManager(renderManager)
-{
-  m_av_clock              = av_clock;
-  m_pOverlayContainer     = pOverlayContainer;
-  m_open                  = false;
-  m_stream_id             = -1;
-  m_fFrameRate            = 25.0f;
-  m_hdmi_clock_sync       = false;
-  m_speed                 = DVD_PLAYSPEED_NORMAL;
-  m_stalled               = false;
-  m_iSubtitleDelay        = 0;
-  m_bRenderSubs           = false;
-  m_iCurrentPts           = DVD_NOPTS_VALUE;
-  m_fForcedAspectRatio    = 0.0f;
-  bool small_mem = g_RBP.GetArmMem() < 256;
-  m_messageQueue.SetMaxDataSize((small_mem ? 10:40) * 1024 * 1024);
-  m_messageQueue.SetMaxTimeSize(8.0);
-
-  m_src_rect.SetRect(0, 0, 0, 0);
-  m_dst_rect.SetRect(0, 0, 0, 0);
-  m_video_stereo_mode = RENDER_STEREO_MODE_OFF;
-  m_display_stereo_mode = RENDER_STEREO_MODE_OFF;
-  m_StereoInvert = false;
-  m_syncState = IDVDStreamPlayer::SYNC_STARTING;
-  m_iCurrentPts = DVD_NOPTS_VALUE;
-  m_nextOverlay = DVD_NOPTS_VALUE;
-  m_flush = false;
-}
-
-OMXPlayerVideo::~OMXPlayerVideo()
-{
-  CloseStream(false);
-}
-
-bool OMXPlayerVideo::OpenStream(CDVDStreamInfo hints)
-{
-  m_hints       = hints;
-  m_hdmi_clock_sync = (CServiceBroker::GetSettingsComponent()->GetSettings()->GetInt(CSettings::SETTING_VIDEOPLAYER_ADJUSTREFRESHRATE) != ADJUST_REFRESHRATE_OFF);
-  m_syncState = IDVDStreamPlayer::SYNC_STARTING;
-  m_flush       = false;
-  m_stalled     = m_messageQueue.GetPacketCount(CDVDMsg::DEMUXER_PACKET) == 0;
-  m_nextOverlay = DVD_NOPTS_VALUE;
-  // force SetVideoRect to be called initially
-  m_src_rect.SetRect(0, 0, 0, 0);
-  m_dst_rect.SetRect(0, 0, 0, 0);
-  m_video_stereo_mode = RENDER_STEREO_MODE_OFF;
-  m_display_stereo_mode = RENDER_STEREO_MODE_OFF;
-  m_StereoInvert = false;
-
-  if (!m_DllBcmHost.Load())
-    return false;
-
-  if(!OpenDecoder())
-  {
-    return false;
-  }
-
-  if(m_messageQueue.IsInited())
-    SendMessage(new COMXMsgVideoCodecChange(hints, NULL), 0);
-  else
-  {
-    if(!OpenStream(hints, NULL))
-      return false;
-    CLog::Log(LOGNOTICE, "Creating video thread");
-    m_messageQueue.Init();
-    m_processInfo.SetLevelVQ(0);
-    Create();
-  }
-
-  m_open        = true;
-  m_iCurrentPts = DVD_NOPTS_VALUE;
-  m_nextOverlay = DVD_NOPTS_VALUE;
-
-  return true;
-}
-
-bool OMXPlayerVideo::OpenStream(CDVDStreamInfo &hints, COMXVideo *codec)
-{
-  return true;
-}
-
-void OMXPlayerVideo::CloseStream(bool bWaitForBuffers)
-{
-  // wait until buffers are empty
-  if (bWaitForBuffers && m_speed > 0) m_messageQueue.WaitUntilEmpty();
-
-  m_messageQueue.Abort();
-
-  if(IsRunning())
-  {
-    m_bAbortOutput = true;
-    StopThread();
-  }
-
-  m_messageQueue.End();
-
-  m_open          = false;
-  m_stream_id     = -1;
-  m_speed         = DVD_PLAYSPEED_NORMAL;
-
-  m_omxVideo.Close();
-
-  if(m_DllBcmHost.IsLoaded())
-    m_DllBcmHost.Unload();
-}
-
-void OMXPlayerVideo::OnStartup()
-{
-}
-
-void OMXPlayerVideo::OnExit()
-{
-  CLog::Log(LOGNOTICE, "thread end: video_thread");
-}
-
-double OMXPlayerVideo::NextOverlay(double pts)
-{
-  double delta_start, delta_stop, min_delta = DVD_NOPTS_VALUE;
-
-  CSingleLock lock(*m_pOverlayContainer);
-  VecOverlays* pVecOverlays = m_pOverlayContainer->GetOverlays();
-  VecOverlaysIter it = pVecOverlays->begin();
-
-  //Find the minimum time before a subtitle is added or removed
-  while (it != pVecOverlays->end())
-  {
-    CDVDOverlay* pOverlay = *it++;
-    if(!pOverlay->bForced && !m_bRenderSubs)
-      continue;
-
-    double pts2 = pOverlay->bForced ? pts : pts - m_iSubtitleDelay;
-
-    delta_start = pOverlay->iPTSStartTime - pts2;
-    delta_stop = pOverlay->iPTSStopTime - pts2;
-
-    // when currently on screen, we periodically update to allow (limited rate) ASS animation
-    if (delta_start <= 0.0 && delta_stop > 0.0 && (min_delta == DVD_NOPTS_VALUE || DVD_MSEC_TO_TIME(100) < min_delta))
-      min_delta = DVD_MSEC_TO_TIME(100);
-
-    else if (delta_start > 0.0 && (min_delta == DVD_NOPTS_VALUE || delta_start < min_delta))
-      min_delta = delta_start;
-
-    else if (delta_stop > 0.0 && (min_delta == DVD_NOPTS_VALUE || delta_stop < min_delta))
-      min_delta = delta_stop;
-  }
-  return min_delta == DVD_NOPTS_VALUE ? pts+DVD_MSEC_TO_TIME(500) : pts+std::max(min_delta, DVD_MSEC_TO_TIME(100));
-}
-
-
-void OMXPlayerVideo::ProcessOverlays(double pts)
-{
-  // remove any overlays that are out of time
-  if (m_syncState == IDVDStreamPlayer::SYNC_INSYNC)
-    m_pOverlayContainer->CleanUp(pts - m_iSubtitleDelay);
-
-  VecOverlays overlays;
-
-  CSingleLock lock(*m_pOverlayContainer);
-
-  VecOverlays* pVecOverlays = m_pOverlayContainer->GetOverlays();
-  VecOverlaysIter it = pVecOverlays->begin();
-
-  //Check all overlays and render those that should be rendered, based on time and forced
-  //Both forced and subs should check timing
-  while (it != pVecOverlays->end())
-  {
-    CDVDOverlay* pOverlay = *it++;
-    if(!pOverlay->bForced && !m_bRenderSubs)
-      continue;
-
-    double pts2 = pOverlay->bForced ? pts : pts - m_iSubtitleDelay;
-
-    if((pOverlay->iPTSStartTime <= pts2 && (pOverlay->iPTSStopTime > pts2 || pOverlay->iPTSStopTime == 0LL)))
-    {
-      if(pOverlay->IsOverlayType(DVDOVERLAY_TYPE_GROUP))
-        overlays.insert(overlays.end(), static_cast<CDVDOverlayGroup*>(pOverlay)->m_overlays.begin()
-                                      , static_cast<CDVDOverlayGroup*>(pOverlay)->m_overlays.end());
-      else
-        overlays.push_back(pOverlay);
-    }
-  }
-
-  for(it = overlays.begin(); it != overlays.end(); ++it)
-  {
-    double pts2 = (*it)->bForced ? pts : pts - m_iSubtitleDelay;
-    m_renderManager.AddOverlay(*it, pts2);
-  }
-}
-
-std::string OMXPlayerVideo::GetStereoMode()
-{
-  std::string  stereoMode;
-
-  switch(m_processInfo.GetVideoSettings().m_StereoMode)
-  {
-    case RENDER_STEREO_MODE_SPLIT_VERTICAL:
-      stereoMode = "left_right";
-      if (m_processInfo.GetVideoSettings().m_StereoInvert)
-        stereoMode = "right_left";
-      break;
-    case RENDER_STEREO_MODE_SPLIT_HORIZONTAL:
-      stereoMode = "top_bottom";
-      if (m_processInfo.GetVideoSettings().m_StereoInvert)
-        stereoMode = "bottom_top";
-      break;
-    default:
-      stereoMode = m_hints.stereo_mode;
-      break;
-  }
-  return stereoMode;
-}
-
-void OMXPlayerVideo::Output(double pts, bool bDropPacket)
-{
-  if (!m_renderManager.IsConfigured()) {
-    CLog::Log(LOGINFO, "%s - renderer not configured", __FUNCTION__);
-    return;
-  }
-
-  if (CThread::m_bStop)
-    return;
-
-  CRect SrcRect, DestRect, viewRect;
-  m_renderManager.GetVideoRect(SrcRect, DestRect, viewRect);
-  SetVideoRect(SrcRect, DestRect);
-
-  // we aim to submit subtitles 100ms early
-  const double preroll = DVD_MSEC_TO_TIME(100);
-  double media_pts = m_av_clock->OMXMediaTime();
-
-  if (m_nextOverlay != DVD_NOPTS_VALUE && media_pts != 0.0 && media_pts + preroll <= m_nextOverlay)
-    return;
-
-  m_bAbortOutput = false;
-  int buffer = m_renderManager.WaitForBuffer(m_bAbortOutput);
-  if (buffer < 0)
-    return;
-
-  double subtitle_pts = m_nextOverlay;
-  double time = subtitle_pts != DVD_NOPTS_VALUE ? subtitle_pts - media_pts : 0.0;
-
-  m_nextOverlay = NextOverlay(media_pts + preroll);
-
-  ProcessOverlays(media_pts + preroll);
-
-  time += m_av_clock->GetAbsoluteClock();
-
-  VideoPicture picture = {};
-  picture.pts = time/DVD_TIME_BASE;
-  MMAL::CMMALBuffer *omvb = new MMAL::CMMALBuffer(0);
-  omvb->m_state = MMAL::MMALStateBypass;
-  picture.videoBuffer = omvb;
-
-  if (m_processInfo.GetVideoStereoMode() != GetStereoMode())
-  {
-    m_processInfo.SetVideoStereoMode(picture.stereoMode);
-    // signal about changes in video parameters
-    m_messageParent.Put(new CDVDMsg(CDVDMsg::PLAYER_AVCHANGE));
-  }
-
-  m_renderManager.AddVideoPicture(picture, m_bAbortOutput, EINTERLACEMETHOD::VS_INTERLACEMETHOD_NONE, (m_syncState == ESyncState::SYNC_STARTING));
-}
-
-bool OMXPlayerVideo::AcceptsData() const
-{
-  bool full = m_messageQueue.IsFull();
-  return !full;
-}
-
-bool OMXPlayerVideo::HasData() const
-{
-  return m_messageQueue.GetDataSize() > 0;
-}
-
-bool OMXPlayerVideo::IsInited() const
-{
-  return m_messageQueue.IsInited();
-}
-
-inline void OMXPlayerVideo::SendMessage(CDVDMsg* pMsg, int priority)
-{
-  m_messageQueue.Put(pMsg, priority);
-  m_processInfo.SetLevelVQ(m_messageQueue.GetLevel());
-}
-
-inline void OMXPlayerVideo::SendMessageBack(CDVDMsg* pMsg, int priority)
-{
-  m_messageQueue.PutBack(pMsg, priority);
-  m_processInfo.SetLevelVQ(m_messageQueue.GetLevel());
-}
-
-inline void OMXPlayerVideo::FlushMessages()
-{
-  m_messageQueue.Flush();
-  m_processInfo.SetLevelVQ(m_messageQueue.GetLevel());
-}
-
-inline MsgQueueReturnCode OMXPlayerVideo::GetMessage(CDVDMsg** pMsg, unsigned int iTimeoutInMilliSeconds, int &priority)
-{
-  MsgQueueReturnCode ret = m_messageQueue.Get(pMsg, iTimeoutInMilliSeconds, priority);
-  m_processInfo.SetLevelVQ(m_messageQueue.GetLevel());
-  return ret;
-}
-
-void OMXPlayerVideo::Process()
-{
-  double frametime = (double)DVD_TIME_BASE / m_fFrameRate;
-  bool bRequestDrop = false;
-  bool settings_changed = false;
-
-  m_videoStats.Start();
-
-  while(!m_bStop)
-  {
-    int iQueueTimeOut = (int)(m_stalled ? frametime / 4 : frametime * 10) / 1000;
-    int iPriority = (m_speed == DVD_PLAYSPEED_PAUSE && m_syncState == IDVDStreamPlayer::SYNC_INSYNC) ? 1 : 0;
-
-    if (m_syncState == IDVDStreamPlayer::SYNC_WAITSYNC)
-      iPriority = 1;
-
-    CDVDMsg* pMsg;
-    MsgQueueReturnCode ret = GetMessage(&pMsg, iQueueTimeOut, iPriority);
-
-    if (MSGQ_IS_ERROR(ret) || ret == MSGQ_ABORT)
-    {
-      CLog::Log(LOGERROR, "OMXPlayerVideo: Got MSGQ_IS_ERROR(%d) Aborting", (int)ret);
-      break;
-    }
-    else if (ret == MSGQ_TIMEOUT)
-    {
-      continue;
-    }
-
-    if (pMsg->IsType(CDVDMsg::GENERAL_SYNCHRONIZE))
-    {
-      if(((CDVDMsgGeneralSynchronize*)pMsg)->Wait(100, SYNCSOURCE_VIDEO))
-      {
-        CLog::Log(LOGDEBUG, "COMXPlayerVideo - CDVDMsg::GENERAL_SYNCHRONIZE");
-
-      }
-      else
-        SendMessage(pMsg->Acquire(), 1); /* push back as prio message, to process other prio messages */
-    }
-    else if (pMsg->IsType(CDVDMsg::GENERAL_RESYNC))
-    {
-      double pts = static_cast<CDVDMsgDouble*>(pMsg)->m_value;
-
-      m_nextOverlay = DVD_NOPTS_VALUE;
-      m_iCurrentPts = DVD_NOPTS_VALUE;
-      m_syncState = IDVDStreamPlayer::SYNC_INSYNC;
-
-      CLog::Log(LOGDEBUG, "CVideoPlayerVideo - CDVDMsg::GENERAL_RESYNC(%f)", pts);
-    }
-    else if (pMsg->IsType(CDVDMsg::VIDEO_SET_ASPECT))
-    {
-      m_fForcedAspectRatio = *((CDVDMsgDouble*)pMsg);
-      CLog::Log(LOGDEBUG, "COMXPlayerVideo - CDVDMsg::VIDEO_SET_ASPECT %.2f", m_fForcedAspectRatio);
-    }
-    else if (pMsg->IsType(CDVDMsg::GENERAL_RESET))
-    {
-      CLog::Log(LOGDEBUG, "COMXPlayerVideo - CDVDMsg::GENERAL_RESET");
-      m_syncState = IDVDStreamPlayer::SYNC_STARTING;
-      m_nextOverlay = DVD_NOPTS_VALUE;
-      m_iCurrentPts = DVD_NOPTS_VALUE;
-    }
-    else if (pMsg->IsType(CDVDMsg::GENERAL_FLUSH)) // private message sent by (COMXPlayerVideo::Flush())
-    {
-      bool sync = static_cast<CDVDMsgBool*>(pMsg)->m_value;
-      CLog::Log(LOGDEBUG, "COMXPlayerVideo - CDVDMsg::GENERAL_FLUSH(%d)", sync);
-      m_stalled = true;
-      m_syncState = IDVDStreamPlayer::SYNC_STARTING;
-      m_nextOverlay = DVD_NOPTS_VALUE;
-      m_iCurrentPts = DVD_NOPTS_VALUE;
-      m_omxVideo.Reset();
-      m_flush = false;
-    }
-    else if (pMsg->IsType(CDVDMsg::PLAYER_SETSPEED))
-    {
-      if (m_speed != static_cast<CDVDMsgInt*>(pMsg)->m_value)
-      {
-        m_speed = static_cast<CDVDMsgInt*>(pMsg)->m_value;
-        CLog::Log(LOGDEBUG, "COMXPlayerVideo - CDVDMsg::PLAYER_SETSPEED %d", m_speed);
-      }
-    }
-    else if (pMsg->IsType(CDVDMsg::GENERAL_STREAMCHANGE))
-    {
-      COMXMsgVideoCodecChange* msg(static_cast<COMXMsgVideoCodecChange*>(pMsg));
-      OpenStream(msg->m_hints, msg->m_codec);
-      msg->m_codec = NULL;
-    }
-    else if (pMsg->IsType(CDVDMsg::GENERAL_EOF))
-    {
-      CLog::Log(LOGDEBUG, "COMXPlayerVideo - CDVDMsg::GENERAL_EOF");
-      SubmitEOS();
-    }
-    else if (pMsg->IsType(CDVDMsg::DEMUXER_PACKET))
-    {
-      DemuxPacket* pPacket = ((CDVDMsgDemuxerPacket*)pMsg)->GetPacket();
-      bool bPacketDrop     = ((CDVDMsgDemuxerPacket*)pMsg)->GetPacketDrop();
-
-      #ifdef _DEBUG
-      CLog::Log(LOGINFO, "Video: dts:%.0f pts:%.0f size:%d (s:%d f:%d d:%d l:%d) s:%d %d/%d late:%d\n", pPacket->dts, pPacket->pts,
-          (int)pPacket->iSize, m_syncState, m_flush, bPacketDrop, m_stalled, m_speed, 0, 0, 0);
-      #endif
-      if (m_messageQueue.GetDataSize() == 0
-      ||  m_speed < 0)
-      {
-        bRequestDrop = false;
-      }
-
-      // if player want's us to drop this packet, do so nomatter what
-      if(bPacketDrop)
-        bRequestDrop = true;
-
-      m_omxVideo.SetDropState(bRequestDrop);
-
-      while (!m_bStop)
-      {
-        // discard if flushing as clocks may be stopped and we'll never submit it
-        if (m_flush)
-           break;
-
-        if((int)m_omxVideo.GetFreeSpace() < pPacket->iSize)
-        {
-          Sleep(10);
-          continue;
-        }
-
-        if (m_stalled)
-        {
-          if(m_syncState == IDVDStreamPlayer::SYNC_INSYNC)
-            CLog::Log(LOGINFO, "COMXPlayerVideo - Stillframe left, switching to normal playback");
-          m_stalled = false;
-        }
-
-        double dts = pPacket->dts;
-        double pts = pPacket->pts;
-        double iVideoDelay = m_renderManager.GetDelay() * (DVD_TIME_BASE / 1000.0);
-
-        if (dts != DVD_NOPTS_VALUE)
-          dts += iVideoDelay;
-
-        if (pts != DVD_NOPTS_VALUE)
-          pts += iVideoDelay;
-
-        m_omxVideo.Decode(pPacket->pData, pPacket->iSize, dts, m_hints.ptsinvalid ? DVD_NOPTS_VALUE : pts, settings_changed);
-
-        if (pts == DVD_NOPTS_VALUE)
-          pts = dts;
-
-        Output(pts, bRequestDrop);
-        if(pts != DVD_NOPTS_VALUE)
-          m_iCurrentPts = pts;
-
-        if (m_syncState == IDVDStreamPlayer::SYNC_STARTING && !bRequestDrop && settings_changed)
-        {
-          m_processInfo.SetVideoDecoderName(m_omxVideo.GetDecoderName(), true);
-          m_syncState = IDVDStreamPlayer::SYNC_WAITSYNC;
-          SStartMsg msg;
-          msg.player = VideoPlayer_VIDEO;
-          msg.cachetime = DVD_MSEC_TO_TIME(50); //! @todo implement
-          msg.cachetotal = DVD_MSEC_TO_TIME(100); //! @todo implement
-          msg.timestamp = pts;
-          m_messageParent.Put(new CDVDMsgType<SStartMsg>(CDVDMsg::PLAYER_STARTED, msg));
-        }
-
-        break;
-      }
-
-      bRequestDrop = false;
-
-      m_videoStats.AddSampleBytes(pPacket->iSize);
-    }
-    pMsg->Release();
-
-  }
-}
-
-bool OMXPlayerVideo::StepFrame()
-{
-  if (!m_av_clock)
-    return false;
-  m_av_clock->OMXStep();
-  return true;
-}
-
-void OMXPlayerVideo::Flush(bool sync)
-{
-  m_flush = true;
-  FlushMessages();
-  SendMessage(new CDVDMsgBool(CDVDMsg::GENERAL_FLUSH, sync), 1);
-  m_bAbortOutput = true;
-}
-
-bool OMXPlayerVideo::OpenDecoder()
-{
-  if(!m_av_clock)
-    return false;
-
-  m_processInfo.ResetVideoCodecInfo();
-
-  if (m_hints.fpsrate && m_hints.fpsscale)
-    m_fFrameRate = DVD_TIME_BASE / CDVDCodecUtils::NormalizeFrameduration((double)DVD_TIME_BASE * m_hints.fpsscale / m_hints.fpsrate);
-  else
-    m_fFrameRate = 25;
-
-  if( m_fFrameRate > 100 || m_fFrameRate < 5 )
-  {
-    CLog::Log(LOGINFO, "OMXPlayerVideo::OpenDecoder : Invalid framerate %d, using forced 25fps and just trust timestamps\n", (int)m_fFrameRate);
-    m_fFrameRate = 25;
-  }
-  m_processInfo.SetVideoFps(m_fFrameRate);
-
-  // use aspect in stream if available
-  if (m_hints.forced_aspect)
-    m_fForcedAspectRatio = m_hints.aspect;
-  else
-    m_fForcedAspectRatio = 0.0;
-
-  bool bVideoDecoderOpen = m_omxVideo.Open(m_hints, m_av_clock, m_hdmi_clock_sync);
-  m_omxVideo.RegisterResolutionUpdateCallBack((void *)this, ResolutionUpdateCallBack);
-
-  if(!bVideoDecoderOpen)
-  {
-    CLog::Log(LOGERROR, "OMXPlayerVideo : Error open video output");
-    m_omxVideo.Close();
-  }
-  else
-  {
-    CLog::Log(LOGINFO, "OMXPlayerVideo::OpenDecoder : Video codec %s width %d height %d profile %d fps %f\n",
-        m_omxVideo.GetDecoderName().c_str() , m_hints.width, m_hints.height, m_hints.profile, m_fFrameRate);
-
-    m_processInfo.SetVideoDecoderName(m_omxVideo.GetDecoderName(), true);
-  }
-
-  m_processInfo.SetVideoDeintMethod("none");
-
-  std::list<EINTERLACEMETHOD> deintMethods;
-  deintMethods.push_back(EINTERLACEMETHOD::VS_INTERLACEMETHOD_AUTO);
-  deintMethods.push_back(EINTERLACEMETHOD::VS_INTERLACEMETHOD_MMAL_ADVANCED);
-  deintMethods.push_back(EINTERLACEMETHOD::VS_INTERLACEMETHOD_MMAL_ADVANCED_HALF);
-  deintMethods.push_back(EINTERLACEMETHOD::VS_INTERLACEMETHOD_MMAL_BOB);
-  deintMethods.push_back(EINTERLACEMETHOD::VS_INTERLACEMETHOD_MMAL_BOB_HALF);
-  m_processInfo.UpdateDeinterlacingMethods(deintMethods);
-
-  return bVideoDecoderOpen;
-}
-
-void OMXPlayerVideo::SubmitEOS()
-{
-  m_omxVideo.SubmitEOS();
-}
-
-bool OMXPlayerVideo::IsEOS()
-{
-  return m_omxVideo.IsEOS();
-}
-
-void OMXPlayerVideo::SetSpeed(int speed)
-{
-  if(m_messageQueue.IsInited())
-        ( new CDVDMsgInt(CDVDMsg::PLAYER_SETSPEED, speed), 1 );
-  else
-    m_speed = speed;
-}
-
-std::string OMXPlayerVideo::GetPlayerInfo()
-{
-  double match = 0.0f, phase = 0.0f, pll = 0.0f;
-  std::ostringstream s;
-  s << "fr:"     << std::fixed << std::setprecision(3) << m_fFrameRate;
-  s << ", vq:"   << std::setw(2) << std::min(99, m_processInfo.GetLevelVQ()) << "%";
-  s << ", dc:"   << m_codecname;
-  s << ", Mb/s:" << std::fixed << std::setprecision(2) << (double)GetVideoBitrate() / (1024.0*1024.0);
-  if (m_omxVideo.GetPlayerInfo(match, phase, pll))
-  {
-     s << ", match:" << std::fixed << std::setprecision(2) << match;
-     s << ", phase:" << std::fixed << std::setprecision(2) << phase;
-     s << ", pll:"   << std::fixed << std::setprecision(5) << pll;
-  }
-  return s.str();
-}
-
-int OMXPlayerVideo::GetVideoBitrate()
-{
-  return (int)m_videoStats.GetBitrate();
-}
-
-double OMXPlayerVideo::GetOutputDelay()
-{
-  double time = m_messageQueue.GetPacketCount(CDVDMsg::DEMUXER_PACKET);
-  if( m_fFrameRate )
-    time = (time * DVD_TIME_BASE) / m_fFrameRate;
-  else
-    time = 0.0;
-
-  if( m_speed != 0 )
-    time = time * DVD_PLAYSPEED_NORMAL / abs(m_speed);
-
-  return time;
-}
-
-void OMXPlayerVideo::SetVideoRect(const CRect &InSrcRect, const CRect &InDestRect)
-{
-  CRect SrcRect = InSrcRect, DestRect = InDestRect;
-  bool stereo_invert = false;
-  RENDER_STEREO_MODE display_stereo_mode = CServiceBroker::GetWinSystem()->GetGfxContext().GetStereoMode();
-  RENDER_STEREO_MODE video_stereo_mode = RENDER_STEREO_MODE_OFF;
-  std::string stereoMode = GetStereoMode();
-
-  if (stereoMode == "left_right")
-  {
-    video_stereo_mode = RENDER_STEREO_MODE_SPLIT_VERTICAL;
-  }
-  else if (stereoMode == "right_left")
-  {
-    video_stereo_mode = RENDER_STEREO_MODE_SPLIT_VERTICAL;
-    stereo_invert = true;
-  }
-  else if (stereoMode == "top_bottom")
-  {
-    video_stereo_mode = RENDER_STEREO_MODE_SPLIT_HORIZONTAL;
-  }
-  else if (stereoMode == "bottom_top")
-  {
-    video_stereo_mode = RENDER_STEREO_MODE_SPLIT_HORIZONTAL;
-    stereo_invert = true;
-  }
-
-  // ignore video stereo mode when 3D display mode is disabled
-  if (display_stereo_mode == RENDER_STEREO_MODE_OFF)
-    video_stereo_mode = RENDER_STEREO_MODE_OFF;
-
-  // fix up transposed video
-  if (m_hints.orientation == 90 || m_hints.orientation == 270)
-  {
-    float newWidth, newHeight;
-    float aspectRatio = GetAspectRatio();
-    // clamp width if too wide
-    if (DestRect.Height() > DestRect.Width())
-    {
-      newWidth = DestRect.Width(); // clamp to the width of the old dest rect
-      newHeight = newWidth * aspectRatio;
-    }
-    else // else clamp to height
-    {
-      newHeight = DestRect.Height(); // clamp to the height of the old dest rect
-      newWidth = newHeight / aspectRatio;
-    }
-
-    // calculate the center point of the view and offsets
-    float centerX = DestRect.x1 + DestRect.Width() * 0.5f;
-    float centerY = DestRect.y1 + DestRect.Height() * 0.5f;
-    float diffX = newWidth * 0.5f;
-    float diffY = newHeight * 0.5f;
-
-    DestRect.x1 = centerX - diffX;
-    DestRect.x2 = centerX + diffX;
-    DestRect.y1 = centerY - diffY;
-    DestRect.y2 = centerY + diffY;
-  }
-
-  // check if destination rect or video view mode has changed
-  if (!(m_dst_rect != DestRect) && !(m_src_rect != SrcRect) && m_video_stereo_mode == video_stereo_mode && m_display_stereo_mode == display_stereo_mode && m_StereoInvert == stereo_invert)
-    return;
-
-  CLog::Log(LOGDEBUG, "OMXPlayerVideo::%s %d,%d,%d,%d -> %d,%d,%d,%d (%d,%d,%d,%d,%s)", __func__,
-      (int)SrcRect.x1, (int)SrcRect.y1, (int)SrcRect.x2, (int)SrcRect.y2,
-      (int)DestRect.x1, (int)DestRect.y1, (int)DestRect.x2, (int)DestRect.y2,
-      video_stereo_mode, display_stereo_mode, m_processInfo.GetVideoSettings().m_StereoInvert, CServiceBroker::GetWinSystem()->GetGfxContext().GetStereoView(), OMXPlayerVideo::GetStereoMode().c_str());
-
-  m_src_rect = SrcRect;
-  m_dst_rect = DestRect;
-  m_video_stereo_mode = video_stereo_mode;
-  m_display_stereo_mode = display_stereo_mode;
-  m_StereoInvert = stereo_invert;
-
-  // might need to scale up m_dst_rect to display size as video decodes
-  // to separate video plane that is at display size.
-  RESOLUTION res = CServiceBroker::GetWinSystem()->GetGfxContext().GetVideoResolution();
-  CRect gui(0, 0, CDisplaySettings::GetInstance().GetResolutionInfo(res).iWidth, CDisplaySettings::GetInstance().GetResolutionInfo(res).iHeight);
-  CRect display(0, 0, CDisplaySettings::GetInstance().GetResolutionInfo(res).iScreenWidth, CDisplaySettings::GetInstance().GetResolutionInfo(res).iScreenHeight);
-
-  if (display_stereo_mode == RENDER_STEREO_MODE_SPLIT_VERTICAL)
-  {
-    float width = DestRect.x2 - DestRect.x1;
-    DestRect.x1 *= 2.0f;
-    DestRect.x2 = DestRect.x1 + 2.0f * width;
-  }
-  else if (display_stereo_mode == RENDER_STEREO_MODE_SPLIT_HORIZONTAL)
-  {
-    float height = DestRect.y2 - DestRect.y1;
-    DestRect.y1 *= 2.0f;
-    DestRect.y2 = DestRect.y1 + 2.0f * height;
-  }
-
-  if (gui != display)
-  {
-    float xscale = display.Width()  / gui.Width();
-    float yscale = display.Height() / gui.Height();
-    DestRect.x1 *= xscale;
-    DestRect.x2 *= xscale;
-    DestRect.y1 *= yscale;
-    DestRect.y2 *= yscale;
-  }
-  m_omxVideo.SetVideoRect(SrcRect, DestRect, m_video_stereo_mode, m_display_stereo_mode, m_StereoInvert);
-}
-
-void OMXPlayerVideo::ResolutionUpdateCallBack(uint32_t width, uint32_t height, float framerate, float display_aspect)
-{
-  RESOLUTION res  = CServiceBroker::GetWinSystem()->GetGfxContext().GetVideoResolution();
-  uint32_t video_width   = CDisplaySettings::GetInstance().GetResolutionInfo(res).iScreenWidth;
-  uint32_t video_height  = CDisplaySettings::GetInstance().GetResolutionInfo(res).iScreenHeight;
-
-  m_processInfo.SetVideoStereoMode(m_hints.stereo_mode);
-
-  unsigned int iDisplayWidth  = width;
-  unsigned int iDisplayHeight = height;
-
-  /* use forced aspect if any */
-  if( m_fForcedAspectRatio != 0.0f )
-    iDisplayWidth = (int) (iDisplayHeight * m_fForcedAspectRatio);
-  else if( display_aspect != 0.0f )
-    iDisplayWidth = (int) (iDisplayHeight * display_aspect);
-
-  m_fFrameRate = DVD_TIME_BASE / CDVDCodecUtils::NormalizeFrameduration((double)DVD_TIME_BASE / framerate);
-  m_processInfo.SetVideoFps(m_fFrameRate);
-  m_processInfo.SetVideoDimensions(width, height);
-  m_processInfo.SetVideoDAR((float)iDisplayWidth / (float)iDisplayHeight);
-
-  CLog::Log(LOGDEBUG,"%s - change configuration. video:%dx%d. framerate: %4.2f. %dx%d format: BYPASS",
-      __FUNCTION__, video_width, video_height, m_fFrameRate, iDisplayWidth, iDisplayHeight);
-
-  VideoPicture picture = {};
-  picture.iWidth = width;
-  picture.iHeight = height;
-  picture.iDisplayWidth = iDisplayWidth;
-  picture.iDisplayHeight = iDisplayHeight;
-
-  if(!m_renderManager.Configure(picture, m_fFrameRate, m_hints.orientation, 3))
-  {
-    CLog::Log(LOGERROR, "%s - failed to configure renderer", __FUNCTION__);
-    return;
-  }
-
-  m_src_rect.SetRect(0, 0, 0, 0);
-  m_dst_rect.SetRect(0, 0, 0, 0);
-}
-
-void OMXPlayerVideo::ResolutionUpdateCallBack(void *ctx, uint32_t width, uint32_t height, float framerate, float display_aspect)
-{
-  OMXPlayerVideo *player = static_cast<OMXPlayerVideo*>(ctx);
-  player->ResolutionUpdateCallBack(width, height, framerate, display_aspect);
-}
diff --git a/xbmc/cores/omxplayer/OMXPlayerVideo.h b/xbmc/cores/omxplayer/OMXPlayerVideo.h
deleted file mode 100644
index f184cd0e93f8..000000000000
--- a/xbmc/cores/omxplayer/OMXPlayerVideo.h
+++ /dev/null
@@ -1,108 +0,0 @@
-/*
- *  Copyright (C) 2005-2018 Team Kodi
- *  This file is part of Kodi - https://kodi.tv
- *
- *  SPDX-License-Identifier: GPL-2.0-or-later
- *  See LICENSES/README.md for more information.
- */
-
-#pragma once
-
-#include <deque>
-#include <sys/types.h>
-
-#include "OMXClock.h"
-#include "DVDStreamInfo.h"
-#include "OMXVideo.h"
-#include "threads/Thread.h"
-#include "IVideoPlayer.h"
-
-#include "DVDDemuxers/DVDDemux.h"
-#include "DVDCodecs/Video/DVDVideoCodec.h"
-#include "DVDOverlayContainer.h"
-#include "DVDMessageQueue.h"
-#include "utils/BitstreamStats.h"
-#include "platform/linux/DllBCM.h"
-#include "cores/VideoPlayer/VideoRenderers/RenderManager.h"
-#include <atomic>
-
-class OMXPlayerVideo : public CThread, public IDVDStreamPlayerVideo
-{
-protected:
-  CDVDMessageQueue          m_messageQueue;
-  int                       m_stream_id;
-  bool                      m_open;
-  CDVDStreamInfo            m_hints;
-  double                    m_iCurrentPts;
-  double                    m_nextOverlay;
-  OMXClock                  *m_av_clock;
-  COMXVideo                 m_omxVideo;
-  float                     m_fFrameRate;
-  bool                      m_hdmi_clock_sync;
-  int                       m_speed;
-  bool                      m_stalled;
-  IDVDStreamPlayer::ESyncState m_syncState;
-  bool                      m_flush;
-  std::string               m_codecname;
-  std::atomic_bool          m_bAbortOutput;
-  double                    m_iSubtitleDelay;
-  bool                      m_bRenderSubs;
-
-  float                     m_fForcedAspectRatio;
-
-  CRect                     m_src_rect;
-  CRect                     m_dst_rect;
-  RENDER_STEREO_MODE        m_video_stereo_mode;
-  RENDER_STEREO_MODE        m_display_stereo_mode;
-  bool                      m_StereoInvert;
-  DllBcmHost                m_DllBcmHost;
-
-  CDVDOverlayContainer  *m_pOverlayContainer;
-  CDVDMessageQueue      &m_messageParent;
-
-  BitstreamStats m_videoStats;
-  CRenderManager& m_renderManager;
-
-  void ProcessOverlays(double pts);
-  double NextOverlay(double pts);
-  bool OpenStream(CDVDStreamInfo &hints, COMXVideo *codec);
-
-  virtual void OnStartup();
-  virtual void OnExit();
-  virtual void Process();
-  void SendMessageBack(CDVDMsg* pMsg, int priority = 0);
-  MsgQueueReturnCode GetMessage(CDVDMsg** pMsg, unsigned int iTimeoutInMilliSeconds, int &priority);
-  std::string GetStereoMode();
-private:
-public:
-  OMXPlayerVideo(OMXClock *av_clock, CDVDOverlayContainer* pOverlayContainer, CDVDMessageQueue& parent, CRenderManager& renderManager, CProcessInfo &processInfo);
-  ~OMXPlayerVideo();
-  bool OpenStream(CDVDStreamInfo hints) override;
-  void SendMessage(CDVDMsg* pMsg, int priority = 0) override;
-  void FlushMessages() override;
-  bool AcceptsData() const override;
-  bool HasData() const override;
-  bool IsInited() const override;
-  bool IsStalled() const                            override { return m_stalled;  }
-  bool IsEOS() override;
-  void CloseStream(bool bWaitForBuffers) override;
-  void Output(double pts, bool bDropPacket);
-  bool StepFrame();
-  void Flush(bool sync) override;
-  bool OpenDecoder();
-  double GetCurrentPts() override { return m_iCurrentPts; };
-  void  SubmitEOS();
-  bool SubmittedEOS() const { return m_omxVideo.SubmittedEOS(); }
-  void SetSpeed(int iSpeed) override;
-  std::string GetPlayerInfo() override;
-  int GetVideoBitrate() override;
-  double GetOutputDelay() override;
-  double GetSubtitleDelay()                         override { return m_iSubtitleDelay; }
-  void SetSubtitleDelay(double delay)               override { m_iSubtitleDelay = delay; }
-  void EnableSubtitle(bool bEnable)                 override { m_bRenderSubs = bEnable; }
-  bool IsSubtitleEnabled()                          override { return m_bRenderSubs; }
-  float GetAspectRatio()                                     { return m_renderManager.GetAspectRatio(); }
-  void  SetVideoRect(const CRect &SrcRect, const CRect &DestRect);
-  void ResolutionUpdateCallBack(uint32_t width, uint32_t height, float framerate, float pixel_aspect);
-  static void ResolutionUpdateCallBack(void *ctx, uint32_t width, uint32_t height, float framerate, float pixel_aspect);
-};
diff --git a/xbmc/cores/omxplayer/OMXVideo.cpp b/xbmc/cores/omxplayer/OMXVideo.cpp
deleted file mode 100644
index 28bd3ec6b135..000000000000
--- a/xbmc/cores/omxplayer/OMXVideo.cpp
+++ /dev/null
@@ -1,941 +0,0 @@
-/*
- *  Copyright (C) 2010-2018 Team Kodi
- *  This file is part of Kodi - https://kodi.tv
- *
- *  SPDX-License-Identifier: GPL-2.0-or-later
- *  See LICENSES/README.md for more information.
- */
-
-#include "OMXVideo.h"
-
-#include "ServiceBroker.h"
-#include "utils/log.h"
-#include "platform/linux/XMemUtils.h"
-#include "DVDDemuxers/DVDDemuxUtils.h"
-#include "settings/AdvancedSettings.h"
-#include "settings/MediaSettings.h"
-#include "cores/VideoPlayer/VideoRenderers/RenderManager.h"
-#include "xbmc/windowing/GraphicContext.h"
-#include "settings/Settings.h"
-#include "settings/SettingsComponent.h"
-#include "utils/BitstreamConverter.h"
-#include "cores/VideoPlayer/Interface/Addon/TimingConstants.h"
-
-#include "platform/linux/RBP.h"
-
-#include <sys/time.h>
-#include <inttypes.h>
-
-#ifdef CLASSNAME
-#undef CLASSNAME
-#endif
-#define CLASSNAME "COMXVideo"
-
-#define OMX_VIDEO_DECODER       "OMX.broadcom.video_decode"
-#define OMX_H264BASE_DECODER    OMX_VIDEO_DECODER
-#define OMX_H264MAIN_DECODER    OMX_VIDEO_DECODER
-#define OMX_H264HIGH_DECODER    OMX_VIDEO_DECODER
-#define OMX_MPEG4_DECODER       OMX_VIDEO_DECODER
-#define OMX_MSMPEG4V1_DECODER   OMX_VIDEO_DECODER
-#define OMX_MSMPEG4V2_DECODER   OMX_VIDEO_DECODER
-#define OMX_MSMPEG4V3_DECODER   OMX_VIDEO_DECODER
-#define OMX_MPEG4EXT_DECODER    OMX_VIDEO_DECODER
-#define OMX_MPEG2V_DECODER      OMX_VIDEO_DECODER
-#define OMX_VC1_DECODER         OMX_VIDEO_DECODER
-#define OMX_WMV3_DECODER        OMX_VIDEO_DECODER
-#define OMX_VP6_DECODER         OMX_VIDEO_DECODER
-#define OMX_VP8_DECODER         OMX_VIDEO_DECODER
-#define OMX_THEORA_DECODER      OMX_VIDEO_DECODER
-#define OMX_MJPEG_DECODER       OMX_VIDEO_DECODER
-
-#define MAX_TEXT_LENGTH 1024
-
-COMXVideo::COMXVideo(CRenderManager& renderManager, CProcessInfo &processInfo) : m_video_codec_name("")
-, m_renderManager(renderManager)
-, m_processInfo(processInfo)
-{
-  m_is_open           = false;
-  m_extradata         = NULL;
-  m_extrasize         = 0;
-  m_deinterlace       = false;
-  m_hdmi_clock_sync   = false;
-  m_drop_state        = false;
-  m_decoded_width     = 0;
-  m_decoded_height    = 0;
-  m_omx_clock         = NULL;
-  m_av_clock          = NULL;
-  m_res_callback      = NULL;
-  m_res_ctx           = NULL;
-  m_submitted_eos     = false;
-  m_failed_eos        = false;
-  m_settings_changed  = false;
-  m_setStartTime      = false;
-  m_transform         = OMX_DISPLAY_ROT0;
-  m_isPi1             = g_RBP.RaspberryPiVersion() == 1;
-}
-
-COMXVideo::~COMXVideo()
-{
-  Close();
-}
-
-bool COMXVideo::SendDecoderConfig()
-{
-  CSingleLock lock (m_critSection);
-  OMX_ERRORTYPE omx_err   = OMX_ErrorNone;
-
-  /* send decoder config */
-  if(m_extrasize > 0 && m_extradata != NULL)
-  {
-    OMX_BUFFERHEADERTYPE *omx_buffer = m_omx_decoder.GetInputBuffer();
-
-    if(omx_buffer == NULL)
-    {
-      CLog::Log(LOGERROR, "%s::%s - buffer error 0x%08x", CLASSNAME, __func__, omx_err);
-      return false;
-    }
-
-    omx_buffer->nOffset = 0;
-    omx_buffer->nFilledLen = std::min((OMX_U32)m_extrasize, omx_buffer->nAllocLen);
-
-    memset((unsigned char *)omx_buffer->pBuffer, 0x0, omx_buffer->nAllocLen);
-    memcpy((unsigned char *)omx_buffer->pBuffer, m_extradata, omx_buffer->nFilledLen);
-    omx_buffer->nFlags = OMX_BUFFERFLAG_CODECCONFIG | OMX_BUFFERFLAG_ENDOFFRAME;
-
-    omx_err = m_omx_decoder.EmptyThisBuffer(omx_buffer);
-    if (omx_err != OMX_ErrorNone)
-    {
-      CLog::Log(LOGERROR, "%s::%s - OMX_EmptyThisBuffer() failed with result(0x%x)\n", CLASSNAME, __func__, omx_err);
-      m_omx_decoder.DecoderEmptyBufferDone(m_omx_decoder.GetComponent(), omx_buffer);
-      return false;
-    }
-  }
-  return true;
-}
-
-bool COMXVideo::NaluFormatStartCodes(enum AVCodecID codec, uint8_t *in_extradata, int in_extrasize)
-{
-  switch(codec)
-  {
-    case AV_CODEC_ID_H264:
-      if (in_extrasize < 7 || in_extradata == NULL)
-        return true;
-      // valid avcC atom data always starts with the value 1 (version), otherwise annexb
-      else if ( *in_extradata != 1 )
-        return true;
-    default: break;
-  }
-  return false;
-}
-
-bool COMXVideo::PortSettingsChanged(ResolutionUpdateInfo &resinfo)
-{
-  OMX_ERRORTYPE omx_err   = OMX_ErrorNone;
-
-  if (m_settings_changed)
-  {
-    m_omx_decoder.DisablePort(m_omx_decoder.GetOutputPort(), true);
-  }
-
-  OMX_PARAM_PORTDEFINITIONTYPE port_image;
-  OMX_INIT_STRUCTURE(port_image);
-  port_image.nPortIndex = m_omx_decoder.GetOutputPort();
-  omx_err = m_omx_decoder.GetParameter(OMX_IndexParamPortDefinition, &port_image);
-  if(omx_err != OMX_ErrorNone)
-  {
-    CLog::Log(LOGERROR, "%s::%s - error m_omx_decoder.GetParameter(OMX_IndexParamPortDefinition) omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
-  }
-
-  OMX_CONFIG_POINTTYPE pixel_aspect;
-  OMX_INIT_STRUCTURE(pixel_aspect);
-  pixel_aspect.nPortIndex = m_omx_decoder.GetOutputPort();
-  omx_err = m_omx_decoder.GetParameter(OMX_IndexParamBrcmPixelAspectRatio, &pixel_aspect);
-  if(omx_err != OMX_ErrorNone)
-  {
-    CLog::Log(LOGERROR, "%s::%s - error m_omx_decoder.GetParameter(OMX_IndexParamBrcmPixelAspectRatio) omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
-  }
-
-  OMX_CONFIG_INTERLACETYPE interlace;
-  OMX_INIT_STRUCTURE(interlace);
-  interlace.nPortIndex = m_omx_decoder.GetOutputPort();
-  omx_err = m_omx_decoder.GetConfig(OMX_IndexConfigCommonInterlace, &interlace);
-
-  m_deinterlace = interlace.eMode != OMX_InterlaceProgressive;
-
-  CLog::Log(LOGDEBUG, "%s::%s - %dx%d@%.2f interlace:%d deinterlace:%d", CLASSNAME, __func__,
-      port_image.format.video.nFrameWidth, port_image.format.video.nFrameHeight,
-      port_image.format.video.xFramerate / (float)(1<<16), interlace.eMode, m_deinterlace);
-
-  // let OMXPlayerVideo know about resolution so it can inform RenderManager
-  resinfo.width = port_image.format.video.nFrameWidth;
-  resinfo.height = port_image.format.video.nFrameHeight;
-  resinfo.framerate = port_image.format.video.xFramerate / (float)(1<<16);
-  resinfo.display_aspect = 0.0f;
-  resinfo.changed = true;
-  if (pixel_aspect.nX && pixel_aspect.nY)
-    resinfo.display_aspect = (float)pixel_aspect.nX * port_image.format.video.nFrameWidth / ((float)pixel_aspect.nY * port_image.format.video.nFrameHeight);
-
-  if (m_settings_changed)
-  {
-    m_omx_decoder.EnablePort(m_omx_decoder.GetOutputPort(), true);
-    return true;
-  }
-
-  if(!m_omx_render.Initialize("OMX.broadcom.video_render", OMX_IndexParamVideoInit))
-    return false;
-
-  m_omx_render.ResetEos();
-
-  if(!m_omx_sched.Initialize("OMX.broadcom.video_scheduler", OMX_IndexParamVideoInit))
-    return false;
-
-  if(m_deinterlace)
-  {
-    if(!m_omx_image_fx.Initialize("OMX.broadcom.image_fx", OMX_IndexParamImageInit))
-      return false;
-  }
-
-  OMX_CONFIG_DISPLAYREGIONTYPE configDisplay;
-  OMX_INIT_STRUCTURE(configDisplay);
-  configDisplay.nPortIndex = m_omx_render.GetInputPort();
-
-  if(m_hdmi_clock_sync)
-  {
-    OMX_CONFIG_LATENCYTARGETTYPE latencyTarget;
-    OMX_INIT_STRUCTURE(latencyTarget);
-    latencyTarget.nPortIndex = m_omx_render.GetInputPort();
-    latencyTarget.bEnabled = OMX_TRUE;
-    latencyTarget.nFilter = 2;
-    latencyTarget.nTarget = 4000;
-    latencyTarget.nShift = 3;
-    latencyTarget.nSpeedFactor = -135;
-    latencyTarget.nInterFactor = 500;
-    latencyTarget.nAdjCap = 20;
-
-    omx_err = m_omx_render.SetConfig(OMX_IndexConfigLatencyTarget, &latencyTarget);
-    if (omx_err != OMX_ErrorNone)
-    {
-      CLog::Log(LOGERROR, "%s::%s - OMX_IndexConfigLatencyTarget omx_err(0%08x)", CLASSNAME, __func__, omx_err);
-      return false;
-    }
-  }
-
-  EINTERLACEMETHOD interlace_method = m_processInfo.GetVideoSettings().m_InterlaceMethod;
-  if (interlace_method == VS_INTERLACEMETHOD_AUTO)
-    interlace_method = m_isPi1 ? VS_INTERLACEMETHOD_MMAL_BOB : VS_INTERLACEMETHOD_MMAL_ADVANCED;
-
-  if (m_deinterlace && interlace_method != VS_INTERLACEMETHOD_NONE)
-  {
-    bool advanced_deinterlace = interlace_method == VS_INTERLACEMETHOD_MMAL_ADVANCED || interlace_method == VS_INTERLACEMETHOD_MMAL_ADVANCED_HALF;
-    bool half_framerate = interlace_method == VS_INTERLACEMETHOD_MMAL_ADVANCED_HALF || interlace_method == VS_INTERLACEMETHOD_MMAL_BOB_HALF;
-
-    if (advanced_deinterlace && !half_framerate)
-       m_processInfo.SetVideoDeintMethod("adv(x2)");
-    else if (advanced_deinterlace && half_framerate)
-       m_processInfo.SetVideoDeintMethod("adv(x1)");
-    else if (!advanced_deinterlace && !half_framerate)
-       m_processInfo.SetVideoDeintMethod("bob(x2)");
-    else if (!advanced_deinterlace && half_framerate)
-       m_processInfo.SetVideoDeintMethod("bob(x1)");
-
-    if (!half_framerate)
-      resinfo.framerate *= 2.0f;
-
-    if (!advanced_deinterlace)
-    {
-      // Image_fx assumed 3 frames of context. simple deinterlace doesn't require this
-      OMX_PARAM_U32TYPE extra_buffers;
-      OMX_INIT_STRUCTURE(extra_buffers);
-      extra_buffers.nU32 = -2;
-
-      omx_err = m_omx_image_fx.SetParameter(OMX_IndexParamBrcmExtraBuffers, &extra_buffers);
-      if(omx_err != OMX_ErrorNone)
-      {
-        CLog::Log(LOGERROR, "%s::%s error OMX_IndexParamBrcmExtraBuffers omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
-        return false;
-      }
-    }
-
-    OMX_CONFIG_IMAGEFILTERPARAMSTYPE image_filter;
-    OMX_INIT_STRUCTURE(image_filter);
-
-    image_filter.nPortIndex = m_omx_image_fx.GetOutputPort();
-    image_filter.nNumParams = 4;
-    image_filter.nParams[0] = 3;
-    image_filter.nParams[1] = 0;
-    image_filter.nParams[2] = half_framerate;
-    image_filter.nParams[3] = 1; // qpu
-    if (!advanced_deinterlace)
-      image_filter.eImageFilter = OMX_ImageFilterDeInterlaceFast;
-    else
-      image_filter.eImageFilter = OMX_ImageFilterDeInterlaceAdvanced;
-
-    omx_err = m_omx_image_fx.SetConfig(OMX_IndexConfigCommonImageFilterParameters, &image_filter);
-    if(omx_err != OMX_ErrorNone)
-    {
-      CLog::Log(LOGERROR, "%s::%s - OMX_IndexConfigCommonImageFilterParameters omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
-      return false;
-    }
-  }
-  else
-  {
-    m_processInfo.SetVideoDeintMethod("none");
-  }
-
-  if(m_deinterlace)
-  {
-    m_omx_tunnel_decoder.Initialize(&m_omx_decoder, m_omx_decoder.GetOutputPort(), &m_omx_image_fx, m_omx_image_fx.GetInputPort());
-    m_omx_tunnel_image_fx.Initialize(&m_omx_image_fx, m_omx_image_fx.GetOutputPort(), &m_omx_sched, m_omx_sched.GetInputPort());
-  }
-  else
-  {
-    m_omx_tunnel_decoder.Initialize(&m_omx_decoder, m_omx_decoder.GetOutputPort(), &m_omx_sched, m_omx_sched.GetInputPort());
-  }
-  m_omx_tunnel_sched.Initialize(&m_omx_sched, m_omx_sched.GetOutputPort(), &m_omx_render, m_omx_render.GetInputPort());
-
-  m_omx_tunnel_clock.Initialize(m_omx_clock, m_omx_clock->GetInputPort()  + 1, &m_omx_sched, m_omx_sched.GetOutputPort()  + 1);
-
-  omx_err = m_omx_tunnel_clock.Establish();
-  if(omx_err != OMX_ErrorNone)
-  {
-    CLog::Log(LOGERROR, "%s::%s - m_omx_tunnel_clock.Establish omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
-    return false;
-  }
-
-  omx_err = m_omx_tunnel_decoder.Establish();
-  if(omx_err != OMX_ErrorNone)
-  {
-    CLog::Log(LOGERROR, "%s::%s - m_omx_tunnel_decoder.Establish omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
-    return false;
-  }
-
-  if(m_deinterlace)
-  {
-    omx_err = m_omx_tunnel_image_fx.Establish();
-    if(omx_err != OMX_ErrorNone)
-    {
-      CLog::Log(LOGERROR, "%s::%s - m_omx_tunnel_image_fx.Establish omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
-      return false;
-    }
-
-    omx_err = m_omx_image_fx.SetStateForComponent(OMX_StateExecuting);
-    if (omx_err != OMX_ErrorNone)
-    {
-      CLog::Log(LOGERROR, "%s::%s - m_omx_image_fx.SetStateForComponent omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
-      return false;
-    }
-  }
-
-  omx_err = m_omx_tunnel_sched.Establish();
-  if(omx_err != OMX_ErrorNone)
-  {
-    CLog::Log(LOGERROR, "%s::%s - m_omx_tunnel_sched.Establish omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
-    return false;
-  }
-
-  omx_err = m_omx_sched.SetStateForComponent(OMX_StateExecuting);
-  if (omx_err != OMX_ErrorNone)
-  {
-    CLog::Log(LOGERROR, "%s::%s - m_omx_sched.SetStateForComponent omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
-    return false;
-  }
-
-  omx_err = m_omx_render.SetStateForComponent(OMX_StateExecuting);
-  if (omx_err != OMX_ErrorNone)
-  {
-    CLog::Log(LOGERROR, "%s::%s - m_omx_render.SetStateForComponent omx_err(0x%08x)", CLASSNAME, __func__, omx_err);
-    return false;
-  }
-
-  m_settings_changed = true;
-  return true;
-}
-
-bool COMXVideo::Open(CDVDStreamInfo &hints, OMXClock *clock, bool hdmi_clock_sync)
-{
-  CSingleLock lock (m_critSection);
-  bool vflip = false;
-  Close();
-  OMX_ERRORTYPE omx_err   = OMX_ErrorNone;
-  std::string decoder_name;
-  m_settings_changed = false;
-  m_setStartTime = true;
-
-  m_res_ctx           = NULL;
-  m_res_callback      = NULL;
-
-  m_video_codec_name      = "";
-  m_codingType            = OMX_VIDEO_CodingUnused;
-
-  m_decoded_width  = hints.width;
-  m_decoded_height = hints.height;
-
-  m_hdmi_clock_sync = hdmi_clock_sync;
-  m_submitted_eos = false;
-  m_failed_eos    = false;
-
-  if(hints.extrasize > 0 && hints.extradata != NULL)
-  {
-    m_extrasize = hints.extrasize;
-    m_extradata = (uint8_t *)malloc(m_extrasize);
-    memcpy(m_extradata, hints.extradata, hints.extrasize);
-  }
-
-  switch (hints.codec)
-  {
-    case AV_CODEC_ID_H264:
-    {
-      switch(hints.profile)
-      {
-        case FF_PROFILE_H264_BASELINE:
-          // (role name) video_decoder.avc
-          // H.264 Baseline profile
-          decoder_name = OMX_H264BASE_DECODER;
-          m_codingType = OMX_VIDEO_CodingAVC;
-          m_video_codec_name = "omx-h264";
-          break;
-        case FF_PROFILE_H264_MAIN:
-          // (role name) video_decoder.avc
-          // H.264 Main profile
-          decoder_name = OMX_H264MAIN_DECODER;
-          m_codingType = OMX_VIDEO_CodingAVC;
-          m_video_codec_name = "omx-h264";
-          break;
-        case FF_PROFILE_H264_HIGH:
-          // (role name) video_decoder.avc
-          // H.264 Main profile
-          decoder_name = OMX_H264HIGH_DECODER;
-          m_codingType = OMX_VIDEO_CodingAVC;
-          m_video_codec_name = "omx-h264";
-          break;
-        case FF_PROFILE_UNKNOWN:
-          decoder_name = OMX_H264HIGH_DECODER;
-          m_codingType = OMX_VIDEO_CodingAVC;
-          m_video_codec_name = "omx-h264";
-          break;
-        default:
-          decoder_name = OMX_H264HIGH_DECODER;
-          m_codingType = OMX_VIDEO_CodingAVC;
-          m_video_codec_name = "omx-h264";
-          break;
-      }
-    }
-    if (CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_VIDEOPLAYER_SUPPORTMVC))
-    {
-      m_codingType = OMX_VIDEO_CodingMVC;
-      m_video_codec_name = "omx-mvc";
-    }
-    break;
-    case AV_CODEC_ID_MPEG4:
-      // (role name) video_decoder.mpeg4
-      // MPEG-4, DivX 4/5 and Xvid compatible
-      decoder_name = OMX_MPEG4_DECODER;
-      m_codingType = OMX_VIDEO_CodingMPEG4;
-      m_video_codec_name = "omx-mpeg4";
-      break;
-    case AV_CODEC_ID_MPEG1VIDEO:
-    case AV_CODEC_ID_MPEG2VIDEO:
-      // (role name) video_decoder.mpeg2
-      // MPEG-2
-      decoder_name = OMX_MPEG2V_DECODER;
-      m_codingType = OMX_VIDEO_CodingMPEG2;
-      m_video_codec_name = "omx-mpeg2";
-      break;
-    case AV_CODEC_ID_H263:
-      // (role name) video_decoder.mpeg4
-      // MPEG-4, DivX 4/5 and Xvid compatible
-      decoder_name = OMX_MPEG4_DECODER;
-      m_codingType = OMX_VIDEO_CodingMPEG4;
-      m_video_codec_name = "omx-h263";
-      break;
-    case AV_CODEC_ID_VP6:
-      // this form is encoded upside down
-      vflip = true;
-      // fall through
-    case AV_CODEC_ID_VP6F:
-    case AV_CODEC_ID_VP6A:
-      // (role name) video_decoder.vp6
-      // VP6
-      decoder_name = OMX_VP6_DECODER;
-      m_codingType = OMX_VIDEO_CodingVP6;
-      m_video_codec_name = "omx-vp6";
-    break;
-    case AV_CODEC_ID_VP8:
-      // (role name) video_decoder.vp8
-      // VP8
-      decoder_name = OMX_VP8_DECODER;
-      m_codingType = OMX_VIDEO_CodingVP8;
-      m_video_codec_name = "omx-vp8";
-    break;
-    case AV_CODEC_ID_THEORA:
-      // (role name) video_decoder.theora
-      // theora
-      decoder_name = OMX_THEORA_DECODER;
-      m_codingType = OMX_VIDEO_CodingTheora;
-      m_video_codec_name = "omx-theora";
-    break;
-    case AV_CODEC_ID_MJPEG:
-    case AV_CODEC_ID_MJPEGB:
-      // (role name) video_decoder.mjpg
-      // mjpg
-      decoder_name = OMX_MJPEG_DECODER;
-      m_codingType = OMX_VIDEO_CodingMJPEG;
-      m_video_codec_name = "omx-mjpeg";
-    break;
-    case AV_CODEC_ID_VC1:
-    case AV_CODEC_ID_WMV3:
-      // (role name) video_decoder.vc1
-      // VC-1, WMV9
-      decoder_name = OMX_VC1_DECODER;
-      m_codingType = OMX_VIDEO_CodingWMV;
-      m_video_codec_name = "omx-vc1";
-      break;
-    default:
-      CLog::Log(LOGERROR, "COMXVideo::Open : Video codec unknown: %x", hints.codec);
-      return false;
-    break;
-  }
-
-  if(!m_omx_decoder.Initialize(decoder_name, OMX_IndexParamVideoInit))
-    return false;
-
-  if(clock == NULL)
-    return false;
-
-  m_av_clock = clock;
-  m_omx_clock = m_av_clock->GetOMXClock();
-
-  if(m_omx_clock->GetComponent() == NULL)
-  {
-    m_av_clock = NULL;
-    m_omx_clock = NULL;
-    return false;
-  }
-
-  omx_err = m_omx_decoder.SetStateForComponent(OMX_StateIdle);
-  if (omx_err != OMX_ErrorNone)
-  {
-    CLog::Log(LOGERROR, "COMXVideo::Open m_omx_decoder.SetStateForComponent\n");
-    return false;
-  }
-
-  OMX_VIDEO_PARAM_PORTFORMATTYPE formatType;
-  OMX_INIT_STRUCTURE(formatType);
-  formatType.nPortIndex = m_omx_decoder.GetInputPort();
-  formatType.eCompressionFormat = m_codingType;
-
-  if (hints.fpsscale > 0 && hints.fpsrate > 0)
-  {
-    formatType.xFramerate = (long long)(1<<16)*hints.fpsrate / hints.fpsscale;
-  }
-  else
-  {
-    formatType.xFramerate = 25 * (1<<16);
-  }
-
-  omx_err = m_omx_decoder.SetParameter(OMX_IndexParamVideoPortFormat, &formatType);
-  if(omx_err != OMX_ErrorNone)
-    return false;
-
-  OMX_PARAM_PORTDEFINITIONTYPE portParam;
-  OMX_INIT_STRUCTURE(portParam);
-  portParam.nPortIndex = m_omx_decoder.GetInputPort();
-
-  omx_err = m_omx_decoder.GetParameter(OMX_IndexParamPortDefinition, &portParam);
-  if(omx_err != OMX_ErrorNone)
-  {
-    CLog::Log(LOGERROR, "COMXVideo::Open error OMX_IndexParamPortDefinition omx_err(0x%08x)\n", omx_err);
-    return false;
-  }
-
-  portParam.nPortIndex = m_omx_decoder.GetInputPort();
-  bool small_mem = g_RBP.GetArmMem() < 256;
-  portParam.nBufferCountActual = small_mem ? VIDEO_BUFFERS:2*VIDEO_BUFFERS;
-  portParam.format.video.nFrameWidth  = m_decoded_width;
-  portParam.format.video.nFrameHeight = m_decoded_height;
-
-  omx_err = m_omx_decoder.SetParameter(OMX_IndexParamPortDefinition, &portParam);
-  if(omx_err != OMX_ErrorNone)
-  {
-    CLog::Log(LOGERROR, "COMXVideo::Open error OMX_IndexParamPortDefinition omx_err(0x%08x)\n", omx_err);
-    return false;
-  }
-
-  // request portsettingschanged on aspect ratio change
-  OMX_CONFIG_REQUESTCALLBACKTYPE notifications;
-  OMX_INIT_STRUCTURE(notifications);
-  notifications.nPortIndex = m_omx_decoder.GetOutputPort();
-  notifications.nIndex = OMX_IndexParamBrcmPixelAspectRatio;
-  notifications.bEnable = OMX_TRUE;
-
-  omx_err = m_omx_decoder.SetParameter((OMX_INDEXTYPE)OMX_IndexConfigRequestCallback, &notifications);
-  if (omx_err != OMX_ErrorNone)
-  {
-    CLog::Log(LOGERROR, "COMXVideo::Open OMX_IndexConfigRequestCallback error (0%08x)\n", omx_err);
-    return false;
-  }
-
-  // request portsettingschanged on refresh rate change
-  if (CServiceBroker::GetSettingsComponent()->GetSettings()->GetInt(CSettings::SETTING_VIDEOPLAYER_ADJUSTREFRESHRATE) == ADJUST_REFRESHRATE_ALWAYS)
-  {
-    notifications.nIndex = OMX_IndexParamPortDefinition;
-    omx_err = m_omx_decoder.SetParameter((OMX_INDEXTYPE)OMX_IndexConfigRequestCallback, &notifications);
-    if (omx_err != OMX_ErrorNone)
-    {
-      CLog::Log(LOGERROR, "COMXVideo::Open OMX_IndexConfigRequestCallback error (0%08x)\n", omx_err);
-      //return false;
-    }
-  }
-  OMX_PARAM_BRCMVIDEODECODEERRORCONCEALMENTTYPE concanParam;
-  OMX_INIT_STRUCTURE(concanParam);
-  if(CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->m_omxDecodeStartWithValidFrame)
-    concanParam.bStartWithValidFrame = OMX_TRUE;
-  else
-    concanParam.bStartWithValidFrame = OMX_FALSE;
-
-  omx_err = m_omx_decoder.SetParameter(OMX_IndexParamBrcmVideoDecodeErrorConcealment, &concanParam);
-  if(omx_err != OMX_ErrorNone)
-  {
-    CLog::Log(LOGERROR, "COMXVideo::Open error OMX_IndexParamBrcmVideoDecodeErrorConcealment omx_err(0x%08x)\n", omx_err);
-    return false;
-  }
-
-  if(NaluFormatStartCodes(hints.codec, m_extradata, m_extrasize))
-  {
-    OMX_NALSTREAMFORMATTYPE nalStreamFormat;
-    OMX_INIT_STRUCTURE(nalStreamFormat);
-    nalStreamFormat.nPortIndex = m_omx_decoder.GetInputPort();
-    nalStreamFormat.eNaluFormat = OMX_NaluFormatStartCodes;
-
-    omx_err = m_omx_decoder.SetParameter((OMX_INDEXTYPE)OMX_IndexParamNalStreamFormatSelect, &nalStreamFormat);
-    if (omx_err != OMX_ErrorNone)
-    {
-      CLog::Log(LOGERROR, "COMXVideo::Open OMX_IndexParamNalStreamFormatSelect error (0%08x)\n", omx_err);
-      return false;
-    }
-  }
-
-
-  // Alloc buffers for the omx input port.
-  omx_err = m_omx_decoder.AllocInputBuffers();
-  if (omx_err != OMX_ErrorNone)
-  {
-    CLog::Log(LOGERROR, "COMXVideo::Open AllocOMXInputBuffers error (0%08x)\n", omx_err);
-    return false;
-  }
-
-  omx_err = m_omx_decoder.SetStateForComponent(OMX_StateExecuting);
-  if (omx_err != OMX_ErrorNone)
-  {
-    CLog::Log(LOGERROR, "COMXVideo::Open error m_omx_decoder.SetStateForComponent\n");
-    return false;
-  }
-
-  SendDecoderConfig();
-
-  m_is_open           = true;
-  m_drop_state        = false;
-
-  switch(hints.orientation)
-  {
-    case 90:
-      m_transform = OMX_DISPLAY_ROT90;
-      break;
-    case 180:
-      m_transform = OMX_DISPLAY_ROT180;
-      break;
-    case 270:
-      m_transform = OMX_DISPLAY_ROT270;
-      break;
-    default:
-      m_transform = OMX_DISPLAY_ROT0;
-      break;
-  }
-  if (vflip)
-      m_transform = OMX_DISPLAY_MIRROR_ROT180;
-
-  if(m_omx_decoder.BadState())
-    return false;
-
-  CLog::Log(LOGDEBUG,
-    "%s::%s - decoder_component(0x%p), input_port(0x%x), output_port(0x%x) hdmiclocksync %d\n",
-    CLASSNAME, __func__, m_omx_decoder.GetComponent(), m_omx_decoder.GetInputPort(), m_omx_decoder.GetOutputPort(),
-    m_hdmi_clock_sync);
-
-  return true;
-}
-
-
-void COMXVideo::Close()
-{
-  CSingleLock lock (m_critSection);
-  m_omx_tunnel_clock.Deestablish();
-  m_omx_tunnel_decoder.Deestablish();
-  if(m_deinterlace)
-    m_omx_tunnel_image_fx.Deestablish();
-  m_omx_tunnel_sched.Deestablish();
-
-  m_omx_decoder.FlushInput();
-
-  m_omx_sched.Deinitialize();
-  m_omx_decoder.Deinitialize();
-  if(m_deinterlace)
-    m_omx_image_fx.Deinitialize();
-  m_omx_render.Deinitialize();
-
-  m_is_open       = false;
-
-  if(m_extradata)
-    free(m_extradata);
-  m_extradata = NULL;
-  m_extrasize = 0;
-
-  m_video_codec_name  = "";
-  m_deinterlace       = false;
-  m_av_clock          = NULL;
-
-  m_res_ctx           = NULL;
-  m_res_callback      = NULL;
-}
-
-void COMXVideo::SetDropState(bool bDrop)
-{
-  m_drop_state = bDrop;
-}
-
-unsigned int COMXVideo::GetFreeSpace()
-{
-  CSingleLock lock (m_critSection);
-  return m_omx_decoder.GetInputBufferSpace();
-}
-
-unsigned int COMXVideo::GetSize()
-{
-  CSingleLock lock (m_critSection);
-  return m_omx_decoder.GetInputBufferSize();
-}
-
-bool COMXVideo::GetPlayerInfo(double &match, double &phase, double &pll)
-{
-  CSingleLock lock (m_critSection);
-  OMX_ERRORTYPE omx_err;
-  OMX_CONFIG_BRCMRENDERSTATSTYPE renderstats;
-
-  if (!m_hdmi_clock_sync || !m_omx_render.IsInitialized())
-    return false;
-  OMX_INIT_STRUCTURE(renderstats);
-  renderstats.nPortIndex = m_omx_render.GetInputPort();
-
-  omx_err = m_omx_render.GetParameter(OMX_IndexConfigBrcmRenderStats, &renderstats);
-  if(omx_err != OMX_ErrorNone)
-  {
-    CLog::Log(LOGERROR, "COMXVideo::GetPlayerInfo error GetParameter OMX_IndexParamPortDefinition omx_err(0x%08x)\n", omx_err);
-    return false;
-  }
-  match = renderstats.nMatch * 1e-6;
-  phase = (double)renderstats.nPhase / (double)renderstats.nPeriod;
-  pll   = (double)renderstats.nPixelClock / (double)renderstats.nPixelClockNominal;
-  return true;
-}
-
-
-int COMXVideo::Decode(uint8_t *pData, int iSize, double dts, double pts, bool &settings_changed)
-{
-  CSingleLock lock (m_critSection);
-  OMX_ERRORTYPE omx_err;
-
-  if( m_drop_state || !m_is_open )
-    return true;
-
-  unsigned int demuxer_bytes = (unsigned int)iSize;
-  uint8_t *demuxer_content = pData;
-
-  if (demuxer_content && demuxer_bytes > 0)
-  {
-    OMX_U32 nFlags = 0;
-
-    if(m_setStartTime)
-    {
-      nFlags |= OMX_BUFFERFLAG_STARTTIME;
-      CLog::Log(LOGDEBUG, "OMXVideo::Decode VDec : setStartTime %f\n", (pts == DVD_NOPTS_VALUE ? 0.0 : pts) / DVD_TIME_BASE);
-      m_setStartTime = false;
-    }
-    if (pts == DVD_NOPTS_VALUE && dts == DVD_NOPTS_VALUE)
-      nFlags |= OMX_BUFFERFLAG_TIME_UNKNOWN;
-    else if (pts == DVD_NOPTS_VALUE)
-      nFlags |= OMX_BUFFERFLAG_TIME_IS_DTS;
-
-    while(demuxer_bytes)
-    {
-      // 500ms timeout
-      OMX_BUFFERHEADERTYPE *omx_buffer = m_omx_decoder.GetInputBuffer(500);
-      if(omx_buffer == NULL)
-      {
-        CLog::Log(LOGERROR, "OMXVideo::Decode timeout\n");
-        return false;
-      }
-
-      omx_buffer->nFlags = nFlags;
-      omx_buffer->nOffset = 0;
-      omx_buffer->nTimeStamp = ToOMXTime((uint64_t)(pts != DVD_NOPTS_VALUE ? pts : dts != DVD_NOPTS_VALUE ? dts : 0));
-      omx_buffer->nFilledLen = std::min((OMX_U32)demuxer_bytes, omx_buffer->nAllocLen);
-      memcpy(omx_buffer->pBuffer, demuxer_content, omx_buffer->nFilledLen);
-
-      demuxer_bytes -= omx_buffer->nFilledLen;
-      demuxer_content += omx_buffer->nFilledLen;
-
-      if(demuxer_bytes == 0)
-        omx_buffer->nFlags |= OMX_BUFFERFLAG_ENDOFFRAME;
-
-      omx_err = m_omx_decoder.EmptyThisBuffer(omx_buffer);
-      if (omx_err != OMX_ErrorNone)
-      {
-        CLog::Log(LOGERROR, "%s::%s - OMX_EmptyThisBuffer() failed with result(0x%x)\n", CLASSNAME, __func__, omx_err);
-        m_omx_decoder.DecoderEmptyBufferDone(m_omx_decoder.GetComponent(), omx_buffer);
-        return false;
-      }
-      //CLog::Log(LOGINFO, "VideD: dts:%.0f pts:%.0f size:%d)\n", dts, pts, iSize);
-
-      ResolutionUpdateInfo resinfo = {};
-      omx_err = m_omx_decoder.WaitForEvent(OMX_EventPortSettingsChanged, 0);
-      if (omx_err == OMX_ErrorNone)
-      {
-        if(!PortSettingsChanged(resinfo))
-        {
-          CLog::Log(LOGERROR, "%s::%s - error PortSettingsChanged omx_err(0x%08x)\n", CLASSNAME, __func__, omx_err);
-          return false;
-        }
-      }
-      omx_err = m_omx_decoder.WaitForEvent(OMX_EventParamOrConfigChanged, 0);
-      if (omx_err == OMX_ErrorNone)
-      {
-        if(!PortSettingsChanged(resinfo))
-        {
-          CLog::Log(LOGERROR, "%s::%s - error PortSettingsChanged (EventParamOrConfigChanged) omx_err(0x%08x)\n", CLASSNAME, __func__, omx_err);
-        }
-      }
-      lock.Leave();
-      if (resinfo.changed && m_res_callback)
-        m_res_callback(m_res_ctx, resinfo.width, resinfo.height, resinfo.framerate, resinfo.display_aspect);
-    }
-    settings_changed = m_settings_changed;
-    return true;
-
-  }
-
-  return false;
-}
-
-void COMXVideo::Reset(void)
-{
-  CSingleLock lock (m_critSection);
-  if(!m_is_open)
-    return;
-
-  m_setStartTime = true;
-  m_omx_decoder.FlushAll();
-  if(m_deinterlace)
-    m_omx_image_fx.FlushAll();
-  m_omx_sched.FlushAll();
-  m_omx_render.ResetEos();
-}
-
-///////////////////////////////////////////////////////////////////////////////////////////
-void COMXVideo::SetVideoRect(const CRect& SrcRect, const CRect& DestRect, RENDER_STEREO_MODE video_mode, RENDER_STEREO_MODE display_mode, bool stereo_invert)
-{
-  CSingleLock lock (m_critSection);
-  if(!m_is_open)
-    return;
-
-  OMX_CONFIG_DISPLAYREGIONTYPE configDisplay;
-
-  OMX_INIT_STRUCTURE(configDisplay);
-  configDisplay.nPortIndex = m_omx_render.GetInputPort();
-  configDisplay.set                 = (OMX_DISPLAYSETTYPE)(OMX_DISPLAY_SET_DEST_RECT|OMX_DISPLAY_SET_SRC_RECT|OMX_DISPLAY_SET_FULLSCREEN|OMX_DISPLAY_SET_NOASPECT|OMX_DISPLAY_SET_MODE|OMX_DISPLAY_SET_TRANSFORM);
-  configDisplay.dest_rect.x_offset  = lrintf(DestRect.x1);
-  configDisplay.dest_rect.y_offset  = lrintf(DestRect.y1);
-  configDisplay.dest_rect.width     = lrintf(DestRect.Width());
-  configDisplay.dest_rect.height    = lrintf(DestRect.Height());
-
-  configDisplay.src_rect.x_offset   = lrintf(SrcRect.x1);
-  configDisplay.src_rect.y_offset   = lrintf(SrcRect.y1);
-  configDisplay.src_rect.width      = lrintf(SrcRect.Width());
-  configDisplay.src_rect.height     = lrintf(SrcRect.Height());
-
-  configDisplay.fullscreen = OMX_FALSE;
-  configDisplay.noaspect = OMX_TRUE;
-  configDisplay.mode = OMX_DISPLAY_MODE_LETTERBOX;
-  configDisplay.transform = m_transform;
-
-  if (video_mode == RENDER_STEREO_MODE_SPLIT_HORIZONTAL)
-    configDisplay.transform = (OMX_DISPLAYTRANSFORMTYPE)(configDisplay.transform | DISPMANX_STEREOSCOPIC_TB);
-  else if (video_mode == RENDER_STEREO_MODE_SPLIT_VERTICAL)
-    configDisplay.transform = (OMX_DISPLAYTRANSFORMTYPE)(configDisplay.transform | DISPMANX_STEREOSCOPIC_SBS);
-  else
-    configDisplay.transform = (OMX_DISPLAYTRANSFORMTYPE)(configDisplay.transform | DISPMANX_STEREOSCOPIC_MONO);
-
-  if (stereo_invert)
-    configDisplay.transform = (OMX_DISPLAYTRANSFORMTYPE)(configDisplay.transform | DISPMANX_STEREOSCOPIC_INVERT);
-
-  m_omx_render.SetConfig(OMX_IndexConfigDisplayRegion, &configDisplay);
-
-  CLog::Log(LOGDEBUG, "%s::%s %d,%d,%d,%d -> %d,%d,%d,%d t:%x", CLASSNAME, __func__,
-      configDisplay.src_rect.x_offset, configDisplay.src_rect.y_offset, configDisplay.src_rect.width, configDisplay.src_rect.height,
-      configDisplay.dest_rect.x_offset, configDisplay.dest_rect.y_offset, configDisplay.dest_rect.width, configDisplay.dest_rect.height, configDisplay.transform);
-}
-
-int COMXVideo::GetInputBufferSize()
-{
-  CSingleLock lock (m_critSection);
-  return m_omx_decoder.GetInputBufferSize();
-}
-
-void COMXVideo::SubmitEOS()
-{
-  CSingleLock lock (m_critSection);
-  if(!m_is_open)
-    return;
-
-  m_submitted_eos = true;
-  m_failed_eos = false;
-
-  OMX_ERRORTYPE omx_err = OMX_ErrorNone;
-  OMX_BUFFERHEADERTYPE *omx_buffer = m_omx_decoder.GetInputBuffer(1000);
-
-  if(omx_buffer == NULL)
-  {
-    CLog::Log(LOGERROR, "%s::%s - buffer error 0x%08x", CLASSNAME, __func__, omx_err);
-    m_failed_eos = true;
-    return;
-  }
-
-  omx_buffer->nOffset     = 0;
-  omx_buffer->nFilledLen  = 0;
-  omx_buffer->nTimeStamp  = ToOMXTime(0LL);
-
-  omx_buffer->nFlags = OMX_BUFFERFLAG_ENDOFFRAME | OMX_BUFFERFLAG_EOS | OMX_BUFFERFLAG_TIME_UNKNOWN;
-
-  omx_err = m_omx_decoder.EmptyThisBuffer(omx_buffer);
-  if (omx_err != OMX_ErrorNone)
-  {
-    CLog::Log(LOGERROR, "%s::%s - OMX_EmptyThisBuffer() failed with result(0x%x)\n", CLASSNAME, __func__, omx_err);
-    m_omx_decoder.DecoderEmptyBufferDone(m_omx_decoder.GetComponent(), omx_buffer);
-    return;
-  }
-  CLog::Log(LOGINFO, "%s::%s", CLASSNAME, __func__);
-}
-
-bool COMXVideo::IsEOS()
-{
-  CSingleLock lock (m_critSection);
-  if(!m_is_open)
-    return true;
-  if (!m_failed_eos && !m_omx_render.IsEOS())
-    return false;
-  if (m_submitted_eos)
-  {
-    CLog::Log(LOGINFO, "%s::%s", CLASSNAME, __func__);
-    m_submitted_eos = false;
-  }
-  return true;
-}
diff --git a/xbmc/cores/omxplayer/OMXVideo.h b/xbmc/cores/omxplayer/OMXVideo.h
deleted file mode 100644
index f741a7d66d48..000000000000
--- a/xbmc/cores/omxplayer/OMXVideo.h
+++ /dev/null
@@ -1,106 +0,0 @@
-/*
- *  Copyright (C) 2010-2018 Team Kodi
- *  This file is part of Kodi - https://kodi.tv
- *
- *  SPDX-License-Identifier: GPL-2.0-or-later
- *  See LICENSES/README.md for more information.
- */
-
-#pragma once
-
-#include "OMXCore.h"
-#include "DVDStreamInfo.h"
-
-#include <IL/OMX_Video.h>
-
-#include "OMXClock.h"
-
-#include "utils/Geometry.h"
-#include "DVDDemuxers/DVDDemux.h"
-#include "xbmc/cores/VideoSettings.h"
-#include "threads/CriticalSection.h"
-#include "xbmc/rendering/RenderSystem.h"
-#include "cores/VideoPlayer/VideoRenderers/RenderManager.h"
-#include "cores/VideoPlayer/Process/ProcessInfo.h"
-#include <string>
-
-#define VIDEO_BUFFERS 60
-
-#define CLASSNAME "COMXVideo"
-
-typedef void (*ResolutionUpdateCallBackFn)(void *ctx, uint32_t width, uint32_t height, float framerate, float display_aspect);
-
-struct ResolutionUpdateInfo {
-  uint32_t width;
-  uint32_t height;
-  float framerate;
-  float display_aspect;
-  bool changed;
-};
-
-class COMXVideo
-{
-public:
-  COMXVideo(CRenderManager& renderManager, CProcessInfo &processInfo);
-  ~COMXVideo();
-
-  // Required overrides
-  bool SendDecoderConfig();
-  bool Open(CDVDStreamInfo &hints, OMXClock *clock, bool hdmi_clock_sync = false);
-  bool PortSettingsChanged(ResolutionUpdateInfo &resinfo);
-  void RegisterResolutionUpdateCallBack(void *ctx, ResolutionUpdateCallBackFn callback) { m_res_ctx = ctx; m_res_callback = callback; }
-  void Close(void);
-  unsigned int GetFreeSpace();
-  unsigned int GetSize();
-  int  Decode(uint8_t *pData, int iSize, double dts, double pts, bool &settings_changed);
-  void Reset(void);
-  void SetDropState(bool bDrop);
-  std::string GetDecoderName() const { return m_video_codec_name; };
-  void SetVideoRect(const CRect& SrcRect, const CRect& DestRect, RENDER_STEREO_MODE video_mode, RENDER_STEREO_MODE display_mode, bool stereo_invert);
-  int GetInputBufferSize();
-  bool GetPlayerInfo(double &match, double &phase, double &pll);
-  void SubmitEOS();
-  bool IsEOS();
-  bool SubmittedEOS() const { return m_submitted_eos; }
-  bool BadState() { return m_omx_decoder.BadState(); };
-protected:
-  // Video format
-  bool              m_drop_state;
-  unsigned int      m_decoded_width;
-  unsigned int      m_decoded_height;
-
-  OMX_VIDEO_CODINGTYPE m_codingType;
-
-  COMXCoreComponent m_omx_decoder;
-  COMXCoreComponent m_omx_render;
-  COMXCoreComponent m_omx_sched;
-  COMXCoreComponent m_omx_image_fx;
-  COMXCoreComponent *m_omx_clock;
-  OMXClock           *m_av_clock;
-
-  COMXCoreTunnel    m_omx_tunnel_decoder;
-  COMXCoreTunnel    m_omx_tunnel_clock;
-  COMXCoreTunnel    m_omx_tunnel_sched;
-  COMXCoreTunnel    m_omx_tunnel_image_fx;
-  bool              m_is_open;
-  bool              m_setStartTime;
-
-  uint8_t           *m_extradata;
-  int               m_extrasize;
-
-  std::string       m_video_codec_name;
-
-  bool              m_deinterlace;
-  bool              m_hdmi_clock_sync;
-  ResolutionUpdateCallBackFn m_res_callback;
-  void              *m_res_ctx;
-  bool              m_submitted_eos;
-  bool              m_failed_eos;
-  OMX_DISPLAYTRANSFORMTYPE m_transform;
-  bool              m_settings_changed;
-  bool              m_isPi1;
-  CRenderManager&   m_renderManager;
-  CProcessInfo&     m_processInfo;
-  static bool NaluFormatStartCodes(enum AVCodecID codec, uint8_t *in_extradata, int in_extrasize);
-  CCriticalSection m_critSection;
-};
diff --git a/xbmc/cores/omxplayer/omxplayer_advancedsettings.xml b/xbmc/cores/omxplayer/omxplayer_advancedsettings.xml
deleted file mode 100644
index fc4c24bdeed4..000000000000
--- a/xbmc/cores/omxplayer/omxplayer_advancedsettings.xml
+++ /dev/null
@@ -1,7 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<advancedsettings>
-  <video>
-    <defaultplayer>VideoPlayer</defaultplayer>
-    <defaultVideoPlayer>VideoPlayer</defaultVideoPlayer>
-  </video>
-</advancedsettings>
diff --git a/xbmc/platform/linux/CMakeLists.txt b/xbmc/platform/linux/CMakeLists.txt
index f3d9b535bcff..59cf783e8a06 100644
--- a/xbmc/platform/linux/CMakeLists.txt
+++ b/xbmc/platform/linux/CMakeLists.txt
@@ -41,12 +41,10 @@ endif()
 
 if(CORE_PLATFORM_NAME_LC STREQUAL rbpi)
   list(APPEND SOURCES RBP.cpp
-                      OMXClock.cpp
                       OMXCore.cpp)
   list(APPEND HEADERS RBP.h
                       DllBCM.h
                       DllOMX.h
-                      OMXClock.h
                       OMXCore.h)
 endif()
 
diff --git a/xbmc/platform/linux/OMXClock.cpp b/xbmc/platform/linux/OMXClock.cpp
deleted file mode 100644
index 3bc0fc49f50e..000000000000
--- a/xbmc/platform/linux/OMXClock.cpp
+++ /dev/null
@@ -1,572 +0,0 @@
-/*
- *  Copyright (C) 2005-2018 Team Kodi
- *  This file is part of Kodi - https://kodi.tv
- *
- *  SPDX-License-Identifier: GPL-2.0-or-later
- *  See LICENSES/README.md for more information.
- */
-
-#include "ServiceBroker.h"
-#include "cores/VideoPlayer/VideoReferenceClock.h"
-#include "settings/Settings.h"
-#include "settings/SettingsComponent.h"
-
-#include "OMXClock.h"
-#include "cores/VideoPlayer/Interface/Addon/TimingConstants.h"
-#include "utils/MathUtils.h"
-
-#define OMX_PRE_ROLL 200
-
-OMXClock::OMXClock()
-{
-  m_pause       = false;
-
-  m_omx_speed = DVD_PLAYSPEED_NORMAL;
-  m_WaitMask = 0;
-  m_eState = OMX_TIME_ClockStateStopped;
-  m_eClock = OMX_TIME_RefClockNone;
-  m_clock        = NULL;
-  m_last_media_time = 0.0f;
-  m_last_media_time_read = 0.0f;
-  m_speedAdjust = 0;
-
-  pthread_mutex_init(&m_lock, NULL);
-}
-
-OMXClock::~OMXClock()
-{
-  OMXDeinitialize();
-  pthread_mutex_destroy(&m_lock);
-}
-
-void OMXClock::Lock()
-{
-  pthread_mutex_lock(&m_lock);
-}
-
-void OMXClock::UnLock()
-{
-  pthread_mutex_unlock(&m_lock);
-}
-
-void OMXClock::OMXSetClockPorts(OMX_TIME_CONFIG_CLOCKSTATETYPE *clock, bool has_video, bool has_audio)
-{
-  if(m_omx_clock.GetComponent() == NULL)
-    return;
-
-  if(!clock)
-    return;
-
-  clock->nWaitMask = 0;
-
-  if(has_audio)
-  {
-    clock->nWaitMask |= OMX_CLOCKPORT0;
-  }
-
-  if(has_video)
-  {
-    clock->nWaitMask |= OMX_CLOCKPORT1;
-  }
-}
-
-bool OMXClock::OMXSetReferenceClock(bool has_audio, bool lock /* = true */)
-{
-  if(lock)
-    Lock();
-
-  bool ret = true;
-  OMX_ERRORTYPE omx_err = OMX_ErrorNone;
-  OMX_TIME_CONFIG_ACTIVEREFCLOCKTYPE refClock;
-  OMX_INIT_STRUCTURE(refClock);
-
-  if(has_audio)
-    refClock.eClock = OMX_TIME_RefClockAudio;
-  else
-    refClock.eClock = OMX_TIME_RefClockVideo;
-
-  if (refClock.eClock != m_eClock)
-  {
-    CLog::Log(LOGNOTICE, "OMXClock using %s as reference", refClock.eClock == OMX_TIME_RefClockVideo ? "video" : "audio");
-
-    omx_err = m_omx_clock.SetConfig(OMX_IndexConfigTimeActiveRefClock, &refClock);
-    if(omx_err != OMX_ErrorNone)
-    {
-      CLog::Log(LOGERROR, "OMXClock::OMXSetReferenceClock error setting OMX_IndexConfigTimeActiveRefClock");
-      ret = false;
-    }
-    m_eClock = refClock.eClock;
-  }
-  m_last_media_time = 0.0f;
-  if(lock)
-    UnLock();
-
-  return ret;
-}
-
-bool OMXClock::OMXInitialize(CDVDClock *clock)
-{
-  std::string componentName = "OMX.broadcom.clock";
-
-  m_pause       = false;
-
-  m_clock = clock;
-
-  if(!m_omx_clock.Initialize((const std::string)componentName, OMX_IndexParamOtherInit))
-    return false;
-
-  return true;
-}
-
-void OMXClock::OMXDeinitialize()
-{
-  if(m_omx_clock.GetComponent() == NULL)
-    return;
-
-  m_omx_clock.Deinitialize();
-
-  m_omx_speed = DVD_PLAYSPEED_NORMAL;
-  m_last_media_time = 0.0f;
-}
-
-bool OMXClock::OMXStateExecute(bool lock /* = true */)
-{
-  if(m_omx_clock.GetComponent() == NULL)
-    return false;
-
-  if(lock)
-    Lock();
-
-  OMX_ERRORTYPE omx_err = OMX_ErrorNone;
-
-  if(m_omx_clock.GetState() != OMX_StateExecuting)
-  {
-
-    OMXStateIdle(false);
-
-    omx_err = m_omx_clock.SetStateForComponent(OMX_StateExecuting);
-    if (omx_err != OMX_ErrorNone)
-    {
-      CLog::Log(LOGERROR, "OMXClock::StateExecute m_omx_clock.SetStateForComponent\n");
-      if(lock)
-        UnLock();
-      return false;
-    }
-  }
-
-  m_last_media_time = 0.0f;
-  if(lock)
-    UnLock();
-
-  return true;
-}
-
-void OMXClock::OMXStateIdle(bool lock /* = true */)
-{
-  if(m_omx_clock.GetComponent() == NULL)
-    return;
-
-  if(lock)
-    Lock();
-
-  if(m_omx_clock.GetState() != OMX_StateIdle)
-    m_omx_clock.SetStateForComponent(OMX_StateIdle);
-
-  m_last_media_time = 0.0f;
-  if(lock)
-    UnLock();
-}
-
-COMXCoreComponent *OMXClock::GetOMXClock()
-{
-  return &m_omx_clock;
-}
-
-bool  OMXClock::OMXStop(bool lock /* = true */)
-{
-  if(m_omx_clock.GetComponent() == NULL)
-    return false;
-
-  if(lock)
-    Lock();
-
-  CLog::Log(LOGDEBUG, "OMXClock::OMXStop\n");
-
-  OMX_TIME_CONFIG_CLOCKSTATETYPE clock;
-  OMX_INIT_STRUCTURE(clock);
-
-  clock.eState      = OMX_TIME_ClockStateStopped;
-  clock.nOffset     = ToOMXTime(-1000LL * OMX_PRE_ROLL);
-
-  OMX_ERRORTYPE omx_err = m_omx_clock.SetConfig(OMX_IndexConfigTimeClockState, &clock);
-  if(omx_err != OMX_ErrorNone)
-  {
-    CLog::Log(LOGERROR, "OMXClock::Stop error setting OMX_IndexConfigTimeClockState\n");
-    if(lock)
-      UnLock();
-    return false;
-  }
-  m_eState = clock.eState;
-
-  m_last_media_time = 0.0f;
-  if(lock)
-    UnLock();
-
-  return true;
-}
-
-bool OMXClock::OMXStep(int steps /* = 1 */, bool lock /* = true */)
-{
-  if(m_omx_clock.GetComponent() == NULL)
-    return false;
-
-  if(lock)
-    Lock();
-
-  OMX_PARAM_U32TYPE param;
-  OMX_INIT_STRUCTURE(param);
-
-  param.nPortIndex = OMX_ALL;
-  param.nU32 = steps;
-
-  OMX_ERRORTYPE omx_err = m_omx_clock.SetConfig(OMX_IndexConfigSingleStep, &param);
-  if(omx_err != OMX_ErrorNone)
-  {
-    CLog::Log(LOGERROR, "OMXClock::Error setting OMX_IndexConfigSingleStep\n");
-    if(lock)
-      UnLock();
-    return false;
-  }
-
-  m_last_media_time = 0.0f;
-  if(lock)
-    UnLock();
-
-  CLog::Log(LOGDEBUG, "OMXClock::Step (%d)", steps);
-  return true;
-}
-
-bool OMXClock::OMXReset(bool has_video, bool has_audio, bool lock /* = true */)
-{
-  if(m_omx_clock.GetComponent() == NULL)
-    return false;
-
-  if(lock)
-    Lock();
-
-  if(!OMXSetReferenceClock(has_audio, false))
-  {
-    if(lock)
-      UnLock();
-    return false;
-  }
-
-  if (m_eState == OMX_TIME_ClockStateStopped)
-  {
-    OMX_TIME_CONFIG_CLOCKSTATETYPE clock;
-    OMX_INIT_STRUCTURE(clock);
-
-    clock.eState    = OMX_TIME_ClockStateWaitingForStartTime;
-    clock.nOffset   = ToOMXTime(-1000LL * OMX_PRE_ROLL);
-
-    OMXSetClockPorts(&clock, has_video, has_audio);
-
-    if(clock.nWaitMask)
-    {
-      OMX_ERRORTYPE omx_err = m_omx_clock.SetConfig(OMX_IndexConfigTimeClockState, &clock);
-      if(omx_err != OMX_ErrorNone)
-      {
-        CLog::Log(LOGERROR, "OMXClock::OMXReset error setting OMX_IndexConfigTimeClockState\n");
-        if(lock)
-          UnLock();
-        return false;
-      }
-      CLog::Log(LOGDEBUG, "OMXClock::OMXReset audio / video : %d / %d wait mask %d->%d state : %d->%d\n",
-          has_audio, has_video, m_WaitMask, clock.nWaitMask, m_eState, clock.eState);
-      if (m_eState != OMX_TIME_ClockStateStopped)
-        m_WaitMask = clock.nWaitMask;
-      m_eState = clock.eState;
-    }
-  }
-
-  m_last_media_time = 0.0f;
-  if(lock)
-    UnLock();
-
-  return true;
-}
-
-double OMXClock::OMXMediaTime(bool lock /* = true */)
-{
-  double pts = 0.0;
-  if(m_omx_clock.GetComponent() == NULL)
-    return 0;
-
-  double now = GetAbsoluteClock();
-  if (now - m_last_media_time_read > DVD_MSEC_TO_TIME(100) || m_last_media_time == 0.0)
-  {
-    if(lock)
-      Lock();
-
-    OMX_TIME_CONFIG_TIMESTAMPTYPE timeStamp;
-    OMX_INIT_STRUCTURE(timeStamp);
-    timeStamp.nPortIndex = m_omx_clock.GetInputPort();
-
-    OMX_ERRORTYPE omx_err = m_omx_clock.GetConfig(OMX_IndexConfigTimeCurrentMediaTime, &timeStamp);
-    if(omx_err != OMX_ErrorNone)
-    {
-      CLog::Log(LOGERROR, "OMXClock::MediaTime error getting OMX_IndexConfigTimeCurrentMediaTime\n");
-      if(lock)
-        UnLock();
-      return 0;
-    }
-
-    pts = FromOMXTime(timeStamp.nTimestamp);
-    //CLog::Log(LOGINFO, "OMXClock::MediaTime %.2f (%.2f, %.2f)", pts, m_last_media_time, now - m_last_media_time_read);
-    m_last_media_time = pts;
-    m_last_media_time_read = now;
-
-    if(lock)
-      UnLock();
-  }
-  else
-  {
-    double speed = m_pause ? 0.0 : (double)m_omx_speed / DVD_PLAYSPEED_NORMAL;
-    pts = m_last_media_time + (now - m_last_media_time_read) * speed;
-    //CLog::Log(LOGINFO, "OMXClock::MediaTime cached %.2f (%.2f, %.2f)", pts, m_last_media_time, now - m_last_media_time_read);
-  }
-  return pts;
-}
-
-double OMXClock::OMXClockAdjustment(bool lock /* = true */)
-{
-  if(m_omx_clock.GetComponent() == NULL)
-    return 0;
-
-  if(lock)
-    Lock();
-
-  double pts = 0;
-
-  OMX_TIME_CONFIG_TIMESTAMPTYPE timeStamp;
-  OMX_INIT_STRUCTURE(timeStamp);
-  timeStamp.nPortIndex = m_omx_clock.GetInputPort();
-
-  OMX_ERRORTYPE omx_err = m_omx_clock.GetConfig(OMX_IndexConfigClockAdjustment, &timeStamp);
-  if(omx_err != OMX_ErrorNone)
-  {
-    CLog::Log(LOGERROR, "OMXClock::MediaTime error getting OMX_IndexConfigClockAdjustment\n");
-    if(lock)
-      UnLock();
-    return 0;
-  }
-
-  pts = (double)FromOMXTime(timeStamp.nTimestamp);
-  //CLog::Log(LOGINFO, "OMXClock::ClockAdjustment %.0f %.0f\n", (double)FromOMXTime(timeStamp.nTimestamp), pts);
-  if(lock)
-    UnLock();
-
-  return pts;
-}
-
-
-// Set the media time, so calls to get media time use the updated value,
-// useful after a seek so mediatime is updated immediately (rather than waiting for first decoded packet)
-bool OMXClock::OMXMediaTime(double pts, bool lock /* = true*/)
-{
-  if(m_omx_clock.GetComponent() == NULL)
-    return false;
-
-  if(lock)
-    Lock();
-
-  OMX_ERRORTYPE omx_err = OMX_ErrorNone;
-  OMX_INDEXTYPE index;
-  OMX_TIME_CONFIG_TIMESTAMPTYPE timeStamp;
-  OMX_INIT_STRUCTURE(timeStamp);
-  timeStamp.nPortIndex = m_omx_clock.GetInputPort();
-
-  if(m_eClock == OMX_TIME_RefClockAudio)
-    index = OMX_IndexConfigTimeCurrentAudioReference;
-  else
-    index = OMX_IndexConfigTimeCurrentVideoReference;
-
-  timeStamp.nTimestamp = ToOMXTime(pts);
-
-  omx_err = m_omx_clock.SetConfig(index, &timeStamp);
-  if(omx_err != OMX_ErrorNone)
-  {
-    CLog::Log(LOGERROR, "OMXClock::OMXMediaTime error setting %s", index == OMX_IndexConfigTimeCurrentAudioReference ?
-       "OMX_IndexConfigTimeCurrentAudioReference":"OMX_IndexConfigTimeCurrentVideoReference");
-    if(lock)
-      UnLock();
-    return false;
-  }
-
-  CLog::Log(LOGDEBUG, "OMXClock::OMXMediaTime set config %s = %.2f", index == OMX_IndexConfigTimeCurrentAudioReference ?
-       "OMX_IndexConfigTimeCurrentAudioReference":"OMX_IndexConfigTimeCurrentVideoReference", pts);
-
-  m_last_media_time = 0.0f;
-  if(lock)
-    UnLock();
-
-  return true;
-}
-
-bool OMXClock::OMXPause(bool lock /* = true */)
-{
-  if(m_omx_clock.GetComponent() == NULL)
-    return false;
-
-  if(!m_pause)
-  {
-    if(lock)
-      Lock();
-
-    if (OMXSetSpeed(0, false, true))
-      m_pause = true;
-
-    m_last_media_time = 0.0f;
-    if(lock)
-      UnLock();
-  }
-  return m_pause == true;
-}
-
-bool OMXClock::OMXResume(bool lock /* = true */)
-{
-  if(m_omx_clock.GetComponent() == NULL)
-    return false;
-
-  if(m_pause)
-  {
-    if(lock)
-      Lock();
-
-    if (OMXSetSpeed(m_omx_speed, false, true))
-      m_pause = false;
-
-    m_last_media_time = 0.0f;
-    if(lock)
-      UnLock();
-  }
-  return m_pause == false;
-}
-
-bool OMXClock::OMXSetSpeed(int speed, bool lock /* = true */, bool pause_resume /* = false */)
-{
-  if(m_omx_clock.GetComponent() == NULL)
-    return false;
-
-  if(lock)
-    Lock();
-
-  CLog::Log(LOGDEBUG, "OMXClock::OMXSetSpeed(%.3f) pause_resume:%d", (float)speed / (float)DVD_PLAYSPEED_NORMAL * (1.0 + m_speedAdjust), pause_resume);
-
-  if (pause_resume)
-  {
-    OMX_TIME_CONFIG_SCALETYPE scaleType;
-    OMX_INIT_STRUCTURE(scaleType);
-
-    scaleType.xScale = (speed << 16) / DVD_PLAYSPEED_NORMAL;
-    scaleType.xScale += scaleType.xScale * m_speedAdjust;
-
-    OMX_ERRORTYPE omx_err = m_omx_clock.SetConfig(OMX_IndexConfigTimeScale, &scaleType);
-    if(omx_err != OMX_ErrorNone)
-    {
-      CLog::Log(LOGERROR, "OMXClock::OMXSetSpeed error setting OMX_IndexConfigTimeClockState\n");
-      if(lock)
-        UnLock();
-      return false;
-    }
-  }
-  if (!pause_resume)
-    m_omx_speed = speed;
-
-  m_last_media_time = 0.0f;
-  if(lock)
-    UnLock();
-
-  return true;
-}
-
-void OMXClock::OMXSetSpeedAdjust(double adjust, bool lock /* = true */)
-{
-  if(lock)
-    Lock();
-  // we only support resampling (and hence clock adjustment) in this mode
-  if (CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_VIDEOPLAYER_USEDISPLAYASCLOCK))
-  {
-    m_speedAdjust = adjust;
-    OMXSetSpeed(m_omx_speed, false, true);
-    m_last_media_time = 0.0f;
-  }
-  if(lock)
-    UnLock();
-}
-
-bool OMXClock::OMXFlush(bool lock)
-{
-  if(m_omx_clock.GetComponent() == NULL)
-    return false;
-
-  if(lock)
-    Lock();
-
-  CLog::Log(LOGDEBUG, "OMXClock::OMXFlush");
-
-  m_omx_clock.FlushAll();
-
-  if(lock)
-    UnLock();
-
-  return true;
-}
-
-bool OMXClock::HDMIClockSync(bool lock /* = true */)
-{
-  if(m_omx_clock.GetComponent() == NULL)
-    return false;
-
-  if(lock)
-    Lock();
-
-  OMX_CONFIG_LATENCYTARGETTYPE latencyTarget;
-  OMX_INIT_STRUCTURE(latencyTarget);
-
-  latencyTarget.nPortIndex = OMX_ALL;
-  latencyTarget.bEnabled = OMX_TRUE;
-  latencyTarget.nFilter = 10;
-  latencyTarget.nTarget = 0;
-  latencyTarget.nShift = 3;
-  latencyTarget.nSpeedFactor = -60;
-  latencyTarget.nInterFactor = 100;
-  latencyTarget.nAdjCap = 100;
-
-  OMX_ERRORTYPE omx_err = m_omx_clock.SetConfig(OMX_IndexConfigLatencyTarget, &latencyTarget);
-  if(omx_err != OMX_ErrorNone)
-  {
-    CLog::Log(LOGERROR, "OMXClock::Speed error setting OMX_IndexConfigLatencyTarget\n");
-    if(lock)
-      UnLock();
-    return false;
-  }
-
-  m_last_media_time = 0.0f;
-  if(lock)
-    UnLock();
-
-  return true;
-}
-
-int64_t OMXClock::CurrentHostCounter(void)
-{
-  struct timespec now;
-  clock_gettime(CLOCK_MONOTONIC, &now);
-  return( ((int64_t)now.tv_sec * 1000000000L) + now.tv_nsec );
-}
-
-int64_t OMXClock::CurrentHostFrequency(void)
-{
-  return( (int64_t)1000000000L );
-}
diff --git a/xbmc/platform/linux/OMXClock.h b/xbmc/platform/linux/OMXClock.h
deleted file mode 100644
index b98f6d820b92..000000000000
--- a/xbmc/platform/linux/OMXClock.h
+++ /dev/null
@@ -1,83 +0,0 @@
-/*
- *  Copyright (C) 2005-2018 Team Kodi
- *  This file is part of Kodi - https://kodi.tv
- *
- *  SPDX-License-Identifier: GPL-2.0-or-later
- *  See LICENSES/README.md for more information.
- */
-
-#pragma once
-
-#include "OMXCore.h"
-#include "DVDClock.h"
-#include "platform/linux/XTimeUtils.h"
-
-#ifdef OMX_SKIP64BIT
-static inline OMX_TICKS ToOMXTime(int64_t pts)
-{
-  OMX_TICKS ticks;
-  ticks.nLowPart = pts;
-  ticks.nHighPart = pts >> 32;
-  return ticks;
-}
-static inline int64_t FromOMXTime(OMX_TICKS ticks)
-{
-  int64_t pts = ticks.nLowPart | ((uint64_t)(ticks.nHighPart) << 32);
-  return pts;
-}
-#else
-#define FromOMXTime(x) (x)
-#define ToOMXTime(x) (x)
-#endif
-
-class OMXClock
-{
-protected:
-  bool              m_pause;
-  pthread_mutex_t   m_lock;
-  int               m_omx_speed;
-  OMX_U32           m_WaitMask;
-  OMX_TIME_CLOCKSTATE   m_eState;
-  OMX_TIME_REFCLOCKTYPE m_eClock;
-  CDVDClock         *m_clock;
-private:
-  COMXCoreComponent m_omx_clock;
-  double            m_last_media_time;
-  double            m_last_media_time_read;
-  double            m_speedAdjust;
-public:
-  OMXClock();
-  ~OMXClock();
-  void Lock();
-  void UnLock();
-  double GetAbsoluteClock(bool interpolated = true) { return m_clock ? m_clock->GetAbsoluteClock(interpolated):0; }
-  double GetClock(bool interpolated = true) { return m_clock ? m_clock->GetClock(interpolated):0; }
-  double GetClock(double& absolute, bool interpolated = true) { return m_clock ? m_clock->GetClock(absolute, interpolated):0; }
-  void Discontinuity(double currentPts = 0LL) { if (m_clock) m_clock->Discontinuity(currentPts); }
-  void OMXSetClockPorts(OMX_TIME_CONFIG_CLOCKSTATETYPE *clock, bool has_video, bool has_audio);
-  bool OMXSetReferenceClock(bool has_audio, bool lock = true);
-  bool OMXInitialize(CDVDClock *clock);
-  void OMXDeinitialize();
-  bool OMXIsPaused() { return m_pause; };
-  bool OMXStop(bool lock = true);
-  bool OMXStep(int steps = 1, bool lock = true);
-  bool OMXReset(bool has_video, bool has_audio, bool lock = true);
-  double OMXMediaTime(bool lock = true);
-  double OMXClockAdjustment(bool lock = true);
-  bool OMXMediaTime(double pts, bool lock = true);
-  bool OMXPause(bool lock = true);
-  bool OMXResume(bool lock = true);
-  bool OMXSetSpeed(int speed, bool lock = true, bool pause_resume = false);
-  void OMXSetSpeedAdjust(double adjust, bool lock = true);
-  int  OMXPlaySpeed() { return m_omx_speed; };
-  bool OMXFlush(bool lock = true);
-  COMXCoreComponent *GetOMXClock();
-  bool OMXStateExecute(bool lock = true);
-  void OMXStateIdle(bool lock = true);
-  bool HDMIClockSync(bool lock = true);
-  static int64_t CurrentHostCounter(void);
-  static int64_t CurrentHostFrequency(void);
-
-  static double NormalizeFrameduration(double frameduration);
-};
-
diff --git a/xbmc/platform/linux/OMXCore.cpp b/xbmc/platform/linux/OMXCore.cpp
index 484104ef59a7..02c8653d79e2 100644
--- a/xbmc/platform/linux/OMXCore.cpp
+++ b/xbmc/platform/linux/OMXCore.cpp
@@ -12,7 +12,6 @@
 #include "OMXCore.h"
 #include "utils/log.h"
 
-#include "OMXClock.h"
 #include "platform/linux/RBP.h"
 #include <cassert>
 
diff --git a/xbmc/settings/AdvancedSettings.cpp b/xbmc/settings/AdvancedSettings.cpp
index a119bc983c37..ce3f67f8581c 100644
--- a/xbmc/settings/AdvancedSettings.cpp
+++ b/xbmc/settings/AdvancedSettings.cpp
@@ -139,8 +139,6 @@ void CAdvancedSettings::Initialize()
 
   m_seekSteps = { 10, 30, 60, 180, 300, 600, 1800 };
 
-  m_omxDecodeStartWithValidFrame = true;
-
   m_audioDefaultPlayer = "paplayer";
   m_audioPlayCountMinimumPercent = 90.0f;
 
@@ -579,12 +577,6 @@ void CAdvancedSettings::ParseSettingsFile(const std::string &file)
     XMLUtils::GetFloat(pElement, "limiterrelease", m_limiterRelease, 0.001f, 100.0f);
   }
 
-  pElement = pRootElement->FirstChildElement("omx");
-  if (pElement)
-  {
-    XMLUtils::GetBoolean(pElement, "omxdecodestartwithvalidframe", m_omxDecodeStartWithValidFrame);
-  }
-
   pElement = pRootElement->FirstChildElement("x11");
   if (pElement)
   {
diff --git a/xbmc/settings/AdvancedSettings.h b/xbmc/settings/AdvancedSettings.h
index bd19e26b83c4..b881c3e4399c 100644
--- a/xbmc/settings/AdvancedSettings.h
+++ b/xbmc/settings/AdvancedSettings.h
@@ -134,8 +134,6 @@ class CAdvancedSettings : public ISettingCallback, public ISettingsHandler
     float m_limiterHold;
     float m_limiterRelease;
 
-    bool  m_omxDecodeStartWithValidFrame;
-
     bool  m_omlSync = false;
 
     float m_videoSubsDelayRange;
diff --git a/xbmc/settings/SettingConditions.cpp b/xbmc/settings/SettingConditions.cpp
index 5320ce3e9a6b..f8ed32af283e 100644
--- a/xbmc/settings/SettingConditions.cpp
+++ b/xbmc/settings/SettingConditions.cpp
@@ -290,9 +290,6 @@ void CSettingConditions::Initialize()
 #ifdef HAS_ZEROCONF
   m_simpleConditions.insert("has_zeroconf");
 #endif
-#ifdef TARGET_RASPBERRY_PI
-  m_simpleConditions.insert("has_omxplayer");
-#endif
 #ifdef HAVE_LIBVA
   m_simpleConditions.insert("have_libva");
 #endif
diff --git a/xbmc/settings/Settings.cpp b/xbmc/settings/Settings.cpp
index 20b28c7bd706..4f5c794ec2c8 100644
--- a/xbmc/settings/Settings.cpp
+++ b/xbmc/settings/Settings.cpp
@@ -144,7 +144,6 @@ const std::string CSettings::SETTING_VIDEOPLAYER_USEVDPAUMPEG2 = "videoplayer.us
 const std::string CSettings::SETTING_VIDEOPLAYER_USEVDPAUMPEG4 = "videoplayer.usevdpaumpeg4";
 const std::string CSettings::SETTING_VIDEOPLAYER_USEVDPAUVC1 = "videoplayer.usevdpauvc1";
 const std::string CSettings::SETTING_VIDEOPLAYER_USEDXVA2 = "videoplayer.usedxva2";
-const std::string CSettings::SETTING_VIDEOPLAYER_USEOMXPLAYER = "videoplayer.useomxplayer";
 const std::string CSettings::SETTING_VIDEOPLAYER_USEVTB = "videoplayer.usevtb";
 const std::string CSettings::SETTING_VIDEOPLAYER_USEMMAL = "videoplayer.usemmal";
 const std::string CSettings::SETTING_VIDEOPLAYER_USEPRIMEDECODER = "videoplayer.useprimedecoder";
diff --git a/xbmc/settings/Settings.h b/xbmc/settings/Settings.h
index 7a49a1f2bcbf..72b01e1de70c 100644
--- a/xbmc/settings/Settings.h
+++ b/xbmc/settings/Settings.h
@@ -107,7 +107,6 @@ class CSettings : public CSettingsBase, public CSettingCreator, public CSettingC
   static const std::string SETTING_VIDEOPLAYER_USEVDPAUMPEG4;
   static const std::string SETTING_VIDEOPLAYER_USEVDPAUVC1;
   static const std::string SETTING_VIDEOPLAYER_USEDXVA2;
-  static const std::string SETTING_VIDEOPLAYER_USEOMXPLAYER;
   static const std::string SETTING_VIDEOPLAYER_USEVTB;
   static const std::string SETTING_VIDEOPLAYER_USEMMAL;
   static const std::string SETTING_VIDEOPLAYER_USEPRIMEDECODER;
