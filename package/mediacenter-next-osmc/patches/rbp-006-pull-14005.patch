From 32ea2d34c8eb1c3e13b277dcc2d0382c6f556aee Mon Sep 17 00:00:00 2001
From: Max Kellermann <max.kellermann@gmail.com>
Date: Fri, 8 Jun 2018 16:35:24 +0200
Subject: [PATCH 1/8] pvr/PVRGUIInfo: use operator=() instead of memcpy()

Every aspect of memcpy() is unsafe.
---
 xbmc/pvr/PVRGUIInfo.cpp | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/xbmc/pvr/PVRGUIInfo.cpp b/xbmc/pvr/PVRGUIInfo.cpp
index 73524aad0174..eda15518ef87 100644
--- a/xbmc/pvr/PVRGUIInfo.cpp
+++ b/xbmc/pvr/PVRGUIInfo.cpp
@@ -222,7 +222,7 @@ void CPVRGUIInfo::UpdateQualityData(void)
       CServiceBroker::GetPVRManager().Clients()->GetPlayingClient(client, bIsPlayingRecording) &&
       client && !bIsPlayingRecording &&
       client->SignalQuality(qualityInfo) == PVR_ERROR_NO_ERROR)
-    memcpy(&m_qualityInfo, &qualityInfo, sizeof(m_qualityInfo));
+    m_qualityInfo = qualityInfo;
 }
 
 void CPVRGUIInfo::UpdateDescrambleData(void)
@@ -235,7 +235,7 @@ void CPVRGUIInfo::UpdateDescrambleData(void)
   if (CServiceBroker::GetPVRManager().Clients()->GetPlayingClient(client, bIsPlayingRecording) &&
       client && !bIsPlayingRecording &&
       client->GetDescrambleInfo(descrambleInfo) == PVR_ERROR_NO_ERROR)
-    memcpy(&m_descrambleInfo, &descrambleInfo, sizeof(m_descrambleInfo));
+    m_descrambleInfo = descrambleInfo;
 }
 
 void CPVRGUIInfo::UpdateMisc(void)

From 2f18d5fb184025e3667497cf9dc9643278d83d12 Mon Sep 17 00:00:00 2001
From: Max Kellermann <max.kellermann@gmail.com>
Date: Fri, 8 Jun 2018 16:42:25 +0200
Subject: [PATCH 2/8] music/tags/MusicInfoTag: remove `operator=()`
 implementation

This operator should only be implemented manually if special code is
needed.  It is a fragile thing to do, and the current implementation
is pretty bad because:

* it uses `memcpy()` to copy `m_dwReleaseDate` for no good reason;
  `memcpy()` is an unsafe function
* commit d3c080568f05b627ad49afd515a2ff2e07580514 added the new
  attribute `m_strMusicBrainzReleaseType` but forgot to copy it in the
  `operator=()` method
* there is no move operator/constructor, and in the presence of a copy
  operator/constructor, the C++ inhibits implicit move
  operator/constructor generation, which adds overhead

The implementation auto-generated by the C++ compiler is perfectly
fine for this class.
---
 xbmc/music/tags/MusicInfoTag.cpp | 55 ----------------------------------------
 xbmc/music/tags/MusicInfoTag.h   |  2 --
 2 files changed, 57 deletions(-)

diff --git a/xbmc/music/tags/MusicInfoTag.cpp b/xbmc/music/tags/MusicInfoTag.cpp
index 3abd18b4a5fe..737070446be2 100644
--- a/xbmc/music/tags/MusicInfoTag.cpp
+++ b/xbmc/music/tags/MusicInfoTag.cpp
@@ -36,63 +36,8 @@ CMusicInfoTag::CMusicInfoTag(void)
   Clear();
 }
 
-CMusicInfoTag::CMusicInfoTag(const CMusicInfoTag& tag)
-{
-  *this = tag;
-}
-
 CMusicInfoTag::~CMusicInfoTag() = default;
 
-CMusicInfoTag& CMusicInfoTag::operator =(const CMusicInfoTag& tag)
-{
-  if (this == &tag) return * this;
-
-  m_strURL = tag.m_strURL;
-  m_artist = tag.m_artist;
-  m_strArtistSort = tag.m_strArtistSort;
-  m_strArtistDesc = tag.m_strArtistDesc;
-  m_strComposerSort = tag.m_strComposerSort;
-  m_albumArtist = tag.m_albumArtist;
-  m_strAlbumArtistSort = tag.m_strAlbumArtistSort;
-  m_strAlbumArtistDesc = tag.m_strAlbumArtistDesc;
-  m_strAlbum = tag.m_strAlbum;
-  m_genre = tag.m_genre;
-  m_strTitle = tag.m_strTitle;
-  m_strMusicBrainzTrackID = tag.m_strMusicBrainzTrackID;
-  m_musicBrainzArtistID = tag.m_musicBrainzArtistID;
-  m_musicBrainzArtistHints = tag.m_musicBrainzArtistHints;
-  m_strMusicBrainzAlbumID = tag.m_strMusicBrainzAlbumID;
-  m_strMusicBrainzReleaseGroupID = tag.m_strMusicBrainzReleaseGroupID;
-  m_musicBrainzAlbumArtistID = tag.m_musicBrainzAlbumArtistID;
-  m_musicBrainzAlbumArtistHints = tag.m_musicBrainzAlbumArtistHints;
-  m_musicRoles = tag.m_musicRoles;
-  m_strComment = tag.m_strComment;
-  m_strMood = tag.m_strMood;
-  m_strRecordLabel = tag.m_strRecordLabel;
-  m_strLyrics = tag.m_strLyrics;
-  m_cuesheet = tag.m_cuesheet;
-  m_lastPlayed = tag.m_lastPlayed;
-  m_dateAdded = tag.m_dateAdded;
-  m_bCompilation = tag.m_bCompilation;
-  m_iDuration = tag.m_iDuration;
-  m_iTrack = tag.m_iTrack;
-  m_bLoaded = tag.m_bLoaded;
-  m_Rating = tag.m_Rating;
-  m_Userrating = tag.m_Userrating;
-  m_Votes = tag.m_Votes;
-  m_listeners = tag.m_listeners;
-  m_iTimesPlayed = tag.m_iTimesPlayed;
-  m_iDbId = tag.m_iDbId;
-  m_type = tag.m_type;
-  m_iAlbumId = tag.m_iAlbumId;
-  m_replayGain = tag.m_replayGain;
-  m_albumReleaseType = tag.m_albumReleaseType;
-
-  memcpy(&m_dwReleaseDate, &tag.m_dwReleaseDate, sizeof(m_dwReleaseDate));
-  m_coverArt = tag.m_coverArt;
-  return *this;
-}
-
 bool CMusicInfoTag::operator !=(const CMusicInfoTag& tag) const
 {
   if (this == &tag) return false;
diff --git a/xbmc/music/tags/MusicInfoTag.h b/xbmc/music/tags/MusicInfoTag.h
index 160112b3c3d1..6d22a3e65063 100644
--- a/xbmc/music/tags/MusicInfoTag.h
+++ b/xbmc/music/tags/MusicInfoTag.h
@@ -42,9 +42,7 @@ class CMusicInfoTag : public IArchivable, public ISerializable, public ISortable
 {
 public:
   CMusicInfoTag(void);
-  CMusicInfoTag(const CMusicInfoTag& tag);
   ~CMusicInfoTag() override;
-  CMusicInfoTag& operator =(const CMusicInfoTag& tag);
   bool operator !=(const CMusicInfoTag& tag) const;
   bool Loaded() const;
   const std::string& GetTitle() const;

From b3cd8e55243d1d51f145112228c3d6d47c36d1b0 Mon Sep 17 00:00:00 2001
From: Max Kellermann <max.kellermann@gmail.com>
Date: Fri, 8 Jun 2018 16:47:32 +0200
Subject: [PATCH 3/8] music/tags/MusicInfoTag: include cleanup

---
 xbmc/music/tags/MusicInfoTag.cpp | 5 ++---
 xbmc/music/tags/MusicInfoTag.h   | 2 --
 2 files changed, 2 insertions(+), 5 deletions(-)

diff --git a/xbmc/music/tags/MusicInfoTag.cpp b/xbmc/music/tags/MusicInfoTag.cpp
index 737070446be2..37d3d95f1817 100644
--- a/xbmc/music/tags/MusicInfoTag.cpp
+++ b/xbmc/music/tags/MusicInfoTag.cpp
@@ -18,10 +18,7 @@
  *
  */
 
-#include <algorithm>
-
 #include "MusicInfoTag.h"
-#include "music/Album.h"
 #include "music/Artist.h"
 #include "utils/StringUtils.h"
 #include "guilib/LocalizeStrings.h"
@@ -29,6 +26,8 @@
 #include "utils/Variant.h"
 #include "utils/Archive.h"
 
+#include <algorithm>
+
 using namespace MUSIC_INFO;
 
 CMusicInfoTag::CMusicInfoTag(void)
diff --git a/xbmc/music/tags/MusicInfoTag.h b/xbmc/music/tags/MusicInfoTag.h
index 6d22a3e65063..4f73fefd1284 100644
--- a/xbmc/music/tags/MusicInfoTag.h
+++ b/xbmc/music/tags/MusicInfoTag.h
@@ -23,14 +23,12 @@ class CSong;
 class CArtist;
 class CVariant;
 
-#include <stdint.h>
 #include <string>
 #include <vector>
 
 #include "ReplayGain.h"
 #include "XBDateTime.h"
 #include "music/Album.h"
-#include "music/Artist.h"
 #include "utils/IArchivable.h"
 #include "utils/ISerializable.h"
 #include "utils/ISortable.h"

From aac300bbec0f19c5dce1185b09220ae50153b604 Mon Sep 17 00:00:00 2001
From: Max Kellermann <max.kellermann@gmail.com>
Date: Fri, 8 Jun 2018 16:50:28 +0200
Subject: [PATCH 4/8] pictures/PictureInfoTag: remove `operator=()`
 implementation

This operator should only be implemented manually if special code is
needed.  It is a fragile thing to do, and the current implementation
is pretty bad because:

* it uses `memcpy()` to copy `m_exifInfo` and `m_iptcInfo` for no good
  reason; `memcpy()` is an unsafe function
* there is no move operator/constructor, and in the presence of a copy
  operator/constructor, the C++ inhibits implicit move
  operator/constructor generation, which adds overhead
* it returns a `const` reference

The implementation auto-generated by the C++ compiler is perfectly
fine for this class.
---
 xbmc/pictures/PictureInfoTag.cpp | 11 -----------
 xbmc/pictures/PictureInfoTag.h   |  1 -
 2 files changed, 12 deletions(-)

diff --git a/xbmc/pictures/PictureInfoTag.cpp b/xbmc/pictures/PictureInfoTag.cpp
index 524addc378df..70c2040754bd 100644
--- a/xbmc/pictures/PictureInfoTag.cpp
+++ b/xbmc/pictures/PictureInfoTag.cpp
@@ -38,17 +38,6 @@ void CPictureInfoTag::Reset()
   m_dateTimeTaken.Reset();
 }
 
-const CPictureInfoTag& CPictureInfoTag::operator=(const CPictureInfoTag& right)
-{
-  if (this == &right) return * this;
-  memcpy(&m_exifInfo, &right.m_exifInfo, sizeof(m_exifInfo));
-  memcpy(&m_iptcInfo, &right.m_iptcInfo, sizeof(m_iptcInfo));
-  m_isLoaded = right.m_isLoaded;
-  m_isInfoSetExternally = right.m_isInfoSetExternally;
-  m_dateTimeTaken = right.m_dateTimeTaken;
-  return *this;
-}
-
 bool CPictureInfoTag::Load(const std::string &path)
 {
   m_isLoaded = false;
diff --git a/xbmc/pictures/PictureInfoTag.h b/xbmc/pictures/PictureInfoTag.h
index d78e938b87eb..bc2ffd37aea6 100644
--- a/xbmc/pictures/PictureInfoTag.h
+++ b/xbmc/pictures/PictureInfoTag.h
@@ -35,7 +35,6 @@ class CPictureInfoTag : public IArchivable, public ISerializable, public ISortab
   void Archive(CArchive& ar) override;
   void Serialize(CVariant& value) const override;
   void ToSortable(SortItem& sortable, Field field) const override;
-  const CPictureInfoTag& operator=(const CPictureInfoTag& item);
   const std::string GetInfo(int info) const;
 
   bool Loaded() const { return m_isLoaded; };

From 10932b7c2a27cdc26401a824584aaa8a356feab0 Mon Sep 17 00:00:00 2001
From: Max Kellermann <max.kellermann@gmail.com>
Date: Fri, 8 Jun 2018 16:52:23 +0200
Subject: [PATCH 5/8] pictures/PictureInfoTag: include cleanup

---
 xbmc/pictures/PictureInfoTag.cpp | 7 +++----
 xbmc/pictures/PictureInfoTag.h   | 2 ++
 2 files changed, 5 insertions(+), 4 deletions(-)

diff --git a/xbmc/pictures/PictureInfoTag.cpp b/xbmc/pictures/PictureInfoTag.cpp
index 70c2040754bd..090b9060ff55 100644
--- a/xbmc/pictures/PictureInfoTag.cpp
+++ b/xbmc/pictures/PictureInfoTag.cpp
@@ -18,17 +18,16 @@
  *
  */
 
-#include <cstdlib>
-#include <algorithm>
-
 #include "PictureInfoTag.h"
-#include "XBDateTime.h"
 #include "guilib/guiinfo/GUIInfoLabels.h"
 #include "utils/Variant.h"
 #include "utils/CharsetConverter.h"
 #include "utils/StringUtils.h"
 #include "utils/Archive.h"
 
+#include <algorithm>
+#include <vector>
+
 void CPictureInfoTag::Reset()
 {
   memset(&m_exifInfo, 0, sizeof(m_exifInfo));
diff --git a/xbmc/pictures/PictureInfoTag.h b/xbmc/pictures/PictureInfoTag.h
index bc2ffd37aea6..e97e5c3fc226 100644
--- a/xbmc/pictures/PictureInfoTag.h
+++ b/xbmc/pictures/PictureInfoTag.h
@@ -25,6 +25,8 @@
 #include "XBDateTime.h"
 #include "libexif.h"
 
+#include <string>
+
 class CVariant;
 
 class CPictureInfoTag : public IArchivable, public ISerializable, public ISortable

From 6560de565c4436155eec9995605d63045ba5b8c0 Mon Sep 17 00:00:00 2001
From: Max Kellermann <max.kellermann@gmail.com>
Date: Fri, 8 Jun 2018 17:00:09 +0200
Subject: [PATCH 6/8] pvr/PVRChannelNumber: remove `operator=()` implementation

This operator should only be implemented manually if special code is
needed.  It is a fragile thing to do.  The implementation
auto-generated by the C++ compiler is perfectly fine for this class.
---
 xbmc/pvr/channels/PVRChannelNumber.cpp | 7 -------
 xbmc/pvr/channels/PVRChannelNumber.h   | 5 -----
 2 files changed, 12 deletions(-)

diff --git a/xbmc/pvr/channels/PVRChannelNumber.cpp b/xbmc/pvr/channels/PVRChannelNumber.cpp
index 8c13a43e04b5..d3e3dea1a0de 100644
--- a/xbmc/pvr/channels/PVRChannelNumber.cpp
+++ b/xbmc/pvr/channels/PVRChannelNumber.cpp
@@ -26,13 +26,6 @@ using namespace PVR;
 
 const char CPVRChannelNumber::SEPARATOR = '.';
 
-CPVRChannelNumber& CPVRChannelNumber::operator=(const CPVRChannelNumber &channelNumber)
-{
-  m_iChannelNumber = channelNumber.m_iChannelNumber;
-  m_iSubChannelNumber = channelNumber.m_iSubChannelNumber;
-  return *this;
-}
-
 bool CPVRChannelNumber::operator==(const CPVRChannelNumber &right) const
 {
   return (m_iChannelNumber  == right.m_iChannelNumber &&
diff --git a/xbmc/pvr/channels/PVRChannelNumber.h b/xbmc/pvr/channels/PVRChannelNumber.h
index 0b5e8cb6cb9e..a0db239540c0 100644
--- a/xbmc/pvr/channels/PVRChannelNumber.h
+++ b/xbmc/pvr/channels/PVRChannelNumber.h
@@ -29,14 +29,9 @@ namespace PVR
     CPVRChannelNumber()
     : CPVRChannelNumber(0, 0) {}
 
-    CPVRChannelNumber(const CPVRChannelNumber &channelNumber)
-    : CPVRChannelNumber(channelNumber.m_iChannelNumber, channelNumber.m_iSubChannelNumber) {}
-
     CPVRChannelNumber(unsigned int iChannelNumber, unsigned int iSubChannelNumber)
     : m_iChannelNumber(iChannelNumber), m_iSubChannelNumber(iSubChannelNumber) {}
 
-    CPVRChannelNumber& operator=(const CPVRChannelNumber &channelNumber);
-
     bool operator ==(const CPVRChannelNumber &right) const;
     bool operator !=(const CPVRChannelNumber &right) const;
     bool operator <(const CPVRChannelNumber &right) const;

From 38d6416493c2c8957445a3cfb69d4522149b5b6c Mon Sep 17 00:00:00 2001
From: Max Kellermann <max.kellermann@gmail.com>
Date: Fri, 8 Jun 2018 17:01:23 +0200
Subject: [PATCH 7/8] pvr/PVRChannelNumber: use C++11 initializers

---
 xbmc/pvr/channels/PVRChannelNumber.h | 7 +++----
 1 file changed, 3 insertions(+), 4 deletions(-)

diff --git a/xbmc/pvr/channels/PVRChannelNumber.h b/xbmc/pvr/channels/PVRChannelNumber.h
index a0db239540c0..4c74eb18ebc7 100644
--- a/xbmc/pvr/channels/PVRChannelNumber.h
+++ b/xbmc/pvr/channels/PVRChannelNumber.h
@@ -26,8 +26,7 @@ namespace PVR
   class CPVRChannelNumber
   {
   public:
-    CPVRChannelNumber()
-    : CPVRChannelNumber(0, 0) {}
+    CPVRChannelNumber() = default;
 
     CPVRChannelNumber(unsigned int iChannelNumber, unsigned int iSubChannelNumber)
     : m_iChannelNumber(iChannelNumber), m_iSubChannelNumber(iSubChannelNumber) {}
@@ -66,7 +65,7 @@ namespace PVR
     std::string FormattedChannelNumber() const;
 
   private:
-    unsigned int m_iChannelNumber;
-    unsigned int m_iSubChannelNumber;
+    unsigned int m_iChannelNumber = 0;
+    unsigned int m_iSubChannelNumber = 0;
   };
 }

From f73d2be76dc2120168450b05836ba5f08e5e1908 Mon Sep 17 00:00:00 2001
From: Max Kellermann <max.kellermann@gmail.com>
Date: Fri, 8 Jun 2018 17:01:14 +0200
Subject: [PATCH 8/8] pvr/PVRChannelNumber: add `constexpr`

---
 xbmc/pvr/channels/PVRChannelNumber.cpp | 29 -----------------------------
 xbmc/pvr/channels/PVRChannelNumber.h   | 34 +++++++++++++++++++++++++++-------
 2 files changed, 27 insertions(+), 36 deletions(-)

diff --git a/xbmc/pvr/channels/PVRChannelNumber.cpp b/xbmc/pvr/channels/PVRChannelNumber.cpp
index d3e3dea1a0de..5b1e3aef41e1 100644
--- a/xbmc/pvr/channels/PVRChannelNumber.cpp
+++ b/xbmc/pvr/channels/PVRChannelNumber.cpp
@@ -26,35 +26,6 @@ using namespace PVR;
 
 const char CPVRChannelNumber::SEPARATOR = '.';
 
-bool CPVRChannelNumber::operator==(const CPVRChannelNumber &right) const
-{
-  return (m_iChannelNumber  == right.m_iChannelNumber &&
-          m_iSubChannelNumber == right.m_iSubChannelNumber);
-}
-
-bool CPVRChannelNumber::operator!=(const CPVRChannelNumber &right) const
-{
-  return !(*this == right);
-}
-
-bool CPVRChannelNumber::operator <(const CPVRChannelNumber &right) const
-{
-  if (m_iChannelNumber == right.m_iChannelNumber)
-    return m_iSubChannelNumber < right.m_iSubChannelNumber;
-
-  return m_iChannelNumber < right.m_iChannelNumber;
-}
-
-unsigned int CPVRChannelNumber::GetChannelNumber() const
-{
-  return m_iChannelNumber;
-}
-
-unsigned int CPVRChannelNumber::GetSubChannelNumber() const
-{
-  return m_iSubChannelNumber;
-}
-
 std::string CPVRChannelNumber::FormattedChannelNumber() const
 {
   if (m_iSubChannelNumber == 0)
diff --git a/xbmc/pvr/channels/PVRChannelNumber.h b/xbmc/pvr/channels/PVRChannelNumber.h
index 4c74eb18ebc7..c4e30d22c84c 100644
--- a/xbmc/pvr/channels/PVRChannelNumber.h
+++ b/xbmc/pvr/channels/PVRChannelNumber.h
@@ -28,30 +28,50 @@ namespace PVR
   public:
     CPVRChannelNumber() = default;
 
-    CPVRChannelNumber(unsigned int iChannelNumber, unsigned int iSubChannelNumber)
+    constexpr CPVRChannelNumber(unsigned int iChannelNumber, unsigned int iSubChannelNumber)
     : m_iChannelNumber(iChannelNumber), m_iSubChannelNumber(iSubChannelNumber) {}
 
-    bool operator ==(const CPVRChannelNumber &right) const;
-    bool operator !=(const CPVRChannelNumber &right) const;
-    bool operator <(const CPVRChannelNumber &right) const;
+    constexpr bool operator ==(const CPVRChannelNumber &right) const
+    {
+      return (m_iChannelNumber  == right.m_iChannelNumber &&
+              m_iSubChannelNumber == right.m_iSubChannelNumber);
+    }
+
+    constexpr bool operator !=(const CPVRChannelNumber &right) const
+    {
+      return !(*this == right);
+    }
+
+    constexpr bool operator <(const CPVRChannelNumber &right) const
+    {
+      return m_iChannelNumber == right.m_iChannelNumber
+        ? m_iSubChannelNumber < right.m_iSubChannelNumber
+        : m_iChannelNumber < right.m_iChannelNumber;
+    }
 
     /*!
      * @brief Check whether this channel number is valid (main channel number > 0).
      * @return True if valid, false otherwise..
      */
-    bool IsValid() const { return m_iChannelNumber > 0; }
+    constexpr bool IsValid() const { return m_iChannelNumber > 0; }
 
     /*!
      * @brief Set the primary channel number.
      * @return The channel number.
      */
-    unsigned int GetChannelNumber() const;
+    constexpr unsigned int GetChannelNumber() const
+    {
+      return m_iChannelNumber;
+    }
 
     /*!
      * @brief Set the sub channel number.
      * @return The sub channel number (ATSC).
      */
-    unsigned int GetSubChannelNumber() const;
+    constexpr unsigned int GetSubChannelNumber() const
+    {
+      return m_iSubChannelNumber;
+    }
 
     /*!
      * @brief The character used to separate channel and subchannel number.
