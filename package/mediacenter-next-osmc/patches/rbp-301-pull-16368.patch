From 7239c68e09043a9fd2785e9a2fb38d24aac2f835 Mon Sep 17 00:00:00 2001
From: Kai Sommerfeld <kai.sommerfeld@gmx.com>
Date: Tue, 9 Jul 2019 23:53:58 +0200
Subject: [PATCH 1/4] URIUtils/CUtil cleanup.

---
 xbmc/FileItem.cpp           |  4 ++--
 xbmc/Util.cpp               | 17 +----------------
 xbmc/Util.h                 |  4 ----
 xbmc/utils/URIUtils.cpp     | 11 ++++++++++-
 xbmc/utils/URIUtils.h       |  1 +
 xbmc/video/ContextMenus.cpp |  6 +++---
 6 files changed, 17 insertions(+), 26 deletions(-)

diff --git a/xbmc/FileItem.cpp b/xbmc/FileItem.cpp
index 2bc57607801a..d1b4127ebc35 100644
--- a/xbmc/FileItem.cpp
+++ b/xbmc/FileItem.cpp
@@ -1253,7 +1253,7 @@ bool CFileItem::IsURL() const
 
 bool CFileItem::IsPVR() const
 {
-  return CUtil::IsPVR(m_strPath);
+  return URIUtils::IsPVR(m_strPath);
 }
 
 bool CFileItem::IsLiveTV() const
@@ -3202,7 +3202,7 @@ std::string CFileItem::GetMovieName(bool bUseFolderNames /* = false */) const
 
   if (m_pvrRecordingInfoTag)
     return m_pvrRecordingInfoTag->m_strTitle;
-  else if (CUtil::IsTVRecording(m_strPath))
+  else if (URIUtils::IsPVRRecording(m_strPath))
   {
     std::string title = CPVRRecording::GetTitleFromURL(m_strPath);
     if (!title.empty())
diff --git a/xbmc/Util.cpp b/xbmc/Util.cpp
index 504d4ece4369..af5de7223838 100644
--- a/xbmc/Util.cpp
+++ b/xbmc/Util.cpp
@@ -508,21 +508,6 @@ std::string CUtil::GetHomePath(std::string strTarget)
   return ::GetHomePath(strTarget, strPath);
 }
 
-bool CUtil::IsPVR(const std::string& strFile)
-{
-  return StringUtils::StartsWithNoCase(strFile, "pvr:");
-}
-
-bool CUtil::IsLiveTV(const std::string& strFile)
-{
-  return StringUtils::StartsWithNoCase(strFile, "pvr://channels");
-}
-
-bool CUtil::IsTVRecording(const std::string& strFile)
-{
-  return StringUtils::StartsWithNoCase(strFile, "pvr://recording");
-}
-
 bool CUtil::IsPicture(const std::string& strFile)
 {
   return URIUtils::HasExtension(strFile,
@@ -1509,7 +1494,7 @@ bool CUtil::SupportsWriteFileOperations(const std::string& strPath)
     return true;
   if (URIUtils::IsSmb(strPath))
     return true;
-  if (CUtil::IsTVRecording(strPath))
+  if (URIUtils::IsPVRRecording(strPath))
     return CPVRDirectory::SupportsWriteFileOperations(strPath);
   if (URIUtils::IsNfs(strPath))
     return true;
diff --git a/xbmc/Util.h b/xbmc/Util.h
index 28eacfdf05bb..94953a1b1072 100644
--- a/xbmc/Util.h
+++ b/xbmc/Util.h
@@ -49,10 +49,6 @@ class CUtil
   static void GetQualifiedFilename(const std::string &strBasePath, std::string &strFilename);
   static void RunShortcut(const char* szPath);
   static std::string GetHomePath(std::string strTarget = "KODI_HOME"); // default target is "KODI_HOME"
-  static bool IsPVR(const std::string& strFile);
-  static bool IsHTSP(const std::string& strFile);
-  static bool IsLiveTV(const std::string& strFile);
-  static bool IsTVRecording(const std::string& strFile);
   static bool ExcludeFileOrFolder(const std::string& strFileOrFolder, const std::vector<std::string>& regexps);
   static void GetFileAndProtocol(const std::string& strURL, std::string& strDir);
   static int GetDVDIfoTitle(const std::string& strPathFile);
diff --git a/xbmc/utils/URIUtils.cpp b/xbmc/utils/URIUtils.cpp
index 3df997841cbc..5bbef5079480 100644
--- a/xbmc/utils/URIUtils.cpp
+++ b/xbmc/utils/URIUtils.cpp
@@ -951,6 +951,14 @@ bool URIUtils::IsTCP(const std::string& strFile)
   return IsProtocol(strFile, "tcp");
 }
 
+bool URIUtils::IsPVR(const std::string& strFile)
+{
+  if (IsStack(strFile))
+    return IsPVR(CStackDirectory::GetFirstStackedFile(strFile));
+
+  return IsProtocol(strFile, "pvr");
+}
+
 bool URIUtils::IsPVRChannel(const std::string& strFile)
 {
   if (IsStack(strFile))
@@ -1029,7 +1037,8 @@ bool URIUtils::IsLiveTV(const std::string& strFile)
   std::string strFileWithoutSlash(strFile);
   RemoveSlashAtEnd(strFileWithoutSlash);
 
-  if (StringUtils::EndsWithNoCase(strFileWithoutSlash, ".pvr") && !StringUtils::StartsWith(strFileWithoutSlash, "pvr://recordings"))
+  if (StringUtils::EndsWithNoCase(strFileWithoutSlash, ".pvr") &&
+      !StringUtils::StartsWith(strFileWithoutSlash, "pvr://recordings"))
     return true;
 
   return false;
diff --git a/xbmc/utils/URIUtils.h b/xbmc/utils/URIUtils.h
index 4ba8bed55b46..5794149cd3a0 100644
--- a/xbmc/utils/URIUtils.h
+++ b/xbmc/utils/URIUtils.h
@@ -152,6 +152,7 @@ class URIUtils
   static bool IsAndroidApp(const std::string& strFile);
   static bool IsLibraryFolder(const std::string& strFile);
   static bool IsLibraryContent(const std::string& strFile);
+  static bool IsPVR(const std::string& strFile);
   static bool IsPVRChannel(const std::string& strFile);
   static bool IsPVRGuideItem(const std::string& strFile);
   static bool IsUsingFastSwitch(const std::string& strFile);
diff --git a/xbmc/video/ContextMenus.cpp b/xbmc/video/ContextMenus.cpp
index ebdec706723a..408f86ce6f03 100644
--- a/xbmc/video/ContextMenus.cpp
+++ b/xbmc/video/ContextMenus.cpp
@@ -10,7 +10,7 @@
 
 #include "Application.h"
 #include "Autorun.h"
-#include "Util.h"
+#include "utils/URIUtils.h"
 #include "video/dialogs/GUIDialogVideoInfo.h"
 #include "video/windows/GUIWindowVideoBase.h"
 
@@ -65,7 +65,7 @@ bool CMarkWatched::IsVisible(const CFileItem& item) const
     else if (item.GetProperty("IsVideoFolder").asBoolean())
       return true;
     else
-      return CUtil::IsTVRecording(item.GetPath());
+      return URIUtils::IsPVRRecording(item.GetPath());
   }
   else if (!item.HasVideoInfoTag())
     return false;
@@ -91,7 +91,7 @@ bool CMarkUnWatched::IsVisible(const CFileItem& item) const
     else if (item.GetProperty("IsVideoFolder").asBoolean())
       return true;
     else
-      return CUtil::IsTVRecording(item.GetPath());
+      return URIUtils::IsPVRRecording(item.GetPath());
   }
   else if (!item.HasVideoInfoTag())
     return false;

From 65097b0276987f42747723f7613a488d83310f5e Mon Sep 17 00:00:00 2001
From: Kai Sommerfeld <kai.sommerfeld@gmx.com>
Date: Tue, 9 Jul 2019 23:36:34 +0200
Subject: [PATCH 2/4] strings.po cleanup.

---
 addons/resource.language.en_gb/resources/strings.po | 10 ++++++----
 1 file changed, 6 insertions(+), 4 deletions(-)

diff --git a/addons/resource.language.en_gb/resources/strings.po b/addons/resource.language.en_gb/resources/strings.po
index 10015ae19c0e..74c74a9c8353 100644
--- a/addons/resource.language.en_gb/resources/strings.po
+++ b/addons/resource.language.en_gb/resources/strings.po
@@ -9133,7 +9133,7 @@ msgstr ""
 #: addons/skin.estuary/xml/Home.xml
 #: addons/skin.estuary/xml/Variables.xml
 #: xbmc/dialogs/GUIDialogMediaSource.cpp
-#: xbmc/filesystem/PVRDirectory.cpp
+#: xbmc/pvr/PVRGUIDirectory.cpp
 msgctxt "#19017"
 msgid "Recordings"
 msgstr ""
@@ -9150,6 +9150,7 @@ msgstr ""
 #: addons/skin.estuary/xml/DialogPVRChannelsOSD.xml
 #: addons/skin.estuary/xml/Variables.xml
 #: addons/skin.estuary/xml/Home.xml
+#: xbmc/pvr/PVRGUIDirectory.cpp
 #: xbmc/windows/GUIWindowSystemInfo.cpp
 msgctxt "#19019"
 msgid "Channels"
@@ -9159,8 +9160,8 @@ msgstr ""
 #: addons/skin.estuary/xml/Home.xml
 #: addons/skin.estuary/xml/SkinSettings.xml:
 #: addons/skin.estuary/xml/Variables.xml
-#: xbmc/pvr/channels/PVRChannelGroupsContainer.cpp
 #: xbmc/pvr/PVRGUIActions.cpp
+#: xbmc/pvr/PVRGUIDirectory.cpp
 msgctxt "#19020"
 msgid "TV"
 msgstr ""
@@ -9169,8 +9170,8 @@ msgstr ""
 #: addons/skin.estuary/xml/Home.xml
 #: addons/skin.estuary/xml/SkinSettings.xml
 #: addons/skin.estuary/xml/Variables.xml
-#: xbmc/pvr/channels/PVRChannelGroupsContainer.cpp
 #: xbmc/pvr/PVRGUIActions.cpp
+#: xbmc/pvr/PVRGUIDirectory.cpp
 msgctxt "#19021"
 msgid "Radio"
 msgstr ""
@@ -9206,7 +9207,7 @@ msgstr ""
 
 #. label for "add timer..." list item used in pvr timers / timer rules window
 #: xbmc/pvr/timers/PVRTimerInfoTag.cpp
-#: xbmc/pvr/timers/PVRTimers.cpp
+#: xbmc/pvr/PVRGUIDirectory.cpp
 msgctxt "#19026"
 msgid "Add timer..."
 msgstr ""
@@ -10180,6 +10181,7 @@ msgstr ""
 #. label for "deleted recordings" data source in media source window
 #: addons/skin.estuary/xml/Includes_MediaMenu.xml
 #: xbmc/dialogs/GUIDialogMediaSource.cpp
+#: xbmc/pvr/PVRGUIDirectory.cpp
 msgctxt "#19184"
 msgid "Deleted recordings"
 msgstr ""

From ca5caa7d56178dc371816448d343cb40f09f988c Mon Sep 17 00:00:00 2001
From: Kai Sommerfeld <kai.sommerfeld@gmx.com>
Date: Tue, 9 Jul 2019 18:16:19 +0200
Subject: [PATCH 3/4] [PVR] CPVRChannelsPath: Encapsulate channels paths.

---
 xbmc/FileItem.cpp                             |   4 +-
 xbmc/pvr/PVRDatabase.cpp                      |   4 +-
 xbmc/pvr/PVRGUIDirectory.cpp                  | 137 ++++++--------
 xbmc/pvr/channels/CMakeLists.txt              |   6 +-
 xbmc/pvr/channels/PVRChannel.cpp              |   8 +-
 xbmc/pvr/channels/PVRChannel.h                |   4 +-
 xbmc/pvr/channels/PVRChannelGroup.cpp         | 148 ++++++++-------
 xbmc/pvr/channels/PVRChannelGroup.h           |  33 ++--
 xbmc/pvr/channels/PVRChannelGroupInternal.cpp |  26 ++-
 xbmc/pvr/channels/PVRChannelGroups.cpp        |  52 ++----
 xbmc/pvr/channels/PVRChannelGroups.h          |   2 +-
 .../channels/PVRChannelGroupsContainer.cpp    |  11 +-
 xbmc/pvr/channels/PVRChannelsPath.cpp         | 169 ++++++++++++++++++
 xbmc/pvr/channels/PVRChannelsPath.h           |  67 +++++++
 xbmc/pvr/dialogs/GUIDialogPVRGroupManager.cpp |   2 +-
 xbmc/pvr/windows/GUIWindowPVRChannels.cpp     |   7 +-
 xbmc/utils/URIUtils.cpp                       |  12 +-
 xbmc/utils/URIUtils.h                         |   1 +
 18 files changed, 439 insertions(+), 254 deletions(-)
 create mode 100644 xbmc/pvr/channels/PVRChannelsPath.cpp
 create mode 100644 xbmc/pvr/channels/PVRChannelsPath.h

diff --git a/xbmc/FileItem.cpp b/xbmc/FileItem.cpp
index d1b4127ebc35..34e72b805619 100644
--- a/xbmc/FileItem.cpp
+++ b/xbmc/FileItem.cpp
@@ -851,9 +851,7 @@ bool CFileItem::IsPVRChannel() const
 
 bool CFileItem::IsPVRChannelGroup() const
 {
-  return !StringUtils::EndsWithNoCase(m_strPath, ".pvr") &&
-         (StringUtils::StartsWithNoCase(m_strPath, "pvr://channels/tv/") ||
-          StringUtils::StartsWithNoCase(m_strPath, "pvr://channels/radio/"));
+  return URIUtils::IsPVRChannelGroup(m_strPath);
 }
 
 bool CFileItem::IsPVRRecording() const
diff --git a/xbmc/pvr/PVRDatabase.cpp b/xbmc/pvr/PVRDatabase.cpp
index 8be567884d27..3404ca020520 100644
--- a/xbmc/pvr/PVRDatabase.cpp
+++ b/xbmc/pvr/PVRDatabase.cpp
@@ -573,7 +573,9 @@ bool CPVRDatabase::Get(CPVRChannelGroups &results)
     {
       while (!m_pDS->eof())
       {
-        CPVRChannelGroup data(m_pDS->fv("bIsRadio").get_asBool(), m_pDS->fv("idGroup").get_asInt(), m_pDS->fv("sName").get_asString(), results.GetGroupAll());
+        CPVRChannelGroup data(CPVRChannelsPath(m_pDS->fv("bIsRadio").get_asBool(), m_pDS->fv("sName").get_asString()),
+                              m_pDS->fv("idGroup").get_asInt(),
+                              results.GetGroupAll());
         data.SetGroupType(m_pDS->fv("iGroupType").get_asInt());
         data.SetLastWatched(static_cast<time_t>(m_pDS->fv("iLastWatched").get_asInt()));
         data.SetHidden(m_pDS->fv("bIsHidden").get_asBool());
diff --git a/xbmc/pvr/PVRGUIDirectory.cpp b/xbmc/pvr/PVRGUIDirectory.cpp
index 6a54b5495419..16ba93f31e54 100644
--- a/xbmc/pvr/PVRGUIDirectory.cpp
+++ b/xbmc/pvr/PVRGUIDirectory.cpp
@@ -16,6 +16,7 @@
 #include "pvr/channels/PVRChannelGroup.h"
 #include "pvr/channels/PVRChannelGroups.h"
 #include "pvr/channels/PVRChannelGroupsContainer.h"
+#include "pvr/channels/PVRChannelsPath.h"
 #include "pvr/recordings/PVRRecording.h"
 #include "pvr/recordings/PVRRecordings.h"
 #include "pvr/recordings/PVRRecordingsPath.h"
@@ -69,17 +70,17 @@ bool CPVRGUIDirectory::GetDirectory(CFileItemList& results) const
       std::shared_ptr<CFileItem> item;
 
       item.reset(new CFileItem(base + "channels/", true));
-      item->SetLabel(g_localizeStrings.Get(19019));
+      item->SetLabel(g_localizeStrings.Get(19019)); // Channels
       item->SetLabelPreformatted(true);
       results.Add(item);
 
       item.reset(new CFileItem(base + "recordings/active/", true));
-      item->SetLabel(g_localizeStrings.Get(19017)); // TV Recordings
+      item->SetLabel(g_localizeStrings.Get(19017)); // Recordings
       item->SetLabelPreformatted(true);
       results.Add(item);
 
       item.reset(new CFileItem(base + "recordings/deleted/", true));
-      item->SetLabel(g_localizeStrings.Get(19108)); // Deleted TV Recordings
+      item->SetLabel(g_localizeStrings.Get(19184)); // Deleted recordings
       item->SetLabelPreformatted(true);
       results.Add(item);
 
@@ -327,103 +328,67 @@ bool CPVRGUIDirectory::GetChannelGroupsDirectory(bool bRadio, bool bExcludeHidde
 
 bool CPVRGUIDirectory::GetChannelsDirectory(CFileItemList& results) const
 {
-  std::string base = m_url.Get();
-  URIUtils::RemoveSlashAtEnd(base);
-
-  std::string fileName = m_url.GetFileName();
-  URIUtils::RemoveSlashAtEnd(fileName);
-
-  if (fileName == "channels")
-  {
-    std::shared_ptr<CFileItem> item;
-
-    // all tv channels
-    item.reset(new CFileItem(base + "/tv/", true));
-    item->SetLabel(g_localizeStrings.Get(19020));
-    item->SetLabelPreformatted(true);
-    results.Add(item);
-
-    // all radio channels
-    item.reset(new CFileItem(base + "/radio/", true));
-    item->SetLabel(g_localizeStrings.Get(19021));
-    item->SetLabelPreformatted(true);
-    results.Add(item);
-
-    return true;
-  }
-  else if (fileName == "channels/tv")
-  {
-    return GetChannelGroupsDirectory(false, false, results);
-  }
-  else if (fileName == "channels/radio")
-  {
-    return GetChannelGroupsDirectory(true, false, results);
-  }
-  else if (StringUtils::StartsWith(fileName, "channels/tv/"))
+  const CPVRChannelsPath path(m_url.GetWithoutOptions());
+  if (path.IsValid())
   {
-    std::string strGroupName = fileName.substr(12);
-    URIUtils::RemoveSlashAtEnd(strGroupName);
+    if (path.IsEmpty())
+    {
+      std::shared_ptr<CFileItem> item;
 
-    std::shared_ptr<CPVRChannelGroup> group;
-    bool bShowHiddenChannels = StringUtils::EndsWithNoCase(fileName, ".hidden");
-    if (bShowHiddenChannels || strGroupName == "*") // all channels
-      group = CServiceBroker::GetPVRManager().ChannelGroups()->GetGroupAllTV();
-    else
-      group = CServiceBroker::GetPVRManager().ChannelGroups()->GetTV()->GetByName(strGroupName);
+      // all tv channels
+      item.reset(new CFileItem(CPVRChannelsPath::PATH_TV_CHANNELS, true));
+      item->SetLabel(g_localizeStrings.Get(19020)); // TV
+      item->SetLabelPreformatted(true);
+      results.Add(item);
 
-    if (group)
-    {
-      const std::vector<PVRChannelGroupMember> groupMembers = group->GetMembers();
-      for (const auto& groupMember : groupMembers)
-      {
-        if (bShowHiddenChannels != groupMember.channel->IsHidden())
-          continue;
+      // all radio channels
+      item.reset(new CFileItem(CPVRChannelsPath::PATH_RADIO_CHANNELS, true));
+      item->SetLabel(g_localizeStrings.Get(19021)); // Radio
+      item->SetLabelPreformatted(true);
+      results.Add(item);
 
-        results.Add(std::make_shared<CFileItem>(groupMember.channel));
-      }
+      return true;
     }
-    else
+    else if (path.IsChannelsRoot())
     {
-      CLog::LogF(LOGERROR, "Unable to obtain members of channel group '%s'", strGroupName.c_str());
-      return false;
+      return GetChannelGroupsDirectory(path.IsRadio(), false, results);
     }
+    else if (path.IsChannelGroup())
+    {
+      const std::string& strGroupName = path.GetGroupName();
+      bool bShowHiddenChannels = path.IsHiddenChannelGroup();
 
-    FilterDirectory(results);
-    return true;
-  }
-  else if (StringUtils::StartsWith(fileName, "channels/radio/"))
-  {
-    std::string strGroupName = fileName.substr(15);
-    URIUtils::RemoveSlashAtEnd(strGroupName);
-
-    std::shared_ptr<CPVRChannelGroup> group;
-    bool bShowHiddenChannels = StringUtils::EndsWithNoCase(fileName, ".hidden");
-    if (bShowHiddenChannels || strGroupName == "*") // all channels
-      group = CServiceBroker::GetPVRManager().ChannelGroups()->GetGroupAllRadio();
-    else
-      group = CServiceBroker::GetPVRManager().ChannelGroups()->GetRadio()->GetByName(strGroupName);
+      std::shared_ptr<CPVRChannelGroup> group;
+      if (bShowHiddenChannels || strGroupName == "*") // all channels
+      {
+        group = CServiceBroker::GetPVRManager().ChannelGroups()->GetGroupAll(path.IsRadio());
+      }
+      else
+      {
+        group = CServiceBroker::GetPVRManager().ChannelGroups()->Get(path.IsRadio())->GetByName(strGroupName);
+      }
 
-    if (group)
-    {
-      const std::vector<PVRChannelGroupMember> groupMembers = group->GetMembers();
-      for (const auto& groupMember : groupMembers)
+      if (group)
       {
-        if (bShowHiddenChannels != groupMember.channel->IsHidden())
-          continue;
+        const std::vector<PVRChannelGroupMember> groupMembers = group->GetMembers();
+        for (const auto& groupMember : groupMembers)
+        {
+          if (bShowHiddenChannels != groupMember.channel->IsHidden())
+            continue;
 
-        results.Add(std::make_shared<CFileItem>(groupMember.channel));
+          results.Add(std::make_shared<CFileItem>(groupMember.channel));
+        }
+      }
+      else
+      {
+        CLog::LogF(LOGERROR, "Unable to obtain members of channel group '%s'", strGroupName.c_str());
+        return false;
       }
-    }
-    else
-    {
-      CLog::LogF(LOGERROR, "Unable to obtain members of channel group '%s'", strGroupName.c_str());
-      return false;
-    }
 
-    FilterDirectory(results);
-    return true;
+      FilterDirectory(results);
+      return true;
+    }
   }
-
   return false;
 }
 
diff --git a/xbmc/pvr/channels/CMakeLists.txt b/xbmc/pvr/channels/CMakeLists.txt
index f8f9f06dfa26..39aa18f37f91 100644
--- a/xbmc/pvr/channels/CMakeLists.txt
+++ b/xbmc/pvr/channels/CMakeLists.txt
@@ -4,7 +4,8 @@ set(SOURCES PVRChannel.cpp
             PVRChannelGroups.cpp
             PVRChannelGroupsContainer.cpp
             PVRChannelNumber.cpp
-            PVRRadioRDSInfoTag.cpp)
+            PVRRadioRDSInfoTag.cpp
+            PVRChannelsPath.cpp)
 
 set(HEADERS PVRChannel.h
             PVRChannelGroup.h
@@ -12,6 +13,7 @@ set(HEADERS PVRChannel.h
             PVRChannelGroups.h
             PVRChannelGroupsContainer.h
             PVRChannelNumber.h
-            PVRRadioRDSInfoTag.h)
+            PVRRadioRDSInfoTag.h
+            PVRChannelsPath.h)
 
 core_add_library(pvr_channels)
diff --git a/xbmc/pvr/channels/PVRChannel.cpp b/xbmc/pvr/channels/PVRChannel.cpp
index 764fbaa8690d..f906b6a7de8e 100644
--- a/xbmc/pvr/channels/PVRChannel.cpp
+++ b/xbmc/pvr/channels/PVRChannel.cpp
@@ -14,6 +14,7 @@
 #include "guilib/LocalizeStrings.h"
 #include "pvr/PVRDatabase.h"
 #include "pvr/PVRManager.h"
+#include "pvr/channels/PVRChannelsPath.h"
 #include "pvr/epg/Epg.h"
 #include "pvr/epg/EpgChannelData.h"
 #include "pvr/epg/EpgContainer.h"
@@ -414,16 +415,13 @@ bool CPVRChannel::SetClientID(int iClientId)
   return false;
 }
 
-void CPVRChannel::UpdatePath(const std::string& groupPath)
+void CPVRChannel::UpdatePath(const std::string& channelGroup)
 {
   const CPVRClientPtr client = CServiceBroker::GetPVRManager().GetClient(m_iClientId);
   if (client)
   {
     CSingleLock lock(m_critSection);
-    const std::string strFileNameAndPath = StringUtils::Format("%s%s_%d.pvr",
-                                                               groupPath,
-                                                               client->ID().c_str(),
-                                                               m_iUniqueId);
+    const std::string strFileNameAndPath = CPVRChannelsPath(m_bIsRadio, channelGroup, client->ID(), m_iUniqueId);
     if (m_strFileNameAndPath != strFileNameAndPath)
     {
       m_strFileNameAndPath = strFileNameAndPath;
diff --git a/xbmc/pvr/channels/PVRChannel.h b/xbmc/pvr/channels/PVRChannel.h
index 93c9e30f0736..22f2adc39ddb 100644
--- a/xbmc/pvr/channels/PVRChannel.h
+++ b/xbmc/pvr/channels/PVRChannel.h
@@ -275,9 +275,9 @@ namespace PVR
 
     /*!
      * @brief Update the channel path
-     * @param groupPath The new path of the group this channel belongs to
+     * @param channelGroup The (new) name of the group this channel belongs to
      */
-    void UpdatePath(const std::string& groupPath);
+    void UpdatePath(const std::string& channelGroup);
 
     /*!
      * @return Storage id for this channel in CPVRChannelGroup
diff --git a/xbmc/pvr/channels/PVRChannelGroup.cpp b/xbmc/pvr/channels/PVRChannelGroup.cpp
index 5025d62c7654..5fc561937c08 100644
--- a/xbmc/pvr/channels/PVRChannelGroup.cpp
+++ b/xbmc/pvr/channels/PVRChannelGroup.cpp
@@ -17,6 +17,7 @@
 #include "pvr/PVRManager.h"
 #include "pvr/addons/PVRClients.h"
 #include "pvr/channels/PVRChannel.h"
+#include "pvr/channels/PVRChannelsPath.h"
 #include "pvr/epg/Epg.h"
 #include "pvr/epg/EpgChannelData.h"
 #include "pvr/epg/EpgInfoTag.h"
@@ -35,53 +36,43 @@
 
 using namespace PVR;
 
-CPVRChannelGroup::CPVRChannelGroup()
-{
-  OnInit();
-}
-
-CPVRChannelGroup::CPVRChannelGroup(bool bRadio,
-                                   int iGroupId,
-                                   const std::string& strGroupName,
-                                   const std::shared_ptr<CPVRChannelGroup>& allChannelsGroup) :
-    m_bRadio(bRadio),
-    m_iGroupId(iGroupId),
-    m_strGroupName(strGroupName),
-    m_allChannelsGroup(allChannelsGroup)
+CPVRChannelGroup::CPVRChannelGroup(const CPVRChannelsPath& path,
+                                   int iGroupId /* = INVALID_GROUP_ID */,
+                                   const std::shared_ptr<CPVRChannelGroup>& allChannelsGroup /* = {} */)
+  : m_iGroupId(iGroupId)
+  , m_allChannelsGroup(allChannelsGroup)
+  , m_path(path)
 {
   OnInit();
 }
 
 CPVRChannelGroup::CPVRChannelGroup(const PVR_CHANNEL_GROUP& group,
-                                   const std::shared_ptr<CPVRChannelGroup>& allChannelsGroup) :
-    m_bRadio(group.bIsRadio),
-    m_strGroupName(group.strGroupName),
-    m_iPosition(group.iPosition),
-    m_allChannelsGroup(allChannelsGroup)
+                                   const std::shared_ptr<CPVRChannelGroup>& allChannelsGroup)
+  : m_iPosition(group.iPosition)
+  , m_allChannelsGroup(allChannelsGroup)
+  , m_path(group.bIsRadio, group.strGroupName)
 {
   OnInit();
 }
 
-CPVRChannelGroup::CPVRChannelGroup(const CPVRChannelGroup &group) :
-    m_strGroupName(group.m_strGroupName)
-{
-  m_bRadio                      = group.m_bRadio;
-  m_iGroupType                  = group.m_iGroupType;
-  m_iGroupId                    = group.m_iGroupId;
-  m_bLoaded                     = group.m_bLoaded;
-  m_bChanged                    = group.m_bChanged;
-  m_bUsingBackendChannelOrder   = group.m_bUsingBackendChannelOrder;
-  m_bUsingBackendChannelNumbers = group.m_bUsingBackendChannelNumbers;
-  m_iLastWatched                = group.m_iLastWatched;
-  m_bHidden                     = group.m_bHidden;
-  m_bPreventSortAndRenumber     = group.m_bPreventSortAndRenumber;
-  m_members                     = group.m_members;
-  m_sortedMembers               = group.m_sortedMembers;
-  m_iPosition                   = group.m_iPosition;
-  m_failedClientsForChannels    = group.m_failedClientsForChannels;
-  m_failedClientsForChannelGroupMembers = group.m_failedClientsForChannelGroupMembers;
-  m_allChannelsGroup = group.m_allChannelsGroup;
-
+CPVRChannelGroup::CPVRChannelGroup(const CPVRChannelGroup& group)
+  : m_iGroupType(group.m_iGroupType)
+  , m_iGroupId(group.m_iGroupId)
+  , m_bLoaded(group.m_bLoaded)
+  , m_bChanged(group.m_bChanged)
+  , m_bUsingBackendChannelOrder(group.m_bUsingBackendChannelOrder)
+  , m_bUsingBackendChannelNumbers(group.m_bUsingBackendChannelNumbers)
+  , m_bPreventSortAndRenumber(group.m_bPreventSortAndRenumber)
+  , m_iLastWatched(group.m_iLastWatched)
+  , m_bHidden(group.m_bHidden)
+  , m_iPosition(group.m_iPosition)
+  , m_sortedMembers(group.m_sortedMembers)
+  , m_members(group.m_members)
+  , m_failedClientsForChannels(group.m_failedClientsForChannels)
+  , m_failedClientsForChannelGroupMembers(group.m_failedClientsForChannelGroupMembers)
+  , m_allChannelsGroup(group.m_allChannelsGroup)
+  , m_path(group.m_path)
+{
   OnInit();
 }
 
@@ -93,11 +84,10 @@ CPVRChannelGroup::~CPVRChannelGroup(void)
 
 bool CPVRChannelGroup::operator==(const CPVRChannelGroup& right) const
 {
-  return (m_bRadio == right.m_bRadio &&
-      m_iGroupType == right.m_iGroupType &&
-      m_iGroupId == right.m_iGroupId &&
-      m_strGroupName == right.m_strGroupName &&
-      m_iPosition == right.m_iPosition);
+  return (m_iGroupType == right.m_iGroupType &&
+          m_iGroupId == right.m_iGroupId &&
+          m_iPosition == right.m_iPosition &&
+          m_path == right.m_path);
 }
 
 bool CPVRChannelGroup::operator!=(const CPVRChannelGroup &right) const
@@ -125,18 +115,18 @@ bool CPVRChannelGroup::Load(std::vector<std::shared_ptr<CPVRChannel>>& channelsT
   m_bUsingBackendChannelNumbers = settings->GetBool(CSettings::SETTING_PVRMANAGER_USEBACKENDCHANNELNUMBERS);
 
   int iChannelCount = m_iGroupId > 0 ? LoadFromDb() : 0;
-  CLog::LogFC(LOGDEBUG, LOGPVR, "%d channels loaded from the database for group '%s'", iChannelCount, m_strGroupName.c_str());
+  CLog::LogFC(LOGDEBUG, LOGPVR, "%d channels loaded from the database for group '%s'", iChannelCount, GroupName().c_str());
 
   if (!Update(channelsToRemove))
   {
-    CLog::LogF(LOGERROR, "Failed to update channels for group '%s', m_strGroupName.c_str()");
+    CLog::LogF(LOGERROR, "Failed to update channels for group '%s'", GroupName().c_str());
     return false;
   }
 
   if (Size() - iChannelCount > 0)
   {
     CLog::LogFC(LOGDEBUG, LOGPVR, "%d channels added from clients to group '%s'",
-                static_cast<int>(Size() - iChannelCount), m_strGroupName.c_str());
+                static_cast<int>(Size() - iChannelCount), GroupName().c_str());
   }
 
   SortAndRenumber();
@@ -161,16 +151,28 @@ bool CPVRChannelGroup::Update(std::vector<std::shared_ptr<CPVRChannel>>& channel
       !CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_PVRMANAGER_SYNCCHANNELGROUPS))
     return true;
 
-  CPVRChannelGroup PVRChannels_tmp(m_bRadio, m_iGroupId, m_strGroupName, m_allChannelsGroup);
+  CPVRChannelGroup PVRChannels_tmp(m_path, m_iGroupId, m_allChannelsGroup);
   PVRChannels_tmp.SetPreventSortAndRenumber();
   PVRChannels_tmp.LoadFromClients();
   m_failedClientsForChannelGroupMembers = PVRChannels_tmp.m_failedClientsForChannelGroupMembers;
   return UpdateGroupEntries(PVRChannels_tmp, channelsToRemove);
 }
 
-std::string CPVRChannelGroup::GetPath() const
+const CPVRChannelsPath& CPVRChannelGroup::GetPath() const
+{
+  CSingleLock lock(m_critSection);
+  return m_path;
+}
+
+void CPVRChannelGroup::SetPath(const CPVRChannelsPath& path)
 {
-  return StringUtils::Format("pvr://channels/%s/%s/", m_bRadio ? "radio" : "tv", GroupName().c_str());
+  CSingleLock lock(m_critSection);
+  if (m_path != path)
+  {
+    m_path = path;
+    m_bChanged = true;
+    Persist();
+  }
 }
 
 bool CPVRChannelGroup::SetChannelNumber(const CPVRChannelPtr &channel, const CPVRChannelNumber &channelNumber)
@@ -499,7 +501,7 @@ bool CPVRChannelGroup::AddAndUpdateChannels(const CPVRChannelGroup &channels, bo
 
       bReturn = true;
       CLog::Log(LOGINFO,"Added %s channel '%s' to group '%s'",
-                m_bRadio ? "radio" : "TV", existingChannel.channel->ChannelName().c_str(), GroupName().c_str());
+                IsRadio() ? "radio" : "TV", existingChannel.channel->ChannelName().c_str(), GroupName().c_str());
     }
   }
 
@@ -535,7 +537,7 @@ std::vector<CPVRChannelPtr> CPVRChannelGroup::RemoveDeletedChannels(const CPVRCh
     {
       /* channel was not found */
       CLog::Log(LOGINFO,"Deleted %s channel '%s' from group '%s'",
-                m_bRadio ? "radio" : "TV", channel->ChannelName().c_str(), GroupName().c_str());
+                IsRadio() ? "radio" : "TV", channel->ChannelName().c_str(), GroupName().c_str());
 
       removedChannels.emplace_back(channel);
 
@@ -671,28 +673,6 @@ bool CPVRChannelGroup::IsGroupMember(int iChannelId) const
   return bReturn;
 }
 
-bool CPVRChannelGroup::SetGroupName(const std::string &strGroupName, bool bSaveInDb /* = false */)
-{
-  bool bReturn(false);
-  CSingleLock lock(m_critSection);
-
-  if (m_strGroupName != strGroupName)
-  {
-    /* update the name */
-    m_strGroupName = strGroupName;
-    m_bChanged = true;
-//    SetChanged();
-
-    /* persist the changes */
-    if (bSaveInDb)
-      Persist();
-
-    bReturn = true;
-  }
-
-  return bReturn;
-}
-
 bool CPVRChannelGroup::Persist(void)
 {
   bool bReturn(true);
@@ -830,7 +810,7 @@ void CPVRChannelGroup::OnSettingChanged(std::shared_ptr<const CSetting> setting)
     if (bChannelOrderChanged || bChannelNumbersChanged)
     {
       CLog::LogFC(LOGDEBUG, LOGPVR, "Renumbering channel group '%s' to use the backend channel order and/or numbers",
-                  m_strGroupName.c_str());
+                  GroupName().c_str());
 
       if (bChannelOrderChanged)
         UpdateClientPriorities();
@@ -948,8 +928,24 @@ int CPVRChannelGroup::GroupType(void) const
 std::string CPVRChannelGroup::GroupName(void) const
 {
   CSingleLock lock(m_critSection);
-  std::string strReturn(m_strGroupName);
-  return strReturn;
+  return m_path.GetGroupName();
+}
+
+void CPVRChannelGroup::SetGroupName(const std::string& strGroupName)
+{
+  CSingleLock lock(m_critSection);
+  if (m_path.GetGroupName() != strGroupName)
+  {
+    m_path = CPVRChannelsPath(m_path.IsRadio(), strGroupName);
+    m_bChanged = true;
+    Persist();
+  }
+}
+
+bool CPVRChannelGroup::IsRadio() const
+{
+  CSingleLock lock(m_critSection);
+  return m_path.IsRadio();
 }
 
 time_t CPVRChannelGroup::LastWatched(void) const
diff --git a/xbmc/pvr/channels/PVRChannelGroup.h b/xbmc/pvr/channels/PVRChannelGroup.h
index 878eafe85674..4f05b2d70ef6 100644
--- a/xbmc/pvr/channels/PVRChannelGroup.h
+++ b/xbmc/pvr/channels/PVRChannelGroup.h
@@ -11,6 +11,7 @@
 #include "XBDateTime.h"
 #include "pvr/PVRTypes.h"
 #include "pvr/channels/PVRChannelNumber.h"
+#include "pvr/channels/PVRChannelsPath.h"
 #include "settings/lib/ISettingCallback.h"
 #include "utils/Observer.h"
 
@@ -61,12 +62,13 @@ namespace PVR
 
     /*!
      * @brief Create a new channel group instance.
-     * @param bRadio True if this group holds radio channels.
+     * @param path The channel group path.
      * @param iGroupId The database ID of this group or INVALID_GROUP_ID if the group was not yet stored in the database.
-     * @param strGroupName The name of this group.
      * @param allChannelsGroup The channel group containing all TV or radio channels.
      */
-    CPVRChannelGroup(bool bRadio, int iGroupId, const std::string& strGroupName, const std::shared_ptr<CPVRChannelGroup>& allChannelsGroup);
+    CPVRChannelGroup(const CPVRChannelsPath& path,
+                     int iGroupId = INVALID_GROUP_ID,
+                     const std::shared_ptr<CPVRChannelGroup>& allChannelsGroup = {});
 
     /*!
      * @brief Create a new channel group instance from a channel group provided by an add-on.
@@ -113,7 +115,13 @@ namespace PVR
      * @brief Get the path of this group.
      * @return the path.
      */
-    std::string GetPath() const;
+    const CPVRChannelsPath& GetPath() const;
+
+    /*!
+     * @brief Set the path of this group.
+     * @param the path.
+     */
+    void SetPath(const CPVRChannelsPath& path);
 
     /*!
      * @brief Change the channelnumber of a group. Used by CGUIDialogPVRChannelManager. Call SortByChannelNumber() and Renumber() after all changes are done.
@@ -141,10 +149,8 @@ namespace PVR
     /*!
      * @brief Change the name of this group.
      * @param strGroupName The new group name.
-     * @param bSaveInDb Save in the database or not.
-     * @return True if the something changed, false otherwise.
      */
-    bool SetGroupName(const std::string &strGroupName, bool bSaveInDb = false);
+    void SetGroupName(const std::string& strGroupName);
 
     /*!
      * @brief Persist changed or new data.
@@ -176,13 +182,7 @@ namespace PVR
      * @brief True if this group holds radio channels, false if it holds TV channels.
      * @return True if this group holds radio channels, false if it holds TV channels.
      */
-    bool IsRadio(void) const { return m_bRadio; }
-
-    /*!
-     * @brief Set 'radio' property of this group.
-     * @param bIsRadio The new value for the 'radio' property.
-     */
-    void SetRadio(bool bIsRadio) { m_bRadio = bIsRadio; }
+    bool IsRadio() const;
 
     /*!
      * @brief True if sorting should be prevented when adding/updating channels to the group.
@@ -439,8 +439,6 @@ namespace PVR
     bool IsMissingChannelsFromClient(int iClientId) const;
 
   protected:
-    CPVRChannelGroup();
-
     /*!
      * @brief Init class
      */
@@ -506,10 +504,8 @@ namespace PVR
      */
     bool UpdateClientPriorities();
 
-    bool             m_bRadio = false;                      /*!< true if this container holds radio channels, false if it holds TV channels */
     int              m_iGroupType = PVR_GROUP_TYPE_DEFAULT;                  /*!< The type of this group */
     int              m_iGroupId = INVALID_GROUP_ID; /*!< The ID of this group in the database */
-    std::string      m_strGroupName;                /*!< The name of this group */
     bool             m_bLoaded = false;                     /*!< True if this container is loaded, false otherwise */
     bool             m_bChanged = false;                    /*!< true if anything changed in this group that hasn't been persisted, false otherwise */
     bool             m_bUsingBackendChannelOrder = false;   /*!< true to use the channel order from backends, false otherwise */
@@ -528,5 +524,6 @@ namespace PVR
     CDateTime GetEPGDate(EpgDateType epgDateType) const;
 
     std::shared_ptr<CPVRChannelGroup> m_allChannelsGroup;
+    CPVRChannelsPath m_path;
   };
 }
diff --git a/xbmc/pvr/channels/PVRChannelGroupInternal.cpp b/xbmc/pvr/channels/PVRChannelGroupInternal.cpp
index b540bab79eec..103c7f5c535a 100644
--- a/xbmc/pvr/channels/PVRChannelGroupInternal.cpp
+++ b/xbmc/pvr/channels/PVRChannelGroupInternal.cpp
@@ -26,12 +26,10 @@
 using namespace PVR;
 using namespace KODI::MESSAGING;
 
-CPVRChannelGroupInternal::CPVRChannelGroupInternal(bool bRadio) :
-  m_iHiddenChannels(0)
+CPVRChannelGroupInternal::CPVRChannelGroupInternal(bool bRadio)
+: CPVRChannelGroup(CPVRChannelsPath(bRadio, g_localizeStrings.Get(19287)), PVR_GROUP_TYPE_INTERNAL)
+,  m_iHiddenChannels(0)
 {
-  m_iGroupType = PVR_GROUP_TYPE_INTERNAL;
-  m_bRadio = bRadio;
-  m_strGroupName = g_localizeStrings.Get(19287);
 }
 
 CPVRChannelGroupInternal::CPVRChannelGroupInternal(const CPVRChannelGroup &group) :
@@ -64,10 +62,10 @@ void CPVRChannelGroupInternal::CheckGroupName(void)
   CSingleLock lock(m_critSection);
 
   /* check whether the group name is still correct, or channels will fail to load after the language setting changed */
-  std::string strNewGroupName = g_localizeStrings.Get(19287);
-  if (m_strGroupName != strNewGroupName)
+  const std::string strNewGroupName = g_localizeStrings.Get(19287);
+  if (GroupName() != strNewGroupName)
   {
-    SetGroupName(strNewGroupName, true);
+    SetGroupName(strNewGroupName);
     UpdateChannelPaths();
   }
 }
@@ -81,7 +79,7 @@ void CPVRChannelGroupInternal::UpdateChannelPaths(void)
     if (it->second.channel->IsHidden())
       ++m_iHiddenChannels;
     else
-      it->second.channel->UpdatePath(GetPath());
+      it->second.channel->UpdatePath(GroupName());
   }
 }
 
@@ -101,7 +99,7 @@ CPVRChannelPtr CPVRChannelGroupInternal::UpdateFromClient(const CPVRChannelPtr &
       iChannelNumber = static_cast<int>(m_sortedMembers.size()) + 1;
 
     PVRChannelGroupMember newMember(channel, CPVRChannelNumber(iChannelNumber, channelNumber.GetSubChannelNumber()), 0);
-    channel->UpdatePath(GetPath());
+    channel->UpdatePath(GroupName());
     m_sortedMembers.push_back(newMember);
     m_members.insert(std::make_pair(channel->StorageId(), newMember));
     m_bChanged = true;
@@ -113,7 +111,7 @@ CPVRChannelPtr CPVRChannelGroupInternal::UpdateFromClient(const CPVRChannelPtr &
 
 bool CPVRChannelGroupInternal::Update(std::vector<std::shared_ptr<CPVRChannel>>& channelsToRemove)
 {
-  CPVRChannelGroupInternal PVRChannels_tmp(m_bRadio);
+  CPVRChannelGroupInternal PVRChannels_tmp(IsRadio());
   PVRChannels_tmp.SetPreventSortAndRenumber();
   PVRChannels_tmp.LoadFromClients();
   m_failedClientsForChannels = PVRChannels_tmp.m_failedClientsForChannels;
@@ -243,7 +241,7 @@ bool CPVRChannelGroupInternal::AddAndUpdateChannels(const CPVRChannelGroup &chan
       if (existingChannel.channel->UpdateFromClient(it->second.channel))
       {
         bReturn = true;
-        CLog::LogFC(LOGDEBUG, LOGPVR, "Updated {} channel '{}' from PVR client", m_bRadio ? "radio" : "TV", it->second.channel->ChannelName());
+        CLog::LogFC(LOGDEBUG, LOGPVR, "Updated {} channel '{}' from PVR client", IsRadio() ? "radio" : "TV", it->second.channel->ChannelName());
       }
     }
     else
@@ -252,10 +250,10 @@ bool CPVRChannelGroupInternal::AddAndUpdateChannels(const CPVRChannelGroup &chan
       UpdateFromClient(it->second.channel, bUseBackendChannelNumbers ? it->second.channel->ClientChannelNumber() : CPVRChannelNumber());
       if (it->second.channel->CreateEPG())
       {
-         CLog::LogFC(LOGDEBUG, LOGPVR, "Created EPG for {} channel '{}' from PVR client", m_bRadio ? "radio" : "TV", it->second.channel->ChannelName());
+         CLog::LogFC(LOGDEBUG, LOGPVR, "Created EPG for {} channel '{}' from PVR client", IsRadio() ? "radio" : "TV", it->second.channel->ChannelName());
       }
       bReturn = true;
-      CLog::LogFC(LOGDEBUG, LOGPVR, "Added {} channel '{}' from PVR client", m_bRadio ? "radio" : "TV", it->second.channel->ChannelName());
+      CLog::LogFC(LOGDEBUG, LOGPVR, "Added {} channel '{}' from PVR client", IsRadio() ? "radio" : "TV", it->second.channel->ChannelName());
     }
   }
 
diff --git a/xbmc/pvr/channels/PVRChannelGroups.cpp b/xbmc/pvr/channels/PVRChannelGroups.cpp
index d5e2ccd400f8..4a3030521d55 100644
--- a/xbmc/pvr/channels/PVRChannelGroups.cpp
+++ b/xbmc/pvr/channels/PVRChannelGroups.cpp
@@ -13,6 +13,7 @@
 #include "pvr/PVRManager.h"
 #include "pvr/addons/PVRClients.h"
 #include "pvr/channels/PVRChannelGroupInternal.h"
+#include "pvr/channels/PVRChannelsPath.h"
 #include "settings/AdvancedSettings.h"
 #include "settings/Settings.h"
 #include "settings/SettingsComponent.h"
@@ -77,13 +78,12 @@ bool CPVRChannelGroups::Update(const CPVRChannelGroup &group, bool bUpdateFromCl
     {
       // create a new group if none was found. Copy the properties immediately
       // so the group doesn't get flagged as "changed" further down.
-      updateGroup.reset(new CPVRChannelGroup(group.IsRadio(), group.GroupID(), group.GroupName(), GetGroupAll()));
+      updateGroup.reset(new CPVRChannelGroup(CPVRChannelsPath(group.IsRadio(), group.GroupName()), group.GroupID(), GetGroupAll()));
       m_groups.push_back(updateGroup);
     }
 
-    updateGroup->SetRadio(group.IsRadio());
+    updateGroup->SetPath(group.GetPath());
     updateGroup->SetGroupID(group.GroupID());
-    updateGroup->SetGroupName(group.GroupName());
     updateGroup->SetGroupType(group.GroupType());
     updateGroup->SetPosition(group.GetPosition());
 
@@ -123,31 +123,16 @@ void CPVRChannelGroups::SortGroups()
   }
 }
 
-std::shared_ptr<CPVRChannel> CPVRChannelGroups::GetByPath(const std::string& strInPath) const
+std::shared_ptr<CPVRChannel> CPVRChannelGroups::GetByPath(const CPVRChannelsPath& path) const
 {
-  std::string strPath = strInPath;
-  URIUtils::RemoveSlashAtEnd(strPath);
-  std::string strCheckPath;
-
-  CSingleLock lock(m_critSection);
-  for (const auto& group : m_groups)
+  if (path.IsChannel())
   {
-    // check if the path matches
-    strCheckPath = group->GetPath();
-    if (URIUtils::PathHasParent(strPath, strCheckPath))
-    {
-      strPath.erase(0, strCheckPath.size());
-      std::vector<std::string> split(StringUtils::Split(strPath, '_', 2));
-      if (split.size() == 2)
-      {
-        const CPVRChannelPtr channel = group->GetByUniqueID(atoi(split[1].c_str()), CServiceBroker::GetPVRManager().Clients()->GetClientId(split[0]));
-        if (channel)
-          return channel;
-      }
-    }
+    const std::shared_ptr<CPVRChannelGroup> group = GetByName(path.GetGroupName());
+    if (group)
+      return group->GetByUniqueID(path.GetChannelUID(),
+                                  CServiceBroker::GetPVRManager().Clients()->GetClientId(path.GetClientID()));
   }
 
-  // no match
   return {};
 }
 
@@ -179,16 +164,15 @@ std::vector<CPVRChannelGroupPtr> CPVRChannelGroups::GetGroupsByChannel(const CPV
 
 std::shared_ptr<CPVRChannelGroup> CPVRChannelGroups::GetGroupByPath(const std::string& strInPath) const
 {
-  // group paths returned by CPVRChannelGroup::GetPath() are always terminated by a "/"
-  std::string strPath = strInPath;
-  if (!strPath.empty() && strPath[strPath.size() - 1] != '/')
-    strPath += '/';
-
-  CSingleLock lock(m_critSection);
-  for (const auto& group : m_groups)
+  const CPVRChannelsPath path(strInPath);
+  if (path.IsChannelGroup())
   {
-    if (group->GetPath() == strPath)
-      return group;
+    CSingleLock lock(m_critSection);
+    for (const auto& group : m_groups)
+    {
+      if (group->GetPath() == path)
+        return group;
+    }
   }
   return {};
 }
@@ -503,7 +487,7 @@ bool CPVRChannelGroups::AddGroup(const std::string &strName)
     if (!group)
     {
       // create a new group
-      group.reset(new CPVRChannelGroup(m_bRadio, CPVRChannelGroup::INVALID_GROUP_ID, strName, GetGroupAll()));
+      group.reset(new CPVRChannelGroup(CPVRChannelsPath(m_bRadio, strName), CPVRChannelGroup::INVALID_GROUP_ID, GetGroupAll()));
 
       m_groups.push_back(group);
       bPersist = true;
diff --git a/xbmc/pvr/channels/PVRChannelGroups.h b/xbmc/pvr/channels/PVRChannelGroups.h
index b8221252deb4..0f2b88a238eb 100644
--- a/xbmc/pvr/channels/PVRChannelGroups.h
+++ b/xbmc/pvr/channels/PVRChannelGroups.h
@@ -69,7 +69,7 @@ namespace PVR
      * @param strPath The path to the channel
      * @return The channel, or nullptr if not found
      */
-    std::shared_ptr<CPVRChannel> GetByPath(const std::string& strPath) const;
+    std::shared_ptr<CPVRChannel> GetByPath(const CPVRChannelsPath& path) const;
 
     /*!
      * @brief Get a pointer to a channel group given its ID.
diff --git a/xbmc/pvr/channels/PVRChannelGroupsContainer.cpp b/xbmc/pvr/channels/PVRChannelGroupsContainer.cpp
index 8cf93af1c72f..cf1701afa3fe 100644
--- a/xbmc/pvr/channels/PVRChannelGroupsContainer.cpp
+++ b/xbmc/pvr/channels/PVRChannelGroupsContainer.cpp
@@ -110,17 +110,16 @@ std::shared_ptr<CPVRChannel> CPVRChannelGroupsContainer::GetChannelForEpgTag(con
   if (!epgTag)
     return {};
 
-  const CPVRChannelGroups* groups = epgTag->IsRadio() ? m_groupsRadio : m_groupsTV;
-  return groups->GetGroupAll()->GetByUniqueID(epgTag->UniqueChannelID(), epgTag->ClientID());
+  return Get(epgTag->IsRadio())->GetGroupAll()->GetByUniqueID(epgTag->UniqueChannelID(), epgTag->ClientID());
 }
 
 std::shared_ptr<CPVRChannel> CPVRChannelGroupsContainer::GetByPath(const std::string& strPath) const
 {
-  const std::shared_ptr<CPVRChannel> channel = m_groupsTV->GetByPath(strPath);
-  if (channel)
-    return channel;
+  const CPVRChannelsPath path(strPath);
+  if (path.IsValid())
+    return Get(path.IsRadio())->GetByPath(path);
 
-  return m_groupsRadio->GetByPath(strPath);
+  return {};
 }
 
 CPVRChannelGroupPtr CPVRChannelGroupsContainer::GetSelectedGroup(bool bRadio) const
diff --git a/xbmc/pvr/channels/PVRChannelsPath.cpp b/xbmc/pvr/channels/PVRChannelsPath.cpp
new file mode 100644
index 000000000000..c73b3916d509
--- /dev/null
+++ b/xbmc/pvr/channels/PVRChannelsPath.cpp
@@ -0,0 +1,169 @@
+/*
+ *  Copyright (C) 2012-2018 Team Kodi
+ *  This file is part of Kodi - https://kodi.tv
+ *
+ *  SPDX-License-Identifier: GPL-2.0-or-later
+ *  See LICENSES/README.md for more information.
+ */
+
+#include "PVRChannelsPath.h"
+
+#include "URL.h"
+#include "utils/StringUtils.h"
+#include "utils/URIUtils.h"
+#include "utils/log.h"
+
+#include <string>
+#include <vector>
+
+using namespace PVR;
+
+const std::string CPVRChannelsPath::PATH_TV_CHANNELS = "pvr://channels/tv/";
+const std::string CPVRChannelsPath::PATH_RADIO_CHANNELS = "pvr://channels/radio/";
+
+
+CPVRChannelsPath::CPVRChannelsPath(const std::string& strPath)
+{
+  std::string strVarPath = TrimSlashes(strPath);
+  const std::vector<std::string> segments = URIUtils::SplitPath(strVarPath);
+
+  for (const std::string& segment : segments)
+  {
+    switch (m_kind)
+    {
+      case Kind::INVALID:
+        if (segment == "pvr://")
+          m_kind = Kind::PROTO; // pvr:// followed by something => go on
+        else if (segment == "pvr:" && segments.size() == 1) // just pvr:// => invalid
+          strVarPath = "pvr:/";
+        break;
+
+      case Kind::PROTO:
+        if (segment == "channels")
+          m_kind = Kind::EMPTY; // pvr://channels
+        else
+          m_kind = Kind::INVALID;
+        break;
+
+      case Kind::EMPTY:
+        if (segment == "tv" || segment == "radio")
+        {
+          m_kind = Kind::ROOT; // pvr://channels/(tv|radio)
+          m_bRadio = (segment == "radio");
+        }
+        else
+        {
+          CLog::LogF(LOGERROR, "Invalid channels path '%s' - channel root segment syntax error.", strPath.c_str());
+          m_kind = Kind::INVALID;
+        }
+        break;
+
+      case Kind::ROOT:
+        m_kind = Kind::GROUP; // pvr://channels/(tv|radio)/<groupname>
+        m_group = CURL::Decode(segment);
+        break;
+
+      case Kind::GROUP:
+      {
+        std::vector<std::string> tokens = StringUtils::Split(segment, "_");
+        if (tokens.size() == 2)
+        {
+          m_clientID = tokens[0];
+          tokens = StringUtils::Split(tokens[1], ".");
+          if (tokens.size() == 2 && tokens[1] == "pvr")
+          {
+            std::string channelUID = tokens[0];
+            if (!channelUID.empty() && channelUID.find_first_not_of("0123456789") == std::string::npos)
+              m_iChannelUID = std::atoi(channelUID.c_str());
+          }
+        }
+
+        if (!m_clientID.empty() && m_iChannelUID >= 0)
+        {
+          m_kind = Kind::CHANNEL; // pvr://channels/(tv|radio)/<groupname>/<addonid>_<channeluid>.pvr
+        }
+        else
+        {
+          CLog::LogF(LOGERROR, "Invalid channels path '%s' - channel segment syntax error.", strPath.c_str());
+          m_kind = Kind::INVALID;
+        }
+        break;
+      }
+
+      case Kind::CHANNEL:
+        CLog::LogF(LOGERROR, "Invalid channels path '%s' - too many path segments.", strPath.c_str());
+        m_kind = Kind::INVALID; // too many segments
+        break;
+    }
+
+    if (m_kind == Kind::INVALID)
+      break;
+  }
+
+  // append slash to all folders
+  if (m_kind < Kind::CHANNEL)
+    strVarPath.append("/");
+
+  m_path = strVarPath;
+}
+
+CPVRChannelsPath::CPVRChannelsPath(bool bRadio, bool bHidden, const std::string& strGroupName)
+  : m_bRadio(bRadio)
+{
+  if (!bHidden && strGroupName.empty())
+    m_kind = Kind::EMPTY;
+  else
+    m_kind = Kind::GROUP;
+
+  m_group = bHidden ? ".hidden" : strGroupName;
+  m_path = StringUtils::Format("pvr://channels/%s/%s", bRadio ? "radio" : "tv", CURL::Encode(m_group).c_str());
+
+  if (!m_group.empty())
+    m_path.append("/");
+}
+
+CPVRChannelsPath::CPVRChannelsPath(bool bRadio, const std::string& strGroupName)
+  : m_bRadio(bRadio)
+{
+  if (strGroupName.empty())
+    m_kind = Kind::EMPTY;
+  else
+    m_kind = Kind::GROUP;
+
+  m_group = strGroupName;
+  m_path = StringUtils::Format("pvr://channels/%s/%s", bRadio ? "radio" : "tv", CURL::Encode(m_group).c_str());
+
+  if (!m_group.empty())
+    m_path.append("/");
+}
+
+CPVRChannelsPath::CPVRChannelsPath(bool bRadio, const std::string& strGroupName, const std::string& strClientID, int iChannelUID)
+  : m_bRadio(bRadio)
+{
+  if (!strGroupName.empty() && !strClientID.empty() && iChannelUID >= 0)
+  {
+    m_kind = Kind::CHANNEL;
+    m_group = strGroupName;
+    m_clientID = strClientID;
+    m_iChannelUID = iChannelUID;
+    m_path = StringUtils::Format("pvr://channels/%s/%s/%s_%d.pvr",
+                                 bRadio ? "radio" : "tv", CURL::Encode(m_group).c_str(), m_clientID.c_str(), m_iChannelUID);
+  }
+}
+
+bool CPVRChannelsPath::IsHiddenChannelGroup() const
+{
+  return m_kind == Kind::GROUP && m_group == ".hidden";
+}
+
+std::string CPVRChannelsPath::TrimSlashes(const std::string& strString)
+{
+  std::string strTrimmed = strString;
+  while (!strTrimmed.empty() && strTrimmed.front() == '/')
+    strTrimmed.erase(0, 1);
+
+  while (!strTrimmed.empty() && strTrimmed.back() == '/')
+    strTrimmed.pop_back();
+
+  return strTrimmed;
+}
diff --git a/xbmc/pvr/channels/PVRChannelsPath.h b/xbmc/pvr/channels/PVRChannelsPath.h
new file mode 100644
index 000000000000..19e0a64ce6e7
--- /dev/null
+++ b/xbmc/pvr/channels/PVRChannelsPath.h
@@ -0,0 +1,67 @@
+/*
+ *  Copyright (C) 2012-2018 Team Kodi
+ *  This file is part of Kodi - https://kodi.tv
+ *
+ *  SPDX-License-Identifier: GPL-2.0-or-later
+ *  See LICENSES/README.md for more information.
+ */
+
+#pragma once
+
+#include <string>
+
+class CDateTime;
+
+namespace PVR
+{
+  class CPVRChannelsPath
+  {
+  public:
+    static const std::string PATH_TV_CHANNELS;
+    static const std::string PATH_RADIO_CHANNELS;
+
+    explicit CPVRChannelsPath(const std::string& strPath);
+    CPVRChannelsPath(bool bRadio, const std::string& strGroupName);
+    CPVRChannelsPath(bool bRadio, bool bHidden, const std::string& strGroupName);
+    CPVRChannelsPath(bool bRadio, const std::string& strGroupName, const std::string& strClientID, int iChannelUID);
+
+    operator std::string() const { return m_path; }
+    bool operator ==(const CPVRChannelsPath& right) const { return m_path == right.m_path; }
+    bool operator !=(const CPVRChannelsPath& right) const { return !(*this == right); }
+
+    bool IsValid() const { return m_kind > Kind::PROTO; }
+
+    bool IsEmpty() const { return m_kind == Kind::EMPTY; }
+    bool IsChannelsRoot() const { return m_kind == Kind::ROOT; }
+    bool IsChannelGroup() const { return m_kind == Kind::GROUP; }
+    bool IsChannel() const { return m_kind == Kind::CHANNEL; }
+
+    bool IsHiddenChannelGroup() const;
+
+    bool IsRadio() const { return m_bRadio; }
+
+    const std::string& GetGroupName() const { return m_group; }
+    const std::string& GetClientID() const { return m_clientID; }
+    int GetChannelUID() const { return m_iChannelUID; }
+
+  private:
+    static std::string TrimSlashes(const std::string& strString);
+
+    enum class Kind
+    {
+      INVALID,
+      PROTO,
+      EMPTY,
+      ROOT,
+      GROUP,
+      CHANNEL,
+    };
+
+    Kind m_kind = Kind::INVALID;
+    bool m_bRadio = false;;
+    std::string m_path;
+    std::string m_group;
+    std::string m_clientID;
+    int m_iChannelUID = -1;
+  };
+}
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.cpp b/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.cpp
index 857902d67be6..d6aa404e148c 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.cpp
+++ b/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.cpp
@@ -170,7 +170,7 @@ bool CGUIDialogPVRGroupManager::ActionButtonRenameGroup(CGUIMessage &message)
       if (!strGroupName.empty())
       {
         ClearSelectedGroupsThumbnail();
-        m_selectedGroup->SetGroupName(strGroupName, true);
+        m_selectedGroup->SetGroupName(strGroupName);
         Update();
       }
     }
diff --git a/xbmc/pvr/windows/GUIWindowPVRChannels.cpp b/xbmc/pvr/windows/GUIWindowPVRChannels.cpp
index 3398fc5b3148..b97116fdf282 100644
--- a/xbmc/pvr/windows/GUIWindowPVRChannels.cpp
+++ b/xbmc/pvr/windows/GUIWindowPVRChannels.cpp
@@ -27,6 +27,7 @@
 #include "pvr/channels/PVRChannel.h"
 #include "pvr/channels/PVRChannelGroup.h"
 #include "pvr/channels/PVRChannelGroupsContainer.h"
+#include "pvr/channels/PVRChannelsPath.h"
 #include "pvr/dialogs/GUIDialogPVRChannelManager.h"
 #include "pvr/dialogs/GUIDialogPVRGroupManager.h"
 #include "pvr/epg/Epg.h"
@@ -351,8 +352,7 @@ CGUIWindowPVRTVChannels::CGUIWindowPVRTVChannels()
 
 std::string CGUIWindowPVRTVChannels::GetDirectoryPath()
 {
-  return StringUtils::Format("pvr://channels/tv/%s/",
-                             m_bShowHiddenChannels ? ".hidden" : GetChannelGroup()->GroupName().c_str());
+  return CPVRChannelsPath(false, m_bShowHiddenChannels, GetChannelGroup()->GroupName());
 }
 
 CGUIWindowPVRRadioChannels::CGUIWindowPVRRadioChannels()
@@ -362,6 +362,5 @@ CGUIWindowPVRRadioChannels::CGUIWindowPVRRadioChannels()
 
 std::string CGUIWindowPVRRadioChannels::GetDirectoryPath()
 {
-  return StringUtils::Format("pvr://channels/radio/%s/",
-                             m_bShowHiddenChannels ? ".hidden" : GetChannelGroup()->GroupName().c_str());
+  return CPVRChannelsPath(true, m_bShowHiddenChannels, GetChannelGroup()->GroupName());
 }
diff --git a/xbmc/utils/URIUtils.cpp b/xbmc/utils/URIUtils.cpp
index 5bbef5079480..f0f84e45173f 100644
--- a/xbmc/utils/URIUtils.cpp
+++ b/xbmc/utils/URIUtils.cpp
@@ -13,6 +13,7 @@
 #include "filesystem/SpecialProtocol.h"
 #include "filesystem/StackDirectory.h"
 #include "network/DNSNameCache.h"
+#include "pvr/channels/PVRChannelsPath.h"
 #include "settings/AdvancedSettings.h"
 #include "URL.h"
 #include "utils/FileExtensionProvider.h"
@@ -29,6 +30,7 @@
 #include <netinet/in.h>
 #include <arpa/inet.h>
 
+using namespace PVR;
 using namespace XFILE;
 
 const CAdvancedSettings* URIUtils::m_advancedSettings = nullptr;
@@ -964,7 +966,15 @@ bool URIUtils::IsPVRChannel(const std::string& strFile)
   if (IsStack(strFile))
     return IsPVRChannel(CStackDirectory::GetFirstStackedFile(strFile));
 
-  return StringUtils::StartsWithNoCase(strFile, "pvr://channels");
+  return IsProtocol(strFile, "pvr") && CPVRChannelsPath(strFile).IsChannel();
+}
+
+bool URIUtils::IsPVRChannelGroup(const std::string& strFile)
+{
+  if (IsStack(strFile))
+    return IsPVRChannelGroup(CStackDirectory::GetFirstStackedFile(strFile));
+
+  return IsProtocol(strFile, "pvr") && CPVRChannelsPath(strFile).IsChannelGroup();
 }
 
 bool URIUtils::IsPVRGuideItem(const std::string& strFile)
diff --git a/xbmc/utils/URIUtils.h b/xbmc/utils/URIUtils.h
index 5794149cd3a0..f10e4a204283 100644
--- a/xbmc/utils/URIUtils.h
+++ b/xbmc/utils/URIUtils.h
@@ -154,6 +154,7 @@ class URIUtils
   static bool IsLibraryContent(const std::string& strFile);
   static bool IsPVR(const std::string& strFile);
   static bool IsPVRChannel(const std::string& strFile);
+  static bool IsPVRChannelGroup(const std::string& strFile);
   static bool IsPVRGuideItem(const std::string& strFile);
   static bool IsUsingFastSwitch(const std::string& strFile);
 

From c36b4bb8e5228dced5a1e8aad7da7999993e4dcf Mon Sep 17 00:00:00 2001
From: Arne Morten Kvarving <spiff@kodi.tv>
Date: Fri, 12 Jul 2019 10:46:20 +0200
Subject: [PATCH 4/4] [PVR] CPVRChannelsPath: add unittests

---
 cmake/treedata/common/tests.txt               |   1 +
 xbmc/pvr/channels/test/CMakeLists.txt         |   4 +
 .../pvr/channels/test/TestPVRChannelsPath.cpp | 403 ++++++++++++++++++
 3 files changed, 408 insertions(+)
 create mode 100644 xbmc/pvr/channels/test/CMakeLists.txt
 create mode 100644 xbmc/pvr/channels/test/TestPVRChannelsPath.cpp

diff --git a/cmake/treedata/common/tests.txt b/cmake/treedata/common/tests.txt
index 415eae63e3cb..9573812a5a18 100644
--- a/cmake/treedata/common/tests.txt
+++ b/cmake/treedata/common/tests.txt
@@ -5,6 +5,7 @@ xbmc/interfaces/python/test       test/python
 xbmc/music/tags/test              test/music_tags
 xbmc/network/test                 test/network
 xbmc/playlists/test               test/playlists
+xbmc/pvr/channels/test            test/pvrchannels
 xbmc/test                         test
 xbmc/threads/test                 test/threads
 xbmc/utils/test                   test/utils
diff --git a/xbmc/pvr/channels/test/CMakeLists.txt b/xbmc/pvr/channels/test/CMakeLists.txt
new file mode 100644
index 000000000000..d88bab854a60
--- /dev/null
+++ b/xbmc/pvr/channels/test/CMakeLists.txt
@@ -0,0 +1,4 @@
+set(SOURCES TestPVRChannelsPath.cpp)
+set(HEADERS)
+
+core_add_test_library(pvrchannels_test)
diff --git a/xbmc/pvr/channels/test/TestPVRChannelsPath.cpp b/xbmc/pvr/channels/test/TestPVRChannelsPath.cpp
new file mode 100644
index 000000000000..c4f8bcc47762
--- /dev/null
+++ b/xbmc/pvr/channels/test/TestPVRChannelsPath.cpp
@@ -0,0 +1,403 @@
+/*
+ *  Copyright (C) 2005-2018 Team Kodi
+ *  This file is part of Kodi - https://kodi.tv
+ *
+ *  SPDX-License-Identifier: GPL-2.0-or-later
+ *  See LICENSES/README.md for more information.
+ */
+
+#include "pvr/channels/PVRChannelsPath.h"
+
+#include <gtest/gtest.h>
+
+TEST(TestPVRChannelsPath, Parse_Protocol)
+{
+  // pvr protocol is generally fine, but not sufficient for channels pvr paths - component is missing for that.
+  PVR::CPVRChannelsPath path("pvr://");
+
+  EXPECT_FALSE(path.IsValid());
+}
+
+TEST(TestPVRChannelsPath, Parse_Component_1)
+{
+  PVR::CPVRChannelsPath path("pvr://channels");
+
+  EXPECT_EQ(static_cast<std::string>(path), "pvr://channels/");
+  EXPECT_TRUE(path.IsValid());
+  EXPECT_TRUE(path.IsEmpty());
+}
+
+TEST(TestPVRChannelsPath, Parse_Component_2)
+{
+  PVR::CPVRChannelsPath path("pvr://channels/");
+
+  EXPECT_EQ(static_cast<std::string>(path), "pvr://channels/");
+  EXPECT_TRUE(path.IsValid());
+  EXPECT_TRUE(path.IsEmpty());
+}
+
+TEST(TestPVRChannelsPath, Parse_Invalid_Component)
+{
+  PVR::CPVRChannelsPath path("pvr://foo/");
+
+  EXPECT_FALSE(path.IsValid());
+}
+
+TEST(TestPVRChannelsPath, Parse_TV_Root_1)
+{
+  PVR::CPVRChannelsPath path("pvr://channels/tv");
+
+  EXPECT_EQ(static_cast<std::string>(path), "pvr://channels/tv/");
+  EXPECT_TRUE(path.IsValid());
+  EXPECT_FALSE(path.IsEmpty());
+  EXPECT_FALSE(path.IsRadio());
+  EXPECT_TRUE(path.IsChannelsRoot());
+  EXPECT_FALSE(path.IsChannelGroup());
+  EXPECT_FALSE(path.IsHiddenChannelGroup());
+  EXPECT_FALSE(path.IsChannel());
+  EXPECT_EQ(path.GetGroupName(), "");
+  EXPECT_EQ(path.GetClientID(), "");
+  EXPECT_EQ(path.GetChannelUID(), -1);
+}
+
+TEST(TestPVRChannelsPath, Parse_TV_Root_2)
+{
+  PVR::CPVRChannelsPath path("pvr://channels/tv/");
+
+  EXPECT_EQ(static_cast<std::string>(path), "pvr://channels/tv/");
+  EXPECT_TRUE(path.IsValid());
+  EXPECT_FALSE(path.IsEmpty());
+  EXPECT_FALSE(path.IsRadio());
+  EXPECT_TRUE(path.IsChannelsRoot());
+  EXPECT_FALSE(path.IsChannelGroup());
+  EXPECT_FALSE(path.IsHiddenChannelGroup());
+  EXPECT_FALSE(path.IsChannel());
+  EXPECT_EQ(path.GetGroupName(), "");
+  EXPECT_EQ(path.GetClientID(), "");
+  EXPECT_EQ(path.GetChannelUID(), -1);
+}
+
+TEST(TestPVRChannelsPath, Parse_Radio_Root_1)
+{
+  PVR::CPVRChannelsPath path("pvr://channels/radio");
+
+  EXPECT_EQ(static_cast<std::string>(path), "pvr://channels/radio/");
+  EXPECT_TRUE(path.IsValid());
+  EXPECT_FALSE(path.IsEmpty());
+  EXPECT_TRUE(path.IsRadio());
+  EXPECT_TRUE(path.IsChannelsRoot());
+  EXPECT_FALSE(path.IsChannelGroup());
+  EXPECT_FALSE(path.IsHiddenChannelGroup());
+  EXPECT_FALSE(path.IsChannel());
+  EXPECT_EQ(path.GetGroupName(), "");
+  EXPECT_EQ(path.GetClientID(), "");
+  EXPECT_EQ(path.GetChannelUID(), -1);
+}
+
+TEST(TestPVRChannelsPath, Parse_Radio_Root_2)
+{
+  PVR::CPVRChannelsPath path("pvr://channels/radio/");
+
+  EXPECT_EQ(static_cast<std::string>(path), "pvr://channels/radio/");
+  EXPECT_TRUE(path.IsValid());
+  EXPECT_FALSE(path.IsEmpty());
+  EXPECT_TRUE(path.IsRadio());
+  EXPECT_TRUE(path.IsChannelsRoot());
+  EXPECT_FALSE(path.IsChannelGroup());
+  EXPECT_FALSE(path.IsHiddenChannelGroup());
+  EXPECT_FALSE(path.IsChannel());
+  EXPECT_EQ(path.GetGroupName(), "");
+  EXPECT_EQ(path.GetClientID(), "");
+  EXPECT_EQ(path.GetChannelUID(), -1);
+}
+
+TEST(TestPVRChannelsPath, Parse_Invalid_Root)
+{
+  PVR::CPVRChannelsPath path("pvr://channels/foo");
+
+  EXPECT_FALSE(path.IsValid());
+}
+
+TEST(TestPVRChannelsPath, Parse_TV_Group_1)
+{
+  PVR::CPVRChannelsPath path("pvr://channels/tv/Group1");
+
+  EXPECT_EQ(static_cast<std::string>(path), "pvr://channels/tv/Group1/");
+  EXPECT_TRUE(path.IsValid());
+  EXPECT_FALSE(path.IsEmpty());
+  EXPECT_FALSE(path.IsRadio());
+  EXPECT_FALSE(path.IsChannelsRoot());
+  EXPECT_TRUE(path.IsChannelGroup());
+  EXPECT_FALSE(path.IsHiddenChannelGroup());
+  EXPECT_FALSE(path.IsChannel());
+  EXPECT_EQ(path.GetGroupName(), "Group1");
+  EXPECT_EQ(path.GetClientID(), "");
+  EXPECT_EQ(path.GetChannelUID(), -1);
+}
+
+TEST(TestPVRChannelsPath, Parse_TV_Group_2)
+{
+  PVR::CPVRChannelsPath path("pvr://channels/tv/Group1/");
+
+  EXPECT_EQ(static_cast<std::string>(path), "pvr://channels/tv/Group1/");
+  EXPECT_TRUE(path.IsValid());
+  EXPECT_FALSE(path.IsEmpty());
+  EXPECT_FALSE(path.IsRadio());
+  EXPECT_FALSE(path.IsChannelsRoot());
+  EXPECT_TRUE(path.IsChannelGroup());
+  EXPECT_FALSE(path.IsHiddenChannelGroup());
+  EXPECT_FALSE(path.IsChannel());
+  EXPECT_EQ(path.GetGroupName(), "Group1");
+  EXPECT_EQ(path.GetClientID(), "");
+  EXPECT_EQ(path.GetChannelUID(), -1);
+}
+
+TEST(TestPVRChannelsPath, Parse_Hidden_TV_Group)
+{
+  PVR::CPVRChannelsPath path("pvr://channels/tv/.hidden");
+
+  EXPECT_EQ(static_cast<std::string>(path), "pvr://channels/tv/.hidden/");
+  EXPECT_TRUE(path.IsValid());
+  EXPECT_FALSE(path.IsEmpty());
+  EXPECT_FALSE(path.IsRadio());
+  EXPECT_FALSE(path.IsChannelsRoot());
+  EXPECT_TRUE(path.IsChannelGroup());
+  EXPECT_TRUE(path.IsHiddenChannelGroup());
+  EXPECT_FALSE(path.IsChannel());
+  EXPECT_EQ(path.GetGroupName(), ".hidden");
+  EXPECT_EQ(path.GetClientID(), "");
+  EXPECT_EQ(path.GetChannelUID(), -1);
+}
+
+TEST(TestPVRChannelsPath, Parse_Special_TV_Group)
+{
+  PVR::CPVRChannelsPath path("pvr://channels/tv/foo%2Fbar%20baz");
+
+  EXPECT_EQ(static_cast<std::string>(path), "pvr://channels/tv/foo%2Fbar%20baz/");
+  EXPECT_TRUE(path.IsValid());
+  EXPECT_FALSE(path.IsEmpty());
+  EXPECT_FALSE(path.IsRadio());
+  EXPECT_FALSE(path.IsChannelsRoot());
+  EXPECT_TRUE(path.IsChannelGroup());
+  EXPECT_FALSE(path.IsHiddenChannelGroup());
+  EXPECT_FALSE(path.IsChannel());
+  EXPECT_EQ(path.GetGroupName(), "foo/bar baz");
+  EXPECT_EQ(path.GetClientID(), "");
+  EXPECT_EQ(path.GetChannelUID(), -1);
+}
+
+TEST(TestPVRChannelsPath, Parse_Invalid_Special_TV_Group)
+{
+  // special chars in group name not escaped
+  PVR::CPVRChannelsPath path("pvr://channels/tv/foo/bar baz");
+
+  EXPECT_FALSE(path.IsValid());
+}
+
+TEST(TestPVRChannelsPath, Parse_Radio_Group)
+{
+  PVR::CPVRChannelsPath path("pvr://channels/radio/Group1");
+
+  EXPECT_EQ(static_cast<std::string>(path), "pvr://channels/radio/Group1/");
+  EXPECT_TRUE(path.IsValid());
+  EXPECT_FALSE(path.IsEmpty());
+  EXPECT_TRUE(path.IsRadio());
+  EXPECT_FALSE(path.IsChannelsRoot());
+  EXPECT_TRUE(path.IsChannelGroup());
+  EXPECT_FALSE(path.IsHiddenChannelGroup());
+  EXPECT_FALSE(path.IsChannel());
+  EXPECT_EQ(path.GetGroupName(), "Group1");
+  EXPECT_EQ(path.GetClientID(), "");
+  EXPECT_EQ(path.GetChannelUID(), -1);
+}
+
+TEST(TestPVRChannelsPath, Parse_TV_Channel)
+{
+  PVR::CPVRChannelsPath path("pvr://channels/tv/Group1/pvr.demo_4711.pvr");
+
+  EXPECT_EQ(static_cast<std::string>(path), "pvr://channels/tv/Group1/pvr.demo_4711.pvr");
+  EXPECT_TRUE(path.IsValid());
+  EXPECT_FALSE(path.IsEmpty());
+  EXPECT_FALSE(path.IsRadio());
+  EXPECT_FALSE(path.IsChannelsRoot());
+  EXPECT_FALSE(path.IsChannelGroup());
+  EXPECT_FALSE(path.IsHiddenChannelGroup());
+  EXPECT_TRUE(path.IsChannel());
+  EXPECT_EQ(path.GetGroupName(), "Group1");
+  EXPECT_EQ(path.GetClientID(), "pvr.demo");
+  EXPECT_EQ(path.GetChannelUID(), 4711);
+}
+
+TEST(TestPVRChannelsPath, Parse_Invalid_TV_Channel_1)
+{
+  // trailing ".pvr" missing
+  PVR::CPVRChannelsPath path("pvr://channels/radio/Group1/pvr.demo_4711");
+
+  EXPECT_FALSE(path.IsValid());
+}
+
+TEST(TestPVRChannelsPath, Parse_Invalid_TV_Channel_2)
+{
+  // '-' instead of '_' as clientid / channeluid delimiter
+  PVR::CPVRChannelsPath path("pvr://channels/radio/Group1/pvr.demo-4711.pvr");
+
+  EXPECT_FALSE(path.IsValid());
+}
+
+TEST(TestPVRChannelsPath, Parse_Invalid_TV_Channel_3)
+{
+  // channeluid not numerical
+  PVR::CPVRChannelsPath path("pvr://channels/radio/Group1/pvr.demo_abc4711.pvr");
+
+  EXPECT_FALSE(path.IsValid());
+}
+
+TEST(TestPVRChannelsPath, Parse_Invalid_TV_Channel_4)
+{
+  // channeluid not positive or zero
+  PVR::CPVRChannelsPath path("pvr://channels/radio/Group1/pvr.demo_-4711.pvr");
+
+  EXPECT_FALSE(path.IsValid());
+}
+
+TEST(TestPVRChannelsPath, Parse_Invalid_TV_Channel_5)
+{
+  // empty clientid
+  PVR::CPVRChannelsPath path("pvr://channels/radio/Group1/_4711.pvr");
+
+  EXPECT_FALSE(path.IsValid());
+}
+
+TEST(TestPVRChannelsPath, Parse_Invalid_TV_Channel_6)
+{
+  // empty channeluid
+  PVR::CPVRChannelsPath path("pvr://channels/radio/Group1/pvr.demo_.pvr");
+
+  EXPECT_FALSE(path.IsValid());
+}
+
+TEST(TestPVRChannelsPath, Parse_Invalid_TV_Channel_7)
+{
+  // empty clientid and empty channeluid
+  PVR::CPVRChannelsPath path("pvr://channels/radio/Group1/_.pvr");
+
+  EXPECT_FALSE(path.IsValid());
+}
+
+TEST(TestPVRChannelsPath, Parse_Invalid_TV_Channel_8)
+{
+  // empty clientid and empty channeluid, only extension ".pvr" given
+  PVR::CPVRChannelsPath path("pvr://channels/radio/Group1/.pvr");
+
+  EXPECT_FALSE(path.IsValid());
+}
+
+TEST(TestPVRChannelsPath, TV_Channelgroup)
+{
+  PVR::CPVRChannelsPath path(false, "Group1");
+
+  EXPECT_EQ(static_cast<std::string>(path), "pvr://channels/tv/Group1/");
+  EXPECT_TRUE(path.IsValid());
+  EXPECT_FALSE(path.IsEmpty());
+  EXPECT_FALSE(path.IsRadio());
+  EXPECT_FALSE(path.IsChannelsRoot());
+  EXPECT_TRUE(path.IsChannelGroup());
+  EXPECT_FALSE(path.IsHiddenChannelGroup());
+  EXPECT_FALSE(path.IsChannel());
+  EXPECT_EQ(path.GetGroupName(), "Group1");
+  EXPECT_EQ(path.GetClientID(), "");
+  EXPECT_EQ(path.GetChannelUID(), -1);
+}
+
+TEST(TestPVRChannelsPath, Radio_Channelgroup)
+{
+  PVR::CPVRChannelsPath path(true, "Group1");
+
+  EXPECT_EQ(static_cast<std::string>(path), "pvr://channels/radio/Group1/");
+  EXPECT_TRUE(path.IsValid());
+  EXPECT_FALSE(path.IsEmpty());
+  EXPECT_TRUE(path.IsRadio());
+  EXPECT_FALSE(path.IsChannelsRoot());
+  EXPECT_TRUE(path.IsChannelGroup());
+  EXPECT_FALSE(path.IsHiddenChannelGroup());
+  EXPECT_FALSE(path.IsChannel());
+  EXPECT_EQ(path.GetGroupName(), "Group1");
+  EXPECT_EQ(path.GetClientID(), "");
+  EXPECT_EQ(path.GetChannelUID(), -1);
+}
+
+TEST(TestPVRChannelsPath, Hidden_TV_Channelgroup)
+{
+  PVR::CPVRChannelsPath path(false, true, "Group1");
+
+  EXPECT_EQ(static_cast<std::string>(path), "pvr://channels/tv/.hidden/");
+  EXPECT_TRUE(path.IsValid());
+  EXPECT_FALSE(path.IsEmpty());
+  EXPECT_FALSE(path.IsRadio());
+  EXPECT_FALSE(path.IsChannelsRoot());
+  EXPECT_TRUE(path.IsChannelGroup());
+  EXPECT_TRUE(path.IsHiddenChannelGroup());
+  EXPECT_FALSE(path.IsChannel());
+  EXPECT_EQ(path.GetGroupName(), ".hidden");
+  EXPECT_EQ(path.GetClientID(), "");
+  EXPECT_EQ(path.GetChannelUID(), -1);
+}
+
+TEST(TestPVRChannelsPath, Hidden_Radio_Channelgroup)
+{
+  PVR::CPVRChannelsPath path(true, true, "Group1");
+
+  EXPECT_EQ(static_cast<std::string>(path), "pvr://channels/radio/.hidden/");
+  EXPECT_TRUE(path.IsValid());
+  EXPECT_FALSE(path.IsEmpty());
+  EXPECT_TRUE(path.IsRadio());
+  EXPECT_FALSE(path.IsChannelsRoot());
+  EXPECT_TRUE(path.IsChannelGroup());
+  EXPECT_TRUE(path.IsHiddenChannelGroup());
+  EXPECT_FALSE(path.IsChannel());
+  EXPECT_EQ(path.GetGroupName(), ".hidden");
+  EXPECT_EQ(path.GetClientID(), "");
+  EXPECT_EQ(path.GetChannelUID(), -1);
+}
+
+TEST(TestPVRChannelsPath, TV_Channel)
+{
+  PVR::CPVRChannelsPath path(false, "Group1", "pvr.demo", 4711);
+
+  EXPECT_EQ(static_cast<std::string>(path), "pvr://channels/tv/Group1/pvr.demo_4711.pvr");
+  EXPECT_TRUE(path.IsValid());
+  EXPECT_FALSE(path.IsEmpty());
+  EXPECT_FALSE(path.IsRadio());
+  EXPECT_FALSE(path.IsChannelsRoot());
+  EXPECT_FALSE(path.IsChannelGroup());
+  EXPECT_FALSE(path.IsHiddenChannelGroup());
+  EXPECT_TRUE(path.IsChannel());
+  EXPECT_EQ(path.GetGroupName(), "Group1");
+  EXPECT_EQ(path.GetClientID(), "pvr.demo");
+  EXPECT_EQ(path.GetChannelUID(), 4711);
+}
+
+TEST(TestPVRChannelsPath, Radio_Channel)
+{
+  PVR::CPVRChannelsPath path(true, "Group1", "pvr.demo", 4711);
+
+  EXPECT_EQ(static_cast<std::string>(path), "pvr://channels/radio/Group1/pvr.demo_4711.pvr");
+  EXPECT_TRUE(path.IsValid());
+  EXPECT_FALSE(path.IsEmpty());
+  EXPECT_TRUE(path.IsRadio());
+  EXPECT_FALSE(path.IsChannelsRoot());
+  EXPECT_FALSE(path.IsChannelGroup());
+  EXPECT_FALSE(path.IsHiddenChannelGroup());
+  EXPECT_TRUE(path.IsChannel());
+  EXPECT_EQ(path.GetGroupName(), "Group1");
+  EXPECT_EQ(path.GetClientID(), "pvr.demo");
+  EXPECT_EQ(path.GetChannelUID(), 4711);
+}
+
+TEST(TestPVRChannelsPath, Operator_Equals)
+{
+  PVR::CPVRChannelsPath path2(true, "Group1");
+  PVR::CPVRChannelsPath path(static_cast<std::string>(path2));
+
+  EXPECT_EQ(path, path2);
+}
