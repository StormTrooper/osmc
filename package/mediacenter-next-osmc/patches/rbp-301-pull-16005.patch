From 353c8432ef4b134bebc0723860bba68b840a98f8 Mon Sep 17 00:00:00 2001
From: Kai Sommerfeld <kai.sommerfeld@gmx.com>
Date: Sun, 28 Apr 2019 11:57:49 +0200
Subject: [PATCH] [PVR] Rework epg db storage setting semantics. Default to 'do
 not store'.

---
 .../resource.language.en_gb/resources/strings.po |  6 +++---
 system/settings/settings.xml                     |  2 +-
 xbmc/pvr/PVRDatabase.cpp                         |  4 ++--
 xbmc/pvr/epg/Epg.cpp                             |  4 ++--
 xbmc/pvr/epg/EpgContainer.cpp                    | 16 ++++++++--------
 xbmc/pvr/epg/EpgContainer.h                      |  4 ++--
 xbmc/settings/Settings.cpp                       |  2 +-
 xbmc/settings/Settings.h                         |  2 +-
 8 files changed, 20 insertions(+), 20 deletions(-)

diff --git a/addons/resource.language.en_gb/resources/strings.po b/addons/resource.language.en_gb/resources/strings.po
index 33407b99ee73..da6b599f132f 100644
--- a/addons/resource.language.en_gb/resources/strings.po
+++ b/addons/resource.language.en_gb/resources/strings.po
@@ -9587,10 +9587,10 @@ msgctxt "#19071"
 msgid "Update interval"
 msgstr ""
 
-#. pvr settings "do not store epg data in local database" setting label
+#. pvr settings "store epg data in database" setting label
 #: system/settings/settings.xml
 msgctxt "#19072"
-msgid "Don't cache in local database"
+msgid "Store data in database"
 msgstr ""
 
 #. pvr settings "delay channel switch" setting label
@@ -18681,7 +18681,7 @@ msgstr ""
 
 #: system/settings/settings.xml
 msgctxt "#36223"
-msgid "By default, the guide data is cached in a local database to speed up importing on startup."
+msgid "Activate to store epg data in a database. This may speedup importing epg data on startup."
 msgstr ""
 
 #: system/settings/settings.xml
diff --git a/system/settings/settings.xml b/system/settings/settings.xml
index b924e7d8086c..9df19c2d4378 100755
--- a/system/settings/settings.xml
+++ b/system/settings/settings.xml
@@ -1391,7 +1391,7 @@
           <default>false</default>
           <control type="toggle" />
         </setting>
-        <setting id="epg.ignoredbforclient" type="boolean" label="19072" help="36223">
+        <setting id="epg.storeepgindatabase" type="boolean" label="19072" help="36223">
           <level>2</level>
           <default>false</default>
           <control type="toggle" />
diff --git a/xbmc/pvr/PVRDatabase.cpp b/xbmc/pvr/PVRDatabase.cpp
index cb3b3f22e68f..8e85d5cd8c98 100644
--- a/xbmc/pvr/PVRDatabase.cpp
+++ b/xbmc/pvr/PVRDatabase.cpp
@@ -283,7 +283,7 @@ bool CPVRDatabase::Delete(const CPVRChannel &channel)
 int CPVRDatabase::Get(CPVRChannelGroup &results, bool bCompressDB)
 {
   int iReturn(0);
-  bool bIgnoreEpgDB = CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_EPG_IGNOREDBFORCLIENT);
+  bool bUseEpgDB = CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_EPG_STOREEPGINDATABASE);
 
   std::string strQuery = PrepareSQL("SELECT channels.idChannel, channels.iUniqueId, channels.bIsRadio, channels.bIsHidden, channels.bIsUserSetIcon, channels.bIsUserSetName, "
       "channels.sIconPath, channels.sChannelName, channels.bIsVirtual, channels.bEPGEnabled, channels.sEPGScraper, channels.iLastWatched, channels.iClientId, channels.bIsLocked, "
@@ -314,7 +314,7 @@ int CPVRDatabase::Get(CPVRChannelGroup &results, bool bCompressDB)
         channel->m_strEPGScraper           = m_pDS->fv("sEPGScraper").get_asString();
         channel->m_iLastWatched            = static_cast<time_t>(m_pDS->fv("iLastWatched").get_asInt());
         channel->m_iClientId               = m_pDS->fv("iClientId").get_asInt();
-        channel->m_iEpgId                  = bIgnoreEpgDB ? -1 : m_pDS->fv("idEpg").get_asInt();
+        channel->m_iEpgId                  = bUseEpgDB ? m_pDS->fv("idEpg").get_asInt() : -1;
         channel->m_bHasArchive             = m_pDS->fv("bHasArchive").get_asBool();
         channel->UpdateEncryptionName();
 
diff --git a/xbmc/pvr/epg/Epg.cpp b/xbmc/pvr/epg/Epg.cpp
index e2a747c37f8f..7f85764e0c1b 100644
--- a/xbmc/pvr/epg/Epg.cpp
+++ b/xbmc/pvr/epg/Epg.cpp
@@ -241,7 +241,7 @@ CPVREpgInfoTagPtr CPVREpg::GetTagBetween(const CDateTime &beginTime, const CDate
     if (tag)
     {
       m_tags.insert(std::make_pair(tag->StartAsUTC(), tag));
-      UpdateEntry(tag, !CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_EPG_IGNOREDBFORCLIENT));
+      UpdateEntry(tag, CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_EPG_STOREEPGINDATABASE));
     }
   }
 
@@ -698,7 +698,7 @@ bool CPVREpg::LoadFromClients(time_t start, time_t end, bool bForceUpdate)
 
   const std::shared_ptr<CPVREpg> tmpEpg = std::make_shared<CPVREpg>(m_iEpgID, m_strName, m_strScraperName, m_channelData);
   if (tmpEpg->UpdateFromScraper(start, end, bForceUpdate))
-    bReturn = UpdateEntries(*tmpEpg, !CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_EPG_IGNOREDBFORCLIENT));
+    bReturn = UpdateEntries(*tmpEpg, CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_EPG_STOREEPGINDATABASE));
 
   return bReturn;
 }
diff --git a/xbmc/pvr/epg/EpgContainer.cpp b/xbmc/pvr/epg/EpgContainer.cpp
index 7abc52a0137c..b6cc66700b8d 100644
--- a/xbmc/pvr/epg/EpgContainer.cpp
+++ b/xbmc/pvr/epg/EpgContainer.cpp
@@ -95,7 +95,7 @@ CPVREpgContainer::CPVREpgContainer(void) :
   CThread("EPGUpdater"),
   m_database(new CPVREpgDatabase),
   m_settings({
-    CSettings::SETTING_EPG_IGNOREDBFORCLIENT,
+    CSettings::SETTING_EPG_STOREEPGINDATABASE,
     CSettings::SETTING_EPG_EPGUPDATE,
     CSettings::SETTING_EPG_FUTURE_DAYSTODISPLAY,
     CSettings::SETTING_EPG_PAST_DAYSTODISPLAY,
@@ -261,7 +261,7 @@ void CPVREpgContainer::LoadFromDB(void)
 {
   CSingleLock lock(m_critSection);
 
-  if (m_bLoaded || IgnoreDB())
+  if (m_bLoaded || !UseDatabase())
     return;
 
   bool bLoaded = true;
@@ -298,7 +298,7 @@ void CPVREpgContainer::LoadFromDB(void)
 
 bool CPVREpgContainer::PersistAll(void)
 {
-  bool bReturn = IgnoreDB();
+  bool bReturn = !UseDatabase();
 
   if (!bReturn)
   {
@@ -589,7 +589,7 @@ bool CPVREpgContainer::RemoveOldEntries(void)
     epgEntry.second->Cleanup(cleanupTime);
 
   /* remove the old entries from the database */
-  if (!IgnoreDB())
+  if (UseDatabase())
     m_database->DeleteEpgEntries(cleanupTime);
 
   CSingleLock lock(m_critSection);
@@ -615,7 +615,7 @@ bool CPVREpgContainer::DeleteEpg(const CPVREpgPtr &epg, bool bDeleteFromDatabase
     m_channelUidToEpgMap.erase(epgEntry1);
 
   CLog::LogFC(LOGDEBUG, LOGEPG, "Deleting EPG table %s (%d)", epg->Name().c_str(), epg->EpgID());
-  if (bDeleteFromDatabase && !IgnoreDB())
+  if (bDeleteFromDatabase && UseDatabase())
     m_database->Delete(*epgEntry->second);
 
   epgEntry->second->UnregisterObserver(this);
@@ -624,9 +624,9 @@ bool CPVREpgContainer::DeleteEpg(const CPVREpgPtr &epg, bool bDeleteFromDatabase
   return true;
 }
 
-bool CPVREpgContainer::IgnoreDB() const
+bool CPVREpgContainer::UseDatabase() const
 {
-  return m_settings.GetBoolValue(CSettings::SETTING_EPG_IGNOREDBFORCLIENT);
+  return m_settings.GetBoolValue(CSettings::SETTING_EPG_STOREEPGINDATABASE);
 }
 
 bool CPVREpgContainer::InterruptUpdate(void) const
@@ -686,7 +686,7 @@ bool CPVREpgContainer::UpdateEPG(bool bOnlyPending /* = false */)
 
   /* load or update all EPG tables */
   unsigned int iCounter = 0;
-  const std::shared_ptr<CPVREpgDatabase> database = IgnoreDB() ? nullptr : GetEpgDatabase();
+  const std::shared_ptr<CPVREpgDatabase> database = UseDatabase() ? GetEpgDatabase() : nullptr;
   for (const auto& epgEntry : m_epgIdToEpgMap)
   {
     if (InterruptUpdate())
diff --git a/xbmc/pvr/epg/EpgContainer.h b/xbmc/pvr/epg/EpgContainer.h
index 47fce4baa289..2d09c49e6c5f 100644
--- a/xbmc/pvr/epg/EpgContainer.h
+++ b/xbmc/pvr/epg/EpgContainer.h
@@ -147,9 +147,9 @@ namespace PVR
 
     /*!
      * @brief Check whether data should be persisted to the EPG database.
-     * @return True if data should not be persisted to the EPG database, false otherwise.
+     * @return True if data should be persisted to the EPG database, false otherwise.
      */
-    bool IgnoreDB() const;
+    bool UseDatabase() const;
 
     /*!
      * @brief Notify EPG container that there are pending manual EPG updates
diff --git a/xbmc/settings/Settings.cpp b/xbmc/settings/Settings.cpp
index 0ae68f34d47d..20b28c7bd706 100644
--- a/xbmc/settings/Settings.cpp
+++ b/xbmc/settings/Settings.cpp
@@ -207,7 +207,7 @@ const std::string CSettings::SETTING_EPG_SELECTACTION = "epg.selectaction";
 const std::string CSettings::SETTING_EPG_HIDENOINFOAVAILABLE = "epg.hidenoinfoavailable";
 const std::string CSettings::SETTING_EPG_EPGUPDATE = "epg.epgupdate";
 const std::string CSettings::SETTING_EPG_PREVENTUPDATESWHILEPLAYINGTV = "epg.preventupdateswhileplayingtv";
-const std::string CSettings::SETTING_EPG_IGNOREDBFORCLIENT = "epg.ignoredbforclient";
+const std::string CSettings::SETTING_EPG_STOREEPGINDATABASE = "epg.storeepgindatabase";
 const std::string CSettings::SETTING_EPG_RESETEPG = "epg.resetepg";
 const std::string CSettings::SETTING_PVRPLAYBACK_SWITCHTOFULLSCREEN = "pvrplayback.switchtofullscreen";
 const std::string CSettings::SETTING_PVRPLAYBACK_SIGNALQUALITY = "pvrplayback.signalquality";
diff --git a/xbmc/settings/Settings.h b/xbmc/settings/Settings.h
index d0743b32d380..7a49a1f2bcbf 100644
--- a/xbmc/settings/Settings.h
+++ b/xbmc/settings/Settings.h
@@ -170,7 +170,7 @@ class CSettings : public CSettingsBase, public CSettingCreator, public CSettingC
   static const std::string SETTING_EPG_HIDENOINFOAVAILABLE;
   static const std::string SETTING_EPG_EPGUPDATE;
   static const std::string SETTING_EPG_PREVENTUPDATESWHILEPLAYINGTV;
-  static const std::string SETTING_EPG_IGNOREDBFORCLIENT;
+  static const std::string SETTING_EPG_STOREEPGINDATABASE;
   static const std::string SETTING_EPG_RESETEPG;
   static const std::string SETTING_PVRPLAYBACK_SWITCHTOFULLSCREEN;
   static const std::string SETTING_PVRPLAYBACK_SIGNALQUALITY;
