From e4022c26f4510836f4c3ba0412042ccc841ac7f7 Mon Sep 17 00:00:00 2001
From: DaveTBlake <oak99sky@yahoo.co.uk>
Date: Sat, 7 Dec 2019 13:50:58 +0000
Subject: [PATCH] Conditional control of children of album node as discs or
 songs. Move into CMusicDatabaseDirectory so applies to both navigation
 between the library screens and to any sublists of child items on those
 screens defined in the skin.

---
 xbmc/filesystem/MusicDatabaseDirectory.cpp | 41 +++++++++++++++++
 xbmc/music/MusicDatabase.cpp               |  8 ++++
 xbmc/music/MusicDatabase.h                 |  1 +
 xbmc/music/windows/GUIWindowMusicNav.cpp   | 53 +---------------------
 4 files changed, 51 insertions(+), 52 deletions(-)

diff --git a/xbmc/filesystem/MusicDatabaseDirectory.cpp b/xbmc/filesystem/MusicDatabaseDirectory.cpp
index 1ec2307ec85a..d65482f479bb 100644
--- a/xbmc/filesystem/MusicDatabaseDirectory.cpp
+++ b/xbmc/filesystem/MusicDatabaseDirectory.cpp
@@ -15,6 +15,8 @@
 #include "guilib/LocalizeStrings.h"
 #include "guilib/TextureManager.h"
 #include "music/MusicDatabase.h"
+#include "settings/Settings.h"
+#include "settings/SettingsComponent.h"
 #include "utils/Crc32.h"
 #include "utils/LegacyPathTranslation.h"
 #include "utils/StringUtils.h"
@@ -30,6 +32,45 @@ CMusicDatabaseDirectory::~CMusicDatabaseDirectory(void) = default;
 bool CMusicDatabaseDirectory::GetDirectory(const CURL& url, CFileItemList &items)
 {
   std::string path = CLegacyPathTranslation::TranslateMusicDbPath(url);
+
+  // Adjust path to control navigation from albums to discs or directly to songs
+  CQueryParams params;
+  NODE_TYPE type;
+  NODE_TYPE childtype;
+  GetDirectoryNodeInfo(path, type, childtype, params);
+  if (childtype == NODE_TYPE_DISC)
+  {
+    bool bFlatten = false;
+    if (params.GetAlbumId() < 0)
+      bFlatten = true; // Showing *all albums next always songs
+    else
+    {
+      // Option to show discs for ordinary albums (not just boxed sets)
+      bFlatten = !CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(
+          CSettings::SETTING_MUSICLIBRARY_SHOWDISCS);
+      CMusicDatabase musicdatabase;
+      if (musicdatabase.Open())
+      {
+        if (bFlatten) // Check for boxed set
+          bFlatten = !musicdatabase.IsAlbumBoxset(params.GetAlbumId());
+        if (!bFlatten)
+        { // Check we will get more than 1 disc when path filter options applied
+          int iDiscTotal = musicdatabase.GetDiscsCount(path);
+          bFlatten = iDiscTotal <= 1;
+        }
+      }
+      musicdatabase.Close();
+    }
+    if (bFlatten)
+    { // Skip discs level and go directly to songs
+      CMusicDbUrl musicUrl;
+      if (!musicUrl.FromString(path))
+        return false;
+      musicUrl.AppendPath("-2/"); // Flattened so adjust list label etc.
+      path = musicUrl.ToString();
+    }
+  }
+
   items.SetPath(path);
   items.m_dwSize = -1;  // No size
 
diff --git a/xbmc/music/MusicDatabase.cpp b/xbmc/music/MusicDatabase.cpp
index dfc274db6e31..cdf272373da1 100644
--- a/xbmc/music/MusicDatabase.cpp
+++ b/xbmc/music/MusicDatabase.cpp
@@ -4849,6 +4849,14 @@ bool CMusicDatabase::GetDiscsByWhere(CMusicDbUrl& musicUrl,
 
   return false;
 }
+int CMusicDatabase::GetDiscsCount(const std::string& baseDir, const Filter& filter /* = Filter() */)
+{
+  int iDiscTotal = -1;
+  CFileItemList itemscount;
+  if (GetDiscsByWhere(baseDir, filter, itemscount, SortDescription(), true))
+    iDiscTotal = itemscount.GetProperty("total").asInteger();
+  return iDiscTotal;
+}
 
 bool CMusicDatabase::GetSongsFullByWhere(const std::string &baseDir, const Filter &filter, CFileItemList &items, const SortDescription &sortDescription /* = SortDescription() */, bool artistData /* = false*/)
 {
diff --git a/xbmc/music/MusicDatabase.h b/xbmc/music/MusicDatabase.h
index b40bafb72978..cb6a16fd6dab 100644
--- a/xbmc/music/MusicDatabase.h
+++ b/xbmc/music/MusicDatabase.h
@@ -478,6 +478,7 @@ class CMusicDatabase : public CDatabase
                        const SortDescription& sortDescription = SortDescription(),
                        bool countOnly = false);
   bool GetArtistsByWhere(const std::string& strBaseDir, const Filter &filter, CFileItemList& items, const SortDescription &sortDescription = SortDescription(), bool countOnly = false);
+  int GetDiscsCount(const std::string& baseDir, const Filter& filter = Filter());
   int GetSongsCount(const Filter &filter = Filter());
   bool GetFilter(CDbUrl &musicUrl, Filter &filter, SortDescription &sorting) override;
 
diff --git a/xbmc/music/windows/GUIWindowMusicNav.cpp b/xbmc/music/windows/GUIWindowMusicNav.cpp
index 6fcaa9d4646e..82b9dd966628 100644
--- a/xbmc/music/windows/GUIWindowMusicNav.cpp
+++ b/xbmc/music/windows/GUIWindowMusicNav.cpp
@@ -371,58 +371,7 @@ bool CGUIWindowMusicNav::GetDirectory(const std::string &strDirectory, CFileItem
   if (strDirectory.empty())
     AddSearchFolder();
 
-  bool bResult = false;
-  if (URIUtils::IsMusicDb(strDirectory))
-  {
-    XFILE::CMusicDatabaseDirectory dir;
-    CQueryParams params;
-    MUSICDATABASEDIRECTORY::NODE_TYPE type;
-    MUSICDATABASEDIRECTORY::NODE_TYPE childtype;
-    dir.GetDirectoryNodeInfo(strDirectory, type, childtype, params);
-
-    //Control navigation from albums to discs or directly to songs
-    if (childtype == NODE_TYPE_DISC)
-    {
-      bool bFlatten = false;
-
-      if (params.GetAlbumId() < 0)
-        bFlatten = true; // Showing *all albums next always songs
-      else
-      {
-        // Option to show discs for ordinary albums (not just boxed sets)
-        bFlatten = !CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(
-            CSettings::SETTING_MUSICLIBRARY_SHOWDISCS);
-        CMusicDatabase musicdatabase;
-        if (musicdatabase.Open())
-        {
-          if (bFlatten) // Check for boxed set
-            bFlatten = !musicdatabase.IsAlbumBoxset(params.GetAlbumId());
-          if (!bFlatten)
-          { // Check we will get more than 1 disc when filter applied
-            int iDiscTotal = -1;
-            if (musicdatabase.GetDiscsByWhere(strDirectory, CDatabase::Filter(), items,
-                                              SortDescription(), true))
-              iDiscTotal = items.GetProperty("total").asInteger();
-            bFlatten = iDiscTotal <= 1;
-          }
-        }
-        musicdatabase.Close();
-      }
-      if (bFlatten)
-      { // Skip discs level and show songs
-        CMusicDbUrl musicUrl;
-        if (!musicUrl.FromString(strDirectory))
-          return false;
-
-        musicUrl.AppendPath("-2/"); // Flattened so adjust list label etc.
-        bResult = CGUIWindowMusicBase::GetDirectory(musicUrl.ToString(), items);
-      }
-    }
-  }
-
-  if (!bResult)
-    bResult = CGUIWindowMusicBase::GetDirectory(strDirectory, items);
-
+  bool bResult = CGUIWindowMusicBase::GetDirectory(strDirectory, items);
   if (bResult)
   {
     if (items.IsPlayList())
